// Generated from dt-sql-parser/src/grammar/hive/HiveSqlParser.g4 by ANTLR 4.13.1

// @ts-nocheck

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { HiveSqlParserListener } from "./HiveSqlParserListener.js";
import { HiveSqlParserVisitor } from "./HiveSqlParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


import { SQLParserBase } from '../SQLParserBase';


export class HiveSqlParser extends SQLParserBase {
    public static readonly KW_ABORT = 1;
    public static readonly KW_ACTIVATE = 2;
    public static readonly KW_ACTIVE = 3;
    public static readonly KW_ADD = 4;
    public static readonly KW_ADMIN = 5;
    public static readonly KW_AFTER = 6;
    public static readonly KW_ALL = 7;
    public static readonly KW_ALLOC_FRACTION = 8;
    public static readonly KW_ALTER = 9;
    public static readonly KW_ANALYZE = 10;
    public static readonly KW_AND = 11;
    public static readonly KW_ANTI = 12;
    public static readonly KW_ANY = 13;
    public static readonly KW_APPLICATION = 14;
    public static readonly KW_ARCHIVE = 15;
    public static readonly KW_ARRAY = 16;
    public static readonly KW_AS = 17;
    public static readonly KW_ASC = 18;
    public static readonly KW_AST = 19;
    public static readonly KW_AT = 20;
    public static readonly KW_AUTHORIZATION = 21;
    public static readonly KW_AUTOCOMMIT = 22;
    public static readonly KW_BATCH = 23;
    public static readonly KW_BEFORE = 24;
    public static readonly KW_BETWEEN = 25;
    public static readonly KW_BIGINT = 26;
    public static readonly KW_BINARY = 27;
    public static readonly KW_BOOLEAN = 28;
    public static readonly KW_BOTH = 29;
    public static readonly KW_BUCKET = 30;
    public static readonly KW_BUCKETS = 31;
    public static readonly KW_BY = 32;
    public static readonly KW_CACHE = 33;
    public static readonly KW_CASCADE = 34;
    public static readonly KW_CASE = 35;
    public static readonly KW_CAST = 36;
    public static readonly KW_CBO = 37;
    public static readonly KW_CHANGE = 38;
    public static readonly KW_CHAR = 39;
    public static readonly KW_CHECK = 40;
    public static readonly KW_CLUSTER = 41;
    public static readonly KW_CLUSTERED = 42;
    public static readonly KW_CLUSTERSTATUS = 43;
    public static readonly KW_COLLECTION = 44;
    public static readonly KW_COLUMN = 45;
    public static readonly KW_COLUMNS = 46;
    public static readonly KW_COMMENT = 47;
    public static readonly KW_COMMIT = 48;
    public static readonly KW_COMPACT = 49;
    public static readonly KW_COMPACTIONS = 50;
    public static readonly KW_COMPACT_ID = 51;
    public static readonly KW_COMPUTE = 52;
    public static readonly KW_CONCATENATE = 53;
    public static readonly KW_CONF = 54;
    public static readonly KW_CONSTRAINT = 55;
    public static readonly KW_CONTINUE = 56;
    public static readonly KW_COST = 57;
    public static readonly KW_CREATE = 58;
    public static readonly KW_CRON = 59;
    public static readonly KW_CROSS = 60;
    public static readonly KW_CUBE = 61;
    public static readonly KW_CURRENT = 62;
    public static readonly KW_CURRENT_DATE = 63;
    public static readonly KW_CURRENT_TIMESTAMP = 64;
    public static readonly KW_CURSOR = 65;
    public static readonly KW_DATA = 66;
    public static readonly KW_DATABASE = 67;
    public static readonly KW_DATABASES = 68;
    public static readonly KW_DATACONNECTOR = 69;
    public static readonly KW_DATACONNECTORS = 70;
    public static readonly KW_DATE = 71;
    public static readonly KW_DATETIME = 72;
    public static readonly KW_DAY = 73;
    public static readonly KW_DAYS = 74;
    public static readonly KW_DAYOFWEEK = 75;
    public static readonly KW_DBPROPERTIES = 76;
    public static readonly KW_DCPROPERTIES = 77;
    public static readonly KW_DDL = 78;
    public static readonly KW_DEBUG = 79;
    public static readonly KW_DEC = 80;
    public static readonly KW_DECIMAL = 81;
    public static readonly KW_NUMERIC = 82;
    public static readonly KW_DEFAULT = 83;
    public static readonly KW_DEFERRED = 84;
    public static readonly KW_DEFINED = 85;
    public static readonly KW_DELETE = 86;
    public static readonly KW_DELIMITED = 87;
    public static readonly KW_DEPENDENCY = 88;
    public static readonly KW_DESC = 89;
    public static readonly KW_DESCRIBE = 90;
    public static readonly KW_DETAIL = 91;
    public static readonly KW_DIRECTORIES = 92;
    public static readonly KW_DIRECTORY = 93;
    public static readonly KW_DISABLE = 94;
    public static readonly KW_DISABLED = 95;
    public static readonly KW_DISTINCT = 96;
    public static readonly KW_DISTRIBUTE = 97;
    public static readonly KW_DISTRIBUTED = 98;
    public static readonly KW_DO = 99;
    public static readonly KW_DOUBLE = 100;
    public static readonly KW_DROP = 101;
    public static readonly KW_RECOVER = 102;
    public static readonly KW_DUMP = 103;
    public static readonly KW_ELEM_TYPE = 104;
    public static readonly KW_ELSE = 105;
    public static readonly KW_ENABLE = 106;
    public static readonly KW_ENABLED = 107;
    public static readonly KW_END = 108;
    public static readonly KW_ENFORCED = 109;
    public static readonly KW_ESCAPED = 110;
    public static readonly KW_EVERY = 111;
    public static readonly KW_EXCEPT = 112;
    public static readonly KW_EXCHANGE = 113;
    public static readonly KW_EXCLUSIVE = 114;
    public static readonly KW_EXECUTE = 115;
    public static readonly KW_EXECUTED = 116;
    public static readonly KW_EXISTS = 117;
    public static readonly KW_EXPIRE_SNAPSHOTS = 118;
    public static readonly KW_EXPLAIN = 119;
    public static readonly KW_EXPORT = 120;
    public static readonly KW_EXPRESSION = 121;
    public static readonly KW_EXTENDED = 122;
    public static readonly KW_EXTERNAL = 123;
    public static readonly KW_EXTRACT = 124;
    public static readonly KW_FALSE = 125;
    public static readonly KW_FETCH = 126;
    public static readonly KW_FIELDS = 127;
    public static readonly KW_FILE = 128;
    public static readonly KW_FILEFORMAT = 129;
    public static readonly KW_FIRST = 130;
    public static readonly KW_FLOAT = 131;
    public static readonly KW_FLOOR = 132;
    public static readonly KW_FOLLOWING = 133;
    public static readonly KW_FOR = 134;
    public static readonly KW_FORCE = 135;
    public static readonly KW_FOREIGN = 136;
    public static readonly KW_FORMAT = 137;
    public static readonly KW_FORMATTED = 138;
    public static readonly KW_FROM = 139;
    public static readonly KW_FULL = 140;
    public static readonly KW_FUNCTION = 141;
    public static readonly KW_FUNCTIONS = 142;
    public static readonly KW_GRANT = 143;
    public static readonly KW_GROUP = 144;
    public static readonly KW_GROUPING = 145;
    public static readonly KW_HAVING = 146;
    public static readonly KW_HOLD_DDLTIME = 147;
    public static readonly KW_HOUR = 148;
    public static readonly KW_HOURS = 149;
    public static readonly KW_IDXPROPERTIES = 150;
    public static readonly KW_IF = 151;
    public static readonly KW_IGNORE = 152;
    public static readonly KW_IMPORT = 153;
    public static readonly KW_IN = 154;
    public static readonly KW_INDEX = 155;
    public static readonly KW_INDEXES = 156;
    public static readonly KW_INNER = 157;
    public static readonly KW_INPATH = 158;
    public static readonly KW_INPUTDRIVER = 159;
    public static readonly KW_INPUTFORMAT = 160;
    public static readonly KW_INSERT = 161;
    public static readonly KW_INT = 162;
    public static readonly KW_INTEGER = 163;
    public static readonly KW_INTERSECT = 164;
    public static readonly KW_INTERVAL = 165;
    public static readonly KW_INTO = 166;
    public static readonly KW_IS = 167;
    public static readonly KW_ISOLATION = 168;
    public static readonly KW_ITEMS = 169;
    public static readonly KW_JAR = 170;
    public static readonly KW_JOIN = 171;
    public static readonly KW_JOINCOST = 172;
    public static readonly KW_KEY = 173;
    public static readonly KW_KEYS = 174;
    public static readonly KW_KEY_TYPE = 175;
    public static readonly KW_KILL = 176;
    public static readonly KW_LAST = 177;
    public static readonly KW_LATERAL = 178;
    public static readonly KW_LEADING = 179;
    public static readonly KW_LEFT = 180;
    public static readonly KW_LESS = 181;
    public static readonly KW_LEVEL = 182;
    public static readonly KW_LIFECYCLE = 183;
    public static readonly KW_LIKE = 184;
    public static readonly KW_LIMIT = 185;
    public static readonly KW_LINES = 186;
    public static readonly KW_LOAD = 187;
    public static readonly KW_LOCAL = 188;
    public static readonly KW_LOCATION = 189;
    public static readonly KW_LOCK = 190;
    public static readonly KW_LOCKS = 191;
    public static readonly KW_LOGICAL = 192;
    public static readonly KW_LONG = 193;
    public static readonly KW_MACRO = 194;
    public static readonly KW_MANAGED = 195;
    public static readonly KW_MANAGEDLOCATION = 196;
    public static readonly KW_MANAGEMENT = 197;
    public static readonly KW_MAP = 198;
    public static readonly KW_MAPJOIN = 199;
    public static readonly KW_MAPPING = 200;
    public static readonly KW_MATCHED = 201;
    public static readonly KW_MATERIALIZED = 202;
    public static readonly KW_MERGE = 203;
    public static readonly KW_METADATA = 204;
    public static readonly KW_MINUS = 205;
    public static readonly KW_MINUTE = 206;
    public static readonly KW_MINUTES = 207;
    public static readonly KW_MONTH = 208;
    public static readonly KW_MONTHS = 209;
    public static readonly KW_MORE = 210;
    public static readonly KW_MOVE = 211;
    public static readonly KW_MSCK = 212;
    public static readonly KW_NONE = 213;
    public static readonly KW_NORELY = 214;
    public static readonly KW_NOSCAN = 215;
    public static readonly KW_NOT = 216;
    public static readonly KW_NOVALIDATE = 217;
    public static readonly KW_NO_DROP = 218;
    public static readonly KW_NULL = 219;
    public static readonly KW_NULLS = 220;
    public static readonly KW_OF = 221;
    public static readonly KW_OFFLINE = 222;
    public static readonly KW_OFFSET = 223;
    public static readonly KW_ON = 224;
    public static readonly KW_ONLY = 225;
    public static readonly KW_OPERATOR = 226;
    public static readonly KW_OPTION = 227;
    public static readonly KW_OR = 228;
    public static readonly KW_ORDER = 229;
    public static readonly KW_OUT = 230;
    public static readonly KW_OUTER = 231;
    public static readonly KW_OUTPUTDRIVER = 232;
    public static readonly KW_OUTPUTFORMAT = 233;
    public static readonly KW_OVER = 234;
    public static readonly KW_OVERWRITE = 235;
    public static readonly KW_OWNER = 236;
    public static readonly KW_PARTITION = 237;
    public static readonly KW_PARTITIONED = 238;
    public static readonly KW_PARTITIONS = 239;
    public static readonly KW_PATH = 240;
    public static readonly KW_PERCENT = 241;
    public static readonly KW_PKFK_JOIN = 242;
    public static readonly KW_PLAN = 243;
    public static readonly KW_PLANS = 244;
    public static readonly KW_PLUS = 245;
    public static readonly KW_POOL = 246;
    public static readonly KW_PRECEDING = 247;
    public static readonly KW_PRECISION = 248;
    public static readonly KW_PREPARE = 249;
    public static readonly KW_PRESERVE = 250;
    public static readonly KW_PRIMARY = 251;
    public static readonly KW_PRINCIPALS = 252;
    public static readonly KW_PROCEDURE = 253;
    public static readonly KW_PROTECTION = 254;
    public static readonly KW_PURGE = 255;
    public static readonly KW_QUALIFY = 256;
    public static readonly KW_QUARTER = 257;
    public static readonly KW_QUERY = 258;
    public static readonly KW_QUERY_PARALLELISM = 259;
    public static readonly KW_RANGE = 260;
    public static readonly KW_READ = 261;
    public static readonly KW_READONLY = 262;
    public static readonly KW_READS = 263;
    public static readonly KW_REAL = 264;
    public static readonly KW_REBUILD = 265;
    public static readonly KW_RECORDREADER = 266;
    public static readonly KW_RECORDWRITER = 267;
    public static readonly KW_REDUCE = 268;
    public static readonly KW_REFERENCES = 269;
    public static readonly KW_REGEXP = 270;
    public static readonly KW_RELOAD = 271;
    public static readonly KW_RELY = 272;
    public static readonly KW_REMOTE = 273;
    public static readonly KW_RENAME = 274;
    public static readonly KW_REOPTIMIZATION = 275;
    public static readonly KW_REPAIR = 276;
    public static readonly KW_REPL = 277;
    public static readonly KW_REPLACE = 278;
    public static readonly KW_REPLICATION = 279;
    public static readonly KW_RESOURCE = 280;
    public static readonly KW_RESPECT = 281;
    public static readonly KW_RESTRICT = 282;
    public static readonly KW_REVOKE = 283;
    public static readonly KW_REWRITE = 284;
    public static readonly KW_RIGHT = 285;
    public static readonly KW_RLIKE = 286;
    public static readonly KW_ROLE = 287;
    public static readonly KW_ROLES = 288;
    public static readonly KW_ROLLBACK = 289;
    public static readonly KW_ROLLUP = 290;
    public static readonly KW_ROW = 291;
    public static readonly KW_ROWS = 292;
    public static readonly KW_SCHEDULED = 293;
    public static readonly KW_SCHEDULING_POLICY = 294;
    public static readonly KW_SCHEMA = 295;
    public static readonly KW_SCHEMAS = 296;
    public static readonly KW_SECOND = 297;
    public static readonly KW_SECONDS = 298;
    public static readonly KW_SELECT = 299;
    public static readonly KW_SEMI = 300;
    public static readonly KW_SERDE = 301;
    public static readonly KW_SERDEPROPERTIES = 302;
    public static readonly KW_SERVER = 303;
    public static readonly KW_SET = 304;
    public static readonly KW_SETS = 305;
    public static readonly KW_SET_CURRENT_SNAPSHOT = 306;
    public static readonly KW_SHARED = 307;
    public static readonly KW_SHOW = 308;
    public static readonly KW_SHOW_DATABASE = 309;
    public static readonly KW_SKEWED = 310;
    public static readonly KW_SMALLINT = 311;
    public static readonly KW_SNAPSHOT = 312;
    public static readonly KW_SOME = 313;
    public static readonly KW_SORT = 314;
    public static readonly KW_SORTED = 315;
    public static readonly KW_SPEC = 316;
    public static readonly KW_SSL = 317;
    public static readonly KW_START = 318;
    public static readonly KW_STATISTICS = 319;
    public static readonly KW_STATUS = 320;
    public static readonly KW_STORED = 321;
    public static readonly KW_STREAMTABLE = 322;
    public static readonly KW_STRING = 323;
    public static readonly KW_STRUCT = 324;
    public static readonly KW_SUMMARY = 325;
    public static readonly KW_SYNC = 326;
    public static readonly KW_SYSTEM_TIME = 327;
    public static readonly KW_SYSTEM_VERSION = 328;
    public static readonly KW_TABLE = 329;
    public static readonly KW_TABLES = 330;
    public static readonly KW_TABLESAMPLE = 331;
    public static readonly KW_TBLPROPERTIES = 332;
    public static readonly KW_TEMPORARY = 333;
    public static readonly KW_TERMINATED = 334;
    public static readonly KW_THEN = 335;
    public static readonly KW_TIME = 336;
    public static readonly KW_TIMESTAMP = 337;
    public static readonly KW_TIMESTAMPLOCALTZ = 338;
    public static readonly KW_TIMESTAMPTZ = 339;
    public static readonly KW_TINYINT = 340;
    public static readonly KW_TO = 341;
    public static readonly KW_TOUCH = 342;
    public static readonly KW_TRAILING = 343;
    public static readonly KW_TRANSACTION = 344;
    public static readonly KW_TRANSACTIONAL = 345;
    public static readonly KW_TRANSACTIONS = 346;
    public static readonly KW_TRANSFORM = 347;
    public static readonly KW_TRIGGER = 348;
    public static readonly KW_TRIM = 349;
    public static readonly KW_TRUE = 350;
    public static readonly KW_TRUNCATE = 351;
    public static readonly KW_TYPE = 352;
    public static readonly KW_UNARCHIVE = 353;
    public static readonly KW_UNBOUNDED = 354;
    public static readonly KW_UNDO = 355;
    public static readonly KW_UNION = 356;
    public static readonly KW_UNIONTYPE = 357;
    public static readonly KW_UNIQUE = 358;
    public static readonly KW_UNIQUEJOIN = 359;
    public static readonly KW_UNKNOWN = 360;
    public static readonly KW_UNLOCK = 361;
    public static readonly KW_UNMANAGED = 362;
    public static readonly KW_UNSET = 363;
    public static readonly KW_UNSIGNED = 364;
    public static readonly KW_UPDATE = 365;
    public static readonly KW_URI = 366;
    public static readonly KW_URL = 367;
    public static readonly KW_USE = 368;
    public static readonly KW_USER = 369;
    public static readonly KW_USING = 370;
    public static readonly KW_UTC = 371;
    public static readonly KW_UTCTIMESTAMP = 372;
    public static readonly KW_VALIDATE = 373;
    public static readonly KW_VALUES = 374;
    public static readonly KW_VALUE_TYPE = 375;
    public static readonly KW_VARCHAR = 376;
    public static readonly KW_VECTORIZATION = 377;
    public static readonly KW_VIEW = 378;
    public static readonly KW_VIEWS = 379;
    public static readonly KW_WAIT = 380;
    public static readonly KW_WEEK = 381;
    public static readonly KW_WEEKS = 382;
    public static readonly KW_WHEN = 383;
    public static readonly KW_WHERE = 384;
    public static readonly KW_WHILE = 385;
    public static readonly KW_WINDOW = 386;
    public static readonly KW_WITH = 387;
    public static readonly KW_WITHIN = 388;
    public static readonly KW_WORK = 389;
    public static readonly KW_WORKLOAD = 390;
    public static readonly KW_WRITE = 391;
    public static readonly KW_YEAR = 392;
    public static readonly KW_YEARS = 393;
    public static readonly KW_ZONE = 394;
    public static readonly DOT = 395;
    public static readonly COLON = 396;
    public static readonly COMMA = 397;
    public static readonly SEMICOLON = 398;
    public static readonly LPAREN = 399;
    public static readonly RPAREN = 400;
    public static readonly LSQUARE = 401;
    public static readonly RSQUARE = 402;
    public static readonly LCURLY = 403;
    public static readonly RCURLY = 404;
    public static readonly EQUAL = 405;
    public static readonly EQUAL_NS = 406;
    public static readonly NOTEQUAL = 407;
    public static readonly LESSTHANOREQUALTO = 408;
    public static readonly LESSTHAN = 409;
    public static readonly GREATERTHANOREQUALTO = 410;
    public static readonly GREATERTHAN = 411;
    public static readonly DIVIDE = 412;
    public static readonly PLUS = 413;
    public static readonly MINUS = 414;
    public static readonly STAR = 415;
    public static readonly MOD = 416;
    public static readonly DIV = 417;
    public static readonly BITWISENOT = 418;
    public static readonly AMPERSAND = 419;
    public static readonly TILDE = 420;
    public static readonly BITWISEOR = 421;
    public static readonly CONCATENATE = 422;
    public static readonly BITWISEXOR = 423;
    public static readonly QUESTION = 424;
    public static readonly DOLLAR = 425;
    public static readonly StringLiteral = 426;
    public static readonly CharSetLiteral = 427;
    public static readonly IntegralLiteral = 428;
    public static readonly NumberLiteral = 429;
    public static readonly ByteLengthLiteral = 430;
    public static readonly Number = 431;
    public static readonly Identifier = 432;
    public static readonly CharSetName = 433;
    public static readonly WHITE_SPACE = 434;
    public static readonly LINE_COMMENT = 435;
    public static readonly QUERY_HINT = 436;
    public static readonly SHOW_HINT = 437;
    public static readonly HIDDEN_HINT = 438;
    public static readonly RULE_program = 0;
    public static readonly RULE_statement = 1;
    public static readonly RULE_explainStatement = 2;
    public static readonly RULE_explainOption = 3;
    public static readonly RULE_vectorizatonDetail = 4;
    public static readonly RULE_execStatement = 5;
    public static readonly RULE_loadStatement = 6;
    public static readonly RULE_replicationClause = 7;
    public static readonly RULE_exportStatement = 8;
    public static readonly RULE_importStatement = 9;
    public static readonly RULE_replDumpStatement = 10;
    public static readonly RULE_replDbPolicy = 11;
    public static readonly RULE_replLoadStatement = 12;
    public static readonly RULE_replTableLevelPolicy = 13;
    public static readonly RULE_ddlStatement = 14;
    public static readonly RULE_ifExists = 15;
    public static readonly RULE_ifNotExists = 16;
    public static readonly RULE_restrictOrCascade = 17;
    public static readonly RULE_rewriteEnabled = 18;
    public static readonly RULE_rewriteDisabled = 19;
    public static readonly RULE_storedAsDirs = 20;
    public static readonly RULE_createDatabaseStatement = 21;
    public static readonly RULE_dbConnectorName = 22;
    public static readonly RULE_switchDatabaseStatement = 23;
    public static readonly RULE_dropDatabaseStatement = 24;
    public static readonly RULE_databaseComment = 25;
    public static readonly RULE_truncateTableStatement = 26;
    public static readonly RULE_dropTableStatement = 27;
    public static readonly RULE_inputFileFormat = 28;
    public static readonly RULE_tabTypeExpr = 29;
    public static readonly RULE_partTypeExpr = 30;
    public static readonly RULE_tabPartColTypeExpr = 31;
    public static readonly RULE_descStatement = 32;
    public static readonly RULE_analyzeStatement = 33;
    public static readonly RULE_from_in = 34;
    public static readonly RULE_db_schema = 35;
    public static readonly RULE_showStatement = 36;
    public static readonly RULE_showTablesFilterExpr = 37;
    public static readonly RULE_lockStatement = 38;
    public static readonly RULE_lockDatabase = 39;
    public static readonly RULE_lockMode = 40;
    public static readonly RULE_unlockStatement = 41;
    public static readonly RULE_unlockDatabase = 42;
    public static readonly RULE_createRoleStatement = 43;
    public static readonly RULE_dropRoleStatement = 44;
    public static readonly RULE_grantPrivileges = 45;
    public static readonly RULE_revokePrivileges = 46;
    public static readonly RULE_grantRole = 47;
    public static readonly RULE_revokeRole = 48;
    public static readonly RULE_showRoleGrants = 49;
    public static readonly RULE_showRoles = 50;
    public static readonly RULE_showCurrentRole = 51;
    public static readonly RULE_setRole = 52;
    public static readonly RULE_showGrants = 53;
    public static readonly RULE_showRolePrincipals = 54;
    public static readonly RULE_privilegeIncludeColObject = 55;
    public static readonly RULE_privilegeObject = 56;
    public static readonly RULE_privObject = 57;
    public static readonly RULE_privObjectCols = 58;
    public static readonly RULE_privilegeList = 59;
    public static readonly RULE_privlegeDef = 60;
    public static readonly RULE_privilegeType = 61;
    public static readonly RULE_principalSpecification = 62;
    public static readonly RULE_principalName = 63;
    public static readonly RULE_principalAlterName = 64;
    public static readonly RULE_withGrantOption = 65;
    public static readonly RULE_grantOptionFor = 66;
    public static readonly RULE_adminOptionFor = 67;
    public static readonly RULE_withAdminOption = 68;
    public static readonly RULE_metastoreCheck = 69;
    public static readonly RULE_resourceList = 70;
    public static readonly RULE_resource = 71;
    public static readonly RULE_resourceType = 72;
    public static readonly RULE_createFunctionStatement = 73;
    public static readonly RULE_dropFunctionStatement = 74;
    public static readonly RULE_reloadFunctionsStatement = 75;
    public static readonly RULE_createMacroStatement = 76;
    public static readonly RULE_dropMacroStatement = 77;
    public static readonly RULE_createIndexStatement = 78;
    public static readonly RULE_dropIndexStatement = 79;
    public static readonly RULE_createViewStatement = 80;
    public static readonly RULE_viewPartition = 81;
    public static readonly RULE_viewOrganization = 82;
    public static readonly RULE_viewClusterSpec = 83;
    public static readonly RULE_viewComplexSpec = 84;
    public static readonly RULE_viewDistSpec = 85;
    public static readonly RULE_viewSortSpec = 86;
    public static readonly RULE_dropViewStatement = 87;
    public static readonly RULE_createMaterializedViewStatement = 88;
    public static readonly RULE_dropMaterializedViewStatement = 89;
    public static readonly RULE_createScheduledQueryStatement = 90;
    public static readonly RULE_dropScheduledQueryStatement = 91;
    public static readonly RULE_alterScheduledQueryStatement = 92;
    public static readonly RULE_alterScheduledQueryChange = 93;
    public static readonly RULE_scheduleSpec = 94;
    public static readonly RULE_executedAsSpec = 95;
    public static readonly RULE_definedAsSpec = 96;
    public static readonly RULE_showStmtIdentifier = 97;
    public static readonly RULE_tableComment = 98;
    public static readonly RULE_tableLifecycle = 99;
    public static readonly RULE_createTablePartitionSpec = 100;
    public static readonly RULE_createTablePartitionColumnTypeSpec = 101;
    public static readonly RULE_partitionTransformSpec = 102;
    public static readonly RULE_partitionTransformType = 103;
    public static readonly RULE_tableBuckets = 104;
    public static readonly RULE_tableSkewed = 105;
    public static readonly RULE_rowFormat = 106;
    public static readonly RULE_recordReader = 107;
    public static readonly RULE_recordWriter = 108;
    public static readonly RULE_rowFormatSerde = 109;
    public static readonly RULE_rowFormatDelimited = 110;
    public static readonly RULE_tableRowFormat = 111;
    public static readonly RULE_tablePropertiesPrefixed = 112;
    public static readonly RULE_tableProperties = 113;
    public static readonly RULE_tablePropertiesList = 114;
    public static readonly RULE_keyValueProperties = 115;
    public static readonly RULE_keyValuePropertyList = 116;
    public static readonly RULE_keyValueProperty = 117;
    public static readonly RULE_tableRowFormatFieldIdentifier = 118;
    public static readonly RULE_tableRowFormatCollItemsIdentifier = 119;
    public static readonly RULE_tableRowFormatMapKeysIdentifier = 120;
    public static readonly RULE_tableRowFormatLinesIdentifier = 121;
    public static readonly RULE_tableRowNullFormat = 122;
    public static readonly RULE_tableFileFormat = 123;
    public static readonly RULE_columnNameTypeList = 124;
    public static readonly RULE_columnNameTypeOrConstraintList = 125;
    public static readonly RULE_columnNameColonTypeList = 126;
    public static readonly RULE_columnNameList = 127;
    public static readonly RULE_columnName = 128;
    public static readonly RULE_columnNameCreate = 129;
    public static readonly RULE_extColumnName = 130;
    public static readonly RULE_columnNameOrderList = 131;
    public static readonly RULE_columnParenthesesList = 132;
    public static readonly RULE_enableValidateSpecification = 133;
    public static readonly RULE_enableSpecification = 134;
    public static readonly RULE_validateSpecification = 135;
    public static readonly RULE_enforcedSpecification = 136;
    public static readonly RULE_relySpecification = 137;
    public static readonly RULE_createConstraint = 138;
    public static readonly RULE_alterConstraintWithName = 139;
    public static readonly RULE_tableLevelConstraint = 140;
    public static readonly RULE_pkUkConstraint = 141;
    public static readonly RULE_checkConstraint = 142;
    public static readonly RULE_createForeignKey = 143;
    public static readonly RULE_alterForeignKeyWithName = 144;
    public static readonly RULE_skewedValueElement = 145;
    public static readonly RULE_skewedColumnValuePairList = 146;
    public static readonly RULE_skewedColumnValuePair = 147;
    public static readonly RULE_constantList = 148;
    public static readonly RULE_orderSpecification = 149;
    public static readonly RULE_nullOrdering = 150;
    public static readonly RULE_columnNameOrder = 151;
    public static readonly RULE_columnNameCommentList = 152;
    public static readonly RULE_columnNameComment = 153;
    public static readonly RULE_columnRefOrder = 154;
    public static readonly RULE_columnNameType = 155;
    public static readonly RULE_columnNameTypeOrConstraint = 156;
    public static readonly RULE_tableConstraint = 157;
    public static readonly RULE_columnNameTypeConstraint = 158;
    public static readonly RULE_columnConstraint = 159;
    public static readonly RULE_foreignKeyConstraint = 160;
    public static readonly RULE_colConstraint = 161;
    public static readonly RULE_alterColumnConstraint = 162;
    public static readonly RULE_alterForeignKeyConstraint = 163;
    public static readonly RULE_alterColConstraint = 164;
    public static readonly RULE_columnConstraintType = 165;
    public static readonly RULE_defaultVal = 166;
    public static readonly RULE_tableConstraintType = 167;
    public static readonly RULE_constraintOptsCreate = 168;
    public static readonly RULE_constraintOptsAlter = 169;
    public static readonly RULE_columnNameColonType = 170;
    public static readonly RULE_columnType = 171;
    public static readonly RULE_columnTypeList = 172;
    public static readonly RULE_type = 173;
    public static readonly RULE_primitiveType = 174;
    public static readonly RULE_listType = 175;
    public static readonly RULE_structType = 176;
    public static readonly RULE_mapType = 177;
    public static readonly RULE_unionType = 178;
    public static readonly RULE_setOperator = 179;
    public static readonly RULE_queryStatementExpression = 180;
    public static readonly RULE_queryStatementExpressionBody = 181;
    public static readonly RULE_withClause = 182;
    public static readonly RULE_cteStatement = 183;
    public static readonly RULE_fromStatement = 184;
    public static readonly RULE_singleFromStatement = 185;
    public static readonly RULE_regularBody = 186;
    public static readonly RULE_atomSelectStatement = 187;
    public static readonly RULE_selectStatement = 188;
    public static readonly RULE_setOpSelectStatement = 189;
    public static readonly RULE_selectStatementWithCTE = 190;
    public static readonly RULE_insertClause = 191;
    public static readonly RULE_destination = 192;
    public static readonly RULE_limitClause = 193;
    public static readonly RULE_columnAssignmentClause = 194;
    public static readonly RULE_precedencePlusExpressionOrDefault = 195;
    public static readonly RULE_setColumnsClause = 196;
    public static readonly RULE_sqlTransactionStatement = 197;
    public static readonly RULE_transactionMode = 198;
    public static readonly RULE_whenClauses = 199;
    public static readonly RULE_whenNotMatchedClause = 200;
    public static readonly RULE_whenMatchedAndClause = 201;
    public static readonly RULE_whenMatchedThenClause = 202;
    public static readonly RULE_compactionPool = 203;
    public static readonly RULE_compactionType = 204;
    public static readonly RULE_compactionStatus = 205;
    public static readonly RULE_alterStatement = 206;
    public static readonly RULE_alterTableStatementSuffix = 207;
    public static readonly RULE_alterTblPartitionStatementSuffix = 208;
    public static readonly RULE_alterViewStatementSuffix = 209;
    public static readonly RULE_alterDatabaseStatementSuffix = 210;
    public static readonly RULE_alterDataConnectorStatementSuffix = 211;
    public static readonly RULE_locationPath = 212;
    public static readonly RULE_alterStatementSuffixDropPartitions = 213;
    public static readonly RULE_skewedLocationMap = 214;
    public static readonly RULE_alterStatementSuffixExecute = 215;
    public static readonly RULE_fileFormat = 216;
    public static readonly RULE_likeTableOrFile = 217;
    public static readonly RULE_createTableStatement = 218;
    public static readonly RULE_createDataConnectorStatement = 219;
    public static readonly RULE_dropDataConnectorStatement = 220;
    public static readonly RULE_tableAllColumns = 221;
    public static readonly RULE_expressionList = 222;
    public static readonly RULE_aliasList = 223;
    public static readonly RULE_fromClause = 224;
    public static readonly RULE_fromSource = 225;
    public static readonly RULE_atomjoinSource = 226;
    public static readonly RULE_joinSource = 227;
    public static readonly RULE_joinSourcePart = 228;
    public static readonly RULE_uniqueJoinSource = 229;
    public static readonly RULE_joinToken = 230;
    public static readonly RULE_lateralView = 231;
    public static readonly RULE_tableAlias = 232;
    public static readonly RULE_tableSample = 233;
    public static readonly RULE_tableSource = 234;
    public static readonly RULE_asOfClause = 235;
    public static readonly RULE_dbSchemaName = 236;
    public static readonly RULE_dbSchemaNameCreate = 237;
    public static readonly RULE_tableOrView = 238;
    public static readonly RULE_tableName = 239;
    public static readonly RULE_tableNameCreate = 240;
    public static readonly RULE_viewName = 241;
    public static readonly RULE_viewNameCreate = 242;
    public static readonly RULE_subQuerySource = 243;
    public static readonly RULE_partitioningSpec = 244;
    public static readonly RULE_partitionTableFunctionSource = 245;
    public static readonly RULE_partitionedTableFunction = 246;
    public static readonly RULE_atomPartitionedTableFunction = 247;
    public static readonly RULE_whereClause = 248;
    public static readonly RULE_valuesClause = 249;
    public static readonly RULE_atomValuesClause = 250;
    public static readonly RULE_virtualTableSource = 251;
    public static readonly RULE_selectClause = 252;
    public static readonly RULE_selectTrfmClause = 253;
    public static readonly RULE_selectList = 254;
    public static readonly RULE_selectItem = 255;
    public static readonly RULE_selectLiteralColumnName = 256;
    public static readonly RULE_selectExpressionColumnName = 257;
    public static readonly RULE_trfmClause = 258;
    public static readonly RULE_selectExpression = 259;
    public static readonly RULE_selectExpressionList = 260;
    public static readonly RULE_window_clause = 261;
    public static readonly RULE_window_specification = 262;
    public static readonly RULE_window_frame = 263;
    public static readonly RULE_window_frame_boundary = 264;
    public static readonly RULE_groupByClause = 265;
    public static readonly RULE_rollupStandard = 266;
    public static readonly RULE_rollupOldSyntax = 267;
    public static readonly RULE_groupingSetExpression = 268;
    public static readonly RULE_havingClause = 269;
    public static readonly RULE_qualifyClause = 270;
    public static readonly RULE_expressionOrDefault = 271;
    public static readonly RULE_firstExpressionsWithAlias = 272;
    public static readonly RULE_expressions = 273;
    public static readonly RULE_expressionsInParenthesis = 274;
    public static readonly RULE_expressionsNotInParenthesis = 275;
    public static readonly RULE_orderByClause = 276;
    public static readonly RULE_clusterByClause = 277;
    public static readonly RULE_distributeByClause = 278;
    public static readonly RULE_sortByClause = 279;
    public static readonly RULE_function_ = 280;
    public static readonly RULE_null_treatment = 281;
    public static readonly RULE_functionNameCreate = 282;
    public static readonly RULE_functionNameForDDL = 283;
    public static readonly RULE_functionNameForInvoke = 284;
    public static readonly RULE_castExpression = 285;
    public static readonly RULE_caseExpression = 286;
    public static readonly RULE_whenExpression = 287;
    public static readonly RULE_floorExpression = 288;
    public static readonly RULE_extractExpression = 289;
    public static readonly RULE_timeQualifiers = 290;
    public static readonly RULE_constant = 291;
    public static readonly RULE_intervalValue = 292;
    public static readonly RULE_intervalExpression = 293;
    public static readonly RULE_intervalQualifiers = 294;
    public static readonly RULE_expression = 295;
    public static readonly RULE_atomExpression = 296;
    public static readonly RULE_precedenceUnaryPrefixExpression = 297;
    public static readonly RULE_precedenceBitwiseXorExpression = 298;
    public static readonly RULE_precedenceStarExpression = 299;
    public static readonly RULE_precedencePlusExpression = 300;
    public static readonly RULE_precedenceConcatenateExpression = 301;
    public static readonly RULE_precedenceAmpersandExpression = 302;
    public static readonly RULE_precedenceBitwiseOrExpression = 303;
    public static readonly RULE_precedenceSimilarOperator = 304;
    public static readonly RULE_subQueryExpression = 305;
    public static readonly RULE_precedenceSimilarExpression = 306;
    public static readonly RULE_precedenceSimilarExpressionPart = 307;
    public static readonly RULE_precedenceSimilarExpressionAtom = 308;
    public static readonly RULE_precedenceSimilarExpressionIn = 309;
    public static readonly RULE_precedenceSimilarExpressionPartNot = 310;
    public static readonly RULE_precedenceDistinctOperator = 311;
    public static readonly RULE_precedenceEqualOperator = 312;
    public static readonly RULE_precedenceEqualExpression = 313;
    public static readonly RULE_isCondition = 314;
    public static readonly RULE_precedenceNotExpression = 315;
    public static readonly RULE_precedenceAndExpression = 316;
    public static readonly RULE_tableOrPartition = 317;
    public static readonly RULE_partitionSpec = 318;
    public static readonly RULE_partitionVal = 319;
    public static readonly RULE_partitionSelectorSpec = 320;
    public static readonly RULE_partitionSelectorVal = 321;
    public static readonly RULE_subQuerySelectorOperator = 322;
    public static readonly RULE_sysFuncNames = 323;
    public static readonly RULE_id_ = 324;
    public static readonly RULE_functionIdentifier = 325;
    public static readonly RULE_principalIdentifier = 326;
    public static readonly RULE_nonReserved = 327;
    public static readonly RULE_sql11ReservedKeywordsUsedAsFunctionName = 328;
    public static readonly RULE_configPropertiesItem = 329;
    public static readonly RULE_resourcePlanDdlStatements = 330;
    public static readonly RULE_mappingTypes = 331;
    public static readonly RULE_rpAssign = 332;
    public static readonly RULE_rpAssignList = 333;
    public static readonly RULE_rpUnassign = 334;
    public static readonly RULE_activate = 335;
    public static readonly RULE_enable = 336;
    public static readonly RULE_disable = 337;
    public static readonly RULE_year = 338;
    public static readonly RULE_month = 339;
    public static readonly RULE_week = 340;
    public static readonly RULE_day = 341;
    public static readonly RULE_hour = 342;
    public static readonly RULE_minute = 343;
    public static readonly RULE_second = 344;
    public static readonly RULE_decimal = 345;
    public static readonly RULE_poolPath = 346;
    public static readonly RULE_triggerAtomExpression = 347;
    public static readonly RULE_triggerActionExpression = 348;
    public static readonly RULE_poolAssign = 349;
    public static readonly RULE_poolAssignList = 350;

    public static readonly literalNames = [
        null, "'ABORT'", "'ACTIVATE'", "'ACTIVE'", "'ADD'", "'ADMIN'", "'AFTER'", 
        "'ALL'", "'ALLOC_FRACTION'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", 
        "'ANY'", "'APPLICATION'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", 
        "'AST'", "'AT'", "'AUTHORIZATION'", "'AUTOCOMMIT'", "'BATCH'", "'BEFORE'", 
        "'BETWEEN'", "'BIGINT'", "'BINARY'", "'BOOLEAN'", "'BOTH'", "'BUCKET'", 
        "'BUCKETS'", "'BY'", "'CACHE'", "'CASCADE'", "'CASE'", "'CAST'", 
        "'CBO'", "'CHANGE'", "'CHAR'", "'CHECK'", "'CLUSTER'", "'CLUSTERED'", 
        "'CLUSTERSTATUS'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", 
        "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", "'COMPACTIONID'", "'COMPUTE'", 
        "'CONCATENATE'", "'CONF'", "'CONSTRAINT'", "'CONTINUE'", "'COST'", 
        "'CREATE'", "'CRON'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
        "'CURRENT_TIMESTAMP'", "'CURSOR'", "'DATA'", "'DATABASE'", "'DATABASES'", 
        "'CONNECTOR'", "'CONNECTORS'", "'DATE'", "'DATETIME'", "'DAY'", 
        "'DAYS'", "'DAYOFWEEK'", "'DBPROPERTIES'", "'DCPROPERTIES'", "'DDL'", 
        "'DEBUG'", "'DEC'", "'DECIMAL'", "'NUMERIC'", "'DEFAULT'", "'DEFERRED'", 
        "'DEFINED'", "'DELETE'", "'DELIMITED'", "'DEPENDENCY'", "'DESC'", 
        "'DESCRIBE'", "'DETAIL'", "'DIRECTORIES'", "'DIRECTORY'", "'DISABLE'", 
        "'DISABLED'", "'DISTINCT'", "'DISTRIBUTE'", "'DISTRIBUTED'", "'DO'", 
        "'DOUBLE'", "'DROP'", "'RECOVER'", "'DUMP'", "'$ELEM$'", "'ELSE'", 
        "'ENABLE'", "'ENABLED'", "'END'", "'ENFORCED'", "'ESCAPED'", "'EVERY'", 
        "'EXCEPT'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXECUTE'", "'EXECUTED'", 
        "'EXISTS'", "'EXPIRE_SNAPSHOTS'", "'EXPLAIN'", "'EXPORT'", "'EXPRESSION'", 
        "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", 
        "'FILE'", "'FILEFORMAT'", "'FIRST'", "'FLOAT'", "'FLOOR'", "'FOLLOWING'", 
        "'FOR'", "'FORCE'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FROM'", 
        "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GRANT'", "'GROUP'", "'GROUPING'", 
        "'HAVING'", "'HOLD_DDLTIME'", "'HOUR'", "'HOURS'", "'IDXPROPERTIES'", 
        "'IF'", "'IGNORE'", "'IMPORT'", "'IN'", "'INDEX'", "'INDEXES'", 
        "'INNER'", "'INPATH'", "'INPUTDRIVER'", "'INPUTFORMAT'", "'INSERT'", 
        "'INT'", "'INTEGER'", "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", 
        "'ISOLATION'", "'ITEMS'", "'JAR'", "'JOIN'", "'JOINCOST'", "'KEY'", 
        "'KEYS'", "'$KEY$'", "'KILL'", "'LAST'", "'LATERAL'", "'LEADING'", 
        "'LEFT'", "'LESS'", "'LEVEL'", "'LIFECYCLE'", "'LIKE'", "'LIMIT'", 
        "'LINES'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCKS'", 
        "'LOGICAL'", "'LONG'", "'MACRO'", "'MANAGED'", "'MANAGEDLOCATION'", 
        "'MANAGEMENT'", "'MAP'", "'MAPJOIN'", "'MAPPING'", "'MATCHED'", 
        "'MATERIALIZED'", "'MERGE'", "'METADATA'", "'MINUS'", "'MINUTE'", 
        "'MINUTES'", "'MONTH'", "'MONTHS'", "'MORE'", "'MOVE'", "'MSCK'", 
        "'NONE'", "'NORELY'", "'NOSCAN'", "'NOT'", "'NOVALIDATE'", "'NO_DROP'", 
        "'NULL'", "'NULLS'", "'OF'", "'OFFLINE'", "'OFFSET'", "'ON'", "'ONLY'", 
        "'OPERATOR'", "'OPTION'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", 
        "'OUTPUTDRIVER'", "'OUTPUTFORMAT'", "'OVER'", "'OVERWRITE'", "'OWNER'", 
        "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PATH'", "'PERCENT'", 
        "'PKFK_JOIN'", "'PLAN'", "'PLANS'", "'PLUS'", "'POOL'", "'PRECEDING'", 
        "'PRECISION'", "'PREPARE'", "'PRESERVE'", "'PRIMARY'", "'PRINCIPALS'", 
        "'PROCEDURE'", "'PROTECTION'", "'PURGE'", "'QUALIFY'", "'QUARTER'", 
        "'QUERY'", "'QUERY_PARALLELISM'", "'RANGE'", "'READ'", "'READONLY'", 
        "'READS'", "'REAL'", "'REBUILD'", "'RECORDREADER'", "'RECORDWRITER'", 
        "'REDUCE'", "'REFERENCES'", "'REGEXP'", "'RELOAD'", "'RELY'", "'REMOTE'", 
        "'RENAME'", "'REOPTIMIZATION'", "'REPAIR'", "'REPL'", "'REPLACE'", 
        "'REPLICATION'", "'RESOURCE'", "'RESPECT'", "'RESTRICT'", "'REVOKE'", 
        "'REWRITE'", "'RIGHT'", "'RLIKE'", "'ROLE'", "'ROLES'", "'ROLLBACK'", 
        "'ROLLUP'", "'ROW'", "'ROWS'", "'SCHEDULED'", "'SCHEDULING_POLICY'", 
        "'SCHEMA'", "'SCHEMAS'", "'SECOND'", "'SECONDS'", "'SELECT'", "'SEMI'", 
        "'SERDE'", "'SERDEPROPERTIES'", "'SERVER'", "'SET'", "'SETS'", "'SET_CURRENT_SNAPSHOT'", 
        "'SHARED'", "'SHOW'", "'SHOW_DATABASE'", "'SKEWED'", "'SMALLINT'", 
        "'SNAPSHOT'", "'SOME'", "'SORT'", "'SORTED'", "'SPEC'", "'SSL'", 
        "'START'", "'STATISTICS'", "'STATUS'", "'STORED'", "'STREAMTABLE'", 
        "'STRING'", "'STRUCT'", "'SUMMARY'", "'SYNC'", "'SYSTEM_TIME'", 
        "'SYSTEM_VERSION'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TBLPROPERTIES'", 
        "'TEMPORARY'", "'TERMINATED'", "'THEN'", "'TIME'", "'TIMESTAMP'", 
        "'TIMESTAMPLOCALTZ'", "'TIMESTAMPTZ'", "'TINYINT'", "'TO'", "'TOUCH'", 
        "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONAL'", "'TRANSACTIONS'", 
        "'TRANSFORM'", "'TRIGGER'", "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'", 
        "'UNARCHIVE'", "'UNBOUNDED'", "'UNDO'", "'UNION'", "'UNIONTYPE'", 
        "'UNIQUE'", "'UNIQUEJOIN'", "'UNKNOWN'", "'UNLOCK'", "'UNMANAGED'", 
        "'UNSET'", "'UNSIGNED'", "'UPDATE'", "'URI'", "'URL'", "'USE'", 
        "'USER'", "'USING'", "'UTC'", "'UTC_TMESTAMP'", "'VALIDATE'", "'VALUES'", 
        "'$VALUE$'", "'VARCHAR'", "'VECTORIZATION'", "'VIEW'", "'VIEWS'", 
        "'WAIT'", "'WEEK'", "'WEEKS'", "'WHEN'", "'WHERE'", "'WHILE'", "'WINDOW'", 
        "'WITH'", "'WITHIN'", "'WORK'", "'WORKLOAD'", "'WRITE'", "'YEAR'", 
        "'YEARS'", "'ZONE'", "'.'", "':'", "','", "';'", "'('", "')'", "'['", 
        "']'", "'{'", "'}'", null, "'<=>'", null, "'<='", "'<'", "'>='", 
        "'>'", "'/'", "'+'", "'-'", "'*'", "'%'", "'DIV'", "'!'", "'&'", 
        "'~'", "'|'", "'||'", "'^'", "'?'", "'$'"
    ];

    public static readonly symbolicNames = [
        null, "KW_ABORT", "KW_ACTIVATE", "KW_ACTIVE", "KW_ADD", "KW_ADMIN", 
        "KW_AFTER", "KW_ALL", "KW_ALLOC_FRACTION", "KW_ALTER", "KW_ANALYZE", 
        "KW_AND", "KW_ANTI", "KW_ANY", "KW_APPLICATION", "KW_ARCHIVE", "KW_ARRAY", 
        "KW_AS", "KW_ASC", "KW_AST", "KW_AT", "KW_AUTHORIZATION", "KW_AUTOCOMMIT", 
        "KW_BATCH", "KW_BEFORE", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", 
        "KW_BOOLEAN", "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_CACHE", 
        "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CBO", "KW_CHANGE", "KW_CHAR", 
        "KW_CHECK", "KW_CLUSTER", "KW_CLUSTERED", "KW_CLUSTERSTATUS", "KW_COLLECTION", 
        "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPACT", 
        "KW_COMPACTIONS", "KW_COMPACT_ID", "KW_COMPUTE", "KW_CONCATENATE", 
        "KW_CONF", "KW_CONSTRAINT", "KW_CONTINUE", "KW_COST", "KW_CREATE", 
        "KW_CRON", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", 
        "KW_CURRENT_TIMESTAMP", "KW_CURSOR", "KW_DATA", "KW_DATABASE", "KW_DATABASES", 
        "KW_DATACONNECTOR", "KW_DATACONNECTORS", "KW_DATE", "KW_DATETIME", 
        "KW_DAY", "KW_DAYS", "KW_DAYOFWEEK", "KW_DBPROPERTIES", "KW_DCPROPERTIES", 
        "KW_DDL", "KW_DEBUG", "KW_DEC", "KW_DECIMAL", "KW_NUMERIC", "KW_DEFAULT", 
        "KW_DEFERRED", "KW_DEFINED", "KW_DELETE", "KW_DELIMITED", "KW_DEPENDENCY", 
        "KW_DESC", "KW_DESCRIBE", "KW_DETAIL", "KW_DIRECTORIES", "KW_DIRECTORY", 
        "KW_DISABLE", "KW_DISABLED", "KW_DISTINCT", "KW_DISTRIBUTE", "KW_DISTRIBUTED", 
        "KW_DO", "KW_DOUBLE", "KW_DROP", "KW_RECOVER", "KW_DUMP", "KW_ELEM_TYPE", 
        "KW_ELSE", "KW_ENABLE", "KW_ENABLED", "KW_END", "KW_ENFORCED", "KW_ESCAPED", 
        "KW_EVERY", "KW_EXCEPT", "KW_EXCHANGE", "KW_EXCLUSIVE", "KW_EXECUTE", 
        "KW_EXECUTED", "KW_EXISTS", "KW_EXPIRE_SNAPSHOTS", "KW_EXPLAIN", 
        "KW_EXPORT", "KW_EXPRESSION", "KW_EXTENDED", "KW_EXTERNAL", "KW_EXTRACT", 
        "KW_FALSE", "KW_FETCH", "KW_FIELDS", "KW_FILE", "KW_FILEFORMAT", 
        "KW_FIRST", "KW_FLOAT", "KW_FLOOR", "KW_FOLLOWING", "KW_FOR", "KW_FORCE", 
        "KW_FOREIGN", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", "KW_FULL", 
        "KW_FUNCTION", "KW_FUNCTIONS", "KW_GRANT", "KW_GROUP", "KW_GROUPING", 
        "KW_HAVING", "KW_HOLD_DDLTIME", "KW_HOUR", "KW_HOURS", "KW_IDXPROPERTIES", 
        "KW_IF", "KW_IGNORE", "KW_IMPORT", "KW_IN", "KW_INDEX", "KW_INDEXES", 
        "KW_INNER", "KW_INPATH", "KW_INPUTDRIVER", "KW_INPUTFORMAT", "KW_INSERT", 
        "KW_INT", "KW_INTEGER", "KW_INTERSECT", "KW_INTERVAL", "KW_INTO", 
        "KW_IS", "KW_ISOLATION", "KW_ITEMS", "KW_JAR", "KW_JOIN", "KW_JOINCOST", 
        "KW_KEY", "KW_KEYS", "KW_KEY_TYPE", "KW_KILL", "KW_LAST", "KW_LATERAL", 
        "KW_LEADING", "KW_LEFT", "KW_LESS", "KW_LEVEL", "KW_LIFECYCLE", 
        "KW_LIKE", "KW_LIMIT", "KW_LINES", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", 
        "KW_LOCK", "KW_LOCKS", "KW_LOGICAL", "KW_LONG", "KW_MACRO", "KW_MANAGED", 
        "KW_MANAGEDLOCATION", "KW_MANAGEMENT", "KW_MAP", "KW_MAPJOIN", "KW_MAPPING", 
        "KW_MATCHED", "KW_MATERIALIZED", "KW_MERGE", "KW_METADATA", "KW_MINUS", 
        "KW_MINUTE", "KW_MINUTES", "KW_MONTH", "KW_MONTHS", "KW_MORE", "KW_MOVE", 
        "KW_MSCK", "KW_NONE", "KW_NORELY", "KW_NOSCAN", "KW_NOT", "KW_NOVALIDATE", 
        "KW_NO_DROP", "KW_NULL", "KW_NULLS", "KW_OF", "KW_OFFLINE", "KW_OFFSET", 
        "KW_ON", "KW_ONLY", "KW_OPERATOR", "KW_OPTION", "KW_OR", "KW_ORDER", 
        "KW_OUT", "KW_OUTER", "KW_OUTPUTDRIVER", "KW_OUTPUTFORMAT", "KW_OVER", 
        "KW_OVERWRITE", "KW_OWNER", "KW_PARTITION", "KW_PARTITIONED", "KW_PARTITIONS", 
        "KW_PATH", "KW_PERCENT", "KW_PKFK_JOIN", "KW_PLAN", "KW_PLANS", 
        "KW_PLUS", "KW_POOL", "KW_PRECEDING", "KW_PRECISION", "KW_PREPARE", 
        "KW_PRESERVE", "KW_PRIMARY", "KW_PRINCIPALS", "KW_PROCEDURE", "KW_PROTECTION", 
        "KW_PURGE", "KW_QUALIFY", "KW_QUARTER", "KW_QUERY", "KW_QUERY_PARALLELISM", 
        "KW_RANGE", "KW_READ", "KW_READONLY", "KW_READS", "KW_REAL", "KW_REBUILD", 
        "KW_RECORDREADER", "KW_RECORDWRITER", "KW_REDUCE", "KW_REFERENCES", 
        "KW_REGEXP", "KW_RELOAD", "KW_RELY", "KW_REMOTE", "KW_RENAME", "KW_REOPTIMIZATION", 
        "KW_REPAIR", "KW_REPL", "KW_REPLACE", "KW_REPLICATION", "KW_RESOURCE", 
        "KW_RESPECT", "KW_RESTRICT", "KW_REVOKE", "KW_REWRITE", "KW_RIGHT", 
        "KW_RLIKE", "KW_ROLE", "KW_ROLES", "KW_ROLLBACK", "KW_ROLLUP", "KW_ROW", 
        "KW_ROWS", "KW_SCHEDULED", "KW_SCHEDULING_POLICY", "KW_SCHEMA", 
        "KW_SCHEMAS", "KW_SECOND", "KW_SECONDS", "KW_SELECT", "KW_SEMI", 
        "KW_SERDE", "KW_SERDEPROPERTIES", "KW_SERVER", "KW_SET", "KW_SETS", 
        "KW_SET_CURRENT_SNAPSHOT", "KW_SHARED", "KW_SHOW", "KW_SHOW_DATABASE", 
        "KW_SKEWED", "KW_SMALLINT", "KW_SNAPSHOT", "KW_SOME", "KW_SORT", 
        "KW_SORTED", "KW_SPEC", "KW_SSL", "KW_START", "KW_STATISTICS", "KW_STATUS", 
        "KW_STORED", "KW_STREAMTABLE", "KW_STRING", "KW_STRUCT", "KW_SUMMARY", 
        "KW_SYNC", "KW_SYSTEM_TIME", "KW_SYSTEM_VERSION", "KW_TABLE", "KW_TABLES", 
        "KW_TABLESAMPLE", "KW_TBLPROPERTIES", "KW_TEMPORARY", "KW_TERMINATED", 
        "KW_THEN", "KW_TIME", "KW_TIMESTAMP", "KW_TIMESTAMPLOCALTZ", "KW_TIMESTAMPTZ", 
        "KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRAILING", "KW_TRANSACTION", 
        "KW_TRANSACTIONAL", "KW_TRANSACTIONS", "KW_TRANSFORM", "KW_TRIGGER", 
        "KW_TRIM", "KW_TRUE", "KW_TRUNCATE", "KW_TYPE", "KW_UNARCHIVE", 
        "KW_UNBOUNDED", "KW_UNDO", "KW_UNION", "KW_UNIONTYPE", "KW_UNIQUE", 
        "KW_UNIQUEJOIN", "KW_UNKNOWN", "KW_UNLOCK", "KW_UNMANAGED", "KW_UNSET", 
        "KW_UNSIGNED", "KW_UPDATE", "KW_URI", "KW_URL", "KW_USE", "KW_USER", 
        "KW_USING", "KW_UTC", "KW_UTCTIMESTAMP", "KW_VALIDATE", "KW_VALUES", 
        "KW_VALUE_TYPE", "KW_VARCHAR", "KW_VECTORIZATION", "KW_VIEW", "KW_VIEWS", 
        "KW_WAIT", "KW_WEEK", "KW_WEEKS", "KW_WHEN", "KW_WHERE", "KW_WHILE", 
        "KW_WINDOW", "KW_WITH", "KW_WITHIN", "KW_WORK", "KW_WORKLOAD", "KW_WRITE", 
        "KW_YEAR", "KW_YEARS", "KW_ZONE", "DOT", "COLON", "COMMA", "SEMICOLON", 
        "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", "EQUAL", 
        "EQUAL_NS", "NOTEQUAL", "LESSTHANOREQUALTO", "LESSTHAN", "GREATERTHANOREQUALTO", 
        "GREATERTHAN", "DIVIDE", "PLUS", "MINUS", "STAR", "MOD", "DIV", 
        "BITWISENOT", "AMPERSAND", "TILDE", "BITWISEOR", "CONCATENATE", 
        "BITWISEXOR", "QUESTION", "DOLLAR", "StringLiteral", "CharSetLiteral", 
        "IntegralLiteral", "NumberLiteral", "ByteLengthLiteral", "Number", 
        "Identifier", "CharSetName", "WHITE_SPACE", "LINE_COMMENT", "QUERY_HINT", 
        "SHOW_HINT", "HIDDEN_HINT"
    ];
    public static readonly ruleNames = [
        "program", "statement", "explainStatement", "explainOption", "vectorizatonDetail", 
        "execStatement", "loadStatement", "replicationClause", "exportStatement", 
        "importStatement", "replDumpStatement", "replDbPolicy", "replLoadStatement", 
        "replTableLevelPolicy", "ddlStatement", "ifExists", "ifNotExists", 
        "restrictOrCascade", "rewriteEnabled", "rewriteDisabled", "storedAsDirs", 
        "createDatabaseStatement", "dbConnectorName", "switchDatabaseStatement", 
        "dropDatabaseStatement", "databaseComment", "truncateTableStatement", 
        "dropTableStatement", "inputFileFormat", "tabTypeExpr", "partTypeExpr", 
        "tabPartColTypeExpr", "descStatement", "analyzeStatement", "from_in", 
        "db_schema", "showStatement", "showTablesFilterExpr", "lockStatement", 
        "lockDatabase", "lockMode", "unlockStatement", "unlockDatabase", 
        "createRoleStatement", "dropRoleStatement", "grantPrivileges", "revokePrivileges", 
        "grantRole", "revokeRole", "showRoleGrants", "showRoles", "showCurrentRole", 
        "setRole", "showGrants", "showRolePrincipals", "privilegeIncludeColObject", 
        "privilegeObject", "privObject", "privObjectCols", "privilegeList", 
        "privlegeDef", "privilegeType", "principalSpecification", "principalName", 
        "principalAlterName", "withGrantOption", "grantOptionFor", "adminOptionFor", 
        "withAdminOption", "metastoreCheck", "resourceList", "resource", 
        "resourceType", "createFunctionStatement", "dropFunctionStatement", 
        "reloadFunctionsStatement", "createMacroStatement", "dropMacroStatement", 
        "createIndexStatement", "dropIndexStatement", "createViewStatement", 
        "viewPartition", "viewOrganization", "viewClusterSpec", "viewComplexSpec", 
        "viewDistSpec", "viewSortSpec", "dropViewStatement", "createMaterializedViewStatement", 
        "dropMaterializedViewStatement", "createScheduledQueryStatement", 
        "dropScheduledQueryStatement", "alterScheduledQueryStatement", "alterScheduledQueryChange", 
        "scheduleSpec", "executedAsSpec", "definedAsSpec", "showStmtIdentifier", 
        "tableComment", "tableLifecycle", "createTablePartitionSpec", "createTablePartitionColumnTypeSpec", 
        "partitionTransformSpec", "partitionTransformType", "tableBuckets", 
        "tableSkewed", "rowFormat", "recordReader", "recordWriter", "rowFormatSerde", 
        "rowFormatDelimited", "tableRowFormat", "tablePropertiesPrefixed", 
        "tableProperties", "tablePropertiesList", "keyValueProperties", 
        "keyValuePropertyList", "keyValueProperty", "tableRowFormatFieldIdentifier", 
        "tableRowFormatCollItemsIdentifier", "tableRowFormatMapKeysIdentifier", 
        "tableRowFormatLinesIdentifier", "tableRowNullFormat", "tableFileFormat", 
        "columnNameTypeList", "columnNameTypeOrConstraintList", "columnNameColonTypeList", 
        "columnNameList", "columnName", "columnNameCreate", "extColumnName", 
        "columnNameOrderList", "columnParenthesesList", "enableValidateSpecification", 
        "enableSpecification", "validateSpecification", "enforcedSpecification", 
        "relySpecification", "createConstraint", "alterConstraintWithName", 
        "tableLevelConstraint", "pkUkConstraint", "checkConstraint", "createForeignKey", 
        "alterForeignKeyWithName", "skewedValueElement", "skewedColumnValuePairList", 
        "skewedColumnValuePair", "constantList", "orderSpecification", "nullOrdering", 
        "columnNameOrder", "columnNameCommentList", "columnNameComment", 
        "columnRefOrder", "columnNameType", "columnNameTypeOrConstraint", 
        "tableConstraint", "columnNameTypeConstraint", "columnConstraint", 
        "foreignKeyConstraint", "colConstraint", "alterColumnConstraint", 
        "alterForeignKeyConstraint", "alterColConstraint", "columnConstraintType", 
        "defaultVal", "tableConstraintType", "constraintOptsCreate", "constraintOptsAlter", 
        "columnNameColonType", "columnType", "columnTypeList", "type", "primitiveType", 
        "listType", "structType", "mapType", "unionType", "setOperator", 
        "queryStatementExpression", "queryStatementExpressionBody", "withClause", 
        "cteStatement", "fromStatement", "singleFromStatement", "regularBody", 
        "atomSelectStatement", "selectStatement", "setOpSelectStatement", 
        "selectStatementWithCTE", "insertClause", "destination", "limitClause", 
        "columnAssignmentClause", "precedencePlusExpressionOrDefault", "setColumnsClause", 
        "sqlTransactionStatement", "transactionMode", "whenClauses", "whenNotMatchedClause", 
        "whenMatchedAndClause", "whenMatchedThenClause", "compactionPool", 
        "compactionType", "compactionStatus", "alterStatement", "alterTableStatementSuffix", 
        "alterTblPartitionStatementSuffix", "alterViewStatementSuffix", 
        "alterDatabaseStatementSuffix", "alterDataConnectorStatementSuffix", 
        "locationPath", "alterStatementSuffixDropPartitions", "skewedLocationMap", 
        "alterStatementSuffixExecute", "fileFormat", "likeTableOrFile", 
        "createTableStatement", "createDataConnectorStatement", "dropDataConnectorStatement", 
        "tableAllColumns", "expressionList", "aliasList", "fromClause", 
        "fromSource", "atomjoinSource", "joinSource", "joinSourcePart", 
        "uniqueJoinSource", "joinToken", "lateralView", "tableAlias", "tableSample", 
        "tableSource", "asOfClause", "dbSchemaName", "dbSchemaNameCreate", 
        "tableOrView", "tableName", "tableNameCreate", "viewName", "viewNameCreate", 
        "subQuerySource", "partitioningSpec", "partitionTableFunctionSource", 
        "partitionedTableFunction", "atomPartitionedTableFunction", "whereClause", 
        "valuesClause", "atomValuesClause", "virtualTableSource", "selectClause", 
        "selectTrfmClause", "selectList", "selectItem", "selectLiteralColumnName", 
        "selectExpressionColumnName", "trfmClause", "selectExpression", 
        "selectExpressionList", "window_clause", "window_specification", 
        "window_frame", "window_frame_boundary", "groupByClause", "rollupStandard", 
        "rollupOldSyntax", "groupingSetExpression", "havingClause", "qualifyClause", 
        "expressionOrDefault", "firstExpressionsWithAlias", "expressions", 
        "expressionsInParenthesis", "expressionsNotInParenthesis", "orderByClause", 
        "clusterByClause", "distributeByClause", "sortByClause", "function_", 
        "null_treatment", "functionNameCreate", "functionNameForDDL", "functionNameForInvoke", 
        "castExpression", "caseExpression", "whenExpression", "floorExpression", 
        "extractExpression", "timeQualifiers", "constant", "intervalValue", 
        "intervalExpression", "intervalQualifiers", "expression", "atomExpression", 
        "precedenceUnaryPrefixExpression", "precedenceBitwiseXorExpression", 
        "precedenceStarExpression", "precedencePlusExpression", "precedenceConcatenateExpression", 
        "precedenceAmpersandExpression", "precedenceBitwiseOrExpression", 
        "precedenceSimilarOperator", "subQueryExpression", "precedenceSimilarExpression", 
        "precedenceSimilarExpressionPart", "precedenceSimilarExpressionAtom", 
        "precedenceSimilarExpressionIn", "precedenceSimilarExpressionPartNot", 
        "precedenceDistinctOperator", "precedenceEqualOperator", "precedenceEqualExpression", 
        "isCondition", "precedenceNotExpression", "precedenceAndExpression", 
        "tableOrPartition", "partitionSpec", "partitionVal", "partitionSelectorSpec", 
        "partitionSelectorVal", "subQuerySelectorOperator", "sysFuncNames", 
        "id_", "functionIdentifier", "principalIdentifier", "nonReserved", 
        "sql11ReservedKeywordsUsedAsFunctionName", "configPropertiesItem", 
        "resourcePlanDdlStatements", "mappingTypes", "rpAssign", "rpAssignList", 
        "rpUnassign", "activate", "enable", "disable", "year", "month", 
        "week", "day", "hour", "minute", "second", "decimal", "poolPath", 
        "triggerAtomExpression", "triggerActionExpression", "poolAssign", 
        "poolAssignList",
    ];

    public get grammarFileName(): string { return "HiveSqlParser.g4"; }
    public get literalNames(): (string | null)[] { return HiveSqlParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return HiveSqlParser.symbolicNames; }
    public get ruleNames(): string[] { return HiveSqlParser.ruleNames; }
    public get serializedATN(): number[] { return HiveSqlParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, HiveSqlParser._ATN, HiveSqlParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public program(): ProgramContext {
        let localContext = new ProgramContext(this.context, this.state);
        this.enterRule(localContext, 0, HiveSqlParser.RULE_program);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 705;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 1538) !== 0) || _la === 48 || _la === 58 || ((((_la - 86)) & ~0x1F) === 0 && ((1 << (_la - 86)) & 540050201) !== 0) || ((((_la - 119)) & ~0x1F) === 0 && ((1 << (_la - 119)) & 17825795) !== 0) || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & 8388865) !== 0) || ((((_la - 187)) & ~0x1F) === 0 && ((1 << (_la - 187)) & 33622025) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 810024961) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 35717185) !== 0) || _la === 318 || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & 8537089) !== 0) || _la === 387 || _la === 399) {
                {
                {
                this.state = 702;
                this.statement();
                }
                }
                this.state = 707;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 708;
            this.match(HiveSqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 2, HiveSqlParser.RULE_statement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 712;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_EXPLAIN:
                {
                this.state = 710;
                this.explainStatement();
                }
                break;
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ALTER:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_COMMIT:
            case HiveSqlParser.KW_CREATE:
            case HiveSqlParser.KW_DELETE:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DESCRIBE:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DROP:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_FROM:
            case HiveSqlParser.KW_GRANT:
            case HiveSqlParser.KW_IMPORT:
            case HiveSqlParser.KW_INSERT:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_MERGE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_PREPARE:
            case HiveSqlParser.KW_REDUCE:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REVOKE:
            case HiveSqlParser.KW_ROLLBACK:
            case HiveSqlParser.KW_SELECT:
            case HiveSqlParser.KW_SET:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_START:
            case HiveSqlParser.KW_TRUNCATE:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UPDATE:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_VALUES:
            case HiveSqlParser.KW_WITH:
            case HiveSqlParser.LPAREN:
                {
                this.state = 711;
                this.execStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 715;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                {
                this.state = 714;
                this.match(HiveSqlParser.SEMICOLON);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainStatement(): ExplainStatementContext {
        let localContext = new ExplainStatementContext(this.context, this.state);
        this.enterRule(localContext, 4, HiveSqlParser.RULE_explainStatement);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 717;
            this.match(HiveSqlParser.KW_EXPLAIN);
            this.state = 727;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ALTER:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AUTHORIZATION:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_COMMIT:
            case HiveSqlParser.KW_CREATE:
            case HiveSqlParser.KW_DDL:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DELETE:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DESCRIBE:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DROP:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXTENDED:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FROM:
            case HiveSqlParser.KW_GRANT:
            case HiveSqlParser.KW_IMPORT:
            case HiveSqlParser.KW_INSERT:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_MERGE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_PREPARE:
            case HiveSqlParser.KW_REDUCE:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REVOKE:
            case HiveSqlParser.KW_ROLLBACK:
            case HiveSqlParser.KW_SELECT:
            case HiveSqlParser.KW_SET:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_START:
            case HiveSqlParser.KW_TRUNCATE:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UPDATE:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_VALUES:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_WITH:
            case HiveSqlParser.LPAREN:
                {
                this.state = 721;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 3, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 718;
                        this.explainOption();
                        }
                        }
                    }
                    this.state = 723;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 3, this.context);
                }
                this.state = 724;
                this.execStatement();
                }
                break;
            case HiveSqlParser.KW_REWRITE:
                {
                this.state = 725;
                this.match(HiveSqlParser.KW_REWRITE);
                this.state = 726;
                this.queryStatementExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainOption(): ExplainOptionContext {
        let localContext = new ExplainOptionContext(this.context, this.state);
        this.enterRule(localContext, 6, HiveSqlParser.RULE_explainOption);
        let _la: number;
        try {
            this.state = 751;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_EXTENDED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 729;
                this.match(HiveSqlParser.KW_EXTENDED);
                }
                break;
            case HiveSqlParser.KW_FORMATTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 730;
                this.match(HiveSqlParser.KW_FORMATTED);
                }
                break;
            case HiveSqlParser.KW_DEPENDENCY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 731;
                this.match(HiveSqlParser.KW_DEPENDENCY);
                }
                break;
            case HiveSqlParser.KW_CBO:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 732;
                this.match(HiveSqlParser.KW_CBO);
                this.state = 734;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 57 || _la === 172) {
                    {
                    this.state = 733;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 57 || _la === 172)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case HiveSqlParser.KW_LOGICAL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 736;
                this.match(HiveSqlParser.KW_LOGICAL);
                }
                break;
            case HiveSqlParser.KW_AUTHORIZATION:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 737;
                this.match(HiveSqlParser.KW_AUTHORIZATION);
                }
                break;
            case HiveSqlParser.KW_ANALYZE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 738;
                this.match(HiveSqlParser.KW_ANALYZE);
                }
                break;
            case HiveSqlParser.KW_REOPTIMIZATION:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 739;
                this.match(HiveSqlParser.KW_REOPTIMIZATION);
                }
                break;
            case HiveSqlParser.KW_LOCKS:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 740;
                this.match(HiveSqlParser.KW_LOCKS);
                }
                break;
            case HiveSqlParser.KW_AST:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 741;
                this.match(HiveSqlParser.KW_AST);
                }
                break;
            case HiveSqlParser.KW_VECTORIZATION:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 742;
                this.match(HiveSqlParser.KW_VECTORIZATION);
                this.state = 744;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 743;
                    this.match(HiveSqlParser.KW_ONLY);
                    }
                }

                this.state = 747;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 91 || _la === 121 || _la === 226 || _la === 325) {
                    {
                    this.state = 746;
                    this.vectorizatonDetail();
                    }
                }

                }
                break;
            case HiveSqlParser.KW_DEBUG:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 749;
                this.match(HiveSqlParser.KW_DEBUG);
                }
                break;
            case HiveSqlParser.KW_DDL:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 750;
                this.match(HiveSqlParser.KW_DDL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vectorizatonDetail(): VectorizatonDetailContext {
        let localContext = new VectorizatonDetailContext(this.context, this.state);
        this.enterRule(localContext, 8, HiveSqlParser.RULE_vectorizatonDetail);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 753;
            _la = this.tokenStream.LA(1);
            if(!(_la === 91 || _la === 121 || _la === 226 || _la === 325)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public execStatement(): ExecStatementContext {
        let localContext = new ExecStatementContext(this.context, this.state);
        this.enterRule(localContext, 10, HiveSqlParser.RULE_execStatement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 826;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 17, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 755;
                this.queryStatementExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 756;
                this.loadStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 757;
                this.exportStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 758;
                this.importStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 759;
                this.replDumpStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 760;
                this.replLoadStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 761;
                this.match(HiveSqlParser.KW_REPL);
                this.state = 762;
                this.match(HiveSqlParser.KW_STATUS);
                this.state = 763;
                localContext._dbName = this.dbSchemaName();
                this.state = 766;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
                case 1:
                    {
                    this.state = 764;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 765;
                    localContext._replConf = this.keyValueProperties();
                    }
                    break;
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 768;
                this.ddlStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 769;
                this.match(HiveSqlParser.KW_DELETE);
                this.state = 770;
                this.match(HiveSqlParser.KW_FROM);
                this.state = 771;
                this.tableName();
                this.state = 773;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 384) {
                    {
                    this.state = 772;
                    this.whereClause();
                    }
                }

                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 775;
                this.match(HiveSqlParser.KW_UPDATE);
                this.state = 776;
                this.tableName();
                this.state = 777;
                this.setColumnsClause();
                this.state = 779;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 384) {
                    {
                    this.state = 778;
                    this.whereClause();
                    }
                }

                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 781;
                this.sqlTransactionStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 782;
                this.match(HiveSqlParser.KW_MERGE);
                this.state = 784;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 436) {
                    {
                    this.state = 783;
                    this.match(HiveSqlParser.QUERY_HINT);
                    }
                }

                this.state = 786;
                this.match(HiveSqlParser.KW_INTO);
                this.state = 787;
                this.tableName();
                this.state = 792;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252585854) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394 || _la === 432) {
                    {
                    this.state = 789;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 788;
                        this.match(HiveSqlParser.KW_AS);
                        }
                    }

                    this.state = 791;
                    this.id_();
                    }
                }

                this.state = 794;
                this.match(HiveSqlParser.KW_USING);
                this.state = 795;
                this.joinSourcePart();
                this.state = 796;
                this.match(HiveSqlParser.KW_ON);
                this.state = 797;
                this.expression();
                this.state = 798;
                this.whenClauses();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 800;
                this.match(HiveSqlParser.KW_PREPARE);
                this.state = 801;
                this.id_();
                this.state = 802;
                this.match(HiveSqlParser.KW_FROM);
                this.state = 803;
                this.queryStatementExpression();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 805;
                this.match(HiveSqlParser.KW_EXECUTE);
                this.state = 806;
                this.id_();
                this.state = 807;
                this.match(HiveSqlParser.KW_USING);
                this.state = 808;
                this.constantList();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 810;
                this.match(HiveSqlParser.KW_SET);
                this.state = 811;
                this.configPropertiesItem();
                this.state = 816;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 395 || _la === 396) {
                    {
                    {
                    this.state = 812;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 395 || _la === 396)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 813;
                    this.configPropertiesItem();
                    }
                    }
                    this.state = 818;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 819;
                this.match(HiveSqlParser.EQUAL);
                this.state = 823;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 16, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 820;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 825;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 16, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadStatement(): LoadStatementContext {
        let localContext = new LoadStatementContext(this.context, this.state);
        this.enterRule(localContext, 12, HiveSqlParser.RULE_loadStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 828;
            this.match(HiveSqlParser.KW_LOAD);
            this.state = 829;
            this.match(HiveSqlParser.KW_DATA);
            this.state = 831;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 188) {
                {
                this.state = 830;
                this.match(HiveSqlParser.KW_LOCAL);
                }
            }

            this.state = 833;
            this.match(HiveSqlParser.KW_INPATH);
            this.state = 834;
            this.match(HiveSqlParser.StringLiteral);
            this.state = 836;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235) {
                {
                this.state = 835;
                this.match(HiveSqlParser.KW_OVERWRITE);
                }
            }

            this.state = 838;
            this.match(HiveSqlParser.KW_INTO);
            this.state = 839;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 840;
            this.tableOrPartition();
            this.state = 842;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 160) {
                {
                this.state = 841;
                this.inputFileFormat();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replicationClause(): ReplicationClauseContext {
        let localContext = new ReplicationClauseContext(this.context, this.state);
        this.enterRule(localContext, 14, HiveSqlParser.RULE_replicationClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 844;
            this.match(HiveSqlParser.KW_FOR);
            this.state = 846;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 204) {
                {
                this.state = 845;
                this.match(HiveSqlParser.KW_METADATA);
                }
            }

            this.state = 848;
            this.match(HiveSqlParser.KW_REPLICATION);
            this.state = 849;
            this.match(HiveSqlParser.LPAREN);
            this.state = 850;
            this.match(HiveSqlParser.StringLiteral);
            this.state = 851;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exportStatement(): ExportStatementContext {
        let localContext = new ExportStatementContext(this.context, this.state);
        this.enterRule(localContext, 16, HiveSqlParser.RULE_exportStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 853;
            this.match(HiveSqlParser.KW_EXPORT);
            this.state = 854;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 855;
            this.tableOrPartition();
            this.state = 856;
            this.match(HiveSqlParser.KW_TO);
            this.state = 857;
            this.match(HiveSqlParser.StringLiteral);
            this.state = 859;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 134) {
                {
                this.state = 858;
                this.replicationClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importStatement(): ImportStatementContext {
        let localContext = new ImportStatementContext(this.context, this.state);
        this.enterRule(localContext, 18, HiveSqlParser.RULE_importStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 861;
            this.match(HiveSqlParser.KW_IMPORT);
            this.state = 867;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123 || _la === 329) {
                {
                this.state = 863;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 123) {
                    {
                    this.state = 862;
                    this.match(HiveSqlParser.KW_EXTERNAL);
                    }
                }

                this.state = 865;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 866;
                this.tableOrPartition();
                }
            }

            this.state = 869;
            this.match(HiveSqlParser.KW_FROM);
            this.state = 870;
            localContext._path = this.match(HiveSqlParser.StringLiteral);
            this.state = 872;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 189) {
                {
                this.state = 871;
                this.locationPath();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replDumpStatement(): ReplDumpStatementContext {
        let localContext = new ReplDumpStatementContext(this.context, this.state);
        this.enterRule(localContext, 20, HiveSqlParser.RULE_replDumpStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 874;
            this.match(HiveSqlParser.KW_REPL);
            this.state = 875;
            this.match(HiveSqlParser.KW_DUMP);
            this.state = 876;
            localContext._dbPolicy = this.replDbPolicy();
            this.state = 879;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 26, this.context) ) {
            case 1:
                {
                this.state = 877;
                this.match(HiveSqlParser.KW_REPLACE);
                this.state = 878;
                localContext._oldDbPolicy = this.replDbPolicy();
                }
                break;
            }
            this.state = 883;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
            case 1:
                {
                this.state = 881;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 882;
                localContext._replConf = this.keyValueProperties();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replDbPolicy(): ReplDbPolicyContext {
        let localContext = new ReplDbPolicyContext(this.context, this.state);
        this.enterRule(localContext, 22, HiveSqlParser.RULE_replDbPolicy);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 885;
            localContext._dbName = this.dbSchemaName();
            this.state = 888;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 395) {
                {
                this.state = 886;
                this.match(HiveSqlParser.DOT);
                this.state = 887;
                localContext._tablePolicy = this.replTableLevelPolicy();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replLoadStatement(): ReplLoadStatementContext {
        let localContext = new ReplLoadStatementContext(this.context, this.state);
        this.enterRule(localContext, 24, HiveSqlParser.RULE_replLoadStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 890;
            this.match(HiveSqlParser.KW_REPL);
            this.state = 891;
            this.match(HiveSqlParser.KW_LOAD);
            this.state = 892;
            localContext._sourceDbPolicy = this.replDbPolicy();
            this.state = 895;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 166) {
                {
                this.state = 893;
                this.match(HiveSqlParser.KW_INTO);
                this.state = 894;
                localContext._dbName = this.dbSchemaName();
                }
            }

            this.state = 899;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
            case 1:
                {
                this.state = 897;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 898;
                localContext._replConf = this.keyValueProperties();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replTableLevelPolicy(): ReplTableLevelPolicyContext {
        let localContext = new ReplTableLevelPolicyContext(this.context, this.state);
        this.enterRule(localContext, 26, HiveSqlParser.RULE_replTableLevelPolicy);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 901;
            localContext._replTablesIncludeList = this.match(HiveSqlParser.StringLiteral);
            this.state = 904;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 395) {
                {
                this.state = 902;
                this.match(HiveSqlParser.DOT);
                this.state = 903;
                localContext._replTablesExcludeList = this.match(HiveSqlParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ddlStatement(): DdlStatementContext {
        let localContext = new DdlStatementContext(this.context, this.state);
        this.enterRule(localContext, 28, HiveSqlParser.RULE_ddlStatement);
        let _la: number;
        try {
            this.state = 964;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 906;
                this.createDatabaseStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 907;
                this.switchDatabaseStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 908;
                this.dropDatabaseStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 909;
                this.createTableStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 910;
                this.dropTableStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 911;
                this.truncateTableStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 912;
                this.alterStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 913;
                this.descStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 914;
                this.showStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 915;
                this.metastoreCheck();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 916;
                this.createViewStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 917;
                this.createMaterializedViewStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 918;
                this.createScheduledQueryStatement();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 919;
                this.alterScheduledQueryStatement();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 920;
                this.dropScheduledQueryStatement();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 921;
                this.dropViewStatement();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 922;
                this.dropMaterializedViewStatement();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 923;
                this.createFunctionStatement();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 924;
                this.createMacroStatement();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 925;
                this.dropFunctionStatement();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 926;
                this.reloadFunctionsStatement();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 927;
                this.dropMacroStatement();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 928;
                this.createIndexStatement();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 929;
                this.dropIndexStatement();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 930;
                this.analyzeStatement();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 931;
                this.lockStatement();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 932;
                this.unlockStatement();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 933;
                this.lockDatabase();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 934;
                this.unlockDatabase();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 935;
                this.createRoleStatement();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 936;
                this.dropRoleStatement();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 937;
                this.grantPrivileges();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 938;
                this.revokePrivileges();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 939;
                this.showGrants();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 940;
                this.showRoleGrants();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 941;
                this.showRolePrincipals();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 942;
                this.showRoles();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 943;
                this.grantRole();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 944;
                this.revokeRole();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 945;
                this.setRole();
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 946;
                this.showCurrentRole();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 947;
                this.match(HiveSqlParser.KW_ABORT);
                this.state = 948;
                _la = this.tokenStream.LA(1);
                if(!(_la === 50 || _la === 346)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 950;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 949;
                    this.match(HiveSqlParser.Number);
                    }
                    }
                    this.state = 952;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 431);
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 954;
                this.match(HiveSqlParser.KW_KILL);
                this.state = 955;
                this.match(HiveSqlParser.KW_QUERY);
                this.state = 957;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 956;
                    this.match(HiveSqlParser.StringLiteral);
                    }
                    }
                    this.state = 959;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 426);
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 961;
                this.resourcePlanDdlStatements();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 962;
                this.createDataConnectorStatement();
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 963;
                this.dropDataConnectorStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExists(): IfExistsContext {
        let localContext = new IfExistsContext(this.context, this.state);
        this.enterRule(localContext, 30, HiveSqlParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 966;
            this.match(HiveSqlParser.KW_IF);
            this.state = 967;
            this.match(HiveSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifNotExists(): IfNotExistsContext {
        let localContext = new IfNotExistsContext(this.context, this.state);
        this.enterRule(localContext, 32, HiveSqlParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 969;
            this.match(HiveSqlParser.KW_IF);
            this.state = 970;
            this.match(HiveSqlParser.KW_NOT);
            this.state = 971;
            this.match(HiveSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public restrictOrCascade(): RestrictOrCascadeContext {
        let localContext = new RestrictOrCascadeContext(this.context, this.state);
        this.enterRule(localContext, 34, HiveSqlParser.RULE_restrictOrCascade);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 973;
            _la = this.tokenStream.LA(1);
            if(!(_la === 34 || _la === 282)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rewriteEnabled(): RewriteEnabledContext {
        let localContext = new RewriteEnabledContext(this.context, this.state);
        this.enterRule(localContext, 36, HiveSqlParser.RULE_rewriteEnabled);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 975;
            this.enable();
            this.state = 976;
            this.match(HiveSqlParser.KW_REWRITE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rewriteDisabled(): RewriteDisabledContext {
        let localContext = new RewriteDisabledContext(this.context, this.state);
        this.enterRule(localContext, 38, HiveSqlParser.RULE_rewriteDisabled);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 978;
            this.disable();
            this.state = 979;
            this.match(HiveSqlParser.KW_REWRITE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storedAsDirs(): StoredAsDirsContext {
        let localContext = new StoredAsDirsContext(this.context, this.state);
        this.enterRule(localContext, 40, HiveSqlParser.RULE_storedAsDirs);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 981;
            this.match(HiveSqlParser.KW_STORED);
            this.state = 982;
            this.match(HiveSqlParser.KW_AS);
            this.state = 983;
            this.match(HiveSqlParser.KW_DIRECTORIES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext {
        let localContext = new CreateDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 42, HiveSqlParser.RULE_createDatabaseStatement);
        let _la: number;
        try {
            this.state = 1025;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 44, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 985;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 987;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 273) {
                    {
                    this.state = 986;
                    this.match(HiveSqlParser.KW_REMOTE);
                    }
                }

                this.state = 989;
                this.db_schema();
                this.state = 991;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 990;
                    this.ifNotExists();
                    }
                }

                this.state = 993;
                localContext._name = this.dbSchemaNameCreate();
                this.state = 995;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47) {
                    {
                    this.state = 994;
                    this.databaseComment();
                    }
                }

                this.state = 998;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 189) {
                    {
                    this.state = 997;
                    this.locationPath();
                    }
                }

                this.state = 1002;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 1000;
                    this.match(HiveSqlParser.KW_MANAGEDLOCATION);
                    this.state = 1001;
                    localContext._locn = this.match(HiveSqlParser.StringLiteral);
                    }
                }

                this.state = 1007;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 40, this.context) ) {
                case 1:
                    {
                    this.state = 1004;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 1005;
                    this.match(HiveSqlParser.KW_DBPROPERTIES);
                    this.state = 1006;
                    localContext._dbprops = this.keyValueProperties();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1009;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 1010;
                this.match(HiveSqlParser.KW_REMOTE);
                this.state = 1011;
                this.db_schema();
                this.state = 1013;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 1012;
                    this.ifNotExists();
                    }
                }

                this.state = 1015;
                localContext._name = this.dbSchemaNameCreate();
                this.state = 1017;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47) {
                    {
                    this.state = 1016;
                    this.databaseComment();
                    }
                }

                this.state = 1019;
                this.dbConnectorName();
                this.state = 1023;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 43, this.context) ) {
                case 1:
                    {
                    this.state = 1020;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 1021;
                    this.match(HiveSqlParser.KW_DBPROPERTIES);
                    this.state = 1022;
                    localContext._dbprops = this.keyValueProperties();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbConnectorName(): DbConnectorNameContext {
        let localContext = new DbConnectorNameContext(this.context, this.state);
        this.enterRule(localContext, 44, HiveSqlParser.RULE_dbConnectorName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1027;
            this.match(HiveSqlParser.KW_USING);
            this.state = 1028;
            localContext._dcName = this.dbSchemaName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public switchDatabaseStatement(): SwitchDatabaseStatementContext {
        let localContext = new SwitchDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 46, HiveSqlParser.RULE_switchDatabaseStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1030;
            this.match(HiveSqlParser.KW_USE);
            this.state = 1031;
            this.dbSchemaName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropDatabaseStatement(): DropDatabaseStatementContext {
        let localContext = new DropDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 48, HiveSqlParser.RULE_dropDatabaseStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1033;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1034;
            this.db_schema();
            this.state = 1036;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1035;
                this.ifExists();
                }
            }

            this.state = 1038;
            this.dbSchemaName();
            this.state = 1040;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34 || _la === 282) {
                {
                this.state = 1039;
                this.restrictOrCascade();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseComment(): DatabaseCommentContext {
        let localContext = new DatabaseCommentContext(this.context, this.state);
        this.enterRule(localContext, 50, HiveSqlParser.RULE_databaseComment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1042;
            this.match(HiveSqlParser.KW_COMMENT);
            this.state = 1043;
            localContext._comment = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncateTableStatement(): TruncateTableStatementContext {
        let localContext = new TruncateTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 52, HiveSqlParser.RULE_truncateTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1045;
            this.match(HiveSqlParser.KW_TRUNCATE);
            this.state = 1047;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 329) {
                {
                this.state = 1046;
                this.match(HiveSqlParser.KW_TABLE);
                }
            }

            this.state = 1049;
            this.tableOrPartition();
            this.state = 1055;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 46) {
                {
                this.state = 1050;
                this.match(HiveSqlParser.KW_COLUMNS);
                this.state = 1051;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1052;
                this.columnNameList();
                this.state = 1053;
                this.match(HiveSqlParser.RPAREN);
                }
            }

            this.state = 1058;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 135) {
                {
                this.state = 1057;
                this.match(HiveSqlParser.KW_FORCE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropTableStatement(): DropTableStatementContext {
        let localContext = new DropTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 54, HiveSqlParser.RULE_dropTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1060;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1061;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 1063;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1062;
                this.ifExists();
                }
            }

            this.state = 1065;
            this.tableName();
            this.state = 1067;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 255) {
                {
                this.state = 1066;
                this.match(HiveSqlParser.KW_PURGE);
                }
            }

            this.state = 1070;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 134) {
                {
                this.state = 1069;
                this.replicationClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inputFileFormat(): InputFileFormatContext {
        let localContext = new InputFileFormatContext(this.context, this.state);
        this.enterRule(localContext, 56, HiveSqlParser.RULE_inputFileFormat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1072;
            this.match(HiveSqlParser.KW_INPUTFORMAT);
            this.state = 1073;
            localContext._inFmt = this.match(HiveSqlParser.StringLiteral);
            this.state = 1074;
            this.match(HiveSqlParser.KW_SERDE);
            this.state = 1075;
            localContext._serdeCls = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tabTypeExpr(): TabTypeExprContext {
        let localContext = new TabTypeExprContext(this.context, this.state);
        this.enterRule(localContext, 58, HiveSqlParser.RULE_tabTypeExpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1077;
            this.id_();
            this.state = 1080;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 395) {
                {
                this.state = 1078;
                this.match(HiveSqlParser.DOT);
                this.state = 1079;
                this.id_();
                }
            }

            this.state = 1095;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 56, this.context) ) {
            case 1:
                {
                this.state = 1082;
                this.id_();
                this.state = 1092;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 395) {
                    {
                    {
                    this.state = 1083;
                    this.match(HiveSqlParser.DOT);
                    this.state = 1088;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
                    case 1:
                        {
                        this.state = 1084;
                        this.match(HiveSqlParser.KW_ELEM_TYPE);
                        }
                        break;
                    case 2:
                        {
                        this.state = 1085;
                        this.match(HiveSqlParser.KW_KEY_TYPE);
                        }
                        break;
                    case 3:
                        {
                        this.state = 1086;
                        this.match(HiveSqlParser.KW_VALUE_TYPE);
                        }
                        break;
                    case 4:
                        {
                        this.state = 1087;
                        this.id_();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 1094;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partTypeExpr(): PartTypeExprContext {
        let localContext = new PartTypeExprContext(this.context, this.state);
        this.enterRule(localContext, 60, HiveSqlParser.RULE_partTypeExpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1097;
            this.tabTypeExpr();
            this.state = 1099;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 237) {
                {
                this.state = 1098;
                this.partitionSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tabPartColTypeExpr(): TabPartColTypeExprContext {
        let localContext = new TabPartColTypeExprContext(this.context, this.state);
        this.enterRule(localContext, 62, HiveSqlParser.RULE_tabPartColTypeExpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1101;
            this.tableOrView();
            this.state = 1103;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
            case 1:
                {
                this.state = 1102;
                this.partitionSpec();
                }
                break;
            }
            this.state = 1106;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 59, this.context) ) {
            case 1:
                {
                this.state = 1105;
                this.extColumnName();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descStatement(): DescStatementContext {
        let localContext = new DescStatementContext(this.context, this.state);
        this.enterRule(localContext, 64, HiveSqlParser.RULE_descStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1108;
            _la = this.tokenStream.LA(1);
            if(!(_la === 89 || _la === 90)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1131;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 64, this.context) ) {
            case 1:
                {
                this.state = 1109;
                this.db_schema();
                this.state = 1111;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 1110;
                    this.match(HiveSqlParser.KW_EXTENDED);
                    }
                }

                this.state = 1113;
                localContext._dbName = this.dbSchemaName();
                }
                break;
            case 2:
                {
                this.state = 1115;
                this.match(HiveSqlParser.KW_DATACONNECTOR);
                this.state = 1117;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 1116;
                    this.match(HiveSqlParser.KW_EXTENDED);
                    }
                }

                this.state = 1119;
                localContext._dcName = this.dbSchemaName();
                }
                break;
            case 3:
                {
                this.state = 1120;
                this.match(HiveSqlParser.KW_FUNCTION);
                this.state = 1122;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 1121;
                    this.match(HiveSqlParser.KW_EXTENDED);
                    }
                }

                this.state = 1124;
                localContext._name = this.functionNameForDDL();
                }
                break;
            case 4:
                {
                this.state = 1127;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_FORMATTED:
                    {
                    this.state = 1125;
                    localContext._descOptions = this.match(HiveSqlParser.KW_FORMATTED);
                    }
                    break;
                case HiveSqlParser.KW_EXTENDED:
                    {
                    this.state = 1126;
                    localContext._descOptions = this.match(HiveSqlParser.KW_EXTENDED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1129;
                localContext._parttype = this.tabPartColTypeExpr();
                }
                break;
            case 5:
                {
                this.state = 1130;
                localContext._parttype = this.tabPartColTypeExpr();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzeStatement(): AnalyzeStatementContext {
        let localContext = new AnalyzeStatementContext(this.context, this.state);
        this.enterRule(localContext, 66, HiveSqlParser.RULE_analyzeStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1133;
            this.match(HiveSqlParser.KW_ANALYZE);
            this.state = 1134;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 1135;
            localContext._parttype = this.tableOrPartition();
            this.state = 1148;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_COMPUTE:
                {
                this.state = 1136;
                this.match(HiveSqlParser.KW_COMPUTE);
                this.state = 1137;
                this.match(HiveSqlParser.KW_STATISTICS);
                this.state = 1144;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_NOSCAN:
                    {
                    this.state = 1138;
                    localContext._noscan = this.match(HiveSqlParser.KW_NOSCAN);
                    }
                    break;
                case HiveSqlParser.KW_FOR:
                    {
                    this.state = 1139;
                    this.match(HiveSqlParser.KW_FOR);
                    this.state = 1140;
                    this.match(HiveSqlParser.KW_COLUMNS);
                    this.state = 1142;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 65, this.context) ) {
                    case 1:
                        {
                        this.state = 1141;
                        localContext._statsColumnName = this.columnNameList();
                        }
                        break;
                    }
                    }
                    break;
                case HiveSqlParser.EOF:
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ALTER:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_COMMIT:
                case HiveSqlParser.KW_CREATE:
                case HiveSqlParser.KW_DELETE:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DESCRIBE:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DROP:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_GRANT:
                case HiveSqlParser.KW_IMPORT:
                case HiveSqlParser.KW_INSERT:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MERGE:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_PREPARE:
                case HiveSqlParser.KW_REDUCE:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_REVOKE:
                case HiveSqlParser.KW_ROLLBACK:
                case HiveSqlParser.KW_SELECT:
                case HiveSqlParser.KW_SET:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_START:
                case HiveSqlParser.KW_TRUNCATE:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UPDATE:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_VALUES:
                case HiveSqlParser.KW_WITH:
                case HiveSqlParser.SEMICOLON:
                case HiveSqlParser.LPAREN:
                    break;
                default:
                    break;
                }
                }
                break;
            case HiveSqlParser.KW_CACHE:
                {
                this.state = 1146;
                this.match(HiveSqlParser.KW_CACHE);
                this.state = 1147;
                this.match(HiveSqlParser.KW_METADATA);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_in(): From_inContext {
        let localContext = new From_inContext(this.context, this.state);
        this.enterRule(localContext, 68, HiveSqlParser.RULE_from_in);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1150;
            _la = this.tokenStream.LA(1);
            if(!(_la === 139 || _la === 154)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public db_schema(): Db_schemaContext {
        let localContext = new Db_schemaContext(this.context, this.state);
        this.enterRule(localContext, 70, HiveSqlParser.RULE_db_schema);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1152;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 295)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStatement(): ShowStatementContext {
        let localContext = new ShowStatementContext(this.context, this.state);
        this.enterRule(localContext, 72, HiveSqlParser.RULE_showStatement);
        let _la: number;
        try {
            this.state = 1337;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 103, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1154;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1155;
                _la = this.tokenStream.LA(1);
                if(!(_la === 68 || _la === 296)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1158;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 184) {
                    {
                    this.state = 1156;
                    this.match(HiveSqlParser.KW_LIKE);
                    this.state = 1157;
                    this.showStmtIdentifier();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1160;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1162;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 1161;
                    localContext._isExtended = this.match(HiveSqlParser.KW_EXTENDED);
                    }
                }

                this.state = 1164;
                this.match(HiveSqlParser.KW_TABLES);
                this.state = 1168;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 70, this.context) ) {
                case 1:
                    {
                    this.state = 1165;
                    this.from_in();
                    this.state = 1166;
                    localContext._db_name = this.dbSchemaName();
                    }
                    break;
                }
                this.state = 1171;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 71, this.context) ) {
                case 1:
                    {
                    this.state = 1170;
                    localContext._filter = this.showTablesFilterExpr();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1173;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1174;
                this.match(HiveSqlParser.KW_VIEWS);
                this.state = 1178;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 72, this.context) ) {
                case 1:
                    {
                    this.state = 1175;
                    this.from_in();
                    this.state = 1176;
                    localContext._db_name = this.dbSchemaName();
                    }
                    break;
                }
                this.state = 1183;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 73, this.context) ) {
                case 1:
                    {
                    this.state = 1180;
                    this.match(HiveSqlParser.KW_LIKE);
                    this.state = 1181;
                    this.showStmtIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 1182;
                    this.showStmtIdentifier();
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1185;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1186;
                this.match(HiveSqlParser.KW_MATERIALIZED);
                this.state = 1187;
                this.match(HiveSqlParser.KW_VIEWS);
                this.state = 1191;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 74, this.context) ) {
                case 1:
                    {
                    this.state = 1188;
                    this.from_in();
                    this.state = 1189;
                    localContext._db_name = this.dbSchemaName();
                    }
                    break;
                }
                this.state = 1196;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 75, this.context) ) {
                case 1:
                    {
                    this.state = 1193;
                    this.match(HiveSqlParser.KW_LIKE);
                    this.state = 1194;
                    this.showStmtIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 1195;
                    this.showStmtIdentifier();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1198;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1200;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 315) {
                    {
                    this.state = 1199;
                    this.match(HiveSqlParser.KW_SORTED);
                    }
                }

                this.state = 1202;
                this.match(HiveSqlParser.KW_COLUMNS);
                this.state = 1203;
                this.from_in();
                this.state = 1204;
                this.tableOrView();
                this.state = 1208;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 77, this.context) ) {
                case 1:
                    {
                    this.state = 1205;
                    this.from_in();
                    this.state = 1206;
                    localContext._db_name = this.dbSchemaName();
                    }
                    break;
                }
                this.state = 1213;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 78, this.context) ) {
                case 1:
                    {
                    this.state = 1210;
                    this.match(HiveSqlParser.KW_LIKE);
                    this.state = 1211;
                    this.showStmtIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 1212;
                    this.showStmtIdentifier();
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1215;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1216;
                this.match(HiveSqlParser.KW_FUNCTIONS);
                this.state = 1219;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 184) {
                    {
                    this.state = 1217;
                    this.match(HiveSqlParser.KW_LIKE);
                    this.state = 1218;
                    this.functionNameForDDL();
                    }
                }

                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1221;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1222;
                this.match(HiveSqlParser.KW_PARTITIONS);
                this.state = 1223;
                localContext._tabOrViewName = this.tableOrView();
                this.state = 1225;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 237) {
                    {
                    this.state = 1224;
                    this.partitionSpec();
                    }
                }

                this.state = 1228;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 384) {
                    {
                    this.state = 1227;
                    this.whereClause();
                    }
                }

                this.state = 1231;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 1230;
                    this.orderByClause();
                    }
                }

                this.state = 1234;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 185) {
                    {
                    this.state = 1233;
                    this.limitClause();
                    }
                }

                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1236;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1237;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 1243;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_DATABASE:
                case HiveSqlParser.KW_SCHEMA:
                    {
                    this.state = 1238;
                    this.db_schema();
                    this.state = 1239;
                    localContext._db_name = this.dbSchemaName();
                    }
                    break;
                case HiveSqlParser.KW_TABLE:
                    {
                    this.state = 1241;
                    this.match(HiveSqlParser.KW_TABLE);
                    this.state = 1242;
                    localContext._tabName = this.tableName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1245;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1246;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 1247;
                this.match(HiveSqlParser.KW_EXTENDED);
                this.state = 1251;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 139 || _la === 154) {
                    {
                    this.state = 1248;
                    this.from_in();
                    this.state = 1249;
                    localContext._db_name = this.dbSchemaName();
                    }
                }

                this.state = 1253;
                this.match(HiveSqlParser.KW_LIKE);
                this.state = 1254;
                this.showStmtIdentifier();
                this.state = 1256;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 237) {
                    {
                    this.state = 1255;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1258;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1259;
                this.match(HiveSqlParser.KW_TBLPROPERTIES);
                this.state = 1260;
                this.tableName();
                this.state = 1264;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 87, this.context) ) {
                case 1:
                    {
                    this.state = 1261;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 1262;
                    localContext._prptyName = this.match(HiveSqlParser.StringLiteral);
                    this.state = 1263;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                }
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1266;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1267;
                this.match(HiveSqlParser.KW_LOCKS);
                this.state = 1279;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 91, this.context) ) {
                case 1:
                    {
                    this.state = 1268;
                    this.db_schema();
                    this.state = 1269;
                    localContext._dbName = this.dbSchemaName();
                    this.state = 1271;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 122) {
                        {
                        this.state = 1270;
                        localContext._isExtended = this.match(HiveSqlParser.KW_EXTENDED);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 1274;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
                    case 1:
                        {
                        this.state = 1273;
                        localContext._parttype = this.partTypeExpr();
                        }
                        break;
                    }
                    this.state = 1277;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 122) {
                        {
                        this.state = 1276;
                        localContext._isExtended = this.match(HiveSqlParser.KW_EXTENDED);
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1281;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1282;
                this.match(HiveSqlParser.KW_COMPACTIONS);
                this.state = 1309;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_COMPACT_ID:
                    {
                    this.state = 1283;
                    this.match(HiveSqlParser.KW_COMPACT_ID);
                    this.state = 1284;
                    this.match(HiveSqlParser.EQUAL);
                    this.state = 1285;
                    localContext._compactId = this.match(HiveSqlParser.Number);
                    }
                    break;
                case HiveSqlParser.EOF:
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ACTIVATE:
                case HiveSqlParser.KW_ACTIVE:
                case HiveSqlParser.KW_ADD:
                case HiveSqlParser.KW_ADMIN:
                case HiveSqlParser.KW_AFTER:
                case HiveSqlParser.KW_ALLOC_FRACTION:
                case HiveSqlParser.KW_ALTER:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_ARCHIVE:
                case HiveSqlParser.KW_ASC:
                case HiveSqlParser.KW_AST:
                case HiveSqlParser.KW_AT:
                case HiveSqlParser.KW_AUTOCOMMIT:
                case HiveSqlParser.KW_BATCH:
                case HiveSqlParser.KW_BEFORE:
                case HiveSqlParser.KW_BUCKET:
                case HiveSqlParser.KW_BUCKETS:
                case HiveSqlParser.KW_CACHE:
                case HiveSqlParser.KW_CASCADE:
                case HiveSqlParser.KW_CBO:
                case HiveSqlParser.KW_CHANGE:
                case HiveSqlParser.KW_CHECK:
                case HiveSqlParser.KW_CLUSTER:
                case HiveSqlParser.KW_CLUSTERED:
                case HiveSqlParser.KW_CLUSTERSTATUS:
                case HiveSqlParser.KW_COLLECTION:
                case HiveSqlParser.KW_COLUMNS:
                case HiveSqlParser.KW_COMMENT:
                case HiveSqlParser.KW_COMMIT:
                case HiveSqlParser.KW_COMPACT:
                case HiveSqlParser.KW_COMPACTIONS:
                case HiveSqlParser.KW_COMPUTE:
                case HiveSqlParser.KW_CONCATENATE:
                case HiveSqlParser.KW_CONTINUE:
                case HiveSqlParser.KW_COST:
                case HiveSqlParser.KW_CREATE:
                case HiveSqlParser.KW_CRON:
                case HiveSqlParser.KW_DATA:
                case HiveSqlParser.KW_DATABASE:
                case HiveSqlParser.KW_DATABASES:
                case HiveSqlParser.KW_DATETIME:
                case HiveSqlParser.KW_DAY:
                case HiveSqlParser.KW_DAYS:
                case HiveSqlParser.KW_DAYOFWEEK:
                case HiveSqlParser.KW_DBPROPERTIES:
                case HiveSqlParser.KW_DCPROPERTIES:
                case HiveSqlParser.KW_DEBUG:
                case HiveSqlParser.KW_DEFAULT:
                case HiveSqlParser.KW_DEFERRED:
                case HiveSqlParser.KW_DEFINED:
                case HiveSqlParser.KW_DELETE:
                case HiveSqlParser.KW_DELIMITED:
                case HiveSqlParser.KW_DEPENDENCY:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DESCRIBE:
                case HiveSqlParser.KW_DETAIL:
                case HiveSqlParser.KW_DIRECTORIES:
                case HiveSqlParser.KW_DIRECTORY:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DISTRIBUTE:
                case HiveSqlParser.KW_DISTRIBUTED:
                case HiveSqlParser.KW_DO:
                case HiveSqlParser.KW_DROP:
                case HiveSqlParser.KW_DUMP:
                case HiveSqlParser.KW_ELEM_TYPE:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_ENFORCED:
                case HiveSqlParser.KW_ESCAPED:
                case HiveSqlParser.KW_EVERY:
                case HiveSqlParser.KW_EXCLUSIVE:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXECUTED:
                case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_EXPRESSION:
                case HiveSqlParser.KW_FIELDS:
                case HiveSqlParser.KW_FILE:
                case HiveSqlParser.KW_FILEFORMAT:
                case HiveSqlParser.KW_FIRST:
                case HiveSqlParser.KW_FORMAT:
                case HiveSqlParser.KW_FORMATTED:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_FUNCTIONS:
                case HiveSqlParser.KW_GRANT:
                case HiveSqlParser.KW_HOLD_DDLTIME:
                case HiveSqlParser.KW_HOUR:
                case HiveSqlParser.KW_HOURS:
                case HiveSqlParser.KW_IDXPROPERTIES:
                case HiveSqlParser.KW_IGNORE:
                case HiveSqlParser.KW_IMPORT:
                case HiveSqlParser.KW_INDEX:
                case HiveSqlParser.KW_INDEXES:
                case HiveSqlParser.KW_INPATH:
                case HiveSqlParser.KW_INPUTDRIVER:
                case HiveSqlParser.KW_INPUTFORMAT:
                case HiveSqlParser.KW_INSERT:
                case HiveSqlParser.KW_ISOLATION:
                case HiveSqlParser.KW_ITEMS:
                case HiveSqlParser.KW_JAR:
                case HiveSqlParser.KW_JOINCOST:
                case HiveSqlParser.KW_KEY:
                case HiveSqlParser.KW_KEYS:
                case HiveSqlParser.KW_KEY_TYPE:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LAST:
                case HiveSqlParser.KW_LEVEL:
                case HiveSqlParser.KW_LIFECYCLE:
                case HiveSqlParser.KW_LIMIT:
                case HiveSqlParser.KW_LINES:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCATION:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_LOCKS:
                case HiveSqlParser.KW_LOGICAL:
                case HiveSqlParser.KW_LONG:
                case HiveSqlParser.KW_MANAGED:
                case HiveSqlParser.KW_MANAGEDLOCATION:
                case HiveSqlParser.KW_MANAGEMENT:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MAPJOIN:
                case HiveSqlParser.KW_MAPPING:
                case HiveSqlParser.KW_MATCHED:
                case HiveSqlParser.KW_MATERIALIZED:
                case HiveSqlParser.KW_MERGE:
                case HiveSqlParser.KW_METADATA:
                case HiveSqlParser.KW_MINUTE:
                case HiveSqlParser.KW_MINUTES:
                case HiveSqlParser.KW_MONTH:
                case HiveSqlParser.KW_MONTHS:
                case HiveSqlParser.KW_MOVE:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_NORELY:
                case HiveSqlParser.KW_NOSCAN:
                case HiveSqlParser.KW_NOVALIDATE:
                case HiveSqlParser.KW_NO_DROP:
                case HiveSqlParser.KW_NULLS:
                case HiveSqlParser.KW_OFFLINE:
                case HiveSqlParser.KW_OFFSET:
                case HiveSqlParser.KW_OPERATOR:
                case HiveSqlParser.KW_OPTION:
                case HiveSqlParser.KW_ORDER:
                case HiveSqlParser.KW_OUTPUTDRIVER:
                case HiveSqlParser.KW_OUTPUTFORMAT:
                case HiveSqlParser.KW_OVERWRITE:
                case HiveSqlParser.KW_OWNER:
                case HiveSqlParser.KW_PARTITIONED:
                case HiveSqlParser.KW_PARTITIONS:
                case HiveSqlParser.KW_PATH:
                case HiveSqlParser.KW_PLAN:
                case HiveSqlParser.KW_PLANS:
                case HiveSqlParser.KW_PLUS:
                case HiveSqlParser.KW_POOL:
                case HiveSqlParser.KW_PREPARE:
                case HiveSqlParser.KW_PRINCIPALS:
                case HiveSqlParser.KW_PROTECTION:
                case HiveSqlParser.KW_PURGE:
                case HiveSqlParser.KW_QUARTER:
                case HiveSqlParser.KW_QUERY:
                case HiveSqlParser.KW_QUERY_PARALLELISM:
                case HiveSqlParser.KW_READ:
                case HiveSqlParser.KW_READONLY:
                case HiveSqlParser.KW_REBUILD:
                case HiveSqlParser.KW_RECORDREADER:
                case HiveSqlParser.KW_RECORDWRITER:
                case HiveSqlParser.KW_REDUCE:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_RELY:
                case HiveSqlParser.KW_REMOTE:
                case HiveSqlParser.KW_RENAME:
                case HiveSqlParser.KW_REOPTIMIZATION:
                case HiveSqlParser.KW_REPAIR:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_REPLICATION:
                case HiveSqlParser.KW_RESOURCE:
                case HiveSqlParser.KW_RESPECT:
                case HiveSqlParser.KW_RESTRICT:
                case HiveSqlParser.KW_REVOKE:
                case HiveSqlParser.KW_REWRITE:
                case HiveSqlParser.KW_ROLE:
                case HiveSqlParser.KW_ROLES:
                case HiveSqlParser.KW_ROLLBACK:
                case HiveSqlParser.KW_SCHEDULED:
                case HiveSqlParser.KW_SCHEDULING_POLICY:
                case HiveSqlParser.KW_SCHEMA:
                case HiveSqlParser.KW_SCHEMAS:
                case HiveSqlParser.KW_SECOND:
                case HiveSqlParser.KW_SECONDS:
                case HiveSqlParser.KW_SELECT:
                case HiveSqlParser.KW_SEMI:
                case HiveSqlParser.KW_SERDE:
                case HiveSqlParser.KW_SERDEPROPERTIES:
                case HiveSqlParser.KW_SERVER:
                case HiveSqlParser.KW_SET:
                case HiveSqlParser.KW_SETS:
                case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
                case HiveSqlParser.KW_SHARED:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_SHOW_DATABASE:
                case HiveSqlParser.KW_SKEWED:
                case HiveSqlParser.KW_SNAPSHOT:
                case HiveSqlParser.KW_SORT:
                case HiveSqlParser.KW_SORTED:
                case HiveSqlParser.KW_SPEC:
                case HiveSqlParser.KW_SSL:
                case HiveSqlParser.KW_START:
                case HiveSqlParser.KW_STATISTICS:
                case HiveSqlParser.KW_STATUS:
                case HiveSqlParser.KW_STORED:
                case HiveSqlParser.KW_STREAMTABLE:
                case HiveSqlParser.KW_STRING:
                case HiveSqlParser.KW_STRUCT:
                case HiveSqlParser.KW_SUMMARY:
                case HiveSqlParser.KW_SYSTEM_TIME:
                case HiveSqlParser.KW_SYSTEM_VERSION:
                case HiveSqlParser.KW_TABLES:
                case HiveSqlParser.KW_TBLPROPERTIES:
                case HiveSqlParser.KW_TEMPORARY:
                case HiveSqlParser.KW_TERMINATED:
                case HiveSqlParser.KW_TIMESTAMPTZ:
                case HiveSqlParser.KW_TINYINT:
                case HiveSqlParser.KW_TOUCH:
                case HiveSqlParser.KW_TRANSACTION:
                case HiveSqlParser.KW_TRANSACTIONAL:
                case HiveSqlParser.KW_TRANSACTIONS:
                case HiveSqlParser.KW_TRIM:
                case HiveSqlParser.KW_TRUNCATE:
                case HiveSqlParser.KW_TYPE:
                case HiveSqlParser.KW_UNARCHIVE:
                case HiveSqlParser.KW_UNDO:
                case HiveSqlParser.KW_UNIONTYPE:
                case HiveSqlParser.KW_UNKNOWN:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UNMANAGED:
                case HiveSqlParser.KW_UNSET:
                case HiveSqlParser.KW_UNSIGNED:
                case HiveSqlParser.KW_UPDATE:
                case HiveSqlParser.KW_URI:
                case HiveSqlParser.KW_URL:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_UTC:
                case HiveSqlParser.KW_UTCTIMESTAMP:
                case HiveSqlParser.KW_VALIDATE:
                case HiveSqlParser.KW_VALUES:
                case HiveSqlParser.KW_VALUE_TYPE:
                case HiveSqlParser.KW_VECTORIZATION:
                case HiveSqlParser.KW_VIEW:
                case HiveSqlParser.KW_VIEWS:
                case HiveSqlParser.KW_WAIT:
                case HiveSqlParser.KW_WEEK:
                case HiveSqlParser.KW_WEEKS:
                case HiveSqlParser.KW_WHILE:
                case HiveSqlParser.KW_WITH:
                case HiveSqlParser.KW_WITHIN:
                case HiveSqlParser.KW_WORK:
                case HiveSqlParser.KW_WORKLOAD:
                case HiveSqlParser.KW_WRITE:
                case HiveSqlParser.KW_YEAR:
                case HiveSqlParser.KW_YEARS:
                case HiveSqlParser.KW_ZONE:
                case HiveSqlParser.SEMICOLON:
                case HiveSqlParser.LPAREN:
                case HiveSqlParser.Identifier:
                    {
                    this.state = 1292;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 93, this.context) ) {
                    case 1:
                        {
                        {
                        this.state = 1286;
                        this.db_schema();
                        this.state = 1287;
                        localContext._dbName = this.dbSchemaName();
                        }
                        }
                        break;
                    case 2:
                        {
                        this.state = 1290;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 92, this.context) ) {
                        case 1:
                            {
                            this.state = 1289;
                            localContext._parttype = this.partTypeExpr();
                            }
                            break;
                        }
                        }
                        break;
                    }
                    this.state = 1295;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 246) {
                        {
                        this.state = 1294;
                        this.compactionPool();
                        }
                    }

                    this.state = 1298;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 352) {
                        {
                        this.state = 1297;
                        this.compactionType();
                        }
                    }

                    this.state = 1301;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 320) {
                        {
                        this.state = 1300;
                        this.compactionStatus();
                        }
                    }

                    this.state = 1304;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 229) {
                        {
                        this.state = 1303;
                        this.orderByClause();
                        }
                    }

                    this.state = 1307;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 185) {
                        {
                        this.state = 1306;
                        this.limitClause();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1311;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1312;
                this.match(HiveSqlParser.KW_TRANSACTIONS);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1313;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1314;
                this.match(HiveSqlParser.KW_CONF);
                this.state = 1315;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1316;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1317;
                this.match(HiveSqlParser.KW_RESOURCE);
                this.state = 1321;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_PLAN:
                    {
                    this.state = 1318;
                    this.match(HiveSqlParser.KW_PLAN);
                    this.state = 1319;
                    localContext._rp_name = this.id_();
                    }
                    break;
                case HiveSqlParser.KW_PLANS:
                    {
                    this.state = 1320;
                    this.match(HiveSqlParser.KW_PLANS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1323;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1324;
                this.match(HiveSqlParser.KW_DATACONNECTORS);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1325;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1327;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 1326;
                    this.match(HiveSqlParser.KW_FORMATTED);
                    }
                }

                this.state = 1329;
                _la = this.tokenStream.LA(1);
                if(!(_la === 155 || _la === 156)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1330;
                this.match(HiveSqlParser.KW_ON);
                this.state = 1331;
                this.tableName();
                this.state = 1335;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 102, this.context) ) {
                case 1:
                    {
                    this.state = 1332;
                    this.from_in();
                    this.state = 1333;
                    this.dbSchemaName();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showTablesFilterExpr(): ShowTablesFilterExprContext {
        let localContext = new ShowTablesFilterExprContext(this.context, this.state);
        this.enterRule(localContext, 74, HiveSqlParser.RULE_showTablesFilterExpr);
        try {
            this.state = 1347;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_WHERE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1339;
                this.match(HiveSqlParser.KW_WHERE);
                this.state = 1340;
                this.id_();
                this.state = 1341;
                this.match(HiveSqlParser.EQUAL);
                this.state = 1342;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case HiveSqlParser.KW_LIKE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1344;
                this.match(HiveSqlParser.KW_LIKE);
                this.state = 1345;
                this.showStmtIdentifier();
                }
                break;
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.StringLiteral:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1346;
                this.showStmtIdentifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockStatement(): LockStatementContext {
        let localContext = new LockStatementContext(this.context, this.state);
        this.enterRule(localContext, 76, HiveSqlParser.RULE_lockStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1349;
            this.match(HiveSqlParser.KW_LOCK);
            this.state = 1350;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 1351;
            this.tableOrPartition();
            this.state = 1352;
            this.lockMode();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockDatabase(): LockDatabaseContext {
        let localContext = new LockDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 78, HiveSqlParser.RULE_lockDatabase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1354;
            this.match(HiveSqlParser.KW_LOCK);
            this.state = 1355;
            this.db_schema();
            this.state = 1356;
            localContext._dbName = this.dbSchemaName();
            this.state = 1357;
            this.lockMode();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockMode(): LockModeContext {
        let localContext = new LockModeContext(this.context, this.state);
        this.enterRule(localContext, 80, HiveSqlParser.RULE_lockMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1359;
            _la = this.tokenStream.LA(1);
            if(!(_la === 114 || _la === 307)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlockStatement(): UnlockStatementContext {
        let localContext = new UnlockStatementContext(this.context, this.state);
        this.enterRule(localContext, 82, HiveSqlParser.RULE_unlockStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1361;
            this.match(HiveSqlParser.KW_UNLOCK);
            this.state = 1362;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 1363;
            this.tableOrPartition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlockDatabase(): UnlockDatabaseContext {
        let localContext = new UnlockDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 84, HiveSqlParser.RULE_unlockDatabase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1365;
            this.match(HiveSqlParser.KW_UNLOCK);
            this.state = 1366;
            this.db_schema();
            this.state = 1367;
            localContext._dbName = this.dbSchemaName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRoleStatement(): CreateRoleStatementContext {
        let localContext = new CreateRoleStatementContext(this.context, this.state);
        this.enterRule(localContext, 86, HiveSqlParser.RULE_createRoleStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1369;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1370;
            this.match(HiveSqlParser.KW_ROLE);
            this.state = 1371;
            localContext._roleName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropRoleStatement(): DropRoleStatementContext {
        let localContext = new DropRoleStatementContext(this.context, this.state);
        this.enterRule(localContext, 88, HiveSqlParser.RULE_dropRoleStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1373;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1374;
            this.match(HiveSqlParser.KW_ROLE);
            this.state = 1375;
            localContext._roleName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantPrivileges(): GrantPrivilegesContext {
        let localContext = new GrantPrivilegesContext(this.context, this.state);
        this.enterRule(localContext, 90, HiveSqlParser.RULE_grantPrivileges);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1377;
            this.match(HiveSqlParser.KW_GRANT);
            this.state = 1378;
            localContext._privList = this.privilegeList();
            this.state = 1380;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 224) {
                {
                this.state = 1379;
                this.privilegeObject();
                }
            }

            this.state = 1382;
            this.match(HiveSqlParser.KW_TO);
            this.state = 1383;
            this.principalSpecification();
            this.state = 1385;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 106, this.context) ) {
            case 1:
                {
                this.state = 1384;
                this.withGrantOption();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokePrivileges(): RevokePrivilegesContext {
        let localContext = new RevokePrivilegesContext(this.context, this.state);
        this.enterRule(localContext, 92, HiveSqlParser.RULE_revokePrivileges);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1387;
            this.match(HiveSqlParser.KW_REVOKE);
            this.state = 1389;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 1388;
                this.grantOptionFor();
                }
            }

            this.state = 1391;
            this.privilegeList();
            this.state = 1393;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 224) {
                {
                this.state = 1392;
                this.privilegeObject();
                }
            }

            this.state = 1395;
            this.match(HiveSqlParser.KW_FROM);
            this.state = 1396;
            this.principalSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantRole(): GrantRoleContext {
        let localContext = new GrantRoleContext(this.context, this.state);
        this.enterRule(localContext, 94, HiveSqlParser.RULE_grantRole);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1398;
            this.match(HiveSqlParser.KW_GRANT);
            this.state = 1400;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 109, this.context) ) {
            case 1:
                {
                this.state = 1399;
                this.match(HiveSqlParser.KW_ROLE);
                }
                break;
            }
            this.state = 1402;
            this.id_();
            this.state = 1407;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1403;
                this.match(HiveSqlParser.COMMA);
                this.state = 1404;
                this.id_();
                }
                }
                this.state = 1409;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1410;
            this.match(HiveSqlParser.KW_TO);
            this.state = 1411;
            this.principalSpecification();
            this.state = 1413;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 111, this.context) ) {
            case 1:
                {
                this.state = 1412;
                this.withAdminOption();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokeRole(): RevokeRoleContext {
        let localContext = new RevokeRoleContext(this.context, this.state);
        this.enterRule(localContext, 96, HiveSqlParser.RULE_revokeRole);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1415;
            this.match(HiveSqlParser.KW_REVOKE);
            this.state = 1417;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 112, this.context) ) {
            case 1:
                {
                this.state = 1416;
                this.adminOptionFor();
                }
                break;
            }
            this.state = 1420;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 113, this.context) ) {
            case 1:
                {
                this.state = 1419;
                this.match(HiveSqlParser.KW_ROLE);
                }
                break;
            }
            this.state = 1422;
            this.id_();
            this.state = 1427;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1423;
                this.match(HiveSqlParser.COMMA);
                this.state = 1424;
                this.id_();
                }
                }
                this.state = 1429;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1430;
            this.match(HiveSqlParser.KW_FROM);
            this.state = 1431;
            this.principalSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRoleGrants(): ShowRoleGrantsContext {
        let localContext = new ShowRoleGrantsContext(this.context, this.state);
        this.enterRule(localContext, 98, HiveSqlParser.RULE_showRoleGrants);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1433;
            this.match(HiveSqlParser.KW_SHOW);
            this.state = 1434;
            this.match(HiveSqlParser.KW_ROLE);
            this.state = 1435;
            this.match(HiveSqlParser.KW_GRANT);
            this.state = 1436;
            this.principalName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRoles(): ShowRolesContext {
        let localContext = new ShowRolesContext(this.context, this.state);
        this.enterRule(localContext, 100, HiveSqlParser.RULE_showRoles);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1438;
            this.match(HiveSqlParser.KW_SHOW);
            this.state = 1439;
            this.match(HiveSqlParser.KW_ROLES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCurrentRole(): ShowCurrentRoleContext {
        let localContext = new ShowCurrentRoleContext(this.context, this.state);
        this.enterRule(localContext, 102, HiveSqlParser.RULE_showCurrentRole);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1441;
            this.match(HiveSqlParser.KW_SHOW);
            this.state = 1442;
            this.match(HiveSqlParser.KW_CURRENT);
            this.state = 1443;
            this.match(HiveSqlParser.KW_ROLES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setRole(): SetRoleContext {
        let localContext = new SetRoleContext(this.context, this.state);
        this.enterRule(localContext, 104, HiveSqlParser.RULE_setRole);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1445;
            this.match(HiveSqlParser.KW_SET);
            this.state = 1446;
            this.match(HiveSqlParser.KW_ROLE);
            this.state = 1450;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ALL:
                {
                this.state = 1447;
                localContext._all = this.match(HiveSqlParser.KW_ALL);
                }
                break;
            case HiveSqlParser.KW_NONE:
                {
                this.state = 1448;
                localContext._none = this.match(HiveSqlParser.KW_NONE);
                }
                break;
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.Identifier:
                {
                this.state = 1449;
                this.id_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showGrants(): ShowGrantsContext {
        let localContext = new ShowGrantsContext(this.context, this.state);
        this.enterRule(localContext, 106, HiveSqlParser.RULE_showGrants);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1452;
            this.match(HiveSqlParser.KW_SHOW);
            this.state = 1453;
            this.match(HiveSqlParser.KW_GRANT);
            this.state = 1455;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 144 || _la === 287 || _la === 369) {
                {
                this.state = 1454;
                this.principalName();
                }
            }

            this.state = 1459;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 224) {
                {
                this.state = 1457;
                this.match(HiveSqlParser.KW_ON);
                this.state = 1458;
                this.privilegeIncludeColObject();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRolePrincipals(): ShowRolePrincipalsContext {
        let localContext = new ShowRolePrincipalsContext(this.context, this.state);
        this.enterRule(localContext, 108, HiveSqlParser.RULE_showRolePrincipals);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1461;
            this.match(HiveSqlParser.KW_SHOW);
            this.state = 1462;
            this.match(HiveSqlParser.KW_PRINCIPALS);
            this.state = 1463;
            localContext._roleName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeIncludeColObject(): PrivilegeIncludeColObjectContext {
        let localContext = new PrivilegeIncludeColObjectContext(this.context, this.state);
        this.enterRule(localContext, 110, HiveSqlParser.RULE_privilegeIncludeColObject);
        try {
            this.state = 1467;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ALL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1465;
                this.match(HiveSqlParser.KW_ALL);
                }
                break;
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASE:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLE:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1466;
                this.privObjectCols();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeObject(): PrivilegeObjectContext {
        let localContext = new PrivilegeObjectContext(this.context, this.state);
        this.enterRule(localContext, 112, HiveSqlParser.RULE_privilegeObject);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1469;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1470;
            this.privObject();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privObject(): PrivObjectContext {
        let localContext = new PrivObjectContext(this.context, this.state);
        this.enterRule(localContext, 114, HiveSqlParser.RULE_privObject);
        let _la: number;
        try {
            this.state = 1483;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1472;
                this.db_schema();
                this.state = 1473;
                this.dbSchemaName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1476;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 1475;
                    this.match(HiveSqlParser.KW_TABLE);
                    }
                }

                this.state = 1478;
                this.tableOrPartition();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1479;
                this.match(HiveSqlParser.KW_URI);
                this.state = 1480;
                localContext._path = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1481;
                this.match(HiveSqlParser.KW_SERVER);
                this.state = 1482;
                this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privObjectCols(): PrivObjectColsContext {
        let localContext = new PrivObjectColsContext(this.context, this.state);
        this.enterRule(localContext, 116, HiveSqlParser.RULE_privObjectCols);
        let _la: number;
        try {
            this.state = 1505;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 124, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1485;
                this.db_schema();
                this.state = 1486;
                this.dbSchemaName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1489;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 1488;
                    this.match(HiveSqlParser.KW_TABLE);
                    }
                }

                this.state = 1491;
                this.tableName();
                this.state = 1496;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 122, this.context) ) {
                case 1:
                    {
                    this.state = 1492;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 1493;
                    localContext._cols = this.columnNameList();
                    this.state = 1494;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                }
                this.state = 1499;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 237) {
                    {
                    this.state = 1498;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1501;
                this.match(HiveSqlParser.KW_URI);
                this.state = 1502;
                localContext._path = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1503;
                this.match(HiveSqlParser.KW_SERVER);
                this.state = 1504;
                this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeList(): PrivilegeListContext {
        let localContext = new PrivilegeListContext(this.context, this.state);
        this.enterRule(localContext, 118, HiveSqlParser.RULE_privilegeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1507;
            this.privlegeDef();
            this.state = 1512;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1508;
                this.match(HiveSqlParser.COMMA);
                this.state = 1509;
                this.privlegeDef();
                }
                }
                this.state = 1514;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privlegeDef(): PrivlegeDefContext {
        let localContext = new PrivlegeDefContext(this.context, this.state);
        this.enterRule(localContext, 120, HiveSqlParser.RULE_privlegeDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1515;
            this.privilegeType();
            this.state = 1520;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399) {
                {
                this.state = 1516;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1517;
                localContext._cols = this.columnNameList();
                this.state = 1518;
                this.match(HiveSqlParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeType(): PrivilegeTypeContext {
        let localContext = new PrivilegeTypeContext(this.context, this.state);
        this.enterRule(localContext, 122, HiveSqlParser.RULE_privilegeType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1522;
            _la = this.tokenStream.LA(1);
            if(!(_la === 7 || _la === 9 || _la === 58 || _la === 86 || _la === 101 || _la === 155 || _la === 161 || _la === 190 || _la === 299 || _la === 309 || _la === 365)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        let localContext = new PrincipalSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 124, HiveSqlParser.RULE_principalSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1524;
            this.principalName();
            this.state = 1529;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1525;
                this.match(HiveSqlParser.COMMA);
                this.state = 1526;
                this.principalName();
                }
                }
                this.state = 1531;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principalName(): PrincipalNameContext {
        let localContext = new PrincipalNameContext(this.context, this.state);
        this.enterRule(localContext, 126, HiveSqlParser.RULE_principalName);
        try {
            this.state = 1538;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_USER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1532;
                this.match(HiveSqlParser.KW_USER);
                this.state = 1533;
                this.principalIdentifier();
                }
                break;
            case HiveSqlParser.KW_GROUP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1534;
                this.match(HiveSqlParser.KW_GROUP);
                this.state = 1535;
                this.principalIdentifier();
                }
                break;
            case HiveSqlParser.KW_ROLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1536;
                this.match(HiveSqlParser.KW_ROLE);
                this.state = 1537;
                this.id_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principalAlterName(): PrincipalAlterNameContext {
        let localContext = new PrincipalAlterNameContext(this.context, this.state);
        this.enterRule(localContext, 128, HiveSqlParser.RULE_principalAlterName);
        try {
            this.state = 1545;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 129, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1540;
                this.match(HiveSqlParser.KW_USER);
                this.state = 1541;
                this.principalIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1542;
                this.match(HiveSqlParser.KW_ROLE);
                this.state = 1543;
                this.id_();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1544;
                this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withGrantOption(): WithGrantOptionContext {
        let localContext = new WithGrantOptionContext(this.context, this.state);
        this.enterRule(localContext, 130, HiveSqlParser.RULE_withGrantOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1547;
            this.match(HiveSqlParser.KW_WITH);
            this.state = 1548;
            this.match(HiveSqlParser.KW_GRANT);
            this.state = 1549;
            this.match(HiveSqlParser.KW_OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantOptionFor(): GrantOptionForContext {
        let localContext = new GrantOptionForContext(this.context, this.state);
        this.enterRule(localContext, 132, HiveSqlParser.RULE_grantOptionFor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1551;
            this.match(HiveSqlParser.KW_GRANT);
            this.state = 1552;
            this.match(HiveSqlParser.KW_OPTION);
            this.state = 1553;
            this.match(HiveSqlParser.KW_FOR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public adminOptionFor(): AdminOptionForContext {
        let localContext = new AdminOptionForContext(this.context, this.state);
        this.enterRule(localContext, 134, HiveSqlParser.RULE_adminOptionFor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1555;
            this.match(HiveSqlParser.KW_ADMIN);
            this.state = 1556;
            this.match(HiveSqlParser.KW_OPTION);
            this.state = 1557;
            this.match(HiveSqlParser.KW_FOR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withAdminOption(): WithAdminOptionContext {
        let localContext = new WithAdminOptionContext(this.context, this.state);
        this.enterRule(localContext, 136, HiveSqlParser.RULE_withAdminOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1559;
            this.match(HiveSqlParser.KW_WITH);
            this.state = 1560;
            this.match(HiveSqlParser.KW_ADMIN);
            this.state = 1561;
            this.match(HiveSqlParser.KW_OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public metastoreCheck(): MetastoreCheckContext {
        let localContext = new MetastoreCheckContext(this.context, this.state);
        this.enterRule(localContext, 138, HiveSqlParser.RULE_metastoreCheck);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1563;
            this.match(HiveSqlParser.KW_MSCK);
            this.state = 1565;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 276) {
                {
                this.state = 1564;
                localContext._repair = this.match(HiveSqlParser.KW_REPAIR);
                }
            }

            {
            this.state = 1567;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 1568;
            this.tableName();
            this.state = 1574;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 132, this.context) ) {
            case 1:
                {
                this.state = 1569;
                localContext._opt = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 4 || _la === 101 || _la === 326)) {
                    localContext._opt = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1570;
                localContext._parts = this.match(HiveSqlParser.KW_PARTITIONS);
                this.state = 1572;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 131, this.context) ) {
                case 1:
                    {
                    this.state = 1571;
                    this.partitionSelectorSpec();
                    }
                    break;
                }
                }
                break;
            }
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourceList(): ResourceListContext {
        let localContext = new ResourceListContext(this.context, this.state);
        this.enterRule(localContext, 140, HiveSqlParser.RULE_resourceList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1576;
            this.resource();
            this.state = 1581;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1577;
                this.match(HiveSqlParser.COMMA);
                this.state = 1578;
                this.resource();
                }
                }
                this.state = 1583;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resource(): ResourceContext {
        let localContext = new ResourceContext(this.context, this.state);
        this.enterRule(localContext, 142, HiveSqlParser.RULE_resource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1584;
            localContext._resType = this.resourceType();
            this.state = 1585;
            localContext._resPath = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourceType(): ResourceTypeContext {
        let localContext = new ResourceTypeContext(this.context, this.state);
        this.enterRule(localContext, 144, HiveSqlParser.RULE_resourceType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1587;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 128 || _la === 170)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFunctionStatement(): CreateFunctionStatementContext {
        let localContext = new CreateFunctionStatementContext(this.context, this.state);
        this.enterRule(localContext, 146, HiveSqlParser.RULE_createFunctionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1589;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1591;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 333) {
                {
                this.state = 1590;
                localContext._temp = this.match(HiveSqlParser.KW_TEMPORARY);
                }
            }

            this.state = 1593;
            this.match(HiveSqlParser.KW_FUNCTION);
            this.state = 1594;
            this.functionNameCreate();
            this.state = 1595;
            this.match(HiveSqlParser.KW_AS);
            this.state = 1596;
            this.match(HiveSqlParser.StringLiteral);
            this.state = 1599;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 370) {
                {
                this.state = 1597;
                this.match(HiveSqlParser.KW_USING);
                this.state = 1598;
                localContext._rList = this.resourceList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropFunctionStatement(): DropFunctionStatementContext {
        let localContext = new DropFunctionStatementContext(this.context, this.state);
        this.enterRule(localContext, 148, HiveSqlParser.RULE_dropFunctionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1601;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1603;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 333) {
                {
                this.state = 1602;
                localContext._temp = this.match(HiveSqlParser.KW_TEMPORARY);
                }
            }

            this.state = 1605;
            this.match(HiveSqlParser.KW_FUNCTION);
            this.state = 1607;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1606;
                this.ifExists();
                }
            }

            this.state = 1609;
            this.functionNameForDDL();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reloadFunctionsStatement(): ReloadFunctionsStatementContext {
        let localContext = new ReloadFunctionsStatementContext(this.context, this.state);
        this.enterRule(localContext, 150, HiveSqlParser.RULE_reloadFunctionsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1611;
            this.match(HiveSqlParser.KW_RELOAD);
            this.state = 1612;
            _la = this.tokenStream.LA(1);
            if(!(_la === 141 || _la === 142)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMacroStatement(): CreateMacroStatementContext {
        let localContext = new CreateMacroStatementContext(this.context, this.state);
        this.enterRule(localContext, 152, HiveSqlParser.RULE_createMacroStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1614;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1615;
            this.match(HiveSqlParser.KW_TEMPORARY);
            this.state = 1616;
            this.match(HiveSqlParser.KW_MACRO);
            this.state = 1617;
            this.match(HiveSqlParser.Identifier);
            this.state = 1618;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394 || _la === 432) {
                {
                this.state = 1619;
                this.columnNameTypeList();
                }
            }

            this.state = 1622;
            this.match(HiveSqlParser.RPAREN);
            this.state = 1623;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropMacroStatement(): DropMacroStatementContext {
        let localContext = new DropMacroStatementContext(this.context, this.state);
        this.enterRule(localContext, 154, HiveSqlParser.RULE_dropMacroStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1625;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1626;
            this.match(HiveSqlParser.KW_TEMPORARY);
            this.state = 1627;
            this.match(HiveSqlParser.KW_MACRO);
            this.state = 1629;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1628;
                this.ifExists();
                }
            }

            this.state = 1631;
            this.match(HiveSqlParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createIndexStatement(): CreateIndexStatementContext {
        let localContext = new CreateIndexStatementContext(this.context, this.state);
        this.enterRule(localContext, 156, HiveSqlParser.RULE_createIndexStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1633;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1634;
            this.match(HiveSqlParser.KW_INDEX);
            this.state = 1635;
            this.id_();
            this.state = 1636;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1637;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 1638;
            this.tableName();
            this.state = 1639;
            this.columnParenthesesList();
            this.state = 1640;
            this.match(HiveSqlParser.KW_AS);
            this.state = 1641;
            localContext._indextype = this.match(HiveSqlParser.StringLiteral);
            this.state = 1645;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 140, this.context) ) {
            case 1:
                {
                this.state = 1642;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 1643;
                this.match(HiveSqlParser.KW_DEFERRED);
                this.state = 1644;
                this.match(HiveSqlParser.KW_REBUILD);
                }
                break;
            }
            this.state = 1649;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 150) {
                {
                this.state = 1647;
                this.match(HiveSqlParser.KW_IDXPROPERTIES);
                this.state = 1648;
                this.tableProperties();
                }
            }

            this.state = 1654;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 154) {
                {
                this.state = 1651;
                this.match(HiveSqlParser.KW_IN);
                this.state = 1652;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 1653;
                this.tableName();
                }
            }

            this.state = 1659;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 238) {
                {
                this.state = 1656;
                this.match(HiveSqlParser.KW_PARTITIONED);
                this.state = 1657;
                this.match(HiveSqlParser.KW_BY);
                this.state = 1658;
                this.columnParenthesesList();
                }
            }

            this.state = 1665;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 291 || _la === 321) {
                {
                this.state = 1662;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 291) {
                    {
                    this.state = 1661;
                    this.tableRowFormat();
                    }
                }

                this.state = 1664;
                this.tableFileFormat();
                }
            }

            this.state = 1668;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 189) {
                {
                this.state = 1667;
                this.locationPath();
                }
            }

            this.state = 1671;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 332) {
                {
                this.state = 1670;
                this.tablePropertiesPrefixed();
                }
            }

            this.state = 1674;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 1673;
                this.tableComment();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropIndexStatement(): DropIndexStatementContext {
        let localContext = new DropIndexStatementContext(this.context, this.state);
        this.enterRule(localContext, 158, HiveSqlParser.RULE_dropIndexStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1676;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1677;
            this.match(HiveSqlParser.KW_INDEX);
            this.state = 1679;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1678;
                this.ifExists();
                }
            }

            this.state = 1681;
            this.id_();
            this.state = 1682;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1683;
            this.tableName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createViewStatement(): CreateViewStatementContext {
        let localContext = new CreateViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 160, HiveSqlParser.RULE_createViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1685;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1688;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 228) {
                {
                this.state = 1686;
                this.match(HiveSqlParser.KW_OR);
                this.state = 1687;
                this.match(HiveSqlParser.KW_REPLACE);
                }
            }

            this.state = 1690;
            this.match(HiveSqlParser.KW_VIEW);
            this.state = 1692;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1691;
                this.ifNotExists();
                }
            }

            this.state = 1694;
            localContext._name = this.viewNameCreate();
            this.state = 1699;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399) {
                {
                this.state = 1695;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1696;
                this.columnNameCommentList();
                this.state = 1697;
                this.match(HiveSqlParser.RPAREN);
                }
            }

            this.state = 1702;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 1701;
                this.tableComment();
                }
            }

            this.state = 1705;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 238) {
                {
                this.state = 1704;
                this.viewPartition();
                }
            }

            this.state = 1708;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 332) {
                {
                this.state = 1707;
                this.tablePropertiesPrefixed();
                }
            }

            this.state = 1710;
            this.match(HiveSqlParser.KW_AS);
            this.state = 1711;
            this.selectStatementWithCTE();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewPartition(): ViewPartitionContext {
        let localContext = new ViewPartitionContext(this.context, this.state);
        this.enterRule(localContext, 162, HiveSqlParser.RULE_viewPartition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1713;
            this.match(HiveSqlParser.KW_PARTITIONED);
            this.state = 1714;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1720;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.LPAREN:
                {
                this.state = 1715;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1716;
                this.columnNameList();
                }
                break;
            case HiveSqlParser.KW_SPEC:
                {
                this.state = 1717;
                this.match(HiveSqlParser.KW_SPEC);
                this.state = 1718;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1719;
                localContext._spec = this.partitionTransformSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1722;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewOrganization(): ViewOrganizationContext {
        let localContext = new ViewOrganizationContext(this.context, this.state);
        this.enterRule(localContext, 164, HiveSqlParser.RULE_viewOrganization);
        try {
            this.state = 1726;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_CLUSTERED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1724;
                this.viewClusterSpec();
                }
                break;
            case HiveSqlParser.KW_DISTRIBUTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1725;
                this.viewComplexSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewClusterSpec(): ViewClusterSpecContext {
        let localContext = new ViewClusterSpecContext(this.context, this.state);
        this.enterRule(localContext, 166, HiveSqlParser.RULE_viewClusterSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1728;
            this.match(HiveSqlParser.KW_CLUSTERED);
            this.state = 1729;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1730;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1731;
            this.columnNameList();
            this.state = 1732;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewComplexSpec(): ViewComplexSpecContext {
        let localContext = new ViewComplexSpecContext(this.context, this.state);
        this.enterRule(localContext, 168, HiveSqlParser.RULE_viewComplexSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1734;
            this.viewDistSpec();
            this.state = 1735;
            this.viewSortSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewDistSpec(): ViewDistSpecContext {
        let localContext = new ViewDistSpecContext(this.context, this.state);
        this.enterRule(localContext, 170, HiveSqlParser.RULE_viewDistSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1737;
            this.match(HiveSqlParser.KW_DISTRIBUTED);
            this.state = 1738;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1739;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1740;
            localContext._colList = this.columnNameList();
            this.state = 1741;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewSortSpec(): ViewSortSpecContext {
        let localContext = new ViewSortSpecContext(this.context, this.state);
        this.enterRule(localContext, 172, HiveSqlParser.RULE_viewSortSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1743;
            this.match(HiveSqlParser.KW_SORTED);
            this.state = 1744;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1745;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1746;
            localContext._colList = this.columnNameList();
            this.state = 1747;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropViewStatement(): DropViewStatementContext {
        let localContext = new DropViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 174, HiveSqlParser.RULE_dropViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1749;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1750;
            this.match(HiveSqlParser.KW_VIEW);
            this.state = 1752;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1751;
                this.ifExists();
                }
            }

            this.state = 1754;
            this.viewName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext {
        let localContext = new CreateMaterializedViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 176, HiveSqlParser.RULE_createMaterializedViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1756;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1757;
            this.match(HiveSqlParser.KW_MATERIALIZED);
            this.state = 1758;
            this.match(HiveSqlParser.KW_VIEW);
            this.state = 1760;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1759;
                this.ifNotExists();
                }
            }

            this.state = 1762;
            localContext._name = this.viewNameCreate();
            this.state = 1764;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 94 || _la === 95) {
                {
                this.state = 1763;
                this.rewriteDisabled();
                }
            }

            this.state = 1767;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 1766;
                this.tableComment();
                }
            }

            this.state = 1770;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 238) {
                {
                this.state = 1769;
                this.viewPartition();
                }
            }

            this.state = 1773;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42 || _la === 98) {
                {
                this.state = 1772;
                this.viewOrganization();
                }
            }

            this.state = 1776;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 291) {
                {
                this.state = 1775;
                this.tableRowFormat();
                }
            }

            this.state = 1779;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 321) {
                {
                this.state = 1778;
                this.tableFileFormat();
                }
            }

            this.state = 1782;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 189) {
                {
                this.state = 1781;
                this.locationPath();
                }
            }

            this.state = 1785;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 332) {
                {
                this.state = 1784;
                this.tablePropertiesPrefixed();
                }
            }

            this.state = 1787;
            this.match(HiveSqlParser.KW_AS);
            this.state = 1788;
            this.selectStatementWithCTE();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropMaterializedViewStatement(): DropMaterializedViewStatementContext {
        let localContext = new DropMaterializedViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 178, HiveSqlParser.RULE_dropMaterializedViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1790;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1791;
            this.match(HiveSqlParser.KW_MATERIALIZED);
            this.state = 1792;
            this.match(HiveSqlParser.KW_VIEW);
            this.state = 1794;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1793;
                this.ifExists();
                }
            }

            this.state = 1796;
            this.viewName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createScheduledQueryStatement(): CreateScheduledQueryStatementContext {
        let localContext = new CreateScheduledQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 180, HiveSqlParser.RULE_createScheduledQueryStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1798;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1799;
            this.match(HiveSqlParser.KW_SCHEDULED);
            this.state = 1800;
            this.match(HiveSqlParser.KW_QUERY);
            this.state = 1801;
            localContext._name = this.id_();
            this.state = 1802;
            this.scheduleSpec();
            this.state = 1804;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 116) {
                {
                this.state = 1803;
                this.executedAsSpec();
                }
            }

            this.state = 1807;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 12291) !== 0)) {
                {
                this.state = 1806;
                this.enableSpecification();
                }
            }

            this.state = 1809;
            this.definedAsSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropScheduledQueryStatement(): DropScheduledQueryStatementContext {
        let localContext = new DropScheduledQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 182, HiveSqlParser.RULE_dropScheduledQueryStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1811;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1812;
            this.match(HiveSqlParser.KW_SCHEDULED);
            this.state = 1813;
            this.match(HiveSqlParser.KW_QUERY);
            this.state = 1814;
            localContext._name = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterScheduledQueryStatement(): AlterScheduledQueryStatementContext {
        let localContext = new AlterScheduledQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 184, HiveSqlParser.RULE_alterScheduledQueryStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1816;
            this.match(HiveSqlParser.KW_ALTER);
            this.state = 1817;
            this.match(HiveSqlParser.KW_SCHEDULED);
            this.state = 1818;
            this.match(HiveSqlParser.KW_QUERY);
            this.state = 1819;
            localContext._name = this.id_();
            this.state = 1820;
            localContext._mod = this.alterScheduledQueryChange();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterScheduledQueryChange(): AlterScheduledQueryChangeContext {
        let localContext = new AlterScheduledQueryChangeContext(this.context, this.state);
        this.enterRule(localContext, 186, HiveSqlParser.RULE_alterScheduledQueryChange);
        try {
            this.state = 1827;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_EVERY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1822;
                this.scheduleSpec();
                }
                break;
            case HiveSqlParser.KW_EXECUTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1823;
                this.executedAsSpec();
                }
                break;
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1824;
                this.enableSpecification();
                }
                break;
            case HiveSqlParser.KW_AS:
            case HiveSqlParser.KW_DEFINED:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1825;
                this.definedAsSpec();
                }
                break;
            case HiveSqlParser.KW_EXECUTE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1826;
                this.match(HiveSqlParser.KW_EXECUTE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public scheduleSpec(): ScheduleSpecContext {
        let localContext = new ScheduleSpecContext(this.context, this.state);
        this.enterRule(localContext, 188, HiveSqlParser.RULE_scheduleSpec);
        let _la: number;
        try {
            this.state = 1844;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_CRON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1829;
                this.match(HiveSqlParser.KW_CRON);
                this.state = 1830;
                localContext._cronString = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case HiveSqlParser.KW_EVERY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1831;
                this.match(HiveSqlParser.KW_EVERY);
                this.state = 1833;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 431) {
                    {
                    this.state = 1832;
                    localContext._value = this.match(HiveSqlParser.Number);
                    }
                }

                this.state = 1835;
                localContext._qualifier = this.intervalQualifiers();
                this.state = 1842;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20 || _la === 223) {
                    {
                    this.state = 1839;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case HiveSqlParser.KW_AT:
                        {
                        this.state = 1836;
                        this.match(HiveSqlParser.KW_AT);
                        }
                        break;
                    case HiveSqlParser.KW_OFFSET:
                        {
                        this.state = 1837;
                        this.match(HiveSqlParser.KW_OFFSET);
                        this.state = 1838;
                        this.match(HiveSqlParser.KW_BY);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1841;
                    localContext._offsetTs = this.match(HiveSqlParser.StringLiteral);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executedAsSpec(): ExecutedAsSpecContext {
        let localContext = new ExecutedAsSpecContext(this.context, this.state);
        this.enterRule(localContext, 190, HiveSqlParser.RULE_executedAsSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1846;
            this.match(HiveSqlParser.KW_EXECUTED);
            this.state = 1847;
            this.match(HiveSqlParser.KW_AS);
            this.state = 1848;
            localContext._executedAs = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public definedAsSpec(): DefinedAsSpecContext {
        let localContext = new DefinedAsSpecContext(this.context, this.state);
        this.enterRule(localContext, 192, HiveSqlParser.RULE_definedAsSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1851;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 85) {
                {
                this.state = 1850;
                this.match(HiveSqlParser.KW_DEFINED);
                }
            }

            this.state = 1853;
            this.match(HiveSqlParser.KW_AS);
            this.state = 1854;
            this.statement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStmtIdentifier(): ShowStmtIdentifierContext {
        let localContext = new ShowStmtIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 194, HiveSqlParser.RULE_showStmtIdentifier);
        try {
            this.state = 1858;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1856;
                this.id_();
                }
                break;
            case HiveSqlParser.StringLiteral:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1857;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableComment(): TableCommentContext {
        let localContext = new TableCommentContext(this.context, this.state);
        this.enterRule(localContext, 196, HiveSqlParser.RULE_tableComment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1860;
            this.match(HiveSqlParser.KW_COMMENT);
            this.state = 1861;
            localContext._comment = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableLifecycle(): TableLifecycleContext {
        let localContext = new TableLifecycleContext(this.context, this.state);
        this.enterRule(localContext, 198, HiveSqlParser.RULE_tableLifecycle);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1863;
            this.match(HiveSqlParser.KW_LIFECYCLE);
            this.state = 1864;
            this.match(HiveSqlParser.Number);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTablePartitionSpec(): CreateTablePartitionSpecContext {
        let localContext = new CreateTablePartitionSpecContext(this.context, this.state);
        this.enterRule(localContext, 200, HiveSqlParser.RULE_createTablePartitionSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1866;
            this.match(HiveSqlParser.KW_PARTITIONED);
            this.state = 1867;
            this.match(HiveSqlParser.KW_BY);
            this.state = 1876;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.LPAREN:
                {
                this.state = 1868;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1871;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 178, this.context) ) {
                case 1:
                    {
                    this.state = 1869;
                    localContext._opt1 = this.createTablePartitionColumnTypeSpec();
                    }
                    break;
                case 2:
                    {
                    this.state = 1870;
                    localContext._opt2 = this.columnNameList();
                    }
                    break;
                }
                }
                break;
            case HiveSqlParser.KW_SPEC:
                {
                this.state = 1873;
                this.match(HiveSqlParser.KW_SPEC);
                this.state = 1874;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1875;
                localContext._spec = this.partitionTransformSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1878;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTablePartitionColumnTypeSpec(): CreateTablePartitionColumnTypeSpecContext {
        let localContext = new CreateTablePartitionColumnTypeSpecContext(this.context, this.state);
        this.enterRule(localContext, 202, HiveSqlParser.RULE_createTablePartitionColumnTypeSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1880;
            this.columnNameTypeConstraint();
            this.state = 1885;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1881;
                this.match(HiveSqlParser.COMMA);
                this.state = 1882;
                this.columnNameTypeConstraint();
                }
                }
                this.state = 1887;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionTransformSpec(): PartitionTransformSpecContext {
        let localContext = new PartitionTransformSpecContext(this.context, this.state);
        this.enterRule(localContext, 204, HiveSqlParser.RULE_partitionTransformSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1888;
            this.partitionTransformType();
            this.state = 1893;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1889;
                this.match(HiveSqlParser.COMMA);
                this.state = 1890;
                this.partitionTransformType();
                }
                }
                this.state = 1895;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionTransformType(): PartitionTransformTypeContext {
        let localContext = new PartitionTransformTypeContext(this.context, this.state);
        this.enterRule(localContext, 206, HiveSqlParser.RULE_partitionTransformType);
        let _la: number;
        try {
            this.state = 1914;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 183, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1896;
                this.columnName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1901;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_YEAR:
                case HiveSqlParser.KW_YEARS:
                    {
                    this.state = 1897;
                    this.year();
                    }
                    break;
                case HiveSqlParser.KW_MONTH:
                case HiveSqlParser.KW_MONTHS:
                    {
                    this.state = 1898;
                    this.month();
                    }
                    break;
                case HiveSqlParser.KW_DAY:
                case HiveSqlParser.KW_DAYS:
                    {
                    this.state = 1899;
                    this.day();
                    }
                    break;
                case HiveSqlParser.KW_HOUR:
                case HiveSqlParser.KW_HOURS:
                    {
                    this.state = 1900;
                    this.hour();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1903;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1904;
                this.columnName();
                this.state = 1905;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1907;
                _la = this.tokenStream.LA(1);
                if(!(_la === 30 || _la === 351)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1908;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1909;
                localContext._value = this.match(HiveSqlParser.Number);
                this.state = 1910;
                this.match(HiveSqlParser.COMMA);
                this.state = 1911;
                this.columnName();
                this.state = 1912;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableBuckets(): TableBucketsContext {
        let localContext = new TableBucketsContext(this.context, this.state);
        this.enterRule(localContext, 208, HiveSqlParser.RULE_tableBuckets);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1916;
            this.match(HiveSqlParser.KW_CLUSTERED);
            this.state = 1917;
            this.match(HiveSqlParser.KW_BY);
            this.state = 1918;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1919;
            localContext._bucketCols = this.columnNameList();
            this.state = 1920;
            this.match(HiveSqlParser.RPAREN);
            this.state = 1927;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 1921;
                this.match(HiveSqlParser.KW_SORTED);
                this.state = 1922;
                this.match(HiveSqlParser.KW_BY);
                this.state = 1923;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1924;
                localContext._sortCols = this.columnNameOrderList();
                this.state = 1925;
                this.match(HiveSqlParser.RPAREN);
                }
            }

            this.state = 1929;
            this.match(HiveSqlParser.KW_INTO);
            this.state = 1930;
            localContext._num = this.match(HiveSqlParser.Number);
            this.state = 1931;
            this.match(HiveSqlParser.KW_BUCKETS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSkewed(): TableSkewedContext {
        let localContext = new TableSkewedContext(this.context, this.state);
        this.enterRule(localContext, 210, HiveSqlParser.RULE_tableSkewed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1933;
            this.match(HiveSqlParser.KW_SKEWED);
            this.state = 1934;
            this.match(HiveSqlParser.KW_BY);
            this.state = 1935;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1936;
            localContext._skewedCols = this.columnNameList();
            this.state = 1937;
            this.match(HiveSqlParser.RPAREN);
            this.state = 1938;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1939;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1940;
            localContext._skewedValues = this.skewedValueElement();
            this.state = 1941;
            this.match(HiveSqlParser.RPAREN);
            this.state = 1943;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 185, this.context) ) {
            case 1:
                {
                this.state = 1942;
                this.storedAsDirs();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormat(): RowFormatContext {
        let localContext = new RowFormatContext(this.context, this.state);
        this.enterRule(localContext, 212, HiveSqlParser.RULE_rowFormat);
        try {
            this.state = 1947;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 186, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1945;
                this.rowFormatSerde();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1946;
                this.rowFormatDelimited();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public recordReader(): RecordReaderContext {
        let localContext = new RecordReaderContext(this.context, this.state);
        this.enterRule(localContext, 214, HiveSqlParser.RULE_recordReader);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1949;
            this.match(HiveSqlParser.KW_RECORDREADER);
            this.state = 1950;
            this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public recordWriter(): RecordWriterContext {
        let localContext = new RecordWriterContext(this.context, this.state);
        this.enterRule(localContext, 216, HiveSqlParser.RULE_recordWriter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1952;
            this.match(HiveSqlParser.KW_RECORDWRITER);
            this.state = 1953;
            this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormatSerde(): RowFormatSerdeContext {
        let localContext = new RowFormatSerdeContext(this.context, this.state);
        this.enterRule(localContext, 218, HiveSqlParser.RULE_rowFormatSerde);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1955;
            this.match(HiveSqlParser.KW_ROW);
            this.state = 1956;
            this.match(HiveSqlParser.KW_FORMAT);
            this.state = 1957;
            this.match(HiveSqlParser.KW_SERDE);
            this.state = 1958;
            localContext._name = this.match(HiveSqlParser.StringLiteral);
            this.state = 1962;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 187, this.context) ) {
            case 1:
                {
                this.state = 1959;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 1960;
                this.match(HiveSqlParser.KW_SERDEPROPERTIES);
                this.state = 1961;
                localContext._serdeprops = this.tableProperties();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormatDelimited(): RowFormatDelimitedContext {
        let localContext = new RowFormatDelimitedContext(this.context, this.state);
        this.enterRule(localContext, 220, HiveSqlParser.RULE_rowFormatDelimited);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1964;
            this.match(HiveSqlParser.KW_ROW);
            this.state = 1965;
            this.match(HiveSqlParser.KW_FORMAT);
            this.state = 1966;
            this.match(HiveSqlParser.KW_DELIMITED);
            this.state = 1968;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127) {
                {
                this.state = 1967;
                this.tableRowFormatFieldIdentifier();
                }
            }

            this.state = 1971;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 44) {
                {
                this.state = 1970;
                this.tableRowFormatCollItemsIdentifier();
                }
            }

            this.state = 1974;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 190, this.context) ) {
            case 1:
                {
                this.state = 1973;
                this.tableRowFormatMapKeysIdentifier();
                }
                break;
            }
            this.state = 1977;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 186) {
                {
                this.state = 1976;
                this.tableRowFormatLinesIdentifier();
                }
            }

            this.state = 1980;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 219) {
                {
                this.state = 1979;
                this.tableRowNullFormat();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormat(): TableRowFormatContext {
        let localContext = new TableRowFormatContext(this.context, this.state);
        this.enterRule(localContext, 222, HiveSqlParser.RULE_tableRowFormat);
        try {
            this.state = 1984;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 193, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1982;
                this.rowFormatDelimited();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1983;
                this.rowFormatSerde();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext {
        let localContext = new TablePropertiesPrefixedContext(this.context, this.state);
        this.enterRule(localContext, 224, HiveSqlParser.RULE_tablePropertiesPrefixed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1986;
            this.match(HiveSqlParser.KW_TBLPROPERTIES);
            this.state = 1987;
            this.tableProperties();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableProperties(): TablePropertiesContext {
        let localContext = new TablePropertiesContext(this.context, this.state);
        this.enterRule(localContext, 226, HiveSqlParser.RULE_tableProperties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1989;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1990;
            this.tablePropertiesList();
            this.state = 1991;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePropertiesList(): TablePropertiesListContext {
        let localContext = new TablePropertiesListContext(this.context, this.state);
        this.enterRule(localContext, 228, HiveSqlParser.RULE_tablePropertiesList);
        let _la: number;
        try {
            this.state = 2002;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 195, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1993;
                this.keyValuePropertyList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1994;
                localContext._key = this.match(HiveSqlParser.StringLiteral);
                this.state = 1999;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 1995;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 1996;
                    localContext._key = this.match(HiveSqlParser.StringLiteral);
                    }
                    }
                    this.state = 2001;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyValueProperties(): KeyValuePropertiesContext {
        let localContext = new KeyValuePropertiesContext(this.context, this.state);
        this.enterRule(localContext, 230, HiveSqlParser.RULE_keyValueProperties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2004;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2005;
            this.keyValuePropertyList();
            this.state = 2006;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyValuePropertyList(): KeyValuePropertyListContext {
        let localContext = new KeyValuePropertyListContext(this.context, this.state);
        this.enterRule(localContext, 232, HiveSqlParser.RULE_keyValuePropertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2008;
            this.keyValueProperty();
            this.state = 2013;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2009;
                this.match(HiveSqlParser.COMMA);
                this.state = 2010;
                this.keyValueProperty();
                }
                }
                this.state = 2015;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyValueProperty(): KeyValuePropertyContext {
        let localContext = new KeyValuePropertyContext(this.context, this.state);
        this.enterRule(localContext, 234, HiveSqlParser.RULE_keyValueProperty);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2016;
            localContext._key = this.match(HiveSqlParser.StringLiteral);
            this.state = 2017;
            this.match(HiveSqlParser.EQUAL);
            this.state = 2018;
            localContext._value = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormatFieldIdentifier(): TableRowFormatFieldIdentifierContext {
        let localContext = new TableRowFormatFieldIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 236, HiveSqlParser.RULE_tableRowFormatFieldIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2020;
            this.match(HiveSqlParser.KW_FIELDS);
            this.state = 2021;
            this.match(HiveSqlParser.KW_TERMINATED);
            this.state = 2022;
            this.match(HiveSqlParser.KW_BY);
            this.state = 2023;
            localContext._fldIdnt = this.match(HiveSqlParser.StringLiteral);
            this.state = 2027;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 110) {
                {
                this.state = 2024;
                this.match(HiveSqlParser.KW_ESCAPED);
                this.state = 2025;
                this.match(HiveSqlParser.KW_BY);
                this.state = 2026;
                localContext._fldEscape = this.match(HiveSqlParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormatCollItemsIdentifier(): TableRowFormatCollItemsIdentifierContext {
        let localContext = new TableRowFormatCollItemsIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 238, HiveSqlParser.RULE_tableRowFormatCollItemsIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2029;
            this.match(HiveSqlParser.KW_COLLECTION);
            this.state = 2030;
            this.match(HiveSqlParser.KW_ITEMS);
            this.state = 2031;
            this.match(HiveSqlParser.KW_TERMINATED);
            this.state = 2032;
            this.match(HiveSqlParser.KW_BY);
            this.state = 2033;
            localContext._collIdnt = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormatMapKeysIdentifier(): TableRowFormatMapKeysIdentifierContext {
        let localContext = new TableRowFormatMapKeysIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 240, HiveSqlParser.RULE_tableRowFormatMapKeysIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2035;
            this.match(HiveSqlParser.KW_MAP);
            this.state = 2036;
            this.match(HiveSqlParser.KW_KEYS);
            this.state = 2037;
            this.match(HiveSqlParser.KW_TERMINATED);
            this.state = 2038;
            this.match(HiveSqlParser.KW_BY);
            this.state = 2039;
            localContext._mapKeysIdnt = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormatLinesIdentifier(): TableRowFormatLinesIdentifierContext {
        let localContext = new TableRowFormatLinesIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 242, HiveSqlParser.RULE_tableRowFormatLinesIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2041;
            this.match(HiveSqlParser.KW_LINES);
            this.state = 2042;
            this.match(HiveSqlParser.KW_TERMINATED);
            this.state = 2043;
            this.match(HiveSqlParser.KW_BY);
            this.state = 2044;
            localContext._linesIdnt = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowNullFormat(): TableRowNullFormatContext {
        let localContext = new TableRowNullFormatContext(this.context, this.state);
        this.enterRule(localContext, 244, HiveSqlParser.RULE_tableRowNullFormat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2046;
            this.match(HiveSqlParser.KW_NULL);
            this.state = 2047;
            this.match(HiveSqlParser.KW_DEFINED);
            this.state = 2048;
            this.match(HiveSqlParser.KW_AS);
            this.state = 2049;
            localContext._nullIdnt = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFileFormat(): TableFileFormatContext {
        let localContext = new TableFileFormatContext(this.context, this.state);
        this.enterRule(localContext, 246, HiveSqlParser.RULE_tableFileFormat);
        let _la: number;
        try {
            this.state = 2092;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 203, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2051;
                this.match(HiveSqlParser.KW_STORED);
                this.state = 2052;
                this.match(HiveSqlParser.KW_AS);
                this.state = 2053;
                this.match(HiveSqlParser.KW_INPUTFORMAT);
                this.state = 2054;
                localContext._inFmt = this.match(HiveSqlParser.StringLiteral);
                this.state = 2055;
                this.match(HiveSqlParser.KW_OUTPUTFORMAT);
                this.state = 2056;
                localContext._outFmt = this.match(HiveSqlParser.StringLiteral);
                this.state = 2061;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 159) {
                    {
                    this.state = 2057;
                    this.match(HiveSqlParser.KW_INPUTDRIVER);
                    this.state = 2058;
                    localContext._inDriver = this.match(HiveSqlParser.StringLiteral);
                    this.state = 2059;
                    this.match(HiveSqlParser.KW_OUTPUTDRIVER);
                    this.state = 2060;
                    localContext._outDriver = this.match(HiveSqlParser.StringLiteral);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2063;
                this.match(HiveSqlParser.KW_STORED);
                this.state = 2064;
                this.match(HiveSqlParser.KW_BY);
                this.state = 2065;
                localContext._storageHandler = this.match(HiveSqlParser.StringLiteral);
                this.state = 2069;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 199, this.context) ) {
                case 1:
                    {
                    this.state = 2066;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 2067;
                    this.match(HiveSqlParser.KW_SERDEPROPERTIES);
                    this.state = 2068;
                    localContext._serdeprops = this.tableProperties();
                    }
                    break;
                }
                this.state = 2074;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 321) {
                    {
                    this.state = 2071;
                    this.match(HiveSqlParser.KW_STORED);
                    this.state = 2072;
                    this.match(HiveSqlParser.KW_AS);
                    this.state = 2073;
                    localContext._fileformat = this.id_();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2076;
                this.match(HiveSqlParser.KW_STORED);
                this.state = 2077;
                this.match(HiveSqlParser.KW_BY);
                this.state = 2078;
                localContext._genericSpec = this.id_();
                this.state = 2082;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 201, this.context) ) {
                case 1:
                    {
                    this.state = 2079;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 2080;
                    this.match(HiveSqlParser.KW_SERDEPROPERTIES);
                    this.state = 2081;
                    localContext._serdeprops = this.tableProperties();
                    }
                    break;
                }
                this.state = 2087;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 321) {
                    {
                    this.state = 2084;
                    this.match(HiveSqlParser.KW_STORED);
                    this.state = 2085;
                    this.match(HiveSqlParser.KW_AS);
                    this.state = 2086;
                    localContext._fileformat = this.id_();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2089;
                this.match(HiveSqlParser.KW_STORED);
                this.state = 2090;
                this.match(HiveSqlParser.KW_AS);
                this.state = 2091;
                localContext._genericSpec = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTypeList(): ColumnNameTypeListContext {
        let localContext = new ColumnNameTypeListContext(this.context, this.state);
        this.enterRule(localContext, 248, HiveSqlParser.RULE_columnNameTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2094;
            this.columnNameType();
            this.state = 2099;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2095;
                this.match(HiveSqlParser.COMMA);
                this.state = 2096;
                this.columnNameType();
                }
                }
                this.state = 2101;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTypeOrConstraintList(): ColumnNameTypeOrConstraintListContext {
        let localContext = new ColumnNameTypeOrConstraintListContext(this.context, this.state);
        this.enterRule(localContext, 250, HiveSqlParser.RULE_columnNameTypeOrConstraintList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2102;
            this.columnNameTypeOrConstraint();
            this.state = 2107;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2103;
                this.match(HiveSqlParser.COMMA);
                this.state = 2104;
                this.columnNameTypeOrConstraint();
                }
                }
                this.state = 2109;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameColonTypeList(): ColumnNameColonTypeListContext {
        let localContext = new ColumnNameColonTypeListContext(this.context, this.state);
        this.enterRule(localContext, 252, HiveSqlParser.RULE_columnNameColonTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2110;
            this.columnNameColonType();
            this.state = 2115;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2111;
                this.match(HiveSqlParser.COMMA);
                this.state = 2112;
                this.columnNameColonType();
                }
                }
                this.state = 2117;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameList(): ColumnNameListContext {
        let localContext = new ColumnNameListContext(this.context, this.state);
        this.enterRule(localContext, 254, HiveSqlParser.RULE_columnNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2118;
            this.columnName();
            this.state = 2123;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2119;
                this.match(HiveSqlParser.COMMA);
                this.state = 2120;
                this.columnName();
                }
                }
                this.state = 2125;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnName(): ColumnNameContext {
        let localContext = new ColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 256, HiveSqlParser.RULE_columnName);
        try {
            this.state = 2128;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 208, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2126;
                this.poolPath();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2127;
                if (!(this.shouldMatchEmpty())) {
                    throw this.createFailedPredicateException("this.shouldMatchEmpty()");
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        let localContext = new ColumnNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 258, HiveSqlParser.RULE_columnNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2130;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extColumnName(): ExtColumnNameContext {
        let localContext = new ExtColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 260, HiveSqlParser.RULE_extColumnName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2132;
            this.columnName();
            this.state = 2142;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 395) {
                {
                {
                this.state = 2133;
                this.match(HiveSqlParser.DOT);
                this.state = 2138;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 209, this.context) ) {
                case 1:
                    {
                    this.state = 2134;
                    this.match(HiveSqlParser.KW_ELEM_TYPE);
                    }
                    break;
                case 2:
                    {
                    this.state = 2135;
                    this.match(HiveSqlParser.KW_KEY_TYPE);
                    }
                    break;
                case 3:
                    {
                    this.state = 2136;
                    this.match(HiveSqlParser.KW_VALUE_TYPE);
                    }
                    break;
                case 4:
                    {
                    this.state = 2137;
                    this.id_();
                    }
                    break;
                }
                }
                }
                this.state = 2144;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameOrderList(): ColumnNameOrderListContext {
        let localContext = new ColumnNameOrderListContext(this.context, this.state);
        this.enterRule(localContext, 262, HiveSqlParser.RULE_columnNameOrderList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2145;
            this.columnNameOrder();
            this.state = 2150;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2146;
                this.match(HiveSqlParser.COMMA);
                this.state = 2147;
                this.columnNameOrder();
                }
                }
                this.state = 2152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnParenthesesList(): ColumnParenthesesListContext {
        let localContext = new ColumnParenthesesListContext(this.context, this.state);
        this.enterRule(localContext, 264, HiveSqlParser.RULE_columnParenthesesList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2153;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2154;
            this.columnNameList();
            this.state = 2155;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enableValidateSpecification(): EnableValidateSpecificationContext {
        let localContext = new EnableValidateSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 266, HiveSqlParser.RULE_enableValidateSpecification);
        let _la: number;
        try {
            this.state = 2162;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2157;
                this.enableSpecification();
                this.state = 2159;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217 || _la === 373) {
                    {
                    this.state = 2158;
                    this.validateSpecification();
                    }
                }

                }
                break;
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2161;
                this.enforcedSpecification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enableSpecification(): EnableSpecificationContext {
        let localContext = new EnableSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 268, HiveSqlParser.RULE_enableSpecification);
        try {
            this.state = 2166;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2164;
                this.enable();
                }
                break;
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2165;
                this.disable();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public validateSpecification(): ValidateSpecificationContext {
        let localContext = new ValidateSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 270, HiveSqlParser.RULE_validateSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2168;
            _la = this.tokenStream.LA(1);
            if(!(_la === 217 || _la === 373)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enforcedSpecification(): EnforcedSpecificationContext {
        let localContext = new EnforcedSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 272, HiveSqlParser.RULE_enforcedSpecification);
        try {
            this.state = 2173;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ENFORCED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2170;
                this.match(HiveSqlParser.KW_ENFORCED);
                }
                break;
            case HiveSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2171;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 2172;
                this.match(HiveSqlParser.KW_ENFORCED);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relySpecification(): RelySpecificationContext {
        let localContext = new RelySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 274, HiveSqlParser.RULE_relySpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2175;
            _la = this.tokenStream.LA(1);
            if(!(_la === 214 || _la === 272)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createConstraint(): CreateConstraintContext {
        let localContext = new CreateConstraintContext(this.context, this.state);
        this.enterRule(localContext, 276, HiveSqlParser.RULE_createConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2179;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2177;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2178;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2181;
            this.tableLevelConstraint();
            this.state = 2183;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 45059) !== 0) || _la === 216) {
                {
                this.state = 2182;
                this.constraintOptsCreate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterConstraintWithName(): AlterConstraintWithNameContext {
        let localContext = new AlterConstraintWithNameContext(this.context, this.state);
        this.enterRule(localContext, 278, HiveSqlParser.RULE_alterConstraintWithName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2185;
            this.match(HiveSqlParser.KW_CONSTRAINT);
            this.state = 2186;
            localContext._constraintName = this.id_();
            this.state = 2187;
            this.tableLevelConstraint();
            this.state = 2189;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 218, this.context) ) {
            case 1:
                {
                this.state = 2188;
                this.constraintOptsAlter();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableLevelConstraint(): TableLevelConstraintContext {
        let localContext = new TableLevelConstraintContext(this.context, this.state);
        this.enterRule(localContext, 280, HiveSqlParser.RULE_tableLevelConstraint);
        try {
            this.state = 2193;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_PRIMARY:
            case HiveSqlParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2191;
                this.pkUkConstraint();
                }
                break;
            case HiveSqlParser.KW_CHECK:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2192;
                this.checkConstraint();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pkUkConstraint(): PkUkConstraintContext {
        let localContext = new PkUkConstraintContext(this.context, this.state);
        this.enterRule(localContext, 282, HiveSqlParser.RULE_pkUkConstraint);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2195;
            this.tableConstraintType();
            this.state = 2196;
            localContext._pkCols = this.columnParenthesesList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkConstraint(): CheckConstraintContext {
        let localContext = new CheckConstraintContext(this.context, this.state);
        this.enterRule(localContext, 284, HiveSqlParser.RULE_checkConstraint);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2198;
            this.match(HiveSqlParser.KW_CHECK);
            this.state = 2199;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2200;
            this.expression();
            this.state = 2201;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createForeignKey(): CreateForeignKeyContext {
        let localContext = new CreateForeignKeyContext(this.context, this.state);
        this.enterRule(localContext, 286, HiveSqlParser.RULE_createForeignKey);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2205;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2203;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2204;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2207;
            this.match(HiveSqlParser.KW_FOREIGN);
            this.state = 2208;
            this.match(HiveSqlParser.KW_KEY);
            this.state = 2209;
            localContext._fkCols = this.columnParenthesesList();
            this.state = 2210;
            this.match(HiveSqlParser.KW_REFERENCES);
            this.state = 2211;
            localContext._tabName = this.tableName();
            this.state = 2212;
            localContext._parCols = this.columnParenthesesList();
            this.state = 2214;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 45059) !== 0) || _la === 216) {
                {
                this.state = 2213;
                this.constraintOptsCreate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterForeignKeyWithName(): AlterForeignKeyWithNameContext {
        let localContext = new AlterForeignKeyWithNameContext(this.context, this.state);
        this.enterRule(localContext, 288, HiveSqlParser.RULE_alterForeignKeyWithName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2216;
            this.match(HiveSqlParser.KW_CONSTRAINT);
            this.state = 2217;
            localContext._constraintName = this.id_();
            this.state = 2218;
            this.match(HiveSqlParser.KW_FOREIGN);
            this.state = 2219;
            this.match(HiveSqlParser.KW_KEY);
            this.state = 2220;
            localContext._fkCols = this.columnParenthesesList();
            this.state = 2221;
            this.match(HiveSqlParser.KW_REFERENCES);
            this.state = 2222;
            localContext._tabName = this.tableName();
            this.state = 2223;
            localContext._parCols = this.columnParenthesesList();
            this.state = 2225;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 222, this.context) ) {
            case 1:
                {
                this.state = 2224;
                this.constraintOptsAlter();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedValueElement(): SkewedValueElementContext {
        let localContext = new SkewedValueElementContext(this.context, this.state);
        this.enterRule(localContext, 290, HiveSqlParser.RULE_skewedValueElement);
        try {
            this.state = 2229;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_CURRENT_DATE:
            case HiveSqlParser.KW_CURRENT_TIMESTAMP:
            case HiveSqlParser.KW_DATE:
            case HiveSqlParser.KW_FALSE:
            case HiveSqlParser.KW_NULL:
            case HiveSqlParser.KW_TIMESTAMP:
            case HiveSqlParser.KW_TIMESTAMPLOCALTZ:
            case HiveSqlParser.KW_TRUE:
            case HiveSqlParser.QUESTION:
            case HiveSqlParser.StringLiteral:
            case HiveSqlParser.IntegralLiteral:
            case HiveSqlParser.NumberLiteral:
            case HiveSqlParser.Number:
            case HiveSqlParser.Identifier:
            case HiveSqlParser.CharSetName:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2227;
                this.constantList();
                }
                break;
            case HiveSqlParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2228;
                this.skewedColumnValuePairList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedColumnValuePairList(): SkewedColumnValuePairListContext {
        let localContext = new SkewedColumnValuePairListContext(this.context, this.state);
        this.enterRule(localContext, 292, HiveSqlParser.RULE_skewedColumnValuePairList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2231;
            this.skewedColumnValuePair();
            this.state = 2236;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2232;
                this.match(HiveSqlParser.COMMA);
                this.state = 2233;
                this.skewedColumnValuePair();
                }
                }
                this.state = 2238;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedColumnValuePair(): SkewedColumnValuePairContext {
        let localContext = new SkewedColumnValuePairContext(this.context, this.state);
        this.enterRule(localContext, 294, HiveSqlParser.RULE_skewedColumnValuePair);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2239;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2240;
            localContext._colValues = this.constantList();
            this.state = 2241;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constantList(): ConstantListContext {
        let localContext = new ConstantListContext(this.context, this.state);
        this.enterRule(localContext, 296, HiveSqlParser.RULE_constantList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2243;
            this.constant();
            this.state = 2248;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2244;
                this.match(HiveSqlParser.COMMA);
                this.state = 2245;
                this.constant();
                }
                }
                this.state = 2250;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderSpecification(): OrderSpecificationContext {
        let localContext = new OrderSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 298, HiveSqlParser.RULE_orderSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2251;
            _la = this.tokenStream.LA(1);
            if(!(_la === 18 || _la === 89)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullOrdering(): NullOrderingContext {
        let localContext = new NullOrderingContext(this.context, this.state);
        this.enterRule(localContext, 300, HiveSqlParser.RULE_nullOrdering);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2253;
            this.match(HiveSqlParser.KW_NULLS);
            this.state = 2254;
            _la = this.tokenStream.LA(1);
            if(!(_la === 130 || _la === 177)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameOrder(): ColumnNameOrderContext {
        let localContext = new ColumnNameOrderContext(this.context, this.state);
        this.enterRule(localContext, 302, HiveSqlParser.RULE_columnNameOrder);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2256;
            this.columnName();
            this.state = 2258;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18 || _la === 89) {
                {
                this.state = 2257;
                localContext._orderSpec = this.orderSpecification();
                }
            }

            this.state = 2261;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 220) {
                {
                this.state = 2260;
                localContext._nullSpec = this.nullOrdering();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameCommentList(): ColumnNameCommentListContext {
        let localContext = new ColumnNameCommentListContext(this.context, this.state);
        this.enterRule(localContext, 304, HiveSqlParser.RULE_columnNameCommentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2263;
            this.columnNameComment();
            this.state = 2268;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2264;
                this.match(HiveSqlParser.COMMA);
                this.state = 2265;
                this.columnNameComment();
                }
                }
                this.state = 2270;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameComment(): ColumnNameCommentContext {
        let localContext = new ColumnNameCommentContext(this.context, this.state);
        this.enterRule(localContext, 306, HiveSqlParser.RULE_columnNameComment);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2271;
            localContext._colName = this.columnNameCreate();
            this.state = 2274;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2272;
                this.match(HiveSqlParser.KW_COMMENT);
                this.state = 2273;
                localContext._comment = this.match(HiveSqlParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnRefOrder(): ColumnRefOrderContext {
        let localContext = new ColumnRefOrderContext(this.context, this.state);
        this.enterRule(localContext, 308, HiveSqlParser.RULE_columnRefOrder);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2278;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 230, this.context) ) {
            case 1:
                {
                this.state = 2276;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 2277;
                this.expression();
                }
                break;
            }
            this.state = 2281;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 231, this.context) ) {
            case 1:
                {
                this.state = 2280;
                localContext._orderSpec = this.orderSpecification();
                }
                break;
            }
            this.state = 2284;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 220) {
                {
                this.state = 2283;
                localContext._nullSpec = this.nullOrdering();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameType(): ColumnNameTypeContext {
        let localContext = new ColumnNameTypeContext(this.context, this.state);
        this.enterRule(localContext, 310, HiveSqlParser.RULE_columnNameType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2286;
            localContext._colName = this.columnNameCreate();
            this.state = 2287;
            this.columnType();
            this.state = 2290;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2288;
                this.match(HiveSqlParser.KW_COMMENT);
                this.state = 2289;
                localContext._comment = this.match(HiveSqlParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTypeOrConstraint(): ColumnNameTypeOrConstraintContext {
        let localContext = new ColumnNameTypeOrConstraintContext(this.context, this.state);
        this.enterRule(localContext, 312, HiveSqlParser.RULE_columnNameTypeOrConstraint);
        try {
            this.state = 2294;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 234, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2292;
                this.tableConstraint();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2293;
                this.columnNameTypeConstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableConstraint(): TableConstraintContext {
        let localContext = new TableConstraintContext(this.context, this.state);
        this.enterRule(localContext, 314, HiveSqlParser.RULE_tableConstraint);
        try {
            this.state = 2298;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 235, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2296;
                this.createForeignKey();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2297;
                this.createConstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTypeConstraint(): ColumnNameTypeConstraintContext {
        let localContext = new ColumnNameTypeConstraintContext(this.context, this.state);
        this.enterRule(localContext, 316, HiveSqlParser.RULE_columnNameTypeConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2300;
            localContext._colName = this.columnNameCreate();
            this.state = 2301;
            localContext._colType = this.columnType();
            this.state = 2303;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 40 || _la === 55 || _la === 83 || _la === 216 || _la === 251 || _la === 269 || _la === 358) {
                {
                this.state = 2302;
                this.columnConstraint();
                }
            }

            this.state = 2307;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2305;
                this.match(HiveSqlParser.KW_COMMENT);
                this.state = 2306;
                localContext._comment = this.match(HiveSqlParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnConstraint(): ColumnConstraintContext {
        let localContext = new ColumnConstraintContext(this.context, this.state);
        this.enterRule(localContext, 318, HiveSqlParser.RULE_columnConstraint);
        try {
            this.state = 2311;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 238, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2309;
                this.foreignKeyConstraint();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2310;
                this.colConstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public foreignKeyConstraint(): ForeignKeyConstraintContext {
        let localContext = new ForeignKeyConstraintContext(this.context, this.state);
        this.enterRule(localContext, 320, HiveSqlParser.RULE_foreignKeyConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2315;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2313;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2314;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2317;
            this.match(HiveSqlParser.KW_REFERENCES);
            this.state = 2318;
            localContext._tabName = this.tableName();
            this.state = 2319;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2320;
            localContext._colName = this.columnName();
            this.state = 2321;
            this.match(HiveSqlParser.RPAREN);
            this.state = 2323;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 45059) !== 0) || _la === 216) {
                {
                this.state = 2322;
                this.constraintOptsCreate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colConstraint(): ColConstraintContext {
        let localContext = new ColConstraintContext(this.context, this.state);
        this.enterRule(localContext, 322, HiveSqlParser.RULE_colConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2327;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2325;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2326;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2329;
            this.columnConstraintType();
            this.state = 2331;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 45059) !== 0) || _la === 216) {
                {
                this.state = 2330;
                this.constraintOptsCreate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterColumnConstraint(): AlterColumnConstraintContext {
        let localContext = new AlterColumnConstraintContext(this.context, this.state);
        this.enterRule(localContext, 324, HiveSqlParser.RULE_alterColumnConstraint);
        try {
            this.state = 2335;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 243, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2333;
                this.alterForeignKeyConstraint();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2334;
                this.alterColConstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterForeignKeyConstraint(): AlterForeignKeyConstraintContext {
        let localContext = new AlterForeignKeyConstraintContext(this.context, this.state);
        this.enterRule(localContext, 326, HiveSqlParser.RULE_alterForeignKeyConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2339;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2337;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2338;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2341;
            this.match(HiveSqlParser.KW_REFERENCES);
            this.state = 2342;
            localContext._tabName = this.tableName();
            this.state = 2343;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2344;
            localContext._colName = this.columnName();
            this.state = 2345;
            this.match(HiveSqlParser.RPAREN);
            this.state = 2347;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 245, this.context) ) {
            case 1:
                {
                this.state = 2346;
                this.constraintOptsAlter();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterColConstraint(): AlterColConstraintContext {
        let localContext = new AlterColConstraintContext(this.context, this.state);
        this.enterRule(localContext, 328, HiveSqlParser.RULE_alterColConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2351;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2349;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2350;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2353;
            this.columnConstraintType();
            this.state = 2355;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
            case 1:
                {
                this.state = 2354;
                this.constraintOptsAlter();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnConstraintType(): ColumnConstraintTypeContext {
        let localContext = new ColumnConstraintTypeContext(this.context, this.state);
        this.enterRule(localContext, 330, HiveSqlParser.RULE_columnConstraintType);
        try {
            this.state = 2363;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2357;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 2358;
                this.match(HiveSqlParser.KW_NULL);
                }
                break;
            case HiveSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2359;
                this.match(HiveSqlParser.KW_DEFAULT);
                this.state = 2360;
                this.defaultVal();
                }
                break;
            case HiveSqlParser.KW_CHECK:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2361;
                this.checkConstraint();
                }
                break;
            case HiveSqlParser.KW_PRIMARY:
            case HiveSqlParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2362;
                this.tableConstraintType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultVal(): DefaultValContext {
        let localContext = new DefaultValContext(this.context, this.state);
        this.enterRule(localContext, 332, HiveSqlParser.RULE_defaultVal);
        try {
            this.state = 2368;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 249, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2365;
                this.constant();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2366;
                this.function_();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2367;
                this.castExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableConstraintType(): TableConstraintTypeContext {
        let localContext = new TableConstraintTypeContext(this.context, this.state);
        this.enterRule(localContext, 334, HiveSqlParser.RULE_tableConstraintType);
        try {
            this.state = 2373;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_PRIMARY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2370;
                this.match(HiveSqlParser.KW_PRIMARY);
                this.state = 2371;
                this.match(HiveSqlParser.KW_KEY);
                }
                break;
            case HiveSqlParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2372;
                this.match(HiveSqlParser.KW_UNIQUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext {
        let localContext = new ConstraintOptsCreateContext(this.context, this.state);
        this.enterRule(localContext, 336, HiveSqlParser.RULE_constraintOptsCreate);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2375;
            this.enableValidateSpecification();
            this.state = 2377;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 214 || _la === 272) {
                {
                this.state = 2376;
                this.relySpecification();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext {
        let localContext = new ConstraintOptsAlterContext(this.context, this.state);
        this.enterRule(localContext, 338, HiveSqlParser.RULE_constraintOptsAlter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2379;
            this.enableValidateSpecification();
            this.state = 2381;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 214 || _la === 272) {
                {
                this.state = 2380;
                this.relySpecification();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameColonType(): ColumnNameColonTypeContext {
        let localContext = new ColumnNameColonTypeContext(this.context, this.state);
        this.enterRule(localContext, 340, HiveSqlParser.RULE_columnNameColonType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2383;
            localContext._colName = this.columnNameCreate();
            this.state = 2384;
            this.match(HiveSqlParser.COLON);
            this.state = 2385;
            this.columnType();
            this.state = 2388;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2386;
                this.match(HiveSqlParser.KW_COMMENT);
                this.state = 2387;
                localContext._comment = this.match(HiveSqlParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnType(): ColumnTypeContext {
        let localContext = new ColumnTypeContext(this.context, this.state);
        this.enterRule(localContext, 342, HiveSqlParser.RULE_columnType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2390;
            this.type_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnTypeList(): ColumnTypeListContext {
        let localContext = new ColumnTypeListContext(this.context, this.state);
        this.enterRule(localContext, 344, HiveSqlParser.RULE_columnTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2392;
            this.columnType();
            this.state = 2397;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2393;
                this.match(HiveSqlParser.COMMA);
                this.state = 2394;
                this.columnType();
                }
                }
                this.state = 2399;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_(): TypeContext {
        let localContext = new TypeContext(this.context, this.state);
        this.enterRule(localContext, 346, HiveSqlParser.RULE_type);
        try {
            this.state = 2405;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_BIGINT:
            case HiveSqlParser.KW_BINARY:
            case HiveSqlParser.KW_BOOLEAN:
            case HiveSqlParser.KW_CHAR:
            case HiveSqlParser.KW_DATE:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DEC:
            case HiveSqlParser.KW_DECIMAL:
            case HiveSqlParser.KW_NUMERIC:
            case HiveSqlParser.KW_DOUBLE:
            case HiveSqlParser.KW_FLOAT:
            case HiveSqlParser.KW_INT:
            case HiveSqlParser.KW_INTEGER:
            case HiveSqlParser.KW_REAL:
            case HiveSqlParser.KW_SMALLINT:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_TIMESTAMP:
            case HiveSqlParser.KW_TIMESTAMPLOCALTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_VARCHAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2400;
                this.primitiveType();
                }
                break;
            case HiveSqlParser.KW_ARRAY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2401;
                this.listType();
                }
                break;
            case HiveSqlParser.KW_STRUCT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2402;
                this.structType();
                }
                break;
            case HiveSqlParser.KW_MAP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2403;
                this.mapType();
                }
                break;
            case HiveSqlParser.KW_UNIONTYPE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2404;
                this.unionType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public primitiveType(): PrimitiveTypeContext {
        let localContext = new PrimitiveTypeContext(this.context, this.state);
        this.enterRule(localContext, 348, HiveSqlParser.RULE_primitiveType);
        let _la: number;
        try {
            this.state = 2444;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 259, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2407;
                this.match(HiveSqlParser.KW_TINYINT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2408;
                this.match(HiveSqlParser.KW_SMALLINT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2409;
                this.match(HiveSqlParser.KW_INT);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2410;
                this.match(HiveSqlParser.KW_INTEGER);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2411;
                this.match(HiveSqlParser.KW_BIGINT);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2412;
                this.match(HiveSqlParser.KW_BOOLEAN);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2413;
                this.match(HiveSqlParser.KW_FLOAT);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2414;
                this.match(HiveSqlParser.KW_REAL);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2415;
                this.match(HiveSqlParser.KW_DOUBLE);
                this.state = 2417;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 248) {
                    {
                    this.state = 2416;
                    this.match(HiveSqlParser.KW_PRECISION);
                    }
                }

                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2419;
                this.match(HiveSqlParser.KW_DATE);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2420;
                this.match(HiveSqlParser.KW_DATETIME);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2421;
                this.match(HiveSqlParser.KW_TIMESTAMP);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2422;
                this.match(HiveSqlParser.KW_TIMESTAMPLOCALTZ);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2423;
                this.match(HiveSqlParser.KW_TIMESTAMP);
                this.state = 2424;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 2425;
                this.match(HiveSqlParser.KW_LOCAL);
                this.state = 2426;
                this.match(HiveSqlParser.KW_TIME);
                this.state = 2427;
                this.match(HiveSqlParser.KW_ZONE);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2428;
                this.match(HiveSqlParser.KW_STRING);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2429;
                this.match(HiveSqlParser.KW_BINARY);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2430;
                this.decimal();
                this.state = 2438;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
                case 1:
                    {
                    this.state = 2431;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 2432;
                    localContext._prec = this.match(HiveSqlParser.Number);
                    this.state = 2435;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 397) {
                        {
                        this.state = 2433;
                        this.match(HiveSqlParser.COMMA);
                        this.state = 2434;
                        localContext._scale = this.match(HiveSqlParser.Number);
                        }
                    }

                    this.state = 2437;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                }
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2440;
                _la = this.tokenStream.LA(1);
                if(!(_la === 39 || _la === 376)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2441;
                this.match(HiveSqlParser.LPAREN);
                this.state = 2442;
                localContext._length = this.match(HiveSqlParser.Number);
                this.state = 2443;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listType(): ListTypeContext {
        let localContext = new ListTypeContext(this.context, this.state);
        this.enterRule(localContext, 350, HiveSqlParser.RULE_listType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2446;
            this.match(HiveSqlParser.KW_ARRAY);
            this.state = 2447;
            this.match(HiveSqlParser.LESSTHAN);
            this.state = 2448;
            this.type_();
            this.state = 2449;
            this.match(HiveSqlParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public structType(): StructTypeContext {
        let localContext = new StructTypeContext(this.context, this.state);
        this.enterRule(localContext, 352, HiveSqlParser.RULE_structType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2451;
            this.match(HiveSqlParser.KW_STRUCT);
            this.state = 2452;
            this.match(HiveSqlParser.LESSTHAN);
            this.state = 2453;
            this.columnNameColonTypeList();
            this.state = 2454;
            this.match(HiveSqlParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mapType(): MapTypeContext {
        let localContext = new MapTypeContext(this.context, this.state);
        this.enterRule(localContext, 354, HiveSqlParser.RULE_mapType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2456;
            this.match(HiveSqlParser.KW_MAP);
            this.state = 2457;
            this.match(HiveSqlParser.LESSTHAN);
            this.state = 2458;
            localContext._left = this.primitiveType();
            this.state = 2459;
            this.match(HiveSqlParser.COMMA);
            this.state = 2460;
            localContext._right = this.type_();
            this.state = 2461;
            this.match(HiveSqlParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unionType(): UnionTypeContext {
        let localContext = new UnionTypeContext(this.context, this.state);
        this.enterRule(localContext, 356, HiveSqlParser.RULE_unionType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2463;
            this.match(HiveSqlParser.KW_UNIONTYPE);
            this.state = 2464;
            this.match(HiveSqlParser.LESSTHAN);
            this.state = 2465;
            this.columnTypeList();
            this.state = 2466;
            this.match(HiveSqlParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setOperator(): SetOperatorContext {
        let localContext = new SetOperatorContext(this.context, this.state);
        this.enterRule(localContext, 358, HiveSqlParser.RULE_setOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2468;
            _la = this.tokenStream.LA(1);
            if(!(_la === 112 || _la === 164 || _la === 205 || _la === 356)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2470;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 7 || _la === 96) {
                {
                this.state = 2469;
                _la = this.tokenStream.LA(1);
                if(!(_la === 7 || _la === 96)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryStatementExpression(): QueryStatementExpressionContext {
        let localContext = new QueryStatementExpressionContext(this.context, this.state);
        this.enterRule(localContext, 360, HiveSqlParser.RULE_queryStatementExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2473;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 387) {
                {
                this.state = 2472;
                localContext._w = this.withClause();
                }
            }

            this.state = 2475;
            this.queryStatementExpressionBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryStatementExpressionBody(): QueryStatementExpressionBodyContext {
        let localContext = new QueryStatementExpressionBodyContext(this.context, this.state);
        this.enterRule(localContext, 362, HiveSqlParser.RULE_queryStatementExpressionBody);
        try {
            this.state = 2479;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_FROM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2477;
                this.fromStatement();
                }
                break;
            case HiveSqlParser.KW_INSERT:
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_REDUCE:
            case HiveSqlParser.KW_SELECT:
            case HiveSqlParser.KW_VALUES:
            case HiveSqlParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2478;
                this.regularBody();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withClause(): WithClauseContext {
        let localContext = new WithClauseContext(this.context, this.state);
        this.enterRule(localContext, 364, HiveSqlParser.RULE_withClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2481;
            this.match(HiveSqlParser.KW_WITH);
            this.state = 2482;
            this.cteStatement();
            this.state = 2487;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2483;
                this.match(HiveSqlParser.COMMA);
                this.state = 2484;
                this.cteStatement();
                }
                }
                this.state = 2489;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cteStatement(): CteStatementContext {
        let localContext = new CteStatementContext(this.context, this.state);
        this.enterRule(localContext, 366, HiveSqlParser.RULE_cteStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2490;
            this.id_();
            this.state = 2495;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399) {
                {
                this.state = 2491;
                this.match(HiveSqlParser.LPAREN);
                this.state = 2492;
                localContext._colAliases = this.columnNameList();
                this.state = 2493;
                this.match(HiveSqlParser.RPAREN);
                }
            }

            this.state = 2497;
            this.match(HiveSqlParser.KW_AS);
            this.state = 2498;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2499;
            this.queryStatementExpression();
            this.state = 2500;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromStatement(): FromStatementContext {
        let localContext = new FromStatementContext(this.context, this.state);
        this.enterRule(localContext, 368, HiveSqlParser.RULE_fromStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2502;
            this.singleFromStatement();
            this.state = 2508;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 112 || _la === 164 || _la === 205 || _la === 356) {
                {
                {
                this.state = 2503;
                localContext._u = this.setOperator();
                this.state = 2504;
                localContext._r = this.singleFromStatement();
                }
                }
                this.state = 2510;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleFromStatement(): SingleFromStatementContext {
        let localContext = new SingleFromStatementContext(this.context, this.state);
        this.enterRule(localContext, 370, HiveSqlParser.RULE_singleFromStatement);
        let _la: number;
        try {
            this.state = 2582;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 288, this.context) ) {
            case 1:
                localContext = new FromInsertStmtContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2511;
                this.fromClause();
                this.state = 2512;
                this.insertClause();
                this.state = 2513;
                this.selectClause();
                this.state = 2515;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178 || _la === 397) {
                    {
                    this.state = 2514;
                    this.lateralView();
                    }
                }

                this.state = 2518;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 384) {
                    {
                    this.state = 2517;
                    this.whereClause();
                    }
                }

                this.state = 2521;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 2520;
                    this.groupByClause();
                    }
                }

                this.state = 2524;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 2523;
                    this.havingClause();
                    }
                }

                this.state = 2527;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 386) {
                    {
                    this.state = 2526;
                    this.window_clause();
                    }
                }

                this.state = 2530;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 256) {
                    {
                    this.state = 2529;
                    this.qualifyClause();
                    }
                }

                this.state = 2533;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 2532;
                    this.orderByClause();
                    }
                }

                this.state = 2536;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 41) {
                    {
                    this.state = 2535;
                    this.clusterByClause();
                    }
                }

                this.state = 2539;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 2538;
                    this.distributeByClause();
                    }
                }

                this.state = 2542;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 314) {
                    {
                    this.state = 2541;
                    this.sortByClause();
                    }
                }

                this.state = 2545;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 185) {
                    {
                    this.state = 2544;
                    this.limitClause();
                    }
                }

                }
                break;
            case 2:
                localContext = new FromSelectStmtContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2547;
                this.fromClause();
                this.state = 2548;
                this.selectClause();
                this.state = 2550;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178 || _la === 397) {
                    {
                    this.state = 2549;
                    this.lateralView();
                    }
                }

                this.state = 2553;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 384) {
                    {
                    this.state = 2552;
                    this.whereClause();
                    }
                }

                this.state = 2556;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 2555;
                    this.groupByClause();
                    }
                }

                this.state = 2559;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 2558;
                    this.havingClause();
                    }
                }

                this.state = 2562;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 386) {
                    {
                    this.state = 2561;
                    this.window_clause();
                    }
                }

                this.state = 2565;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 256) {
                    {
                    this.state = 2564;
                    this.qualifyClause();
                    }
                }

                this.state = 2568;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 2567;
                    this.orderByClause();
                    }
                }

                this.state = 2571;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 41) {
                    {
                    this.state = 2570;
                    this.clusterByClause();
                    }
                }

                this.state = 2574;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 2573;
                    this.distributeByClause();
                    }
                }

                this.state = 2577;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 314) {
                    {
                    this.state = 2576;
                    this.sortByClause();
                    }
                }

                this.state = 2580;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 185) {
                    {
                    this.state = 2579;
                    this.limitClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public regularBody(): RegularBodyContext {
        let localContext = new RegularBodyContext(this.context, this.state);
        this.enterRule(localContext, 372, HiveSqlParser.RULE_regularBody);
        try {
            this.state = 2588;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_INSERT:
                localContext = new InsertStmtContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2584;
                (localContext as InsertStmtContext)._i = this.insertClause();
                this.state = 2585;
                (localContext as InsertStmtContext)._s = this.selectStatement();
                }
                break;
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_REDUCE:
            case HiveSqlParser.KW_SELECT:
            case HiveSqlParser.KW_VALUES:
            case HiveSqlParser.LPAREN:
                localContext = new SelectStmtContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2587;
                this.selectStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomSelectStatement(): AtomSelectStatementContext {
        let localContext = new AtomSelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 374, HiveSqlParser.RULE_atomSelectStatement);
        let _la: number;
        try {
            this.state = 2614;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_REDUCE:
            case HiveSqlParser.KW_SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2590;
                localContext._s = this.selectClause();
                this.state = 2592;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 290, this.context) ) {
                case 1:
                    {
                    this.state = 2591;
                    localContext._f = this.fromClause();
                    }
                    break;
                }
                this.state = 2595;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 384) {
                    {
                    this.state = 2594;
                    localContext._w = this.whereClause();
                    }
                }

                this.state = 2598;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 2597;
                    localContext._g = this.groupByClause();
                    }
                }

                this.state = 2601;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 2600;
                    localContext._h = this.havingClause();
                    }
                }

                this.state = 2604;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 386) {
                    {
                    this.state = 2603;
                    localContext._win = this.window_clause();
                    }
                }

                this.state = 2607;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 256) {
                    {
                    this.state = 2606;
                    localContext._q = this.qualifyClause();
                    }
                }

                }
                break;
            case HiveSqlParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2609;
                this.match(HiveSqlParser.LPAREN);
                this.state = 2610;
                this.selectStatement();
                this.state = 2611;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case HiveSqlParser.KW_VALUES:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2613;
                this.valuesClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatement(): SelectStatementContext {
        let localContext = new SelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 376, HiveSqlParser.RULE_selectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2616;
            localContext._a = this.atomSelectStatement();
            this.state = 2618;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 112 || _la === 164 || _la === 205 || _la === 356) {
                {
                this.state = 2617;
                localContext._set_ = this.setOpSelectStatement();
                }
            }

            this.state = 2621;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 229) {
                {
                this.state = 2620;
                localContext._o = this.orderByClause();
                }
            }

            this.state = 2624;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 41) {
                {
                this.state = 2623;
                localContext._c = this.clusterByClause();
                }
            }

            this.state = 2627;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 97) {
                {
                this.state = 2626;
                localContext._d = this.distributeByClause();
                }
            }

            this.state = 2630;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 314) {
                {
                this.state = 2629;
                localContext._sort = this.sortByClause();
                }
            }

            this.state = 2633;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 185) {
                {
                this.state = 2632;
                localContext._l = this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setOpSelectStatement(): SetOpSelectStatementContext {
        let localContext = new SetOpSelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 378, HiveSqlParser.RULE_setOpSelectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2638;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 2635;
                localContext._u = this.setOperator();
                this.state = 2636;
                localContext._b = this.atomSelectStatement();
                }
                }
                this.state = 2640;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 112 || _la === 164 || _la === 205 || _la === 356);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext {
        let localContext = new SelectStatementWithCTEContext(this.context, this.state);
        this.enterRule(localContext, 380, HiveSqlParser.RULE_selectStatementWithCTE);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2643;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 387) {
                {
                this.state = 2642;
                localContext._w = this.withClause();
                }
            }

            this.state = 2645;
            this.selectStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertClause(): InsertClauseContext {
        let localContext = new InsertClauseContext(this.context, this.state);
        this.enterRule(localContext, 382, HiveSqlParser.RULE_insertClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2647;
            this.match(HiveSqlParser.KW_INSERT);
            this.state = 2664;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_OVERWRITE:
                {
                this.state = 2648;
                this.match(HiveSqlParser.KW_OVERWRITE);
                this.state = 2649;
                this.destination();
                this.state = 2651;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 2650;
                    this.ifNotExists();
                    }
                }

                }
                break;
            case HiveSqlParser.KW_INTO:
                {
                this.state = 2653;
                this.match(HiveSqlParser.KW_INTO);
                this.state = 2655;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 2654;
                    this.match(HiveSqlParser.KW_TABLE);
                    }
                }

                this.state = 2657;
                this.tableOrPartition();
                this.state = 2662;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 307, this.context) ) {
                case 1:
                    {
                    this.state = 2658;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 2659;
                    localContext._targetCols = this.columnNameList();
                    this.state = 2660;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public destination(): DestinationContext {
        let localContext = new DestinationContext(this.context, this.state);
        this.enterRule(localContext, 384, HiveSqlParser.RULE_destination);
        let _la: number;
        try {
            this.state = 2679;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_LOCAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2667;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188) {
                    {
                    this.state = 2666;
                    localContext._local = this.match(HiveSqlParser.KW_LOCAL);
                    }
                }

                this.state = 2669;
                this.match(HiveSqlParser.KW_DIRECTORY);
                this.state = 2670;
                this.match(HiveSqlParser.StringLiteral);
                this.state = 2672;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 291) {
                    {
                    this.state = 2671;
                    this.tableRowFormat();
                    }
                }

                this.state = 2675;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 321) {
                    {
                    this.state = 2674;
                    this.tableFileFormat();
                    }
                }

                }
                break;
            case HiveSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2677;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 2678;
                this.tableOrPartition();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 386, HiveSqlParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2681;
            this.match(HiveSqlParser.KW_LIMIT);
            this.state = 2690;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
            case 1:
                {
                this.state = 2684;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 313, this.context) ) {
                case 1:
                    {
                    this.state = 2682;
                    localContext._offset = this.match(HiveSqlParser.Number);
                    this.state = 2683;
                    this.match(HiveSqlParser.COMMA);
                    }
                    break;
                }
                this.state = 2686;
                localContext._num = this.match(HiveSqlParser.Number);
                }
                break;
            case 2:
                {
                this.state = 2687;
                localContext._num = this.match(HiveSqlParser.Number);
                this.state = 2688;
                this.match(HiveSqlParser.KW_OFFSET);
                this.state = 2689;
                localContext._offset = this.match(HiveSqlParser.Number);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAssignmentClause(): ColumnAssignmentClauseContext {
        let localContext = new ColumnAssignmentClauseContext(this.context, this.state);
        this.enterRule(localContext, 388, HiveSqlParser.RULE_columnAssignmentClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2692;
            this.columnName();
            this.state = 2693;
            this.match(HiveSqlParser.EQUAL);
            this.state = 2694;
            this.precedencePlusExpressionOrDefault();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedencePlusExpressionOrDefault(): PrecedencePlusExpressionOrDefaultContext {
        let localContext = new PrecedencePlusExpressionOrDefaultContext(this.context, this.state);
        this.enterRule(localContext, 390, HiveSqlParser.RULE_precedencePlusExpressionOrDefault);
        try {
            this.state = 2698;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 315, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2696;
                this.match(HiveSqlParser.KW_DEFAULT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2697;
                this.precedencePlusExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setColumnsClause(): SetColumnsClauseContext {
        let localContext = new SetColumnsClauseContext(this.context, this.state);
        this.enterRule(localContext, 392, HiveSqlParser.RULE_setColumnsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2700;
            this.match(HiveSqlParser.KW_SET);
            this.state = 2701;
            this.columnAssignmentClause();
            this.state = 2706;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2702;
                this.match(HiveSqlParser.COMMA);
                this.state = 2703;
                this.columnAssignmentClause();
                }
                }
                this.state = 2708;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlTransactionStatement(): SqlTransactionStatementContext {
        let localContext = new SqlTransactionStatementContext(this.context, this.state);
        this.enterRule(localContext, 394, HiveSqlParser.RULE_sqlTransactionStatement);
        let _la: number;
        try {
            this.state = 2732;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_START:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2709;
                this.match(HiveSqlParser.KW_START);
                this.state = 2710;
                this.match(HiveSqlParser.KW_TRANSACTION);
                this.state = 2719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 168 || _la === 261) {
                    {
                    this.state = 2711;
                    this.transactionMode();
                    this.state = 2716;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 397) {
                        {
                        {
                        this.state = 2712;
                        this.match(HiveSqlParser.COMMA);
                        this.state = 2713;
                        this.transactionMode();
                        }
                        }
                        this.state = 2718;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case HiveSqlParser.KW_COMMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2721;
                this.match(HiveSqlParser.KW_COMMIT);
                this.state = 2723;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 389) {
                    {
                    this.state = 2722;
                    this.match(HiveSqlParser.KW_WORK);
                    }
                }

                }
                break;
            case HiveSqlParser.KW_ROLLBACK:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2725;
                this.match(HiveSqlParser.KW_ROLLBACK);
                this.state = 2727;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 389) {
                    {
                    this.state = 2726;
                    this.match(HiveSqlParser.KW_WORK);
                    }
                }

                }
                break;
            case HiveSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2729;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2730;
                this.match(HiveSqlParser.KW_AUTOCOMMIT);
                this.state = 2731;
                _la = this.tokenStream.LA(1);
                if(!(_la === 125 || _la === 350)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionMode(): TransactionModeContext {
        let localContext = new TransactionModeContext(this.context, this.state);
        this.enterRule(localContext, 396, HiveSqlParser.RULE_transactionMode);
        let _la: number;
        try {
            this.state = 2739;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ISOLATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2734;
                this.match(HiveSqlParser.KW_ISOLATION);
                this.state = 2735;
                this.match(HiveSqlParser.KW_LEVEL);
                this.state = 2736;
                this.match(HiveSqlParser.KW_SNAPSHOT);
                }
                break;
            case HiveSqlParser.KW_READ:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2737;
                this.match(HiveSqlParser.KW_READ);
                this.state = 2738;
                _la = this.tokenStream.LA(1);
                if(!(_la === 225 || _la === 391)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClauses(): WhenClausesContext {
        let localContext = new WhenClausesContext(this.context, this.state);
        this.enterRule(localContext, 398, HiveSqlParser.RULE_whenClauses);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2745;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 324, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 2743;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 323, this.context) ) {
                    case 1:
                        {
                        this.state = 2741;
                        this.whenMatchedAndClause();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2742;
                        this.whenMatchedThenClause();
                        }
                        break;
                    }
                    }
                }
                this.state = 2747;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 324, this.context);
            }
            this.state = 2749;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 383) {
                {
                this.state = 2748;
                this.whenNotMatchedClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenNotMatchedClause(): WhenNotMatchedClauseContext {
        let localContext = new WhenNotMatchedClauseContext(this.context, this.state);
        this.enterRule(localContext, 400, HiveSqlParser.RULE_whenNotMatchedClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2751;
            this.match(HiveSqlParser.KW_WHEN);
            this.state = 2752;
            this.match(HiveSqlParser.KW_NOT);
            this.state = 2753;
            this.match(HiveSqlParser.KW_MATCHED);
            this.state = 2756;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 11) {
                {
                this.state = 2754;
                this.match(HiveSqlParser.KW_AND);
                this.state = 2755;
                this.expression();
                }
            }

            this.state = 2758;
            this.match(HiveSqlParser.KW_THEN);
            this.state = 2759;
            this.match(HiveSqlParser.KW_INSERT);
            this.state = 2761;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399) {
                {
                this.state = 2760;
                localContext._targetCols = this.columnParenthesesList();
                }
            }

            this.state = 2763;
            this.match(HiveSqlParser.KW_VALUES);
            this.state = 2764;
            this.expressionsInParenthesis();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenMatchedAndClause(): WhenMatchedAndClauseContext {
        let localContext = new WhenMatchedAndClauseContext(this.context, this.state);
        this.enterRule(localContext, 402, HiveSqlParser.RULE_whenMatchedAndClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2766;
            this.match(HiveSqlParser.KW_WHEN);
            this.state = 2767;
            this.match(HiveSqlParser.KW_MATCHED);
            this.state = 2768;
            this.match(HiveSqlParser.KW_AND);
            this.state = 2769;
            this.expression();
            this.state = 2770;
            this.match(HiveSqlParser.KW_THEN);
            this.state = 2774;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_UPDATE:
                {
                this.state = 2771;
                this.match(HiveSqlParser.KW_UPDATE);
                this.state = 2772;
                this.setColumnsClause();
                }
                break;
            case HiveSqlParser.KW_DELETE:
                {
                this.state = 2773;
                this.match(HiveSqlParser.KW_DELETE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenMatchedThenClause(): WhenMatchedThenClauseContext {
        let localContext = new WhenMatchedThenClauseContext(this.context, this.state);
        this.enterRule(localContext, 404, HiveSqlParser.RULE_whenMatchedThenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2776;
            this.match(HiveSqlParser.KW_WHEN);
            this.state = 2777;
            this.match(HiveSqlParser.KW_MATCHED);
            this.state = 2778;
            this.match(HiveSqlParser.KW_THEN);
            this.state = 2782;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_UPDATE:
                {
                this.state = 2779;
                this.match(HiveSqlParser.KW_UPDATE);
                this.state = 2780;
                this.setColumnsClause();
                }
                break;
            case HiveSqlParser.KW_DELETE:
                {
                this.state = 2781;
                this.match(HiveSqlParser.KW_DELETE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compactionPool(): CompactionPoolContext {
        let localContext = new CompactionPoolContext(this.context, this.state);
        this.enterRule(localContext, 406, HiveSqlParser.RULE_compactionPool);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2784;
            this.match(HiveSqlParser.KW_POOL);
            this.state = 2785;
            localContext._poolName = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compactionType(): CompactionTypeContext {
        let localContext = new CompactionTypeContext(this.context, this.state);
        this.enterRule(localContext, 408, HiveSqlParser.RULE_compactionType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2787;
            this.match(HiveSqlParser.KW_TYPE);
            this.state = 2788;
            localContext._compactType = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compactionStatus(): CompactionStatusContext {
        let localContext = new CompactionStatusContext(this.context, this.state);
        this.enterRule(localContext, 410, HiveSqlParser.RULE_compactionStatus);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2790;
            this.match(HiveSqlParser.KW_STATUS);
            this.state = 2791;
            localContext._status = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatement(): AlterStatementContext {
        let localContext = new AlterStatementContext(this.context, this.state);
        this.enterRule(localContext, 412, HiveSqlParser.RULE_alterStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2793;
            this.match(HiveSqlParser.KW_ALTER);
            this.state = 2824;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_TABLE:
                {
                this.state = 2794;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 2795;
                this.tableName();
                this.state = 2796;
                this.alterTableStatementSuffix();
                }
                break;
            case HiveSqlParser.KW_VIEW:
                {
                this.state = 2798;
                this.match(HiveSqlParser.KW_VIEW);
                this.state = 2799;
                this.viewName();
                this.state = 2801;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 2800;
                    this.match(HiveSqlParser.KW_AS);
                    }
                }

                this.state = 2803;
                this.alterViewStatementSuffix();
                }
                break;
            case HiveSqlParser.KW_MATERIALIZED:
                {
                this.state = 2805;
                this.match(HiveSqlParser.KW_MATERIALIZED);
                this.state = 2806;
                this.match(HiveSqlParser.KW_VIEW);
                this.state = 2807;
                localContext._tableNameTree = this.viewName();
                this.state = 2811;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                    {
                    this.state = 2808;
                    localContext._mvRewriteFlag = this.rewriteEnabled();
                    }
                    break;
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                    {
                    this.state = 2809;
                    localContext._mvRewriteFlag2 = this.rewriteDisabled();
                    }
                    break;
                case HiveSqlParser.KW_REBUILD:
                    {
                    this.state = 2810;
                    this.match(HiveSqlParser.KW_REBUILD);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case HiveSqlParser.KW_DATABASE:
            case HiveSqlParser.KW_SCHEMA:
                {
                this.state = 2813;
                this.db_schema();
                this.state = 2814;
                this.alterDatabaseStatementSuffix();
                }
                break;
            case HiveSqlParser.KW_DATACONNECTOR:
                {
                this.state = 2816;
                this.match(HiveSqlParser.KW_DATACONNECTOR);
                this.state = 2817;
                this.alterDataConnectorStatementSuffix();
                }
                break;
            case HiveSqlParser.KW_INDEX:
                {
                this.state = 2818;
                this.match(HiveSqlParser.KW_INDEX);
                this.state = 2819;
                this.id_();
                this.state = 2820;
                this.match(HiveSqlParser.KW_ON);
                this.state = 2821;
                this.tableOrPartition();
                this.state = 2822;
                this.match(HiveSqlParser.KW_REBUILD);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableStatementSuffix(): AlterTableStatementSuffixContext {
        let localContext = new AlterTableStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 414, HiveSqlParser.RULE_alterTableStatementSuffix);
        let _la: number;
        try {
            this.state = 2915;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 343, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2826;
                this.match(HiveSqlParser.KW_RENAME);
                this.state = 2827;
                this.match(HiveSqlParser.KW_TO);
                this.state = 2828;
                this.tableNameCreate();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2829;
                this.match(HiveSqlParser.KW_RECOVER);
                this.state = 2830;
                this.match(HiveSqlParser.KW_PARTITIONS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2831;
                this.alterStatementSuffixDropPartitions();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2832;
                this.match(HiveSqlParser.KW_ADD);
                this.state = 2834;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 2833;
                    this.ifNotExists();
                    }
                }

                this.state = 2840;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2836;
                    this.partitionSpec();
                    this.state = 2838;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 189) {
                        {
                        this.state = 2837;
                        this.locationPath();
                        }
                    }

                    }
                    }
                    this.state = 2842;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 237);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2844;
                this.match(HiveSqlParser.KW_TOUCH);
                this.state = 2848;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 237) {
                    {
                    {
                    this.state = 2845;
                    this.partitionSpec();
                    }
                    }
                    this.state = 2850;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2851;
                this.match(HiveSqlParser.KW_ARCHIVE);
                this.state = 2855;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 237) {
                    {
                    {
                    this.state = 2852;
                    this.partitionSpec();
                    }
                    }
                    this.state = 2857;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2858;
                this.match(HiveSqlParser.KW_UNARCHIVE);
                this.state = 2862;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 237) {
                    {
                    {
                    this.state = 2859;
                    this.partitionSpec();
                    }
                    }
                    this.state = 2864;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2865;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2866;
                this.match(HiveSqlParser.KW_TBLPROPERTIES);
                this.state = 2867;
                this.tableProperties();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2868;
                this.match(HiveSqlParser.KW_UNSET);
                this.state = 2869;
                this.match(HiveSqlParser.KW_TBLPROPERTIES);
                this.state = 2871;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 2870;
                    this.ifExists();
                    }
                }

                this.state = 2873;
                this.tableProperties();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2874;
                this.tableSkewed();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2875;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 2878;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_SKEWED:
                    {
                    this.state = 2876;
                    this.match(HiveSqlParser.KW_SKEWED);
                    }
                    break;
                case HiveSqlParser.KW_STORED:
                    {
                    this.state = 2877;
                    this.storedAsDirs();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2880;
                this.match(HiveSqlParser.KW_EXCHANGE);
                this.state = 2881;
                this.partitionSpec();
                this.state = 2882;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 2883;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 2884;
                localContext._exchangename = this.tableName();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2886;
                this.match(HiveSqlParser.KW_PARTITION);
                this.state = 2887;
                this.match(HiveSqlParser.KW_COLUMN);
                this.state = 2888;
                this.match(HiveSqlParser.LPAREN);
                this.state = 2889;
                this.columnNameType();
                this.state = 2890;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2892;
                this.match(HiveSqlParser.KW_DROP);
                this.state = 2893;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2894;
                localContext._cName = this.id_();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2895;
                this.match(HiveSqlParser.KW_ADD);
                this.state = 2898;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 341, this.context) ) {
                case 1:
                    {
                    this.state = 2896;
                    localContext._fk = this.alterForeignKeyWithName();
                    }
                    break;
                case 2:
                    {
                    this.state = 2897;
                    this.alterConstraintWithName();
                    }
                    break;
                }
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2901;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 237) {
                    {
                    this.state = 2900;
                    this.partitionSpec();
                    }
                }

                this.state = 2903;
                this.alterTblPartitionStatementSuffix();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2904;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2905;
                this.match(HiveSqlParser.KW_OWNER);
                this.state = 2906;
                this.principalName();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2907;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2908;
                this.match(HiveSqlParser.KW_PARTITION);
                this.state = 2909;
                this.match(HiveSqlParser.KW_SPEC);
                this.state = 2910;
                this.match(HiveSqlParser.LPAREN);
                this.state = 2911;
                localContext._spec = this.partitionTransformSpec();
                this.state = 2912;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2914;
                this.alterStatementSuffixExecute();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTblPartitionStatementSuffix(): AlterTblPartitionStatementSuffixContext {
        let localContext = new AlterTblPartitionStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 416, HiveSqlParser.RULE_alterTblPartitionStatementSuffix);
        let _la: number;
        try {
            this.state = 3049;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 364, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2917;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2918;
                this.match(HiveSqlParser.KW_FILEFORMAT);
                this.state = 2919;
                this.fileFormat();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2920;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2921;
                this.match(HiveSqlParser.KW_LOCATION);
                this.state = 2922;
                localContext._newLoc = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2923;
                this.match(HiveSqlParser.KW_CONCATENATE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2924;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2934;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_SERDE:
                    {
                    this.state = 2925;
                    this.match(HiveSqlParser.KW_SERDE);
                    this.state = 2926;
                    localContext._serdeName = this.match(HiveSqlParser.StringLiteral);
                    this.state = 2930;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 344, this.context) ) {
                    case 1:
                        {
                        this.state = 2927;
                        this.match(HiveSqlParser.KW_WITH);
                        this.state = 2928;
                        this.match(HiveSqlParser.KW_SERDEPROPERTIES);
                        this.state = 2929;
                        this.tableProperties();
                        }
                        break;
                    }
                    }
                    break;
                case HiveSqlParser.KW_SERDEPROPERTIES:
                    {
                    this.state = 2932;
                    this.match(HiveSqlParser.KW_SERDEPROPERTIES);
                    this.state = 2933;
                    this.tableProperties();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2936;
                this.match(HiveSqlParser.KW_UNSET);
                this.state = 2937;
                this.match(HiveSqlParser.KW_SERDEPROPERTIES);
                this.state = 2938;
                this.tableProperties();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2939;
                this.match(HiveSqlParser.KW_RENAME);
                this.state = 2940;
                this.match(HiveSqlParser.KW_TO);
                this.state = 2941;
                this.partitionSpec();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2942;
                this.match(HiveSqlParser.KW_INTO);
                this.state = 2943;
                localContext._num = this.match(HiveSqlParser.Number);
                this.state = 2944;
                this.match(HiveSqlParser.KW_BUCKETS);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2945;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2946;
                this.match(HiveSqlParser.KW_SKEWED);
                this.state = 2947;
                this.match(HiveSqlParser.KW_LOCATION);
                this.state = 2948;
                this.match(HiveSqlParser.LPAREN);
                this.state = 2949;
                this.skewedLocationMap();
                this.state = 2954;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 2950;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 2951;
                    this.skewedLocationMap();
                    }
                    }
                    this.state = 2956;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2957;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2959;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 2960;
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 315)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2961;
                this.tableBuckets();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2962;
                this.match(HiveSqlParser.KW_COMPACT);
                this.state = 2963;
                localContext._compactType = this.match(HiveSqlParser.StringLiteral);
                this.state = 2966;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 11) {
                    {
                    this.state = 2964;
                    this.match(HiveSqlParser.KW_AND);
                    this.state = 2965;
                    this.match(HiveSqlParser.KW_WAIT);
                    }
                }

                this.state = 2972;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 42) {
                    {
                    this.state = 2968;
                    this.match(HiveSqlParser.KW_CLUSTERED);
                    this.state = 2969;
                    this.match(HiveSqlParser.KW_INTO);
                    this.state = 2970;
                    localContext._num = this.match(HiveSqlParser.Number);
                    this.state = 2971;
                    this.match(HiveSqlParser.KW_BUCKETS);
                    }
                }

                this.state = 2975;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 2974;
                    this.orderByClause();
                    }
                }

                this.state = 2978;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 246) {
                    {
                    this.state = 2977;
                    this.compactionPool();
                    }
                }

                this.state = 2984;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 351, this.context) ) {
                case 1:
                    {
                    this.state = 2980;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 2981;
                    this.match(HiveSqlParser.KW_OVERWRITE);
                    this.state = 2982;
                    this.match(HiveSqlParser.KW_TBLPROPERTIES);
                    this.state = 2983;
                    this.tableProperties();
                    }
                    break;
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2986;
                this.match(HiveSqlParser.KW_UPDATE);
                this.state = 2987;
                this.match(HiveSqlParser.KW_STATISTICS);
                this.state = 2988;
                this.match(HiveSqlParser.KW_FOR);
                this.state = 2990;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 352, this.context) ) {
                case 1:
                    {
                    this.state = 2989;
                    this.match(HiveSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2992;
                localContext._colName = this.columnName();
                this.state = 2993;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2994;
                this.tableProperties();
                this.state = 2997;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47) {
                    {
                    this.state = 2995;
                    this.match(HiveSqlParser.KW_COMMENT);
                    this.state = 2996;
                    localContext._comment = this.match(HiveSqlParser.StringLiteral);
                    }
                }

                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2999;
                this.match(HiveSqlParser.KW_UPDATE);
                this.state = 3000;
                this.match(HiveSqlParser.KW_STATISTICS);
                this.state = 3001;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3002;
                this.tableProperties();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3003;
                this.match(HiveSqlParser.KW_CHANGE);
                this.state = 3005;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 354, this.context) ) {
                case 1:
                    {
                    this.state = 3004;
                    this.match(HiveSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 3007;
                localContext._oldName = this.columnName();
                this.state = 3008;
                localContext._newName = this.columnNameCreate();
                this.state = 3009;
                this.columnType();
                this.state = 3011;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 40 || _la === 55 || _la === 83 || _la === 216 || _la === 251 || _la === 269 || _la === 358) {
                    {
                    this.state = 3010;
                    this.alterColumnConstraint();
                    }
                }

                this.state = 3015;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47) {
                    {
                    this.state = 3013;
                    this.match(HiveSqlParser.KW_COMMENT);
                    this.state = 3014;
                    localContext._comment = this.match(HiveSqlParser.StringLiteral);
                    }
                }

                this.state = 3020;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_FIRST:
                    {
                    this.state = 3017;
                    localContext._first = this.match(HiveSqlParser.KW_FIRST);
                    }
                    break;
                case HiveSqlParser.KW_AFTER:
                    {
                    this.state = 3018;
                    this.match(HiveSqlParser.KW_AFTER);
                    this.state = 3019;
                    localContext._afterCol = this.id_();
                    }
                    break;
                case HiveSqlParser.EOF:
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ALTER:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_CASCADE:
                case HiveSqlParser.KW_COMMIT:
                case HiveSqlParser.KW_CREATE:
                case HiveSqlParser.KW_DELETE:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DESCRIBE:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DROP:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_GRANT:
                case HiveSqlParser.KW_IMPORT:
                case HiveSqlParser.KW_INSERT:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MERGE:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_PREPARE:
                case HiveSqlParser.KW_REDUCE:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_RESTRICT:
                case HiveSqlParser.KW_REVOKE:
                case HiveSqlParser.KW_ROLLBACK:
                case HiveSqlParser.KW_SELECT:
                case HiveSqlParser.KW_SET:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_START:
                case HiveSqlParser.KW_TRUNCATE:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UPDATE:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_VALUES:
                case HiveSqlParser.KW_WITH:
                case HiveSqlParser.SEMICOLON:
                case HiveSqlParser.LPAREN:
                    break;
                default:
                    break;
                }
                this.state = 3023;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 282) {
                    {
                    this.state = 3022;
                    this.restrictOrCascade();
                    }
                }

                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3027;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_ADD:
                    {
                    this.state = 3025;
                    localContext._add = this.match(HiveSqlParser.KW_ADD);
                    }
                    break;
                case HiveSqlParser.KW_REPLACE:
                    {
                    this.state = 3026;
                    localContext._replace = this.match(HiveSqlParser.KW_REPLACE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3029;
                this.match(HiveSqlParser.KW_COLUMNS);
                this.state = 3030;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3031;
                this.columnNameTypeList();
                this.state = 3032;
                this.match(HiveSqlParser.RPAREN);
                this.state = 3034;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 282) {
                    {
                    this.state = 3033;
                    this.restrictOrCascade();
                    }
                }

                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3036;
                this.match(HiveSqlParser.KW_UPDATE);
                this.state = 3037;
                this.match(HiveSqlParser.KW_COLUMNS);
                this.state = 3039;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 282) {
                    {
                    this.state = 3038;
                    this.restrictOrCascade();
                    }
                }

                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3041;
                this.enableSpecification();
                this.state = 3047;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_NO_DROP:
                    {
                    {
                    this.state = 3042;
                    this.match(HiveSqlParser.KW_NO_DROP);
                    this.state = 3044;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 34) {
                        {
                        this.state = 3043;
                        this.match(HiveSqlParser.KW_CASCADE);
                        }
                    }

                    }
                    }
                    break;
                case HiveSqlParser.KW_OFFLINE:
                    {
                    this.state = 3046;
                    this.match(HiveSqlParser.KW_OFFLINE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterViewStatementSuffix(): AlterViewStatementSuffixContext {
        let localContext = new AlterViewStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 418, HiveSqlParser.RULE_alterViewStatementSuffix);
        let _la: number;
        try {
            this.state = 3077;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3051;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3052;
                this.match(HiveSqlParser.KW_TBLPROPERTIES);
                this.state = 3053;
                this.tableProperties();
                }
                break;
            case HiveSqlParser.KW_UNSET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3054;
                this.match(HiveSqlParser.KW_UNSET);
                this.state = 3055;
                this.match(HiveSqlParser.KW_TBLPROPERTIES);
                this.state = 3057;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 3056;
                    this.ifExists();
                    }
                }

                this.state = 3059;
                this.tableProperties();
                }
                break;
            case HiveSqlParser.KW_RENAME:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3060;
                this.match(HiveSqlParser.KW_RENAME);
                this.state = 3061;
                this.match(HiveSqlParser.KW_TO);
                this.state = 3062;
                this.tableNameCreate();
                }
                break;
            case HiveSqlParser.KW_ADD:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3063;
                this.match(HiveSqlParser.KW_ADD);
                this.state = 3065;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 3064;
                    this.ifNotExists();
                    }
                }

                this.state = 3071;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3067;
                    this.partitionSpec();
                    this.state = 3069;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 189) {
                        {
                        this.state = 3068;
                        this.locationPath();
                        }
                    }

                    }
                    }
                    this.state = 3073;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 237);
                }
                break;
            case HiveSqlParser.KW_DROP:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3075;
                this.alterStatementSuffixDropPartitions();
                }
                break;
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_REDUCE:
            case HiveSqlParser.KW_SELECT:
            case HiveSqlParser.KW_VALUES:
            case HiveSqlParser.KW_WITH:
            case HiveSqlParser.LPAREN:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3076;
                this.selectStatementWithCTE();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabaseStatementSuffix(): AlterDatabaseStatementSuffixContext {
        let localContext = new AlterDatabaseStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 420, HiveSqlParser.RULE_alterDatabaseStatementSuffix);
        let _la: number;
        try {
            this.state = 3094;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 370, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3079;
                localContext._name = this.dbSchemaName();
                this.state = 3080;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3081;
                this.match(HiveSqlParser.KW_DBPROPERTIES);
                this.state = 3082;
                this.keyValueProperties();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3084;
                localContext._dbName = this.dbSchemaName();
                this.state = 3085;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3086;
                this.match(HiveSqlParser.KW_OWNER);
                this.state = 3087;
                this.principalAlterName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3089;
                localContext._dbName = this.dbSchemaName();
                this.state = 3090;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3091;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 196)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3092;
                localContext._newLocation = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDataConnectorStatementSuffix(): AlterDataConnectorStatementSuffixContext {
        let localContext = new AlterDataConnectorStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 422, HiveSqlParser.RULE_alterDataConnectorStatementSuffix);
        try {
            this.state = 3111;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 371, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3096;
                localContext._name = this.dbSchemaName();
                this.state = 3097;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3098;
                this.match(HiveSqlParser.KW_DCPROPERTIES);
                this.state = 3099;
                this.keyValueProperties();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3101;
                localContext._dcName = this.dbSchemaName();
                this.state = 3102;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3103;
                this.match(HiveSqlParser.KW_OWNER);
                this.state = 3104;
                this.principalAlterName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3106;
                localContext._dcName = this.dbSchemaName();
                this.state = 3107;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3108;
                this.match(HiveSqlParser.KW_URL);
                this.state = 3109;
                localContext._newUri = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public locationPath(): LocationPathContext {
        let localContext = new LocationPathContext(this.context, this.state);
        this.enterRule(localContext, 424, HiveSqlParser.RULE_locationPath);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3113;
            this.match(HiveSqlParser.KW_LOCATION);
            this.state = 3114;
            localContext._locn = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext {
        let localContext = new AlterStatementSuffixDropPartitionsContext(this.context, this.state);
        this.enterRule(localContext, 426, HiveSqlParser.RULE_alterStatementSuffixDropPartitions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3116;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 3118;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 3117;
                this.ifExists();
                }
            }

            this.state = 3120;
            this.match(HiveSqlParser.KW_PARTITION);
            this.state = 3121;
            this.partitionSelectorSpec();
            this.state = 3127;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3122;
                this.match(HiveSqlParser.COMMA);
                this.state = 3123;
                this.match(HiveSqlParser.KW_PARTITION);
                this.state = 3124;
                this.partitionSelectorSpec();
                }
                }
                this.state = 3129;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3132;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152) {
                {
                this.state = 3130;
                this.match(HiveSqlParser.KW_IGNORE);
                this.state = 3131;
                this.match(HiveSqlParser.KW_PROTECTION);
                }
            }

            this.state = 3135;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 255) {
                {
                this.state = 3134;
                this.match(HiveSqlParser.KW_PURGE);
                }
            }

            this.state = 3138;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 134) {
                {
                this.state = 3137;
                this.replicationClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedLocationMap(): SkewedLocationMapContext {
        let localContext = new SkewedLocationMapContext(this.context, this.state);
        this.enterRule(localContext, 428, HiveSqlParser.RULE_skewedLocationMap);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3142;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_CURRENT_DATE:
            case HiveSqlParser.KW_CURRENT_TIMESTAMP:
            case HiveSqlParser.KW_DATE:
            case HiveSqlParser.KW_FALSE:
            case HiveSqlParser.KW_NULL:
            case HiveSqlParser.KW_TIMESTAMP:
            case HiveSqlParser.KW_TIMESTAMPLOCALTZ:
            case HiveSqlParser.KW_TRUE:
            case HiveSqlParser.QUESTION:
            case HiveSqlParser.StringLiteral:
            case HiveSqlParser.IntegralLiteral:
            case HiveSqlParser.NumberLiteral:
            case HiveSqlParser.Number:
            case HiveSqlParser.Identifier:
            case HiveSqlParser.CharSetName:
                {
                this.state = 3140;
                this.constant();
                }
                break;
            case HiveSqlParser.LPAREN:
                {
                this.state = 3141;
                this.skewedColumnValuePair();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3144;
            this.match(HiveSqlParser.EQUAL);
            this.state = 3145;
            localContext._value = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixExecute(): AlterStatementSuffixExecuteContext {
        let localContext = new AlterStatementSuffixExecuteContext(this.context, this.state);
        this.enterRule(localContext, 430, HiveSqlParser.RULE_alterStatementSuffixExecute);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3147;
            this.match(HiveSqlParser.KW_EXECUTE);
            this.state = 3157;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ROLLBACK:
                {
                this.state = 3148;
                this.match(HiveSqlParser.KW_ROLLBACK);
                this.state = 3149;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3150;
                localContext._rollbackParam = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 426 || _la === 431)) {
                    localContext._rollbackParam = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
                {
                this.state = 3151;
                this.match(HiveSqlParser.KW_EXPIRE_SNAPSHOTS);
                this.state = 3152;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3153;
                localContext._expireParam = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
                {
                this.state = 3154;
                this.match(HiveSqlParser.KW_SET_CURRENT_SNAPSHOT);
                this.state = 3155;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3156;
                localContext._snapshotParam = this.match(HiveSqlParser.Number);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3159;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fileFormat(): FileFormatContext {
        let localContext = new FileFormatContext(this.context, this.state);
        this.enterRule(localContext, 432, HiveSqlParser.RULE_fileFormat);
        let _la: number;
        try {
            this.state = 3174;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 380, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3161;
                this.match(HiveSqlParser.KW_INPUTFORMAT);
                this.state = 3162;
                localContext._inFmt = this.match(HiveSqlParser.StringLiteral);
                this.state = 3163;
                this.match(HiveSqlParser.KW_OUTPUTFORMAT);
                this.state = 3164;
                localContext._outFmt = this.match(HiveSqlParser.StringLiteral);
                this.state = 3165;
                this.match(HiveSqlParser.KW_SERDE);
                this.state = 3166;
                localContext._serdeCls = this.match(HiveSqlParser.StringLiteral);
                this.state = 3171;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 159) {
                    {
                    this.state = 3167;
                    this.match(HiveSqlParser.KW_INPUTDRIVER);
                    this.state = 3168;
                    localContext._inDriver = this.match(HiveSqlParser.StringLiteral);
                    this.state = 3169;
                    this.match(HiveSqlParser.KW_OUTPUTDRIVER);
                    this.state = 3170;
                    localContext._outDriver = this.match(HiveSqlParser.StringLiteral);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3173;
                localContext._genericSpec = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likeTableOrFile(): LikeTableOrFileContext {
        let localContext = new LikeTableOrFileContext(this.context, this.state);
        this.enterRule(localContext, 434, HiveSqlParser.RULE_likeTableOrFile);
        try {
            this.state = 3185;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 381, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3176;
                this.match(HiveSqlParser.KW_LIKE);
                this.state = 3177;
                this.match(HiveSqlParser.KW_FILE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3178;
                this.match(HiveSqlParser.KW_LIKE);
                this.state = 3179;
                this.match(HiveSqlParser.KW_FILE);
                this.state = 3180;
                localContext._format = this.id_();
                this.state = 3181;
                localContext._uri = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3183;
                this.match(HiveSqlParser.KW_LIKE);
                this.state = 3184;
                localContext._likeName = this.tableName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableStatement(): CreateTableStatementContext {
        let localContext = new CreateTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 436, HiveSqlParser.RULE_createTableStatement);
        let _la: number;
        try {
            this.state = 3322;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 422, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3187;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 3189;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 333) {
                    {
                    this.state = 3188;
                    localContext._temp = this.match(HiveSqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 3192;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 345) {
                    {
                    this.state = 3191;
                    localContext._trans = this.match(HiveSqlParser.KW_TRANSACTIONAL);
                    }
                }

                this.state = 3195;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 123) {
                    {
                    this.state = 3194;
                    localContext._ext = this.match(HiveSqlParser.KW_EXTERNAL);
                    }
                }

                this.state = 3197;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 3199;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 3198;
                    this.ifNotExists();
                    }
                }

                this.state = 3201;
                localContext._name = this.tableNameCreate();
                this.state = 3258;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_LIKE:
                    {
                    this.state = 3202;
                    this.likeTableOrFile();
                    this.state = 3204;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 238) {
                        {
                        this.state = 3203;
                        this.createTablePartitionSpec();
                        }
                    }

                    this.state = 3207;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 291) {
                        {
                        this.state = 3206;
                        this.tableRowFormat();
                        }
                    }

                    this.state = 3210;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 321) {
                        {
                        this.state = 3209;
                        this.tableFileFormat();
                        }
                    }

                    this.state = 3213;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 189) {
                        {
                        this.state = 3212;
                        this.locationPath();
                        }
                    }

                    this.state = 3216;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 332) {
                        {
                        this.state = 3215;
                        this.tablePropertiesPrefixed();
                        }
                    }

                    this.state = 3219;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 183) {
                        {
                        this.state = 3218;
                        this.tableLifecycle();
                        }
                    }

                    }
                    break;
                case HiveSqlParser.EOF:
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ALTER:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_AS:
                case HiveSqlParser.KW_CLUSTERED:
                case HiveSqlParser.KW_COMMENT:
                case HiveSqlParser.KW_COMMIT:
                case HiveSqlParser.KW_CREATE:
                case HiveSqlParser.KW_DELETE:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DESCRIBE:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DROP:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_GRANT:
                case HiveSqlParser.KW_IMPORT:
                case HiveSqlParser.KW_INSERT:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LIFECYCLE:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCATION:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MERGE:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_PARTITIONED:
                case HiveSqlParser.KW_PREPARE:
                case HiveSqlParser.KW_REDUCE:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_REVOKE:
                case HiveSqlParser.KW_ROLLBACK:
                case HiveSqlParser.KW_ROW:
                case HiveSqlParser.KW_SELECT:
                case HiveSqlParser.KW_SET:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_SKEWED:
                case HiveSqlParser.KW_START:
                case HiveSqlParser.KW_STORED:
                case HiveSqlParser.KW_TBLPROPERTIES:
                case HiveSqlParser.KW_TRUNCATE:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UPDATE:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_VALUES:
                case HiveSqlParser.KW_WITH:
                case HiveSqlParser.SEMICOLON:
                case HiveSqlParser.LPAREN:
                    {
                    this.state = 3225;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 392, this.context) ) {
                    case 1:
                        {
                        this.state = 3221;
                        this.match(HiveSqlParser.LPAREN);
                        this.state = 3222;
                        this.columnNameTypeOrConstraintList();
                        this.state = 3223;
                        this.match(HiveSqlParser.RPAREN);
                        }
                        break;
                    }
                    this.state = 3228;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 47) {
                        {
                        this.state = 3227;
                        this.tableComment();
                        }
                    }

                    this.state = 3231;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 238) {
                        {
                        this.state = 3230;
                        this.createTablePartitionSpec();
                        }
                    }

                    this.state = 3234;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 42) {
                        {
                        this.state = 3233;
                        this.tableBuckets();
                        }
                    }

                    this.state = 3237;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 310) {
                        {
                        this.state = 3236;
                        this.tableSkewed();
                        }
                    }

                    this.state = 3240;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 291) {
                        {
                        this.state = 3239;
                        this.tableRowFormat();
                        }
                    }

                    this.state = 3243;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 321) {
                        {
                        this.state = 3242;
                        this.tableFileFormat();
                        }
                    }

                    this.state = 3246;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 189) {
                        {
                        this.state = 3245;
                        this.locationPath();
                        }
                    }

                    this.state = 3249;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 332) {
                        {
                        this.state = 3248;
                        this.tablePropertiesPrefixed();
                        }
                    }

                    this.state = 3252;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 183) {
                        {
                        this.state = 3251;
                        this.tableLifecycle();
                        }
                    }

                    this.state = 3256;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3254;
                        this.match(HiveSqlParser.KW_AS);
                        this.state = 3255;
                        this.selectStatementWithCTE();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3260;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 3261;
                localContext._mgd = this.match(HiveSqlParser.KW_MANAGED);
                this.state = 3262;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 3264;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 3263;
                    this.ifNotExists();
                    }
                }

                this.state = 3266;
                localContext._name = this.tableNameCreate();
                this.state = 3320;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_LIKE:
                    {
                    this.state = 3267;
                    this.likeTableOrFile();
                    this.state = 3269;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 291) {
                        {
                        this.state = 3268;
                        this.tableRowFormat();
                        }
                    }

                    this.state = 3272;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 321) {
                        {
                        this.state = 3271;
                        this.tableFileFormat();
                        }
                    }

                    this.state = 3275;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 189) {
                        {
                        this.state = 3274;
                        this.locationPath();
                        }
                    }

                    this.state = 3278;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 332) {
                        {
                        this.state = 3277;
                        this.tablePropertiesPrefixed();
                        }
                    }

                    this.state = 3281;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 183) {
                        {
                        this.state = 3280;
                        this.tableLifecycle();
                        }
                    }

                    }
                    break;
                case HiveSqlParser.EOF:
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ALTER:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_AS:
                case HiveSqlParser.KW_CLUSTERED:
                case HiveSqlParser.KW_COMMENT:
                case HiveSqlParser.KW_COMMIT:
                case HiveSqlParser.KW_CREATE:
                case HiveSqlParser.KW_DELETE:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DESCRIBE:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DROP:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_GRANT:
                case HiveSqlParser.KW_IMPORT:
                case HiveSqlParser.KW_INSERT:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LIFECYCLE:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCATION:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MERGE:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_PARTITIONED:
                case HiveSqlParser.KW_PREPARE:
                case HiveSqlParser.KW_REDUCE:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_REVOKE:
                case HiveSqlParser.KW_ROLLBACK:
                case HiveSqlParser.KW_ROW:
                case HiveSqlParser.KW_SELECT:
                case HiveSqlParser.KW_SET:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_SKEWED:
                case HiveSqlParser.KW_START:
                case HiveSqlParser.KW_STORED:
                case HiveSqlParser.KW_TBLPROPERTIES:
                case HiveSqlParser.KW_TRUNCATE:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UPDATE:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_VALUES:
                case HiveSqlParser.KW_WITH:
                case HiveSqlParser.SEMICOLON:
                case HiveSqlParser.LPAREN:
                    {
                    this.state = 3287;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 410, this.context) ) {
                    case 1:
                        {
                        this.state = 3283;
                        this.match(HiveSqlParser.LPAREN);
                        this.state = 3284;
                        this.columnNameTypeOrConstraintList();
                        this.state = 3285;
                        this.match(HiveSqlParser.RPAREN);
                        }
                        break;
                    }
                    this.state = 3290;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 47) {
                        {
                        this.state = 3289;
                        this.tableComment();
                        }
                    }

                    this.state = 3293;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 238) {
                        {
                        this.state = 3292;
                        this.createTablePartitionSpec();
                        }
                    }

                    this.state = 3296;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 42) {
                        {
                        this.state = 3295;
                        this.tableBuckets();
                        }
                    }

                    this.state = 3299;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 310) {
                        {
                        this.state = 3298;
                        this.tableSkewed();
                        }
                    }

                    this.state = 3302;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 291) {
                        {
                        this.state = 3301;
                        this.tableRowFormat();
                        }
                    }

                    this.state = 3305;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 321) {
                        {
                        this.state = 3304;
                        this.tableFileFormat();
                        }
                    }

                    this.state = 3308;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 189) {
                        {
                        this.state = 3307;
                        this.locationPath();
                        }
                    }

                    this.state = 3311;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 332) {
                        {
                        this.state = 3310;
                        this.tablePropertiesPrefixed();
                        }
                    }

                    this.state = 3314;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 183) {
                        {
                        this.state = 3313;
                        this.tableLifecycle();
                        }
                    }

                    this.state = 3318;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3316;
                        this.match(HiveSqlParser.KW_AS);
                        this.state = 3317;
                        this.selectStatementWithCTE();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDataConnectorStatement(): CreateDataConnectorStatementContext {
        let localContext = new CreateDataConnectorStatementContext(this.context, this.state);
        this.enterRule(localContext, 438, HiveSqlParser.RULE_createDataConnectorStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3324;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 3325;
            this.match(HiveSqlParser.KW_DATACONNECTOR);
            this.state = 3327;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 3326;
                this.ifNotExists();
                }
            }

            this.state = 3329;
            localContext._name = this.id_();
            this.state = 3332;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 352) {
                {
                this.state = 3330;
                this.match(HiveSqlParser.KW_TYPE);
                this.state = 3331;
                localContext._dcType = this.match(HiveSqlParser.StringLiteral);
                }
            }

            this.state = 3336;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 367) {
                {
                this.state = 3334;
                this.match(HiveSqlParser.KW_URL);
                this.state = 3335;
                localContext._url = this.match(HiveSqlParser.StringLiteral);
                }
            }

            this.state = 3340;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 3338;
                this.match(HiveSqlParser.KW_COMMENT);
                this.state = 3339;
                localContext._comment = this.match(HiveSqlParser.StringLiteral);
                }
            }

            this.state = 3345;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 427, this.context) ) {
            case 1:
                {
                this.state = 3342;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 3343;
                this.match(HiveSqlParser.KW_DCPROPERTIES);
                this.state = 3344;
                localContext._dcprops = this.keyValueProperties();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropDataConnectorStatement(): DropDataConnectorStatementContext {
        let localContext = new DropDataConnectorStatementContext(this.context, this.state);
        this.enterRule(localContext, 440, HiveSqlParser.RULE_dropDataConnectorStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3347;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 3348;
            this.match(HiveSqlParser.KW_DATACONNECTOR);
            this.state = 3350;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 3349;
                this.ifExists();
                }
            }

            this.state = 3352;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAllColumns(): TableAllColumnsContext {
        let localContext = new TableAllColumnsContext(this.context, this.state);
        this.enterRule(localContext, 442, HiveSqlParser.RULE_tableAllColumns);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3359;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394 || _la === 432) {
                {
                {
                this.state = 3354;
                this.id_();
                this.state = 3355;
                this.match(HiveSqlParser.DOT);
                }
                }
                this.state = 3361;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3362;
            this.match(HiveSqlParser.STAR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionList(): ExpressionListContext {
        let localContext = new ExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 444, HiveSqlParser.RULE_expressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3364;
            this.expression();
            this.state = 3369;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3365;
                this.match(HiveSqlParser.COMMA);
                this.state = 3366;
                this.expression();
                }
                }
                this.state = 3371;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aliasList(): AliasListContext {
        let localContext = new AliasListContext(this.context, this.state);
        this.enterRule(localContext, 446, HiveSqlParser.RULE_aliasList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3372;
            this.id_();
            this.state = 3377;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3373;
                this.match(HiveSqlParser.COMMA);
                this.state = 3374;
                this.id_();
                }
                }
                this.state = 3379;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 448, HiveSqlParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3380;
            this.match(HiveSqlParser.KW_FROM);
            this.state = 3381;
            this.fromSource();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromSource(): FromSourceContext {
        let localContext = new FromSourceContext(this.context, this.state);
        this.enterRule(localContext, 450, HiveSqlParser.RULE_fromSource);
        let _la: number;
        try {
            this.state = 3392;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_UNIQUEJOIN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3383;
                this.match(HiveSqlParser.KW_UNIQUEJOIN);
                this.state = 3384;
                this.uniqueJoinSource();
                this.state = 3387;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3385;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3386;
                    this.uniqueJoinSource();
                    }
                    }
                    this.state = 3389;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 397);
                }
                break;
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLE:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.LPAREN:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3391;
                this.joinSource();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomjoinSource(): AtomjoinSourceContext {
        let localContext = new AtomjoinSourceContext(this.context, this.state);
        this.enterRule(localContext, 452, HiveSqlParser.RULE_atomjoinSource);
        try {
            let alternative: number;
            this.state = 3426;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 438, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3394;
                this.tableSource();
                this.state = 3398;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 434, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3395;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 3400;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 434, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3401;
                this.virtualTableSource();
                this.state = 3405;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 435, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3402;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 3407;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 435, this.context);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3408;
                this.subQuerySource();
                this.state = 3412;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 436, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3409;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 3414;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 436, this.context);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3415;
                this.partitionedTableFunction();
                this.state = 3419;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 437, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3416;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 3421;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 437, this.context);
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3422;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3423;
                this.joinSource();
                this.state = 3424;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinSource(): JoinSourceContext {
        let localContext = new JoinSourceContext(this.context, this.state);
        this.enterRule(localContext, 454, HiveSqlParser.RULE_joinSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3428;
            this.atomjoinSource();
            this.state = 3439;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 60 || ((((_la - 140)) & ~0x1F) === 0 && ((1 << (_la - 140)) & 2147614721) !== 0) || _la === 180 || _la === 285 || _la === 397) {
                {
                {
                this.state = 3429;
                this.joinToken();
                this.state = 3430;
                this.joinSourcePart();
                this.state = 3435;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_ON:
                    {
                    this.state = 3431;
                    this.match(HiveSqlParser.KW_ON);
                    this.state = 3432;
                    this.expression();
                    }
                    break;
                case HiveSqlParser.KW_USING:
                    {
                    this.state = 3433;
                    this.match(HiveSqlParser.KW_USING);
                    this.state = 3434;
                    this.columnParenthesesList();
                    }
                    break;
                case HiveSqlParser.EOF:
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ALTER:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_CLUSTER:
                case HiveSqlParser.KW_COMMIT:
                case HiveSqlParser.KW_CREATE:
                case HiveSqlParser.KW_CROSS:
                case HiveSqlParser.KW_DELETE:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DESCRIBE:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DISTRIBUTE:
                case HiveSqlParser.KW_DROP:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_EXCEPT:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_FULL:
                case HiveSqlParser.KW_GRANT:
                case HiveSqlParser.KW_GROUP:
                case HiveSqlParser.KW_HAVING:
                case HiveSqlParser.KW_IMPORT:
                case HiveSqlParser.KW_INNER:
                case HiveSqlParser.KW_INSERT:
                case HiveSqlParser.KW_INTERSECT:
                case HiveSqlParser.KW_JOIN:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LEFT:
                case HiveSqlParser.KW_LIMIT:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MERGE:
                case HiveSqlParser.KW_MINUS:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_ORDER:
                case HiveSqlParser.KW_PREPARE:
                case HiveSqlParser.KW_QUALIFY:
                case HiveSqlParser.KW_REDUCE:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_REVOKE:
                case HiveSqlParser.KW_RIGHT:
                case HiveSqlParser.KW_ROLLBACK:
                case HiveSqlParser.KW_SELECT:
                case HiveSqlParser.KW_SET:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_SORT:
                case HiveSqlParser.KW_START:
                case HiveSqlParser.KW_TRUNCATE:
                case HiveSqlParser.KW_UNION:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UPDATE:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_VALUES:
                case HiveSqlParser.KW_WHERE:
                case HiveSqlParser.KW_WINDOW:
                case HiveSqlParser.KW_WITH:
                case HiveSqlParser.COMMA:
                case HiveSqlParser.SEMICOLON:
                case HiveSqlParser.LPAREN:
                case HiveSqlParser.RPAREN:
                    break;
                default:
                    break;
                }
                }
                }
                this.state = 3441;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinSourcePart(): JoinSourcePartContext {
        let localContext = new JoinSourcePartContext(this.context, this.state);
        this.enterRule(localContext, 456, HiveSqlParser.RULE_joinSourcePart);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3446;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 441, this.context) ) {
            case 1:
                {
                this.state = 3442;
                this.tableSource();
                }
                break;
            case 2:
                {
                this.state = 3443;
                this.virtualTableSource();
                }
                break;
            case 3:
                {
                this.state = 3444;
                this.subQuerySource();
                }
                break;
            case 4:
                {
                this.state = 3445;
                this.partitionedTableFunction();
                }
                break;
            }
            this.state = 3451;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 442, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3448;
                    this.lateralView();
                    }
                    }
                }
                this.state = 3453;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 442, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uniqueJoinSource(): UniqueJoinSourceContext {
        let localContext = new UniqueJoinSourceContext(this.context, this.state);
        this.enterRule(localContext, 458, HiveSqlParser.RULE_uniqueJoinSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3455;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 250) {
                {
                this.state = 3454;
                this.match(HiveSqlParser.KW_PRESERVE);
                }
            }

            this.state = 3457;
            localContext._tabname = this.tableOrView();
            this.state = 3459;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 331) {
                {
                this.state = 3458;
                localContext._ts = this.tableSample();
                }
            }

            this.state = 3465;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252585854) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394 || _la === 432) {
                {
                this.state = 3462;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3461;
                    this.match(HiveSqlParser.KW_AS);
                    }
                }

                this.state = 3464;
                localContext._alias = this.id_();
                }
            }

            this.state = 3467;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3468;
            this.expressionList();
            this.state = 3469;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinToken(): JoinTokenContext {
        let localContext = new JoinTokenContext(this.context, this.state);
        this.enterRule(localContext, 460, HiveSqlParser.RULE_joinToken);
        let _la: number;
        try {
            this.state = 3485;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.COMMA:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3471;
                this.match(HiveSqlParser.COMMA);
                }
                break;
            case HiveSqlParser.KW_CROSS:
            case HiveSqlParser.KW_FULL:
            case HiveSqlParser.KW_INNER:
            case HiveSqlParser.KW_JOIN:
            case HiveSqlParser.KW_LEFT:
            case HiveSqlParser.KW_RIGHT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3482;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_INNER:
                    {
                    this.state = 3472;
                    this.match(HiveSqlParser.KW_INNER);
                    }
                    break;
                case HiveSqlParser.KW_CROSS:
                    {
                    this.state = 3473;
                    this.match(HiveSqlParser.KW_CROSS);
                    }
                    break;
                case HiveSqlParser.KW_FULL:
                case HiveSqlParser.KW_RIGHT:
                    {
                    this.state = 3474;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 140 || _la === 285)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3476;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 231) {
                        {
                        this.state = 3475;
                        this.match(HiveSqlParser.KW_OUTER);
                        }
                    }

                    }
                    break;
                case HiveSqlParser.KW_LEFT:
                    {
                    this.state = 3478;
                    this.match(HiveSqlParser.KW_LEFT);
                    this.state = 3480;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 12 || _la === 231 || _la === 300) {
                        {
                        this.state = 3479;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 12 || _la === 231 || _la === 300)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                case HiveSqlParser.KW_JOIN:
                    break;
                default:
                    break;
                }
                this.state = 3484;
                this.match(HiveSqlParser.KW_JOIN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lateralView(): LateralViewContext {
        let localContext = new LateralViewContext(this.context, this.state);
        this.enterRule(localContext, 462, HiveSqlParser.RULE_lateralView);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3544;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 460, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3487;
                this.match(HiveSqlParser.KW_LATERAL);
                this.state = 3488;
                this.match(HiveSqlParser.KW_VIEW);
                this.state = 3489;
                this.match(HiveSqlParser.KW_OUTER);
                this.state = 3490;
                this.function_();
                this.state = 3491;
                localContext._alias = this.tableAlias();
                this.state = 3501;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3492;
                    this.match(HiveSqlParser.KW_AS);
                    this.state = 3493;
                    this.id_();
                    this.state = 3498;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 451, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 3494;
                            this.match(HiveSqlParser.COMMA);
                            this.state = 3495;
                            this.id_();
                            }
                            }
                        }
                        this.state = 3500;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 451, this.context);
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3504;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 397) {
                    {
                    this.state = 3503;
                    this.match(HiveSqlParser.COMMA);
                    }
                }

                this.state = 3506;
                this.match(HiveSqlParser.KW_LATERAL);
                this.state = 3542;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_VIEW:
                    {
                    this.state = 3507;
                    this.match(HiveSqlParser.KW_VIEW);
                    this.state = 3508;
                    this.function_();
                    this.state = 3509;
                    localContext._alias = this.tableAlias();
                    this.state = 3519;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3510;
                        this.match(HiveSqlParser.KW_AS);
                        this.state = 3511;
                        this.id_();
                        this.state = 3516;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 454, this.context);
                        while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                            if (alternative === 1) {
                                {
                                {
                                this.state = 3512;
                                this.match(HiveSqlParser.COMMA);
                                this.state = 3513;
                                this.id_();
                                }
                                }
                            }
                            this.state = 3518;
                            this.errorHandler.sync(this);
                            alternative = this.interpreter.adaptivePredict(this.tokenStream, 454, this.context);
                        }
                        }
                    }

                    }
                    break;
                case HiveSqlParser.KW_TABLE:
                    {
                    this.state = 3521;
                    this.match(HiveSqlParser.KW_TABLE);
                    this.state = 3522;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 3523;
                    this.valuesClause();
                    this.state = 3524;
                    this.match(HiveSqlParser.RPAREN);
                    this.state = 3526;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3525;
                        this.match(HiveSqlParser.KW_AS);
                        }
                    }

                    this.state = 3528;
                    localContext._alias = this.tableAlias();
                    this.state = 3540;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 458, this.context) ) {
                    case 1:
                        {
                        this.state = 3529;
                        this.match(HiveSqlParser.LPAREN);
                        this.state = 3530;
                        this.id_();
                        this.state = 3535;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 397) {
                            {
                            {
                            this.state = 3531;
                            this.match(HiveSqlParser.COMMA);
                            this.state = 3532;
                            this.id_();
                            }
                            }
                            this.state = 3537;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        this.state = 3538;
                        this.match(HiveSqlParser.RPAREN);
                        }
                        break;
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAlias(): TableAliasContext {
        let localContext = new TableAliasContext(this.context, this.state);
        this.enterRule(localContext, 464, HiveSqlParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3546;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSample(): TableSampleContext {
        let localContext = new TableSampleContext(this.context, this.state);
        this.enterRule(localContext, 466, HiveSqlParser.RULE_tableSample);
        let _la: number;
        try {
            this.state = 3575;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 464, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3548;
                this.match(HiveSqlParser.KW_TABLESAMPLE);
                this.state = 3549;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3550;
                this.match(HiveSqlParser.KW_BUCKET);
                this.state = 3551;
                localContext._numerator = this.match(HiveSqlParser.Number);
                this.state = 3552;
                this.match(HiveSqlParser.KW_OUT);
                this.state = 3553;
                this.match(HiveSqlParser.KW_OF);
                this.state = 3554;
                localContext._denominator = this.match(HiveSqlParser.Number);
                this.state = 3564;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 224) {
                    {
                    this.state = 3555;
                    this.match(HiveSqlParser.KW_ON);
                    this.state = 3556;
                    localContext._expression = this.expression();
                    localContext._expr.push(localContext._expression);
                    this.state = 3561;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 397) {
                        {
                        {
                        this.state = 3557;
                        this.match(HiveSqlParser.COMMA);
                        this.state = 3558;
                        localContext._expression = this.expression();
                        localContext._expr.push(localContext._expression);
                        }
                        }
                        this.state = 3563;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 3566;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3567;
                this.match(HiveSqlParser.KW_TABLESAMPLE);
                this.state = 3568;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3572;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.Number:
                    {
                    this.state = 3569;
                    this.match(HiveSqlParser.Number);
                    this.state = 3570;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 241 || _la === 292)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case HiveSqlParser.ByteLengthLiteral:
                    {
                    this.state = 3571;
                    this.match(HiveSqlParser.ByteLengthLiteral);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3574;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSource(): TableSourceContext {
        let localContext = new TableSourceContext(this.context, this.state);
        this.enterRule(localContext, 468, HiveSqlParser.RULE_tableSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3577;
            localContext._tabname = this.tableOrView();
            this.state = 3579;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 465, this.context) ) {
            case 1:
                {
                this.state = 3578;
                localContext._props = this.tableProperties();
                }
                break;
            }
            this.state = 3582;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 331) {
                {
                this.state = 3581;
                localContext._ts = this.tableSample();
                }
            }

            this.state = 3585;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 134) {
                {
                this.state = 3584;
                localContext._asOf = this.asOfClause();
                }
            }

            this.state = 3591;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 469, this.context) ) {
            case 1:
                {
                this.state = 3588;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3587;
                    this.match(HiveSqlParser.KW_AS);
                    }
                }

                this.state = 3590;
                localContext._alias = this.id_();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public asOfClause(): AsOfClauseContext {
        let localContext = new AsOfClauseContext(this.context, this.state);
        this.enterRule(localContext, 470, HiveSqlParser.RULE_asOfClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3593;
            this.match(HiveSqlParser.KW_FOR);
            this.state = 3603;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_SYSTEM_TIME:
                {
                this.state = 3594;
                this.match(HiveSqlParser.KW_SYSTEM_TIME);
                this.state = 3595;
                this.match(HiveSqlParser.KW_AS);
                this.state = 3596;
                this.match(HiveSqlParser.KW_OF);
                this.state = 3597;
                localContext._asOfTime = this.expression();
                }
                break;
            case HiveSqlParser.KW_FOR:
                {
                this.state = 3598;
                this.match(HiveSqlParser.KW_FOR);
                this.state = 3599;
                this.match(HiveSqlParser.KW_SYSTEM_VERSION);
                this.state = 3600;
                this.match(HiveSqlParser.KW_AS);
                this.state = 3601;
                this.match(HiveSqlParser.KW_OF);
                this.state = 3602;
                localContext._asOfVersion = this.match(HiveSqlParser.Number);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbSchemaName(): DbSchemaNameContext {
        let localContext = new DbSchemaNameContext(this.context, this.state);
        this.enterRule(localContext, 472, HiveSqlParser.RULE_dbSchemaName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3605;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbSchemaNameCreate(): DbSchemaNameCreateContext {
        let localContext = new DbSchemaNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 474, HiveSqlParser.RULE_dbSchemaNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3607;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableOrView(): TableOrViewContext {
        let localContext = new TableOrViewContext(this.context, this.state);
        this.enterRule(localContext, 476, HiveSqlParser.RULE_tableOrView);
        try {
            this.state = 3611;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 471, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3609;
                this.tableName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3610;
                this.viewName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableName(): TableNameContext {
        let localContext = new TableNameContext(this.context, this.state);
        this.enterRule(localContext, 478, HiveSqlParser.RULE_tableName);
        try {
            this.state = 3621;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 473, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3613;
                localContext._db = this.id_();
                this.state = 3614;
                this.match(HiveSqlParser.DOT);
                this.state = 3615;
                localContext._tab = this.id_();
                this.state = 3618;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 472, this.context) ) {
                case 1:
                    {
                    this.state = 3616;
                    this.match(HiveSqlParser.DOT);
                    this.state = 3617;
                    localContext._meta = this.id_();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3620;
                localContext._tab = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableNameCreate(): TableNameCreateContext {
        let localContext = new TableNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 480, HiveSqlParser.RULE_tableNameCreate);
        let _la: number;
        try {
            this.state = 3631;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 475, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3623;
                localContext._db = this.id_();
                this.state = 3624;
                this.match(HiveSqlParser.DOT);
                this.state = 3625;
                localContext._tab = this.id_();
                this.state = 3628;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 395) {
                    {
                    this.state = 3626;
                    this.match(HiveSqlParser.DOT);
                    this.state = 3627;
                    localContext._meta = this.id_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3630;
                localContext._tab = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewName(): ViewNameContext {
        let localContext = new ViewNameContext(this.context, this.state);
        this.enterRule(localContext, 482, HiveSqlParser.RULE_viewName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3636;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 476, this.context) ) {
            case 1:
                {
                this.state = 3633;
                localContext._db = this.id_();
                this.state = 3634;
                this.match(HiveSqlParser.DOT);
                }
                break;
            }
            this.state = 3638;
            localContext._view = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewNameCreate(): ViewNameCreateContext {
        let localContext = new ViewNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 484, HiveSqlParser.RULE_viewNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3643;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 477, this.context) ) {
            case 1:
                {
                this.state = 3640;
                localContext._db = this.id_();
                this.state = 3641;
                this.match(HiveSqlParser.DOT);
                }
                break;
            }
            this.state = 3645;
            localContext._view = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subQuerySource(): SubQuerySourceContext {
        let localContext = new SubQuerySourceContext(this.context, this.state);
        this.enterRule(localContext, 486, HiveSqlParser.RULE_subQuerySource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3647;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3648;
            this.queryStatementExpression();
            this.state = 3649;
            this.match(HiveSqlParser.RPAREN);
            this.state = 3651;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 3650;
                this.match(HiveSqlParser.KW_AS);
                }
            }

            this.state = 3653;
            localContext._alias = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitioningSpec(): PartitioningSpecContext {
        let localContext = new PartitioningSpecContext(this.context, this.state);
        this.enterRule(localContext, 488, HiveSqlParser.RULE_partitioningSpec);
        let _la: number;
        try {
            this.state = 3668;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_PARTITION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3655;
                this.match(HiveSqlParser.KW_PARTITION);
                this.state = 3656;
                this.match(HiveSqlParser.KW_BY);
                this.state = 3657;
                this.expressions();
                this.state = 3659;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 3658;
                    this.orderByClause();
                    }
                }

                }
                break;
            case HiveSqlParser.KW_ORDER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3661;
                this.orderByClause();
                }
                break;
            case HiveSqlParser.KW_DISTRIBUTE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3662;
                this.distributeByClause();
                this.state = 3664;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 314) {
                    {
                    this.state = 3663;
                    this.sortByClause();
                    }
                }

                }
                break;
            case HiveSqlParser.KW_SORT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3666;
                this.sortByClause();
                }
                break;
            case HiveSqlParser.KW_CLUSTER:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3667;
                this.clusterByClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionTableFunctionSource(): PartitionTableFunctionSourceContext {
        let localContext = new PartitionTableFunctionSourceContext(this.context, this.state);
        this.enterRule(localContext, 490, HiveSqlParser.RULE_partitionTableFunctionSource);
        try {
            this.state = 3673;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 482, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3670;
                this.subQuerySource();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3671;
                this.tableSource();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3672;
                this.partitionedTableFunction();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionedTableFunction(): PartitionedTableFunctionContext {
        let localContext = new PartitionedTableFunctionContext(this.context, this.state);
        this.enterRule(localContext, 492, HiveSqlParser.RULE_partitionedTableFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3675;
            this.atomPartitionedTableFunction();
            this.state = 3677;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 483, this.context) ) {
            case 1:
                {
                this.state = 3676;
                localContext._alias = this.id_();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomPartitionedTableFunction(): AtomPartitionedTableFunctionContext {
        let localContext = new AtomPartitionedTableFunctionContext(this.context, this.state);
        this.enterRule(localContext, 494, HiveSqlParser.RULE_atomPartitionedTableFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3679;
            localContext._n = this.id_();
            this.state = 3680;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3681;
            this.match(HiveSqlParser.KW_ON);
            this.state = 3682;
            localContext._ptfsrc = this.partitionTableFunctionSource();
            this.state = 3684;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 41 || _la === 97 || _la === 229 || _la === 237 || _la === 314) {
                {
                this.state = 3683;
                localContext._spec = this.partitioningSpec();
                }
            }

            this.state = 3701;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 432) {
                {
                this.state = 3686;
                this.match(HiveSqlParser.Identifier);
                this.state = 3687;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3688;
                this.expression();
                this.state = 3689;
                this.match(HiveSqlParser.RPAREN);
                this.state = 3698;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 3690;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3691;
                    this.match(HiveSqlParser.Identifier);
                    this.state = 3692;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 3693;
                    this.expression();
                    this.state = 3694;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    }
                    this.state = 3700;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3703;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 496, HiveSqlParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3705;
            this.match(HiveSqlParser.KW_WHERE);
            this.state = 3706;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesClause(): ValuesClauseContext {
        let localContext = new ValuesClauseContext(this.context, this.state);
        this.enterRule(localContext, 498, HiveSqlParser.RULE_valuesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3708;
            this.match(HiveSqlParser.KW_VALUES);
            this.state = 3727;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 489, this.context) ) {
            case 1:
                {
                this.state = 3709;
                this.expressionsInParenthesis();
                this.state = 3714;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 3710;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3711;
                    this.expressionsInParenthesis();
                    }
                    }
                    this.state = 3716;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                {
                this.state = 3717;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3718;
                this.firstExpressionsWithAlias();
                this.state = 3719;
                this.match(HiveSqlParser.RPAREN);
                this.state = 3724;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 3720;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3721;
                    this.expressionsInParenthesis();
                    }
                    }
                    this.state = 3726;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomValuesClause(): AtomValuesClauseContext {
        let localContext = new AtomValuesClauseContext(this.context, this.state);
        this.enterRule(localContext, 500, HiveSqlParser.RULE_atomValuesClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3729;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 3730;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3731;
            this.valuesClause();
            this.state = 3732;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public virtualTableSource(): VirtualTableSourceContext {
        let localContext = new VirtualTableSourceContext(this.context, this.state);
        this.enterRule(localContext, 502, HiveSqlParser.RULE_virtualTableSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3734;
            this.atomValuesClause();
            this.state = 3736;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 3735;
                this.match(HiveSqlParser.KW_AS);
                }
            }

            this.state = 3738;
            localContext._alias = this.tableAlias();
            this.state = 3748;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399) {
                {
                this.state = 3739;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3740;
                this.id_();
                this.state = 3745;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 3741;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3742;
                    this.id_();
                    }
                    }
                    this.state = 3747;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3750;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectClause(): SelectClauseContext {
        let localContext = new SelectClauseContext(this.context, this.state);
        this.enterRule(localContext, 504, HiveSqlParser.RULE_selectClause);
        let _la: number;
        try {
            this.state = 3765;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3752;
                this.match(HiveSqlParser.KW_SELECT);
                this.state = 3754;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 493, this.context) ) {
                case 1:
                    {
                    this.state = 3753;
                    this.match(HiveSqlParser.QUERY_HINT);
                    }
                    break;
                }
                this.state = 3762;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 495, this.context) ) {
                case 1:
                    {
                    this.state = 3757;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 494, this.context) ) {
                    case 1:
                        {
                        this.state = 3756;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 7 || _la === 96)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                    }
                    this.state = 3759;
                    this.selectList();
                    }
                    break;
                case 2:
                    {
                    this.state = 3760;
                    this.match(HiveSqlParser.KW_TRANSFORM);
                    this.state = 3761;
                    this.selectTrfmClause();
                    }
                    break;
                }
                }
                break;
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_REDUCE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3764;
                this.trfmClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectTrfmClause(): SelectTrfmClauseContext {
        let localContext = new SelectTrfmClauseContext(this.context, this.state);
        this.enterRule(localContext, 506, HiveSqlParser.RULE_selectTrfmClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3767;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3768;
            this.selectExpressionList();
            this.state = 3769;
            this.match(HiveSqlParser.RPAREN);
            this.state = 3770;
            this.rowFormat();
            this.state = 3771;
            this.recordWriter();
            this.state = 3772;
            this.match(HiveSqlParser.KW_USING);
            this.state = 3773;
            this.match(HiveSqlParser.StringLiteral);
            this.state = 3786;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 3774;
                this.match(HiveSqlParser.KW_AS);
                this.state = 3784;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 498, this.context) ) {
                case 1:
                    {
                    this.state = 3775;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 3778;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 497, this.context) ) {
                    case 1:
                        {
                        this.state = 3776;
                        this.aliasList();
                        }
                        break;
                    case 2:
                        {
                        this.state = 3777;
                        this.columnNameTypeList();
                        }
                        break;
                    }
                    this.state = 3780;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 3782;
                    this.aliasList();
                    }
                    break;
                case 3:
                    {
                    this.state = 3783;
                    this.columnNameTypeList();
                    }
                    break;
                }
                }
            }

            this.state = 3788;
            this.rowFormat();
            this.state = 3789;
            this.recordReader();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectList(): SelectListContext {
        let localContext = new SelectListContext(this.context, this.state);
        this.enterRule(localContext, 508, HiveSqlParser.RULE_selectList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3791;
            this.selectItem();
            this.state = 3796;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 500, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3792;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3793;
                    this.selectItem();
                    }
                    }
                }
                this.state = 3798;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 500, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItem(): SelectItemContext {
        let localContext = new SelectItemContext(this.context, this.state);
        this.enterRule(localContext, 510, HiveSqlParser.RULE_selectItem);
        let _la: number;
        try {
            this.state = 3822;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 505, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3799;
                this.tableAllColumns();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 3802;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 501, this.context) ) {
                case 1:
                    {
                    this.state = 3800;
                    this.selectLiteralColumnName();
                    }
                    break;
                case 2:
                    {
                    this.state = 3801;
                    this.selectExpressionColumnName();
                    }
                    break;
                }
                this.state = 3820;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 504, this.context) ) {
                case 1:
                    {
                    this.state = 3805;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3804;
                        this.match(HiveSqlParser.KW_AS);
                        }
                    }

                    this.state = 3807;
                    localContext._alias = this.id_();
                    }
                    break;
                case 2:
                    {
                    this.state = 3808;
                    this.match(HiveSqlParser.KW_AS);
                    this.state = 3809;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 3810;
                    localContext._alias = this.id_();
                    this.state = 3815;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 397) {
                        {
                        {
                        this.state = 3811;
                        this.match(HiveSqlParser.COMMA);
                        this.state = 3812;
                        localContext._alias = this.id_();
                        }
                        }
                        this.state = 3817;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3818;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                }
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectLiteralColumnName(): SelectLiteralColumnNameContext {
        let localContext = new SelectLiteralColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 512, HiveSqlParser.RULE_selectLiteralColumnName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3824;
            this.columnName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectExpressionColumnName(): SelectExpressionColumnNameContext {
        let localContext = new SelectExpressionColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 514, HiveSqlParser.RULE_selectExpressionColumnName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3826;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trfmClause(): TrfmClauseContext {
        let localContext = new TrfmClauseContext(this.context, this.state);
        this.enterRule(localContext, 516, HiveSqlParser.RULE_trfmClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3828;
            _la = this.tokenStream.LA(1);
            if(!(_la === 198 || _la === 268)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3829;
            this.selectExpressionList();
            this.state = 3830;
            this.rowFormat();
            this.state = 3831;
            this.recordWriter();
            this.state = 3832;
            this.match(HiveSqlParser.KW_USING);
            this.state = 3833;
            this.match(HiveSqlParser.StringLiteral);
            this.state = 3846;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 3834;
                this.match(HiveSqlParser.KW_AS);
                this.state = 3844;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 507, this.context) ) {
                case 1:
                    {
                    this.state = 3835;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 3838;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 506, this.context) ) {
                    case 1:
                        {
                        this.state = 3836;
                        this.aliasList();
                        }
                        break;
                    case 2:
                        {
                        this.state = 3837;
                        this.columnNameTypeList();
                        }
                        break;
                    }
                    this.state = 3840;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 3842;
                    this.aliasList();
                    }
                    break;
                case 3:
                    {
                    this.state = 3843;
                    this.columnNameTypeList();
                    }
                    break;
                }
                }
            }

            this.state = 3848;
            this.rowFormat();
            this.state = 3849;
            this.recordReader();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectExpression(): SelectExpressionContext {
        let localContext = new SelectExpressionContext(this.context, this.state);
        this.enterRule(localContext, 518, HiveSqlParser.RULE_selectExpression);
        try {
            this.state = 3853;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 509, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3851;
                this.tableAllColumns();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3852;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectExpressionList(): SelectExpressionListContext {
        let localContext = new SelectExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 520, HiveSqlParser.RULE_selectExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3855;
            this.selectExpression();
            this.state = 3860;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3856;
                this.match(HiveSqlParser.COMMA);
                this.state = 3857;
                this.selectExpression();
                }
                }
                this.state = 3862;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_clause(): Window_clauseContext {
        let localContext = new Window_clauseContext(this.context, this.state);
        this.enterRule(localContext, 522, HiveSqlParser.RULE_window_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3863;
            this.match(HiveSqlParser.KW_WINDOW);
            this.state = 3864;
            this.id_();
            this.state = 3865;
            this.match(HiveSqlParser.KW_AS);
            this.state = 3866;
            this.window_specification();
            this.state = 3874;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3867;
                this.match(HiveSqlParser.COMMA);
                this.state = 3868;
                this.id_();
                this.state = 3869;
                this.match(HiveSqlParser.KW_AS);
                this.state = 3870;
                this.window_specification();
                }
                }
                this.state = 3876;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_specification(): Window_specificationContext {
        let localContext = new Window_specificationContext(this.context, this.state);
        this.enterRule(localContext, 524, HiveSqlParser.RULE_window_specification);
        let _la: number;
        try {
            this.state = 3889;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3877;
                this.id_();
                }
                break;
            case HiveSqlParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3878;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3880;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 512, this.context) ) {
                case 1:
                    {
                    this.state = 3879;
                    this.id_();
                    }
                    break;
                }
                this.state = 3883;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 41 || _la === 97 || _la === 229 || _la === 237 || _la === 314) {
                    {
                    this.state = 3882;
                    this.partitioningSpec();
                    }
                }

                this.state = 3886;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 260 || _la === 292) {
                    {
                    this.state = 3885;
                    this.window_frame();
                    }
                }

                this.state = 3888;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame(): Window_frameContext {
        let localContext = new Window_frameContext(this.context, this.state);
        this.enterRule(localContext, 526, HiveSqlParser.RULE_window_frame);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3891;
            _la = this.tokenStream.LA(1);
            if(!(_la === 260 || _la === 292)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3905;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_CURRENT:
            case HiveSqlParser.KW_UNBOUNDED:
            case HiveSqlParser.Number:
                {
                this.state = 3898;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_UNBOUNDED:
                    {
                    {
                    this.state = 3892;
                    this.match(HiveSqlParser.KW_UNBOUNDED);
                    this.state = 3893;
                    this.match(HiveSqlParser.KW_PRECEDING);
                    }
                    }
                    break;
                case HiveSqlParser.KW_CURRENT:
                    {
                    {
                    this.state = 3894;
                    this.match(HiveSqlParser.KW_CURRENT);
                    this.state = 3895;
                    this.match(HiveSqlParser.KW_ROW);
                    }
                    }
                    break;
                case HiveSqlParser.Number:
                    {
                    {
                    this.state = 3896;
                    this.match(HiveSqlParser.Number);
                    this.state = 3897;
                    this.match(HiveSqlParser.KW_PRECEDING);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case HiveSqlParser.KW_BETWEEN:
                {
                this.state = 3900;
                this.match(HiveSqlParser.KW_BETWEEN);
                this.state = 3901;
                this.window_frame_boundary();
                this.state = 3902;
                this.match(HiveSqlParser.KW_AND);
                this.state = 3903;
                this.window_frame_boundary();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_boundary(): Window_frame_boundaryContext {
        let localContext = new Window_frame_boundaryContext(this.context, this.state);
        this.enterRule(localContext, 528, HiveSqlParser.RULE_window_frame_boundary);
        let _la: number;
        try {
            this.state = 3911;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_UNBOUNDED:
            case HiveSqlParser.Number:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3907;
                _la = this.tokenStream.LA(1);
                if(!(_la === 354 || _la === 431)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3908;
                _la = this.tokenStream.LA(1);
                if(!(_la === 133 || _la === 247)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case HiveSqlParser.KW_CURRENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3909;
                this.match(HiveSqlParser.KW_CURRENT);
                this.state = 3910;
                this.match(HiveSqlParser.KW_ROW);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 530, HiveSqlParser.RULE_groupByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3913;
            this.match(HiveSqlParser.KW_GROUP);
            this.state = 3914;
            this.match(HiveSqlParser.KW_BY);
            this.state = 3920;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 519, this.context) ) {
            case 1:
                {
                this.state = 3915;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 3916;
                this.rollupStandard();
                }
                break;
            case 3:
                {
                this.state = 3917;
                this.rollupOldSyntax();
                }
                break;
            case 4:
                {
                {
                this.state = 3918;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3919;
                this.match(HiveSqlParser.RPAREN);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollupStandard(): RollupStandardContext {
        let localContext = new RollupStandardContext(this.context, this.state);
        this.enterRule(localContext, 532, HiveSqlParser.RULE_rollupStandard);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3924;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ROLLUP:
                {
                this.state = 3922;
                localContext._rollup = this.match(HiveSqlParser.KW_ROLLUP);
                }
                break;
            case HiveSqlParser.KW_CUBE:
                {
                this.state = 3923;
                localContext._cube = this.match(HiveSqlParser.KW_CUBE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3926;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3927;
            this.expression();
            this.state = 3932;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3928;
                this.match(HiveSqlParser.COMMA);
                this.state = 3929;
                this.expression();
                }
                }
                this.state = 3934;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3935;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollupOldSyntax(): RollupOldSyntaxContext {
        let localContext = new RollupOldSyntaxContext(this.context, this.state);
        this.enterRule(localContext, 534, HiveSqlParser.RULE_rollupOldSyntax);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3937;
            localContext._expr = this.expressionsNotInParenthesis();
            this.state = 3942;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 522, this.context) ) {
            case 1:
                {
                this.state = 3938;
                localContext._rollup = this.match(HiveSqlParser.KW_WITH);
                this.state = 3939;
                this.match(HiveSqlParser.KW_ROLLUP);
                }
                break;
            case 2:
                {
                this.state = 3940;
                localContext._cube = this.match(HiveSqlParser.KW_WITH);
                this.state = 3941;
                this.match(HiveSqlParser.KW_CUBE);
                }
                break;
            }
            this.state = 3957;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 145) {
                {
                this.state = 3944;
                localContext._sets = this.match(HiveSqlParser.KW_GROUPING);
                this.state = 3945;
                this.match(HiveSqlParser.KW_SETS);
                this.state = 3946;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3947;
                this.groupingSetExpression();
                this.state = 3952;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 3948;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3949;
                    this.groupingSetExpression();
                    }
                    }
                    this.state = 3954;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3955;
                this.match(HiveSqlParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSetExpression(): GroupingSetExpressionContext {
        let localContext = new GroupingSetExpressionContext(this.context, this.state);
        this.enterRule(localContext, 536, HiveSqlParser.RULE_groupingSetExpression);
        let _la: number;
        try {
            this.state = 3972;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 527, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3959;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3961;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3755838846) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3315298239) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280869) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3976149863) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 2004783495) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4226874827) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & 2616949503) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & 3658431331) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & 989854189) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & 4260362175) !== 0) || ((((_la - 325)) & ~0x1F) === 0 && ((1 << (_la - 325)) & 1530590125) !== 0) || ((((_la - 357)) & ~0x1F) === 0 && ((1 << (_la - 357)) & 2549468921) !== 0) || ((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & 4294902847) !== 0) || ((((_la - 421)) & ~0x1F) === 0 && ((1 << (_la - 421)) & 7597) !== 0)) {
                    {
                    this.state = 3960;
                    this.expression();
                    }
                }

                this.state = 3967;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 3963;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3964;
                    this.expression();
                    }
                    }
                    this.state = 3969;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3970;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3971;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 538, HiveSqlParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3974;
            this.match(HiveSqlParser.KW_HAVING);
            this.state = 3975;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifyClause(): QualifyClauseContext {
        let localContext = new QualifyClauseContext(this.context, this.state);
        this.enterRule(localContext, 540, HiveSqlParser.RULE_qualifyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3977;
            this.match(HiveSqlParser.KW_QUALIFY);
            this.state = 3978;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionOrDefault(): ExpressionOrDefaultContext {
        let localContext = new ExpressionOrDefaultContext(this.context, this.state);
        this.enterRule(localContext, 542, HiveSqlParser.RULE_expressionOrDefault);
        try {
            this.state = 3982;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 528, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3980;
                this.match(HiveSqlParser.KW_DEFAULT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3981;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public firstExpressionsWithAlias(): FirstExpressionsWithAliasContext {
        let localContext = new FirstExpressionsWithAliasContext(this.context, this.state);
        this.enterRule(localContext, 544, HiveSqlParser.RULE_firstExpressionsWithAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3984;
            localContext._first = this.expression();
            this.state = 3986;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 3985;
                this.match(HiveSqlParser.KW_AS);
                }
            }

            this.state = 3989;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394 || _la === 432) {
                {
                this.state = 3988;
                localContext._colAlias = this.id_();
                }
            }

            this.state = 4001;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3991;
                this.match(HiveSqlParser.COMMA);
                this.state = 3992;
                this.expression();
                this.state = 3994;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3993;
                    this.match(HiveSqlParser.KW_AS);
                    }
                }

                this.state = 3997;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394 || _la === 432) {
                    {
                    this.state = 3996;
                    localContext._alias = this.id_();
                    }
                }

                }
                }
                this.state = 4003;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressions(): ExpressionsContext {
        let localContext = new ExpressionsContext(this.context, this.state);
        this.enterRule(localContext, 546, HiveSqlParser.RULE_expressions);
        try {
            this.state = 4006;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 534, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4004;
                this.expressionsInParenthesis();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4005;
                this.expressionsNotInParenthesis();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext {
        let localContext = new ExpressionsInParenthesisContext(this.context, this.state);
        this.enterRule(localContext, 548, HiveSqlParser.RULE_expressionsInParenthesis);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4008;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4009;
            this.expressionsNotInParenthesis();
            this.state = 4010;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
        let localContext = new ExpressionsNotInParenthesisContext(this.context, this.state);
        this.enterRule(localContext, 550, HiveSqlParser.RULE_expressionsNotInParenthesis);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4012;
            localContext._first = this.expressionOrDefault();
            this.state = 4019;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 397) {
                {
                this.state = 4015;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 4013;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 4014;
                    this.expressionOrDefault();
                    }
                    }
                    this.state = 4017;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 397);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderByClause(): OrderByClauseContext {
        let localContext = new OrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 552, HiveSqlParser.RULE_orderByClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4021;
            this.match(HiveSqlParser.KW_ORDER);
            this.state = 4022;
            this.match(HiveSqlParser.KW_BY);
            this.state = 4023;
            this.columnRefOrder();
            this.state = 4028;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 4024;
                this.match(HiveSqlParser.COMMA);
                this.state = 4025;
                this.columnRefOrder();
                }
                }
                this.state = 4030;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterByClause(): ClusterByClauseContext {
        let localContext = new ClusterByClauseContext(this.context, this.state);
        this.enterRule(localContext, 554, HiveSqlParser.RULE_clusterByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4031;
            this.match(HiveSqlParser.KW_CLUSTER);
            this.state = 4032;
            this.match(HiveSqlParser.KW_BY);
            this.state = 4033;
            this.expressions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distributeByClause(): DistributeByClauseContext {
        let localContext = new DistributeByClauseContext(this.context, this.state);
        this.enterRule(localContext, 556, HiveSqlParser.RULE_distributeByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4035;
            this.match(HiveSqlParser.KW_DISTRIBUTE);
            this.state = 4036;
            this.match(HiveSqlParser.KW_BY);
            this.state = 4037;
            this.expressions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortByClause(): SortByClauseContext {
        let localContext = new SortByClauseContext(this.context, this.state);
        this.enterRule(localContext, 558, HiveSqlParser.RULE_sortByClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4039;
            this.match(HiveSqlParser.KW_SORT);
            this.state = 4040;
            this.match(HiveSqlParser.KW_BY);
            this.state = 4060;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 540, this.context) ) {
            case 1:
                {
                {
                this.state = 4041;
                this.match(HiveSqlParser.LPAREN);
                this.state = 4042;
                this.columnRefOrder();
                this.state = 4047;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 4043;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 4044;
                    this.columnRefOrder();
                    }
                    }
                    this.state = 4049;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4050;
                this.match(HiveSqlParser.RPAREN);
                }
                }
                break;
            case 2:
                {
                {
                this.state = 4052;
                this.columnRefOrder();
                this.state = 4057;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 4053;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 4054;
                    this.columnRefOrder();
                    }
                    }
                    this.state = 4059;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_(): Function_Context {
        let localContext = new Function_Context(this.context, this.state);
        this.enterRule(localContext, 560, HiveSqlParser.RULE_function_);
        let _la: number;
        try {
            this.state = 4115;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 549, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4062;
                this.match(HiveSqlParser.KW_TRIM);
                this.state = 4063;
                this.match(HiveSqlParser.LPAREN);
                this.state = 4067;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_LEADING:
                    {
                    this.state = 4064;
                    localContext._leading = this.match(HiveSqlParser.KW_LEADING);
                    }
                    break;
                case HiveSqlParser.KW_TRAILING:
                    {
                    this.state = 4065;
                    localContext._trailing = this.match(HiveSqlParser.KW_TRAILING);
                    }
                    break;
                case HiveSqlParser.KW_BOTH:
                    {
                    this.state = 4066;
                    this.match(HiveSqlParser.KW_BOTH);
                    }
                    break;
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ACTIVATE:
                case HiveSqlParser.KW_ACTIVE:
                case HiveSqlParser.KW_ADD:
                case HiveSqlParser.KW_ADMIN:
                case HiveSqlParser.KW_AFTER:
                case HiveSqlParser.KW_ALLOC_FRACTION:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_AND:
                case HiveSqlParser.KW_ARCHIVE:
                case HiveSqlParser.KW_ARRAY:
                case HiveSqlParser.KW_ASC:
                case HiveSqlParser.KW_AST:
                case HiveSqlParser.KW_AT:
                case HiveSqlParser.KW_AUTOCOMMIT:
                case HiveSqlParser.KW_BATCH:
                case HiveSqlParser.KW_BEFORE:
                case HiveSqlParser.KW_BETWEEN:
                case HiveSqlParser.KW_BIGINT:
                case HiveSqlParser.KW_BINARY:
                case HiveSqlParser.KW_BOOLEAN:
                case HiveSqlParser.KW_BUCKET:
                case HiveSqlParser.KW_BUCKETS:
                case HiveSqlParser.KW_CACHE:
                case HiveSqlParser.KW_CASCADE:
                case HiveSqlParser.KW_CASE:
                case HiveSqlParser.KW_CAST:
                case HiveSqlParser.KW_CBO:
                case HiveSqlParser.KW_CHANGE:
                case HiveSqlParser.KW_CHECK:
                case HiveSqlParser.KW_CLUSTER:
                case HiveSqlParser.KW_CLUSTERED:
                case HiveSqlParser.KW_CLUSTERSTATUS:
                case HiveSqlParser.KW_COLLECTION:
                case HiveSqlParser.KW_COLUMNS:
                case HiveSqlParser.KW_COMMENT:
                case HiveSqlParser.KW_COMPACT:
                case HiveSqlParser.KW_COMPACTIONS:
                case HiveSqlParser.KW_COMPUTE:
                case HiveSqlParser.KW_CONCATENATE:
                case HiveSqlParser.KW_CONTINUE:
                case HiveSqlParser.KW_COST:
                case HiveSqlParser.KW_CRON:
                case HiveSqlParser.KW_CURRENT_DATE:
                case HiveSqlParser.KW_CURRENT_TIMESTAMP:
                case HiveSqlParser.KW_DATA:
                case HiveSqlParser.KW_DATABASES:
                case HiveSqlParser.KW_DATE:
                case HiveSqlParser.KW_DATETIME:
                case HiveSqlParser.KW_DAY:
                case HiveSqlParser.KW_DAYS:
                case HiveSqlParser.KW_DAYOFWEEK:
                case HiveSqlParser.KW_DBPROPERTIES:
                case HiveSqlParser.KW_DCPROPERTIES:
                case HiveSqlParser.KW_DEBUG:
                case HiveSqlParser.KW_DEFAULT:
                case HiveSqlParser.KW_DEFERRED:
                case HiveSqlParser.KW_DEFINED:
                case HiveSqlParser.KW_DELIMITED:
                case HiveSqlParser.KW_DEPENDENCY:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DETAIL:
                case HiveSqlParser.KW_DIRECTORIES:
                case HiveSqlParser.KW_DIRECTORY:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DISTRIBUTE:
                case HiveSqlParser.KW_DISTRIBUTED:
                case HiveSqlParser.KW_DO:
                case HiveSqlParser.KW_DOUBLE:
                case HiveSqlParser.KW_DUMP:
                case HiveSqlParser.KW_ELEM_TYPE:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_ENFORCED:
                case HiveSqlParser.KW_ESCAPED:
                case HiveSqlParser.KW_EVERY:
                case HiveSqlParser.KW_EXCLUSIVE:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXECUTED:
                case HiveSqlParser.KW_EXISTS:
                case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_EXPRESSION:
                case HiveSqlParser.KW_EXTRACT:
                case HiveSqlParser.KW_FALSE:
                case HiveSqlParser.KW_FIELDS:
                case HiveSqlParser.KW_FILE:
                case HiveSqlParser.KW_FILEFORMAT:
                case HiveSqlParser.KW_FIRST:
                case HiveSqlParser.KW_FLOAT:
                case HiveSqlParser.KW_FLOOR:
                case HiveSqlParser.KW_FORMAT:
                case HiveSqlParser.KW_FORMATTED:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_FUNCTIONS:
                case HiveSqlParser.KW_GROUPING:
                case HiveSqlParser.KW_HOLD_DDLTIME:
                case HiveSqlParser.KW_HOUR:
                case HiveSqlParser.KW_HOURS:
                case HiveSqlParser.KW_IDXPROPERTIES:
                case HiveSqlParser.KW_IF:
                case HiveSqlParser.KW_IGNORE:
                case HiveSqlParser.KW_IN:
                case HiveSqlParser.KW_INDEX:
                case HiveSqlParser.KW_INDEXES:
                case HiveSqlParser.KW_INPATH:
                case HiveSqlParser.KW_INPUTDRIVER:
                case HiveSqlParser.KW_INPUTFORMAT:
                case HiveSqlParser.KW_INT:
                case HiveSqlParser.KW_INTEGER:
                case HiveSqlParser.KW_INTERVAL:
                case HiveSqlParser.KW_ISOLATION:
                case HiveSqlParser.KW_ITEMS:
                case HiveSqlParser.KW_JAR:
                case HiveSqlParser.KW_JOINCOST:
                case HiveSqlParser.KW_KEY:
                case HiveSqlParser.KW_KEYS:
                case HiveSqlParser.KW_KEY_TYPE:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LAST:
                case HiveSqlParser.KW_LEVEL:
                case HiveSqlParser.KW_LIFECYCLE:
                case HiveSqlParser.KW_LIKE:
                case HiveSqlParser.KW_LIMIT:
                case HiveSqlParser.KW_LINES:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCATION:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_LOCKS:
                case HiveSqlParser.KW_LOGICAL:
                case HiveSqlParser.KW_LONG:
                case HiveSqlParser.KW_MANAGED:
                case HiveSqlParser.KW_MANAGEDLOCATION:
                case HiveSqlParser.KW_MANAGEMENT:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MAPJOIN:
                case HiveSqlParser.KW_MAPPING:
                case HiveSqlParser.KW_MATCHED:
                case HiveSqlParser.KW_MATERIALIZED:
                case HiveSqlParser.KW_METADATA:
                case HiveSqlParser.KW_MINUTE:
                case HiveSqlParser.KW_MINUTES:
                case HiveSqlParser.KW_MONTH:
                case HiveSqlParser.KW_MONTHS:
                case HiveSqlParser.KW_MOVE:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_NORELY:
                case HiveSqlParser.KW_NOSCAN:
                case HiveSqlParser.KW_NOT:
                case HiveSqlParser.KW_NOVALIDATE:
                case HiveSqlParser.KW_NO_DROP:
                case HiveSqlParser.KW_NULL:
                case HiveSqlParser.KW_NULLS:
                case HiveSqlParser.KW_OFFLINE:
                case HiveSqlParser.KW_OFFSET:
                case HiveSqlParser.KW_OPERATOR:
                case HiveSqlParser.KW_OPTION:
                case HiveSqlParser.KW_OR:
                case HiveSqlParser.KW_OUTPUTDRIVER:
                case HiveSqlParser.KW_OUTPUTFORMAT:
                case HiveSqlParser.KW_OVERWRITE:
                case HiveSqlParser.KW_OWNER:
                case HiveSqlParser.KW_PARTITIONED:
                case HiveSqlParser.KW_PARTITIONS:
                case HiveSqlParser.KW_PATH:
                case HiveSqlParser.KW_PLAN:
                case HiveSqlParser.KW_PLANS:
                case HiveSqlParser.KW_PLUS:
                case HiveSqlParser.KW_POOL:
                case HiveSqlParser.KW_PRINCIPALS:
                case HiveSqlParser.KW_PROTECTION:
                case HiveSqlParser.KW_PURGE:
                case HiveSqlParser.KW_QUARTER:
                case HiveSqlParser.KW_QUERY:
                case HiveSqlParser.KW_QUERY_PARALLELISM:
                case HiveSqlParser.KW_READ:
                case HiveSqlParser.KW_READONLY:
                case HiveSqlParser.KW_REAL:
                case HiveSqlParser.KW_REBUILD:
                case HiveSqlParser.KW_RECORDREADER:
                case HiveSqlParser.KW_RECORDWRITER:
                case HiveSqlParser.KW_REGEXP:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_RELY:
                case HiveSqlParser.KW_REMOTE:
                case HiveSqlParser.KW_RENAME:
                case HiveSqlParser.KW_REOPTIMIZATION:
                case HiveSqlParser.KW_REPAIR:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_REPLICATION:
                case HiveSqlParser.KW_RESOURCE:
                case HiveSqlParser.KW_RESPECT:
                case HiveSqlParser.KW_RESTRICT:
                case HiveSqlParser.KW_REWRITE:
                case HiveSqlParser.KW_RLIKE:
                case HiveSqlParser.KW_ROLE:
                case HiveSqlParser.KW_ROLES:
                case HiveSqlParser.KW_SCHEDULED:
                case HiveSqlParser.KW_SCHEDULING_POLICY:
                case HiveSqlParser.KW_SCHEMA:
                case HiveSqlParser.KW_SCHEMAS:
                case HiveSqlParser.KW_SECOND:
                case HiveSqlParser.KW_SECONDS:
                case HiveSqlParser.KW_SEMI:
                case HiveSqlParser.KW_SERDE:
                case HiveSqlParser.KW_SERDEPROPERTIES:
                case HiveSqlParser.KW_SERVER:
                case HiveSqlParser.KW_SETS:
                case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
                case HiveSqlParser.KW_SHARED:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_SHOW_DATABASE:
                case HiveSqlParser.KW_SKEWED:
                case HiveSqlParser.KW_SMALLINT:
                case HiveSqlParser.KW_SNAPSHOT:
                case HiveSqlParser.KW_SORT:
                case HiveSqlParser.KW_SORTED:
                case HiveSqlParser.KW_SPEC:
                case HiveSqlParser.KW_SSL:
                case HiveSqlParser.KW_STATISTICS:
                case HiveSqlParser.KW_STATUS:
                case HiveSqlParser.KW_STORED:
                case HiveSqlParser.KW_STREAMTABLE:
                case HiveSqlParser.KW_STRING:
                case HiveSqlParser.KW_STRUCT:
                case HiveSqlParser.KW_SUMMARY:
                case HiveSqlParser.KW_SYSTEM_TIME:
                case HiveSqlParser.KW_SYSTEM_VERSION:
                case HiveSqlParser.KW_TABLES:
                case HiveSqlParser.KW_TBLPROPERTIES:
                case HiveSqlParser.KW_TEMPORARY:
                case HiveSqlParser.KW_TERMINATED:
                case HiveSqlParser.KW_TIMESTAMP:
                case HiveSqlParser.KW_TIMESTAMPLOCALTZ:
                case HiveSqlParser.KW_TIMESTAMPTZ:
                case HiveSqlParser.KW_TINYINT:
                case HiveSqlParser.KW_TOUCH:
                case HiveSqlParser.KW_TRANSACTION:
                case HiveSqlParser.KW_TRANSACTIONAL:
                case HiveSqlParser.KW_TRANSACTIONS:
                case HiveSqlParser.KW_TRIM:
                case HiveSqlParser.KW_TRUE:
                case HiveSqlParser.KW_TYPE:
                case HiveSqlParser.KW_UNARCHIVE:
                case HiveSqlParser.KW_UNDO:
                case HiveSqlParser.KW_UNIONTYPE:
                case HiveSqlParser.KW_UNKNOWN:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UNMANAGED:
                case HiveSqlParser.KW_UNSET:
                case HiveSqlParser.KW_UNSIGNED:
                case HiveSqlParser.KW_URI:
                case HiveSqlParser.KW_URL:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_UTC:
                case HiveSqlParser.KW_UTCTIMESTAMP:
                case HiveSqlParser.KW_VALIDATE:
                case HiveSqlParser.KW_VALUE_TYPE:
                case HiveSqlParser.KW_VECTORIZATION:
                case HiveSqlParser.KW_VIEW:
                case HiveSqlParser.KW_VIEWS:
                case HiveSqlParser.KW_WAIT:
                case HiveSqlParser.KW_WEEK:
                case HiveSqlParser.KW_WEEKS:
                case HiveSqlParser.KW_WHEN:
                case HiveSqlParser.KW_WHILE:
                case HiveSqlParser.KW_WITHIN:
                case HiveSqlParser.KW_WORK:
                case HiveSqlParser.KW_WORKLOAD:
                case HiveSqlParser.KW_WRITE:
                case HiveSqlParser.KW_YEAR:
                case HiveSqlParser.KW_YEARS:
                case HiveSqlParser.KW_ZONE:
                case HiveSqlParser.LPAREN:
                case HiveSqlParser.EQUAL:
                case HiveSqlParser.EQUAL_NS:
                case HiveSqlParser.NOTEQUAL:
                case HiveSqlParser.LESSTHANOREQUALTO:
                case HiveSqlParser.LESSTHAN:
                case HiveSqlParser.GREATERTHANOREQUALTO:
                case HiveSqlParser.GREATERTHAN:
                case HiveSqlParser.DIVIDE:
                case HiveSqlParser.PLUS:
                case HiveSqlParser.MINUS:
                case HiveSqlParser.STAR:
                case HiveSqlParser.MOD:
                case HiveSqlParser.DIV:
                case HiveSqlParser.BITWISENOT:
                case HiveSqlParser.AMPERSAND:
                case HiveSqlParser.TILDE:
                case HiveSqlParser.BITWISEOR:
                case HiveSqlParser.BITWISEXOR:
                case HiveSqlParser.QUESTION:
                case HiveSqlParser.StringLiteral:
                case HiveSqlParser.IntegralLiteral:
                case HiveSqlParser.NumberLiteral:
                case HiveSqlParser.Number:
                case HiveSqlParser.Identifier:
                case HiveSqlParser.CharSetName:
                    break;
                default:
                    break;
                }
                this.state = 4070;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3755838846) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3315298239) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280869) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3976149863) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 2004783495) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4226874827) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & 2616949503) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & 3658431331) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & 989854189) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & 4260362175) !== 0) || ((((_la - 325)) & ~0x1F) === 0 && ((1 << (_la - 325)) & 1530590125) !== 0) || ((((_la - 357)) & ~0x1F) === 0 && ((1 << (_la - 357)) & 2549468921) !== 0) || ((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & 4294902847) !== 0) || ((((_la - 421)) & ~0x1F) === 0 && ((1 << (_la - 421)) & 7597) !== 0)) {
                    {
                    this.state = 4069;
                    localContext._trim_characters = this.selectExpression();
                    }
                }

                this.state = 4072;
                this.match(HiveSqlParser.KW_FROM);
                this.state = 4073;
                localContext._str = this.selectExpression();
                this.state = 4074;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4076;
                this.functionNameForInvoke();
                this.state = 4077;
                this.match(HiveSqlParser.LPAREN);
                this.state = 4092;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 546, this.context) ) {
                case 1:
                    {
                    this.state = 4078;
                    localContext._star = this.match(HiveSqlParser.STAR);
                    }
                    break;
                case 2:
                    {
                    this.state = 4080;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 7 || _la === 96) {
                        {
                        this.state = 4079;
                        localContext._dist = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 7 || _la === 96)) {
                            localContext._dist = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 4090;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 545, this.context) ) {
                    case 1:
                        {
                        this.state = 4082;
                        this.selectExpression();
                        this.state = 4087;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 397) {
                            {
                            {
                            this.state = 4083;
                            this.match(HiveSqlParser.COMMA);
                            this.state = 4084;
                            this.selectExpression();
                            }
                            }
                            this.state = 4089;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                        break;
                    }
                    }
                    break;
                }
                this.state = 4113;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 548, this.context) ) {
                case 1:
                    {
                    this.state = 4094;
                    this.match(HiveSqlParser.RPAREN);
                    this.state = 4095;
                    localContext._within = this.match(HiveSqlParser.KW_WITHIN);
                    this.state = 4096;
                    this.match(HiveSqlParser.KW_GROUP);
                    this.state = 4097;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 4098;
                    localContext._ordBy = this.orderByClause();
                    this.state = 4099;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 4101;
                    this.match(HiveSqlParser.RPAREN);
                    this.state = 4103;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 152 || _la === 281) {
                        {
                        this.state = 4102;
                        localContext._nt = this.null_treatment();
                        }
                    }

                    this.state = 4105;
                    this.match(HiveSqlParser.KW_OVER);
                    this.state = 4106;
                    localContext._ws = this.window_specification();
                    }
                    break;
                case 3:
                    {
                    this.state = 4107;
                    localContext._nt = this.null_treatment();
                    this.state = 4108;
                    this.match(HiveSqlParser.RPAREN);
                    this.state = 4109;
                    this.match(HiveSqlParser.KW_OVER);
                    this.state = 4110;
                    localContext._ws = this.window_specification();
                    }
                    break;
                case 4:
                    {
                    this.state = 4112;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public null_treatment(): Null_treatmentContext {
        let localContext = new Null_treatmentContext(this.context, this.state);
        this.enterRule(localContext, 562, HiveSqlParser.RULE_null_treatment);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4117;
            _la = this.tokenStream.LA(1);
            if(!(_la === 152 || _la === 281)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4118;
            this.match(HiveSqlParser.KW_NULLS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        let localContext = new FunctionNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 564, HiveSqlParser.RULE_functionNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4120;
            this.functionIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameForDDL(): FunctionNameForDDLContext {
        let localContext = new FunctionNameForDDLContext(this.context, this.state);
        this.enterRule(localContext, 566, HiveSqlParser.RULE_functionNameForDDL);
        try {
            this.state = 4124;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4122;
                this.functionIdentifier();
                }
                break;
            case HiveSqlParser.StringLiteral:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4123;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameForInvoke(): FunctionNameForInvokeContext {
        let localContext = new FunctionNameForInvokeContext(this.context, this.state);
        this.enterRule(localContext, 568, HiveSqlParser.RULE_functionNameForInvoke);
        try {
            this.state = 4129;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 551, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4126;
                this.functionIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4127;
                this.sql11ReservedKeywordsUsedAsFunctionName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4128;
                this.sysFuncNames();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public castExpression(): CastExpressionContext {
        let localContext = new CastExpressionContext(this.context, this.state);
        this.enterRule(localContext, 570, HiveSqlParser.RULE_castExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4131;
            this.match(HiveSqlParser.KW_CAST);
            this.state = 4132;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4133;
            this.expression();
            this.state = 4134;
            this.match(HiveSqlParser.KW_AS);
            this.state = 4135;
            localContext._toType = this.primitiveType();
            this.state = 4138;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 137) {
                {
                this.state = 4136;
                localContext._fmt = this.match(HiveSqlParser.KW_FORMAT);
                this.state = 4137;
                this.match(HiveSqlParser.StringLiteral);
                }
            }

            this.state = 4140;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseExpression(): CaseExpressionContext {
        let localContext = new CaseExpressionContext(this.context, this.state);
        this.enterRule(localContext, 572, HiveSqlParser.RULE_caseExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4142;
            this.match(HiveSqlParser.KW_CASE);
            this.state = 4143;
            this.expression();
            this.state = 4149;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4144;
                this.match(HiveSqlParser.KW_WHEN);
                this.state = 4145;
                this.expression();
                this.state = 4146;
                this.match(HiveSqlParser.KW_THEN);
                this.state = 4147;
                this.expression();
                }
                }
                this.state = 4151;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 383);
            this.state = 4155;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 4153;
                this.match(HiveSqlParser.KW_ELSE);
                this.state = 4154;
                this.expression();
                }
            }

            this.state = 4157;
            this.match(HiveSqlParser.KW_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenExpression(): WhenExpressionContext {
        let localContext = new WhenExpressionContext(this.context, this.state);
        this.enterRule(localContext, 574, HiveSqlParser.RULE_whenExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4159;
            this.match(HiveSqlParser.KW_CASE);
            this.state = 4165;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4160;
                this.match(HiveSqlParser.KW_WHEN);
                this.state = 4161;
                this.expression();
                this.state = 4162;
                this.match(HiveSqlParser.KW_THEN);
                this.state = 4163;
                this.expression();
                }
                }
                this.state = 4167;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 383);
            this.state = 4171;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 4169;
                this.match(HiveSqlParser.KW_ELSE);
                this.state = 4170;
                this.expression();
                }
            }

            this.state = 4173;
            this.match(HiveSqlParser.KW_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public floorExpression(): FloorExpressionContext {
        let localContext = new FloorExpressionContext(this.context, this.state);
        this.enterRule(localContext, 576, HiveSqlParser.RULE_floorExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4175;
            this.match(HiveSqlParser.KW_FLOOR);
            this.state = 4176;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4177;
            this.expression();
            this.state = 4180;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 341) {
                {
                this.state = 4178;
                this.match(HiveSqlParser.KW_TO);
                this.state = 4179;
                localContext._floorUnit = this.timeQualifiers();
                }
            }

            this.state = 4182;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extractExpression(): ExtractExpressionContext {
        let localContext = new ExtractExpressionContext(this.context, this.state);
        this.enterRule(localContext, 578, HiveSqlParser.RULE_extractExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4184;
            this.match(HiveSqlParser.KW_EXTRACT);
            this.state = 4185;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4186;
            localContext._timeUnit = this.timeQualifiers();
            this.state = 4187;
            this.match(HiveSqlParser.KW_FROM);
            this.state = 4188;
            this.expression();
            this.state = 4189;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeQualifiers(): TimeQualifiersContext {
        let localContext = new TimeQualifiersContext(this.context, this.state);
        this.enterRule(localContext, 580, HiveSqlParser.RULE_timeQualifiers);
        try {
            this.state = 4199;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4191;
                this.year();
                }
                break;
            case HiveSqlParser.KW_QUARTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4192;
                this.match(HiveSqlParser.KW_QUARTER);
                }
                break;
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4193;
                this.month();
                }
                break;
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4194;
                this.week();
                }
                break;
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4195;
                this.day();
                }
                break;
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4196;
                this.hour();
                }
                break;
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4197;
                this.minute();
                }
                break;
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4198;
                this.second();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constant(): ConstantContext {
        let localContext = new ConstantContext(this.context, this.state);
        this.enterRule(localContext, 582, HiveSqlParser.RULE_constant);
        let _la: number;
        try {
            this.state = 4229;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 560, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4201;
                localContext._value = this.intervalValue();
                this.state = 4202;
                localContext._qualifiers = this.intervalQualifiers();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4204;
                this.match(HiveSqlParser.Number);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4205;
                this.match(HiveSqlParser.KW_DATE);
                this.state = 4206;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4207;
                this.match(HiveSqlParser.KW_CURRENT_DATE);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4208;
                this.match(HiveSqlParser.KW_TIMESTAMP);
                this.state = 4209;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4210;
                this.match(HiveSqlParser.KW_CURRENT_TIMESTAMP);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4211;
                this.match(HiveSqlParser.KW_TIMESTAMPLOCALTZ);
                this.state = 4212;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4213;
                this.match(HiveSqlParser.StringLiteral);
                this.state = 4217;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 426) {
                    {
                    {
                    this.state = 4214;
                    this.match(HiveSqlParser.StringLiteral);
                    }
                    }
                    this.state = 4219;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4220;
                this.match(HiveSqlParser.IntegralLiteral);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4221;
                this.match(HiveSqlParser.NumberLiteral);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4222;
                localContext._csName = this.match(HiveSqlParser.CharSetName);
                this.state = 4223;
                localContext._csLiteral = this.match(HiveSqlParser.CharSetLiteral);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4224;
                this.match(HiveSqlParser.KW_TRUE);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4225;
                this.match(HiveSqlParser.KW_FALSE);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 4226;
                this.match(HiveSqlParser.KW_NULL);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 4227;
                localContext._p = this.match(HiveSqlParser.QUESTION);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 4228;
                this.match(HiveSqlParser.Identifier);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalValue(): IntervalValueContext {
        let localContext = new IntervalValueContext(this.context, this.state);
        this.enterRule(localContext, 584, HiveSqlParser.RULE_intervalValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4231;
            _la = this.tokenStream.LA(1);
            if(!(_la === 426 || _la === 431)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalExpression(): IntervalExpressionContext {
        let localContext = new IntervalExpressionContext(this.context, this.state);
        this.enterRule(localContext, 586, HiveSqlParser.RULE_intervalExpression);
        try {
            this.state = 4248;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.LPAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4233;
                this.match(HiveSqlParser.LPAREN);
                this.state = 4234;
                localContext._value = this.intervalValue();
                this.state = 4235;
                this.match(HiveSqlParser.RPAREN);
                this.state = 4236;
                localContext._qualifiers = this.intervalQualifiers();
                }
                break;
            case HiveSqlParser.KW_INTERVAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4238;
                this.match(HiveSqlParser.KW_INTERVAL);
                this.state = 4244;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.StringLiteral:
                case HiveSqlParser.Number:
                    {
                    this.state = 4239;
                    localContext._value = this.intervalValue();
                    }
                    break;
                case HiveSqlParser.LPAREN:
                    {
                    this.state = 4240;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 4241;
                    localContext._expr = this.expression();
                    this.state = 4242;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4246;
                localContext._qualifiers = this.intervalQualifiers();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalQualifiers(): IntervalQualifiersContext {
        let localContext = new IntervalQualifiersContext(this.context, this.state);
        this.enterRule(localContext, 588, HiveSqlParser.RULE_intervalQualifiers);
        try {
            this.state = 4264;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 563, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4250;
                this.year();
                this.state = 4251;
                this.match(HiveSqlParser.KW_TO);
                this.state = 4252;
                this.month();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4254;
                this.day();
                this.state = 4255;
                this.match(HiveSqlParser.KW_TO);
                this.state = 4256;
                this.second();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4258;
                this.year();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4259;
                this.month();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4260;
                this.day();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4261;
                this.hour();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4262;
                this.minute();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4263;
                this.second();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 590, HiveSqlParser.RULE_expression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4266;
            this.precedenceAndExpression();
            this.state = 4271;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 228) {
                {
                {
                this.state = 4267;
                this.match(HiveSqlParser.KW_OR);
                this.state = 4268;
                this.precedenceAndExpression();
                }
                }
                this.state = 4273;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomExpression(): AtomExpressionContext {
        let localContext = new AtomExpressionContext(this.context, this.state);
        this.enterRule(localContext, 592, HiveSqlParser.RULE_atomExpression);
        try {
            this.state = 4285;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 565, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4274;
                this.constant();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4275;
                this.intervalExpression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4276;
                this.castExpression();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4277;
                this.extractExpression();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4278;
                this.floorExpression();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4279;
                this.caseExpression();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4280;
                this.whenExpression();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4281;
                this.subQueryExpression();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4282;
                this.function_();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4283;
                this.expressionsInParenthesis();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4284;
                this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceUnaryPrefixExpression(): PrecedenceUnaryPrefixExpressionContext {
        let localContext = new PrecedenceUnaryPrefixExpressionContext(this.context, this.state);
        this.enterRule(localContext, 594, HiveSqlParser.RULE_precedenceUnaryPrefixExpression);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4290;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 566, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4287;
                    _la = this.tokenStream.LA(1);
                    if(!(((((_la - 413)) & ~0x1F) === 0 && ((1 << (_la - 413)) & 163) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    }
                }
                this.state = 4292;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 566, this.context);
            }
            this.state = 4293;
            this.atomExpression();
            this.state = 4302;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 395 || _la === 401) {
                {
                this.state = 4300;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.LSQUARE:
                    {
                    this.state = 4294;
                    this.match(HiveSqlParser.LSQUARE);
                    this.state = 4295;
                    this.expression();
                    this.state = 4296;
                    this.match(HiveSqlParser.RSQUARE);
                    }
                    break;
                case HiveSqlParser.DOT:
                    {
                    this.state = 4298;
                    this.match(HiveSqlParser.DOT);
                    this.state = 4299;
                    this.id_();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 4304;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceBitwiseXorExpression(): PrecedenceBitwiseXorExpressionContext {
        let localContext = new PrecedenceBitwiseXorExpressionContext(this.context, this.state);
        this.enterRule(localContext, 596, HiveSqlParser.RULE_precedenceBitwiseXorExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4305;
            this.precedenceUnaryPrefixExpression();
            this.state = 4310;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 423) {
                {
                {
                this.state = 4306;
                this.match(HiveSqlParser.BITWISEXOR);
                this.state = 4307;
                this.precedenceUnaryPrefixExpression();
                }
                }
                this.state = 4312;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceStarExpression(): PrecedenceStarExpressionContext {
        let localContext = new PrecedenceStarExpressionContext(this.context, this.state);
        this.enterRule(localContext, 598, HiveSqlParser.RULE_precedenceStarExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4313;
            this.precedenceBitwiseXorExpression();
            this.state = 4318;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 412)) & ~0x1F) === 0 && ((1 << (_la - 412)) & 57) !== 0)) {
                {
                {
                this.state = 4314;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 412)) & ~0x1F) === 0 && ((1 << (_la - 412)) & 57) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4315;
                this.precedenceBitwiseXorExpression();
                }
                }
                this.state = 4320;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedencePlusExpression(): PrecedencePlusExpressionContext {
        let localContext = new PrecedencePlusExpressionContext(this.context, this.state);
        this.enterRule(localContext, 600, HiveSqlParser.RULE_precedencePlusExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4321;
            this.precedenceStarExpression();
            this.state = 4326;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 413 || _la === 414) {
                {
                {
                this.state = 4322;
                _la = this.tokenStream.LA(1);
                if(!(_la === 413 || _la === 414)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4323;
                this.precedenceStarExpression();
                }
                }
                this.state = 4328;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceConcatenateExpression(): PrecedenceConcatenateExpressionContext {
        let localContext = new PrecedenceConcatenateExpressionContext(this.context, this.state);
        this.enterRule(localContext, 602, HiveSqlParser.RULE_precedenceConcatenateExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4329;
            this.precedencePlusExpression();
            this.state = 4334;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 422) {
                {
                {
                this.state = 4330;
                this.match(HiveSqlParser.CONCATENATE);
                this.state = 4331;
                localContext._plus = this.precedencePlusExpression();
                }
                }
                this.state = 4336;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceAmpersandExpression(): PrecedenceAmpersandExpressionContext {
        let localContext = new PrecedenceAmpersandExpressionContext(this.context, this.state);
        this.enterRule(localContext, 604, HiveSqlParser.RULE_precedenceAmpersandExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4337;
            this.precedenceConcatenateExpression();
            this.state = 4342;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 419) {
                {
                {
                this.state = 4338;
                this.match(HiveSqlParser.AMPERSAND);
                this.state = 4339;
                this.precedenceConcatenateExpression();
                }
                }
                this.state = 4344;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext {
        let localContext = new PrecedenceBitwiseOrExpressionContext(this.context, this.state);
        this.enterRule(localContext, 606, HiveSqlParser.RULE_precedenceBitwiseOrExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4345;
            this.precedenceAmpersandExpression();
            this.state = 4350;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 421) {
                {
                {
                this.state = 4346;
                this.match(HiveSqlParser.BITWISEOR);
                this.state = 4347;
                this.precedenceAmpersandExpression();
                }
                }
                this.state = 4352;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarOperator(): PrecedenceSimilarOperatorContext {
        let localContext = new PrecedenceSimilarOperatorContext(this.context, this.state);
        this.enterRule(localContext, 608, HiveSqlParser.RULE_precedenceSimilarOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4353;
            _la = this.tokenStream.LA(1);
            if(!(_la === 184 || _la === 270 || _la === 286 || ((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subQueryExpression(): SubQueryExpressionContext {
        let localContext = new SubQueryExpressionContext(this.context, this.state);
        this.enterRule(localContext, 610, HiveSqlParser.RULE_subQueryExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4355;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4356;
            this.selectStatement();
            this.state = 4357;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpression(): PrecedenceSimilarExpressionContext {
        let localContext = new PrecedenceSimilarExpressionContext(this.context, this.state);
        this.enterRule(localContext, 612, HiveSqlParser.RULE_precedenceSimilarExpression);
        try {
            this.state = 4365;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_AND:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ARRAY:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BETWEEN:
            case HiveSqlParser.KW_BIGINT:
            case HiveSqlParser.KW_BINARY:
            case HiveSqlParser.KW_BOOLEAN:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CASE:
            case HiveSqlParser.KW_CAST:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_CURRENT_DATE:
            case HiveSqlParser.KW_CURRENT_TIMESTAMP:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATE:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DOUBLE:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_EXTRACT:
            case HiveSqlParser.KW_FALSE:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FLOAT:
            case HiveSqlParser.KW_FLOOR:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_GROUPING:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IF:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_IN:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_INT:
            case HiveSqlParser.KW_INTEGER:
            case HiveSqlParser.KW_INTERVAL:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIKE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOT:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULL:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OR:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REAL:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_REGEXP:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_RLIKE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SMALLINT:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMP:
            case HiveSqlParser.KW_TIMESTAMPLOCALTZ:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TRUE:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHEN:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.LPAREN:
            case HiveSqlParser.EQUAL:
            case HiveSqlParser.EQUAL_NS:
            case HiveSqlParser.NOTEQUAL:
            case HiveSqlParser.LESSTHANOREQUALTO:
            case HiveSqlParser.LESSTHAN:
            case HiveSqlParser.GREATERTHANOREQUALTO:
            case HiveSqlParser.GREATERTHAN:
            case HiveSqlParser.DIVIDE:
            case HiveSqlParser.PLUS:
            case HiveSqlParser.MINUS:
            case HiveSqlParser.STAR:
            case HiveSqlParser.MOD:
            case HiveSqlParser.DIV:
            case HiveSqlParser.BITWISENOT:
            case HiveSqlParser.AMPERSAND:
            case HiveSqlParser.TILDE:
            case HiveSqlParser.BITWISEOR:
            case HiveSqlParser.BITWISEXOR:
            case HiveSqlParser.QUESTION:
            case HiveSqlParser.StringLiteral:
            case HiveSqlParser.IntegralLiteral:
            case HiveSqlParser.NumberLiteral:
            case HiveSqlParser.Number:
            case HiveSqlParser.Identifier:
            case HiveSqlParser.CharSetName:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4359;
                localContext._a = this.precedenceBitwiseOrExpression();
                this.state = 4361;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 575, this.context) ) {
                case 1:
                    {
                    this.state = 4360;
                    localContext._part = this.precedenceSimilarExpressionPart();
                    }
                    break;
                }
                }
                break;
            case HiveSqlParser.KW_EXISTS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4363;
                this.match(HiveSqlParser.KW_EXISTS);
                this.state = 4364;
                this.subQueryExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionPart(): PrecedenceSimilarExpressionPartContext {
        let localContext = new PrecedenceSimilarExpressionPartContext(this.context, this.state);
        this.enterRule(localContext, 614, HiveSqlParser.RULE_precedenceSimilarExpressionPart);
        try {
            this.state = 4373;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 577, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4367;
                this.precedenceSimilarOperator();
                this.state = 4368;
                localContext._equalExpr = this.precedenceBitwiseOrExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4370;
                this.precedenceSimilarExpressionAtom();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4371;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 4372;
                this.precedenceSimilarExpressionPartNot();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionAtom(): PrecedenceSimilarExpressionAtomContext {
        let localContext = new PrecedenceSimilarExpressionAtomContext(this.context, this.state);
        this.enterRule(localContext, 616, HiveSqlParser.RULE_precedenceSimilarExpressionAtom);
        let _la: number;
        try {
            this.state = 4389;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_IN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4375;
                this.match(HiveSqlParser.KW_IN);
                this.state = 4376;
                this.precedenceSimilarExpressionIn();
                }
                break;
            case HiveSqlParser.KW_BETWEEN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4377;
                this.match(HiveSqlParser.KW_BETWEEN);
                this.state = 4378;
                localContext._min = this.precedenceBitwiseOrExpression();
                this.state = 4379;
                this.match(HiveSqlParser.KW_AND);
                this.state = 4380;
                localContext._max = this.precedenceBitwiseOrExpression();
                }
                break;
            case HiveSqlParser.KW_LIKE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4382;
                this.match(HiveSqlParser.KW_LIKE);
                this.state = 4383;
                _la = this.tokenStream.LA(1);
                if(!(_la === 7 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4384;
                localContext._expr = this.expressionsInParenthesis();
                }
                break;
            case HiveSqlParser.EQUAL:
            case HiveSqlParser.NOTEQUAL:
            case HiveSqlParser.LESSTHANOREQUALTO:
            case HiveSqlParser.LESSTHAN:
            case HiveSqlParser.GREATERTHANOREQUALTO:
            case HiveSqlParser.GREATERTHAN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4385;
                this.subQuerySelectorOperator();
                this.state = 4386;
                _la = this.tokenStream.LA(1);
                if(!(_la === 7 || _la === 13 || _la === 313)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4387;
                this.subQueryExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionIn(): PrecedenceSimilarExpressionInContext {
        let localContext = new PrecedenceSimilarExpressionInContext(this.context, this.state);
        this.enterRule(localContext, 618, HiveSqlParser.RULE_precedenceSimilarExpressionIn);
        try {
            this.state = 4393;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 579, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4391;
                this.subQueryExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4392;
                localContext._expr = this.expressionsInParenthesis();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionPartNot(): PrecedenceSimilarExpressionPartNotContext {
        let localContext = new PrecedenceSimilarExpressionPartNotContext(this.context, this.state);
        this.enterRule(localContext, 620, HiveSqlParser.RULE_precedenceSimilarExpressionPartNot);
        let _la: number;
        try {
            this.state = 4398;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 580, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4395;
                _la = this.tokenStream.LA(1);
                if(!(_la === 184 || _la === 270 || _la === 286)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4396;
                localContext._notExpr = this.precedenceBitwiseOrExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4397;
                this.precedenceSimilarExpressionAtom();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceDistinctOperator(): PrecedenceDistinctOperatorContext {
        let localContext = new PrecedenceDistinctOperatorContext(this.context, this.state);
        this.enterRule(localContext, 622, HiveSqlParser.RULE_precedenceDistinctOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4400;
            this.match(HiveSqlParser.KW_IS);
            this.state = 4401;
            this.match(HiveSqlParser.KW_DISTINCT);
            this.state = 4402;
            this.match(HiveSqlParser.KW_FROM);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceEqualOperator(): PrecedenceEqualOperatorContext {
        let localContext = new PrecedenceEqualOperatorContext(this.context, this.state);
        this.enterRule(localContext, 624, HiveSqlParser.RULE_precedenceEqualOperator);
        try {
            this.state = 4411;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.EQUAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4404;
                this.match(HiveSqlParser.EQUAL);
                }
                break;
            case HiveSqlParser.EQUAL_NS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4405;
                this.match(HiveSqlParser.EQUAL_NS);
                }
                break;
            case HiveSqlParser.NOTEQUAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4406;
                this.match(HiveSqlParser.NOTEQUAL);
                }
                break;
            case HiveSqlParser.KW_IS:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4407;
                this.match(HiveSqlParser.KW_IS);
                this.state = 4408;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 4409;
                this.match(HiveSqlParser.KW_DISTINCT);
                this.state = 4410;
                this.match(HiveSqlParser.KW_FROM);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceEqualExpression(): PrecedenceEqualExpressionContext {
        let localContext = new PrecedenceEqualExpressionContext(this.context, this.state);
        this.enterRule(localContext, 626, HiveSqlParser.RULE_precedenceEqualExpression);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4413;
            this.precedenceSimilarExpression();
            this.state = 4422;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 583, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 4420;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 582, this.context) ) {
                    case 1:
                        {
                        this.state = 4414;
                        localContext._precedenceEqualOperator = this.precedenceEqualOperator();
                        localContext._equal.push(localContext._precedenceEqualOperator);
                        this.state = 4415;
                        localContext._precedenceSimilarExpression = this.precedenceSimilarExpression();
                        localContext._p.push(localContext._precedenceSimilarExpression);
                        }
                        break;
                    case 2:
                        {
                        this.state = 4417;
                        localContext._precedenceDistinctOperator = this.precedenceDistinctOperator();
                        localContext._dist.push(localContext._precedenceDistinctOperator);
                        this.state = 4418;
                        localContext._precedenceSimilarExpression = this.precedenceSimilarExpression();
                        localContext._p.push(localContext._precedenceSimilarExpression);
                        }
                        break;
                    }
                    }
                }
                this.state = 4424;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 583, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public isCondition(): IsConditionContext {
        let localContext = new IsConditionContext(this.context, this.state);
        this.enterRule(localContext, 628, HiveSqlParser.RULE_isCondition);
        let _la: number;
        try {
            this.state = 4431;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_NULL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4425;
                this.match(HiveSqlParser.KW_NULL);
                }
                break;
            case HiveSqlParser.KW_TRUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4426;
                this.match(HiveSqlParser.KW_TRUE);
                }
                break;
            case HiveSqlParser.KW_FALSE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4427;
                this.match(HiveSqlParser.KW_FALSE);
                }
                break;
            case HiveSqlParser.KW_UNKNOWN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4428;
                this.match(HiveSqlParser.KW_UNKNOWN);
                }
                break;
            case HiveSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4429;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 4430;
                _la = this.tokenStream.LA(1);
                if(!(_la === 125 || _la === 219 || _la === 350 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceNotExpression(): PrecedenceNotExpressionContext {
        let localContext = new PrecedenceNotExpressionContext(this.context, this.state);
        this.enterRule(localContext, 630, HiveSqlParser.RULE_precedenceNotExpression);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4436;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 585, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4433;
                    this.match(HiveSqlParser.KW_NOT);
                    }
                    }
                }
                this.state = 4438;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 585, this.context);
            }
            this.state = 4439;
            this.precedenceEqualExpression();
            this.state = 4442;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 167) {
                {
                this.state = 4440;
                localContext._a = this.match(HiveSqlParser.KW_IS);
                this.state = 4441;
                this.isCondition();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceAndExpression(): PrecedenceAndExpressionContext {
        let localContext = new PrecedenceAndExpressionContext(this.context, this.state);
        this.enterRule(localContext, 632, HiveSqlParser.RULE_precedenceAndExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4444;
            this.precedenceNotExpression();
            this.state = 4449;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 11) {
                {
                {
                this.state = 4445;
                this.match(HiveSqlParser.KW_AND);
                this.state = 4446;
                this.precedenceNotExpression();
                }
                }
                this.state = 4451;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableOrPartition(): TableOrPartitionContext {
        let localContext = new TableOrPartitionContext(this.context, this.state);
        this.enterRule(localContext, 634, HiveSqlParser.RULE_tableOrPartition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4452;
            this.tableName();
            this.state = 4454;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 237) {
                {
                this.state = 4453;
                this.partitionSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpec(): PartitionSpecContext {
        let localContext = new PartitionSpecContext(this.context, this.state);
        this.enterRule(localContext, 636, HiveSqlParser.RULE_partitionSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4456;
            this.match(HiveSqlParser.KW_PARTITION);
            this.state = 4457;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4458;
            this.partitionVal();
            this.state = 4463;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 4459;
                this.match(HiveSqlParser.COMMA);
                this.state = 4460;
                this.partitionVal();
                }
                }
                this.state = 4465;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4466;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionVal(): PartitionValContext {
        let localContext = new PartitionValContext(this.context, this.state);
        this.enterRule(localContext, 638, HiveSqlParser.RULE_partitionVal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4468;
            this.id_();
            this.state = 4471;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 405) {
                {
                this.state = 4469;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4470;
                this.constant();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSelectorSpec(): PartitionSelectorSpecContext {
        let localContext = new PartitionSelectorSpecContext(this.context, this.state);
        this.enterRule(localContext, 640, HiveSqlParser.RULE_partitionSelectorSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4473;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4474;
            this.partitionSelectorVal();
            this.state = 4479;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 4475;
                this.match(HiveSqlParser.COMMA);
                this.state = 4476;
                this.partitionSelectorVal();
                }
                }
                this.state = 4481;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4482;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSelectorVal(): PartitionSelectorValContext {
        let localContext = new PartitionSelectorValContext(this.context, this.state);
        this.enterRule(localContext, 642, HiveSqlParser.RULE_partitionSelectorVal);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4484;
            this.id_();
            this.state = 4487;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_LIKE:
                {
                this.state = 4485;
                this.match(HiveSqlParser.KW_LIKE);
                }
                break;
            case HiveSqlParser.EQUAL:
            case HiveSqlParser.NOTEQUAL:
            case HiveSqlParser.LESSTHANOREQUALTO:
            case HiveSqlParser.LESSTHAN:
            case HiveSqlParser.GREATERTHANOREQUALTO:
            case HiveSqlParser.GREATERTHAN:
                {
                this.state = 4486;
                this.subQuerySelectorOperator();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4489;
            this.constant();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subQuerySelectorOperator(): SubQuerySelectorOperatorContext {
        let localContext = new SubQuerySelectorOperatorContext(this.context, this.state);
        this.enterRule(localContext, 644, HiveSqlParser.RULE_subQuerySelectorOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4491;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 125) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sysFuncNames(): SysFuncNamesContext {
        let localContext = new SysFuncNamesContext(this.context, this.state);
        this.enterRule(localContext, 646, HiveSqlParser.RULE_sysFuncNames);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4493;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 11)) & ~0x1F) === 0 && ((1 << (_la - 11)) & 17023009) !== 0) || _la === 100 || _la === 131 || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3225944065) !== 0) || _la === 184 || _la === 198 || _la === 216 || _la === 228 || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4194369) !== 0) || ((((_la - 311)) & ~0x1F) === 0 && ((1 << (_la - 311)) & 536883201) !== 0) || _la === 357 || _la === 383 || ((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 385023) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_(): Id_Context {
        let localContext = new Id_Context(this.context, this.state);
        this.enterRule(localContext, 648, HiveSqlParser.RULE_id_);
        try {
            this.state = 4497;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4495;
                this.match(HiveSqlParser.Identifier);
                }
                break;
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4496;
                this.nonReserved();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionIdentifier(): FunctionIdentifierContext {
        let localContext = new FunctionIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 650, HiveSqlParser.RULE_functionIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4499;
            this.id_();
            this.state = 4502;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 395) {
                {
                this.state = 4500;
                this.match(HiveSqlParser.DOT);
                this.state = 4501;
                localContext._fn = this.id_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principalIdentifier(): PrincipalIdentifierContext {
        let localContext = new PrincipalIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 652, HiveSqlParser.RULE_principalIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4504;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 654, HiveSqlParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4506;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql11ReservedKeywordsUsedAsFunctionName(): Sql11ReservedKeywordsUsedAsFunctionNameContext {
        let localContext = new Sql11ReservedKeywordsUsedAsFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 656, HiveSqlParser.RULE_sql11ReservedKeywordsUsedAsFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4508;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 469827584) !== 0) || ((((_la - 63)) & ~0x1F) === 0 && ((1 << (_la - 63)) & 259) !== 0) || _la === 100 || _la === 131 || ((((_la - 145)) & ~0x1F) === 0 && ((1 << (_la - 145)) & 393281) !== 0) || _la === 198 || _la === 264 || _la === 311 || _la === 337)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public configPropertiesItem(): ConfigPropertiesItemContext {
        let localContext = new ConfigPropertiesItemContext(this.context, this.state);
        this.enterRule(localContext, 658, HiveSqlParser.RULE_configPropertiesItem);
        try {
            this.state = 4561;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4510;
                this.id_();
                }
                break;
            case HiveSqlParser.KW_SELECT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4511;
                this.match(HiveSqlParser.KW_SELECT);
                }
                break;
            case HiveSqlParser.KW_JOIN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4512;
                this.match(HiveSqlParser.KW_JOIN);
                }
                break;
            case HiveSqlParser.KW_PARTITION:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4513;
                this.match(HiveSqlParser.KW_PARTITION);
                }
                break;
            case HiveSqlParser.KW_MAP:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4514;
                this.match(HiveSqlParser.KW_MAP);
                }
                break;
            case HiveSqlParser.KW_REDUCE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4515;
                this.match(HiveSqlParser.KW_REDUCE);
                }
                break;
            case HiveSqlParser.KW_USER:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4516;
                this.match(HiveSqlParser.KW_USER);
                }
                break;
            case HiveSqlParser.KW_PERCENT:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4517;
                this.match(HiveSqlParser.KW_PERCENT);
                }
                break;
            case HiveSqlParser.KW_INTERVAL:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4518;
                this.match(HiveSqlParser.KW_INTERVAL);
                }
                break;
            case HiveSqlParser.KW_ROWS:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4519;
                this.match(HiveSqlParser.KW_ROWS);
                }
                break;
            case HiveSqlParser.KW_UNION:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4520;
                this.match(HiveSqlParser.KW_UNION);
                }
                break;
            case HiveSqlParser.KW_GROUP:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4521;
                this.match(HiveSqlParser.KW_GROUP);
                }
                break;
            case HiveSqlParser.KW_MERGE:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4522;
                this.match(HiveSqlParser.KW_MERGE);
                }
                break;
            case HiveSqlParser.KW_NULL:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 4523;
                this.match(HiveSqlParser.KW_NULL);
                }
                break;
            case HiveSqlParser.KW_FETCH:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 4524;
                this.match(HiveSqlParser.KW_FETCH);
                }
                break;
            case HiveSqlParser.KW_LOCAL:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 4525;
                this.match(HiveSqlParser.KW_LOCAL);
                }
                break;
            case HiveSqlParser.KW_DROP:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 4526;
                this.match(HiveSqlParser.KW_DROP);
                }
                break;
            case HiveSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 4527;
                this.match(HiveSqlParser.KW_TABLE);
                }
                break;
            case HiveSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 4528;
                this.match(HiveSqlParser.KW_ON);
                }
                break;
            case HiveSqlParser.KW_ROW:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 4529;
                this.match(HiveSqlParser.KW_ROW);
                }
                break;
            case HiveSqlParser.KW_GROUPING:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 4530;
                this.match(HiveSqlParser.KW_GROUPING);
                }
                break;
            case HiveSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 4531;
                this.match(HiveSqlParser.KW_SET);
                }
                break;
            case HiveSqlParser.KW_FORCE:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 4532;
                this.match(HiveSqlParser.KW_FORCE);
                }
                break;
            case HiveSqlParser.KW_START:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 4533;
                this.match(HiveSqlParser.KW_START);
                }
                break;
            case HiveSqlParser.KW_INSERT:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 4534;
                this.match(HiveSqlParser.KW_INSERT);
                }
                break;
            case HiveSqlParser.KW_CONF:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 4535;
                this.match(HiveSqlParser.KW_CONF);
                }
                break;
            case HiveSqlParser.KW_INTO:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 4536;
                this.match(HiveSqlParser.KW_INTO);
                }
                break;
            case HiveSqlParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 4537;
                this.match(HiveSqlParser.KW_UNIQUE);
                }
                break;
            case HiveSqlParser.KW_COLUMN:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 4538;
                this.match(HiveSqlParser.KW_COLUMN);
                }
                break;
            case HiveSqlParser.KW_TRANSFORM:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 4539;
                this.match(HiveSqlParser.KW_TRANSFORM);
                }
                break;
            case HiveSqlParser.KW_DISTINCT:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 4540;
                this.match(HiveSqlParser.KW_DISTINCT);
                }
                break;
            case HiveSqlParser.KW_IN:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 4541;
                this.match(HiveSqlParser.KW_IN);
                }
                break;
            case HiveSqlParser.KW_REFERENCES:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 4542;
                this.match(HiveSqlParser.KW_REFERENCES);
                }
                break;
            case HiveSqlParser.KW_TIMESTAMP:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 4543;
                this.match(HiveSqlParser.KW_TIMESTAMP);
                }
                break;
            case HiveSqlParser.KW_ONLY:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 4544;
                this.match(HiveSqlParser.KW_ONLY);
                }
                break;
            case HiveSqlParser.KW_END:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 4545;
                this.match(HiveSqlParser.KW_END);
                }
                break;
            case HiveSqlParser.KW_FUNCTION:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 4546;
                this.match(HiveSqlParser.KW_FUNCTION);
                }
                break;
            case HiveSqlParser.KW_UPDATE:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 4547;
                this.match(HiveSqlParser.KW_UPDATE);
                }
                break;
            case HiveSqlParser.KW_AUTHORIZATION:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 4548;
                this.match(HiveSqlParser.KW_AUTHORIZATION);
                }
                break;
            case HiveSqlParser.KW_DDL:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 4549;
                this.match(HiveSqlParser.KW_DDL);
                }
                break;
            case HiveSqlParser.KW_VALUES:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 4550;
                this.match(HiveSqlParser.KW_VALUES);
                }
                break;
            case HiveSqlParser.KW_TIME:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 4551;
                this.match(HiveSqlParser.KW_TIME);
                }
                break;
            case HiveSqlParser.KW_IS:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 4552;
                this.match(HiveSqlParser.KW_IS);
                }
                break;
            case HiveSqlParser.KW_FOR:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 4553;
                this.match(HiveSqlParser.KW_FOR);
                }
                break;
            case HiveSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 4554;
                this.match(HiveSqlParser.KW_NOT);
                }
                break;
            case HiveSqlParser.KW_BINARY:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 4555;
                this.match(HiveSqlParser.KW_BINARY);
                }
                break;
            case HiveSqlParser.KW_USING:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 4556;
                this.match(HiveSqlParser.KW_USING);
                }
                break;
            case HiveSqlParser.KW_READS:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 4557;
                this.match(HiveSqlParser.KW_READS);
                }
                break;
            case HiveSqlParser.KW_BETWEEN:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 4558;
                this.match(HiveSqlParser.KW_BETWEEN);
                }
                break;
            case HiveSqlParser.KW_CURRENT:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 4559;
                this.match(HiveSqlParser.KW_CURRENT);
                }
                break;
            case HiveSqlParser.KW_AS:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 4560;
                this.match(HiveSqlParser.KW_AS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourcePlanDdlStatements(): ResourcePlanDdlStatementsContext {
        let localContext = new ResourcePlanDdlStatementsContext(this.context, this.state);
        this.enterRule(localContext, 660, HiveSqlParser.RULE_resourcePlanDdlStatements);
        let _la: number;
        try {
            this.state = 4728;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 612, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4563;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 4564;
                this.match(HiveSqlParser.KW_RESOURCE);
                this.state = 4565;
                this.match(HiveSqlParser.KW_PLAN);
                this.state = 4567;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 4566;
                    this.ifNotExists();
                    }
                }

                this.state = 4578;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 598, this.context) ) {
                case 1:
                    {
                    this.state = 4569;
                    localContext._name = this.id_();
                    this.state = 4570;
                    this.match(HiveSqlParser.KW_LIKE);
                    this.state = 4571;
                    localContext._likeName = this.id_();
                    }
                    break;
                case 2:
                    {
                    this.state = 4573;
                    localContext._name = this.id_();
                    this.state = 4576;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 597, this.context) ) {
                    case 1:
                        {
                        this.state = 4574;
                        this.match(HiveSqlParser.KW_WITH);
                        this.state = 4575;
                        this.rpAssignList();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4580;
                this.match(HiveSqlParser.KW_ALTER);
                this.state = 4581;
                this.match(HiveSqlParser.KW_RESOURCE);
                this.state = 4582;
                this.match(HiveSqlParser.KW_PLAN);
                this.state = 4583;
                localContext._name = this.id_();
                this.state = 4608;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_VALIDATE:
                    {
                    this.state = 4584;
                    this.match(HiveSqlParser.KW_VALIDATE);
                    }
                    break;
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                    {
                    this.state = 4585;
                    this.disable();
                    }
                    break;
                case HiveSqlParser.KW_SET:
                    {
                    this.state = 4586;
                    this.match(HiveSqlParser.KW_SET);
                    this.state = 4587;
                    this.rpAssignList();
                    }
                    break;
                case HiveSqlParser.KW_UNSET:
                    {
                    this.state = 4588;
                    this.match(HiveSqlParser.KW_UNSET);
                    this.state = 4589;
                    this.rpUnassign();
                    this.state = 4594;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 397) {
                        {
                        {
                        this.state = 4590;
                        this.match(HiveSqlParser.COMMA);
                        this.state = 4591;
                        this.rpUnassign();
                        }
                        }
                        this.state = 4596;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case HiveSqlParser.KW_RENAME:
                    {
                    this.state = 4597;
                    this.match(HiveSqlParser.KW_RENAME);
                    this.state = 4598;
                    this.match(HiveSqlParser.KW_TO);
                    this.state = 4599;
                    localContext._newName = this.id_();
                    }
                    break;
                case HiveSqlParser.KW_ACTIVATE:
                    {
                    this.state = 4600;
                    this.activate();
                    this.state = 4602;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 600, this.context) ) {
                    case 1:
                        {
                        this.state = 4601;
                        this.enable();
                        }
                        break;
                    }
                    }
                    break;
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                    {
                    this.state = 4604;
                    this.enable();
                    this.state = 4606;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 2) {
                        {
                        this.state = 4605;
                        this.activate();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4610;
                this.match(HiveSqlParser.KW_DROP);
                this.state = 4611;
                this.match(HiveSqlParser.KW_RESOURCE);
                this.state = 4612;
                this.match(HiveSqlParser.KW_PLAN);
                this.state = 4614;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 4613;
                    this.ifExists();
                    }
                }

                this.state = 4616;
                localContext._name = this.id_();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4619;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                    {
                    this.state = 4617;
                    this.enable();
                    }
                    break;
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                    {
                    this.state = 4618;
                    this.disable();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4621;
                this.match(HiveSqlParser.KW_WORKLOAD);
                this.state = 4622;
                this.match(HiveSqlParser.KW_MANAGEMENT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4624;
                this.match(HiveSqlParser.KW_REPLACE);
                this.state = 4636;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_ACTIVE:
                    {
                    this.state = 4625;
                    this.match(HiveSqlParser.KW_ACTIVE);
                    this.state = 4626;
                    this.match(HiveSqlParser.KW_RESOURCE);
                    this.state = 4627;
                    this.match(HiveSqlParser.KW_PLAN);
                    this.state = 4628;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 4629;
                    localContext._src = this.id_();
                    }
                    break;
                case HiveSqlParser.KW_RESOURCE:
                    {
                    this.state = 4630;
                    this.match(HiveSqlParser.KW_RESOURCE);
                    this.state = 4631;
                    this.match(HiveSqlParser.KW_PLAN);
                    this.state = 4632;
                    localContext._dest = this.id_();
                    this.state = 4633;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 4634;
                    localContext._src = this.id_();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4638;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 4639;
                this.match(HiveSqlParser.KW_TRIGGER);
                this.state = 4640;
                localContext._rpName = this.id_();
                this.state = 4641;
                this.match(HiveSqlParser.DOT);
                this.state = 4642;
                localContext._triggerName = this.id_();
                this.state = 4643;
                this.match(HiveSqlParser.KW_WHEN);
                this.state = 4644;
                this.triggerAtomExpression();
                this.state = 4645;
                this.match(HiveSqlParser.KW_DO);
                this.state = 4646;
                this.triggerActionExpression();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4648;
                this.match(HiveSqlParser.KW_ALTER);
                this.state = 4649;
                this.match(HiveSqlParser.KW_TRIGGER);
                this.state = 4650;
                localContext._rpName = this.id_();
                this.state = 4651;
                this.match(HiveSqlParser.DOT);
                this.state = 4652;
                localContext._triggerName = this.id_();
                this.state = 4669;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_WHEN:
                    {
                    this.state = 4653;
                    this.match(HiveSqlParser.KW_WHEN);
                    this.state = 4654;
                    this.triggerAtomExpression();
                    this.state = 4655;
                    this.match(HiveSqlParser.KW_DO);
                    this.state = 4656;
                    this.triggerActionExpression();
                    }
                    break;
                case HiveSqlParser.KW_ADD:
                case HiveSqlParser.KW_DROP:
                    {
                    this.state = 4662;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case HiveSqlParser.KW_ADD:
                        {
                        this.state = 4658;
                        this.match(HiveSqlParser.KW_ADD);
                        this.state = 4659;
                        this.match(HiveSqlParser.KW_TO);
                        }
                        break;
                    case HiveSqlParser.KW_DROP:
                        {
                        this.state = 4660;
                        this.match(HiveSqlParser.KW_DROP);
                        this.state = 4661;
                        this.match(HiveSqlParser.KW_FROM);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 4667;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case HiveSqlParser.KW_POOL:
                        {
                        this.state = 4664;
                        this.match(HiveSqlParser.KW_POOL);
                        this.state = 4665;
                        localContext._poolName = this.poolPath();
                        }
                        break;
                    case HiveSqlParser.KW_UNMANAGED:
                        {
                        this.state = 4666;
                        this.match(HiveSqlParser.KW_UNMANAGED);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4671;
                this.match(HiveSqlParser.KW_DROP);
                this.state = 4672;
                this.match(HiveSqlParser.KW_TRIGGER);
                this.state = 4673;
                localContext._rpName = this.id_();
                this.state = 4674;
                this.match(HiveSqlParser.DOT);
                this.state = 4675;
                localContext._triggerName = this.id_();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4677;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 4678;
                this.match(HiveSqlParser.KW_POOL);
                this.state = 4679;
                localContext._rpName = this.id_();
                this.state = 4680;
                this.match(HiveSqlParser.DOT);
                this.state = 4681;
                this.poolPath();
                this.state = 4682;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 4683;
                this.poolAssignList();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4685;
                this.match(HiveSqlParser.KW_ALTER);
                this.state = 4686;
                this.match(HiveSqlParser.KW_POOL);
                this.state = 4687;
                localContext._rpName = this.id_();
                this.state = 4688;
                this.match(HiveSqlParser.DOT);
                this.state = 4689;
                this.poolPath();
                this.state = 4697;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_SET:
                    {
                    this.state = 4690;
                    this.match(HiveSqlParser.KW_SET);
                    this.state = 4691;
                    this.poolAssignList();
                    }
                    break;
                case HiveSqlParser.KW_UNSET:
                    {
                    this.state = 4692;
                    this.match(HiveSqlParser.KW_UNSET);
                    this.state = 4693;
                    this.match(HiveSqlParser.KW_SCHEDULING_POLICY);
                    }
                    break;
                case HiveSqlParser.KW_ADD:
                case HiveSqlParser.KW_DROP:
                    {
                    this.state = 4694;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 4 || _la === 101)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 4695;
                    this.match(HiveSqlParser.KW_TRIGGER);
                    this.state = 4696;
                    localContext._triggerName = this.id_();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4699;
                this.match(HiveSqlParser.KW_DROP);
                this.state = 4700;
                this.match(HiveSqlParser.KW_POOL);
                this.state = 4701;
                localContext._rpName = this.id_();
                this.state = 4702;
                this.match(HiveSqlParser.DOT);
                this.state = 4703;
                this.poolPath();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4705;
                _la = this.tokenStream.LA(1);
                if(!(_la === 9 || _la === 58)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4706;
                localContext._mappingType = this.mappingTypes();
                this.state = 4707;
                this.match(HiveSqlParser.KW_MAPPING);
                this.state = 4708;
                this.match(HiveSqlParser.StringLiteral);
                this.state = 4709;
                this.match(HiveSqlParser.KW_IN);
                this.state = 4710;
                localContext._rpName = this.id_();
                this.state = 4714;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_TO:
                    {
                    this.state = 4711;
                    this.match(HiveSqlParser.KW_TO);
                    this.state = 4712;
                    localContext._path = this.poolPath();
                    }
                    break;
                case HiveSqlParser.KW_UNMANAGED:
                    {
                    this.state = 4713;
                    this.match(HiveSqlParser.KW_UNMANAGED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4719;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 611, this.context) ) {
                case 1:
                    {
                    this.state = 4716;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 4717;
                    this.match(HiveSqlParser.KW_ORDER);
                    this.state = 4718;
                    localContext._order = this.match(HiveSqlParser.Number);
                    }
                    break;
                }
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4721;
                this.match(HiveSqlParser.KW_DROP);
                this.state = 4722;
                localContext._mappingType = this.mappingTypes();
                this.state = 4723;
                this.match(HiveSqlParser.KW_MAPPING);
                this.state = 4724;
                this.match(HiveSqlParser.StringLiteral);
                this.state = 4725;
                this.match(HiveSqlParser.KW_IN);
                this.state = 4726;
                localContext._rpName = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mappingTypes(): MappingTypesContext {
        let localContext = new MappingTypesContext(this.context, this.state);
        this.enterRule(localContext, 662, HiveSqlParser.RULE_mappingTypes);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4730;
            _la = this.tokenStream.LA(1);
            if(!(_la === 14 || _la === 144 || _la === 369)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpAssign(): RpAssignContext {
        let localContext = new RpAssignContext(this.context, this.state);
        this.enterRule(localContext, 664, HiveSqlParser.RULE_rpAssign);
        try {
            this.state = 4739;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_QUERY_PARALLELISM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4732;
                this.match(HiveSqlParser.KW_QUERY_PARALLELISM);
                this.state = 4733;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4734;
                localContext._parallelism = this.match(HiveSqlParser.Number);
                }
                break;
            case HiveSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4735;
                this.match(HiveSqlParser.KW_DEFAULT);
                this.state = 4736;
                this.match(HiveSqlParser.KW_POOL);
                this.state = 4737;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4738;
                this.poolPath();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpAssignList(): RpAssignListContext {
        let localContext = new RpAssignListContext(this.context, this.state);
        this.enterRule(localContext, 666, HiveSqlParser.RULE_rpAssignList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4741;
            this.rpAssign();
            this.state = 4746;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 4742;
                this.match(HiveSqlParser.COMMA);
                this.state = 4743;
                this.rpAssign();
                }
                }
                this.state = 4748;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpUnassign(): RpUnassignContext {
        let localContext = new RpUnassignContext(this.context, this.state);
        this.enterRule(localContext, 668, HiveSqlParser.RULE_rpUnassign);
        try {
            this.state = 4752;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_QUERY_PARALLELISM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4749;
                this.match(HiveSqlParser.KW_QUERY_PARALLELISM);
                }
                break;
            case HiveSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4750;
                this.match(HiveSqlParser.KW_DEFAULT);
                this.state = 4751;
                this.match(HiveSqlParser.KW_POOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public activate(): ActivateContext {
        let localContext = new ActivateContext(this.context, this.state);
        this.enterRule(localContext, 670, HiveSqlParser.RULE_activate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4754;
            this.match(HiveSqlParser.KW_ACTIVATE);
            this.state = 4757;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 616, this.context) ) {
            case 1:
                {
                this.state = 4755;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 4756;
                this.match(HiveSqlParser.KW_REPLACE);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enable(): EnableContext {
        let localContext = new EnableContext(this.context, this.state);
        this.enterRule(localContext, 672, HiveSqlParser.RULE_enable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4759;
            _la = this.tokenStream.LA(1);
            if(!(_la === 106 || _la === 107)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public disable(): DisableContext {
        let localContext = new DisableContext(this.context, this.state);
        this.enterRule(localContext, 674, HiveSqlParser.RULE_disable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4761;
            _la = this.tokenStream.LA(1);
            if(!(_la === 94 || _la === 95)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public year(): YearContext {
        let localContext = new YearContext(this.context, this.state);
        this.enterRule(localContext, 676, HiveSqlParser.RULE_year);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4763;
            _la = this.tokenStream.LA(1);
            if(!(_la === 392 || _la === 393)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public month(): MonthContext {
        let localContext = new MonthContext(this.context, this.state);
        this.enterRule(localContext, 678, HiveSqlParser.RULE_month);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4765;
            _la = this.tokenStream.LA(1);
            if(!(_la === 208 || _la === 209)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public week(): WeekContext {
        let localContext = new WeekContext(this.context, this.state);
        this.enterRule(localContext, 680, HiveSqlParser.RULE_week);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4767;
            _la = this.tokenStream.LA(1);
            if(!(_la === 381 || _la === 382)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public day(): DayContext {
        let localContext = new DayContext(this.context, this.state);
        this.enterRule(localContext, 682, HiveSqlParser.RULE_day);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4769;
            _la = this.tokenStream.LA(1);
            if(!(_la === 73 || _la === 74)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hour(): HourContext {
        let localContext = new HourContext(this.context, this.state);
        this.enterRule(localContext, 684, HiveSqlParser.RULE_hour);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4771;
            _la = this.tokenStream.LA(1);
            if(!(_la === 148 || _la === 149)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public minute(): MinuteContext {
        let localContext = new MinuteContext(this.context, this.state);
        this.enterRule(localContext, 686, HiveSqlParser.RULE_minute);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4773;
            _la = this.tokenStream.LA(1);
            if(!(_la === 206 || _la === 207)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public second(): SecondContext {
        let localContext = new SecondContext(this.context, this.state);
        this.enterRule(localContext, 688, HiveSqlParser.RULE_second);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4775;
            _la = this.tokenStream.LA(1);
            if(!(_la === 297 || _la === 298)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decimal(): DecimalContext {
        let localContext = new DecimalContext(this.context, this.state);
        this.enterRule(localContext, 690, HiveSqlParser.RULE_decimal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4777;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 80)) & ~0x1F) === 0 && ((1 << (_la - 80)) & 7) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public poolPath(): PoolPathContext {
        let localContext = new PoolPathContext(this.context, this.state);
        this.enterRule(localContext, 692, HiveSqlParser.RULE_poolPath);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4779;
            this.id_();
            this.state = 4784;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 617, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4780;
                    this.match(HiveSqlParser.DOT);
                    this.state = 4781;
                    this.id_();
                    }
                    }
                }
                this.state = 4786;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 617, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerAtomExpression(): TriggerAtomExpressionContext {
        let localContext = new TriggerAtomExpressionContext(this.context, this.state);
        this.enterRule(localContext, 694, HiveSqlParser.RULE_triggerAtomExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4787;
            this.id_();
            this.state = 4788;
            this.match(HiveSqlParser.GREATERTHAN);
            this.state = 4789;
            _la = this.tokenStream.LA(1);
            if(!(_la === 426 || _la === 431)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerActionExpression(): TriggerActionExpressionContext {
        let localContext = new TriggerActionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 696, HiveSqlParser.RULE_triggerActionExpression);
        try {
            this.state = 4795;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_KILL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4791;
                this.match(HiveSqlParser.KW_KILL);
                }
                break;
            case HiveSqlParser.KW_MOVE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4792;
                this.match(HiveSqlParser.KW_MOVE);
                this.state = 4793;
                this.match(HiveSqlParser.KW_TO);
                this.state = 4794;
                this.poolPath();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public poolAssign(): PoolAssignContext {
        let localContext = new PoolAssignContext(this.context, this.state);
        this.enterRule(localContext, 698, HiveSqlParser.RULE_poolAssign);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4809;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ALLOC_FRACTION:
                {
                this.state = 4797;
                this.match(HiveSqlParser.KW_ALLOC_FRACTION);
                this.state = 4798;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4799;
                localContext._allocFraction = this.match(HiveSqlParser.Number);
                }
                break;
            case HiveSqlParser.KW_QUERY_PARALLELISM:
                {
                this.state = 4800;
                this.match(HiveSqlParser.KW_QUERY_PARALLELISM);
                this.state = 4801;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4802;
                localContext._parallelism = this.match(HiveSqlParser.Number);
                }
                break;
            case HiveSqlParser.KW_SCHEDULING_POLICY:
                {
                this.state = 4803;
                this.match(HiveSqlParser.KW_SCHEDULING_POLICY);
                this.state = 4804;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4805;
                localContext._policy = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case HiveSqlParser.KW_PATH:
                {
                this.state = 4806;
                this.match(HiveSqlParser.KW_PATH);
                this.state = 4807;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4808;
                localContext._path = this.poolPath();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public poolAssignList(): PoolAssignListContext {
        let localContext = new PoolAssignListContext(this.context, this.state);
        this.enterRule(localContext, 700, HiveSqlParser.RULE_poolAssignList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4811;
            this.poolAssign();
            this.state = 4816;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 4812;
                this.match(HiveSqlParser.COMMA);
                this.state = 4813;
                this.poolAssign();
                }
                }
                this.state = 4818;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 128:
            return this.columnName_sempred(localContext as ColumnNameContext, predIndex);
        }
        return true;
    }
    private columnName_sempred(localContext: ColumnNameContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.shouldMatchEmpty();
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,438,4820,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,1,0,
        5,0,704,8,0,10,0,12,0,707,9,0,1,0,1,0,1,1,1,1,3,1,713,8,1,1,1,3,
        1,716,8,1,1,2,1,2,5,2,720,8,2,10,2,12,2,723,9,2,1,2,1,2,1,2,3,2,
        728,8,2,1,3,1,3,1,3,1,3,1,3,3,3,735,8,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,3,3,745,8,3,1,3,3,3,748,8,3,1,3,1,3,3,3,752,8,3,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,767,8,5,1,5,1,5,
        1,5,1,5,1,5,3,5,774,8,5,1,5,1,5,1,5,1,5,3,5,780,8,5,1,5,1,5,1,5,
        3,5,785,8,5,1,5,1,5,1,5,3,5,790,8,5,1,5,3,5,793,8,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,5,5,815,8,5,10,5,12,5,818,9,5,1,5,1,5,5,5,822,8,5,10,5,12,5,
        825,9,5,3,5,827,8,5,1,6,1,6,1,6,3,6,832,8,6,1,6,1,6,1,6,3,6,837,
        8,6,1,6,1,6,1,6,1,6,3,6,843,8,6,1,7,1,7,3,7,847,8,7,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,860,8,8,1,9,1,9,3,9,864,8,9,
        1,9,1,9,3,9,868,8,9,1,9,1,9,1,9,3,9,873,8,9,1,10,1,10,1,10,1,10,
        1,10,3,10,880,8,10,1,10,1,10,3,10,884,8,10,1,11,1,11,1,11,3,11,889,
        8,11,1,12,1,12,1,12,1,12,1,12,3,12,896,8,12,1,12,1,12,3,12,900,8,
        12,1,13,1,13,1,13,3,13,905,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,4,14,951,
        8,14,11,14,12,14,952,1,14,1,14,1,14,4,14,958,8,14,11,14,12,14,959,
        1,14,1,14,1,14,3,14,965,8,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,
        1,21,3,21,988,8,21,1,21,1,21,3,21,992,8,21,1,21,1,21,3,21,996,8,
        21,1,21,3,21,999,8,21,1,21,1,21,3,21,1003,8,21,1,21,1,21,1,21,3,
        21,1008,8,21,1,21,1,21,1,21,1,21,3,21,1014,8,21,1,21,1,21,3,21,1018,
        8,21,1,21,1,21,1,21,1,21,3,21,1024,8,21,3,21,1026,8,21,1,22,1,22,
        1,22,1,23,1,23,1,23,1,24,1,24,1,24,3,24,1037,8,24,1,24,1,24,3,24,
        1041,8,24,1,25,1,25,1,25,1,26,1,26,3,26,1048,8,26,1,26,1,26,1,26,
        1,26,1,26,1,26,3,26,1056,8,26,1,26,3,26,1059,8,26,1,27,1,27,1,27,
        3,27,1064,8,27,1,27,1,27,3,27,1068,8,27,1,27,3,27,1071,8,27,1,28,
        1,28,1,28,1,28,1,28,1,29,1,29,1,29,3,29,1081,8,29,1,29,1,29,1,29,
        1,29,1,29,1,29,3,29,1089,8,29,5,29,1091,8,29,10,29,12,29,1094,9,
        29,3,29,1096,8,29,1,30,1,30,3,30,1100,8,30,1,31,1,31,3,31,1104,8,
        31,1,31,3,31,1107,8,31,1,32,1,32,1,32,3,32,1112,8,32,1,32,1,32,1,
        32,1,32,3,32,1118,8,32,1,32,1,32,1,32,3,32,1123,8,32,1,32,1,32,1,
        32,3,32,1128,8,32,1,32,1,32,3,32,1132,8,32,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,3,33,1143,8,33,3,33,1145,8,33,1,33,1,33,3,
        33,1149,8,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,3,36,1159,8,
        36,1,36,1,36,3,36,1163,8,36,1,36,1,36,1,36,1,36,3,36,1169,8,36,1,
        36,3,36,1172,8,36,1,36,1,36,1,36,1,36,1,36,3,36,1179,8,36,1,36,1,
        36,1,36,3,36,1184,8,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1192,8,
        36,1,36,1,36,1,36,3,36,1197,8,36,1,36,1,36,3,36,1201,8,36,1,36,1,
        36,1,36,1,36,1,36,1,36,3,36,1209,8,36,1,36,1,36,1,36,3,36,1214,8,
        36,1,36,1,36,1,36,1,36,3,36,1220,8,36,1,36,1,36,1,36,1,36,3,36,1226,
        8,36,1,36,3,36,1229,8,36,1,36,3,36,1232,8,36,1,36,3,36,1235,8,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1244,8,36,1,36,1,36,1,36,
        1,36,1,36,1,36,3,36,1252,8,36,1,36,1,36,1,36,3,36,1257,8,36,1,36,
        1,36,1,36,1,36,1,36,1,36,3,36,1265,8,36,1,36,1,36,1,36,1,36,1,36,
        3,36,1272,8,36,1,36,3,36,1275,8,36,1,36,3,36,1278,8,36,3,36,1280,
        8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1291,8,36,
        3,36,1293,8,36,1,36,3,36,1296,8,36,1,36,3,36,1299,8,36,1,36,3,36,
        1302,8,36,1,36,3,36,1305,8,36,1,36,3,36,1308,8,36,3,36,1310,8,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1322,8,36,
        1,36,1,36,1,36,1,36,3,36,1328,8,36,1,36,1,36,1,36,1,36,1,36,1,36,
        3,36,1336,8,36,3,36,1338,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,3,37,1348,8,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
        1,39,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,
        1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,3,45,1381,8,45,1,45,
        1,45,1,45,3,45,1386,8,45,1,46,1,46,3,46,1390,8,46,1,46,1,46,3,46,
        1394,8,46,1,46,1,46,1,46,1,47,1,47,3,47,1401,8,47,1,47,1,47,1,47,
        5,47,1406,8,47,10,47,12,47,1409,9,47,1,47,1,47,1,47,3,47,1414,8,
        47,1,48,1,48,3,48,1418,8,48,1,48,3,48,1421,8,48,1,48,1,48,1,48,5,
        48,1426,8,48,10,48,12,48,1429,9,48,1,48,1,48,1,48,1,49,1,49,1,49,
        1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,
        1,52,3,52,1451,8,52,1,53,1,53,1,53,3,53,1456,8,53,1,53,1,53,3,53,
        1460,8,53,1,54,1,54,1,54,1,54,1,55,1,55,3,55,1468,8,55,1,56,1,56,
        1,56,1,57,1,57,1,57,1,57,3,57,1477,8,57,1,57,1,57,1,57,1,57,1,57,
        3,57,1484,8,57,1,58,1,58,1,58,1,58,3,58,1490,8,58,1,58,1,58,1,58,
        1,58,1,58,3,58,1497,8,58,1,58,3,58,1500,8,58,1,58,1,58,1,58,1,58,
        3,58,1506,8,58,1,59,1,59,1,59,5,59,1511,8,59,10,59,12,59,1514,9,
        59,1,60,1,60,1,60,1,60,1,60,3,60,1521,8,60,1,61,1,61,1,62,1,62,1,
        62,5,62,1528,8,62,10,62,12,62,1531,9,62,1,63,1,63,1,63,1,63,1,63,
        1,63,3,63,1539,8,63,1,64,1,64,1,64,1,64,1,64,3,64,1546,8,64,1,65,
        1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,68,1,68,
        1,68,1,68,1,69,1,69,3,69,1566,8,69,1,69,1,69,1,69,1,69,1,69,3,69,
        1573,8,69,3,69,1575,8,69,1,70,1,70,1,70,5,70,1580,8,70,10,70,12,
        70,1583,9,70,1,71,1,71,1,71,1,72,1,72,1,73,1,73,3,73,1592,8,73,1,
        73,1,73,1,73,1,73,1,73,1,73,3,73,1600,8,73,1,74,1,74,3,74,1604,8,
        74,1,74,1,74,3,74,1608,8,74,1,74,1,74,1,75,1,75,1,75,1,76,1,76,1,
        76,1,76,1,76,1,76,3,76,1621,8,76,1,76,1,76,1,76,1,77,1,77,1,77,1,
        77,3,77,1630,8,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
        78,1,78,1,78,1,78,1,78,3,78,1646,8,78,1,78,1,78,3,78,1650,8,78,1,
        78,1,78,1,78,3,78,1655,8,78,1,78,1,78,1,78,3,78,1660,8,78,1,78,3,
        78,1663,8,78,1,78,3,78,1666,8,78,1,78,3,78,1669,8,78,1,78,3,78,1672,
        8,78,1,78,3,78,1675,8,78,1,79,1,79,1,79,3,79,1680,8,79,1,79,1,79,
        1,79,1,79,1,80,1,80,1,80,3,80,1689,8,80,1,80,1,80,3,80,1693,8,80,
        1,80,1,80,1,80,1,80,1,80,3,80,1700,8,80,1,80,3,80,1703,8,80,1,80,
        3,80,1706,8,80,1,80,3,80,1709,8,80,1,80,1,80,1,80,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,3,81,1721,8,81,1,81,1,81,1,82,1,82,3,82,1727,
        8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,85,1,85,1,85,
        1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,3,87,
        1753,8,87,1,87,1,87,1,88,1,88,1,88,1,88,3,88,1761,8,88,1,88,1,88,
        3,88,1765,8,88,1,88,3,88,1768,8,88,1,88,3,88,1771,8,88,1,88,3,88,
        1774,8,88,1,88,3,88,1777,8,88,1,88,3,88,1780,8,88,1,88,3,88,1783,
        8,88,1,88,3,88,1786,8,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,3,89,
        1795,8,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1805,8,90,
        1,90,3,90,1808,8,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,
        1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,3,93,1828,8,93,1,94,
        1,94,1,94,1,94,3,94,1834,8,94,1,94,1,94,1,94,1,94,3,94,1840,8,94,
        1,94,3,94,1843,8,94,3,94,1845,8,94,1,95,1,95,1,95,1,95,1,96,3,96,
        1852,8,96,1,96,1,96,1,96,1,97,1,97,3,97,1859,8,97,1,98,1,98,1,98,
        1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,3,100,1872,8,100,1,
        100,1,100,1,100,3,100,1877,8,100,1,100,1,100,1,101,1,101,1,101,5,
        101,1884,8,101,10,101,12,101,1887,9,101,1,102,1,102,1,102,5,102,
        1892,8,102,10,102,12,102,1895,9,102,1,103,1,103,1,103,1,103,1,103,
        3,103,1902,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,1,103,3,103,1915,8,103,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,3,104,1928,8,104,1,104,1,104,
        1,104,1,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,3,105,1944,8,105,1,106,1,106,3,106,1948,8,106,1,107,1,107,
        1,107,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        3,109,1963,8,109,1,110,1,110,1,110,1,110,3,110,1969,8,110,1,110,
        3,110,1972,8,110,1,110,3,110,1975,8,110,1,110,3,110,1978,8,110,1,
        110,3,110,1981,8,110,1,111,1,111,3,111,1985,8,111,1,112,1,112,1,
        112,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,5,114,1998,8,
        114,10,114,12,114,2001,9,114,3,114,2003,8,114,1,115,1,115,1,115,
        1,115,1,116,1,116,1,116,5,116,2012,8,116,10,116,12,116,2015,9,116,
        1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        3,118,2028,8,118,1,119,1,119,1,119,1,119,1,119,1,119,1,120,1,120,
        1,120,1,120,1,120,1,120,1,121,1,121,1,121,1,121,1,121,1,122,1,122,
        1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
        1,123,1,123,3,123,2062,8,123,1,123,1,123,1,123,1,123,1,123,1,123,
        3,123,2070,8,123,1,123,1,123,1,123,3,123,2075,8,123,1,123,1,123,
        1,123,1,123,1,123,1,123,3,123,2083,8,123,1,123,1,123,1,123,3,123,
        2088,8,123,1,123,1,123,1,123,3,123,2093,8,123,1,124,1,124,1,124,
        5,124,2098,8,124,10,124,12,124,2101,9,124,1,125,1,125,1,125,5,125,
        2106,8,125,10,125,12,125,2109,9,125,1,126,1,126,1,126,5,126,2114,
        8,126,10,126,12,126,2117,9,126,1,127,1,127,1,127,5,127,2122,8,127,
        10,127,12,127,2125,9,127,1,128,1,128,3,128,2129,8,128,1,129,1,129,
        1,130,1,130,1,130,1,130,1,130,1,130,3,130,2139,8,130,5,130,2141,
        8,130,10,130,12,130,2144,9,130,1,131,1,131,1,131,5,131,2149,8,131,
        10,131,12,131,2152,9,131,1,132,1,132,1,132,1,132,1,133,1,133,3,133,
        2160,8,133,1,133,3,133,2163,8,133,1,134,1,134,3,134,2167,8,134,1,
        135,1,135,1,136,1,136,1,136,3,136,2174,8,136,1,137,1,137,1,138,1,
        138,3,138,2180,8,138,1,138,1,138,3,138,2184,8,138,1,139,1,139,1,
        139,1,139,3,139,2190,8,139,1,140,1,140,3,140,2194,8,140,1,141,1,
        141,1,141,1,142,1,142,1,142,1,142,1,142,1,143,1,143,3,143,2206,8,
        143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,2215,8,143,1,
        144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,2226,8,
        144,1,145,1,145,3,145,2230,8,145,1,146,1,146,1,146,5,146,2235,8,
        146,10,146,12,146,2238,9,146,1,147,1,147,1,147,1,147,1,148,1,148,
        1,148,5,148,2247,8,148,10,148,12,148,2250,9,148,1,149,1,149,1,150,
        1,150,1,150,1,151,1,151,3,151,2259,8,151,1,151,3,151,2262,8,151,
        1,152,1,152,1,152,5,152,2267,8,152,10,152,12,152,2270,9,152,1,153,
        1,153,1,153,3,153,2275,8,153,1,154,1,154,3,154,2279,8,154,1,154,
        3,154,2282,8,154,1,154,3,154,2285,8,154,1,155,1,155,1,155,1,155,
        3,155,2291,8,155,1,156,1,156,3,156,2295,8,156,1,157,1,157,3,157,
        2299,8,157,1,158,1,158,1,158,3,158,2304,8,158,1,158,1,158,3,158,
        2308,8,158,1,159,1,159,3,159,2312,8,159,1,160,1,160,3,160,2316,8,
        160,1,160,1,160,1,160,1,160,1,160,1,160,3,160,2324,8,160,1,161,1,
        161,3,161,2328,8,161,1,161,1,161,3,161,2332,8,161,1,162,1,162,3,
        162,2336,8,162,1,163,1,163,3,163,2340,8,163,1,163,1,163,1,163,1,
        163,1,163,1,163,3,163,2348,8,163,1,164,1,164,3,164,2352,8,164,1,
        164,1,164,3,164,2356,8,164,1,165,1,165,1,165,1,165,1,165,1,165,3,
        165,2364,8,165,1,166,1,166,1,166,3,166,2369,8,166,1,167,1,167,1,
        167,3,167,2374,8,167,1,168,1,168,3,168,2378,8,168,1,169,1,169,3,
        169,2382,8,169,1,170,1,170,1,170,1,170,1,170,3,170,2389,8,170,1,
        171,1,171,1,172,1,172,1,172,5,172,2396,8,172,10,172,12,172,2399,
        9,172,1,173,1,173,1,173,1,173,1,173,3,173,2406,8,173,1,174,1,174,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,2418,8,174,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,
        1,174,1,174,1,174,1,174,1,174,3,174,2436,8,174,1,174,3,174,2439,
        8,174,1,174,1,174,1,174,1,174,3,174,2445,8,174,1,175,1,175,1,175,
        1,175,1,175,1,176,1,176,1,176,1,176,1,176,1,177,1,177,1,177,1,177,
        1,177,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,179,1,179,3,179,
        2471,8,179,1,180,3,180,2474,8,180,1,180,1,180,1,181,1,181,3,181,
        2480,8,181,1,182,1,182,1,182,1,182,5,182,2486,8,182,10,182,12,182,
        2489,9,182,1,183,1,183,1,183,1,183,1,183,3,183,2496,8,183,1,183,
        1,183,1,183,1,183,1,183,1,184,1,184,1,184,1,184,5,184,2507,8,184,
        10,184,12,184,2510,9,184,1,185,1,185,1,185,1,185,3,185,2516,8,185,
        1,185,3,185,2519,8,185,1,185,3,185,2522,8,185,1,185,3,185,2525,8,
        185,1,185,3,185,2528,8,185,1,185,3,185,2531,8,185,1,185,3,185,2534,
        8,185,1,185,3,185,2537,8,185,1,185,3,185,2540,8,185,1,185,3,185,
        2543,8,185,1,185,3,185,2546,8,185,1,185,1,185,1,185,3,185,2551,8,
        185,1,185,3,185,2554,8,185,1,185,3,185,2557,8,185,1,185,3,185,2560,
        8,185,1,185,3,185,2563,8,185,1,185,3,185,2566,8,185,1,185,3,185,
        2569,8,185,1,185,3,185,2572,8,185,1,185,3,185,2575,8,185,1,185,3,
        185,2578,8,185,1,185,3,185,2581,8,185,3,185,2583,8,185,1,186,1,186,
        1,186,1,186,3,186,2589,8,186,1,187,1,187,3,187,2593,8,187,1,187,
        3,187,2596,8,187,1,187,3,187,2599,8,187,1,187,3,187,2602,8,187,1,
        187,3,187,2605,8,187,1,187,3,187,2608,8,187,1,187,1,187,1,187,1,
        187,1,187,3,187,2615,8,187,1,188,1,188,3,188,2619,8,188,1,188,3,
        188,2622,8,188,1,188,3,188,2625,8,188,1,188,3,188,2628,8,188,1,188,
        3,188,2631,8,188,1,188,3,188,2634,8,188,1,189,1,189,1,189,4,189,
        2639,8,189,11,189,12,189,2640,1,190,3,190,2644,8,190,1,190,1,190,
        1,191,1,191,1,191,1,191,3,191,2652,8,191,1,191,1,191,3,191,2656,
        8,191,1,191,1,191,1,191,1,191,1,191,3,191,2663,8,191,3,191,2665,
        8,191,1,192,3,192,2668,8,192,1,192,1,192,1,192,3,192,2673,8,192,
        1,192,3,192,2676,8,192,1,192,1,192,3,192,2680,8,192,1,193,1,193,
        1,193,3,193,2685,8,193,1,193,1,193,1,193,1,193,3,193,2691,8,193,
        1,194,1,194,1,194,1,194,1,195,1,195,3,195,2699,8,195,1,196,1,196,
        1,196,1,196,5,196,2705,8,196,10,196,12,196,2708,9,196,1,197,1,197,
        1,197,1,197,1,197,5,197,2715,8,197,10,197,12,197,2718,9,197,3,197,
        2720,8,197,1,197,1,197,3,197,2724,8,197,1,197,1,197,3,197,2728,8,
        197,1,197,1,197,1,197,3,197,2733,8,197,1,198,1,198,1,198,1,198,1,
        198,3,198,2740,8,198,1,199,1,199,5,199,2744,8,199,10,199,12,199,
        2747,9,199,1,199,3,199,2750,8,199,1,200,1,200,1,200,1,200,1,200,
        3,200,2757,8,200,1,200,1,200,1,200,3,200,2762,8,200,1,200,1,200,
        1,200,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,2775,
        8,201,1,202,1,202,1,202,1,202,1,202,1,202,3,202,2783,8,202,1,203,
        1,203,1,203,1,204,1,204,1,204,1,205,1,205,1,205,1,206,1,206,1,206,
        1,206,1,206,1,206,1,206,1,206,3,206,2802,8,206,1,206,1,206,1,206,
        1,206,1,206,1,206,1,206,1,206,3,206,2812,8,206,1,206,1,206,1,206,
        1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,3,206,2825,8,206,
        1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,3,207,2835,8,207,
        1,207,1,207,3,207,2839,8,207,4,207,2841,8,207,11,207,12,207,2842,
        1,207,1,207,5,207,2847,8,207,10,207,12,207,2850,9,207,1,207,1,207,
        5,207,2854,8,207,10,207,12,207,2857,9,207,1,207,1,207,5,207,2861,
        8,207,10,207,12,207,2864,9,207,1,207,1,207,1,207,1,207,1,207,1,207,
        3,207,2872,8,207,1,207,1,207,1,207,1,207,1,207,3,207,2879,8,207,
        1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
        1,207,1,207,1,207,1,207,1,207,1,207,1,207,3,207,2899,8,207,1,207,
        3,207,2902,8,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
        1,207,1,207,1,207,1,207,3,207,2916,8,207,1,208,1,208,1,208,1,208,
        1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,3,208,2931,
        8,208,1,208,1,208,3,208,2935,8,208,1,208,1,208,1,208,1,208,1,208,
        1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,
        5,208,2953,8,208,10,208,12,208,2956,9,208,1,208,1,208,1,208,1,208,
        1,208,1,208,1,208,1,208,1,208,3,208,2967,8,208,1,208,1,208,1,208,
        1,208,3,208,2973,8,208,1,208,3,208,2976,8,208,1,208,3,208,2979,8,
        208,1,208,1,208,1,208,1,208,3,208,2985,8,208,1,208,1,208,1,208,1,
        208,3,208,2991,8,208,1,208,1,208,1,208,1,208,1,208,3,208,2998,8,
        208,1,208,1,208,1,208,1,208,1,208,1,208,3,208,3006,8,208,1,208,1,
        208,1,208,1,208,3,208,3012,8,208,1,208,1,208,3,208,3016,8,208,1,
        208,1,208,1,208,3,208,3021,8,208,1,208,3,208,3024,8,208,1,208,1,
        208,3,208,3028,8,208,1,208,1,208,1,208,1,208,1,208,3,208,3035,8,
        208,1,208,1,208,1,208,3,208,3040,8,208,1,208,1,208,1,208,3,208,3045,
        8,208,1,208,3,208,3048,8,208,3,208,3050,8,208,1,209,1,209,1,209,
        1,209,1,209,1,209,3,209,3058,8,209,1,209,1,209,1,209,1,209,1,209,
        1,209,3,209,3066,8,209,1,209,1,209,3,209,3070,8,209,4,209,3072,8,
        209,11,209,12,209,3073,1,209,1,209,3,209,3078,8,209,1,210,1,210,
        1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,
        1,210,1,210,3,210,3095,8,210,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,3112,
        8,211,1,212,1,212,1,212,1,213,1,213,3,213,3119,8,213,1,213,1,213,
        1,213,1,213,1,213,5,213,3126,8,213,10,213,12,213,3129,9,213,1,213,
        1,213,3,213,3133,8,213,1,213,3,213,3136,8,213,1,213,3,213,3139,8,
        213,1,214,1,214,3,214,3143,8,214,1,214,1,214,1,214,1,215,1,215,1,
        215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,3,215,3158,8,215,1,
        215,1,215,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,3,216,3172,8,216,1,216,3,216,3175,8,216,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,3,217,3186,8,217,1,218,1,218,
        3,218,3190,8,218,1,218,3,218,3193,8,218,1,218,3,218,3196,8,218,1,
        218,1,218,3,218,3200,8,218,1,218,1,218,1,218,3,218,3205,8,218,1,
        218,3,218,3208,8,218,1,218,3,218,3211,8,218,1,218,3,218,3214,8,218,
        1,218,3,218,3217,8,218,1,218,3,218,3220,8,218,1,218,1,218,1,218,
        1,218,3,218,3226,8,218,1,218,3,218,3229,8,218,1,218,3,218,3232,8,
        218,1,218,3,218,3235,8,218,1,218,3,218,3238,8,218,1,218,3,218,3241,
        8,218,1,218,3,218,3244,8,218,1,218,3,218,3247,8,218,1,218,3,218,
        3250,8,218,1,218,3,218,3253,8,218,1,218,1,218,3,218,3257,8,218,3,
        218,3259,8,218,1,218,1,218,1,218,1,218,3,218,3265,8,218,1,218,1,
        218,1,218,3,218,3270,8,218,1,218,3,218,3273,8,218,1,218,3,218,3276,
        8,218,1,218,3,218,3279,8,218,1,218,3,218,3282,8,218,1,218,1,218,
        1,218,1,218,3,218,3288,8,218,1,218,3,218,3291,8,218,1,218,3,218,
        3294,8,218,1,218,3,218,3297,8,218,1,218,3,218,3300,8,218,1,218,3,
        218,3303,8,218,1,218,3,218,3306,8,218,1,218,3,218,3309,8,218,1,218,
        3,218,3312,8,218,1,218,3,218,3315,8,218,1,218,1,218,3,218,3319,8,
        218,3,218,3321,8,218,3,218,3323,8,218,1,219,1,219,1,219,3,219,3328,
        8,219,1,219,1,219,1,219,3,219,3333,8,219,1,219,1,219,3,219,3337,
        8,219,1,219,1,219,3,219,3341,8,219,1,219,1,219,1,219,3,219,3346,
        8,219,1,220,1,220,1,220,3,220,3351,8,220,1,220,1,220,1,221,1,221,
        1,221,5,221,3358,8,221,10,221,12,221,3361,9,221,1,221,1,221,1,222,
        1,222,1,222,5,222,3368,8,222,10,222,12,222,3371,9,222,1,223,1,223,
        1,223,5,223,3376,8,223,10,223,12,223,3379,9,223,1,224,1,224,1,224,
        1,225,1,225,1,225,1,225,4,225,3388,8,225,11,225,12,225,3389,1,225,
        3,225,3393,8,225,1,226,1,226,5,226,3397,8,226,10,226,12,226,3400,
        9,226,1,226,1,226,5,226,3404,8,226,10,226,12,226,3407,9,226,1,226,
        1,226,5,226,3411,8,226,10,226,12,226,3414,9,226,1,226,1,226,5,226,
        3418,8,226,10,226,12,226,3421,9,226,1,226,1,226,1,226,1,226,3,226,
        3427,8,226,1,227,1,227,1,227,1,227,1,227,1,227,1,227,3,227,3436,
        8,227,5,227,3438,8,227,10,227,12,227,3441,9,227,1,228,1,228,1,228,
        1,228,3,228,3447,8,228,1,228,5,228,3450,8,228,10,228,12,228,3453,
        9,228,1,229,3,229,3456,8,229,1,229,1,229,3,229,3460,8,229,1,229,
        3,229,3463,8,229,1,229,3,229,3466,8,229,1,229,1,229,1,229,1,229,
        1,230,1,230,1,230,1,230,1,230,3,230,3477,8,230,1,230,1,230,3,230,
        3481,8,230,3,230,3483,8,230,1,230,3,230,3486,8,230,1,231,1,231,1,
        231,1,231,1,231,1,231,1,231,1,231,1,231,5,231,3497,8,231,10,231,
        12,231,3500,9,231,3,231,3502,8,231,1,231,3,231,3505,8,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,5,231,3515,8,231,10,231,
        12,231,3518,9,231,3,231,3520,8,231,1,231,1,231,1,231,1,231,1,231,
        3,231,3527,8,231,1,231,1,231,1,231,1,231,1,231,5,231,3534,8,231,
        10,231,12,231,3537,9,231,1,231,1,231,3,231,3541,8,231,3,231,3543,
        8,231,3,231,3545,8,231,1,232,1,232,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,5,233,3560,8,233,10,233,12,233,
        3563,9,233,3,233,3565,8,233,1,233,1,233,1,233,1,233,1,233,1,233,
        3,233,3573,8,233,1,233,3,233,3576,8,233,1,234,1,234,3,234,3580,8,
        234,1,234,3,234,3583,8,234,1,234,3,234,3586,8,234,1,234,3,234,3589,
        8,234,1,234,3,234,3592,8,234,1,235,1,235,1,235,1,235,1,235,1,235,
        1,235,1,235,1,235,1,235,3,235,3604,8,235,1,236,1,236,1,237,1,237,
        1,238,1,238,3,238,3612,8,238,1,239,1,239,1,239,1,239,1,239,3,239,
        3619,8,239,1,239,3,239,3622,8,239,1,240,1,240,1,240,1,240,1,240,
        3,240,3629,8,240,1,240,3,240,3632,8,240,1,241,1,241,1,241,3,241,
        3637,8,241,1,241,1,241,1,242,1,242,1,242,3,242,3644,8,242,1,242,
        1,242,1,243,1,243,1,243,1,243,3,243,3652,8,243,1,243,1,243,1,244,
        1,244,1,244,1,244,3,244,3660,8,244,1,244,1,244,1,244,3,244,3665,
        8,244,1,244,1,244,3,244,3669,8,244,1,245,1,245,1,245,3,245,3674,
        8,245,1,246,1,246,3,246,3678,8,246,1,247,1,247,1,247,1,247,1,247,
        3,247,3685,8,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
        1,247,1,247,5,247,3697,8,247,10,247,12,247,3700,9,247,3,247,3702,
        8,247,1,247,1,247,1,248,1,248,1,248,1,249,1,249,1,249,1,249,5,249,
        3713,8,249,10,249,12,249,3716,9,249,1,249,1,249,1,249,1,249,1,249,
        5,249,3723,8,249,10,249,12,249,3726,9,249,3,249,3728,8,249,1,250,
        1,250,1,250,1,250,1,250,1,251,1,251,3,251,3737,8,251,1,251,1,251,
        1,251,1,251,1,251,5,251,3744,8,251,10,251,12,251,3747,9,251,3,251,
        3749,8,251,1,251,1,251,1,252,1,252,3,252,3755,8,252,1,252,3,252,
        3758,8,252,1,252,1,252,1,252,3,252,3763,8,252,1,252,3,252,3766,8,
        252,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
        1,253,3,253,3779,8,253,1,253,1,253,1,253,1,253,3,253,3785,8,253,
        3,253,3787,8,253,1,253,1,253,1,253,1,254,1,254,1,254,5,254,3795,
        8,254,10,254,12,254,3798,9,254,1,255,1,255,1,255,3,255,3803,8,255,
        1,255,3,255,3806,8,255,1,255,1,255,1,255,1,255,1,255,1,255,5,255,
        3814,8,255,10,255,12,255,3817,9,255,1,255,1,255,3,255,3821,8,255,
        3,255,3823,8,255,1,256,1,256,1,257,1,257,1,258,1,258,1,258,1,258,
        1,258,1,258,1,258,1,258,1,258,1,258,3,258,3839,8,258,1,258,1,258,
        1,258,1,258,3,258,3845,8,258,3,258,3847,8,258,1,258,1,258,1,258,
        1,259,1,259,3,259,3854,8,259,1,260,1,260,1,260,5,260,3859,8,260,
        10,260,12,260,3862,9,260,1,261,1,261,1,261,1,261,1,261,1,261,1,261,
        1,261,1,261,5,261,3873,8,261,10,261,12,261,3876,9,261,1,262,1,262,
        1,262,3,262,3881,8,262,1,262,3,262,3884,8,262,1,262,3,262,3887,8,
        262,1,262,3,262,3890,8,262,1,263,1,263,1,263,1,263,1,263,1,263,1,
        263,3,263,3899,8,263,1,263,1,263,1,263,1,263,1,263,3,263,3906,8,
        263,1,264,1,264,1,264,1,264,3,264,3912,8,264,1,265,1,265,1,265,1,
        265,1,265,1,265,1,265,3,265,3921,8,265,1,266,1,266,3,266,3925,8,
        266,1,266,1,266,1,266,1,266,5,266,3931,8,266,10,266,12,266,3934,
        9,266,1,266,1,266,1,267,1,267,1,267,1,267,1,267,3,267,3943,8,267,
        1,267,1,267,1,267,1,267,1,267,1,267,5,267,3951,8,267,10,267,12,267,
        3954,9,267,1,267,1,267,3,267,3958,8,267,1,268,1,268,3,268,3962,8,
        268,1,268,1,268,5,268,3966,8,268,10,268,12,268,3969,9,268,1,268,
        1,268,3,268,3973,8,268,1,269,1,269,1,269,1,270,1,270,1,270,1,271,
        1,271,3,271,3983,8,271,1,272,1,272,3,272,3987,8,272,1,272,3,272,
        3990,8,272,1,272,1,272,1,272,3,272,3995,8,272,1,272,3,272,3998,8,
        272,5,272,4000,8,272,10,272,12,272,4003,9,272,1,273,1,273,3,273,
        4007,8,273,1,274,1,274,1,274,1,274,1,275,1,275,1,275,4,275,4016,
        8,275,11,275,12,275,4017,3,275,4020,8,275,1,276,1,276,1,276,1,276,
        1,276,5,276,4027,8,276,10,276,12,276,4030,9,276,1,277,1,277,1,277,
        1,277,1,278,1,278,1,278,1,278,1,279,1,279,1,279,1,279,1,279,1,279,
        5,279,4046,8,279,10,279,12,279,4049,9,279,1,279,1,279,1,279,1,279,
        1,279,5,279,4056,8,279,10,279,12,279,4059,9,279,3,279,4061,8,279,
        1,280,1,280,1,280,1,280,1,280,3,280,4068,8,280,1,280,3,280,4071,
        8,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,3,280,4081,
        8,280,1,280,1,280,1,280,5,280,4086,8,280,10,280,12,280,4089,9,280,
        3,280,4091,8,280,3,280,4093,8,280,1,280,1,280,1,280,1,280,1,280,
        1,280,1,280,1,280,1,280,3,280,4104,8,280,1,280,1,280,1,280,1,280,
        1,280,1,280,1,280,1,280,3,280,4114,8,280,3,280,4116,8,280,1,281,
        1,281,1,281,1,282,1,282,1,283,1,283,3,283,4125,8,283,1,284,1,284,
        1,284,3,284,4130,8,284,1,285,1,285,1,285,1,285,1,285,1,285,1,285,
        3,285,4139,8,285,1,285,1,285,1,286,1,286,1,286,1,286,1,286,1,286,
        1,286,4,286,4150,8,286,11,286,12,286,4151,1,286,1,286,3,286,4156,
        8,286,1,286,1,286,1,287,1,287,1,287,1,287,1,287,1,287,4,287,4166,
        8,287,11,287,12,287,4167,1,287,1,287,3,287,4172,8,287,1,287,1,287,
        1,288,1,288,1,288,1,288,1,288,3,288,4181,8,288,1,288,1,288,1,289,
        1,289,1,289,1,289,1,289,1,289,1,289,1,290,1,290,1,290,1,290,1,290,
        1,290,1,290,1,290,3,290,4200,8,290,1,291,1,291,1,291,1,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,5,291,4216,
        8,291,10,291,12,291,4219,9,291,1,291,1,291,1,291,1,291,1,291,1,291,
        1,291,1,291,1,291,3,291,4230,8,291,1,292,1,292,1,293,1,293,1,293,
        1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,3,293,4245,8,293,
        1,293,1,293,3,293,4249,8,293,1,294,1,294,1,294,1,294,1,294,1,294,
        1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,3,294,4265,8,294,
        1,295,1,295,1,295,5,295,4270,8,295,10,295,12,295,4273,9,295,1,296,
        1,296,1,296,1,296,1,296,1,296,1,296,1,296,1,296,1,296,1,296,3,296,
        4286,8,296,1,297,5,297,4289,8,297,10,297,12,297,4292,9,297,1,297,
        1,297,1,297,1,297,1,297,1,297,1,297,5,297,4301,8,297,10,297,12,297,
        4304,9,297,1,298,1,298,1,298,5,298,4309,8,298,10,298,12,298,4312,
        9,298,1,299,1,299,1,299,5,299,4317,8,299,10,299,12,299,4320,9,299,
        1,300,1,300,1,300,5,300,4325,8,300,10,300,12,300,4328,9,300,1,301,
        1,301,1,301,5,301,4333,8,301,10,301,12,301,4336,9,301,1,302,1,302,
        1,302,5,302,4341,8,302,10,302,12,302,4344,9,302,1,303,1,303,1,303,
        5,303,4349,8,303,10,303,12,303,4352,9,303,1,304,1,304,1,305,1,305,
        1,305,1,305,1,306,1,306,3,306,4362,8,306,1,306,1,306,3,306,4366,
        8,306,1,307,1,307,1,307,1,307,1,307,1,307,3,307,4374,8,307,1,308,
        1,308,1,308,1,308,1,308,1,308,1,308,1,308,1,308,1,308,1,308,1,308,
        1,308,1,308,3,308,4390,8,308,1,309,1,309,3,309,4394,8,309,1,310,
        1,310,1,310,3,310,4399,8,310,1,311,1,311,1,311,1,311,1,312,1,312,
        1,312,1,312,1,312,1,312,1,312,3,312,4412,8,312,1,313,1,313,1,313,
        1,313,1,313,1,313,1,313,5,313,4421,8,313,10,313,12,313,4424,9,313,
        1,314,1,314,1,314,1,314,1,314,1,314,3,314,4432,8,314,1,315,5,315,
        4435,8,315,10,315,12,315,4438,9,315,1,315,1,315,1,315,3,315,4443,
        8,315,1,316,1,316,1,316,5,316,4448,8,316,10,316,12,316,4451,9,316,
        1,317,1,317,3,317,4455,8,317,1,318,1,318,1,318,1,318,1,318,5,318,
        4462,8,318,10,318,12,318,4465,9,318,1,318,1,318,1,319,1,319,1,319,
        3,319,4472,8,319,1,320,1,320,1,320,1,320,5,320,4478,8,320,10,320,
        12,320,4481,9,320,1,320,1,320,1,321,1,321,1,321,3,321,4488,8,321,
        1,321,1,321,1,322,1,322,1,323,1,323,1,324,1,324,3,324,4498,8,324,
        1,325,1,325,1,325,3,325,4503,8,325,1,326,1,326,1,327,1,327,1,328,
        1,328,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,
        1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,
        1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,
        1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,
        1,329,1,329,1,329,1,329,1,329,1,329,1,329,1,329,3,329,4562,8,329,
        1,330,1,330,1,330,1,330,3,330,4568,8,330,1,330,1,330,1,330,1,330,
        1,330,1,330,1,330,3,330,4577,8,330,3,330,4579,8,330,1,330,1,330,
        1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,5,330,
        4593,8,330,10,330,12,330,4596,9,330,1,330,1,330,1,330,1,330,1,330,
        3,330,4603,8,330,1,330,1,330,3,330,4607,8,330,3,330,4609,8,330,1,
        330,1,330,1,330,1,330,3,330,4615,8,330,1,330,1,330,1,330,3,330,4620,
        8,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,
        1,330,1,330,1,330,1,330,1,330,3,330,4637,8,330,1,330,1,330,1,330,
        1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,
        1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,3,330,
        4663,8,330,1,330,1,330,1,330,3,330,4668,8,330,3,330,4670,8,330,1,
        330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,
        1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,
        1,330,1,330,1,330,1,330,3,330,4698,8,330,1,330,1,330,1,330,1,330,
        1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,
        3,330,4715,8,330,1,330,1,330,1,330,3,330,4720,8,330,1,330,1,330,
        1,330,1,330,1,330,1,330,1,330,3,330,4729,8,330,1,331,1,331,1,332,
        1,332,1,332,1,332,1,332,1,332,1,332,3,332,4740,8,332,1,333,1,333,
        1,333,5,333,4745,8,333,10,333,12,333,4748,9,333,1,334,1,334,1,334,
        3,334,4753,8,334,1,335,1,335,1,335,3,335,4758,8,335,1,336,1,336,
        1,337,1,337,1,338,1,338,1,339,1,339,1,340,1,340,1,341,1,341,1,342,
        1,342,1,343,1,343,1,344,1,344,1,345,1,345,1,346,1,346,1,346,5,346,
        4783,8,346,10,346,12,346,4786,9,346,1,347,1,347,1,347,1,347,1,348,
        1,348,1,348,1,348,3,348,4796,8,348,1,349,1,349,1,349,1,349,1,349,
        1,349,1,349,1,349,1,349,1,349,1,349,1,349,3,349,4810,8,349,1,350,
        1,350,1,350,5,350,4815,8,350,10,350,12,350,4818,9,350,1,350,1,823,
        0,351,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
        250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
        282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
        314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,
        346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,
        378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,
        410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,
        442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,
        474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,
        506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,
        538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,
        570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,
        602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,
        634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,
        666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,
        698,700,0,61,2,0,57,57,172,172,4,0,91,91,121,121,226,226,325,325,
        1,0,395,396,2,0,50,50,346,346,2,0,34,34,282,282,1,0,89,90,2,0,139,
        139,154,154,2,0,67,67,295,295,2,0,68,68,296,296,1,0,155,156,2,0,
        114,114,307,307,11,0,7,7,9,9,58,58,86,86,101,101,155,155,161,161,
        190,190,299,299,309,309,365,365,3,0,4,4,101,101,326,326,3,0,15,15,
        128,128,170,170,1,0,141,142,2,0,30,30,351,351,2,0,217,217,373,373,
        2,0,214,214,272,272,2,0,18,18,89,89,2,0,130,130,177,177,2,0,39,39,
        376,376,4,0,112,112,164,164,205,205,356,356,2,0,7,7,96,96,2,0,125,
        125,350,350,2,0,225,225,391,391,2,0,42,42,315,315,2,0,189,189,196,
        196,2,0,426,426,431,431,2,0,140,140,285,285,3,0,12,12,231,231,300,
        300,2,0,241,241,292,292,2,0,198,198,268,268,2,0,260,260,292,292,
        2,0,354,354,431,431,2,0,133,133,247,247,2,0,152,152,281,281,3,0,
        413,414,418,418,420,420,2,0,412,412,415,417,1,0,413,414,4,0,184,
        184,270,270,286,286,408,411,2,0,7,7,13,13,3,0,7,7,13,13,313,313,
        3,0,184,184,270,270,286,286,4,0,125,125,219,219,350,350,360,360,
        2,0,405,405,407,411,24,0,11,11,16,16,25,28,35,35,100,100,131,132,
        151,151,154,154,162,163,184,184,198,198,216,216,228,228,264,264,
        270,270,286,286,311,311,323,324,340,340,357,357,383,383,405,417,
        419,421,423,423,85,0,1,6,8,8,10,10,15,15,18,20,22,24,30,31,33,34,
        37,38,40,44,46,47,49,50,52,53,56,57,59,59,66,66,68,68,72,77,79,79,
        83,85,87,89,91,95,97,99,103,104,106,107,109,111,114,116,118,121,
        127,130,137,138,142,142,147,150,152,152,155,156,158,160,168,170,
        172,177,182,183,185,187,189,193,195,197,199,202,204,204,206,209,
        211,212,214,215,217,218,220,220,222,223,226,227,232,233,235,236,
        238,240,243,246,252,252,254,255,257,259,261,262,265,267,271,282,
        284,284,287,288,293,298,300,303,305,310,312,312,314,317,319,325,
        327,328,330,330,332,334,339,340,342,342,344,346,349,349,352,353,
        355,355,357,357,360,364,366,368,371,373,375,375,377,382,385,385,
        388,394,13,0,16,16,26,28,63,64,71,71,100,100,131,131,145,145,151,
        151,162,163,198,198,264,264,311,311,337,337,2,0,4,4,101,101,2,0,
        9,9,58,58,3,0,14,14,144,144,369,369,1,0,106,107,1,0,94,95,1,0,392,
        393,1,0,208,209,1,0,381,382,1,0,73,74,1,0,148,149,1,0,206,207,1,
        0,297,298,1,0,80,82,5406,0,705,1,0,0,0,2,712,1,0,0,0,4,717,1,0,0,
        0,6,751,1,0,0,0,8,753,1,0,0,0,10,826,1,0,0,0,12,828,1,0,0,0,14,844,
        1,0,0,0,16,853,1,0,0,0,18,861,1,0,0,0,20,874,1,0,0,0,22,885,1,0,
        0,0,24,890,1,0,0,0,26,901,1,0,0,0,28,964,1,0,0,0,30,966,1,0,0,0,
        32,969,1,0,0,0,34,973,1,0,0,0,36,975,1,0,0,0,38,978,1,0,0,0,40,981,
        1,0,0,0,42,1025,1,0,0,0,44,1027,1,0,0,0,46,1030,1,0,0,0,48,1033,
        1,0,0,0,50,1042,1,0,0,0,52,1045,1,0,0,0,54,1060,1,0,0,0,56,1072,
        1,0,0,0,58,1077,1,0,0,0,60,1097,1,0,0,0,62,1101,1,0,0,0,64,1108,
        1,0,0,0,66,1133,1,0,0,0,68,1150,1,0,0,0,70,1152,1,0,0,0,72,1337,
        1,0,0,0,74,1347,1,0,0,0,76,1349,1,0,0,0,78,1354,1,0,0,0,80,1359,
        1,0,0,0,82,1361,1,0,0,0,84,1365,1,0,0,0,86,1369,1,0,0,0,88,1373,
        1,0,0,0,90,1377,1,0,0,0,92,1387,1,0,0,0,94,1398,1,0,0,0,96,1415,
        1,0,0,0,98,1433,1,0,0,0,100,1438,1,0,0,0,102,1441,1,0,0,0,104,1445,
        1,0,0,0,106,1452,1,0,0,0,108,1461,1,0,0,0,110,1467,1,0,0,0,112,1469,
        1,0,0,0,114,1483,1,0,0,0,116,1505,1,0,0,0,118,1507,1,0,0,0,120,1515,
        1,0,0,0,122,1522,1,0,0,0,124,1524,1,0,0,0,126,1538,1,0,0,0,128,1545,
        1,0,0,0,130,1547,1,0,0,0,132,1551,1,0,0,0,134,1555,1,0,0,0,136,1559,
        1,0,0,0,138,1563,1,0,0,0,140,1576,1,0,0,0,142,1584,1,0,0,0,144,1587,
        1,0,0,0,146,1589,1,0,0,0,148,1601,1,0,0,0,150,1611,1,0,0,0,152,1614,
        1,0,0,0,154,1625,1,0,0,0,156,1633,1,0,0,0,158,1676,1,0,0,0,160,1685,
        1,0,0,0,162,1713,1,0,0,0,164,1726,1,0,0,0,166,1728,1,0,0,0,168,1734,
        1,0,0,0,170,1737,1,0,0,0,172,1743,1,0,0,0,174,1749,1,0,0,0,176,1756,
        1,0,0,0,178,1790,1,0,0,0,180,1798,1,0,0,0,182,1811,1,0,0,0,184,1816,
        1,0,0,0,186,1827,1,0,0,0,188,1844,1,0,0,0,190,1846,1,0,0,0,192,1851,
        1,0,0,0,194,1858,1,0,0,0,196,1860,1,0,0,0,198,1863,1,0,0,0,200,1866,
        1,0,0,0,202,1880,1,0,0,0,204,1888,1,0,0,0,206,1914,1,0,0,0,208,1916,
        1,0,0,0,210,1933,1,0,0,0,212,1947,1,0,0,0,214,1949,1,0,0,0,216,1952,
        1,0,0,0,218,1955,1,0,0,0,220,1964,1,0,0,0,222,1984,1,0,0,0,224,1986,
        1,0,0,0,226,1989,1,0,0,0,228,2002,1,0,0,0,230,2004,1,0,0,0,232,2008,
        1,0,0,0,234,2016,1,0,0,0,236,2020,1,0,0,0,238,2029,1,0,0,0,240,2035,
        1,0,0,0,242,2041,1,0,0,0,244,2046,1,0,0,0,246,2092,1,0,0,0,248,2094,
        1,0,0,0,250,2102,1,0,0,0,252,2110,1,0,0,0,254,2118,1,0,0,0,256,2128,
        1,0,0,0,258,2130,1,0,0,0,260,2132,1,0,0,0,262,2145,1,0,0,0,264,2153,
        1,0,0,0,266,2162,1,0,0,0,268,2166,1,0,0,0,270,2168,1,0,0,0,272,2173,
        1,0,0,0,274,2175,1,0,0,0,276,2179,1,0,0,0,278,2185,1,0,0,0,280,2193,
        1,0,0,0,282,2195,1,0,0,0,284,2198,1,0,0,0,286,2205,1,0,0,0,288,2216,
        1,0,0,0,290,2229,1,0,0,0,292,2231,1,0,0,0,294,2239,1,0,0,0,296,2243,
        1,0,0,0,298,2251,1,0,0,0,300,2253,1,0,0,0,302,2256,1,0,0,0,304,2263,
        1,0,0,0,306,2271,1,0,0,0,308,2278,1,0,0,0,310,2286,1,0,0,0,312,2294,
        1,0,0,0,314,2298,1,0,0,0,316,2300,1,0,0,0,318,2311,1,0,0,0,320,2315,
        1,0,0,0,322,2327,1,0,0,0,324,2335,1,0,0,0,326,2339,1,0,0,0,328,2351,
        1,0,0,0,330,2363,1,0,0,0,332,2368,1,0,0,0,334,2373,1,0,0,0,336,2375,
        1,0,0,0,338,2379,1,0,0,0,340,2383,1,0,0,0,342,2390,1,0,0,0,344,2392,
        1,0,0,0,346,2405,1,0,0,0,348,2444,1,0,0,0,350,2446,1,0,0,0,352,2451,
        1,0,0,0,354,2456,1,0,0,0,356,2463,1,0,0,0,358,2468,1,0,0,0,360,2473,
        1,0,0,0,362,2479,1,0,0,0,364,2481,1,0,0,0,366,2490,1,0,0,0,368,2502,
        1,0,0,0,370,2582,1,0,0,0,372,2588,1,0,0,0,374,2614,1,0,0,0,376,2616,
        1,0,0,0,378,2638,1,0,0,0,380,2643,1,0,0,0,382,2647,1,0,0,0,384,2679,
        1,0,0,0,386,2681,1,0,0,0,388,2692,1,0,0,0,390,2698,1,0,0,0,392,2700,
        1,0,0,0,394,2732,1,0,0,0,396,2739,1,0,0,0,398,2745,1,0,0,0,400,2751,
        1,0,0,0,402,2766,1,0,0,0,404,2776,1,0,0,0,406,2784,1,0,0,0,408,2787,
        1,0,0,0,410,2790,1,0,0,0,412,2793,1,0,0,0,414,2915,1,0,0,0,416,3049,
        1,0,0,0,418,3077,1,0,0,0,420,3094,1,0,0,0,422,3111,1,0,0,0,424,3113,
        1,0,0,0,426,3116,1,0,0,0,428,3142,1,0,0,0,430,3147,1,0,0,0,432,3174,
        1,0,0,0,434,3185,1,0,0,0,436,3322,1,0,0,0,438,3324,1,0,0,0,440,3347,
        1,0,0,0,442,3359,1,0,0,0,444,3364,1,0,0,0,446,3372,1,0,0,0,448,3380,
        1,0,0,0,450,3392,1,0,0,0,452,3426,1,0,0,0,454,3428,1,0,0,0,456,3446,
        1,0,0,0,458,3455,1,0,0,0,460,3485,1,0,0,0,462,3544,1,0,0,0,464,3546,
        1,0,0,0,466,3575,1,0,0,0,468,3577,1,0,0,0,470,3593,1,0,0,0,472,3605,
        1,0,0,0,474,3607,1,0,0,0,476,3611,1,0,0,0,478,3621,1,0,0,0,480,3631,
        1,0,0,0,482,3636,1,0,0,0,484,3643,1,0,0,0,486,3647,1,0,0,0,488,3668,
        1,0,0,0,490,3673,1,0,0,0,492,3675,1,0,0,0,494,3679,1,0,0,0,496,3705,
        1,0,0,0,498,3708,1,0,0,0,500,3729,1,0,0,0,502,3734,1,0,0,0,504,3765,
        1,0,0,0,506,3767,1,0,0,0,508,3791,1,0,0,0,510,3822,1,0,0,0,512,3824,
        1,0,0,0,514,3826,1,0,0,0,516,3828,1,0,0,0,518,3853,1,0,0,0,520,3855,
        1,0,0,0,522,3863,1,0,0,0,524,3889,1,0,0,0,526,3891,1,0,0,0,528,3911,
        1,0,0,0,530,3913,1,0,0,0,532,3924,1,0,0,0,534,3937,1,0,0,0,536,3972,
        1,0,0,0,538,3974,1,0,0,0,540,3977,1,0,0,0,542,3982,1,0,0,0,544,3984,
        1,0,0,0,546,4006,1,0,0,0,548,4008,1,0,0,0,550,4012,1,0,0,0,552,4021,
        1,0,0,0,554,4031,1,0,0,0,556,4035,1,0,0,0,558,4039,1,0,0,0,560,4115,
        1,0,0,0,562,4117,1,0,0,0,564,4120,1,0,0,0,566,4124,1,0,0,0,568,4129,
        1,0,0,0,570,4131,1,0,0,0,572,4142,1,0,0,0,574,4159,1,0,0,0,576,4175,
        1,0,0,0,578,4184,1,0,0,0,580,4199,1,0,0,0,582,4229,1,0,0,0,584,4231,
        1,0,0,0,586,4248,1,0,0,0,588,4264,1,0,0,0,590,4266,1,0,0,0,592,4285,
        1,0,0,0,594,4290,1,0,0,0,596,4305,1,0,0,0,598,4313,1,0,0,0,600,4321,
        1,0,0,0,602,4329,1,0,0,0,604,4337,1,0,0,0,606,4345,1,0,0,0,608,4353,
        1,0,0,0,610,4355,1,0,0,0,612,4365,1,0,0,0,614,4373,1,0,0,0,616,4389,
        1,0,0,0,618,4393,1,0,0,0,620,4398,1,0,0,0,622,4400,1,0,0,0,624,4411,
        1,0,0,0,626,4413,1,0,0,0,628,4431,1,0,0,0,630,4436,1,0,0,0,632,4444,
        1,0,0,0,634,4452,1,0,0,0,636,4456,1,0,0,0,638,4468,1,0,0,0,640,4473,
        1,0,0,0,642,4484,1,0,0,0,644,4491,1,0,0,0,646,4493,1,0,0,0,648,4497,
        1,0,0,0,650,4499,1,0,0,0,652,4504,1,0,0,0,654,4506,1,0,0,0,656,4508,
        1,0,0,0,658,4561,1,0,0,0,660,4728,1,0,0,0,662,4730,1,0,0,0,664,4739,
        1,0,0,0,666,4741,1,0,0,0,668,4752,1,0,0,0,670,4754,1,0,0,0,672,4759,
        1,0,0,0,674,4761,1,0,0,0,676,4763,1,0,0,0,678,4765,1,0,0,0,680,4767,
        1,0,0,0,682,4769,1,0,0,0,684,4771,1,0,0,0,686,4773,1,0,0,0,688,4775,
        1,0,0,0,690,4777,1,0,0,0,692,4779,1,0,0,0,694,4787,1,0,0,0,696,4795,
        1,0,0,0,698,4809,1,0,0,0,700,4811,1,0,0,0,702,704,3,2,1,0,703,702,
        1,0,0,0,704,707,1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,708,
        1,0,0,0,707,705,1,0,0,0,708,709,5,0,0,1,709,1,1,0,0,0,710,713,3,
        4,2,0,711,713,3,10,5,0,712,710,1,0,0,0,712,711,1,0,0,0,713,715,1,
        0,0,0,714,716,5,398,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,3,1,
        0,0,0,717,727,5,119,0,0,718,720,3,6,3,0,719,718,1,0,0,0,720,723,
        1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,724,1,0,0,0,723,721,
        1,0,0,0,724,728,3,10,5,0,725,726,5,284,0,0,726,728,3,360,180,0,727,
        721,1,0,0,0,727,725,1,0,0,0,728,5,1,0,0,0,729,752,5,122,0,0,730,
        752,5,138,0,0,731,752,5,88,0,0,732,734,5,37,0,0,733,735,7,0,0,0,
        734,733,1,0,0,0,734,735,1,0,0,0,735,752,1,0,0,0,736,752,5,192,0,
        0,737,752,5,21,0,0,738,752,5,10,0,0,739,752,5,275,0,0,740,752,5,
        191,0,0,741,752,5,19,0,0,742,744,5,377,0,0,743,745,5,225,0,0,744,
        743,1,0,0,0,744,745,1,0,0,0,745,747,1,0,0,0,746,748,3,8,4,0,747,
        746,1,0,0,0,747,748,1,0,0,0,748,752,1,0,0,0,749,752,5,79,0,0,750,
        752,5,78,0,0,751,729,1,0,0,0,751,730,1,0,0,0,751,731,1,0,0,0,751,
        732,1,0,0,0,751,736,1,0,0,0,751,737,1,0,0,0,751,738,1,0,0,0,751,
        739,1,0,0,0,751,740,1,0,0,0,751,741,1,0,0,0,751,742,1,0,0,0,751,
        749,1,0,0,0,751,750,1,0,0,0,752,7,1,0,0,0,753,754,7,1,0,0,754,9,
        1,0,0,0,755,827,3,360,180,0,756,827,3,12,6,0,757,827,3,16,8,0,758,
        827,3,18,9,0,759,827,3,20,10,0,760,827,3,24,12,0,761,762,5,277,0,
        0,762,763,5,320,0,0,763,766,3,472,236,0,764,765,5,387,0,0,765,767,
        3,230,115,0,766,764,1,0,0,0,766,767,1,0,0,0,767,827,1,0,0,0,768,
        827,3,28,14,0,769,770,5,86,0,0,770,771,5,139,0,0,771,773,3,478,239,
        0,772,774,3,496,248,0,773,772,1,0,0,0,773,774,1,0,0,0,774,827,1,
        0,0,0,775,776,5,365,0,0,776,777,3,478,239,0,777,779,3,392,196,0,
        778,780,3,496,248,0,779,778,1,0,0,0,779,780,1,0,0,0,780,827,1,0,
        0,0,781,827,3,394,197,0,782,784,5,203,0,0,783,785,5,436,0,0,784,
        783,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,786,787,5,166,0,0,787,
        792,3,478,239,0,788,790,5,17,0,0,789,788,1,0,0,0,789,790,1,0,0,0,
        790,791,1,0,0,0,791,793,3,648,324,0,792,789,1,0,0,0,792,793,1,0,
        0,0,793,794,1,0,0,0,794,795,5,370,0,0,795,796,3,456,228,0,796,797,
        5,224,0,0,797,798,3,590,295,0,798,799,3,398,199,0,799,827,1,0,0,
        0,800,801,5,249,0,0,801,802,3,648,324,0,802,803,5,139,0,0,803,804,
        3,360,180,0,804,827,1,0,0,0,805,806,5,115,0,0,806,807,3,648,324,
        0,807,808,5,370,0,0,808,809,3,296,148,0,809,827,1,0,0,0,810,811,
        5,304,0,0,811,816,3,658,329,0,812,813,7,2,0,0,813,815,3,658,329,
        0,814,812,1,0,0,0,815,818,1,0,0,0,816,814,1,0,0,0,816,817,1,0,0,
        0,817,819,1,0,0,0,818,816,1,0,0,0,819,823,5,405,0,0,820,822,9,0,
        0,0,821,820,1,0,0,0,822,825,1,0,0,0,823,824,1,0,0,0,823,821,1,0,
        0,0,824,827,1,0,0,0,825,823,1,0,0,0,826,755,1,0,0,0,826,756,1,0,
        0,0,826,757,1,0,0,0,826,758,1,0,0,0,826,759,1,0,0,0,826,760,1,0,
        0,0,826,761,1,0,0,0,826,768,1,0,0,0,826,769,1,0,0,0,826,775,1,0,
        0,0,826,781,1,0,0,0,826,782,1,0,0,0,826,800,1,0,0,0,826,805,1,0,
        0,0,826,810,1,0,0,0,827,11,1,0,0,0,828,829,5,187,0,0,829,831,5,66,
        0,0,830,832,5,188,0,0,831,830,1,0,0,0,831,832,1,0,0,0,832,833,1,
        0,0,0,833,834,5,158,0,0,834,836,5,426,0,0,835,837,5,235,0,0,836,
        835,1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,838,839,5,166,0,0,839,
        840,5,329,0,0,840,842,3,634,317,0,841,843,3,56,28,0,842,841,1,0,
        0,0,842,843,1,0,0,0,843,13,1,0,0,0,844,846,5,134,0,0,845,847,5,204,
        0,0,846,845,1,0,0,0,846,847,1,0,0,0,847,848,1,0,0,0,848,849,5,279,
        0,0,849,850,5,399,0,0,850,851,5,426,0,0,851,852,5,400,0,0,852,15,
        1,0,0,0,853,854,5,120,0,0,854,855,5,329,0,0,855,856,3,634,317,0,
        856,857,5,341,0,0,857,859,5,426,0,0,858,860,3,14,7,0,859,858,1,0,
        0,0,859,860,1,0,0,0,860,17,1,0,0,0,861,867,5,153,0,0,862,864,5,123,
        0,0,863,862,1,0,0,0,863,864,1,0,0,0,864,865,1,0,0,0,865,866,5,329,
        0,0,866,868,3,634,317,0,867,863,1,0,0,0,867,868,1,0,0,0,868,869,
        1,0,0,0,869,870,5,139,0,0,870,872,5,426,0,0,871,873,3,424,212,0,
        872,871,1,0,0,0,872,873,1,0,0,0,873,19,1,0,0,0,874,875,5,277,0,0,
        875,876,5,103,0,0,876,879,3,22,11,0,877,878,5,278,0,0,878,880,3,
        22,11,0,879,877,1,0,0,0,879,880,1,0,0,0,880,883,1,0,0,0,881,882,
        5,387,0,0,882,884,3,230,115,0,883,881,1,0,0,0,883,884,1,0,0,0,884,
        21,1,0,0,0,885,888,3,472,236,0,886,887,5,395,0,0,887,889,3,26,13,
        0,888,886,1,0,0,0,888,889,1,0,0,0,889,23,1,0,0,0,890,891,5,277,0,
        0,891,892,5,187,0,0,892,895,3,22,11,0,893,894,5,166,0,0,894,896,
        3,472,236,0,895,893,1,0,0,0,895,896,1,0,0,0,896,899,1,0,0,0,897,
        898,5,387,0,0,898,900,3,230,115,0,899,897,1,0,0,0,899,900,1,0,0,
        0,900,25,1,0,0,0,901,904,5,426,0,0,902,903,5,395,0,0,903,905,5,426,
        0,0,904,902,1,0,0,0,904,905,1,0,0,0,905,27,1,0,0,0,906,965,3,42,
        21,0,907,965,3,46,23,0,908,965,3,48,24,0,909,965,3,436,218,0,910,
        965,3,54,27,0,911,965,3,52,26,0,912,965,3,412,206,0,913,965,3,64,
        32,0,914,965,3,72,36,0,915,965,3,138,69,0,916,965,3,160,80,0,917,
        965,3,176,88,0,918,965,3,180,90,0,919,965,3,184,92,0,920,965,3,182,
        91,0,921,965,3,174,87,0,922,965,3,178,89,0,923,965,3,146,73,0,924,
        965,3,152,76,0,925,965,3,148,74,0,926,965,3,150,75,0,927,965,3,154,
        77,0,928,965,3,156,78,0,929,965,3,158,79,0,930,965,3,66,33,0,931,
        965,3,76,38,0,932,965,3,82,41,0,933,965,3,78,39,0,934,965,3,84,42,
        0,935,965,3,86,43,0,936,965,3,88,44,0,937,965,3,90,45,0,938,965,
        3,92,46,0,939,965,3,106,53,0,940,965,3,98,49,0,941,965,3,108,54,
        0,942,965,3,100,50,0,943,965,3,94,47,0,944,965,3,96,48,0,945,965,
        3,104,52,0,946,965,3,102,51,0,947,948,5,1,0,0,948,950,7,3,0,0,949,
        951,5,431,0,0,950,949,1,0,0,0,951,952,1,0,0,0,952,950,1,0,0,0,952,
        953,1,0,0,0,953,965,1,0,0,0,954,955,5,176,0,0,955,957,5,258,0,0,
        956,958,5,426,0,0,957,956,1,0,0,0,958,959,1,0,0,0,959,957,1,0,0,
        0,959,960,1,0,0,0,960,965,1,0,0,0,961,965,3,660,330,0,962,965,3,
        438,219,0,963,965,3,440,220,0,964,906,1,0,0,0,964,907,1,0,0,0,964,
        908,1,0,0,0,964,909,1,0,0,0,964,910,1,0,0,0,964,911,1,0,0,0,964,
        912,1,0,0,0,964,913,1,0,0,0,964,914,1,0,0,0,964,915,1,0,0,0,964,
        916,1,0,0,0,964,917,1,0,0,0,964,918,1,0,0,0,964,919,1,0,0,0,964,
        920,1,0,0,0,964,921,1,0,0,0,964,922,1,0,0,0,964,923,1,0,0,0,964,
        924,1,0,0,0,964,925,1,0,0,0,964,926,1,0,0,0,964,927,1,0,0,0,964,
        928,1,0,0,0,964,929,1,0,0,0,964,930,1,0,0,0,964,931,1,0,0,0,964,
        932,1,0,0,0,964,933,1,0,0,0,964,934,1,0,0,0,964,935,1,0,0,0,964,
        936,1,0,0,0,964,937,1,0,0,0,964,938,1,0,0,0,964,939,1,0,0,0,964,
        940,1,0,0,0,964,941,1,0,0,0,964,942,1,0,0,0,964,943,1,0,0,0,964,
        944,1,0,0,0,964,945,1,0,0,0,964,946,1,0,0,0,964,947,1,0,0,0,964,
        954,1,0,0,0,964,961,1,0,0,0,964,962,1,0,0,0,964,963,1,0,0,0,965,
        29,1,0,0,0,966,967,5,151,0,0,967,968,5,117,0,0,968,31,1,0,0,0,969,
        970,5,151,0,0,970,971,5,216,0,0,971,972,5,117,0,0,972,33,1,0,0,0,
        973,974,7,4,0,0,974,35,1,0,0,0,975,976,3,672,336,0,976,977,5,284,
        0,0,977,37,1,0,0,0,978,979,3,674,337,0,979,980,5,284,0,0,980,39,
        1,0,0,0,981,982,5,321,0,0,982,983,5,17,0,0,983,984,5,92,0,0,984,
        41,1,0,0,0,985,987,5,58,0,0,986,988,5,273,0,0,987,986,1,0,0,0,987,
        988,1,0,0,0,988,989,1,0,0,0,989,991,3,70,35,0,990,992,3,32,16,0,
        991,990,1,0,0,0,991,992,1,0,0,0,992,993,1,0,0,0,993,995,3,474,237,
        0,994,996,3,50,25,0,995,994,1,0,0,0,995,996,1,0,0,0,996,998,1,0,
        0,0,997,999,3,424,212,0,998,997,1,0,0,0,998,999,1,0,0,0,999,1002,
        1,0,0,0,1000,1001,5,196,0,0,1001,1003,5,426,0,0,1002,1000,1,0,0,
        0,1002,1003,1,0,0,0,1003,1007,1,0,0,0,1004,1005,5,387,0,0,1005,1006,
        5,76,0,0,1006,1008,3,230,115,0,1007,1004,1,0,0,0,1007,1008,1,0,0,
        0,1008,1026,1,0,0,0,1009,1010,5,58,0,0,1010,1011,5,273,0,0,1011,
        1013,3,70,35,0,1012,1014,3,32,16,0,1013,1012,1,0,0,0,1013,1014,1,
        0,0,0,1014,1015,1,0,0,0,1015,1017,3,474,237,0,1016,1018,3,50,25,
        0,1017,1016,1,0,0,0,1017,1018,1,0,0,0,1018,1019,1,0,0,0,1019,1023,
        3,44,22,0,1020,1021,5,387,0,0,1021,1022,5,76,0,0,1022,1024,3,230,
        115,0,1023,1020,1,0,0,0,1023,1024,1,0,0,0,1024,1026,1,0,0,0,1025,
        985,1,0,0,0,1025,1009,1,0,0,0,1026,43,1,0,0,0,1027,1028,5,370,0,
        0,1028,1029,3,472,236,0,1029,45,1,0,0,0,1030,1031,5,368,0,0,1031,
        1032,3,472,236,0,1032,47,1,0,0,0,1033,1034,5,101,0,0,1034,1036,3,
        70,35,0,1035,1037,3,30,15,0,1036,1035,1,0,0,0,1036,1037,1,0,0,0,
        1037,1038,1,0,0,0,1038,1040,3,472,236,0,1039,1041,3,34,17,0,1040,
        1039,1,0,0,0,1040,1041,1,0,0,0,1041,49,1,0,0,0,1042,1043,5,47,0,
        0,1043,1044,5,426,0,0,1044,51,1,0,0,0,1045,1047,5,351,0,0,1046,1048,
        5,329,0,0,1047,1046,1,0,0,0,1047,1048,1,0,0,0,1048,1049,1,0,0,0,
        1049,1055,3,634,317,0,1050,1051,5,46,0,0,1051,1052,5,399,0,0,1052,
        1053,3,254,127,0,1053,1054,5,400,0,0,1054,1056,1,0,0,0,1055,1050,
        1,0,0,0,1055,1056,1,0,0,0,1056,1058,1,0,0,0,1057,1059,5,135,0,0,
        1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,53,1,0,0,0,1060,1061,5,
        101,0,0,1061,1063,5,329,0,0,1062,1064,3,30,15,0,1063,1062,1,0,0,
        0,1063,1064,1,0,0,0,1064,1065,1,0,0,0,1065,1067,3,478,239,0,1066,
        1068,5,255,0,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1070,1,0,
        0,0,1069,1071,3,14,7,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,
        55,1,0,0,0,1072,1073,5,160,0,0,1073,1074,5,426,0,0,1074,1075,5,301,
        0,0,1075,1076,5,426,0,0,1076,57,1,0,0,0,1077,1080,3,648,324,0,1078,
        1079,5,395,0,0,1079,1081,3,648,324,0,1080,1078,1,0,0,0,1080,1081,
        1,0,0,0,1081,1095,1,0,0,0,1082,1092,3,648,324,0,1083,1088,5,395,
        0,0,1084,1089,5,104,0,0,1085,1089,5,175,0,0,1086,1089,5,375,0,0,
        1087,1089,3,648,324,0,1088,1084,1,0,0,0,1088,1085,1,0,0,0,1088,1086,
        1,0,0,0,1088,1087,1,0,0,0,1089,1091,1,0,0,0,1090,1083,1,0,0,0,1091,
        1094,1,0,0,0,1092,1090,1,0,0,0,1092,1093,1,0,0,0,1093,1096,1,0,0,
        0,1094,1092,1,0,0,0,1095,1082,1,0,0,0,1095,1096,1,0,0,0,1096,59,
        1,0,0,0,1097,1099,3,58,29,0,1098,1100,3,636,318,0,1099,1098,1,0,
        0,0,1099,1100,1,0,0,0,1100,61,1,0,0,0,1101,1103,3,476,238,0,1102,
        1104,3,636,318,0,1103,1102,1,0,0,0,1103,1104,1,0,0,0,1104,1106,1,
        0,0,0,1105,1107,3,260,130,0,1106,1105,1,0,0,0,1106,1107,1,0,0,0,
        1107,63,1,0,0,0,1108,1131,7,5,0,0,1109,1111,3,70,35,0,1110,1112,
        5,122,0,0,1111,1110,1,0,0,0,1111,1112,1,0,0,0,1112,1113,1,0,0,0,
        1113,1114,3,472,236,0,1114,1132,1,0,0,0,1115,1117,5,69,0,0,1116,
        1118,5,122,0,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1119,1,0,
        0,0,1119,1132,3,472,236,0,1120,1122,5,141,0,0,1121,1123,5,122,0,
        0,1122,1121,1,0,0,0,1122,1123,1,0,0,0,1123,1124,1,0,0,0,1124,1132,
        3,566,283,0,1125,1128,5,138,0,0,1126,1128,5,122,0,0,1127,1125,1,
        0,0,0,1127,1126,1,0,0,0,1128,1129,1,0,0,0,1129,1132,3,62,31,0,1130,
        1132,3,62,31,0,1131,1109,1,0,0,0,1131,1115,1,0,0,0,1131,1120,1,0,
        0,0,1131,1127,1,0,0,0,1131,1130,1,0,0,0,1132,65,1,0,0,0,1133,1134,
        5,10,0,0,1134,1135,5,329,0,0,1135,1148,3,634,317,0,1136,1137,5,52,
        0,0,1137,1144,5,319,0,0,1138,1145,5,215,0,0,1139,1140,5,134,0,0,
        1140,1142,5,46,0,0,1141,1143,3,254,127,0,1142,1141,1,0,0,0,1142,
        1143,1,0,0,0,1143,1145,1,0,0,0,1144,1138,1,0,0,0,1144,1139,1,0,0,
        0,1144,1145,1,0,0,0,1145,1149,1,0,0,0,1146,1147,5,33,0,0,1147,1149,
        5,204,0,0,1148,1136,1,0,0,0,1148,1146,1,0,0,0,1149,67,1,0,0,0,1150,
        1151,7,6,0,0,1151,69,1,0,0,0,1152,1153,7,7,0,0,1153,71,1,0,0,0,1154,
        1155,5,308,0,0,1155,1158,7,8,0,0,1156,1157,5,184,0,0,1157,1159,3,
        194,97,0,1158,1156,1,0,0,0,1158,1159,1,0,0,0,1159,1338,1,0,0,0,1160,
        1162,5,308,0,0,1161,1163,5,122,0,0,1162,1161,1,0,0,0,1162,1163,1,
        0,0,0,1163,1164,1,0,0,0,1164,1168,5,330,0,0,1165,1166,3,68,34,0,
        1166,1167,3,472,236,0,1167,1169,1,0,0,0,1168,1165,1,0,0,0,1168,1169,
        1,0,0,0,1169,1171,1,0,0,0,1170,1172,3,74,37,0,1171,1170,1,0,0,0,
        1171,1172,1,0,0,0,1172,1338,1,0,0,0,1173,1174,5,308,0,0,1174,1178,
        5,379,0,0,1175,1176,3,68,34,0,1176,1177,3,472,236,0,1177,1179,1,
        0,0,0,1178,1175,1,0,0,0,1178,1179,1,0,0,0,1179,1183,1,0,0,0,1180,
        1181,5,184,0,0,1181,1184,3,194,97,0,1182,1184,3,194,97,0,1183,1180,
        1,0,0,0,1183,1182,1,0,0,0,1183,1184,1,0,0,0,1184,1338,1,0,0,0,1185,
        1186,5,308,0,0,1186,1187,5,202,0,0,1187,1191,5,379,0,0,1188,1189,
        3,68,34,0,1189,1190,3,472,236,0,1190,1192,1,0,0,0,1191,1188,1,0,
        0,0,1191,1192,1,0,0,0,1192,1196,1,0,0,0,1193,1194,5,184,0,0,1194,
        1197,3,194,97,0,1195,1197,3,194,97,0,1196,1193,1,0,0,0,1196,1195,
        1,0,0,0,1196,1197,1,0,0,0,1197,1338,1,0,0,0,1198,1200,5,308,0,0,
        1199,1201,5,315,0,0,1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,1202,
        1,0,0,0,1202,1203,5,46,0,0,1203,1204,3,68,34,0,1204,1208,3,476,238,
        0,1205,1206,3,68,34,0,1206,1207,3,472,236,0,1207,1209,1,0,0,0,1208,
        1205,1,0,0,0,1208,1209,1,0,0,0,1209,1213,1,0,0,0,1210,1211,5,184,
        0,0,1211,1214,3,194,97,0,1212,1214,3,194,97,0,1213,1210,1,0,0,0,
        1213,1212,1,0,0,0,1213,1214,1,0,0,0,1214,1338,1,0,0,0,1215,1216,
        5,308,0,0,1216,1219,5,142,0,0,1217,1218,5,184,0,0,1218,1220,3,566,
        283,0,1219,1217,1,0,0,0,1219,1220,1,0,0,0,1220,1338,1,0,0,0,1221,
        1222,5,308,0,0,1222,1223,5,239,0,0,1223,1225,3,476,238,0,1224,1226,
        3,636,318,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1228,1,0,0,
        0,1227,1229,3,496,248,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,
        1231,1,0,0,0,1230,1232,3,552,276,0,1231,1230,1,0,0,0,1231,1232,1,
        0,0,0,1232,1234,1,0,0,0,1233,1235,3,386,193,0,1234,1233,1,0,0,0,
        1234,1235,1,0,0,0,1235,1338,1,0,0,0,1236,1237,5,308,0,0,1237,1243,
        5,58,0,0,1238,1239,3,70,35,0,1239,1240,3,472,236,0,1240,1244,1,0,
        0,0,1241,1242,5,329,0,0,1242,1244,3,478,239,0,1243,1238,1,0,0,0,
        1243,1241,1,0,0,0,1244,1338,1,0,0,0,1245,1246,5,308,0,0,1246,1247,
        5,329,0,0,1247,1251,5,122,0,0,1248,1249,3,68,34,0,1249,1250,3,472,
        236,0,1250,1252,1,0,0,0,1251,1248,1,0,0,0,1251,1252,1,0,0,0,1252,
        1253,1,0,0,0,1253,1254,5,184,0,0,1254,1256,3,194,97,0,1255,1257,
        3,636,318,0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1338,1,0,0,
        0,1258,1259,5,308,0,0,1259,1260,5,332,0,0,1260,1264,3,478,239,0,
        1261,1262,5,399,0,0,1262,1263,5,426,0,0,1263,1265,5,400,0,0,1264,
        1261,1,0,0,0,1264,1265,1,0,0,0,1265,1338,1,0,0,0,1266,1267,5,308,
        0,0,1267,1279,5,191,0,0,1268,1269,3,70,35,0,1269,1271,3,472,236,
        0,1270,1272,5,122,0,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,1280,
        1,0,0,0,1273,1275,3,60,30,0,1274,1273,1,0,0,0,1274,1275,1,0,0,0,
        1275,1277,1,0,0,0,1276,1278,5,122,0,0,1277,1276,1,0,0,0,1277,1278,
        1,0,0,0,1278,1280,1,0,0,0,1279,1268,1,0,0,0,1279,1274,1,0,0,0,1280,
        1338,1,0,0,0,1281,1282,5,308,0,0,1282,1309,5,50,0,0,1283,1284,5,
        51,0,0,1284,1285,5,405,0,0,1285,1310,5,431,0,0,1286,1287,3,70,35,
        0,1287,1288,3,472,236,0,1288,1293,1,0,0,0,1289,1291,3,60,30,0,1290,
        1289,1,0,0,0,1290,1291,1,0,0,0,1291,1293,1,0,0,0,1292,1286,1,0,0,
        0,1292,1290,1,0,0,0,1293,1295,1,0,0,0,1294,1296,3,406,203,0,1295,
        1294,1,0,0,0,1295,1296,1,0,0,0,1296,1298,1,0,0,0,1297,1299,3,408,
        204,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,1301,1,0,0,0,1300,
        1302,3,410,205,0,1301,1300,1,0,0,0,1301,1302,1,0,0,0,1302,1304,1,
        0,0,0,1303,1305,3,552,276,0,1304,1303,1,0,0,0,1304,1305,1,0,0,0,
        1305,1307,1,0,0,0,1306,1308,3,386,193,0,1307,1306,1,0,0,0,1307,1308,
        1,0,0,0,1308,1310,1,0,0,0,1309,1283,1,0,0,0,1309,1292,1,0,0,0,1310,
        1338,1,0,0,0,1311,1312,5,308,0,0,1312,1338,5,346,0,0,1313,1314,5,
        308,0,0,1314,1315,5,54,0,0,1315,1338,5,426,0,0,1316,1317,5,308,0,
        0,1317,1321,5,280,0,0,1318,1319,5,243,0,0,1319,1322,3,648,324,0,
        1320,1322,5,244,0,0,1321,1318,1,0,0,0,1321,1320,1,0,0,0,1322,1338,
        1,0,0,0,1323,1324,5,308,0,0,1324,1338,5,70,0,0,1325,1327,5,308,0,
        0,1326,1328,5,138,0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1329,
        1,0,0,0,1329,1330,7,9,0,0,1330,1331,5,224,0,0,1331,1335,3,478,239,
        0,1332,1333,3,68,34,0,1333,1334,3,472,236,0,1334,1336,1,0,0,0,1335,
        1332,1,0,0,0,1335,1336,1,0,0,0,1336,1338,1,0,0,0,1337,1154,1,0,0,
        0,1337,1160,1,0,0,0,1337,1173,1,0,0,0,1337,1185,1,0,0,0,1337,1198,
        1,0,0,0,1337,1215,1,0,0,0,1337,1221,1,0,0,0,1337,1236,1,0,0,0,1337,
        1245,1,0,0,0,1337,1258,1,0,0,0,1337,1266,1,0,0,0,1337,1281,1,0,0,
        0,1337,1311,1,0,0,0,1337,1313,1,0,0,0,1337,1316,1,0,0,0,1337,1323,
        1,0,0,0,1337,1325,1,0,0,0,1338,73,1,0,0,0,1339,1340,5,384,0,0,1340,
        1341,3,648,324,0,1341,1342,5,405,0,0,1342,1343,5,426,0,0,1343,1348,
        1,0,0,0,1344,1345,5,184,0,0,1345,1348,3,194,97,0,1346,1348,3,194,
        97,0,1347,1339,1,0,0,0,1347,1344,1,0,0,0,1347,1346,1,0,0,0,1348,
        75,1,0,0,0,1349,1350,5,190,0,0,1350,1351,5,329,0,0,1351,1352,3,634,
        317,0,1352,1353,3,80,40,0,1353,77,1,0,0,0,1354,1355,5,190,0,0,1355,
        1356,3,70,35,0,1356,1357,3,472,236,0,1357,1358,3,80,40,0,1358,79,
        1,0,0,0,1359,1360,7,10,0,0,1360,81,1,0,0,0,1361,1362,5,361,0,0,1362,
        1363,5,329,0,0,1363,1364,3,634,317,0,1364,83,1,0,0,0,1365,1366,5,
        361,0,0,1366,1367,3,70,35,0,1367,1368,3,472,236,0,1368,85,1,0,0,
        0,1369,1370,5,58,0,0,1370,1371,5,287,0,0,1371,1372,3,648,324,0,1372,
        87,1,0,0,0,1373,1374,5,101,0,0,1374,1375,5,287,0,0,1375,1376,3,648,
        324,0,1376,89,1,0,0,0,1377,1378,5,143,0,0,1378,1380,3,118,59,0,1379,
        1381,3,112,56,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,1382,1,
        0,0,0,1382,1383,5,341,0,0,1383,1385,3,124,62,0,1384,1386,3,130,65,
        0,1385,1384,1,0,0,0,1385,1386,1,0,0,0,1386,91,1,0,0,0,1387,1389,
        5,283,0,0,1388,1390,3,132,66,0,1389,1388,1,0,0,0,1389,1390,1,0,0,
        0,1390,1391,1,0,0,0,1391,1393,3,118,59,0,1392,1394,3,112,56,0,1393,
        1392,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1396,5,139,
        0,0,1396,1397,3,124,62,0,1397,93,1,0,0,0,1398,1400,5,143,0,0,1399,
        1401,5,287,0,0,1400,1399,1,0,0,0,1400,1401,1,0,0,0,1401,1402,1,0,
        0,0,1402,1407,3,648,324,0,1403,1404,5,397,0,0,1404,1406,3,648,324,
        0,1405,1403,1,0,0,0,1406,1409,1,0,0,0,1407,1405,1,0,0,0,1407,1408,
        1,0,0,0,1408,1410,1,0,0,0,1409,1407,1,0,0,0,1410,1411,5,341,0,0,
        1411,1413,3,124,62,0,1412,1414,3,136,68,0,1413,1412,1,0,0,0,1413,
        1414,1,0,0,0,1414,95,1,0,0,0,1415,1417,5,283,0,0,1416,1418,3,134,
        67,0,1417,1416,1,0,0,0,1417,1418,1,0,0,0,1418,1420,1,0,0,0,1419,
        1421,5,287,0,0,1420,1419,1,0,0,0,1420,1421,1,0,0,0,1421,1422,1,0,
        0,0,1422,1427,3,648,324,0,1423,1424,5,397,0,0,1424,1426,3,648,324,
        0,1425,1423,1,0,0,0,1426,1429,1,0,0,0,1427,1425,1,0,0,0,1427,1428,
        1,0,0,0,1428,1430,1,0,0,0,1429,1427,1,0,0,0,1430,1431,5,139,0,0,
        1431,1432,3,124,62,0,1432,97,1,0,0,0,1433,1434,5,308,0,0,1434,1435,
        5,287,0,0,1435,1436,5,143,0,0,1436,1437,3,126,63,0,1437,99,1,0,0,
        0,1438,1439,5,308,0,0,1439,1440,5,288,0,0,1440,101,1,0,0,0,1441,
        1442,5,308,0,0,1442,1443,5,62,0,0,1443,1444,5,288,0,0,1444,103,1,
        0,0,0,1445,1446,5,304,0,0,1446,1450,5,287,0,0,1447,1451,5,7,0,0,
        1448,1451,5,213,0,0,1449,1451,3,648,324,0,1450,1447,1,0,0,0,1450,
        1448,1,0,0,0,1450,1449,1,0,0,0,1451,105,1,0,0,0,1452,1453,5,308,
        0,0,1453,1455,5,143,0,0,1454,1456,3,126,63,0,1455,1454,1,0,0,0,1455,
        1456,1,0,0,0,1456,1459,1,0,0,0,1457,1458,5,224,0,0,1458,1460,3,110,
        55,0,1459,1457,1,0,0,0,1459,1460,1,0,0,0,1460,107,1,0,0,0,1461,1462,
        5,308,0,0,1462,1463,5,252,0,0,1463,1464,3,648,324,0,1464,109,1,0,
        0,0,1465,1468,5,7,0,0,1466,1468,3,116,58,0,1467,1465,1,0,0,0,1467,
        1466,1,0,0,0,1468,111,1,0,0,0,1469,1470,5,224,0,0,1470,1471,3,114,
        57,0,1471,113,1,0,0,0,1472,1473,3,70,35,0,1473,1474,3,472,236,0,
        1474,1484,1,0,0,0,1475,1477,5,329,0,0,1476,1475,1,0,0,0,1476,1477,
        1,0,0,0,1477,1478,1,0,0,0,1478,1484,3,634,317,0,1479,1480,5,366,
        0,0,1480,1484,5,426,0,0,1481,1482,5,303,0,0,1482,1484,3,648,324,
        0,1483,1472,1,0,0,0,1483,1476,1,0,0,0,1483,1479,1,0,0,0,1483,1481,
        1,0,0,0,1484,115,1,0,0,0,1485,1486,3,70,35,0,1486,1487,3,472,236,
        0,1487,1506,1,0,0,0,1488,1490,5,329,0,0,1489,1488,1,0,0,0,1489,1490,
        1,0,0,0,1490,1491,1,0,0,0,1491,1496,3,478,239,0,1492,1493,5,399,
        0,0,1493,1494,3,254,127,0,1494,1495,5,400,0,0,1495,1497,1,0,0,0,
        1496,1492,1,0,0,0,1496,1497,1,0,0,0,1497,1499,1,0,0,0,1498,1500,
        3,636,318,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,1506,1,0,0,
        0,1501,1502,5,366,0,0,1502,1506,5,426,0,0,1503,1504,5,303,0,0,1504,
        1506,3,648,324,0,1505,1485,1,0,0,0,1505,1489,1,0,0,0,1505,1501,1,
        0,0,0,1505,1503,1,0,0,0,1506,117,1,0,0,0,1507,1512,3,120,60,0,1508,
        1509,5,397,0,0,1509,1511,3,120,60,0,1510,1508,1,0,0,0,1511,1514,
        1,0,0,0,1512,1510,1,0,0,0,1512,1513,1,0,0,0,1513,119,1,0,0,0,1514,
        1512,1,0,0,0,1515,1520,3,122,61,0,1516,1517,5,399,0,0,1517,1518,
        3,254,127,0,1518,1519,5,400,0,0,1519,1521,1,0,0,0,1520,1516,1,0,
        0,0,1520,1521,1,0,0,0,1521,121,1,0,0,0,1522,1523,7,11,0,0,1523,123,
        1,0,0,0,1524,1529,3,126,63,0,1525,1526,5,397,0,0,1526,1528,3,126,
        63,0,1527,1525,1,0,0,0,1528,1531,1,0,0,0,1529,1527,1,0,0,0,1529,
        1530,1,0,0,0,1530,125,1,0,0,0,1531,1529,1,0,0,0,1532,1533,5,369,
        0,0,1533,1539,3,652,326,0,1534,1535,5,144,0,0,1535,1539,3,652,326,
        0,1536,1537,5,287,0,0,1537,1539,3,648,324,0,1538,1532,1,0,0,0,1538,
        1534,1,0,0,0,1538,1536,1,0,0,0,1539,127,1,0,0,0,1540,1541,5,369,
        0,0,1541,1546,3,652,326,0,1542,1543,5,287,0,0,1543,1546,3,648,324,
        0,1544,1546,3,648,324,0,1545,1540,1,0,0,0,1545,1542,1,0,0,0,1545,
        1544,1,0,0,0,1546,129,1,0,0,0,1547,1548,5,387,0,0,1548,1549,5,143,
        0,0,1549,1550,5,227,0,0,1550,131,1,0,0,0,1551,1552,5,143,0,0,1552,
        1553,5,227,0,0,1553,1554,5,134,0,0,1554,133,1,0,0,0,1555,1556,5,
        5,0,0,1556,1557,5,227,0,0,1557,1558,5,134,0,0,1558,135,1,0,0,0,1559,
        1560,5,387,0,0,1560,1561,5,5,0,0,1561,1562,5,227,0,0,1562,137,1,
        0,0,0,1563,1565,5,212,0,0,1564,1566,5,276,0,0,1565,1564,1,0,0,0,
        1565,1566,1,0,0,0,1566,1567,1,0,0,0,1567,1568,5,329,0,0,1568,1574,
        3,478,239,0,1569,1570,7,12,0,0,1570,1572,5,239,0,0,1571,1573,3,640,
        320,0,1572,1571,1,0,0,0,1572,1573,1,0,0,0,1573,1575,1,0,0,0,1574,
        1569,1,0,0,0,1574,1575,1,0,0,0,1575,139,1,0,0,0,1576,1581,3,142,
        71,0,1577,1578,5,397,0,0,1578,1580,3,142,71,0,1579,1577,1,0,0,0,
        1580,1583,1,0,0,0,1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,141,1,
        0,0,0,1583,1581,1,0,0,0,1584,1585,3,144,72,0,1585,1586,5,426,0,0,
        1586,143,1,0,0,0,1587,1588,7,13,0,0,1588,145,1,0,0,0,1589,1591,5,
        58,0,0,1590,1592,5,333,0,0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,
        1593,1,0,0,0,1593,1594,5,141,0,0,1594,1595,3,564,282,0,1595,1596,
        5,17,0,0,1596,1599,5,426,0,0,1597,1598,5,370,0,0,1598,1600,3,140,
        70,0,1599,1597,1,0,0,0,1599,1600,1,0,0,0,1600,147,1,0,0,0,1601,1603,
        5,101,0,0,1602,1604,5,333,0,0,1603,1602,1,0,0,0,1603,1604,1,0,0,
        0,1604,1605,1,0,0,0,1605,1607,5,141,0,0,1606,1608,3,30,15,0,1607,
        1606,1,0,0,0,1607,1608,1,0,0,0,1608,1609,1,0,0,0,1609,1610,3,566,
        283,0,1610,149,1,0,0,0,1611,1612,5,271,0,0,1612,1613,7,14,0,0,1613,
        151,1,0,0,0,1614,1615,5,58,0,0,1615,1616,5,333,0,0,1616,1617,5,194,
        0,0,1617,1618,5,432,0,0,1618,1620,5,399,0,0,1619,1621,3,248,124,
        0,1620,1619,1,0,0,0,1620,1621,1,0,0,0,1621,1622,1,0,0,0,1622,1623,
        5,400,0,0,1623,1624,3,590,295,0,1624,153,1,0,0,0,1625,1626,5,101,
        0,0,1626,1627,5,333,0,0,1627,1629,5,194,0,0,1628,1630,3,30,15,0,
        1629,1628,1,0,0,0,1629,1630,1,0,0,0,1630,1631,1,0,0,0,1631,1632,
        5,432,0,0,1632,155,1,0,0,0,1633,1634,5,58,0,0,1634,1635,5,155,0,
        0,1635,1636,3,648,324,0,1636,1637,5,224,0,0,1637,1638,5,329,0,0,
        1638,1639,3,478,239,0,1639,1640,3,264,132,0,1640,1641,5,17,0,0,1641,
        1645,5,426,0,0,1642,1643,5,387,0,0,1643,1644,5,84,0,0,1644,1646,
        5,265,0,0,1645,1642,1,0,0,0,1645,1646,1,0,0,0,1646,1649,1,0,0,0,
        1647,1648,5,150,0,0,1648,1650,3,226,113,0,1649,1647,1,0,0,0,1649,
        1650,1,0,0,0,1650,1654,1,0,0,0,1651,1652,5,154,0,0,1652,1653,5,329,
        0,0,1653,1655,3,478,239,0,1654,1651,1,0,0,0,1654,1655,1,0,0,0,1655,
        1659,1,0,0,0,1656,1657,5,238,0,0,1657,1658,5,32,0,0,1658,1660,3,
        264,132,0,1659,1656,1,0,0,0,1659,1660,1,0,0,0,1660,1665,1,0,0,0,
        1661,1663,3,222,111,0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,1663,1664,
        1,0,0,0,1664,1666,3,246,123,0,1665,1662,1,0,0,0,1665,1666,1,0,0,
        0,1666,1668,1,0,0,0,1667,1669,3,424,212,0,1668,1667,1,0,0,0,1668,
        1669,1,0,0,0,1669,1671,1,0,0,0,1670,1672,3,224,112,0,1671,1670,1,
        0,0,0,1671,1672,1,0,0,0,1672,1674,1,0,0,0,1673,1675,3,196,98,0,1674,
        1673,1,0,0,0,1674,1675,1,0,0,0,1675,157,1,0,0,0,1676,1677,5,101,
        0,0,1677,1679,5,155,0,0,1678,1680,3,30,15,0,1679,1678,1,0,0,0,1679,
        1680,1,0,0,0,1680,1681,1,0,0,0,1681,1682,3,648,324,0,1682,1683,5,
        224,0,0,1683,1684,3,478,239,0,1684,159,1,0,0,0,1685,1688,5,58,0,
        0,1686,1687,5,228,0,0,1687,1689,5,278,0,0,1688,1686,1,0,0,0,1688,
        1689,1,0,0,0,1689,1690,1,0,0,0,1690,1692,5,378,0,0,1691,1693,3,32,
        16,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,1694,1,0,0,0,1694,
        1699,3,484,242,0,1695,1696,5,399,0,0,1696,1697,3,304,152,0,1697,
        1698,5,400,0,0,1698,1700,1,0,0,0,1699,1695,1,0,0,0,1699,1700,1,0,
        0,0,1700,1702,1,0,0,0,1701,1703,3,196,98,0,1702,1701,1,0,0,0,1702,
        1703,1,0,0,0,1703,1705,1,0,0,0,1704,1706,3,162,81,0,1705,1704,1,
        0,0,0,1705,1706,1,0,0,0,1706,1708,1,0,0,0,1707,1709,3,224,112,0,
        1708,1707,1,0,0,0,1708,1709,1,0,0,0,1709,1710,1,0,0,0,1710,1711,
        5,17,0,0,1711,1712,3,380,190,0,1712,161,1,0,0,0,1713,1714,5,238,
        0,0,1714,1720,5,224,0,0,1715,1716,5,399,0,0,1716,1721,3,254,127,
        0,1717,1718,5,316,0,0,1718,1719,5,399,0,0,1719,1721,3,204,102,0,
        1720,1715,1,0,0,0,1720,1717,1,0,0,0,1721,1722,1,0,0,0,1722,1723,
        5,400,0,0,1723,163,1,0,0,0,1724,1727,3,166,83,0,1725,1727,3,168,
        84,0,1726,1724,1,0,0,0,1726,1725,1,0,0,0,1727,165,1,0,0,0,1728,1729,
        5,42,0,0,1729,1730,5,224,0,0,1730,1731,5,399,0,0,1731,1732,3,254,
        127,0,1732,1733,5,400,0,0,1733,167,1,0,0,0,1734,1735,3,170,85,0,
        1735,1736,3,172,86,0,1736,169,1,0,0,0,1737,1738,5,98,0,0,1738,1739,
        5,224,0,0,1739,1740,5,399,0,0,1740,1741,3,254,127,0,1741,1742,5,
        400,0,0,1742,171,1,0,0,0,1743,1744,5,315,0,0,1744,1745,5,224,0,0,
        1745,1746,5,399,0,0,1746,1747,3,254,127,0,1747,1748,5,400,0,0,1748,
        173,1,0,0,0,1749,1750,5,101,0,0,1750,1752,5,378,0,0,1751,1753,3,
        30,15,0,1752,1751,1,0,0,0,1752,1753,1,0,0,0,1753,1754,1,0,0,0,1754,
        1755,3,482,241,0,1755,175,1,0,0,0,1756,1757,5,58,0,0,1757,1758,5,
        202,0,0,1758,1760,5,378,0,0,1759,1761,3,32,16,0,1760,1759,1,0,0,
        0,1760,1761,1,0,0,0,1761,1762,1,0,0,0,1762,1764,3,484,242,0,1763,
        1765,3,38,19,0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,1765,1767,1,0,
        0,0,1766,1768,3,196,98,0,1767,1766,1,0,0,0,1767,1768,1,0,0,0,1768,
        1770,1,0,0,0,1769,1771,3,162,81,0,1770,1769,1,0,0,0,1770,1771,1,
        0,0,0,1771,1773,1,0,0,0,1772,1774,3,164,82,0,1773,1772,1,0,0,0,1773,
        1774,1,0,0,0,1774,1776,1,0,0,0,1775,1777,3,222,111,0,1776,1775,1,
        0,0,0,1776,1777,1,0,0,0,1777,1779,1,0,0,0,1778,1780,3,246,123,0,
        1779,1778,1,0,0,0,1779,1780,1,0,0,0,1780,1782,1,0,0,0,1781,1783,
        3,424,212,0,1782,1781,1,0,0,0,1782,1783,1,0,0,0,1783,1785,1,0,0,
        0,1784,1786,3,224,112,0,1785,1784,1,0,0,0,1785,1786,1,0,0,0,1786,
        1787,1,0,0,0,1787,1788,5,17,0,0,1788,1789,3,380,190,0,1789,177,1,
        0,0,0,1790,1791,5,101,0,0,1791,1792,5,202,0,0,1792,1794,5,378,0,
        0,1793,1795,3,30,15,0,1794,1793,1,0,0,0,1794,1795,1,0,0,0,1795,1796,
        1,0,0,0,1796,1797,3,482,241,0,1797,179,1,0,0,0,1798,1799,5,58,0,
        0,1799,1800,5,293,0,0,1800,1801,5,258,0,0,1801,1802,3,648,324,0,
        1802,1804,3,188,94,0,1803,1805,3,190,95,0,1804,1803,1,0,0,0,1804,
        1805,1,0,0,0,1805,1807,1,0,0,0,1806,1808,3,268,134,0,1807,1806,1,
        0,0,0,1807,1808,1,0,0,0,1808,1809,1,0,0,0,1809,1810,3,192,96,0,1810,
        181,1,0,0,0,1811,1812,5,101,0,0,1812,1813,5,293,0,0,1813,1814,5,
        258,0,0,1814,1815,3,648,324,0,1815,183,1,0,0,0,1816,1817,5,9,0,0,
        1817,1818,5,293,0,0,1818,1819,5,258,0,0,1819,1820,3,648,324,0,1820,
        1821,3,186,93,0,1821,185,1,0,0,0,1822,1828,3,188,94,0,1823,1828,
        3,190,95,0,1824,1828,3,268,134,0,1825,1828,3,192,96,0,1826,1828,
        5,115,0,0,1827,1822,1,0,0,0,1827,1823,1,0,0,0,1827,1824,1,0,0,0,
        1827,1825,1,0,0,0,1827,1826,1,0,0,0,1828,187,1,0,0,0,1829,1830,5,
        59,0,0,1830,1845,5,426,0,0,1831,1833,5,111,0,0,1832,1834,5,431,0,
        0,1833,1832,1,0,0,0,1833,1834,1,0,0,0,1834,1835,1,0,0,0,1835,1842,
        3,588,294,0,1836,1840,5,20,0,0,1837,1838,5,223,0,0,1838,1840,5,32,
        0,0,1839,1836,1,0,0,0,1839,1837,1,0,0,0,1840,1841,1,0,0,0,1841,1843,
        5,426,0,0,1842,1839,1,0,0,0,1842,1843,1,0,0,0,1843,1845,1,0,0,0,
        1844,1829,1,0,0,0,1844,1831,1,0,0,0,1845,189,1,0,0,0,1846,1847,5,
        116,0,0,1847,1848,5,17,0,0,1848,1849,5,426,0,0,1849,191,1,0,0,0,
        1850,1852,5,85,0,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,1853,
        1,0,0,0,1853,1854,5,17,0,0,1854,1855,3,2,1,0,1855,193,1,0,0,0,1856,
        1859,3,648,324,0,1857,1859,5,426,0,0,1858,1856,1,0,0,0,1858,1857,
        1,0,0,0,1859,195,1,0,0,0,1860,1861,5,47,0,0,1861,1862,5,426,0,0,
        1862,197,1,0,0,0,1863,1864,5,183,0,0,1864,1865,5,431,0,0,1865,199,
        1,0,0,0,1866,1867,5,238,0,0,1867,1876,5,32,0,0,1868,1871,5,399,0,
        0,1869,1872,3,202,101,0,1870,1872,3,254,127,0,1871,1869,1,0,0,0,
        1871,1870,1,0,0,0,1872,1877,1,0,0,0,1873,1874,5,316,0,0,1874,1875,
        5,399,0,0,1875,1877,3,204,102,0,1876,1868,1,0,0,0,1876,1873,1,0,
        0,0,1877,1878,1,0,0,0,1878,1879,5,400,0,0,1879,201,1,0,0,0,1880,
        1885,3,316,158,0,1881,1882,5,397,0,0,1882,1884,3,316,158,0,1883,
        1881,1,0,0,0,1884,1887,1,0,0,0,1885,1883,1,0,0,0,1885,1886,1,0,0,
        0,1886,203,1,0,0,0,1887,1885,1,0,0,0,1888,1893,3,206,103,0,1889,
        1890,5,397,0,0,1890,1892,3,206,103,0,1891,1889,1,0,0,0,1892,1895,
        1,0,0,0,1893,1891,1,0,0,0,1893,1894,1,0,0,0,1894,205,1,0,0,0,1895,
        1893,1,0,0,0,1896,1915,3,256,128,0,1897,1902,3,676,338,0,1898,1902,
        3,678,339,0,1899,1902,3,682,341,0,1900,1902,3,684,342,0,1901,1897,
        1,0,0,0,1901,1898,1,0,0,0,1901,1899,1,0,0,0,1901,1900,1,0,0,0,1902,
        1903,1,0,0,0,1903,1904,5,399,0,0,1904,1905,3,256,128,0,1905,1906,
        5,400,0,0,1906,1915,1,0,0,0,1907,1908,7,15,0,0,1908,1909,5,399,0,
        0,1909,1910,5,431,0,0,1910,1911,5,397,0,0,1911,1912,3,256,128,0,
        1912,1913,5,400,0,0,1913,1915,1,0,0,0,1914,1896,1,0,0,0,1914,1901,
        1,0,0,0,1914,1907,1,0,0,0,1915,207,1,0,0,0,1916,1917,5,42,0,0,1917,
        1918,5,32,0,0,1918,1919,5,399,0,0,1919,1920,3,254,127,0,1920,1927,
        5,400,0,0,1921,1922,5,315,0,0,1922,1923,5,32,0,0,1923,1924,5,399,
        0,0,1924,1925,3,262,131,0,1925,1926,5,400,0,0,1926,1928,1,0,0,0,
        1927,1921,1,0,0,0,1927,1928,1,0,0,0,1928,1929,1,0,0,0,1929,1930,
        5,166,0,0,1930,1931,5,431,0,0,1931,1932,5,31,0,0,1932,209,1,0,0,
        0,1933,1934,5,310,0,0,1934,1935,5,32,0,0,1935,1936,5,399,0,0,1936,
        1937,3,254,127,0,1937,1938,5,400,0,0,1938,1939,5,224,0,0,1939,1940,
        5,399,0,0,1940,1941,3,290,145,0,1941,1943,5,400,0,0,1942,1944,3,
        40,20,0,1943,1942,1,0,0,0,1943,1944,1,0,0,0,1944,211,1,0,0,0,1945,
        1948,3,218,109,0,1946,1948,3,220,110,0,1947,1945,1,0,0,0,1947,1946,
        1,0,0,0,1948,213,1,0,0,0,1949,1950,5,266,0,0,1950,1951,5,426,0,0,
        1951,215,1,0,0,0,1952,1953,5,267,0,0,1953,1954,5,426,0,0,1954,217,
        1,0,0,0,1955,1956,5,291,0,0,1956,1957,5,137,0,0,1957,1958,5,301,
        0,0,1958,1962,5,426,0,0,1959,1960,5,387,0,0,1960,1961,5,302,0,0,
        1961,1963,3,226,113,0,1962,1959,1,0,0,0,1962,1963,1,0,0,0,1963,219,
        1,0,0,0,1964,1965,5,291,0,0,1965,1966,5,137,0,0,1966,1968,5,87,0,
        0,1967,1969,3,236,118,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,
        1971,1,0,0,0,1970,1972,3,238,119,0,1971,1970,1,0,0,0,1971,1972,1,
        0,0,0,1972,1974,1,0,0,0,1973,1975,3,240,120,0,1974,1973,1,0,0,0,
        1974,1975,1,0,0,0,1975,1977,1,0,0,0,1976,1978,3,242,121,0,1977,1976,
        1,0,0,0,1977,1978,1,0,0,0,1978,1980,1,0,0,0,1979,1981,3,244,122,
        0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,221,1,0,0,0,1982,1985,
        3,220,110,0,1983,1985,3,218,109,0,1984,1982,1,0,0,0,1984,1983,1,
        0,0,0,1985,223,1,0,0,0,1986,1987,5,332,0,0,1987,1988,3,226,113,0,
        1988,225,1,0,0,0,1989,1990,5,399,0,0,1990,1991,3,228,114,0,1991,
        1992,5,400,0,0,1992,227,1,0,0,0,1993,2003,3,232,116,0,1994,1999,
        5,426,0,0,1995,1996,5,397,0,0,1996,1998,5,426,0,0,1997,1995,1,0,
        0,0,1998,2001,1,0,0,0,1999,1997,1,0,0,0,1999,2000,1,0,0,0,2000,2003,
        1,0,0,0,2001,1999,1,0,0,0,2002,1993,1,0,0,0,2002,1994,1,0,0,0,2003,
        229,1,0,0,0,2004,2005,5,399,0,0,2005,2006,3,232,116,0,2006,2007,
        5,400,0,0,2007,231,1,0,0,0,2008,2013,3,234,117,0,2009,2010,5,397,
        0,0,2010,2012,3,234,117,0,2011,2009,1,0,0,0,2012,2015,1,0,0,0,2013,
        2011,1,0,0,0,2013,2014,1,0,0,0,2014,233,1,0,0,0,2015,2013,1,0,0,
        0,2016,2017,5,426,0,0,2017,2018,5,405,0,0,2018,2019,5,426,0,0,2019,
        235,1,0,0,0,2020,2021,5,127,0,0,2021,2022,5,334,0,0,2022,2023,5,
        32,0,0,2023,2027,5,426,0,0,2024,2025,5,110,0,0,2025,2026,5,32,0,
        0,2026,2028,5,426,0,0,2027,2024,1,0,0,0,2027,2028,1,0,0,0,2028,237,
        1,0,0,0,2029,2030,5,44,0,0,2030,2031,5,169,0,0,2031,2032,5,334,0,
        0,2032,2033,5,32,0,0,2033,2034,5,426,0,0,2034,239,1,0,0,0,2035,2036,
        5,198,0,0,2036,2037,5,174,0,0,2037,2038,5,334,0,0,2038,2039,5,32,
        0,0,2039,2040,5,426,0,0,2040,241,1,0,0,0,2041,2042,5,186,0,0,2042,
        2043,5,334,0,0,2043,2044,5,32,0,0,2044,2045,5,426,0,0,2045,243,1,
        0,0,0,2046,2047,5,219,0,0,2047,2048,5,85,0,0,2048,2049,5,17,0,0,
        2049,2050,5,426,0,0,2050,245,1,0,0,0,2051,2052,5,321,0,0,2052,2053,
        5,17,0,0,2053,2054,5,160,0,0,2054,2055,5,426,0,0,2055,2056,5,233,
        0,0,2056,2061,5,426,0,0,2057,2058,5,159,0,0,2058,2059,5,426,0,0,
        2059,2060,5,232,0,0,2060,2062,5,426,0,0,2061,2057,1,0,0,0,2061,2062,
        1,0,0,0,2062,2093,1,0,0,0,2063,2064,5,321,0,0,2064,2065,5,32,0,0,
        2065,2069,5,426,0,0,2066,2067,5,387,0,0,2067,2068,5,302,0,0,2068,
        2070,3,226,113,0,2069,2066,1,0,0,0,2069,2070,1,0,0,0,2070,2074,1,
        0,0,0,2071,2072,5,321,0,0,2072,2073,5,17,0,0,2073,2075,3,648,324,
        0,2074,2071,1,0,0,0,2074,2075,1,0,0,0,2075,2093,1,0,0,0,2076,2077,
        5,321,0,0,2077,2078,5,32,0,0,2078,2082,3,648,324,0,2079,2080,5,387,
        0,0,2080,2081,5,302,0,0,2081,2083,3,226,113,0,2082,2079,1,0,0,0,
        2082,2083,1,0,0,0,2083,2087,1,0,0,0,2084,2085,5,321,0,0,2085,2086,
        5,17,0,0,2086,2088,3,648,324,0,2087,2084,1,0,0,0,2087,2088,1,0,0,
        0,2088,2093,1,0,0,0,2089,2090,5,321,0,0,2090,2091,5,17,0,0,2091,
        2093,3,648,324,0,2092,2051,1,0,0,0,2092,2063,1,0,0,0,2092,2076,1,
        0,0,0,2092,2089,1,0,0,0,2093,247,1,0,0,0,2094,2099,3,310,155,0,2095,
        2096,5,397,0,0,2096,2098,3,310,155,0,2097,2095,1,0,0,0,2098,2101,
        1,0,0,0,2099,2097,1,0,0,0,2099,2100,1,0,0,0,2100,249,1,0,0,0,2101,
        2099,1,0,0,0,2102,2107,3,312,156,0,2103,2104,5,397,0,0,2104,2106,
        3,312,156,0,2105,2103,1,0,0,0,2106,2109,1,0,0,0,2107,2105,1,0,0,
        0,2107,2108,1,0,0,0,2108,251,1,0,0,0,2109,2107,1,0,0,0,2110,2115,
        3,340,170,0,2111,2112,5,397,0,0,2112,2114,3,340,170,0,2113,2111,
        1,0,0,0,2114,2117,1,0,0,0,2115,2113,1,0,0,0,2115,2116,1,0,0,0,2116,
        253,1,0,0,0,2117,2115,1,0,0,0,2118,2123,3,256,128,0,2119,2120,5,
        397,0,0,2120,2122,3,256,128,0,2121,2119,1,0,0,0,2122,2125,1,0,0,
        0,2123,2121,1,0,0,0,2123,2124,1,0,0,0,2124,255,1,0,0,0,2125,2123,
        1,0,0,0,2126,2129,3,692,346,0,2127,2129,4,128,0,0,2128,2126,1,0,
        0,0,2128,2127,1,0,0,0,2129,257,1,0,0,0,2130,2131,3,648,324,0,2131,
        259,1,0,0,0,2132,2142,3,256,128,0,2133,2138,5,395,0,0,2134,2139,
        5,104,0,0,2135,2139,5,175,0,0,2136,2139,5,375,0,0,2137,2139,3,648,
        324,0,2138,2134,1,0,0,0,2138,2135,1,0,0,0,2138,2136,1,0,0,0,2138,
        2137,1,0,0,0,2139,2141,1,0,0,0,2140,2133,1,0,0,0,2141,2144,1,0,0,
        0,2142,2140,1,0,0,0,2142,2143,1,0,0,0,2143,261,1,0,0,0,2144,2142,
        1,0,0,0,2145,2150,3,302,151,0,2146,2147,5,397,0,0,2147,2149,3,302,
        151,0,2148,2146,1,0,0,0,2149,2152,1,0,0,0,2150,2148,1,0,0,0,2150,
        2151,1,0,0,0,2151,263,1,0,0,0,2152,2150,1,0,0,0,2153,2154,5,399,
        0,0,2154,2155,3,254,127,0,2155,2156,5,400,0,0,2156,265,1,0,0,0,2157,
        2159,3,268,134,0,2158,2160,3,270,135,0,2159,2158,1,0,0,0,2159,2160,
        1,0,0,0,2160,2163,1,0,0,0,2161,2163,3,272,136,0,2162,2157,1,0,0,
        0,2162,2161,1,0,0,0,2163,267,1,0,0,0,2164,2167,3,672,336,0,2165,
        2167,3,674,337,0,2166,2164,1,0,0,0,2166,2165,1,0,0,0,2167,269,1,
        0,0,0,2168,2169,7,16,0,0,2169,271,1,0,0,0,2170,2174,5,109,0,0,2171,
        2172,5,216,0,0,2172,2174,5,109,0,0,2173,2170,1,0,0,0,2173,2171,1,
        0,0,0,2174,273,1,0,0,0,2175,2176,7,17,0,0,2176,275,1,0,0,0,2177,
        2178,5,55,0,0,2178,2180,3,648,324,0,2179,2177,1,0,0,0,2179,2180,
        1,0,0,0,2180,2181,1,0,0,0,2181,2183,3,280,140,0,2182,2184,3,336,
        168,0,2183,2182,1,0,0,0,2183,2184,1,0,0,0,2184,277,1,0,0,0,2185,
        2186,5,55,0,0,2186,2187,3,648,324,0,2187,2189,3,280,140,0,2188,2190,
        3,338,169,0,2189,2188,1,0,0,0,2189,2190,1,0,0,0,2190,279,1,0,0,0,
        2191,2194,3,282,141,0,2192,2194,3,284,142,0,2193,2191,1,0,0,0,2193,
        2192,1,0,0,0,2194,281,1,0,0,0,2195,2196,3,334,167,0,2196,2197,3,
        264,132,0,2197,283,1,0,0,0,2198,2199,5,40,0,0,2199,2200,5,399,0,
        0,2200,2201,3,590,295,0,2201,2202,5,400,0,0,2202,285,1,0,0,0,2203,
        2204,5,55,0,0,2204,2206,3,648,324,0,2205,2203,1,0,0,0,2205,2206,
        1,0,0,0,2206,2207,1,0,0,0,2207,2208,5,136,0,0,2208,2209,5,173,0,
        0,2209,2210,3,264,132,0,2210,2211,5,269,0,0,2211,2212,3,478,239,
        0,2212,2214,3,264,132,0,2213,2215,3,336,168,0,2214,2213,1,0,0,0,
        2214,2215,1,0,0,0,2215,287,1,0,0,0,2216,2217,5,55,0,0,2217,2218,
        3,648,324,0,2218,2219,5,136,0,0,2219,2220,5,173,0,0,2220,2221,3,
        264,132,0,2221,2222,5,269,0,0,2222,2223,3,478,239,0,2223,2225,3,
        264,132,0,2224,2226,3,338,169,0,2225,2224,1,0,0,0,2225,2226,1,0,
        0,0,2226,289,1,0,0,0,2227,2230,3,296,148,0,2228,2230,3,292,146,0,
        2229,2227,1,0,0,0,2229,2228,1,0,0,0,2230,291,1,0,0,0,2231,2236,3,
        294,147,0,2232,2233,5,397,0,0,2233,2235,3,294,147,0,2234,2232,1,
        0,0,0,2235,2238,1,0,0,0,2236,2234,1,0,0,0,2236,2237,1,0,0,0,2237,
        293,1,0,0,0,2238,2236,1,0,0,0,2239,2240,5,399,0,0,2240,2241,3,296,
        148,0,2241,2242,5,400,0,0,2242,295,1,0,0,0,2243,2248,3,582,291,0,
        2244,2245,5,397,0,0,2245,2247,3,582,291,0,2246,2244,1,0,0,0,2247,
        2250,1,0,0,0,2248,2246,1,0,0,0,2248,2249,1,0,0,0,2249,297,1,0,0,
        0,2250,2248,1,0,0,0,2251,2252,7,18,0,0,2252,299,1,0,0,0,2253,2254,
        5,220,0,0,2254,2255,7,19,0,0,2255,301,1,0,0,0,2256,2258,3,256,128,
        0,2257,2259,3,298,149,0,2258,2257,1,0,0,0,2258,2259,1,0,0,0,2259,
        2261,1,0,0,0,2260,2262,3,300,150,0,2261,2260,1,0,0,0,2261,2262,1,
        0,0,0,2262,303,1,0,0,0,2263,2268,3,306,153,0,2264,2265,5,397,0,0,
        2265,2267,3,306,153,0,2266,2264,1,0,0,0,2267,2270,1,0,0,0,2268,2266,
        1,0,0,0,2268,2269,1,0,0,0,2269,305,1,0,0,0,2270,2268,1,0,0,0,2271,
        2274,3,258,129,0,2272,2273,5,47,0,0,2273,2275,5,426,0,0,2274,2272,
        1,0,0,0,2274,2275,1,0,0,0,2275,307,1,0,0,0,2276,2279,3,256,128,0,
        2277,2279,3,590,295,0,2278,2276,1,0,0,0,2278,2277,1,0,0,0,2279,2281,
        1,0,0,0,2280,2282,3,298,149,0,2281,2280,1,0,0,0,2281,2282,1,0,0,
        0,2282,2284,1,0,0,0,2283,2285,3,300,150,0,2284,2283,1,0,0,0,2284,
        2285,1,0,0,0,2285,309,1,0,0,0,2286,2287,3,258,129,0,2287,2290,3,
        342,171,0,2288,2289,5,47,0,0,2289,2291,5,426,0,0,2290,2288,1,0,0,
        0,2290,2291,1,0,0,0,2291,311,1,0,0,0,2292,2295,3,314,157,0,2293,
        2295,3,316,158,0,2294,2292,1,0,0,0,2294,2293,1,0,0,0,2295,313,1,
        0,0,0,2296,2299,3,286,143,0,2297,2299,3,276,138,0,2298,2296,1,0,
        0,0,2298,2297,1,0,0,0,2299,315,1,0,0,0,2300,2301,3,258,129,0,2301,
        2303,3,342,171,0,2302,2304,3,318,159,0,2303,2302,1,0,0,0,2303,2304,
        1,0,0,0,2304,2307,1,0,0,0,2305,2306,5,47,0,0,2306,2308,5,426,0,0,
        2307,2305,1,0,0,0,2307,2308,1,0,0,0,2308,317,1,0,0,0,2309,2312,3,
        320,160,0,2310,2312,3,322,161,0,2311,2309,1,0,0,0,2311,2310,1,0,
        0,0,2312,319,1,0,0,0,2313,2314,5,55,0,0,2314,2316,3,648,324,0,2315,
        2313,1,0,0,0,2315,2316,1,0,0,0,2316,2317,1,0,0,0,2317,2318,5,269,
        0,0,2318,2319,3,478,239,0,2319,2320,5,399,0,0,2320,2321,3,256,128,
        0,2321,2323,5,400,0,0,2322,2324,3,336,168,0,2323,2322,1,0,0,0,2323,
        2324,1,0,0,0,2324,321,1,0,0,0,2325,2326,5,55,0,0,2326,2328,3,648,
        324,0,2327,2325,1,0,0,0,2327,2328,1,0,0,0,2328,2329,1,0,0,0,2329,
        2331,3,330,165,0,2330,2332,3,336,168,0,2331,2330,1,0,0,0,2331,2332,
        1,0,0,0,2332,323,1,0,0,0,2333,2336,3,326,163,0,2334,2336,3,328,164,
        0,2335,2333,1,0,0,0,2335,2334,1,0,0,0,2336,325,1,0,0,0,2337,2338,
        5,55,0,0,2338,2340,3,648,324,0,2339,2337,1,0,0,0,2339,2340,1,0,0,
        0,2340,2341,1,0,0,0,2341,2342,5,269,0,0,2342,2343,3,478,239,0,2343,
        2344,5,399,0,0,2344,2345,3,256,128,0,2345,2347,5,400,0,0,2346,2348,
        3,338,169,0,2347,2346,1,0,0,0,2347,2348,1,0,0,0,2348,327,1,0,0,0,
        2349,2350,5,55,0,0,2350,2352,3,648,324,0,2351,2349,1,0,0,0,2351,
        2352,1,0,0,0,2352,2353,1,0,0,0,2353,2355,3,330,165,0,2354,2356,3,
        338,169,0,2355,2354,1,0,0,0,2355,2356,1,0,0,0,2356,329,1,0,0,0,2357,
        2358,5,216,0,0,2358,2364,5,219,0,0,2359,2360,5,83,0,0,2360,2364,
        3,332,166,0,2361,2364,3,284,142,0,2362,2364,3,334,167,0,2363,2357,
        1,0,0,0,2363,2359,1,0,0,0,2363,2361,1,0,0,0,2363,2362,1,0,0,0,2364,
        331,1,0,0,0,2365,2369,3,582,291,0,2366,2369,3,560,280,0,2367,2369,
        3,570,285,0,2368,2365,1,0,0,0,2368,2366,1,0,0,0,2368,2367,1,0,0,
        0,2369,333,1,0,0,0,2370,2371,5,251,0,0,2371,2374,5,173,0,0,2372,
        2374,5,358,0,0,2373,2370,1,0,0,0,2373,2372,1,0,0,0,2374,335,1,0,
        0,0,2375,2377,3,266,133,0,2376,2378,3,274,137,0,2377,2376,1,0,0,
        0,2377,2378,1,0,0,0,2378,337,1,0,0,0,2379,2381,3,266,133,0,2380,
        2382,3,274,137,0,2381,2380,1,0,0,0,2381,2382,1,0,0,0,2382,339,1,
        0,0,0,2383,2384,3,258,129,0,2384,2385,5,396,0,0,2385,2388,3,342,
        171,0,2386,2387,5,47,0,0,2387,2389,5,426,0,0,2388,2386,1,0,0,0,2388,
        2389,1,0,0,0,2389,341,1,0,0,0,2390,2391,3,346,173,0,2391,343,1,0,
        0,0,2392,2397,3,342,171,0,2393,2394,5,397,0,0,2394,2396,3,342,171,
        0,2395,2393,1,0,0,0,2396,2399,1,0,0,0,2397,2395,1,0,0,0,2397,2398,
        1,0,0,0,2398,345,1,0,0,0,2399,2397,1,0,0,0,2400,2406,3,348,174,0,
        2401,2406,3,350,175,0,2402,2406,3,352,176,0,2403,2406,3,354,177,
        0,2404,2406,3,356,178,0,2405,2400,1,0,0,0,2405,2401,1,0,0,0,2405,
        2402,1,0,0,0,2405,2403,1,0,0,0,2405,2404,1,0,0,0,2406,347,1,0,0,
        0,2407,2445,5,340,0,0,2408,2445,5,311,0,0,2409,2445,5,162,0,0,2410,
        2445,5,163,0,0,2411,2445,5,26,0,0,2412,2445,5,28,0,0,2413,2445,5,
        131,0,0,2414,2445,5,264,0,0,2415,2417,5,100,0,0,2416,2418,5,248,
        0,0,2417,2416,1,0,0,0,2417,2418,1,0,0,0,2418,2445,1,0,0,0,2419,2445,
        5,71,0,0,2420,2445,5,72,0,0,2421,2445,5,337,0,0,2422,2445,5,338,
        0,0,2423,2424,5,337,0,0,2424,2425,5,387,0,0,2425,2426,5,188,0,0,
        2426,2427,5,336,0,0,2427,2445,5,394,0,0,2428,2445,5,323,0,0,2429,
        2445,5,27,0,0,2430,2438,3,690,345,0,2431,2432,5,399,0,0,2432,2435,
        5,431,0,0,2433,2434,5,397,0,0,2434,2436,5,431,0,0,2435,2433,1,0,
        0,0,2435,2436,1,0,0,0,2436,2437,1,0,0,0,2437,2439,5,400,0,0,2438,
        2431,1,0,0,0,2438,2439,1,0,0,0,2439,2445,1,0,0,0,2440,2441,7,20,
        0,0,2441,2442,5,399,0,0,2442,2443,5,431,0,0,2443,2445,5,400,0,0,
        2444,2407,1,0,0,0,2444,2408,1,0,0,0,2444,2409,1,0,0,0,2444,2410,
        1,0,0,0,2444,2411,1,0,0,0,2444,2412,1,0,0,0,2444,2413,1,0,0,0,2444,
        2414,1,0,0,0,2444,2415,1,0,0,0,2444,2419,1,0,0,0,2444,2420,1,0,0,
        0,2444,2421,1,0,0,0,2444,2422,1,0,0,0,2444,2423,1,0,0,0,2444,2428,
        1,0,0,0,2444,2429,1,0,0,0,2444,2430,1,0,0,0,2444,2440,1,0,0,0,2445,
        349,1,0,0,0,2446,2447,5,16,0,0,2447,2448,5,409,0,0,2448,2449,3,346,
        173,0,2449,2450,5,411,0,0,2450,351,1,0,0,0,2451,2452,5,324,0,0,2452,
        2453,5,409,0,0,2453,2454,3,252,126,0,2454,2455,5,411,0,0,2455,353,
        1,0,0,0,2456,2457,5,198,0,0,2457,2458,5,409,0,0,2458,2459,3,348,
        174,0,2459,2460,5,397,0,0,2460,2461,3,346,173,0,2461,2462,5,411,
        0,0,2462,355,1,0,0,0,2463,2464,5,357,0,0,2464,2465,5,409,0,0,2465,
        2466,3,344,172,0,2466,2467,5,411,0,0,2467,357,1,0,0,0,2468,2470,
        7,21,0,0,2469,2471,7,22,0,0,2470,2469,1,0,0,0,2470,2471,1,0,0,0,
        2471,359,1,0,0,0,2472,2474,3,364,182,0,2473,2472,1,0,0,0,2473,2474,
        1,0,0,0,2474,2475,1,0,0,0,2475,2476,3,362,181,0,2476,361,1,0,0,0,
        2477,2480,3,368,184,0,2478,2480,3,372,186,0,2479,2477,1,0,0,0,2479,
        2478,1,0,0,0,2480,363,1,0,0,0,2481,2482,5,387,0,0,2482,2487,3,366,
        183,0,2483,2484,5,397,0,0,2484,2486,3,366,183,0,2485,2483,1,0,0,
        0,2486,2489,1,0,0,0,2487,2485,1,0,0,0,2487,2488,1,0,0,0,2488,365,
        1,0,0,0,2489,2487,1,0,0,0,2490,2495,3,648,324,0,2491,2492,5,399,
        0,0,2492,2493,3,254,127,0,2493,2494,5,400,0,0,2494,2496,1,0,0,0,
        2495,2491,1,0,0,0,2495,2496,1,0,0,0,2496,2497,1,0,0,0,2497,2498,
        5,17,0,0,2498,2499,5,399,0,0,2499,2500,3,360,180,0,2500,2501,5,400,
        0,0,2501,367,1,0,0,0,2502,2508,3,370,185,0,2503,2504,3,358,179,0,
        2504,2505,3,370,185,0,2505,2507,1,0,0,0,2506,2503,1,0,0,0,2507,2510,
        1,0,0,0,2508,2506,1,0,0,0,2508,2509,1,0,0,0,2509,369,1,0,0,0,2510,
        2508,1,0,0,0,2511,2512,3,448,224,0,2512,2513,3,382,191,0,2513,2515,
        3,504,252,0,2514,2516,3,462,231,0,2515,2514,1,0,0,0,2515,2516,1,
        0,0,0,2516,2518,1,0,0,0,2517,2519,3,496,248,0,2518,2517,1,0,0,0,
        2518,2519,1,0,0,0,2519,2521,1,0,0,0,2520,2522,3,530,265,0,2521,2520,
        1,0,0,0,2521,2522,1,0,0,0,2522,2524,1,0,0,0,2523,2525,3,538,269,
        0,2524,2523,1,0,0,0,2524,2525,1,0,0,0,2525,2527,1,0,0,0,2526,2528,
        3,522,261,0,2527,2526,1,0,0,0,2527,2528,1,0,0,0,2528,2530,1,0,0,
        0,2529,2531,3,540,270,0,2530,2529,1,0,0,0,2530,2531,1,0,0,0,2531,
        2533,1,0,0,0,2532,2534,3,552,276,0,2533,2532,1,0,0,0,2533,2534,1,
        0,0,0,2534,2536,1,0,0,0,2535,2537,3,554,277,0,2536,2535,1,0,0,0,
        2536,2537,1,0,0,0,2537,2539,1,0,0,0,2538,2540,3,556,278,0,2539,2538,
        1,0,0,0,2539,2540,1,0,0,0,2540,2542,1,0,0,0,2541,2543,3,558,279,
        0,2542,2541,1,0,0,0,2542,2543,1,0,0,0,2543,2545,1,0,0,0,2544,2546,
        3,386,193,0,2545,2544,1,0,0,0,2545,2546,1,0,0,0,2546,2583,1,0,0,
        0,2547,2548,3,448,224,0,2548,2550,3,504,252,0,2549,2551,3,462,231,
        0,2550,2549,1,0,0,0,2550,2551,1,0,0,0,2551,2553,1,0,0,0,2552,2554,
        3,496,248,0,2553,2552,1,0,0,0,2553,2554,1,0,0,0,2554,2556,1,0,0,
        0,2555,2557,3,530,265,0,2556,2555,1,0,0,0,2556,2557,1,0,0,0,2557,
        2559,1,0,0,0,2558,2560,3,538,269,0,2559,2558,1,0,0,0,2559,2560,1,
        0,0,0,2560,2562,1,0,0,0,2561,2563,3,522,261,0,2562,2561,1,0,0,0,
        2562,2563,1,0,0,0,2563,2565,1,0,0,0,2564,2566,3,540,270,0,2565,2564,
        1,0,0,0,2565,2566,1,0,0,0,2566,2568,1,0,0,0,2567,2569,3,552,276,
        0,2568,2567,1,0,0,0,2568,2569,1,0,0,0,2569,2571,1,0,0,0,2570,2572,
        3,554,277,0,2571,2570,1,0,0,0,2571,2572,1,0,0,0,2572,2574,1,0,0,
        0,2573,2575,3,556,278,0,2574,2573,1,0,0,0,2574,2575,1,0,0,0,2575,
        2577,1,0,0,0,2576,2578,3,558,279,0,2577,2576,1,0,0,0,2577,2578,1,
        0,0,0,2578,2580,1,0,0,0,2579,2581,3,386,193,0,2580,2579,1,0,0,0,
        2580,2581,1,0,0,0,2581,2583,1,0,0,0,2582,2511,1,0,0,0,2582,2547,
        1,0,0,0,2583,371,1,0,0,0,2584,2585,3,382,191,0,2585,2586,3,376,188,
        0,2586,2589,1,0,0,0,2587,2589,3,376,188,0,2588,2584,1,0,0,0,2588,
        2587,1,0,0,0,2589,373,1,0,0,0,2590,2592,3,504,252,0,2591,2593,3,
        448,224,0,2592,2591,1,0,0,0,2592,2593,1,0,0,0,2593,2595,1,0,0,0,
        2594,2596,3,496,248,0,2595,2594,1,0,0,0,2595,2596,1,0,0,0,2596,2598,
        1,0,0,0,2597,2599,3,530,265,0,2598,2597,1,0,0,0,2598,2599,1,0,0,
        0,2599,2601,1,0,0,0,2600,2602,3,538,269,0,2601,2600,1,0,0,0,2601,
        2602,1,0,0,0,2602,2604,1,0,0,0,2603,2605,3,522,261,0,2604,2603,1,
        0,0,0,2604,2605,1,0,0,0,2605,2607,1,0,0,0,2606,2608,3,540,270,0,
        2607,2606,1,0,0,0,2607,2608,1,0,0,0,2608,2615,1,0,0,0,2609,2610,
        5,399,0,0,2610,2611,3,376,188,0,2611,2612,5,400,0,0,2612,2615,1,
        0,0,0,2613,2615,3,498,249,0,2614,2590,1,0,0,0,2614,2609,1,0,0,0,
        2614,2613,1,0,0,0,2615,375,1,0,0,0,2616,2618,3,374,187,0,2617,2619,
        3,378,189,0,2618,2617,1,0,0,0,2618,2619,1,0,0,0,2619,2621,1,0,0,
        0,2620,2622,3,552,276,0,2621,2620,1,0,0,0,2621,2622,1,0,0,0,2622,
        2624,1,0,0,0,2623,2625,3,554,277,0,2624,2623,1,0,0,0,2624,2625,1,
        0,0,0,2625,2627,1,0,0,0,2626,2628,3,556,278,0,2627,2626,1,0,0,0,
        2627,2628,1,0,0,0,2628,2630,1,0,0,0,2629,2631,3,558,279,0,2630,2629,
        1,0,0,0,2630,2631,1,0,0,0,2631,2633,1,0,0,0,2632,2634,3,386,193,
        0,2633,2632,1,0,0,0,2633,2634,1,0,0,0,2634,377,1,0,0,0,2635,2636,
        3,358,179,0,2636,2637,3,374,187,0,2637,2639,1,0,0,0,2638,2635,1,
        0,0,0,2639,2640,1,0,0,0,2640,2638,1,0,0,0,2640,2641,1,0,0,0,2641,
        379,1,0,0,0,2642,2644,3,364,182,0,2643,2642,1,0,0,0,2643,2644,1,
        0,0,0,2644,2645,1,0,0,0,2645,2646,3,376,188,0,2646,381,1,0,0,0,2647,
        2664,5,161,0,0,2648,2649,5,235,0,0,2649,2651,3,384,192,0,2650,2652,
        3,32,16,0,2651,2650,1,0,0,0,2651,2652,1,0,0,0,2652,2665,1,0,0,0,
        2653,2655,5,166,0,0,2654,2656,5,329,0,0,2655,2654,1,0,0,0,2655,2656,
        1,0,0,0,2656,2657,1,0,0,0,2657,2662,3,634,317,0,2658,2659,5,399,
        0,0,2659,2660,3,254,127,0,2660,2661,5,400,0,0,2661,2663,1,0,0,0,
        2662,2658,1,0,0,0,2662,2663,1,0,0,0,2663,2665,1,0,0,0,2664,2648,
        1,0,0,0,2664,2653,1,0,0,0,2665,383,1,0,0,0,2666,2668,5,188,0,0,2667,
        2666,1,0,0,0,2667,2668,1,0,0,0,2668,2669,1,0,0,0,2669,2670,5,93,
        0,0,2670,2672,5,426,0,0,2671,2673,3,222,111,0,2672,2671,1,0,0,0,
        2672,2673,1,0,0,0,2673,2675,1,0,0,0,2674,2676,3,246,123,0,2675,2674,
        1,0,0,0,2675,2676,1,0,0,0,2676,2680,1,0,0,0,2677,2678,5,329,0,0,
        2678,2680,3,634,317,0,2679,2667,1,0,0,0,2679,2677,1,0,0,0,2680,385,
        1,0,0,0,2681,2690,5,185,0,0,2682,2683,5,431,0,0,2683,2685,5,397,
        0,0,2684,2682,1,0,0,0,2684,2685,1,0,0,0,2685,2686,1,0,0,0,2686,2691,
        5,431,0,0,2687,2688,5,431,0,0,2688,2689,5,223,0,0,2689,2691,5,431,
        0,0,2690,2684,1,0,0,0,2690,2687,1,0,0,0,2691,387,1,0,0,0,2692,2693,
        3,256,128,0,2693,2694,5,405,0,0,2694,2695,3,390,195,0,2695,389,1,
        0,0,0,2696,2699,5,83,0,0,2697,2699,3,600,300,0,2698,2696,1,0,0,0,
        2698,2697,1,0,0,0,2699,391,1,0,0,0,2700,2701,5,304,0,0,2701,2706,
        3,388,194,0,2702,2703,5,397,0,0,2703,2705,3,388,194,0,2704,2702,
        1,0,0,0,2705,2708,1,0,0,0,2706,2704,1,0,0,0,2706,2707,1,0,0,0,2707,
        393,1,0,0,0,2708,2706,1,0,0,0,2709,2710,5,318,0,0,2710,2719,5,344,
        0,0,2711,2716,3,396,198,0,2712,2713,5,397,0,0,2713,2715,3,396,198,
        0,2714,2712,1,0,0,0,2715,2718,1,0,0,0,2716,2714,1,0,0,0,2716,2717,
        1,0,0,0,2717,2720,1,0,0,0,2718,2716,1,0,0,0,2719,2711,1,0,0,0,2719,
        2720,1,0,0,0,2720,2733,1,0,0,0,2721,2723,5,48,0,0,2722,2724,5,389,
        0,0,2723,2722,1,0,0,0,2723,2724,1,0,0,0,2724,2733,1,0,0,0,2725,2727,
        5,289,0,0,2726,2728,5,389,0,0,2727,2726,1,0,0,0,2727,2728,1,0,0,
        0,2728,2733,1,0,0,0,2729,2730,5,304,0,0,2730,2731,5,22,0,0,2731,
        2733,7,23,0,0,2732,2709,1,0,0,0,2732,2721,1,0,0,0,2732,2725,1,0,
        0,0,2732,2729,1,0,0,0,2733,395,1,0,0,0,2734,2735,5,168,0,0,2735,
        2736,5,182,0,0,2736,2740,5,312,0,0,2737,2738,5,261,0,0,2738,2740,
        7,24,0,0,2739,2734,1,0,0,0,2739,2737,1,0,0,0,2740,397,1,0,0,0,2741,
        2744,3,402,201,0,2742,2744,3,404,202,0,2743,2741,1,0,0,0,2743,2742,
        1,0,0,0,2744,2747,1,0,0,0,2745,2743,1,0,0,0,2745,2746,1,0,0,0,2746,
        2749,1,0,0,0,2747,2745,1,0,0,0,2748,2750,3,400,200,0,2749,2748,1,
        0,0,0,2749,2750,1,0,0,0,2750,399,1,0,0,0,2751,2752,5,383,0,0,2752,
        2753,5,216,0,0,2753,2756,5,201,0,0,2754,2755,5,11,0,0,2755,2757,
        3,590,295,0,2756,2754,1,0,0,0,2756,2757,1,0,0,0,2757,2758,1,0,0,
        0,2758,2759,5,335,0,0,2759,2761,5,161,0,0,2760,2762,3,264,132,0,
        2761,2760,1,0,0,0,2761,2762,1,0,0,0,2762,2763,1,0,0,0,2763,2764,
        5,374,0,0,2764,2765,3,548,274,0,2765,401,1,0,0,0,2766,2767,5,383,
        0,0,2767,2768,5,201,0,0,2768,2769,5,11,0,0,2769,2770,3,590,295,0,
        2770,2774,5,335,0,0,2771,2772,5,365,0,0,2772,2775,3,392,196,0,2773,
        2775,5,86,0,0,2774,2771,1,0,0,0,2774,2773,1,0,0,0,2775,403,1,0,0,
        0,2776,2777,5,383,0,0,2777,2778,5,201,0,0,2778,2782,5,335,0,0,2779,
        2780,5,365,0,0,2780,2783,3,392,196,0,2781,2783,5,86,0,0,2782,2779,
        1,0,0,0,2782,2781,1,0,0,0,2783,405,1,0,0,0,2784,2785,5,246,0,0,2785,
        2786,5,426,0,0,2786,407,1,0,0,0,2787,2788,5,352,0,0,2788,2789,5,
        426,0,0,2789,409,1,0,0,0,2790,2791,5,320,0,0,2791,2792,5,426,0,0,
        2792,411,1,0,0,0,2793,2824,5,9,0,0,2794,2795,5,329,0,0,2795,2796,
        3,478,239,0,2796,2797,3,414,207,0,2797,2825,1,0,0,0,2798,2799,5,
        378,0,0,2799,2801,3,482,241,0,2800,2802,5,17,0,0,2801,2800,1,0,0,
        0,2801,2802,1,0,0,0,2802,2803,1,0,0,0,2803,2804,3,418,209,0,2804,
        2825,1,0,0,0,2805,2806,5,202,0,0,2806,2807,5,378,0,0,2807,2811,3,
        482,241,0,2808,2812,3,36,18,0,2809,2812,3,38,19,0,2810,2812,5,265,
        0,0,2811,2808,1,0,0,0,2811,2809,1,0,0,0,2811,2810,1,0,0,0,2812,2825,
        1,0,0,0,2813,2814,3,70,35,0,2814,2815,3,420,210,0,2815,2825,1,0,
        0,0,2816,2817,5,69,0,0,2817,2825,3,422,211,0,2818,2819,5,155,0,0,
        2819,2820,3,648,324,0,2820,2821,5,224,0,0,2821,2822,3,634,317,0,
        2822,2823,5,265,0,0,2823,2825,1,0,0,0,2824,2794,1,0,0,0,2824,2798,
        1,0,0,0,2824,2805,1,0,0,0,2824,2813,1,0,0,0,2824,2816,1,0,0,0,2824,
        2818,1,0,0,0,2825,413,1,0,0,0,2826,2827,5,274,0,0,2827,2828,5,341,
        0,0,2828,2916,3,480,240,0,2829,2830,5,102,0,0,2830,2916,5,239,0,
        0,2831,2916,3,426,213,0,2832,2834,5,4,0,0,2833,2835,3,32,16,0,2834,
        2833,1,0,0,0,2834,2835,1,0,0,0,2835,2840,1,0,0,0,2836,2838,3,636,
        318,0,2837,2839,3,424,212,0,2838,2837,1,0,0,0,2838,2839,1,0,0,0,
        2839,2841,1,0,0,0,2840,2836,1,0,0,0,2841,2842,1,0,0,0,2842,2840,
        1,0,0,0,2842,2843,1,0,0,0,2843,2916,1,0,0,0,2844,2848,5,342,0,0,
        2845,2847,3,636,318,0,2846,2845,1,0,0,0,2847,2850,1,0,0,0,2848,2846,
        1,0,0,0,2848,2849,1,0,0,0,2849,2916,1,0,0,0,2850,2848,1,0,0,0,2851,
        2855,5,15,0,0,2852,2854,3,636,318,0,2853,2852,1,0,0,0,2854,2857,
        1,0,0,0,2855,2853,1,0,0,0,2855,2856,1,0,0,0,2856,2916,1,0,0,0,2857,
        2855,1,0,0,0,2858,2862,5,353,0,0,2859,2861,3,636,318,0,2860,2859,
        1,0,0,0,2861,2864,1,0,0,0,2862,2860,1,0,0,0,2862,2863,1,0,0,0,2863,
        2916,1,0,0,0,2864,2862,1,0,0,0,2865,2866,5,304,0,0,2866,2867,5,332,
        0,0,2867,2916,3,226,113,0,2868,2869,5,363,0,0,2869,2871,5,332,0,
        0,2870,2872,3,30,15,0,2871,2870,1,0,0,0,2871,2872,1,0,0,0,2872,2873,
        1,0,0,0,2873,2916,3,226,113,0,2874,2916,3,210,105,0,2875,2878,5,
        216,0,0,2876,2879,5,310,0,0,2877,2879,3,40,20,0,2878,2876,1,0,0,
        0,2878,2877,1,0,0,0,2879,2916,1,0,0,0,2880,2881,5,113,0,0,2881,2882,
        3,636,318,0,2882,2883,5,387,0,0,2883,2884,5,329,0,0,2884,2885,3,
        478,239,0,2885,2916,1,0,0,0,2886,2887,5,237,0,0,2887,2888,5,45,0,
        0,2888,2889,5,399,0,0,2889,2890,3,310,155,0,2890,2891,5,400,0,0,
        2891,2916,1,0,0,0,2892,2893,5,101,0,0,2893,2894,5,55,0,0,2894,2916,
        3,648,324,0,2895,2898,5,4,0,0,2896,2899,3,288,144,0,2897,2899,3,
        278,139,0,2898,2896,1,0,0,0,2898,2897,1,0,0,0,2899,2916,1,0,0,0,
        2900,2902,3,636,318,0,2901,2900,1,0,0,0,2901,2902,1,0,0,0,2902,2903,
        1,0,0,0,2903,2916,3,416,208,0,2904,2905,5,304,0,0,2905,2906,5,236,
        0,0,2906,2916,3,126,63,0,2907,2908,5,304,0,0,2908,2909,5,237,0,0,
        2909,2910,5,316,0,0,2910,2911,5,399,0,0,2911,2912,3,204,102,0,2912,
        2913,5,400,0,0,2913,2916,1,0,0,0,2914,2916,3,430,215,0,2915,2826,
        1,0,0,0,2915,2829,1,0,0,0,2915,2831,1,0,0,0,2915,2832,1,0,0,0,2915,
        2844,1,0,0,0,2915,2851,1,0,0,0,2915,2858,1,0,0,0,2915,2865,1,0,0,
        0,2915,2868,1,0,0,0,2915,2874,1,0,0,0,2915,2875,1,0,0,0,2915,2880,
        1,0,0,0,2915,2886,1,0,0,0,2915,2892,1,0,0,0,2915,2895,1,0,0,0,2915,
        2901,1,0,0,0,2915,2904,1,0,0,0,2915,2907,1,0,0,0,2915,2914,1,0,0,
        0,2916,415,1,0,0,0,2917,2918,5,304,0,0,2918,2919,5,129,0,0,2919,
        3050,3,432,216,0,2920,2921,5,304,0,0,2921,2922,5,189,0,0,2922,3050,
        5,426,0,0,2923,3050,5,53,0,0,2924,2934,5,304,0,0,2925,2926,5,301,
        0,0,2926,2930,5,426,0,0,2927,2928,5,387,0,0,2928,2929,5,302,0,0,
        2929,2931,3,226,113,0,2930,2927,1,0,0,0,2930,2931,1,0,0,0,2931,2935,
        1,0,0,0,2932,2933,5,302,0,0,2933,2935,3,226,113,0,2934,2925,1,0,
        0,0,2934,2932,1,0,0,0,2935,3050,1,0,0,0,2936,2937,5,363,0,0,2937,
        2938,5,302,0,0,2938,3050,3,226,113,0,2939,2940,5,274,0,0,2940,2941,
        5,341,0,0,2941,3050,3,636,318,0,2942,2943,5,166,0,0,2943,2944,5,
        431,0,0,2944,3050,5,31,0,0,2945,2946,5,304,0,0,2946,2947,5,310,0,
        0,2947,2948,5,189,0,0,2948,2949,5,399,0,0,2949,2954,3,428,214,0,
        2950,2951,5,397,0,0,2951,2953,3,428,214,0,2952,2950,1,0,0,0,2953,
        2956,1,0,0,0,2954,2952,1,0,0,0,2954,2955,1,0,0,0,2955,2957,1,0,0,
        0,2956,2954,1,0,0,0,2957,2958,5,400,0,0,2958,3050,1,0,0,0,2959,2960,
        5,216,0,0,2960,3050,7,25,0,0,2961,3050,3,208,104,0,2962,2963,5,49,
        0,0,2963,2966,5,426,0,0,2964,2965,5,11,0,0,2965,2967,5,380,0,0,2966,
        2964,1,0,0,0,2966,2967,1,0,0,0,2967,2972,1,0,0,0,2968,2969,5,42,
        0,0,2969,2970,5,166,0,0,2970,2971,5,431,0,0,2971,2973,5,31,0,0,2972,
        2968,1,0,0,0,2972,2973,1,0,0,0,2973,2975,1,0,0,0,2974,2976,3,552,
        276,0,2975,2974,1,0,0,0,2975,2976,1,0,0,0,2976,2978,1,0,0,0,2977,
        2979,3,406,203,0,2978,2977,1,0,0,0,2978,2979,1,0,0,0,2979,2984,1,
        0,0,0,2980,2981,5,387,0,0,2981,2982,5,235,0,0,2982,2983,5,332,0,
        0,2983,2985,3,226,113,0,2984,2980,1,0,0,0,2984,2985,1,0,0,0,2985,
        3050,1,0,0,0,2986,2987,5,365,0,0,2987,2988,5,319,0,0,2988,2990,5,
        134,0,0,2989,2991,5,45,0,0,2990,2989,1,0,0,0,2990,2991,1,0,0,0,2991,
        2992,1,0,0,0,2992,2993,3,256,128,0,2993,2994,5,304,0,0,2994,2997,
        3,226,113,0,2995,2996,5,47,0,0,2996,2998,5,426,0,0,2997,2995,1,0,
        0,0,2997,2998,1,0,0,0,2998,3050,1,0,0,0,2999,3000,5,365,0,0,3000,
        3001,5,319,0,0,3001,3002,5,304,0,0,3002,3050,3,226,113,0,3003,3005,
        5,38,0,0,3004,3006,5,45,0,0,3005,3004,1,0,0,0,3005,3006,1,0,0,0,
        3006,3007,1,0,0,0,3007,3008,3,256,128,0,3008,3009,3,258,129,0,3009,
        3011,3,342,171,0,3010,3012,3,324,162,0,3011,3010,1,0,0,0,3011,3012,
        1,0,0,0,3012,3015,1,0,0,0,3013,3014,5,47,0,0,3014,3016,5,426,0,0,
        3015,3013,1,0,0,0,3015,3016,1,0,0,0,3016,3020,1,0,0,0,3017,3021,
        5,130,0,0,3018,3019,5,6,0,0,3019,3021,3,648,324,0,3020,3017,1,0,
        0,0,3020,3018,1,0,0,0,3020,3021,1,0,0,0,3021,3023,1,0,0,0,3022,3024,
        3,34,17,0,3023,3022,1,0,0,0,3023,3024,1,0,0,0,3024,3050,1,0,0,0,
        3025,3028,5,4,0,0,3026,3028,5,278,0,0,3027,3025,1,0,0,0,3027,3026,
        1,0,0,0,3028,3029,1,0,0,0,3029,3030,5,46,0,0,3030,3031,5,399,0,0,
        3031,3032,3,248,124,0,3032,3034,5,400,0,0,3033,3035,3,34,17,0,3034,
        3033,1,0,0,0,3034,3035,1,0,0,0,3035,3050,1,0,0,0,3036,3037,5,365,
        0,0,3037,3039,5,46,0,0,3038,3040,3,34,17,0,3039,3038,1,0,0,0,3039,
        3040,1,0,0,0,3040,3050,1,0,0,0,3041,3047,3,268,134,0,3042,3044,5,
        218,0,0,3043,3045,5,34,0,0,3044,3043,1,0,0,0,3044,3045,1,0,0,0,3045,
        3048,1,0,0,0,3046,3048,5,222,0,0,3047,3042,1,0,0,0,3047,3046,1,0,
        0,0,3048,3050,1,0,0,0,3049,2917,1,0,0,0,3049,2920,1,0,0,0,3049,2923,
        1,0,0,0,3049,2924,1,0,0,0,3049,2936,1,0,0,0,3049,2939,1,0,0,0,3049,
        2942,1,0,0,0,3049,2945,1,0,0,0,3049,2959,1,0,0,0,3049,2961,1,0,0,
        0,3049,2962,1,0,0,0,3049,2986,1,0,0,0,3049,2999,1,0,0,0,3049,3003,
        1,0,0,0,3049,3027,1,0,0,0,3049,3036,1,0,0,0,3049,3041,1,0,0,0,3050,
        417,1,0,0,0,3051,3052,5,304,0,0,3052,3053,5,332,0,0,3053,3078,3,
        226,113,0,3054,3055,5,363,0,0,3055,3057,5,332,0,0,3056,3058,3,30,
        15,0,3057,3056,1,0,0,0,3057,3058,1,0,0,0,3058,3059,1,0,0,0,3059,
        3078,3,226,113,0,3060,3061,5,274,0,0,3061,3062,5,341,0,0,3062,3078,
        3,480,240,0,3063,3065,5,4,0,0,3064,3066,3,32,16,0,3065,3064,1,0,
        0,0,3065,3066,1,0,0,0,3066,3071,1,0,0,0,3067,3069,3,636,318,0,3068,
        3070,3,424,212,0,3069,3068,1,0,0,0,3069,3070,1,0,0,0,3070,3072,1,
        0,0,0,3071,3067,1,0,0,0,3072,3073,1,0,0,0,3073,3071,1,0,0,0,3073,
        3074,1,0,0,0,3074,3078,1,0,0,0,3075,3078,3,426,213,0,3076,3078,3,
        380,190,0,3077,3051,1,0,0,0,3077,3054,1,0,0,0,3077,3060,1,0,0,0,
        3077,3063,1,0,0,0,3077,3075,1,0,0,0,3077,3076,1,0,0,0,3078,419,1,
        0,0,0,3079,3080,3,472,236,0,3080,3081,5,304,0,0,3081,3082,5,76,0,
        0,3082,3083,3,230,115,0,3083,3095,1,0,0,0,3084,3085,3,472,236,0,
        3085,3086,5,304,0,0,3086,3087,5,236,0,0,3087,3088,3,128,64,0,3088,
        3095,1,0,0,0,3089,3090,3,472,236,0,3090,3091,5,304,0,0,3091,3092,
        7,26,0,0,3092,3093,5,426,0,0,3093,3095,1,0,0,0,3094,3079,1,0,0,0,
        3094,3084,1,0,0,0,3094,3089,1,0,0,0,3095,421,1,0,0,0,3096,3097,3,
        472,236,0,3097,3098,5,304,0,0,3098,3099,5,77,0,0,3099,3100,3,230,
        115,0,3100,3112,1,0,0,0,3101,3102,3,472,236,0,3102,3103,5,304,0,
        0,3103,3104,5,236,0,0,3104,3105,3,128,64,0,3105,3112,1,0,0,0,3106,
        3107,3,472,236,0,3107,3108,5,304,0,0,3108,3109,5,367,0,0,3109,3110,
        5,426,0,0,3110,3112,1,0,0,0,3111,3096,1,0,0,0,3111,3101,1,0,0,0,
        3111,3106,1,0,0,0,3112,423,1,0,0,0,3113,3114,5,189,0,0,3114,3115,
        5,426,0,0,3115,425,1,0,0,0,3116,3118,5,101,0,0,3117,3119,3,30,15,
        0,3118,3117,1,0,0,0,3118,3119,1,0,0,0,3119,3120,1,0,0,0,3120,3121,
        5,237,0,0,3121,3127,3,640,320,0,3122,3123,5,397,0,0,3123,3124,5,
        237,0,0,3124,3126,3,640,320,0,3125,3122,1,0,0,0,3126,3129,1,0,0,
        0,3127,3125,1,0,0,0,3127,3128,1,0,0,0,3128,3132,1,0,0,0,3129,3127,
        1,0,0,0,3130,3131,5,152,0,0,3131,3133,5,254,0,0,3132,3130,1,0,0,
        0,3132,3133,1,0,0,0,3133,3135,1,0,0,0,3134,3136,5,255,0,0,3135,3134,
        1,0,0,0,3135,3136,1,0,0,0,3136,3138,1,0,0,0,3137,3139,3,14,7,0,3138,
        3137,1,0,0,0,3138,3139,1,0,0,0,3139,427,1,0,0,0,3140,3143,3,582,
        291,0,3141,3143,3,294,147,0,3142,3140,1,0,0,0,3142,3141,1,0,0,0,
        3143,3144,1,0,0,0,3144,3145,5,405,0,0,3145,3146,5,426,0,0,3146,429,
        1,0,0,0,3147,3157,5,115,0,0,3148,3149,5,289,0,0,3149,3150,5,399,
        0,0,3150,3158,7,27,0,0,3151,3152,5,118,0,0,3152,3153,5,399,0,0,3153,
        3158,5,426,0,0,3154,3155,5,306,0,0,3155,3156,5,399,0,0,3156,3158,
        5,431,0,0,3157,3148,1,0,0,0,3157,3151,1,0,0,0,3157,3154,1,0,0,0,
        3158,3159,1,0,0,0,3159,3160,5,400,0,0,3160,431,1,0,0,0,3161,3162,
        5,160,0,0,3162,3163,5,426,0,0,3163,3164,5,233,0,0,3164,3165,5,426,
        0,0,3165,3166,5,301,0,0,3166,3171,5,426,0,0,3167,3168,5,159,0,0,
        3168,3169,5,426,0,0,3169,3170,5,232,0,0,3170,3172,5,426,0,0,3171,
        3167,1,0,0,0,3171,3172,1,0,0,0,3172,3175,1,0,0,0,3173,3175,3,648,
        324,0,3174,3161,1,0,0,0,3174,3173,1,0,0,0,3175,433,1,0,0,0,3176,
        3177,5,184,0,0,3177,3186,5,128,0,0,3178,3179,5,184,0,0,3179,3180,
        5,128,0,0,3180,3181,3,648,324,0,3181,3182,5,426,0,0,3182,3186,1,
        0,0,0,3183,3184,5,184,0,0,3184,3186,3,478,239,0,3185,3176,1,0,0,
        0,3185,3178,1,0,0,0,3185,3183,1,0,0,0,3186,435,1,0,0,0,3187,3189,
        5,58,0,0,3188,3190,5,333,0,0,3189,3188,1,0,0,0,3189,3190,1,0,0,0,
        3190,3192,1,0,0,0,3191,3193,5,345,0,0,3192,3191,1,0,0,0,3192,3193,
        1,0,0,0,3193,3195,1,0,0,0,3194,3196,5,123,0,0,3195,3194,1,0,0,0,
        3195,3196,1,0,0,0,3196,3197,1,0,0,0,3197,3199,5,329,0,0,3198,3200,
        3,32,16,0,3199,3198,1,0,0,0,3199,3200,1,0,0,0,3200,3201,1,0,0,0,
        3201,3258,3,480,240,0,3202,3204,3,434,217,0,3203,3205,3,200,100,
        0,3204,3203,1,0,0,0,3204,3205,1,0,0,0,3205,3207,1,0,0,0,3206,3208,
        3,222,111,0,3207,3206,1,0,0,0,3207,3208,1,0,0,0,3208,3210,1,0,0,
        0,3209,3211,3,246,123,0,3210,3209,1,0,0,0,3210,3211,1,0,0,0,3211,
        3213,1,0,0,0,3212,3214,3,424,212,0,3213,3212,1,0,0,0,3213,3214,1,
        0,0,0,3214,3216,1,0,0,0,3215,3217,3,224,112,0,3216,3215,1,0,0,0,
        3216,3217,1,0,0,0,3217,3219,1,0,0,0,3218,3220,3,198,99,0,3219,3218,
        1,0,0,0,3219,3220,1,0,0,0,3220,3259,1,0,0,0,3221,3222,5,399,0,0,
        3222,3223,3,250,125,0,3223,3224,5,400,0,0,3224,3226,1,0,0,0,3225,
        3221,1,0,0,0,3225,3226,1,0,0,0,3226,3228,1,0,0,0,3227,3229,3,196,
        98,0,3228,3227,1,0,0,0,3228,3229,1,0,0,0,3229,3231,1,0,0,0,3230,
        3232,3,200,100,0,3231,3230,1,0,0,0,3231,3232,1,0,0,0,3232,3234,1,
        0,0,0,3233,3235,3,208,104,0,3234,3233,1,0,0,0,3234,3235,1,0,0,0,
        3235,3237,1,0,0,0,3236,3238,3,210,105,0,3237,3236,1,0,0,0,3237,3238,
        1,0,0,0,3238,3240,1,0,0,0,3239,3241,3,222,111,0,3240,3239,1,0,0,
        0,3240,3241,1,0,0,0,3241,3243,1,0,0,0,3242,3244,3,246,123,0,3243,
        3242,1,0,0,0,3243,3244,1,0,0,0,3244,3246,1,0,0,0,3245,3247,3,424,
        212,0,3246,3245,1,0,0,0,3246,3247,1,0,0,0,3247,3249,1,0,0,0,3248,
        3250,3,224,112,0,3249,3248,1,0,0,0,3249,3250,1,0,0,0,3250,3252,1,
        0,0,0,3251,3253,3,198,99,0,3252,3251,1,0,0,0,3252,3253,1,0,0,0,3253,
        3256,1,0,0,0,3254,3255,5,17,0,0,3255,3257,3,380,190,0,3256,3254,
        1,0,0,0,3256,3257,1,0,0,0,3257,3259,1,0,0,0,3258,3202,1,0,0,0,3258,
        3225,1,0,0,0,3259,3323,1,0,0,0,3260,3261,5,58,0,0,3261,3262,5,195,
        0,0,3262,3264,5,329,0,0,3263,3265,3,32,16,0,3264,3263,1,0,0,0,3264,
        3265,1,0,0,0,3265,3266,1,0,0,0,3266,3320,3,480,240,0,3267,3269,3,
        434,217,0,3268,3270,3,222,111,0,3269,3268,1,0,0,0,3269,3270,1,0,
        0,0,3270,3272,1,0,0,0,3271,3273,3,246,123,0,3272,3271,1,0,0,0,3272,
        3273,1,0,0,0,3273,3275,1,0,0,0,3274,3276,3,424,212,0,3275,3274,1,
        0,0,0,3275,3276,1,0,0,0,3276,3278,1,0,0,0,3277,3279,3,224,112,0,
        3278,3277,1,0,0,0,3278,3279,1,0,0,0,3279,3281,1,0,0,0,3280,3282,
        3,198,99,0,3281,3280,1,0,0,0,3281,3282,1,0,0,0,3282,3321,1,0,0,0,
        3283,3284,5,399,0,0,3284,3285,3,250,125,0,3285,3286,5,400,0,0,3286,
        3288,1,0,0,0,3287,3283,1,0,0,0,3287,3288,1,0,0,0,3288,3290,1,0,0,
        0,3289,3291,3,196,98,0,3290,3289,1,0,0,0,3290,3291,1,0,0,0,3291,
        3293,1,0,0,0,3292,3294,3,200,100,0,3293,3292,1,0,0,0,3293,3294,1,
        0,0,0,3294,3296,1,0,0,0,3295,3297,3,208,104,0,3296,3295,1,0,0,0,
        3296,3297,1,0,0,0,3297,3299,1,0,0,0,3298,3300,3,210,105,0,3299,3298,
        1,0,0,0,3299,3300,1,0,0,0,3300,3302,1,0,0,0,3301,3303,3,222,111,
        0,3302,3301,1,0,0,0,3302,3303,1,0,0,0,3303,3305,1,0,0,0,3304,3306,
        3,246,123,0,3305,3304,1,0,0,0,3305,3306,1,0,0,0,3306,3308,1,0,0,
        0,3307,3309,3,424,212,0,3308,3307,1,0,0,0,3308,3309,1,0,0,0,3309,
        3311,1,0,0,0,3310,3312,3,224,112,0,3311,3310,1,0,0,0,3311,3312,1,
        0,0,0,3312,3314,1,0,0,0,3313,3315,3,198,99,0,3314,3313,1,0,0,0,3314,
        3315,1,0,0,0,3315,3318,1,0,0,0,3316,3317,5,17,0,0,3317,3319,3,380,
        190,0,3318,3316,1,0,0,0,3318,3319,1,0,0,0,3319,3321,1,0,0,0,3320,
        3267,1,0,0,0,3320,3287,1,0,0,0,3321,3323,1,0,0,0,3322,3187,1,0,0,
        0,3322,3260,1,0,0,0,3323,437,1,0,0,0,3324,3325,5,58,0,0,3325,3327,
        5,69,0,0,3326,3328,3,32,16,0,3327,3326,1,0,0,0,3327,3328,1,0,0,0,
        3328,3329,1,0,0,0,3329,3332,3,648,324,0,3330,3331,5,352,0,0,3331,
        3333,5,426,0,0,3332,3330,1,0,0,0,3332,3333,1,0,0,0,3333,3336,1,0,
        0,0,3334,3335,5,367,0,0,3335,3337,5,426,0,0,3336,3334,1,0,0,0,3336,
        3337,1,0,0,0,3337,3340,1,0,0,0,3338,3339,5,47,0,0,3339,3341,5,426,
        0,0,3340,3338,1,0,0,0,3340,3341,1,0,0,0,3341,3345,1,0,0,0,3342,3343,
        5,387,0,0,3343,3344,5,77,0,0,3344,3346,3,230,115,0,3345,3342,1,0,
        0,0,3345,3346,1,0,0,0,3346,439,1,0,0,0,3347,3348,5,101,0,0,3348,
        3350,5,69,0,0,3349,3351,3,30,15,0,3350,3349,1,0,0,0,3350,3351,1,
        0,0,0,3351,3352,1,0,0,0,3352,3353,3,648,324,0,3353,441,1,0,0,0,3354,
        3355,3,648,324,0,3355,3356,5,395,0,0,3356,3358,1,0,0,0,3357,3354,
        1,0,0,0,3358,3361,1,0,0,0,3359,3357,1,0,0,0,3359,3360,1,0,0,0,3360,
        3362,1,0,0,0,3361,3359,1,0,0,0,3362,3363,5,415,0,0,3363,443,1,0,
        0,0,3364,3369,3,590,295,0,3365,3366,5,397,0,0,3366,3368,3,590,295,
        0,3367,3365,1,0,0,0,3368,3371,1,0,0,0,3369,3367,1,0,0,0,3369,3370,
        1,0,0,0,3370,445,1,0,0,0,3371,3369,1,0,0,0,3372,3377,3,648,324,0,
        3373,3374,5,397,0,0,3374,3376,3,648,324,0,3375,3373,1,0,0,0,3376,
        3379,1,0,0,0,3377,3375,1,0,0,0,3377,3378,1,0,0,0,3378,447,1,0,0,
        0,3379,3377,1,0,0,0,3380,3381,5,139,0,0,3381,3382,3,450,225,0,3382,
        449,1,0,0,0,3383,3384,5,359,0,0,3384,3387,3,458,229,0,3385,3386,
        5,397,0,0,3386,3388,3,458,229,0,3387,3385,1,0,0,0,3388,3389,1,0,
        0,0,3389,3387,1,0,0,0,3389,3390,1,0,0,0,3390,3393,1,0,0,0,3391,3393,
        3,454,227,0,3392,3383,1,0,0,0,3392,3391,1,0,0,0,3393,451,1,0,0,0,
        3394,3398,3,468,234,0,3395,3397,3,462,231,0,3396,3395,1,0,0,0,3397,
        3400,1,0,0,0,3398,3396,1,0,0,0,3398,3399,1,0,0,0,3399,3427,1,0,0,
        0,3400,3398,1,0,0,0,3401,3405,3,502,251,0,3402,3404,3,462,231,0,
        3403,3402,1,0,0,0,3404,3407,1,0,0,0,3405,3403,1,0,0,0,3405,3406,
        1,0,0,0,3406,3427,1,0,0,0,3407,3405,1,0,0,0,3408,3412,3,486,243,
        0,3409,3411,3,462,231,0,3410,3409,1,0,0,0,3411,3414,1,0,0,0,3412,
        3410,1,0,0,0,3412,3413,1,0,0,0,3413,3427,1,0,0,0,3414,3412,1,0,0,
        0,3415,3419,3,492,246,0,3416,3418,3,462,231,0,3417,3416,1,0,0,0,
        3418,3421,1,0,0,0,3419,3417,1,0,0,0,3419,3420,1,0,0,0,3420,3427,
        1,0,0,0,3421,3419,1,0,0,0,3422,3423,5,399,0,0,3423,3424,3,454,227,
        0,3424,3425,5,400,0,0,3425,3427,1,0,0,0,3426,3394,1,0,0,0,3426,3401,
        1,0,0,0,3426,3408,1,0,0,0,3426,3415,1,0,0,0,3426,3422,1,0,0,0,3427,
        453,1,0,0,0,3428,3439,3,452,226,0,3429,3430,3,460,230,0,3430,3435,
        3,456,228,0,3431,3432,5,224,0,0,3432,3436,3,590,295,0,3433,3434,
        5,370,0,0,3434,3436,3,264,132,0,3435,3431,1,0,0,0,3435,3433,1,0,
        0,0,3435,3436,1,0,0,0,3436,3438,1,0,0,0,3437,3429,1,0,0,0,3438,3441,
        1,0,0,0,3439,3437,1,0,0,0,3439,3440,1,0,0,0,3440,455,1,0,0,0,3441,
        3439,1,0,0,0,3442,3447,3,468,234,0,3443,3447,3,502,251,0,3444,3447,
        3,486,243,0,3445,3447,3,492,246,0,3446,3442,1,0,0,0,3446,3443,1,
        0,0,0,3446,3444,1,0,0,0,3446,3445,1,0,0,0,3447,3451,1,0,0,0,3448,
        3450,3,462,231,0,3449,3448,1,0,0,0,3450,3453,1,0,0,0,3451,3449,1,
        0,0,0,3451,3452,1,0,0,0,3452,457,1,0,0,0,3453,3451,1,0,0,0,3454,
        3456,5,250,0,0,3455,3454,1,0,0,0,3455,3456,1,0,0,0,3456,3457,1,0,
        0,0,3457,3459,3,476,238,0,3458,3460,3,466,233,0,3459,3458,1,0,0,
        0,3459,3460,1,0,0,0,3460,3465,1,0,0,0,3461,3463,5,17,0,0,3462,3461,
        1,0,0,0,3462,3463,1,0,0,0,3463,3464,1,0,0,0,3464,3466,3,648,324,
        0,3465,3462,1,0,0,0,3465,3466,1,0,0,0,3466,3467,1,0,0,0,3467,3468,
        5,399,0,0,3468,3469,3,444,222,0,3469,3470,5,400,0,0,3470,459,1,0,
        0,0,3471,3486,5,397,0,0,3472,3483,5,157,0,0,3473,3483,5,60,0,0,3474,
        3476,7,28,0,0,3475,3477,5,231,0,0,3476,3475,1,0,0,0,3476,3477,1,
        0,0,0,3477,3483,1,0,0,0,3478,3480,5,180,0,0,3479,3481,7,29,0,0,3480,
        3479,1,0,0,0,3480,3481,1,0,0,0,3481,3483,1,0,0,0,3482,3472,1,0,0,
        0,3482,3473,1,0,0,0,3482,3474,1,0,0,0,3482,3478,1,0,0,0,3482,3483,
        1,0,0,0,3483,3484,1,0,0,0,3484,3486,5,171,0,0,3485,3471,1,0,0,0,
        3485,3482,1,0,0,0,3486,461,1,0,0,0,3487,3488,5,178,0,0,3488,3489,
        5,378,0,0,3489,3490,5,231,0,0,3490,3491,3,560,280,0,3491,3501,3,
        464,232,0,3492,3493,5,17,0,0,3493,3498,3,648,324,0,3494,3495,5,397,
        0,0,3495,3497,3,648,324,0,3496,3494,1,0,0,0,3497,3500,1,0,0,0,3498,
        3496,1,0,0,0,3498,3499,1,0,0,0,3499,3502,1,0,0,0,3500,3498,1,0,0,
        0,3501,3492,1,0,0,0,3501,3502,1,0,0,0,3502,3545,1,0,0,0,3503,3505,
        5,397,0,0,3504,3503,1,0,0,0,3504,3505,1,0,0,0,3505,3506,1,0,0,0,
        3506,3542,5,178,0,0,3507,3508,5,378,0,0,3508,3509,3,560,280,0,3509,
        3519,3,464,232,0,3510,3511,5,17,0,0,3511,3516,3,648,324,0,3512,3513,
        5,397,0,0,3513,3515,3,648,324,0,3514,3512,1,0,0,0,3515,3518,1,0,
        0,0,3516,3514,1,0,0,0,3516,3517,1,0,0,0,3517,3520,1,0,0,0,3518,3516,
        1,0,0,0,3519,3510,1,0,0,0,3519,3520,1,0,0,0,3520,3543,1,0,0,0,3521,
        3522,5,329,0,0,3522,3523,5,399,0,0,3523,3524,3,498,249,0,3524,3526,
        5,400,0,0,3525,3527,5,17,0,0,3526,3525,1,0,0,0,3526,3527,1,0,0,0,
        3527,3528,1,0,0,0,3528,3540,3,464,232,0,3529,3530,5,399,0,0,3530,
        3535,3,648,324,0,3531,3532,5,397,0,0,3532,3534,3,648,324,0,3533,
        3531,1,0,0,0,3534,3537,1,0,0,0,3535,3533,1,0,0,0,3535,3536,1,0,0,
        0,3536,3538,1,0,0,0,3537,3535,1,0,0,0,3538,3539,5,400,0,0,3539,3541,
        1,0,0,0,3540,3529,1,0,0,0,3540,3541,1,0,0,0,3541,3543,1,0,0,0,3542,
        3507,1,0,0,0,3542,3521,1,0,0,0,3543,3545,1,0,0,0,3544,3487,1,0,0,
        0,3544,3504,1,0,0,0,3545,463,1,0,0,0,3546,3547,3,648,324,0,3547,
        465,1,0,0,0,3548,3549,5,331,0,0,3549,3550,5,399,0,0,3550,3551,5,
        30,0,0,3551,3552,5,431,0,0,3552,3553,5,230,0,0,3553,3554,5,221,0,
        0,3554,3564,5,431,0,0,3555,3556,5,224,0,0,3556,3561,3,590,295,0,
        3557,3558,5,397,0,0,3558,3560,3,590,295,0,3559,3557,1,0,0,0,3560,
        3563,1,0,0,0,3561,3559,1,0,0,0,3561,3562,1,0,0,0,3562,3565,1,0,0,
        0,3563,3561,1,0,0,0,3564,3555,1,0,0,0,3564,3565,1,0,0,0,3565,3566,
        1,0,0,0,3566,3576,5,400,0,0,3567,3568,5,331,0,0,3568,3572,5,399,
        0,0,3569,3570,5,431,0,0,3570,3573,7,30,0,0,3571,3573,5,430,0,0,3572,
        3569,1,0,0,0,3572,3571,1,0,0,0,3573,3574,1,0,0,0,3574,3576,5,400,
        0,0,3575,3548,1,0,0,0,3575,3567,1,0,0,0,3576,467,1,0,0,0,3577,3579,
        3,476,238,0,3578,3580,3,226,113,0,3579,3578,1,0,0,0,3579,3580,1,
        0,0,0,3580,3582,1,0,0,0,3581,3583,3,466,233,0,3582,3581,1,0,0,0,
        3582,3583,1,0,0,0,3583,3585,1,0,0,0,3584,3586,3,470,235,0,3585,3584,
        1,0,0,0,3585,3586,1,0,0,0,3586,3591,1,0,0,0,3587,3589,5,17,0,0,3588,
        3587,1,0,0,0,3588,3589,1,0,0,0,3589,3590,1,0,0,0,3590,3592,3,648,
        324,0,3591,3588,1,0,0,0,3591,3592,1,0,0,0,3592,469,1,0,0,0,3593,
        3603,5,134,0,0,3594,3595,5,327,0,0,3595,3596,5,17,0,0,3596,3597,
        5,221,0,0,3597,3604,3,590,295,0,3598,3599,5,134,0,0,3599,3600,5,
        328,0,0,3600,3601,5,17,0,0,3601,3602,5,221,0,0,3602,3604,5,431,0,
        0,3603,3594,1,0,0,0,3603,3598,1,0,0,0,3604,471,1,0,0,0,3605,3606,
        3,648,324,0,3606,473,1,0,0,0,3607,3608,3,648,324,0,3608,475,1,0,
        0,0,3609,3612,3,478,239,0,3610,3612,3,482,241,0,3611,3609,1,0,0,
        0,3611,3610,1,0,0,0,3612,477,1,0,0,0,3613,3614,3,648,324,0,3614,
        3615,5,395,0,0,3615,3618,3,648,324,0,3616,3617,5,395,0,0,3617,3619,
        3,648,324,0,3618,3616,1,0,0,0,3618,3619,1,0,0,0,3619,3622,1,0,0,
        0,3620,3622,3,648,324,0,3621,3613,1,0,0,0,3621,3620,1,0,0,0,3622,
        479,1,0,0,0,3623,3624,3,648,324,0,3624,3625,5,395,0,0,3625,3628,
        3,648,324,0,3626,3627,5,395,0,0,3627,3629,3,648,324,0,3628,3626,
        1,0,0,0,3628,3629,1,0,0,0,3629,3632,1,0,0,0,3630,3632,3,648,324,
        0,3631,3623,1,0,0,0,3631,3630,1,0,0,0,3632,481,1,0,0,0,3633,3634,
        3,648,324,0,3634,3635,5,395,0,0,3635,3637,1,0,0,0,3636,3633,1,0,
        0,0,3636,3637,1,0,0,0,3637,3638,1,0,0,0,3638,3639,3,648,324,0,3639,
        483,1,0,0,0,3640,3641,3,648,324,0,3641,3642,5,395,0,0,3642,3644,
        1,0,0,0,3643,3640,1,0,0,0,3643,3644,1,0,0,0,3644,3645,1,0,0,0,3645,
        3646,3,648,324,0,3646,485,1,0,0,0,3647,3648,5,399,0,0,3648,3649,
        3,360,180,0,3649,3651,5,400,0,0,3650,3652,5,17,0,0,3651,3650,1,0,
        0,0,3651,3652,1,0,0,0,3652,3653,1,0,0,0,3653,3654,3,648,324,0,3654,
        487,1,0,0,0,3655,3656,5,237,0,0,3656,3657,5,32,0,0,3657,3659,3,546,
        273,0,3658,3660,3,552,276,0,3659,3658,1,0,0,0,3659,3660,1,0,0,0,
        3660,3669,1,0,0,0,3661,3669,3,552,276,0,3662,3664,3,556,278,0,3663,
        3665,3,558,279,0,3664,3663,1,0,0,0,3664,3665,1,0,0,0,3665,3669,1,
        0,0,0,3666,3669,3,558,279,0,3667,3669,3,554,277,0,3668,3655,1,0,
        0,0,3668,3661,1,0,0,0,3668,3662,1,0,0,0,3668,3666,1,0,0,0,3668,3667,
        1,0,0,0,3669,489,1,0,0,0,3670,3674,3,486,243,0,3671,3674,3,468,234,
        0,3672,3674,3,492,246,0,3673,3670,1,0,0,0,3673,3671,1,0,0,0,3673,
        3672,1,0,0,0,3674,491,1,0,0,0,3675,3677,3,494,247,0,3676,3678,3,
        648,324,0,3677,3676,1,0,0,0,3677,3678,1,0,0,0,3678,493,1,0,0,0,3679,
        3680,3,648,324,0,3680,3681,5,399,0,0,3681,3682,5,224,0,0,3682,3684,
        3,490,245,0,3683,3685,3,488,244,0,3684,3683,1,0,0,0,3684,3685,1,
        0,0,0,3685,3701,1,0,0,0,3686,3687,5,432,0,0,3687,3688,5,399,0,0,
        3688,3689,3,590,295,0,3689,3698,5,400,0,0,3690,3691,5,397,0,0,3691,
        3692,5,432,0,0,3692,3693,5,399,0,0,3693,3694,3,590,295,0,3694,3695,
        5,400,0,0,3695,3697,1,0,0,0,3696,3690,1,0,0,0,3697,3700,1,0,0,0,
        3698,3696,1,0,0,0,3698,3699,1,0,0,0,3699,3702,1,0,0,0,3700,3698,
        1,0,0,0,3701,3686,1,0,0,0,3701,3702,1,0,0,0,3702,3703,1,0,0,0,3703,
        3704,5,400,0,0,3704,495,1,0,0,0,3705,3706,5,384,0,0,3706,3707,3,
        590,295,0,3707,497,1,0,0,0,3708,3727,5,374,0,0,3709,3714,3,548,274,
        0,3710,3711,5,397,0,0,3711,3713,3,548,274,0,3712,3710,1,0,0,0,3713,
        3716,1,0,0,0,3714,3712,1,0,0,0,3714,3715,1,0,0,0,3715,3728,1,0,0,
        0,3716,3714,1,0,0,0,3717,3718,5,399,0,0,3718,3719,3,544,272,0,3719,
        3724,5,400,0,0,3720,3721,5,397,0,0,3721,3723,3,548,274,0,3722,3720,
        1,0,0,0,3723,3726,1,0,0,0,3724,3722,1,0,0,0,3724,3725,1,0,0,0,3725,
        3728,1,0,0,0,3726,3724,1,0,0,0,3727,3709,1,0,0,0,3727,3717,1,0,0,
        0,3728,499,1,0,0,0,3729,3730,5,329,0,0,3730,3731,5,399,0,0,3731,
        3732,3,498,249,0,3732,3733,5,400,0,0,3733,501,1,0,0,0,3734,3736,
        3,500,250,0,3735,3737,5,17,0,0,3736,3735,1,0,0,0,3736,3737,1,0,0,
        0,3737,3738,1,0,0,0,3738,3748,3,464,232,0,3739,3740,5,399,0,0,3740,
        3745,3,648,324,0,3741,3742,5,397,0,0,3742,3744,3,648,324,0,3743,
        3741,1,0,0,0,3744,3747,1,0,0,0,3745,3743,1,0,0,0,3745,3746,1,0,0,
        0,3746,3749,1,0,0,0,3747,3745,1,0,0,0,3748,3739,1,0,0,0,3748,3749,
        1,0,0,0,3749,3750,1,0,0,0,3750,3751,5,400,0,0,3751,503,1,0,0,0,3752,
        3754,5,299,0,0,3753,3755,5,436,0,0,3754,3753,1,0,0,0,3754,3755,1,
        0,0,0,3755,3762,1,0,0,0,3756,3758,7,22,0,0,3757,3756,1,0,0,0,3757,
        3758,1,0,0,0,3758,3759,1,0,0,0,3759,3763,3,508,254,0,3760,3761,5,
        347,0,0,3761,3763,3,506,253,0,3762,3757,1,0,0,0,3762,3760,1,0,0,
        0,3763,3766,1,0,0,0,3764,3766,3,516,258,0,3765,3752,1,0,0,0,3765,
        3764,1,0,0,0,3766,505,1,0,0,0,3767,3768,5,399,0,0,3768,3769,3,520,
        260,0,3769,3770,5,400,0,0,3770,3771,3,212,106,0,3771,3772,3,216,
        108,0,3772,3773,5,370,0,0,3773,3786,5,426,0,0,3774,3784,5,17,0,0,
        3775,3778,5,399,0,0,3776,3779,3,446,223,0,3777,3779,3,248,124,0,
        3778,3776,1,0,0,0,3778,3777,1,0,0,0,3779,3780,1,0,0,0,3780,3781,
        5,400,0,0,3781,3785,1,0,0,0,3782,3785,3,446,223,0,3783,3785,3,248,
        124,0,3784,3775,1,0,0,0,3784,3782,1,0,0,0,3784,3783,1,0,0,0,3785,
        3787,1,0,0,0,3786,3774,1,0,0,0,3786,3787,1,0,0,0,3787,3788,1,0,0,
        0,3788,3789,3,212,106,0,3789,3790,3,214,107,0,3790,507,1,0,0,0,3791,
        3796,3,510,255,0,3792,3793,5,397,0,0,3793,3795,3,510,255,0,3794,
        3792,1,0,0,0,3795,3798,1,0,0,0,3796,3794,1,0,0,0,3796,3797,1,0,0,
        0,3797,509,1,0,0,0,3798,3796,1,0,0,0,3799,3823,3,442,221,0,3800,
        3803,3,512,256,0,3801,3803,3,514,257,0,3802,3800,1,0,0,0,3802,3801,
        1,0,0,0,3803,3820,1,0,0,0,3804,3806,5,17,0,0,3805,3804,1,0,0,0,3805,
        3806,1,0,0,0,3806,3807,1,0,0,0,3807,3821,3,648,324,0,3808,3809,5,
        17,0,0,3809,3810,5,399,0,0,3810,3815,3,648,324,0,3811,3812,5,397,
        0,0,3812,3814,3,648,324,0,3813,3811,1,0,0,0,3814,3817,1,0,0,0,3815,
        3813,1,0,0,0,3815,3816,1,0,0,0,3816,3818,1,0,0,0,3817,3815,1,0,0,
        0,3818,3819,5,400,0,0,3819,3821,1,0,0,0,3820,3805,1,0,0,0,3820,3808,
        1,0,0,0,3820,3821,1,0,0,0,3821,3823,1,0,0,0,3822,3799,1,0,0,0,3822,
        3802,1,0,0,0,3823,511,1,0,0,0,3824,3825,3,256,128,0,3825,513,1,0,
        0,0,3826,3827,3,590,295,0,3827,515,1,0,0,0,3828,3829,7,31,0,0,3829,
        3830,3,520,260,0,3830,3831,3,212,106,0,3831,3832,3,216,108,0,3832,
        3833,5,370,0,0,3833,3846,5,426,0,0,3834,3844,5,17,0,0,3835,3838,
        5,399,0,0,3836,3839,3,446,223,0,3837,3839,3,248,124,0,3838,3836,
        1,0,0,0,3838,3837,1,0,0,0,3839,3840,1,0,0,0,3840,3841,5,400,0,0,
        3841,3845,1,0,0,0,3842,3845,3,446,223,0,3843,3845,3,248,124,0,3844,
        3835,1,0,0,0,3844,3842,1,0,0,0,3844,3843,1,0,0,0,3845,3847,1,0,0,
        0,3846,3834,1,0,0,0,3846,3847,1,0,0,0,3847,3848,1,0,0,0,3848,3849,
        3,212,106,0,3849,3850,3,214,107,0,3850,517,1,0,0,0,3851,3854,3,442,
        221,0,3852,3854,3,590,295,0,3853,3851,1,0,0,0,3853,3852,1,0,0,0,
        3854,519,1,0,0,0,3855,3860,3,518,259,0,3856,3857,5,397,0,0,3857,
        3859,3,518,259,0,3858,3856,1,0,0,0,3859,3862,1,0,0,0,3860,3858,1,
        0,0,0,3860,3861,1,0,0,0,3861,521,1,0,0,0,3862,3860,1,0,0,0,3863,
        3864,5,386,0,0,3864,3865,3,648,324,0,3865,3866,5,17,0,0,3866,3874,
        3,524,262,0,3867,3868,5,397,0,0,3868,3869,3,648,324,0,3869,3870,
        5,17,0,0,3870,3871,3,524,262,0,3871,3873,1,0,0,0,3872,3867,1,0,0,
        0,3873,3876,1,0,0,0,3874,3872,1,0,0,0,3874,3875,1,0,0,0,3875,523,
        1,0,0,0,3876,3874,1,0,0,0,3877,3890,3,648,324,0,3878,3880,5,399,
        0,0,3879,3881,3,648,324,0,3880,3879,1,0,0,0,3880,3881,1,0,0,0,3881,
        3883,1,0,0,0,3882,3884,3,488,244,0,3883,3882,1,0,0,0,3883,3884,1,
        0,0,0,3884,3886,1,0,0,0,3885,3887,3,526,263,0,3886,3885,1,0,0,0,
        3886,3887,1,0,0,0,3887,3888,1,0,0,0,3888,3890,5,400,0,0,3889,3877,
        1,0,0,0,3889,3878,1,0,0,0,3890,525,1,0,0,0,3891,3905,7,32,0,0,3892,
        3893,5,354,0,0,3893,3899,5,247,0,0,3894,3895,5,62,0,0,3895,3899,
        5,291,0,0,3896,3897,5,431,0,0,3897,3899,5,247,0,0,3898,3892,1,0,
        0,0,3898,3894,1,0,0,0,3898,3896,1,0,0,0,3899,3906,1,0,0,0,3900,3901,
        5,25,0,0,3901,3902,3,528,264,0,3902,3903,5,11,0,0,3903,3904,3,528,
        264,0,3904,3906,1,0,0,0,3905,3898,1,0,0,0,3905,3900,1,0,0,0,3906,
        527,1,0,0,0,3907,3908,7,33,0,0,3908,3912,7,34,0,0,3909,3910,5,62,
        0,0,3910,3912,5,291,0,0,3911,3907,1,0,0,0,3911,3909,1,0,0,0,3912,
        529,1,0,0,0,3913,3914,5,144,0,0,3914,3920,5,32,0,0,3915,3921,3,256,
        128,0,3916,3921,3,532,266,0,3917,3921,3,534,267,0,3918,3919,5,399,
        0,0,3919,3921,5,400,0,0,3920,3915,1,0,0,0,3920,3916,1,0,0,0,3920,
        3917,1,0,0,0,3920,3918,1,0,0,0,3921,531,1,0,0,0,3922,3925,5,290,
        0,0,3923,3925,5,61,0,0,3924,3922,1,0,0,0,3924,3923,1,0,0,0,3925,
        3926,1,0,0,0,3926,3927,5,399,0,0,3927,3932,3,590,295,0,3928,3929,
        5,397,0,0,3929,3931,3,590,295,0,3930,3928,1,0,0,0,3931,3934,1,0,
        0,0,3932,3930,1,0,0,0,3932,3933,1,0,0,0,3933,3935,1,0,0,0,3934,3932,
        1,0,0,0,3935,3936,5,400,0,0,3936,533,1,0,0,0,3937,3942,3,550,275,
        0,3938,3939,5,387,0,0,3939,3943,5,290,0,0,3940,3941,5,387,0,0,3941,
        3943,5,61,0,0,3942,3938,1,0,0,0,3942,3940,1,0,0,0,3942,3943,1,0,
        0,0,3943,3957,1,0,0,0,3944,3945,5,145,0,0,3945,3946,5,305,0,0,3946,
        3947,5,399,0,0,3947,3952,3,536,268,0,3948,3949,5,397,0,0,3949,3951,
        3,536,268,0,3950,3948,1,0,0,0,3951,3954,1,0,0,0,3952,3950,1,0,0,
        0,3952,3953,1,0,0,0,3953,3955,1,0,0,0,3954,3952,1,0,0,0,3955,3956,
        5,400,0,0,3956,3958,1,0,0,0,3957,3944,1,0,0,0,3957,3958,1,0,0,0,
        3958,535,1,0,0,0,3959,3961,5,399,0,0,3960,3962,3,590,295,0,3961,
        3960,1,0,0,0,3961,3962,1,0,0,0,3962,3967,1,0,0,0,3963,3964,5,397,
        0,0,3964,3966,3,590,295,0,3965,3963,1,0,0,0,3966,3969,1,0,0,0,3967,
        3965,1,0,0,0,3967,3968,1,0,0,0,3968,3970,1,0,0,0,3969,3967,1,0,0,
        0,3970,3973,5,400,0,0,3971,3973,3,590,295,0,3972,3959,1,0,0,0,3972,
        3971,1,0,0,0,3973,537,1,0,0,0,3974,3975,5,146,0,0,3975,3976,3,590,
        295,0,3976,539,1,0,0,0,3977,3978,5,256,0,0,3978,3979,3,590,295,0,
        3979,541,1,0,0,0,3980,3983,5,83,0,0,3981,3983,3,590,295,0,3982,3980,
        1,0,0,0,3982,3981,1,0,0,0,3983,543,1,0,0,0,3984,3986,3,590,295,0,
        3985,3987,5,17,0,0,3986,3985,1,0,0,0,3986,3987,1,0,0,0,3987,3989,
        1,0,0,0,3988,3990,3,648,324,0,3989,3988,1,0,0,0,3989,3990,1,0,0,
        0,3990,4001,1,0,0,0,3991,3992,5,397,0,0,3992,3994,3,590,295,0,3993,
        3995,5,17,0,0,3994,3993,1,0,0,0,3994,3995,1,0,0,0,3995,3997,1,0,
        0,0,3996,3998,3,648,324,0,3997,3996,1,0,0,0,3997,3998,1,0,0,0,3998,
        4000,1,0,0,0,3999,3991,1,0,0,0,4000,4003,1,0,0,0,4001,3999,1,0,0,
        0,4001,4002,1,0,0,0,4002,545,1,0,0,0,4003,4001,1,0,0,0,4004,4007,
        3,548,274,0,4005,4007,3,550,275,0,4006,4004,1,0,0,0,4006,4005,1,
        0,0,0,4007,547,1,0,0,0,4008,4009,5,399,0,0,4009,4010,3,550,275,0,
        4010,4011,5,400,0,0,4011,549,1,0,0,0,4012,4019,3,542,271,0,4013,
        4014,5,397,0,0,4014,4016,3,542,271,0,4015,4013,1,0,0,0,4016,4017,
        1,0,0,0,4017,4015,1,0,0,0,4017,4018,1,0,0,0,4018,4020,1,0,0,0,4019,
        4015,1,0,0,0,4019,4020,1,0,0,0,4020,551,1,0,0,0,4021,4022,5,229,
        0,0,4022,4023,5,32,0,0,4023,4028,3,308,154,0,4024,4025,5,397,0,0,
        4025,4027,3,308,154,0,4026,4024,1,0,0,0,4027,4030,1,0,0,0,4028,4026,
        1,0,0,0,4028,4029,1,0,0,0,4029,553,1,0,0,0,4030,4028,1,0,0,0,4031,
        4032,5,41,0,0,4032,4033,5,32,0,0,4033,4034,3,546,273,0,4034,555,
        1,0,0,0,4035,4036,5,97,0,0,4036,4037,5,32,0,0,4037,4038,3,546,273,
        0,4038,557,1,0,0,0,4039,4040,5,314,0,0,4040,4060,5,32,0,0,4041,4042,
        5,399,0,0,4042,4047,3,308,154,0,4043,4044,5,397,0,0,4044,4046,3,
        308,154,0,4045,4043,1,0,0,0,4046,4049,1,0,0,0,4047,4045,1,0,0,0,
        4047,4048,1,0,0,0,4048,4050,1,0,0,0,4049,4047,1,0,0,0,4050,4051,
        5,400,0,0,4051,4061,1,0,0,0,4052,4057,3,308,154,0,4053,4054,5,397,
        0,0,4054,4056,3,308,154,0,4055,4053,1,0,0,0,4056,4059,1,0,0,0,4057,
        4055,1,0,0,0,4057,4058,1,0,0,0,4058,4061,1,0,0,0,4059,4057,1,0,0,
        0,4060,4041,1,0,0,0,4060,4052,1,0,0,0,4061,559,1,0,0,0,4062,4063,
        5,349,0,0,4063,4067,5,399,0,0,4064,4068,5,179,0,0,4065,4068,5,343,
        0,0,4066,4068,5,29,0,0,4067,4064,1,0,0,0,4067,4065,1,0,0,0,4067,
        4066,1,0,0,0,4067,4068,1,0,0,0,4068,4070,1,0,0,0,4069,4071,3,518,
        259,0,4070,4069,1,0,0,0,4070,4071,1,0,0,0,4071,4072,1,0,0,0,4072,
        4073,5,139,0,0,4073,4074,3,518,259,0,4074,4075,5,400,0,0,4075,4116,
        1,0,0,0,4076,4077,3,568,284,0,4077,4092,5,399,0,0,4078,4093,5,415,
        0,0,4079,4081,7,22,0,0,4080,4079,1,0,0,0,4080,4081,1,0,0,0,4081,
        4090,1,0,0,0,4082,4087,3,518,259,0,4083,4084,5,397,0,0,4084,4086,
        3,518,259,0,4085,4083,1,0,0,0,4086,4089,1,0,0,0,4087,4085,1,0,0,
        0,4087,4088,1,0,0,0,4088,4091,1,0,0,0,4089,4087,1,0,0,0,4090,4082,
        1,0,0,0,4090,4091,1,0,0,0,4091,4093,1,0,0,0,4092,4078,1,0,0,0,4092,
        4080,1,0,0,0,4093,4113,1,0,0,0,4094,4095,5,400,0,0,4095,4096,5,388,
        0,0,4096,4097,5,144,0,0,4097,4098,5,399,0,0,4098,4099,3,552,276,
        0,4099,4100,5,400,0,0,4100,4114,1,0,0,0,4101,4103,5,400,0,0,4102,
        4104,3,562,281,0,4103,4102,1,0,0,0,4103,4104,1,0,0,0,4104,4105,1,
        0,0,0,4105,4106,5,234,0,0,4106,4114,3,524,262,0,4107,4108,3,562,
        281,0,4108,4109,5,400,0,0,4109,4110,5,234,0,0,4110,4111,3,524,262,
        0,4111,4114,1,0,0,0,4112,4114,5,400,0,0,4113,4094,1,0,0,0,4113,4101,
        1,0,0,0,4113,4107,1,0,0,0,4113,4112,1,0,0,0,4114,4116,1,0,0,0,4115,
        4062,1,0,0,0,4115,4076,1,0,0,0,4116,561,1,0,0,0,4117,4118,7,35,0,
        0,4118,4119,5,220,0,0,4119,563,1,0,0,0,4120,4121,3,650,325,0,4121,
        565,1,0,0,0,4122,4125,3,650,325,0,4123,4125,5,426,0,0,4124,4122,
        1,0,0,0,4124,4123,1,0,0,0,4125,567,1,0,0,0,4126,4130,3,650,325,0,
        4127,4130,3,656,328,0,4128,4130,3,646,323,0,4129,4126,1,0,0,0,4129,
        4127,1,0,0,0,4129,4128,1,0,0,0,4130,569,1,0,0,0,4131,4132,5,36,0,
        0,4132,4133,5,399,0,0,4133,4134,3,590,295,0,4134,4135,5,17,0,0,4135,
        4138,3,348,174,0,4136,4137,5,137,0,0,4137,4139,5,426,0,0,4138,4136,
        1,0,0,0,4138,4139,1,0,0,0,4139,4140,1,0,0,0,4140,4141,5,400,0,0,
        4141,571,1,0,0,0,4142,4143,5,35,0,0,4143,4149,3,590,295,0,4144,4145,
        5,383,0,0,4145,4146,3,590,295,0,4146,4147,5,335,0,0,4147,4148,3,
        590,295,0,4148,4150,1,0,0,0,4149,4144,1,0,0,0,4150,4151,1,0,0,0,
        4151,4149,1,0,0,0,4151,4152,1,0,0,0,4152,4155,1,0,0,0,4153,4154,
        5,105,0,0,4154,4156,3,590,295,0,4155,4153,1,0,0,0,4155,4156,1,0,
        0,0,4156,4157,1,0,0,0,4157,4158,5,108,0,0,4158,573,1,0,0,0,4159,
        4165,5,35,0,0,4160,4161,5,383,0,0,4161,4162,3,590,295,0,4162,4163,
        5,335,0,0,4163,4164,3,590,295,0,4164,4166,1,0,0,0,4165,4160,1,0,
        0,0,4166,4167,1,0,0,0,4167,4165,1,0,0,0,4167,4168,1,0,0,0,4168,4171,
        1,0,0,0,4169,4170,5,105,0,0,4170,4172,3,590,295,0,4171,4169,1,0,
        0,0,4171,4172,1,0,0,0,4172,4173,1,0,0,0,4173,4174,5,108,0,0,4174,
        575,1,0,0,0,4175,4176,5,132,0,0,4176,4177,5,399,0,0,4177,4180,3,
        590,295,0,4178,4179,5,341,0,0,4179,4181,3,580,290,0,4180,4178,1,
        0,0,0,4180,4181,1,0,0,0,4181,4182,1,0,0,0,4182,4183,5,400,0,0,4183,
        577,1,0,0,0,4184,4185,5,124,0,0,4185,4186,5,399,0,0,4186,4187,3,
        580,290,0,4187,4188,5,139,0,0,4188,4189,3,590,295,0,4189,4190,5,
        400,0,0,4190,579,1,0,0,0,4191,4200,3,676,338,0,4192,4200,5,257,0,
        0,4193,4200,3,678,339,0,4194,4200,3,680,340,0,4195,4200,3,682,341,
        0,4196,4200,3,684,342,0,4197,4200,3,686,343,0,4198,4200,3,688,344,
        0,4199,4191,1,0,0,0,4199,4192,1,0,0,0,4199,4193,1,0,0,0,4199,4194,
        1,0,0,0,4199,4195,1,0,0,0,4199,4196,1,0,0,0,4199,4197,1,0,0,0,4199,
        4198,1,0,0,0,4200,581,1,0,0,0,4201,4202,3,584,292,0,4202,4203,3,
        588,294,0,4203,4230,1,0,0,0,4204,4230,5,431,0,0,4205,4206,5,71,0,
        0,4206,4230,5,426,0,0,4207,4230,5,63,0,0,4208,4209,5,337,0,0,4209,
        4230,5,426,0,0,4210,4230,5,64,0,0,4211,4212,5,338,0,0,4212,4230,
        5,426,0,0,4213,4217,5,426,0,0,4214,4216,5,426,0,0,4215,4214,1,0,
        0,0,4216,4219,1,0,0,0,4217,4215,1,0,0,0,4217,4218,1,0,0,0,4218,4230,
        1,0,0,0,4219,4217,1,0,0,0,4220,4230,5,428,0,0,4221,4230,5,429,0,
        0,4222,4223,5,433,0,0,4223,4230,5,427,0,0,4224,4230,5,350,0,0,4225,
        4230,5,125,0,0,4226,4230,5,219,0,0,4227,4230,5,424,0,0,4228,4230,
        5,432,0,0,4229,4201,1,0,0,0,4229,4204,1,0,0,0,4229,4205,1,0,0,0,
        4229,4207,1,0,0,0,4229,4208,1,0,0,0,4229,4210,1,0,0,0,4229,4211,
        1,0,0,0,4229,4213,1,0,0,0,4229,4220,1,0,0,0,4229,4221,1,0,0,0,4229,
        4222,1,0,0,0,4229,4224,1,0,0,0,4229,4225,1,0,0,0,4229,4226,1,0,0,
        0,4229,4227,1,0,0,0,4229,4228,1,0,0,0,4230,583,1,0,0,0,4231,4232,
        7,27,0,0,4232,585,1,0,0,0,4233,4234,5,399,0,0,4234,4235,3,584,292,
        0,4235,4236,5,400,0,0,4236,4237,3,588,294,0,4237,4249,1,0,0,0,4238,
        4244,5,165,0,0,4239,4245,3,584,292,0,4240,4241,5,399,0,0,4241,4242,
        3,590,295,0,4242,4243,5,400,0,0,4243,4245,1,0,0,0,4244,4239,1,0,
        0,0,4244,4240,1,0,0,0,4245,4246,1,0,0,0,4246,4247,3,588,294,0,4247,
        4249,1,0,0,0,4248,4233,1,0,0,0,4248,4238,1,0,0,0,4249,587,1,0,0,
        0,4250,4251,3,676,338,0,4251,4252,5,341,0,0,4252,4253,3,678,339,
        0,4253,4265,1,0,0,0,4254,4255,3,682,341,0,4255,4256,5,341,0,0,4256,
        4257,3,688,344,0,4257,4265,1,0,0,0,4258,4265,3,676,338,0,4259,4265,
        3,678,339,0,4260,4265,3,682,341,0,4261,4265,3,684,342,0,4262,4265,
        3,686,343,0,4263,4265,3,688,344,0,4264,4250,1,0,0,0,4264,4254,1,
        0,0,0,4264,4258,1,0,0,0,4264,4259,1,0,0,0,4264,4260,1,0,0,0,4264,
        4261,1,0,0,0,4264,4262,1,0,0,0,4264,4263,1,0,0,0,4265,589,1,0,0,
        0,4266,4271,3,632,316,0,4267,4268,5,228,0,0,4268,4270,3,632,316,
        0,4269,4267,1,0,0,0,4270,4273,1,0,0,0,4271,4269,1,0,0,0,4271,4272,
        1,0,0,0,4272,591,1,0,0,0,4273,4271,1,0,0,0,4274,4286,3,582,291,0,
        4275,4286,3,586,293,0,4276,4286,3,570,285,0,4277,4286,3,578,289,
        0,4278,4286,3,576,288,0,4279,4286,3,572,286,0,4280,4286,3,574,287,
        0,4281,4286,3,610,305,0,4282,4286,3,560,280,0,4283,4286,3,548,274,
        0,4284,4286,3,648,324,0,4285,4274,1,0,0,0,4285,4275,1,0,0,0,4285,
        4276,1,0,0,0,4285,4277,1,0,0,0,4285,4278,1,0,0,0,4285,4279,1,0,0,
        0,4285,4280,1,0,0,0,4285,4281,1,0,0,0,4285,4282,1,0,0,0,4285,4283,
        1,0,0,0,4285,4284,1,0,0,0,4286,593,1,0,0,0,4287,4289,7,36,0,0,4288,
        4287,1,0,0,0,4289,4292,1,0,0,0,4290,4288,1,0,0,0,4290,4291,1,0,0,
        0,4291,4293,1,0,0,0,4292,4290,1,0,0,0,4293,4302,3,592,296,0,4294,
        4295,5,401,0,0,4295,4296,3,590,295,0,4296,4297,5,402,0,0,4297,4301,
        1,0,0,0,4298,4299,5,395,0,0,4299,4301,3,648,324,0,4300,4294,1,0,
        0,0,4300,4298,1,0,0,0,4301,4304,1,0,0,0,4302,4300,1,0,0,0,4302,4303,
        1,0,0,0,4303,595,1,0,0,0,4304,4302,1,0,0,0,4305,4310,3,594,297,0,
        4306,4307,5,423,0,0,4307,4309,3,594,297,0,4308,4306,1,0,0,0,4309,
        4312,1,0,0,0,4310,4308,1,0,0,0,4310,4311,1,0,0,0,4311,597,1,0,0,
        0,4312,4310,1,0,0,0,4313,4318,3,596,298,0,4314,4315,7,37,0,0,4315,
        4317,3,596,298,0,4316,4314,1,0,0,0,4317,4320,1,0,0,0,4318,4316,1,
        0,0,0,4318,4319,1,0,0,0,4319,599,1,0,0,0,4320,4318,1,0,0,0,4321,
        4326,3,598,299,0,4322,4323,7,38,0,0,4323,4325,3,598,299,0,4324,4322,
        1,0,0,0,4325,4328,1,0,0,0,4326,4324,1,0,0,0,4326,4327,1,0,0,0,4327,
        601,1,0,0,0,4328,4326,1,0,0,0,4329,4334,3,600,300,0,4330,4331,5,
        422,0,0,4331,4333,3,600,300,0,4332,4330,1,0,0,0,4333,4336,1,0,0,
        0,4334,4332,1,0,0,0,4334,4335,1,0,0,0,4335,603,1,0,0,0,4336,4334,
        1,0,0,0,4337,4342,3,602,301,0,4338,4339,5,419,0,0,4339,4341,3,602,
        301,0,4340,4338,1,0,0,0,4341,4344,1,0,0,0,4342,4340,1,0,0,0,4342,
        4343,1,0,0,0,4343,605,1,0,0,0,4344,4342,1,0,0,0,4345,4350,3,604,
        302,0,4346,4347,5,421,0,0,4347,4349,3,604,302,0,4348,4346,1,0,0,
        0,4349,4352,1,0,0,0,4350,4348,1,0,0,0,4350,4351,1,0,0,0,4351,607,
        1,0,0,0,4352,4350,1,0,0,0,4353,4354,7,39,0,0,4354,609,1,0,0,0,4355,
        4356,5,399,0,0,4356,4357,3,376,188,0,4357,4358,5,400,0,0,4358,611,
        1,0,0,0,4359,4361,3,606,303,0,4360,4362,3,614,307,0,4361,4360,1,
        0,0,0,4361,4362,1,0,0,0,4362,4366,1,0,0,0,4363,4364,5,117,0,0,4364,
        4366,3,610,305,0,4365,4359,1,0,0,0,4365,4363,1,0,0,0,4366,613,1,
        0,0,0,4367,4368,3,608,304,0,4368,4369,3,606,303,0,4369,4374,1,0,
        0,0,4370,4374,3,616,308,0,4371,4372,5,216,0,0,4372,4374,3,620,310,
        0,4373,4367,1,0,0,0,4373,4370,1,0,0,0,4373,4371,1,0,0,0,4374,615,
        1,0,0,0,4375,4376,5,154,0,0,4376,4390,3,618,309,0,4377,4378,5,25,
        0,0,4378,4379,3,606,303,0,4379,4380,5,11,0,0,4380,4381,3,606,303,
        0,4381,4390,1,0,0,0,4382,4383,5,184,0,0,4383,4384,7,40,0,0,4384,
        4390,3,548,274,0,4385,4386,3,644,322,0,4386,4387,7,41,0,0,4387,4388,
        3,610,305,0,4388,4390,1,0,0,0,4389,4375,1,0,0,0,4389,4377,1,0,0,
        0,4389,4382,1,0,0,0,4389,4385,1,0,0,0,4390,617,1,0,0,0,4391,4394,
        3,610,305,0,4392,4394,3,548,274,0,4393,4391,1,0,0,0,4393,4392,1,
        0,0,0,4394,619,1,0,0,0,4395,4396,7,42,0,0,4396,4399,3,606,303,0,
        4397,4399,3,616,308,0,4398,4395,1,0,0,0,4398,4397,1,0,0,0,4399,621,
        1,0,0,0,4400,4401,5,167,0,0,4401,4402,5,96,0,0,4402,4403,5,139,0,
        0,4403,623,1,0,0,0,4404,4412,5,405,0,0,4405,4412,5,406,0,0,4406,
        4412,5,407,0,0,4407,4408,5,167,0,0,4408,4409,5,216,0,0,4409,4410,
        5,96,0,0,4410,4412,5,139,0,0,4411,4404,1,0,0,0,4411,4405,1,0,0,0,
        4411,4406,1,0,0,0,4411,4407,1,0,0,0,4412,625,1,0,0,0,4413,4422,3,
        612,306,0,4414,4415,3,624,312,0,4415,4416,3,612,306,0,4416,4421,
        1,0,0,0,4417,4418,3,622,311,0,4418,4419,3,612,306,0,4419,4421,1,
        0,0,0,4420,4414,1,0,0,0,4420,4417,1,0,0,0,4421,4424,1,0,0,0,4422,
        4420,1,0,0,0,4422,4423,1,0,0,0,4423,627,1,0,0,0,4424,4422,1,0,0,
        0,4425,4432,5,219,0,0,4426,4432,5,350,0,0,4427,4432,5,125,0,0,4428,
        4432,5,360,0,0,4429,4430,5,216,0,0,4430,4432,7,43,0,0,4431,4425,
        1,0,0,0,4431,4426,1,0,0,0,4431,4427,1,0,0,0,4431,4428,1,0,0,0,4431,
        4429,1,0,0,0,4432,629,1,0,0,0,4433,4435,5,216,0,0,4434,4433,1,0,
        0,0,4435,4438,1,0,0,0,4436,4434,1,0,0,0,4436,4437,1,0,0,0,4437,4439,
        1,0,0,0,4438,4436,1,0,0,0,4439,4442,3,626,313,0,4440,4441,5,167,
        0,0,4441,4443,3,628,314,0,4442,4440,1,0,0,0,4442,4443,1,0,0,0,4443,
        631,1,0,0,0,4444,4449,3,630,315,0,4445,4446,5,11,0,0,4446,4448,3,
        630,315,0,4447,4445,1,0,0,0,4448,4451,1,0,0,0,4449,4447,1,0,0,0,
        4449,4450,1,0,0,0,4450,633,1,0,0,0,4451,4449,1,0,0,0,4452,4454,3,
        478,239,0,4453,4455,3,636,318,0,4454,4453,1,0,0,0,4454,4455,1,0,
        0,0,4455,635,1,0,0,0,4456,4457,5,237,0,0,4457,4458,5,399,0,0,4458,
        4463,3,638,319,0,4459,4460,5,397,0,0,4460,4462,3,638,319,0,4461,
        4459,1,0,0,0,4462,4465,1,0,0,0,4463,4461,1,0,0,0,4463,4464,1,0,0,
        0,4464,4466,1,0,0,0,4465,4463,1,0,0,0,4466,4467,5,400,0,0,4467,637,
        1,0,0,0,4468,4471,3,648,324,0,4469,4470,5,405,0,0,4470,4472,3,582,
        291,0,4471,4469,1,0,0,0,4471,4472,1,0,0,0,4472,639,1,0,0,0,4473,
        4474,5,399,0,0,4474,4479,3,642,321,0,4475,4476,5,397,0,0,4476,4478,
        3,642,321,0,4477,4475,1,0,0,0,4478,4481,1,0,0,0,4479,4477,1,0,0,
        0,4479,4480,1,0,0,0,4480,4482,1,0,0,0,4481,4479,1,0,0,0,4482,4483,
        5,400,0,0,4483,641,1,0,0,0,4484,4487,3,648,324,0,4485,4488,5,184,
        0,0,4486,4488,3,644,322,0,4487,4485,1,0,0,0,4487,4486,1,0,0,0,4488,
        4489,1,0,0,0,4489,4490,3,582,291,0,4490,643,1,0,0,0,4491,4492,7,
        44,0,0,4492,645,1,0,0,0,4493,4494,7,45,0,0,4494,647,1,0,0,0,4495,
        4498,5,432,0,0,4496,4498,3,654,327,0,4497,4495,1,0,0,0,4497,4496,
        1,0,0,0,4498,649,1,0,0,0,4499,4502,3,648,324,0,4500,4501,5,395,0,
        0,4501,4503,3,648,324,0,4502,4500,1,0,0,0,4502,4503,1,0,0,0,4503,
        651,1,0,0,0,4504,4505,3,648,324,0,4505,653,1,0,0,0,4506,4507,7,46,
        0,0,4507,655,1,0,0,0,4508,4509,7,47,0,0,4509,657,1,0,0,0,4510,4562,
        3,648,324,0,4511,4562,5,299,0,0,4512,4562,5,171,0,0,4513,4562,5,
        237,0,0,4514,4562,5,198,0,0,4515,4562,5,268,0,0,4516,4562,5,369,
        0,0,4517,4562,5,241,0,0,4518,4562,5,165,0,0,4519,4562,5,292,0,0,
        4520,4562,5,356,0,0,4521,4562,5,144,0,0,4522,4562,5,203,0,0,4523,
        4562,5,219,0,0,4524,4562,5,126,0,0,4525,4562,5,188,0,0,4526,4562,
        5,101,0,0,4527,4562,5,329,0,0,4528,4562,5,224,0,0,4529,4562,5,291,
        0,0,4530,4562,5,145,0,0,4531,4562,5,304,0,0,4532,4562,5,135,0,0,
        4533,4562,5,318,0,0,4534,4562,5,161,0,0,4535,4562,5,54,0,0,4536,
        4562,5,166,0,0,4537,4562,5,358,0,0,4538,4562,5,45,0,0,4539,4562,
        5,347,0,0,4540,4562,5,96,0,0,4541,4562,5,154,0,0,4542,4562,5,269,
        0,0,4543,4562,5,337,0,0,4544,4562,5,225,0,0,4545,4562,5,108,0,0,
        4546,4562,5,141,0,0,4547,4562,5,365,0,0,4548,4562,5,21,0,0,4549,
        4562,5,78,0,0,4550,4562,5,374,0,0,4551,4562,5,336,0,0,4552,4562,
        5,167,0,0,4553,4562,5,134,0,0,4554,4562,5,216,0,0,4555,4562,5,27,
        0,0,4556,4562,5,370,0,0,4557,4562,5,263,0,0,4558,4562,5,25,0,0,4559,
        4562,5,62,0,0,4560,4562,5,17,0,0,4561,4510,1,0,0,0,4561,4511,1,0,
        0,0,4561,4512,1,0,0,0,4561,4513,1,0,0,0,4561,4514,1,0,0,0,4561,4515,
        1,0,0,0,4561,4516,1,0,0,0,4561,4517,1,0,0,0,4561,4518,1,0,0,0,4561,
        4519,1,0,0,0,4561,4520,1,0,0,0,4561,4521,1,0,0,0,4561,4522,1,0,0,
        0,4561,4523,1,0,0,0,4561,4524,1,0,0,0,4561,4525,1,0,0,0,4561,4526,
        1,0,0,0,4561,4527,1,0,0,0,4561,4528,1,0,0,0,4561,4529,1,0,0,0,4561,
        4530,1,0,0,0,4561,4531,1,0,0,0,4561,4532,1,0,0,0,4561,4533,1,0,0,
        0,4561,4534,1,0,0,0,4561,4535,1,0,0,0,4561,4536,1,0,0,0,4561,4537,
        1,0,0,0,4561,4538,1,0,0,0,4561,4539,1,0,0,0,4561,4540,1,0,0,0,4561,
        4541,1,0,0,0,4561,4542,1,0,0,0,4561,4543,1,0,0,0,4561,4544,1,0,0,
        0,4561,4545,1,0,0,0,4561,4546,1,0,0,0,4561,4547,1,0,0,0,4561,4548,
        1,0,0,0,4561,4549,1,0,0,0,4561,4550,1,0,0,0,4561,4551,1,0,0,0,4561,
        4552,1,0,0,0,4561,4553,1,0,0,0,4561,4554,1,0,0,0,4561,4555,1,0,0,
        0,4561,4556,1,0,0,0,4561,4557,1,0,0,0,4561,4558,1,0,0,0,4561,4559,
        1,0,0,0,4561,4560,1,0,0,0,4562,659,1,0,0,0,4563,4564,5,58,0,0,4564,
        4565,5,280,0,0,4565,4567,5,243,0,0,4566,4568,3,32,16,0,4567,4566,
        1,0,0,0,4567,4568,1,0,0,0,4568,4578,1,0,0,0,4569,4570,3,648,324,
        0,4570,4571,5,184,0,0,4571,4572,3,648,324,0,4572,4579,1,0,0,0,4573,
        4576,3,648,324,0,4574,4575,5,387,0,0,4575,4577,3,666,333,0,4576,
        4574,1,0,0,0,4576,4577,1,0,0,0,4577,4579,1,0,0,0,4578,4569,1,0,0,
        0,4578,4573,1,0,0,0,4579,4729,1,0,0,0,4580,4581,5,9,0,0,4581,4582,
        5,280,0,0,4582,4583,5,243,0,0,4583,4608,3,648,324,0,4584,4609,5,
        373,0,0,4585,4609,3,674,337,0,4586,4587,5,304,0,0,4587,4609,3,666,
        333,0,4588,4589,5,363,0,0,4589,4594,3,668,334,0,4590,4591,5,397,
        0,0,4591,4593,3,668,334,0,4592,4590,1,0,0,0,4593,4596,1,0,0,0,4594,
        4592,1,0,0,0,4594,4595,1,0,0,0,4595,4609,1,0,0,0,4596,4594,1,0,0,
        0,4597,4598,5,274,0,0,4598,4599,5,341,0,0,4599,4609,3,648,324,0,
        4600,4602,3,670,335,0,4601,4603,3,672,336,0,4602,4601,1,0,0,0,4602,
        4603,1,0,0,0,4603,4609,1,0,0,0,4604,4606,3,672,336,0,4605,4607,3,
        670,335,0,4606,4605,1,0,0,0,4606,4607,1,0,0,0,4607,4609,1,0,0,0,
        4608,4584,1,0,0,0,4608,4585,1,0,0,0,4608,4586,1,0,0,0,4608,4588,
        1,0,0,0,4608,4597,1,0,0,0,4608,4600,1,0,0,0,4608,4604,1,0,0,0,4609,
        4729,1,0,0,0,4610,4611,5,101,0,0,4611,4612,5,280,0,0,4612,4614,5,
        243,0,0,4613,4615,3,30,15,0,4614,4613,1,0,0,0,4614,4615,1,0,0,0,
        4615,4616,1,0,0,0,4616,4729,3,648,324,0,4617,4620,3,672,336,0,4618,
        4620,3,674,337,0,4619,4617,1,0,0,0,4619,4618,1,0,0,0,4620,4621,1,
        0,0,0,4621,4622,5,390,0,0,4622,4623,5,197,0,0,4623,4729,1,0,0,0,
        4624,4636,5,278,0,0,4625,4626,5,3,0,0,4626,4627,5,280,0,0,4627,4628,
        5,243,0,0,4628,4629,5,387,0,0,4629,4637,3,648,324,0,4630,4631,5,
        280,0,0,4631,4632,5,243,0,0,4632,4633,3,648,324,0,4633,4634,5,387,
        0,0,4634,4635,3,648,324,0,4635,4637,1,0,0,0,4636,4625,1,0,0,0,4636,
        4630,1,0,0,0,4637,4729,1,0,0,0,4638,4639,5,58,0,0,4639,4640,5,348,
        0,0,4640,4641,3,648,324,0,4641,4642,5,395,0,0,4642,4643,3,648,324,
        0,4643,4644,5,383,0,0,4644,4645,3,694,347,0,4645,4646,5,99,0,0,4646,
        4647,3,696,348,0,4647,4729,1,0,0,0,4648,4649,5,9,0,0,4649,4650,5,
        348,0,0,4650,4651,3,648,324,0,4651,4652,5,395,0,0,4652,4669,3,648,
        324,0,4653,4654,5,383,0,0,4654,4655,3,694,347,0,4655,4656,5,99,0,
        0,4656,4657,3,696,348,0,4657,4670,1,0,0,0,4658,4659,5,4,0,0,4659,
        4663,5,341,0,0,4660,4661,5,101,0,0,4661,4663,5,139,0,0,4662,4658,
        1,0,0,0,4662,4660,1,0,0,0,4663,4667,1,0,0,0,4664,4665,5,246,0,0,
        4665,4668,3,692,346,0,4666,4668,5,362,0,0,4667,4664,1,0,0,0,4667,
        4666,1,0,0,0,4668,4670,1,0,0,0,4669,4653,1,0,0,0,4669,4662,1,0,0,
        0,4670,4729,1,0,0,0,4671,4672,5,101,0,0,4672,4673,5,348,0,0,4673,
        4674,3,648,324,0,4674,4675,5,395,0,0,4675,4676,3,648,324,0,4676,
        4729,1,0,0,0,4677,4678,5,58,0,0,4678,4679,5,246,0,0,4679,4680,3,
        648,324,0,4680,4681,5,395,0,0,4681,4682,3,692,346,0,4682,4683,5,
        387,0,0,4683,4684,3,700,350,0,4684,4729,1,0,0,0,4685,4686,5,9,0,
        0,4686,4687,5,246,0,0,4687,4688,3,648,324,0,4688,4689,5,395,0,0,
        4689,4697,3,692,346,0,4690,4691,5,304,0,0,4691,4698,3,700,350,0,
        4692,4693,5,363,0,0,4693,4698,5,294,0,0,4694,4695,7,48,0,0,4695,
        4696,5,348,0,0,4696,4698,3,648,324,0,4697,4690,1,0,0,0,4697,4692,
        1,0,0,0,4697,4694,1,0,0,0,4698,4729,1,0,0,0,4699,4700,5,101,0,0,
        4700,4701,5,246,0,0,4701,4702,3,648,324,0,4702,4703,5,395,0,0,4703,
        4704,3,692,346,0,4704,4729,1,0,0,0,4705,4706,7,49,0,0,4706,4707,
        3,662,331,0,4707,4708,5,200,0,0,4708,4709,5,426,0,0,4709,4710,5,
        154,0,0,4710,4714,3,648,324,0,4711,4712,5,341,0,0,4712,4715,3,692,
        346,0,4713,4715,5,362,0,0,4714,4711,1,0,0,0,4714,4713,1,0,0,0,4715,
        4719,1,0,0,0,4716,4717,5,387,0,0,4717,4718,5,229,0,0,4718,4720,5,
        431,0,0,4719,4716,1,0,0,0,4719,4720,1,0,0,0,4720,4729,1,0,0,0,4721,
        4722,5,101,0,0,4722,4723,3,662,331,0,4723,4724,5,200,0,0,4724,4725,
        5,426,0,0,4725,4726,5,154,0,0,4726,4727,3,648,324,0,4727,4729,1,
        0,0,0,4728,4563,1,0,0,0,4728,4580,1,0,0,0,4728,4610,1,0,0,0,4728,
        4619,1,0,0,0,4728,4624,1,0,0,0,4728,4638,1,0,0,0,4728,4648,1,0,0,
        0,4728,4671,1,0,0,0,4728,4677,1,0,0,0,4728,4685,1,0,0,0,4728,4699,
        1,0,0,0,4728,4705,1,0,0,0,4728,4721,1,0,0,0,4729,661,1,0,0,0,4730,
        4731,7,50,0,0,4731,663,1,0,0,0,4732,4733,5,259,0,0,4733,4734,5,405,
        0,0,4734,4740,5,431,0,0,4735,4736,5,83,0,0,4736,4737,5,246,0,0,4737,
        4738,5,405,0,0,4738,4740,3,692,346,0,4739,4732,1,0,0,0,4739,4735,
        1,0,0,0,4740,665,1,0,0,0,4741,4746,3,664,332,0,4742,4743,5,397,0,
        0,4743,4745,3,664,332,0,4744,4742,1,0,0,0,4745,4748,1,0,0,0,4746,
        4744,1,0,0,0,4746,4747,1,0,0,0,4747,667,1,0,0,0,4748,4746,1,0,0,
        0,4749,4753,5,259,0,0,4750,4751,5,83,0,0,4751,4753,5,246,0,0,4752,
        4749,1,0,0,0,4752,4750,1,0,0,0,4753,669,1,0,0,0,4754,4757,5,2,0,
        0,4755,4756,5,387,0,0,4756,4758,5,278,0,0,4757,4755,1,0,0,0,4757,
        4758,1,0,0,0,4758,671,1,0,0,0,4759,4760,7,51,0,0,4760,673,1,0,0,
        0,4761,4762,7,52,0,0,4762,675,1,0,0,0,4763,4764,7,53,0,0,4764,677,
        1,0,0,0,4765,4766,7,54,0,0,4766,679,1,0,0,0,4767,4768,7,55,0,0,4768,
        681,1,0,0,0,4769,4770,7,56,0,0,4770,683,1,0,0,0,4771,4772,7,57,0,
        0,4772,685,1,0,0,0,4773,4774,7,58,0,0,4774,687,1,0,0,0,4775,4776,
        7,59,0,0,4776,689,1,0,0,0,4777,4778,7,60,0,0,4778,691,1,0,0,0,4779,
        4784,3,648,324,0,4780,4781,5,395,0,0,4781,4783,3,648,324,0,4782,
        4780,1,0,0,0,4783,4786,1,0,0,0,4784,4782,1,0,0,0,4784,4785,1,0,0,
        0,4785,693,1,0,0,0,4786,4784,1,0,0,0,4787,4788,3,648,324,0,4788,
        4789,5,411,0,0,4789,4790,7,27,0,0,4790,695,1,0,0,0,4791,4796,5,176,
        0,0,4792,4793,5,211,0,0,4793,4794,5,341,0,0,4794,4796,3,692,346,
        0,4795,4791,1,0,0,0,4795,4792,1,0,0,0,4796,697,1,0,0,0,4797,4798,
        5,8,0,0,4798,4799,5,405,0,0,4799,4810,5,431,0,0,4800,4801,5,259,
        0,0,4801,4802,5,405,0,0,4802,4810,5,431,0,0,4803,4804,5,294,0,0,
        4804,4805,5,405,0,0,4805,4810,5,426,0,0,4806,4807,5,240,0,0,4807,
        4808,5,405,0,0,4808,4810,3,692,346,0,4809,4797,1,0,0,0,4809,4800,
        1,0,0,0,4809,4803,1,0,0,0,4809,4806,1,0,0,0,4810,699,1,0,0,0,4811,
        4816,3,698,349,0,4812,4813,5,397,0,0,4813,4815,3,698,349,0,4814,
        4812,1,0,0,0,4815,4818,1,0,0,0,4816,4814,1,0,0,0,4816,4817,1,0,0,
        0,4817,701,1,0,0,0,4818,4816,1,0,0,0,621,705,712,715,721,727,734,
        744,747,751,766,773,779,784,789,792,816,823,826,831,836,842,846,
        859,863,867,872,879,883,888,895,899,904,952,959,964,987,991,995,
        998,1002,1007,1013,1017,1023,1025,1036,1040,1047,1055,1058,1063,
        1067,1070,1080,1088,1092,1095,1099,1103,1106,1111,1117,1122,1127,
        1131,1142,1144,1148,1158,1162,1168,1171,1178,1183,1191,1196,1200,
        1208,1213,1219,1225,1228,1231,1234,1243,1251,1256,1264,1271,1274,
        1277,1279,1290,1292,1295,1298,1301,1304,1307,1309,1321,1327,1335,
        1337,1347,1380,1385,1389,1393,1400,1407,1413,1417,1420,1427,1450,
        1455,1459,1467,1476,1483,1489,1496,1499,1505,1512,1520,1529,1538,
        1545,1565,1572,1574,1581,1591,1599,1603,1607,1620,1629,1645,1649,
        1654,1659,1662,1665,1668,1671,1674,1679,1688,1692,1699,1702,1705,
        1708,1720,1726,1752,1760,1764,1767,1770,1773,1776,1779,1782,1785,
        1794,1804,1807,1827,1833,1839,1842,1844,1851,1858,1871,1876,1885,
        1893,1901,1914,1927,1943,1947,1962,1968,1971,1974,1977,1980,1984,
        1999,2002,2013,2027,2061,2069,2074,2082,2087,2092,2099,2107,2115,
        2123,2128,2138,2142,2150,2159,2162,2166,2173,2179,2183,2189,2193,
        2205,2214,2225,2229,2236,2248,2258,2261,2268,2274,2278,2281,2284,
        2290,2294,2298,2303,2307,2311,2315,2323,2327,2331,2335,2339,2347,
        2351,2355,2363,2368,2373,2377,2381,2388,2397,2405,2417,2435,2438,
        2444,2470,2473,2479,2487,2495,2508,2515,2518,2521,2524,2527,2530,
        2533,2536,2539,2542,2545,2550,2553,2556,2559,2562,2565,2568,2571,
        2574,2577,2580,2582,2588,2592,2595,2598,2601,2604,2607,2614,2618,
        2621,2624,2627,2630,2633,2640,2643,2651,2655,2662,2664,2667,2672,
        2675,2679,2684,2690,2698,2706,2716,2719,2723,2727,2732,2739,2743,
        2745,2749,2756,2761,2774,2782,2801,2811,2824,2834,2838,2842,2848,
        2855,2862,2871,2878,2898,2901,2915,2930,2934,2954,2966,2972,2975,
        2978,2984,2990,2997,3005,3011,3015,3020,3023,3027,3034,3039,3044,
        3047,3049,3057,3065,3069,3073,3077,3094,3111,3118,3127,3132,3135,
        3138,3142,3157,3171,3174,3185,3189,3192,3195,3199,3204,3207,3210,
        3213,3216,3219,3225,3228,3231,3234,3237,3240,3243,3246,3249,3252,
        3256,3258,3264,3269,3272,3275,3278,3281,3287,3290,3293,3296,3299,
        3302,3305,3308,3311,3314,3318,3320,3322,3327,3332,3336,3340,3345,
        3350,3359,3369,3377,3389,3392,3398,3405,3412,3419,3426,3435,3439,
        3446,3451,3455,3459,3462,3465,3476,3480,3482,3485,3498,3501,3504,
        3516,3519,3526,3535,3540,3542,3544,3561,3564,3572,3575,3579,3582,
        3585,3588,3591,3603,3611,3618,3621,3628,3631,3636,3643,3651,3659,
        3664,3668,3673,3677,3684,3698,3701,3714,3724,3727,3736,3745,3748,
        3754,3757,3762,3765,3778,3784,3786,3796,3802,3805,3815,3820,3822,
        3838,3844,3846,3853,3860,3874,3880,3883,3886,3889,3898,3905,3911,
        3920,3924,3932,3942,3952,3957,3961,3967,3972,3982,3986,3989,3994,
        3997,4001,4006,4017,4019,4028,4047,4057,4060,4067,4070,4080,4087,
        4090,4092,4103,4113,4115,4124,4129,4138,4151,4155,4167,4171,4180,
        4199,4217,4229,4244,4248,4264,4271,4285,4290,4300,4302,4310,4318,
        4326,4334,4342,4350,4361,4365,4373,4389,4393,4398,4411,4420,4422,
        4431,4436,4442,4449,4454,4463,4471,4479,4487,4497,4502,4561,4567,
        4576,4578,4594,4602,4606,4608,4614,4619,4636,4662,4667,4669,4697,
        4714,4719,4728,4739,4746,4752,4757,4784,4795,4809,4816
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!HiveSqlParser.__ATN) {
            HiveSqlParser.__ATN = new antlr.ATNDeserializer().deserialize(HiveSqlParser._serializedATN);
        }

        return HiveSqlParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(HiveSqlParser.literalNames, HiveSqlParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return HiveSqlParser.vocabulary;
    }

    private static readonly decisionsToDFA = HiveSqlParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ProgramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.EOF, 0)!;
    }
    public statement(): StatementContext[];
    public statement(i: number): StatementContext | null;
    public statement(i?: number): StatementContext[] | StatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }

        return this.getRuleContext(i, StatementContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_program;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterProgram) {
             listener.enterProgram(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitProgram) {
             listener.exitProgram(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProgram) {
            return visitor.visitProgram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explainStatement(): ExplainStatementContext | null {
        return this.getRuleContext(0, ExplainStatementContext);
    }
    public execStatement(): ExecStatementContext | null {
        return this.getRuleContext(0, ExecStatementContext);
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.SEMICOLON, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_statement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterStatement) {
             listener.enterStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitStatement) {
             listener.exitStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXPLAIN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXPLAIN, 0)!;
    }
    public execStatement(): ExecStatementContext | null {
        return this.getRuleContext(0, ExecStatementContext);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REWRITE, 0);
    }
    public queryStatementExpression(): QueryStatementExpressionContext | null {
        return this.getRuleContext(0, QueryStatementExpressionContext);
    }
    public explainOption(): ExplainOptionContext[];
    public explainOption(i: number): ExplainOptionContext | null;
    public explainOption(i?: number): ExplainOptionContext[] | ExplainOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExplainOptionContext);
        }

        return this.getRuleContext(i, ExplainOptionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_explainStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExplainStatement) {
             listener.enterExplainStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExplainStatement) {
             listener.exitExplainStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainStatement) {
            return visitor.visitExplainStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXTENDED, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORMATTED, 0);
    }
    public KW_DEPENDENCY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEPENDENCY, 0);
    }
    public KW_CBO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CBO, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COST, 0);
    }
    public KW_JOINCOST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_JOINCOST, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOGICAL, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ANALYZE, 0);
    }
    public KW_REOPTIMIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REOPTIMIZATION, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCKS, 0);
    }
    public KW_AST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AST, 0);
    }
    public KW_VECTORIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VECTORIZATION, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ONLY, 0);
    }
    public vectorizatonDetail(): VectorizatonDetailContext | null {
        return this.getRuleContext(0, VectorizatonDetailContext);
    }
    public KW_DEBUG(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEBUG, 0);
    }
    public KW_DDL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DDL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_explainOption;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExplainOption) {
             listener.enterExplainOption(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExplainOption) {
             listener.exitExplainOption(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainOption) {
            return visitor.visitExplainOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VectorizatonDetailContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SUMMARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SUMMARY, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OPERATOR, 0);
    }
    public KW_EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXPRESSION, 0);
    }
    public KW_DETAIL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DETAIL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_vectorizatonDetail;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterVectorizatonDetail) {
             listener.enterVectorizatonDetail(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitVectorizatonDetail) {
             listener.exitVectorizatonDetail(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVectorizatonDetail) {
            return visitor.visitVectorizatonDetail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecStatementContext extends antlr.ParserRuleContext {
    public _dbName?: DbSchemaNameContext;
    public _replConf?: KeyValuePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryStatementExpression(): QueryStatementExpressionContext | null {
        return this.getRuleContext(0, QueryStatementExpressionContext);
    }
    public loadStatement(): LoadStatementContext | null {
        return this.getRuleContext(0, LoadStatementContext);
    }
    public exportStatement(): ExportStatementContext | null {
        return this.getRuleContext(0, ExportStatementContext);
    }
    public importStatement(): ImportStatementContext | null {
        return this.getRuleContext(0, ImportStatementContext);
    }
    public replDumpStatement(): ReplDumpStatementContext | null {
        return this.getRuleContext(0, ReplDumpStatementContext);
    }
    public replLoadStatement(): ReplLoadStatementContext | null {
        return this.getRuleContext(0, ReplLoadStatementContext);
    }
    public KW_REPL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPL, 0);
    }
    public KW_STATUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STATUS, 0);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public ddlStatement(): DdlStatementContext | null {
        return this.getRuleContext(0, DdlStatementContext);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DELETE, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FROM, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UPDATE, 0);
    }
    public setColumnsClause(): SetColumnsClauseContext | null {
        return this.getRuleContext(0, SetColumnsClauseContext);
    }
    public sqlTransactionStatement(): SqlTransactionStatementContext | null {
        return this.getRuleContext(0, SqlTransactionStatementContext);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MERGE, 0);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTO, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USING, 0);
    }
    public joinSourcePart(): JoinSourcePartContext | null {
        return this.getRuleContext(0, JoinSourcePartContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ON, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public whenClauses(): WhenClausesContext | null {
        return this.getRuleContext(0, WhenClausesContext);
    }
    public QUERY_HINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.QUERY_HINT, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public KW_PREPARE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PREPARE, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXECUTE, 0);
    }
    public constantList(): ConstantListContext | null {
        return this.getRuleContext(0, ConstantListContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public configPropertiesItem(): ConfigPropertiesItemContext[];
    public configPropertiesItem(i: number): ConfigPropertiesItemContext | null;
    public configPropertiesItem(i?: number): ConfigPropertiesItemContext[] | ConfigPropertiesItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConfigPropertiesItemContext);
        }

        return this.getRuleContext(i, ConfigPropertiesItemContext);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public COLON(): antlr.TerminalNode[];
    public COLON(i: number): antlr.TerminalNode | null;
    public COLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COLON);
    	} else {
    		return this.getToken(HiveSqlParser.COLON, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_execStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExecStatement) {
             listener.enterExecStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExecStatement) {
             listener.exitExecStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExecStatement) {
            return visitor.visitExecStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LOAD, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DATA, 0)!;
    }
    public KW_INPATH(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INPATH, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INTO, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCAL, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OVERWRITE, 0);
    }
    public inputFileFormat(): InputFileFormatContext | null {
        return this.getRuleContext(0, InputFileFormatContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_loadStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLoadStatement) {
             listener.enterLoadStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLoadStatement) {
             listener.exitLoadStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoadStatement) {
            return visitor.visitLoadStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicationClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FOR, 0)!;
    }
    public KW_REPLICATION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REPLICATION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public KW_METADATA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_METADATA, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_replicationClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterReplicationClause) {
             listener.enterReplicationClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitReplicationClause) {
             listener.exitReplicationClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplicationClause) {
            return visitor.visitReplicationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExportStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXPORT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXPORT, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TO, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public replicationClause(): ReplicationClauseContext | null {
        return this.getRuleContext(0, ReplicationClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_exportStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExportStatement) {
             listener.enterExportStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExportStatement) {
             listener.exitExportStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExportStatement) {
            return visitor.visitExportStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportStatementContext extends antlr.ParserRuleContext {
    public _path?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IMPORT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_IMPORT, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FROM, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public locationPath(): LocationPathContext | null {
        return this.getRuleContext(0, LocationPathContext);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXTERNAL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_importStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterImportStatement) {
             listener.enterImportStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitImportStatement) {
             listener.exitImportStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitImportStatement) {
            return visitor.visitImportStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplDumpStatementContext extends antlr.ParserRuleContext {
    public _dbPolicy?: ReplDbPolicyContext;
    public _oldDbPolicy?: ReplDbPolicyContext;
    public _replConf?: KeyValuePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REPL, 0)!;
    }
    public KW_DUMP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DUMP, 0)!;
    }
    public replDbPolicy(): ReplDbPolicyContext[];
    public replDbPolicy(i: number): ReplDbPolicyContext | null;
    public replDbPolicy(i?: number): ReplDbPolicyContext[] | ReplDbPolicyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ReplDbPolicyContext);
        }

        return this.getRuleContext(i, ReplDbPolicyContext);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLACE, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_replDumpStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterReplDumpStatement) {
             listener.enterReplDumpStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitReplDumpStatement) {
             listener.exitReplDumpStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplDumpStatement) {
            return visitor.visitReplDumpStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplDbPolicyContext extends antlr.ParserRuleContext {
    public _dbName?: DbSchemaNameContext;
    public _tablePolicy?: ReplTableLevelPolicyContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DOT, 0);
    }
    public replTableLevelPolicy(): ReplTableLevelPolicyContext | null {
        return this.getRuleContext(0, ReplTableLevelPolicyContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_replDbPolicy;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterReplDbPolicy) {
             listener.enterReplDbPolicy(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitReplDbPolicy) {
             listener.exitReplDbPolicy(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplDbPolicy) {
            return visitor.visitReplDbPolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplLoadStatementContext extends antlr.ParserRuleContext {
    public _sourceDbPolicy?: ReplDbPolicyContext;
    public _dbName?: DbSchemaNameContext;
    public _replConf?: KeyValuePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REPL, 0)!;
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LOAD, 0)!;
    }
    public replDbPolicy(): ReplDbPolicyContext {
        return this.getRuleContext(0, ReplDbPolicyContext)!;
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTO, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_replLoadStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterReplLoadStatement) {
             listener.enterReplLoadStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitReplLoadStatement) {
             listener.exitReplLoadStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplLoadStatement) {
            return visitor.visitReplLoadStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplTableLevelPolicyContext extends antlr.ParserRuleContext {
    public _replTablesIncludeList?: Token | null;
    public _replTablesExcludeList?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_replTableLevelPolicy;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterReplTableLevelPolicy) {
             listener.enterReplTableLevelPolicy(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitReplTableLevelPolicy) {
             listener.exitReplTableLevelPolicy(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplTableLevelPolicy) {
            return visitor.visitReplTableLevelPolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DdlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext | null {
        return this.getRuleContext(0, CreateDatabaseStatementContext);
    }
    public switchDatabaseStatement(): SwitchDatabaseStatementContext | null {
        return this.getRuleContext(0, SwitchDatabaseStatementContext);
    }
    public dropDatabaseStatement(): DropDatabaseStatementContext | null {
        return this.getRuleContext(0, DropDatabaseStatementContext);
    }
    public createTableStatement(): CreateTableStatementContext | null {
        return this.getRuleContext(0, CreateTableStatementContext);
    }
    public dropTableStatement(): DropTableStatementContext | null {
        return this.getRuleContext(0, DropTableStatementContext);
    }
    public truncateTableStatement(): TruncateTableStatementContext | null {
        return this.getRuleContext(0, TruncateTableStatementContext);
    }
    public alterStatement(): AlterStatementContext | null {
        return this.getRuleContext(0, AlterStatementContext);
    }
    public descStatement(): DescStatementContext | null {
        return this.getRuleContext(0, DescStatementContext);
    }
    public showStatement(): ShowStatementContext | null {
        return this.getRuleContext(0, ShowStatementContext);
    }
    public metastoreCheck(): MetastoreCheckContext | null {
        return this.getRuleContext(0, MetastoreCheckContext);
    }
    public createViewStatement(): CreateViewStatementContext | null {
        return this.getRuleContext(0, CreateViewStatementContext);
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext | null {
        return this.getRuleContext(0, CreateMaterializedViewStatementContext);
    }
    public createScheduledQueryStatement(): CreateScheduledQueryStatementContext | null {
        return this.getRuleContext(0, CreateScheduledQueryStatementContext);
    }
    public alterScheduledQueryStatement(): AlterScheduledQueryStatementContext | null {
        return this.getRuleContext(0, AlterScheduledQueryStatementContext);
    }
    public dropScheduledQueryStatement(): DropScheduledQueryStatementContext | null {
        return this.getRuleContext(0, DropScheduledQueryStatementContext);
    }
    public dropViewStatement(): DropViewStatementContext | null {
        return this.getRuleContext(0, DropViewStatementContext);
    }
    public dropMaterializedViewStatement(): DropMaterializedViewStatementContext | null {
        return this.getRuleContext(0, DropMaterializedViewStatementContext);
    }
    public createFunctionStatement(): CreateFunctionStatementContext | null {
        return this.getRuleContext(0, CreateFunctionStatementContext);
    }
    public createMacroStatement(): CreateMacroStatementContext | null {
        return this.getRuleContext(0, CreateMacroStatementContext);
    }
    public dropFunctionStatement(): DropFunctionStatementContext | null {
        return this.getRuleContext(0, DropFunctionStatementContext);
    }
    public reloadFunctionsStatement(): ReloadFunctionsStatementContext | null {
        return this.getRuleContext(0, ReloadFunctionsStatementContext);
    }
    public dropMacroStatement(): DropMacroStatementContext | null {
        return this.getRuleContext(0, DropMacroStatementContext);
    }
    public createIndexStatement(): CreateIndexStatementContext | null {
        return this.getRuleContext(0, CreateIndexStatementContext);
    }
    public dropIndexStatement(): DropIndexStatementContext | null {
        return this.getRuleContext(0, DropIndexStatementContext);
    }
    public analyzeStatement(): AnalyzeStatementContext | null {
        return this.getRuleContext(0, AnalyzeStatementContext);
    }
    public lockStatement(): LockStatementContext | null {
        return this.getRuleContext(0, LockStatementContext);
    }
    public unlockStatement(): UnlockStatementContext | null {
        return this.getRuleContext(0, UnlockStatementContext);
    }
    public lockDatabase(): LockDatabaseContext | null {
        return this.getRuleContext(0, LockDatabaseContext);
    }
    public unlockDatabase(): UnlockDatabaseContext | null {
        return this.getRuleContext(0, UnlockDatabaseContext);
    }
    public createRoleStatement(): CreateRoleStatementContext | null {
        return this.getRuleContext(0, CreateRoleStatementContext);
    }
    public dropRoleStatement(): DropRoleStatementContext | null {
        return this.getRuleContext(0, DropRoleStatementContext);
    }
    public grantPrivileges(): GrantPrivilegesContext | null {
        return this.getRuleContext(0, GrantPrivilegesContext);
    }
    public revokePrivileges(): RevokePrivilegesContext | null {
        return this.getRuleContext(0, RevokePrivilegesContext);
    }
    public showGrants(): ShowGrantsContext | null {
        return this.getRuleContext(0, ShowGrantsContext);
    }
    public showRoleGrants(): ShowRoleGrantsContext | null {
        return this.getRuleContext(0, ShowRoleGrantsContext);
    }
    public showRolePrincipals(): ShowRolePrincipalsContext | null {
        return this.getRuleContext(0, ShowRolePrincipalsContext);
    }
    public showRoles(): ShowRolesContext | null {
        return this.getRuleContext(0, ShowRolesContext);
    }
    public grantRole(): GrantRoleContext | null {
        return this.getRuleContext(0, GrantRoleContext);
    }
    public revokeRole(): RevokeRoleContext | null {
        return this.getRuleContext(0, RevokeRoleContext);
    }
    public setRole(): SetRoleContext | null {
        return this.getRuleContext(0, SetRoleContext);
    }
    public showCurrentRole(): ShowCurrentRoleContext | null {
        return this.getRuleContext(0, ShowCurrentRoleContext);
    }
    public KW_ABORT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ABORT, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPACTIONS, 0);
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.Number);
    	} else {
    		return this.getToken(HiveSqlParser.Number, i);
    	}
    }
    public KW_KILL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KILL, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUERY, 0);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public resourcePlanDdlStatements(): ResourcePlanDdlStatementsContext | null {
        return this.getRuleContext(0, ResourcePlanDdlStatementsContext);
    }
    public createDataConnectorStatement(): CreateDataConnectorStatementContext | null {
        return this.getRuleContext(0, CreateDataConnectorStatementContext);
    }
    public dropDataConnectorStatement(): DropDataConnectorStatementContext | null {
        return this.getRuleContext(0, DropDataConnectorStatementContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_ddlStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDdlStatement) {
             listener.enterDdlStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDdlStatement) {
             listener.exitDdlStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDdlStatement) {
            return visitor.visitDdlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_IF, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_ifExists;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterIfExists) {
             listener.enterIfExists(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitIfExists) {
             listener.exitIfExists(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfNotExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_IF, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_NOT, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_ifNotExists;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterIfNotExists) {
             listener.enterIfNotExists(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitIfNotExists) {
             listener.exitIfNotExists(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RestrictOrCascadeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESTRICT, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_restrictOrCascade;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRestrictOrCascade) {
             listener.enterRestrictOrCascade(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRestrictOrCascade) {
             listener.exitRestrictOrCascade(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRestrictOrCascade) {
            return visitor.visitRestrictOrCascade(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RewriteEnabledContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enable(): EnableContext {
        return this.getRuleContext(0, EnableContext)!;
    }
    public KW_REWRITE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REWRITE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rewriteEnabled;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRewriteEnabled) {
             listener.enterRewriteEnabled(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRewriteEnabled) {
             listener.exitRewriteEnabled(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRewriteEnabled) {
            return visitor.visitRewriteEnabled(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RewriteDisabledContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public disable(): DisableContext {
        return this.getRuleContext(0, DisableContext)!;
    }
    public KW_REWRITE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REWRITE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rewriteDisabled;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRewriteDisabled) {
             listener.enterRewriteDisabled(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRewriteDisabled) {
             listener.exitRewriteDisabled(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRewriteDisabled) {
            return visitor.visitRewriteDisabled(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StoredAsDirsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_STORED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public KW_DIRECTORIES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DIRECTORIES, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_storedAsDirs;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterStoredAsDirs) {
             listener.enterStoredAsDirs(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitStoredAsDirs) {
             listener.exitStoredAsDirs(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStoredAsDirs) {
            return visitor.visitStoredAsDirs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseStatementContext extends antlr.ParserRuleContext {
    public _name?: DbSchemaNameCreateContext;
    public _locn?: Token | null;
    public _dbprops?: KeyValuePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public db_schema(): Db_schemaContext {
        return this.getRuleContext(0, Db_schemaContext)!;
    }
    public dbSchemaNameCreate(): DbSchemaNameCreateContext {
        return this.getRuleContext(0, DbSchemaNameCreateContext)!;
    }
    public KW_REMOTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REMOTE, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public databaseComment(): DatabaseCommentContext | null {
        return this.getRuleContext(0, DatabaseCommentContext);
    }
    public locationPath(): LocationPathContext | null {
        return this.getRuleContext(0, LocationPathContext);
    }
    public KW_MANAGEDLOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGEDLOCATION, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DBPROPERTIES, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public dbConnectorName(): DbConnectorNameContext | null {
        return this.getRuleContext(0, DbConnectorNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createDatabaseStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateDatabaseStatement) {
             listener.enterCreateDatabaseStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateDatabaseStatement) {
             listener.exitCreateDatabaseStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabaseStatement) {
            return visitor.visitCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbConnectorNameContext extends antlr.ParserRuleContext {
    public _dcName?: DbSchemaNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_USING, 0)!;
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dbConnectorName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDbConnectorName) {
             listener.enterDbConnectorName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDbConnectorName) {
             listener.exitDbConnectorName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDbConnectorName) {
            return visitor.visitDbConnectorName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SwitchDatabaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_USE, 0)!;
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_switchDatabaseStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSwitchDatabaseStatement) {
             listener.enterSwitchDatabaseStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSwitchDatabaseStatement) {
             listener.exitSwitchDatabaseStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSwitchDatabaseStatement) {
            return visitor.visitSwitchDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropDatabaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public db_schema(): Db_schemaContext {
        return this.getRuleContext(0, Db_schemaContext)!;
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public restrictOrCascade(): RestrictOrCascadeContext | null {
        return this.getRuleContext(0, RestrictOrCascadeContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropDatabaseStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropDatabaseStatement) {
             listener.enterDropDatabaseStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropDatabaseStatement) {
             listener.exitDropDatabaseStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropDatabaseStatement) {
            return visitor.visitDropDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCommentContext extends antlr.ParserRuleContext {
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_databaseComment;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDatabaseComment) {
             listener.enterDatabaseComment(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDatabaseComment) {
             listener.exitDatabaseComment(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseComment) {
            return visitor.visitDatabaseComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUNCATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TRUNCATE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMNS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public KW_FORCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORCE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_truncateTableStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTruncateTableStatement) {
             listener.enterTruncateTableStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTruncateTableStatement) {
             listener.exitTruncateTableStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateTableStatement) {
            return visitor.visitTruncateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PURGE, 0);
    }
    public replicationClause(): ReplicationClauseContext | null {
        return this.getRuleContext(0, ReplicationClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropTableStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropTableStatement) {
             listener.enterDropTableStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropTableStatement) {
             listener.exitDropTableStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropTableStatement) {
            return visitor.visitDropTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InputFileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: Token | null;
    public _serdeCls?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INPUTFORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SERDE, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_inputFileFormat;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterInputFileFormat) {
             listener.enterInputFileFormat(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitInputFileFormat) {
             listener.exitInputFileFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInputFileFormat) {
            return visitor.visitInputFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TabTypeExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public KW_ELEM_TYPE(): antlr.TerminalNode[];
    public KW_ELEM_TYPE(i: number): antlr.TerminalNode | null;
    public KW_ELEM_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_ELEM_TYPE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_ELEM_TYPE, i);
    	}
    }
    public KW_KEY_TYPE(): antlr.TerminalNode[];
    public KW_KEY_TYPE(i: number): antlr.TerminalNode | null;
    public KW_KEY_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_KEY_TYPE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_KEY_TYPE, i);
    	}
    }
    public KW_VALUE_TYPE(): antlr.TerminalNode[];
    public KW_VALUE_TYPE(i: number): antlr.TerminalNode | null;
    public KW_VALUE_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_VALUE_TYPE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_VALUE_TYPE, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tabTypeExpr;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTabTypeExpr) {
             listener.enterTabTypeExpr(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTabTypeExpr) {
             listener.exitTabTypeExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTabTypeExpr) {
            return visitor.visitTabTypeExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartTypeExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tabTypeExpr(): TabTypeExprContext {
        return this.getRuleContext(0, TabTypeExprContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partTypeExpr;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartTypeExpr) {
             listener.enterPartTypeExpr(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartTypeExpr) {
             listener.exitPartTypeExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartTypeExpr) {
            return visitor.visitPartTypeExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TabPartColTypeExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableOrView(): TableOrViewContext {
        return this.getRuleContext(0, TableOrViewContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public extColumnName(): ExtColumnNameContext | null {
        return this.getRuleContext(0, ExtColumnNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tabPartColTypeExpr;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTabPartColTypeExpr) {
             listener.enterTabPartColTypeExpr(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTabPartColTypeExpr) {
             listener.exitTabPartColTypeExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTabPartColTypeExpr) {
            return visitor.visitTabPartColTypeExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescStatementContext extends antlr.ParserRuleContext {
    public _dbName?: DbSchemaNameContext;
    public _dcName?: DbSchemaNameContext;
    public _name?: FunctionNameForDDLContext;
    public _descOptions?: Token | null;
    public _parttype?: TabPartColTypeExprContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DESCRIBE, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DESC, 0);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public KW_DATACONNECTOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATACONNECTOR, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FUNCTION, 0);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public functionNameForDDL(): FunctionNameForDDLContext | null {
        return this.getRuleContext(0, FunctionNameForDDLContext);
    }
    public tabPartColTypeExpr(): TabPartColTypeExprContext | null {
        return this.getRuleContext(0, TabPartColTypeExprContext);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXTENDED, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORMATTED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_descStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDescStatement) {
             listener.enterDescStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDescStatement) {
             listener.exitDescStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescStatement) {
            return visitor.visitDescStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyzeStatementContext extends antlr.ParserRuleContext {
    public _parttype?: TableOrPartitionContext;
    public _noscan?: Token | null;
    public _statsColumnName?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANALYZE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ANALYZE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPUTE, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STATISTICS, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CACHE, 0);
    }
    public KW_METADATA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_METADATA, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FOR, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMNS, 0);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOSCAN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_analyzeStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAnalyzeStatement) {
             listener.enterAnalyzeStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAnalyzeStatement) {
             listener.exitAnalyzeStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeStatement) {
            return visitor.visitAnalyzeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class From_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_from_in;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFrom_in) {
             listener.enterFrom_in(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFrom_in) {
             listener.exitFrom_in(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrom_in) {
            return visitor.visitFrom_in(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Db_schemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATABASE, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_db_schema;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDb_schema) {
             listener.enterDb_schema(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDb_schema) {
             listener.exitDb_schema(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDb_schema) {
            return visitor.visitDb_schema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStatementContext extends antlr.ParserRuleContext {
    public _isExtended?: Token | null;
    public _db_name?: DbSchemaNameContext;
    public _filter?: ShowTablesFilterExprContext;
    public _tabOrViewName?: TableOrViewContext;
    public _tabName?: TableNameContext;
    public _prptyName?: Token | null;
    public _dbName?: DbSchemaNameContext;
    public _parttype?: PartTypeExprContext;
    public _compactId?: Token | null;
    public _rp_name?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SHOW, 0)!;
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATABASES, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEMAS, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public showStmtIdentifier(): ShowStmtIdentifierContext | null {
        return this.getRuleContext(0, ShowStmtIdentifierContext);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLES, 0);
    }
    public from_in(): From_inContext[];
    public from_in(i: number): From_inContext | null;
    public from_in(i?: number): From_inContext[] | From_inContext | null {
        if (i === undefined) {
            return this.getRuleContexts(From_inContext);
        }

        return this.getRuleContext(i, From_inContext);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXTENDED, 0);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public showTablesFilterExpr(): ShowTablesFilterExprContext | null {
        return this.getRuleContext(0, ShowTablesFilterExprContext);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VIEWS, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMNS, 0);
    }
    public tableOrView(): TableOrViewContext | null {
        return this.getRuleContext(0, TableOrViewContext);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SORTED, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FUNCTIONS, 0);
    }
    public functionNameForDDL(): FunctionNameForDDLContext | null {
        return this.getRuleContext(0, FunctionNameForDDLContext);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITIONS, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CREATE, 0);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TBLPROPERTIES, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCKS, 0);
    }
    public partTypeExpr(): PartTypeExprContext | null {
        return this.getRuleContext(0, PartTypeExprContext);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPACT_ID(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPACT_ID, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public compactionPool(): CompactionPoolContext | null {
        return this.getRuleContext(0, CompactionPoolContext);
    }
    public compactionType(): CompactionTypeContext | null {
        return this.getRuleContext(0, CompactionTypeContext);
    }
    public compactionStatus(): CompactionStatusContext | null {
        return this.getRuleContext(0, CompactionStatusContext);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_CONF(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONF, 0);
    }
    public KW_RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESOURCE, 0);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PLAN, 0);
    }
    public KW_PLANS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PLANS, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_DATACONNECTORS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATACONNECTORS, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ON, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INDEXES, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORMATTED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowStatement) {
             listener.enterShowStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowStatement) {
             listener.exitShowStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowStatement) {
            return visitor.visitShowStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowTablesFilterExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WHERE, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public showStmtIdentifier(): ShowStmtIdentifierContext | null {
        return this.getRuleContext(0, ShowStmtIdentifierContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showTablesFilterExpr;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowTablesFilterExpr) {
             listener.enterShowTablesFilterExpr(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowTablesFilterExpr) {
             listener.exitShowTablesFilterExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowTablesFilterExpr) {
            return visitor.visitShowTablesFilterExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCK(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LOCK, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public lockMode(): LockModeContext {
        return this.getRuleContext(0, LockModeContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_lockStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLockStatement) {
             listener.enterLockStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLockStatement) {
             listener.exitLockStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockStatement) {
            return visitor.visitLockStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockDatabaseContext extends antlr.ParserRuleContext {
    public _dbName?: DbSchemaNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCK(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LOCK, 0)!;
    }
    public db_schema(): Db_schemaContext {
        return this.getRuleContext(0, Db_schemaContext)!;
    }
    public lockMode(): LockModeContext {
        return this.getRuleContext(0, LockModeContext)!;
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_lockDatabase;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLockDatabase) {
             listener.enterLockDatabase(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLockDatabase) {
             listener.exitLockDatabase(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockDatabase) {
            return visitor.visitLockDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHARED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SHARED, 0);
    }
    public KW_EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXCLUSIVE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_lockMode;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLockMode) {
             listener.enterLockMode(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLockMode) {
             listener.exitLockMode(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockMode) {
            return visitor.visitLockMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlockStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNLOCK(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_UNLOCK, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_unlockStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterUnlockStatement) {
             listener.enterUnlockStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitUnlockStatement) {
             listener.exitUnlockStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnlockStatement) {
            return visitor.visitUnlockStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlockDatabaseContext extends antlr.ParserRuleContext {
    public _dbName?: DbSchemaNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNLOCK(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_UNLOCK, 0)!;
    }
    public db_schema(): Db_schemaContext {
        return this.getRuleContext(0, Db_schemaContext)!;
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_unlockDatabase;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterUnlockDatabase) {
             listener.enterUnlockDatabase(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitUnlockDatabase) {
             listener.exitUnlockDatabase(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnlockDatabase) {
            return visitor.visitUnlockDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRoleStatementContext extends antlr.ParserRuleContext {
    public _roleName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROLE, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createRoleStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateRoleStatement) {
             listener.enterCreateRoleStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateRoleStatement) {
             listener.exitCreateRoleStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRoleStatement) {
            return visitor.visitCreateRoleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropRoleStatementContext extends antlr.ParserRuleContext {
    public _roleName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROLE, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropRoleStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropRoleStatement) {
             listener.enterDropRoleStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropRoleStatement) {
             listener.exitDropRoleStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropRoleStatement) {
            return visitor.visitDropRoleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantPrivilegesContext extends antlr.ParserRuleContext {
    public _privList?: PrivilegeListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GRANT, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TO, 0)!;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        return this.getRuleContext(0, PrincipalSpecificationContext)!;
    }
    public privilegeList(): PrivilegeListContext {
        return this.getRuleContext(0, PrivilegeListContext)!;
    }
    public privilegeObject(): PrivilegeObjectContext | null {
        return this.getRuleContext(0, PrivilegeObjectContext);
    }
    public withGrantOption(): WithGrantOptionContext | null {
        return this.getRuleContext(0, WithGrantOptionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_grantPrivileges;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterGrantPrivileges) {
             listener.enterGrantPrivileges(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitGrantPrivileges) {
             listener.exitGrantPrivileges(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantPrivileges) {
            return visitor.visitGrantPrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokePrivilegesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REVOKE, 0)!;
    }
    public privilegeList(): PrivilegeListContext {
        return this.getRuleContext(0, PrivilegeListContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FROM, 0)!;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        return this.getRuleContext(0, PrincipalSpecificationContext)!;
    }
    public grantOptionFor(): GrantOptionForContext | null {
        return this.getRuleContext(0, GrantOptionForContext);
    }
    public privilegeObject(): PrivilegeObjectContext | null {
        return this.getRuleContext(0, PrivilegeObjectContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_revokePrivileges;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRevokePrivileges) {
             listener.enterRevokePrivileges(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRevokePrivileges) {
             listener.exitRevokePrivileges(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRevokePrivileges) {
            return visitor.visitRevokePrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GRANT, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TO, 0)!;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        return this.getRuleContext(0, PrincipalSpecificationContext)!;
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public withAdminOption(): WithAdminOptionContext | null {
        return this.getRuleContext(0, WithAdminOptionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_grantRole;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterGrantRole) {
             listener.enterGrantRole(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitGrantRole) {
             listener.exitGrantRole(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantRole) {
            return visitor.visitGrantRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokeRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REVOKE, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FROM, 0)!;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        return this.getRuleContext(0, PrincipalSpecificationContext)!;
    }
    public adminOptionFor(): AdminOptionForContext | null {
        return this.getRuleContext(0, AdminOptionForContext);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_revokeRole;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRevokeRole) {
             listener.enterRevokeRole(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRevokeRole) {
             listener.exitRevokeRole(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRevokeRole) {
            return visitor.visitRevokeRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRoleGrantsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SHOW, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROLE, 0)!;
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GRANT, 0)!;
    }
    public principalName(): PrincipalNameContext {
        return this.getRuleContext(0, PrincipalNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showRoleGrants;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowRoleGrants) {
             listener.enterShowRoleGrants(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowRoleGrants) {
             listener.exitShowRoleGrants(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowRoleGrants) {
            return visitor.visitShowRoleGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRolesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SHOW, 0)!;
    }
    public KW_ROLES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROLES, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showRoles;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowRoles) {
             listener.enterShowRoles(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowRoles) {
             listener.exitShowRoles(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowRoles) {
            return visitor.visitShowRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCurrentRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SHOW, 0)!;
    }
    public KW_CURRENT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CURRENT, 0)!;
    }
    public KW_ROLES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROLES, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showCurrentRole;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowCurrentRole) {
             listener.enterShowCurrentRole(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowCurrentRole) {
             listener.exitShowCurrentRole(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCurrentRole) {
            return visitor.visitShowCurrentRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetRoleContext extends antlr.ParserRuleContext {
    public _all?: Token | null;
    public _none?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SET, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROLE, 0)!;
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NONE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_setRole;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSetRole) {
             listener.enterSetRole(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSetRole) {
             listener.exitSetRole(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetRole) {
            return visitor.visitSetRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowGrantsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SHOW, 0)!;
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GRANT, 0)!;
    }
    public principalName(): PrincipalNameContext | null {
        return this.getRuleContext(0, PrincipalNameContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ON, 0);
    }
    public privilegeIncludeColObject(): PrivilegeIncludeColObjectContext | null {
        return this.getRuleContext(0, PrivilegeIncludeColObjectContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showGrants;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowGrants) {
             listener.enterShowGrants(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowGrants) {
             listener.exitShowGrants(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowGrants) {
            return visitor.visitShowGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRolePrincipalsContext extends antlr.ParserRuleContext {
    public _roleName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SHOW, 0)!;
    }
    public KW_PRINCIPALS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_PRINCIPALS, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showRolePrincipals;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowRolePrincipals) {
             listener.enterShowRolePrincipals(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowRolePrincipals) {
             listener.exitShowRolePrincipals(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowRolePrincipals) {
            return visitor.visitShowRolePrincipals(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeIncludeColObjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public privObjectCols(): PrivObjectColsContext | null {
        return this.getRuleContext(0, PrivObjectColsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privilegeIncludeColObject;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivilegeIncludeColObject) {
             listener.enterPrivilegeIncludeColObject(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivilegeIncludeColObject) {
             listener.exitPrivilegeIncludeColObject(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeIncludeColObject) {
            return visitor.visitPrivilegeIncludeColObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeObjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public privObject(): PrivObjectContext {
        return this.getRuleContext(0, PrivObjectContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privilegeObject;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivilegeObject) {
             listener.enterPrivilegeObject(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivilegeObject) {
             listener.exitPrivilegeObject(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeObject) {
            return visitor.visitPrivilegeObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivObjectContext extends antlr.ParserRuleContext {
    public _path?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public KW_URI(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_URI, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERVER, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privObject;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivObject) {
             listener.enterPrivObject(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivObject) {
             listener.exitPrivObject(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivObject) {
            return visitor.visitPrivObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivObjectColsContext extends antlr.ParserRuleContext {
    public _cols?: ColumnNameListContext;
    public _path?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public KW_URI(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_URI, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERVER, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privObjectCols;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivObjectCols) {
             listener.enterPrivObjectCols(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivObjectCols) {
             listener.exitPrivObjectCols(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivObjectCols) {
            return visitor.visitPrivObjectCols(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privlegeDef(): PrivlegeDefContext[];
    public privlegeDef(i: number): PrivlegeDefContext | null;
    public privlegeDef(i?: number): PrivlegeDefContext[] | PrivlegeDefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivlegeDefContext);
        }

        return this.getRuleContext(i, PrivlegeDefContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privilegeList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivilegeList) {
             listener.enterPrivilegeList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivilegeList) {
             listener.exitPrivilegeList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeList) {
            return visitor.visitPrivilegeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivlegeDefContext extends antlr.ParserRuleContext {
    public _cols?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilegeType(): PrivilegeTypeContext {
        return this.getRuleContext(0, PrivilegeTypeContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privlegeDef;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivlegeDef) {
             listener.enterPrivlegeDef(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivlegeDef) {
             listener.exitPrivlegeDef(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivlegeDef) {
            return visitor.visitPrivlegeDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALTER, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UPDATE, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CREATE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DROP, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INDEX, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCK, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SELECT, 0);
    }
    public KW_SHOW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SHOW_DATABASE, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INSERT, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DELETE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privilegeType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivilegeType) {
             listener.enterPrivilegeType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivilegeType) {
             listener.exitPrivilegeType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeType) {
            return visitor.visitPrivilegeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public principalName(): PrincipalNameContext[];
    public principalName(i: number): PrincipalNameContext | null;
    public principalName(i?: number): PrincipalNameContext[] | PrincipalNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalNameContext);
        }

        return this.getRuleContext(i, PrincipalNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_principalSpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrincipalSpecification) {
             listener.enterPrincipalSpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrincipalSpecification) {
             listener.exitPrincipalSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrincipalSpecification) {
            return visitor.visitPrincipalSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USER, 0);
    }
    public principalIdentifier(): PrincipalIdentifierContext | null {
        return this.getRuleContext(0, PrincipalIdentifierContext);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUP, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLE, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_principalName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrincipalName) {
             listener.enterPrincipalName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrincipalName) {
             listener.exitPrincipalName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrincipalName) {
            return visitor.visitPrincipalName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalAlterNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USER, 0);
    }
    public principalIdentifier(): PrincipalIdentifierContext | null {
        return this.getRuleContext(0, PrincipalIdentifierContext);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLE, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_principalAlterName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrincipalAlterName) {
             listener.enterPrincipalAlterName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrincipalAlterName) {
             listener.exitPrincipalAlterName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrincipalAlterName) {
            return visitor.visitPrincipalAlterName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithGrantOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WITH, 0)!;
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GRANT, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_OPTION, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_withGrantOption;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWithGrantOption) {
             listener.enterWithGrantOption(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWithGrantOption) {
             listener.exitWithGrantOption(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWithGrantOption) {
            return visitor.visitWithGrantOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantOptionForContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GRANT, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_OPTION, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FOR, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_grantOptionFor;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterGrantOptionFor) {
             listener.enterGrantOptionFor(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitGrantOptionFor) {
             listener.exitGrantOptionFor(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantOptionFor) {
            return visitor.visitGrantOptionFor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AdminOptionForContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADMIN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ADMIN, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_OPTION, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FOR, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_adminOptionFor;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAdminOptionFor) {
             listener.enterAdminOptionFor(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAdminOptionFor) {
             listener.exitAdminOptionFor(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAdminOptionFor) {
            return visitor.visitAdminOptionFor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithAdminOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WITH, 0)!;
    }
    public KW_ADMIN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ADMIN, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_OPTION, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_withAdminOption;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWithAdminOption) {
             listener.enterWithAdminOption(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWithAdminOption) {
             listener.exitWithAdminOption(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWithAdminOption) {
            return visitor.visitWithAdminOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MetastoreCheckContext extends antlr.ParserRuleContext {
    public _repair?: Token | null;
    public _opt?: Token | null;
    public _parts?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MSCK(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MSCK, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPAIR, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITIONS, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DROP, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SYNC, 0);
    }
    public partitionSelectorSpec(): PartitionSelectorSpecContext | null {
        return this.getRuleContext(0, PartitionSelectorSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_metastoreCheck;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterMetastoreCheck) {
             listener.enterMetastoreCheck(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitMetastoreCheck) {
             listener.exitMetastoreCheck(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMetastoreCheck) {
            return visitor.visitMetastoreCheck(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public resource(): ResourceContext[];
    public resource(i: number): ResourceContext | null;
    public resource(i?: number): ResourceContext[] | ResourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }

        return this.getRuleContext(i, ResourceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_resourceList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterResourceList) {
             listener.enterResourceList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitResourceList) {
             listener.exitResourceList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResourceList) {
            return visitor.visitResourceList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceContext extends antlr.ParserRuleContext {
    public _resType?: ResourceTypeContext;
    public _resPath?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public resourceType(): ResourceTypeContext {
        return this.getRuleContext(0, ResourceTypeContext)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_resource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterResource) {
             listener.enterResource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitResource) {
             listener.exitResource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResource) {
            return visitor.visitResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_JAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_JAR, 0);
    }
    public KW_FILE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FILE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ARCHIVE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_resourceType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterResourceType) {
             listener.enterResourceType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitResourceType) {
             listener.exitResourceType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResourceType) {
            return visitor.visitResourceType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFunctionStatementContext extends antlr.ParserRuleContext {
    public _temp?: Token | null;
    public _rList?: ResourceListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FUNCTION, 0)!;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        return this.getRuleContext(0, FunctionNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USING, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TEMPORARY, 0);
    }
    public resourceList(): ResourceListContext | null {
        return this.getRuleContext(0, ResourceListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createFunctionStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateFunctionStatement) {
             listener.enterCreateFunctionStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateFunctionStatement) {
             listener.exitCreateFunctionStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFunctionStatement) {
            return visitor.visitCreateFunctionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropFunctionStatementContext extends antlr.ParserRuleContext {
    public _temp?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FUNCTION, 0)!;
    }
    public functionNameForDDL(): FunctionNameForDDLContext {
        return this.getRuleContext(0, FunctionNameForDDLContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TEMPORARY, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropFunctionStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropFunctionStatement) {
             listener.enterDropFunctionStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropFunctionStatement) {
             listener.exitDropFunctionStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropFunctionStatement) {
            return visitor.visitDropFunctionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReloadFunctionsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RELOAD(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_RELOAD, 0)!;
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FUNCTION, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_reloadFunctionsStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterReloadFunctionsStatement) {
             listener.enterReloadFunctionsStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitReloadFunctionsStatement) {
             listener.exitReloadFunctionsStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReloadFunctionsStatement) {
            return visitor.visitReloadFunctionsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMacroStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TEMPORARY, 0)!;
    }
    public KW_MACRO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MACRO, 0)!;
    }
    public Identifier(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.Identifier, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public columnNameTypeList(): ColumnNameTypeListContext | null {
        return this.getRuleContext(0, ColumnNameTypeListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createMacroStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateMacroStatement) {
             listener.enterCreateMacroStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateMacroStatement) {
             listener.exitCreateMacroStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMacroStatement) {
            return visitor.visitCreateMacroStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropMacroStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TEMPORARY, 0)!;
    }
    public KW_MACRO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MACRO, 0)!;
    }
    public Identifier(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.Identifier, 0)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropMacroStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropMacroStatement) {
             listener.enterDropMacroStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropMacroStatement) {
             listener.exitDropMacroStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropMacroStatement) {
            return visitor.visitDropMacroStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexStatementContext extends antlr.ParserRuleContext {
    public _indextype?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INDEX, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode[];
    public KW_TABLE(i: number): antlr.TerminalNode | null;
    public KW_TABLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_TABLE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_TABLE, i);
    	}
    }
    public tableName(): TableNameContext[];
    public tableName(i: number): TableNameContext | null;
    public tableName(i?: number): TableNameContext[] | TableNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableNameContext);
        }

        return this.getRuleContext(i, TableNameContext);
    }
    public columnParenthesesList(): ColumnParenthesesListContext[];
    public columnParenthesesList(i: number): ColumnParenthesesListContext | null;
    public columnParenthesesList(i?: number): ColumnParenthesesListContext[] | ColumnParenthesesListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnParenthesesListContext);
        }

        return this.getRuleContext(i, ColumnParenthesesListContext);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFERRED, 0);
    }
    public KW_REBUILD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REBUILD, 0);
    }
    public KW_IDXPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IDXPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IN, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITIONED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BY, 0);
    }
    public tableFileFormat(): TableFileFormatContext | null {
        return this.getRuleContext(0, TableFileFormatContext);
    }
    public locationPath(): LocationPathContext | null {
        return this.getRuleContext(0, LocationPathContext);
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | null {
        return this.getRuleContext(0, TablePropertiesPrefixedContext);
    }
    public tableComment(): TableCommentContext | null {
        return this.getRuleContext(0, TableCommentContext);
    }
    public tableRowFormat(): TableRowFormatContext | null {
        return this.getRuleContext(0, TableRowFormatContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createIndexStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateIndexStatement) {
             listener.enterCreateIndexStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateIndexStatement) {
             listener.exitCreateIndexStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndexStatement) {
            return visitor.visitCreateIndexStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropIndexStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INDEX, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropIndexStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropIndexStatement) {
             listener.enterDropIndexStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropIndexStatement) {
             listener.exitDropIndexStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndexStatement) {
            return visitor.visitDropIndexStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateViewStatementContext extends antlr.ParserRuleContext {
    public _name?: ViewNameCreateContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_VIEW, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext {
        return this.getRuleContext(0, SelectStatementWithCTEContext)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLACE, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public columnNameCommentList(): ColumnNameCommentListContext | null {
        return this.getRuleContext(0, ColumnNameCommentListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public tableComment(): TableCommentContext | null {
        return this.getRuleContext(0, TableCommentContext);
    }
    public viewPartition(): ViewPartitionContext | null {
        return this.getRuleContext(0, ViewPartitionContext);
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | null {
        return this.getRuleContext(0, TablePropertiesPrefixedContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createViewStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateViewStatement) {
             listener.enterCreateViewStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateViewStatement) {
             listener.exitCreateViewStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateViewStatement) {
            return visitor.visitCreateViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewPartitionContext extends antlr.ParserRuleContext {
    public _spec?: PartitionTransformSpecContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITIONED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_PARTITIONED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public KW_SPEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SPEC, 0);
    }
    public partitionTransformSpec(): PartitionTransformSpecContext | null {
        return this.getRuleContext(0, PartitionTransformSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewPartition;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewPartition) {
             listener.enterViewPartition(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewPartition) {
             listener.exitViewPartition(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewPartition) {
            return visitor.visitViewPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewOrganizationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewClusterSpec(): ViewClusterSpecContext | null {
        return this.getRuleContext(0, ViewClusterSpecContext);
    }
    public viewComplexSpec(): ViewComplexSpecContext | null {
        return this.getRuleContext(0, ViewComplexSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewOrganization;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewOrganization) {
             listener.enterViewOrganization(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewOrganization) {
             listener.exitViewOrganization(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewOrganization) {
            return visitor.visitViewOrganization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewClusterSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTERED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CLUSTERED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewClusterSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewClusterSpec) {
             listener.enterViewClusterSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewClusterSpec) {
             listener.exitViewClusterSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewClusterSpec) {
            return visitor.visitViewClusterSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewComplexSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewDistSpec(): ViewDistSpecContext {
        return this.getRuleContext(0, ViewDistSpecContext)!;
    }
    public viewSortSpec(): ViewSortSpecContext {
        return this.getRuleContext(0, ViewSortSpecContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewComplexSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewComplexSpec) {
             listener.enterViewComplexSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewComplexSpec) {
             listener.exitViewComplexSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewComplexSpec) {
            return visitor.visitViewComplexSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewDistSpecContext extends antlr.ParserRuleContext {
    public _colList?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTRIBUTED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DISTRIBUTED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewDistSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewDistSpec) {
             listener.enterViewDistSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewDistSpec) {
             listener.exitViewDistSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewDistSpec) {
            return visitor.visitViewDistSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewSortSpecContext extends antlr.ParserRuleContext {
    public _colList?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SORTED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SORTED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewSortSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewSortSpec) {
             listener.enterViewSortSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewSortSpec) {
             listener.exitViewSortSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewSortSpec) {
            return visitor.visitViewSortSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropViewStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropViewStatement) {
             listener.enterDropViewStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropViewStatement) {
             listener.exitDropViewStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropViewStatement) {
            return visitor.visitDropViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMaterializedViewStatementContext extends antlr.ParserRuleContext {
    public _name?: ViewNameCreateContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_VIEW, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext {
        return this.getRuleContext(0, SelectStatementWithCTEContext)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public rewriteDisabled(): RewriteDisabledContext | null {
        return this.getRuleContext(0, RewriteDisabledContext);
    }
    public tableComment(): TableCommentContext | null {
        return this.getRuleContext(0, TableCommentContext);
    }
    public viewPartition(): ViewPartitionContext | null {
        return this.getRuleContext(0, ViewPartitionContext);
    }
    public viewOrganization(): ViewOrganizationContext | null {
        return this.getRuleContext(0, ViewOrganizationContext);
    }
    public tableRowFormat(): TableRowFormatContext | null {
        return this.getRuleContext(0, TableRowFormatContext);
    }
    public tableFileFormat(): TableFileFormatContext | null {
        return this.getRuleContext(0, TableFileFormatContext);
    }
    public locationPath(): LocationPathContext | null {
        return this.getRuleContext(0, LocationPathContext);
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | null {
        return this.getRuleContext(0, TablePropertiesPrefixedContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createMaterializedViewStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateMaterializedViewStatement) {
             listener.enterCreateMaterializedViewStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateMaterializedViewStatement) {
             listener.exitCreateMaterializedViewStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedViewStatement) {
            return visitor.visitCreateMaterializedViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropMaterializedViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropMaterializedViewStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropMaterializedViewStatement) {
             listener.enterDropMaterializedViewStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropMaterializedViewStatement) {
             listener.exitDropMaterializedViewStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropMaterializedViewStatement) {
            return visitor.visitDropMaterializedViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateScheduledQueryStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_SCHEDULED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SCHEDULED, 0)!;
    }
    public KW_QUERY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_QUERY, 0)!;
    }
    public scheduleSpec(): ScheduleSpecContext {
        return this.getRuleContext(0, ScheduleSpecContext)!;
    }
    public definedAsSpec(): DefinedAsSpecContext {
        return this.getRuleContext(0, DefinedAsSpecContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public executedAsSpec(): ExecutedAsSpecContext | null {
        return this.getRuleContext(0, ExecutedAsSpecContext);
    }
    public enableSpecification(): EnableSpecificationContext | null {
        return this.getRuleContext(0, EnableSpecificationContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createScheduledQueryStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateScheduledQueryStatement) {
             listener.enterCreateScheduledQueryStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateScheduledQueryStatement) {
             listener.exitCreateScheduledQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateScheduledQueryStatement) {
            return visitor.visitCreateScheduledQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropScheduledQueryStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_SCHEDULED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SCHEDULED, 0)!;
    }
    public KW_QUERY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_QUERY, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropScheduledQueryStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropScheduledQueryStatement) {
             listener.enterDropScheduledQueryStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropScheduledQueryStatement) {
             listener.exitDropScheduledQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropScheduledQueryStatement) {
            return visitor.visitDropScheduledQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterScheduledQueryStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public _mod?: AlterScheduledQueryChangeContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ALTER, 0)!;
    }
    public KW_SCHEDULED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SCHEDULED, 0)!;
    }
    public KW_QUERY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_QUERY, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public alterScheduledQueryChange(): AlterScheduledQueryChangeContext {
        return this.getRuleContext(0, AlterScheduledQueryChangeContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterScheduledQueryStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterScheduledQueryStatement) {
             listener.enterAlterScheduledQueryStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterScheduledQueryStatement) {
             listener.exitAlterScheduledQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterScheduledQueryStatement) {
            return visitor.visitAlterScheduledQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterScheduledQueryChangeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public scheduleSpec(): ScheduleSpecContext | null {
        return this.getRuleContext(0, ScheduleSpecContext);
    }
    public executedAsSpec(): ExecutedAsSpecContext | null {
        return this.getRuleContext(0, ExecutedAsSpecContext);
    }
    public enableSpecification(): EnableSpecificationContext | null {
        return this.getRuleContext(0, EnableSpecificationContext);
    }
    public definedAsSpec(): DefinedAsSpecContext | null {
        return this.getRuleContext(0, DefinedAsSpecContext);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXECUTE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterScheduledQueryChange;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterScheduledQueryChange) {
             listener.enterAlterScheduledQueryChange(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterScheduledQueryChange) {
             listener.exitAlterScheduledQueryChange(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterScheduledQueryChange) {
            return visitor.visitAlterScheduledQueryChange(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScheduleSpecContext extends antlr.ParserRuleContext {
    public _cronString?: Token | null;
    public _value?: Token | null;
    public _qualifier?: IntervalQualifiersContext;
    public _offsetTs?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CRON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CRON, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_EVERY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EVERY, 0);
    }
    public intervalQualifiers(): IntervalQualifiersContext | null {
        return this.getRuleContext(0, IntervalQualifiersContext);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AT, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OFFSET, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BY, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_scheduleSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterScheduleSpec) {
             listener.enterScheduleSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitScheduleSpec) {
             listener.exitScheduleSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitScheduleSpec) {
            return visitor.visitScheduleSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecutedAsSpecContext extends antlr.ParserRuleContext {
    public _executedAs?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXECUTED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_executedAsSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExecutedAsSpec) {
             listener.enterExecutedAsSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExecutedAsSpec) {
             listener.exitExecutedAsSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExecutedAsSpec) {
            return visitor.visitExecutedAsSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefinedAsSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFINED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_definedAsSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDefinedAsSpec) {
             listener.enterDefinedAsSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDefinedAsSpec) {
             listener.exitDefinedAsSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefinedAsSpec) {
            return visitor.visitDefinedAsSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStmtIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showStmtIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowStmtIdentifier) {
             listener.enterShowStmtIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowStmtIdentifier) {
             listener.exitShowStmtIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowStmtIdentifier) {
            return visitor.visitShowStmtIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableCommentContext extends antlr.ParserRuleContext {
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableComment;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableComment) {
             listener.enterTableComment(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableComment) {
             listener.exitTableComment(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableComment) {
            return visitor.visitTableComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableLifecycleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIFECYCLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LIFECYCLE, 0)!;
    }
    public Number(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.Number, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableLifecycle;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableLifecycle) {
             listener.enterTableLifecycle(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableLifecycle) {
             listener.exitTableLifecycle(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableLifecycle) {
            return visitor.visitTableLifecycle(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTablePartitionSpecContext extends antlr.ParserRuleContext {
    public _opt1?: CreateTablePartitionColumnTypeSpecContext;
    public _opt2?: ColumnNameListContext;
    public _spec?: PartitionTransformSpecContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITIONED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_PARTITIONED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public KW_SPEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SPEC, 0);
    }
    public partitionTransformSpec(): PartitionTransformSpecContext | null {
        return this.getRuleContext(0, PartitionTransformSpecContext);
    }
    public createTablePartitionColumnTypeSpec(): CreateTablePartitionColumnTypeSpecContext | null {
        return this.getRuleContext(0, CreateTablePartitionColumnTypeSpecContext);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createTablePartitionSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateTablePartitionSpec) {
             listener.enterCreateTablePartitionSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateTablePartitionSpec) {
             listener.exitCreateTablePartitionSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTablePartitionSpec) {
            return visitor.visitCreateTablePartitionSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTablePartitionColumnTypeSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameTypeConstraint(): ColumnNameTypeConstraintContext[];
    public columnNameTypeConstraint(i: number): ColumnNameTypeConstraintContext | null;
    public columnNameTypeConstraint(i?: number): ColumnNameTypeConstraintContext[] | ColumnNameTypeConstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameTypeConstraintContext);
        }

        return this.getRuleContext(i, ColumnNameTypeConstraintContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createTablePartitionColumnTypeSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateTablePartitionColumnTypeSpec) {
             listener.enterCreateTablePartitionColumnTypeSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateTablePartitionColumnTypeSpec) {
             listener.exitCreateTablePartitionColumnTypeSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTablePartitionColumnTypeSpec) {
            return visitor.visitCreateTablePartitionColumnTypeSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionTransformSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionTransformType(): PartitionTransformTypeContext[];
    public partitionTransformType(i: number): PartitionTransformTypeContext | null;
    public partitionTransformType(i?: number): PartitionTransformTypeContext[] | PartitionTransformTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionTransformTypeContext);
        }

        return this.getRuleContext(i, PartitionTransformTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionTransformSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionTransformSpec) {
             listener.enterPartitionTransformSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionTransformSpec) {
             listener.exitPartitionTransformSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionTransformSpec) {
            return visitor.visitPartitionTransformSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionTransformTypeContext extends antlr.ParserRuleContext {
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public year(): YearContext | null {
        return this.getRuleContext(0, YearContext);
    }
    public month(): MonthContext | null {
        return this.getRuleContext(0, MonthContext);
    }
    public day(): DayContext | null {
        return this.getRuleContext(0, DayContext);
    }
    public hour(): HourContext | null {
        return this.getRuleContext(0, HourContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.COMMA, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRUNCATE, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BUCKET, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionTransformType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionTransformType) {
             listener.enterPartitionTransformType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionTransformType) {
             listener.exitPartitionTransformType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionTransformType) {
            return visitor.visitPartitionTransformType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableBucketsContext extends antlr.ParserRuleContext {
    public _bucketCols?: ColumnNameListContext;
    public _sortCols?: ColumnNameOrderListContext;
    public _num?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTERED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CLUSTERED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_BY);
    	} else {
    		return this.getToken(HiveSqlParser.KW_BY, i);
    	}
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INTO, 0)!;
    }
    public KW_BUCKETS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BUCKETS, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public Number(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.Number, 0)!;
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SORTED, 0);
    }
    public columnNameOrderList(): ColumnNameOrderListContext | null {
        return this.getRuleContext(0, ColumnNameOrderListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableBuckets;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableBuckets) {
             listener.enterTableBuckets(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableBuckets) {
             listener.exitTableBuckets(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableBuckets) {
            return visitor.visitTableBuckets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSkewedContext extends antlr.ParserRuleContext {
    public _skewedCols?: ColumnNameListContext;
    public _skewedValues?: SkewedValueElementContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SKEWED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SKEWED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public skewedValueElement(): SkewedValueElementContext {
        return this.getRuleContext(0, SkewedValueElementContext)!;
    }
    public storedAsDirs(): StoredAsDirsContext | null {
        return this.getRuleContext(0, StoredAsDirsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableSkewed;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableSkewed) {
             listener.enterTableSkewed(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableSkewed) {
             listener.exitTableSkewed(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSkewed) {
            return visitor.visitTableSkewed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowFormatSerde(): RowFormatSerdeContext | null {
        return this.getRuleContext(0, RowFormatSerdeContext);
    }
    public rowFormatDelimited(): RowFormatDelimitedContext | null {
        return this.getRuleContext(0, RowFormatDelimitedContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rowFormat;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRowFormat) {
             listener.enterRowFormat(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRowFormat) {
             listener.exitRowFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowFormat) {
            return visitor.visitRowFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RecordReaderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RECORDREADER(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_RECORDREADER, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_recordReader;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRecordReader) {
             listener.enterRecordReader(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRecordReader) {
             listener.exitRecordReader(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRecordReader) {
            return visitor.visitRecordReader(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RecordWriterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_RECORDWRITER, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_recordWriter;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRecordWriter) {
             listener.enterRecordWriter(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRecordWriter) {
             listener.exitRecordWriter(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRecordWriter) {
            return visitor.visitRecordWriter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatSerdeContext extends antlr.ParserRuleContext {
    public _name?: Token | null;
    public _serdeprops?: TablePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SERDE, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rowFormatSerde;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRowFormatSerde) {
             listener.enterRowFormatSerde(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRowFormatSerde) {
             listener.exitRowFormatSerde(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowFormatSerde) {
            return visitor.visitRowFormatSerde(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatDelimitedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FORMAT, 0)!;
    }
    public KW_DELIMITED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DELIMITED, 0)!;
    }
    public tableRowFormatFieldIdentifier(): TableRowFormatFieldIdentifierContext | null {
        return this.getRuleContext(0, TableRowFormatFieldIdentifierContext);
    }
    public tableRowFormatCollItemsIdentifier(): TableRowFormatCollItemsIdentifierContext | null {
        return this.getRuleContext(0, TableRowFormatCollItemsIdentifierContext);
    }
    public tableRowFormatMapKeysIdentifier(): TableRowFormatMapKeysIdentifierContext | null {
        return this.getRuleContext(0, TableRowFormatMapKeysIdentifierContext);
    }
    public tableRowFormatLinesIdentifier(): TableRowFormatLinesIdentifierContext | null {
        return this.getRuleContext(0, TableRowFormatLinesIdentifierContext);
    }
    public tableRowNullFormat(): TableRowNullFormatContext | null {
        return this.getRuleContext(0, TableRowNullFormatContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rowFormatDelimited;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRowFormatDelimited) {
             listener.enterRowFormatDelimited(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRowFormatDelimited) {
             listener.exitRowFormatDelimited(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowFormatDelimited) {
            return visitor.visitRowFormatDelimited(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowFormatDelimited(): RowFormatDelimitedContext | null {
        return this.getRuleContext(0, RowFormatDelimitedContext);
    }
    public rowFormatSerde(): RowFormatSerdeContext | null {
        return this.getRuleContext(0, RowFormatSerdeContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableRowFormat;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableRowFormat) {
             listener.enterTableRowFormat(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableRowFormat) {
             listener.exitTableRowFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormat) {
            return visitor.visitTableRowFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertiesPrefixedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TBLPROPERTIES, 0)!;
    }
    public tableProperties(): TablePropertiesContext {
        return this.getRuleContext(0, TablePropertiesContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tablePropertiesPrefixed;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTablePropertiesPrefixed) {
             listener.enterTablePropertiesPrefixed(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTablePropertiesPrefixed) {
             listener.exitTablePropertiesPrefixed(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablePropertiesPrefixed) {
            return visitor.visitTablePropertiesPrefixed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public tablePropertiesList(): TablePropertiesListContext {
        return this.getRuleContext(0, TablePropertiesListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableProperties;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableProperties) {
             listener.enterTableProperties(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableProperties) {
             listener.exitTableProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableProperties) {
            return visitor.visitTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertiesListContext extends antlr.ParserRuleContext {
    public _key?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyValuePropertyList(): KeyValuePropertyListContext | null {
        return this.getRuleContext(0, KeyValuePropertyListContext);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tablePropertiesList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTablePropertiesList) {
             listener.enterTablePropertiesList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTablePropertiesList) {
             listener.exitTablePropertiesList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablePropertiesList) {
            return visitor.visitTablePropertiesList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyValuePropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public keyValuePropertyList(): KeyValuePropertyListContext {
        return this.getRuleContext(0, KeyValuePropertyListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_keyValueProperties;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterKeyValueProperties) {
             listener.enterKeyValueProperties(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitKeyValueProperties) {
             listener.exitKeyValueProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKeyValueProperties) {
            return visitor.visitKeyValueProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyValuePropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyValueProperty(): KeyValuePropertyContext[];
    public keyValueProperty(i: number): KeyValuePropertyContext | null;
    public keyValueProperty(i?: number): KeyValuePropertyContext[] | KeyValuePropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyValuePropertyContext);
        }

        return this.getRuleContext(i, KeyValuePropertyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_keyValuePropertyList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterKeyValuePropertyList) {
             listener.enterKeyValuePropertyList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitKeyValuePropertyList) {
             listener.exitKeyValuePropertyList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKeyValuePropertyList) {
            return visitor.visitKeyValuePropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyValuePropertyContext extends antlr.ParserRuleContext {
    public _key?: Token | null;
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.EQUAL, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_keyValueProperty;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterKeyValueProperty) {
             listener.enterKeyValueProperty(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitKeyValueProperty) {
             listener.exitKeyValueProperty(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKeyValueProperty) {
            return visitor.visitKeyValueProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatFieldIdentifierContext extends antlr.ParserRuleContext {
    public _fldIdnt?: Token | null;
    public _fldEscape?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FIELDS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FIELDS, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_BY);
    	} else {
    		return this.getToken(HiveSqlParser.KW_BY, i);
    	}
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ESCAPED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableRowFormatFieldIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableRowFormatFieldIdentifier) {
             listener.enterTableRowFormatFieldIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableRowFormatFieldIdentifier) {
             listener.exitTableRowFormatFieldIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormatFieldIdentifier) {
            return visitor.visitTableRowFormatFieldIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatCollItemsIdentifierContext extends antlr.ParserRuleContext {
    public _collIdnt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COLLECTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_COLLECTION, 0)!;
    }
    public KW_ITEMS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ITEMS, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableRowFormatCollItemsIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableRowFormatCollItemsIdentifier) {
             listener.enterTableRowFormatCollItemsIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableRowFormatCollItemsIdentifier) {
             listener.exitTableRowFormatCollItemsIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormatCollItemsIdentifier) {
            return visitor.visitTableRowFormatCollItemsIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatMapKeysIdentifierContext extends antlr.ParserRuleContext {
    public _mapKeysIdnt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MAP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MAP, 0)!;
    }
    public KW_KEYS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_KEYS, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableRowFormatMapKeysIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableRowFormatMapKeysIdentifier) {
             listener.enterTableRowFormatMapKeysIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableRowFormatMapKeysIdentifier) {
             listener.exitTableRowFormatMapKeysIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormatMapKeysIdentifier) {
            return visitor.visitTableRowFormatMapKeysIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatLinesIdentifierContext extends antlr.ParserRuleContext {
    public _linesIdnt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LINES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LINES, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableRowFormatLinesIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableRowFormatLinesIdentifier) {
             listener.enterTableRowFormatLinesIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableRowFormatLinesIdentifier) {
             listener.exitTableRowFormatLinesIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormatLinesIdentifier) {
            return visitor.visitTableRowFormatLinesIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowNullFormatContext extends antlr.ParserRuleContext {
    public _nullIdnt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_NULL, 0)!;
    }
    public KW_DEFINED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DEFINED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableRowNullFormat;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableRowNullFormat) {
             listener.enterTableRowNullFormat(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableRowNullFormat) {
             listener.exitTableRowNullFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRowNullFormat) {
            return visitor.visitTableRowNullFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: Token | null;
    public _outFmt?: Token | null;
    public _inDriver?: Token | null;
    public _outDriver?: Token | null;
    public _storageHandler?: Token | null;
    public _serdeprops?: TablePropertiesContext;
    public _fileformat?: Id_Context;
    public _genericSpec?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORED(): antlr.TerminalNode[];
    public KW_STORED(i: number): antlr.TerminalNode | null;
    public KW_STORED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_STORED);
    	} else {
    		return this.getToken(HiveSqlParser.KW_STORED, i);
    	}
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public KW_INPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPUTDRIVER, 0);
    }
    public KW_OUTPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTPUTDRIVER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BY, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableFileFormat;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableFileFormat) {
             listener.enterTableFileFormat(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableFileFormat) {
             listener.exitTableFileFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableFileFormat) {
            return visitor.visitTableFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameType(): ColumnNameTypeContext[];
    public columnNameType(i: number): ColumnNameTypeContext | null;
    public columnNameType(i?: number): ColumnNameTypeContext[] | ColumnNameTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameTypeContext);
        }

        return this.getRuleContext(i, ColumnNameTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameTypeList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameTypeList) {
             listener.enterColumnNameTypeList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameTypeList) {
             listener.exitColumnNameTypeList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTypeList) {
            return visitor.visitColumnNameTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeOrConstraintListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameTypeOrConstraint(): ColumnNameTypeOrConstraintContext[];
    public columnNameTypeOrConstraint(i: number): ColumnNameTypeOrConstraintContext | null;
    public columnNameTypeOrConstraint(i?: number): ColumnNameTypeOrConstraintContext[] | ColumnNameTypeOrConstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameTypeOrConstraintContext);
        }

        return this.getRuleContext(i, ColumnNameTypeOrConstraintContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameTypeOrConstraintList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameTypeOrConstraintList) {
             listener.enterColumnNameTypeOrConstraintList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameTypeOrConstraintList) {
             listener.exitColumnNameTypeOrConstraintList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTypeOrConstraintList) {
            return visitor.visitColumnNameTypeOrConstraintList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameColonTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameColonType(): ColumnNameColonTypeContext[];
    public columnNameColonType(i: number): ColumnNameColonTypeContext | null;
    public columnNameColonType(i?: number): ColumnNameColonTypeContext[] | ColumnNameColonTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameColonTypeContext);
        }

        return this.getRuleContext(i, ColumnNameColonTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameColonTypeList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameColonTypeList) {
             listener.enterColumnNameColonTypeList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameColonTypeList) {
             listener.exitColumnNameColonTypeList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameColonTypeList) {
            return visitor.visitColumnNameColonTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameList) {
             listener.enterColumnNameList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameList) {
             listener.exitColumnNameList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameList) {
            return visitor.visitColumnNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameCreate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameCreate) {
             listener.enterColumnNameCreate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameCreate) {
             listener.exitColumnNameCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCreate) {
            return visitor.visitColumnNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public KW_ELEM_TYPE(): antlr.TerminalNode[];
    public KW_ELEM_TYPE(i: number): antlr.TerminalNode | null;
    public KW_ELEM_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_ELEM_TYPE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_ELEM_TYPE, i);
    	}
    }
    public KW_KEY_TYPE(): antlr.TerminalNode[];
    public KW_KEY_TYPE(i: number): antlr.TerminalNode | null;
    public KW_KEY_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_KEY_TYPE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_KEY_TYPE, i);
    	}
    }
    public KW_VALUE_TYPE(): antlr.TerminalNode[];
    public KW_VALUE_TYPE(i: number): antlr.TerminalNode | null;
    public KW_VALUE_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_VALUE_TYPE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_VALUE_TYPE, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_extColumnName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExtColumnName) {
             listener.enterExtColumnName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExtColumnName) {
             listener.exitExtColumnName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExtColumnName) {
            return visitor.visitExtColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameOrderListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameOrder(): ColumnNameOrderContext[];
    public columnNameOrder(i: number): ColumnNameOrderContext | null;
    public columnNameOrder(i?: number): ColumnNameOrderContext[] | ColumnNameOrderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameOrderContext);
        }

        return this.getRuleContext(i, ColumnNameOrderContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameOrderList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameOrderList) {
             listener.enterColumnNameOrderList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameOrderList) {
             listener.exitColumnNameOrderList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameOrderList) {
            return visitor.visitColumnNameOrderList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnParenthesesListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnParenthesesList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnParenthesesList) {
             listener.enterColumnParenthesesList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnParenthesesList) {
             listener.exitColumnParenthesesList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnParenthesesList) {
            return visitor.visitColumnParenthesesList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnableValidateSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enableSpecification(): EnableSpecificationContext | null {
        return this.getRuleContext(0, EnableSpecificationContext);
    }
    public validateSpecification(): ValidateSpecificationContext | null {
        return this.getRuleContext(0, ValidateSpecificationContext);
    }
    public enforcedSpecification(): EnforcedSpecificationContext | null {
        return this.getRuleContext(0, EnforcedSpecificationContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_enableValidateSpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterEnableValidateSpecification) {
             listener.enterEnableValidateSpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitEnableValidateSpecification) {
             listener.exitEnableValidateSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEnableValidateSpecification) {
            return visitor.visitEnableValidateSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnableSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enable(): EnableContext | null {
        return this.getRuleContext(0, EnableContext);
    }
    public disable(): DisableContext | null {
        return this.getRuleContext(0, DisableContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_enableSpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterEnableSpecification) {
             listener.enterEnableSpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitEnableSpecification) {
             listener.exitEnableSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEnableSpecification) {
            return visitor.visitEnableSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValidateSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VALIDATE, 0);
    }
    public KW_NOVALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOVALIDATE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_validateSpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterValidateSpecification) {
             listener.enterValidateSpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitValidateSpecification) {
             listener.exitValidateSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValidateSpecification) {
            return visitor.visitValidateSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnforcedSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ENFORCED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ENFORCED, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_enforcedSpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterEnforcedSpecification) {
             listener.enterEnforcedSpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitEnforcedSpecification) {
             listener.exitEnforcedSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEnforcedSpecification) {
            return visitor.visitEnforcedSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RELY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RELY, 0);
    }
    public KW_NORELY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NORELY, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_relySpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRelySpecification) {
             listener.enterRelySpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRelySpecification) {
             listener.exitRelySpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelySpecification) {
            return visitor.visitRelySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableLevelConstraint(): TableLevelConstraintContext {
        return this.getRuleContext(0, TableLevelConstraintContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext | null {
        return this.getRuleContext(0, ConstraintOptsCreateContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateConstraint) {
             listener.enterCreateConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateConstraint) {
             listener.exitCreateConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateConstraint) {
            return visitor.visitCreateConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterConstraintWithNameContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0)!;
    }
    public tableLevelConstraint(): TableLevelConstraintContext {
        return this.getRuleContext(0, TableLevelConstraintContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext | null {
        return this.getRuleContext(0, ConstraintOptsAlterContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterConstraintWithName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterConstraintWithName) {
             listener.enterAlterConstraintWithName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterConstraintWithName) {
             listener.exitAlterConstraintWithName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterConstraintWithName) {
            return visitor.visitAlterConstraintWithName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableLevelConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pkUkConstraint(): PkUkConstraintContext | null {
        return this.getRuleContext(0, PkUkConstraintContext);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(0, CheckConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableLevelConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableLevelConstraint) {
             listener.enterTableLevelConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableLevelConstraint) {
             listener.exitTableLevelConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableLevelConstraint) {
            return visitor.visitTableLevelConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PkUkConstraintContext extends antlr.ParserRuleContext {
    public _pkCols?: ColumnParenthesesListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableConstraintType(): TableConstraintTypeContext {
        return this.getRuleContext(0, TableConstraintTypeContext)!;
    }
    public columnParenthesesList(): ColumnParenthesesListContext {
        return this.getRuleContext(0, ColumnParenthesesListContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_pkUkConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPkUkConstraint) {
             listener.enterPkUkConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPkUkConstraint) {
             listener.exitPkUkConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPkUkConstraint) {
            return visitor.visitPkUkConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CHECK(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CHECK, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_checkConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCheckConstraint) {
             listener.enterCheckConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCheckConstraint) {
             listener.exitCheckConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCheckConstraint) {
            return visitor.visitCheckConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateForeignKeyContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public _fkCols?: ColumnParenthesesListContext;
    public _tabName?: TableNameContext;
    public _parCols?: ColumnParenthesesListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_KEY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_KEY, 0)!;
    }
    public KW_REFERENCES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REFERENCES, 0)!;
    }
    public columnParenthesesList(): ColumnParenthesesListContext[];
    public columnParenthesesList(i: number): ColumnParenthesesListContext | null;
    public columnParenthesesList(i?: number): ColumnParenthesesListContext[] | ColumnParenthesesListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnParenthesesListContext);
        }

        return this.getRuleContext(i, ColumnParenthesesListContext);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext | null {
        return this.getRuleContext(0, ConstraintOptsCreateContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createForeignKey;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateForeignKey) {
             listener.enterCreateForeignKey(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateForeignKey) {
             listener.exitCreateForeignKey(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateForeignKey) {
            return visitor.visitCreateForeignKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterForeignKeyWithNameContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public _fkCols?: ColumnParenthesesListContext;
    public _tabName?: TableNameContext;
    public _parCols?: ColumnParenthesesListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_KEY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_KEY, 0)!;
    }
    public KW_REFERENCES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REFERENCES, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public columnParenthesesList(): ColumnParenthesesListContext[];
    public columnParenthesesList(i: number): ColumnParenthesesListContext | null;
    public columnParenthesesList(i?: number): ColumnParenthesesListContext[] | ColumnParenthesesListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnParenthesesListContext);
        }

        return this.getRuleContext(i, ColumnParenthesesListContext);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext | null {
        return this.getRuleContext(0, ConstraintOptsAlterContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterForeignKeyWithName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterForeignKeyWithName) {
             listener.enterAlterForeignKeyWithName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterForeignKeyWithName) {
             listener.exitAlterForeignKeyWithName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterForeignKeyWithName) {
            return visitor.visitAlterForeignKeyWithName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedValueElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constantList(): ConstantListContext | null {
        return this.getRuleContext(0, ConstantListContext);
    }
    public skewedColumnValuePairList(): SkewedColumnValuePairListContext | null {
        return this.getRuleContext(0, SkewedColumnValuePairListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_skewedValueElement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSkewedValueElement) {
             listener.enterSkewedValueElement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSkewedValueElement) {
             listener.exitSkewedValueElement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSkewedValueElement) {
            return visitor.visitSkewedValueElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedColumnValuePairListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public skewedColumnValuePair(): SkewedColumnValuePairContext[];
    public skewedColumnValuePair(i: number): SkewedColumnValuePairContext | null;
    public skewedColumnValuePair(i?: number): SkewedColumnValuePairContext[] | SkewedColumnValuePairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewedColumnValuePairContext);
        }

        return this.getRuleContext(i, SkewedColumnValuePairContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_skewedColumnValuePairList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSkewedColumnValuePairList) {
             listener.enterSkewedColumnValuePairList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSkewedColumnValuePairList) {
             listener.exitSkewedColumnValuePairList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSkewedColumnValuePairList) {
            return visitor.visitSkewedColumnValuePairList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedColumnValuePairContext extends antlr.ParserRuleContext {
    public _colValues?: ConstantListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public constantList(): ConstantListContext {
        return this.getRuleContext(0, ConstantListContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_skewedColumnValuePair;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSkewedColumnValuePair) {
             listener.enterSkewedColumnValuePair(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSkewedColumnValuePair) {
             listener.exitSkewedColumnValuePair(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSkewedColumnValuePair) {
            return visitor.visitSkewedColumnValuePair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_constantList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterConstantList) {
             listener.enterConstantList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitConstantList) {
             listener.exitConstantList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstantList) {
            return visitor.visitConstantList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DESC, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_orderSpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterOrderSpecification) {
             listener.enterOrderSpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitOrderSpecification) {
             listener.exitOrderSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderSpecification) {
            return visitor.visitOrderSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullOrderingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULLS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_NULLS, 0)!;
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LAST, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_nullOrdering;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterNullOrdering) {
             listener.enterNullOrdering(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitNullOrdering) {
             listener.exitNullOrdering(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNullOrdering) {
            return visitor.visitNullOrdering(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameOrderContext extends antlr.ParserRuleContext {
    public _orderSpec?: OrderSpecificationContext;
    public _nullSpec?: NullOrderingContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public orderSpecification(): OrderSpecificationContext | null {
        return this.getRuleContext(0, OrderSpecificationContext);
    }
    public nullOrdering(): NullOrderingContext | null {
        return this.getRuleContext(0, NullOrderingContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameOrder;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameOrder) {
             listener.enterColumnNameOrder(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameOrder) {
             listener.exitColumnNameOrder(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameOrder) {
            return visitor.visitColumnNameOrder(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCommentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameComment(): ColumnNameCommentContext[];
    public columnNameComment(i: number): ColumnNameCommentContext | null;
    public columnNameComment(i?: number): ColumnNameCommentContext[] | ColumnNameCommentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameCommentContext);
        }

        return this.getRuleContext(i, ColumnNameCommentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameCommentList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameCommentList) {
             listener.enterColumnNameCommentList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameCommentList) {
             listener.exitColumnNameCommentList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCommentList) {
            return visitor.visitColumnNameCommentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCommentContext extends antlr.ParserRuleContext {
    public _colName?: ColumnNameCreateContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameComment;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameComment) {
             listener.enterColumnNameComment(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameComment) {
             listener.exitColumnNameComment(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameComment) {
            return visitor.visitColumnNameComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnRefOrderContext extends antlr.ParserRuleContext {
    public _orderSpec?: OrderSpecificationContext;
    public _nullSpec?: NullOrderingContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public orderSpecification(): OrderSpecificationContext | null {
        return this.getRuleContext(0, OrderSpecificationContext);
    }
    public nullOrdering(): NullOrderingContext | null {
        return this.getRuleContext(0, NullOrderingContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnRefOrder;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnRefOrder) {
             listener.enterColumnRefOrder(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnRefOrder) {
             listener.exitColumnRefOrder(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnRefOrder) {
            return visitor.visitColumnRefOrder(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeContext extends antlr.ParserRuleContext {
    public _colName?: ColumnNameCreateContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnType(): ColumnTypeContext {
        return this.getRuleContext(0, ColumnTypeContext)!;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameType) {
             listener.enterColumnNameType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameType) {
             listener.exitColumnNameType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameType) {
            return visitor.visitColumnNameType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeOrConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableConstraint(): TableConstraintContext | null {
        return this.getRuleContext(0, TableConstraintContext);
    }
    public columnNameTypeConstraint(): ColumnNameTypeConstraintContext | null {
        return this.getRuleContext(0, ColumnNameTypeConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameTypeOrConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameTypeOrConstraint) {
             listener.enterColumnNameTypeOrConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameTypeOrConstraint) {
             listener.exitColumnNameTypeOrConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTypeOrConstraint) {
            return visitor.visitColumnNameTypeOrConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createForeignKey(): CreateForeignKeyContext | null {
        return this.getRuleContext(0, CreateForeignKeyContext);
    }
    public createConstraint(): CreateConstraintContext | null {
        return this.getRuleContext(0, CreateConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableConstraint) {
             listener.enterTableConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableConstraint) {
             listener.exitTableConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableConstraint) {
            return visitor.visitTableConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeConstraintContext extends antlr.ParserRuleContext {
    public _colName?: ColumnNameCreateContext;
    public _colType?: ColumnTypeContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public columnType(): ColumnTypeContext {
        return this.getRuleContext(0, ColumnTypeContext)!;
    }
    public columnConstraint(): ColumnConstraintContext | null {
        return this.getRuleContext(0, ColumnConstraintContext);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameTypeConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameTypeConstraint) {
             listener.enterColumnNameTypeConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameTypeConstraint) {
             listener.exitColumnNameTypeConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTypeConstraint) {
            return visitor.visitColumnNameTypeConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public foreignKeyConstraint(): ForeignKeyConstraintContext | null {
        return this.getRuleContext(0, ForeignKeyConstraintContext);
    }
    public colConstraint(): ColConstraintContext | null {
        return this.getRuleContext(0, ColConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnConstraint) {
             listener.enterColumnConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnConstraint) {
             listener.exitColumnConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnConstraint) {
            return visitor.visitColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForeignKeyConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public _tabName?: TableNameContext;
    public _colName?: ColumnNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REFERENCES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REFERENCES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext | null {
        return this.getRuleContext(0, ConstraintOptsCreateContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_foreignKeyConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterForeignKeyConstraint) {
             listener.enterForeignKeyConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitForeignKeyConstraint) {
             listener.exitForeignKeyConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitForeignKeyConstraint) {
            return visitor.visitForeignKeyConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnConstraintType(): ColumnConstraintTypeContext {
        return this.getRuleContext(0, ColumnConstraintTypeContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext | null {
        return this.getRuleContext(0, ConstraintOptsCreateContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_colConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColConstraint) {
             listener.enterColConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColConstraint) {
             listener.exitColConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColConstraint) {
            return visitor.visitColConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterColumnConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterForeignKeyConstraint(): AlterForeignKeyConstraintContext | null {
        return this.getRuleContext(0, AlterForeignKeyConstraintContext);
    }
    public alterColConstraint(): AlterColConstraintContext | null {
        return this.getRuleContext(0, AlterColConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterColumnConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterColumnConstraint) {
             listener.enterAlterColumnConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterColumnConstraint) {
             listener.exitAlterColumnConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterColumnConstraint) {
            return visitor.visitAlterColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterForeignKeyConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public _tabName?: TableNameContext;
    public _colName?: ColumnNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REFERENCES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REFERENCES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext | null {
        return this.getRuleContext(0, ConstraintOptsAlterContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterForeignKeyConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterForeignKeyConstraint) {
             listener.enterAlterForeignKeyConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterForeignKeyConstraint) {
             listener.exitAlterForeignKeyConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterForeignKeyConstraint) {
            return visitor.visitAlterForeignKeyConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterColConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnConstraintType(): ColumnConstraintTypeContext {
        return this.getRuleContext(0, ColumnConstraintTypeContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext | null {
        return this.getRuleContext(0, ConstraintOptsAlterContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterColConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterColConstraint) {
             listener.enterAlterColConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterColConstraint) {
             listener.exitAlterColConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterColConstraint) {
            return visitor.visitAlterColConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnConstraintTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFAULT, 0);
    }
    public defaultVal(): DefaultValContext | null {
        return this.getRuleContext(0, DefaultValContext);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(0, CheckConstraintContext);
    }
    public tableConstraintType(): TableConstraintTypeContext | null {
        return this.getRuleContext(0, TableConstraintTypeContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnConstraintType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnConstraintType) {
             listener.enterColumnConstraintType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnConstraintType) {
             listener.exitColumnConstraintType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnConstraintType) {
            return visitor.visitColumnConstraintType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public function_(): Function_Context | null {
        return this.getRuleContext(0, Function_Context);
    }
    public castExpression(): CastExpressionContext | null {
        return this.getRuleContext(0, CastExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_defaultVal;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDefaultVal) {
             listener.enterDefaultVal(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDefaultVal) {
             listener.exitDefaultVal(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefaultVal) {
            return visitor.visitDefaultVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableConstraintTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PRIMARY, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KEY, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNIQUE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableConstraintType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableConstraintType) {
             listener.enterTableConstraintType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableConstraintType) {
             listener.exitTableConstraintType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableConstraintType) {
            return visitor.visitTableConstraintType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintOptsCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enableValidateSpecification(): EnableValidateSpecificationContext {
        return this.getRuleContext(0, EnableValidateSpecificationContext)!;
    }
    public relySpecification(): RelySpecificationContext | null {
        return this.getRuleContext(0, RelySpecificationContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_constraintOptsCreate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterConstraintOptsCreate) {
             listener.enterConstraintOptsCreate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitConstraintOptsCreate) {
             listener.exitConstraintOptsCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintOptsCreate) {
            return visitor.visitConstraintOptsCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintOptsAlterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enableValidateSpecification(): EnableValidateSpecificationContext {
        return this.getRuleContext(0, EnableValidateSpecificationContext)!;
    }
    public relySpecification(): RelySpecificationContext | null {
        return this.getRuleContext(0, RelySpecificationContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_constraintOptsAlter;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterConstraintOptsAlter) {
             listener.enterConstraintOptsAlter(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitConstraintOptsAlter) {
             listener.exitConstraintOptsAlter(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintOptsAlter) {
            return visitor.visitConstraintOptsAlter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameColonTypeContext extends antlr.ParserRuleContext {
    public _colName?: ColumnNameCreateContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.COLON, 0)!;
    }
    public columnType(): ColumnTypeContext {
        return this.getRuleContext(0, ColumnTypeContext)!;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameColonType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameColonType) {
             listener.enterColumnNameColonType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameColonType) {
             listener.exitColumnNameColonType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameColonType) {
            return visitor.visitColumnNameColonType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnType) {
             listener.enterColumnType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnType) {
             listener.exitColumnType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnType) {
            return visitor.visitColumnType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnType(): ColumnTypeContext[];
    public columnType(i: number): ColumnTypeContext | null;
    public columnType(i?: number): ColumnTypeContext[] | ColumnTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeContext);
        }

        return this.getRuleContext(i, ColumnTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnTypeList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnTypeList) {
             listener.enterColumnTypeList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnTypeList) {
             listener.exitColumnTypeList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeList) {
            return visitor.visitColumnTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primitiveType(): PrimitiveTypeContext | null {
        return this.getRuleContext(0, PrimitiveTypeContext);
    }
    public listType(): ListTypeContext | null {
        return this.getRuleContext(0, ListTypeContext);
    }
    public structType(): StructTypeContext | null {
        return this.getRuleContext(0, StructTypeContext);
    }
    public mapType(): MapTypeContext | null {
        return this.getRuleContext(0, MapTypeContext);
    }
    public unionType(): UnionTypeContext | null {
        return this.getRuleContext(0, UnionTypeContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_type;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterType) {
             listener.enterType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitType) {
             listener.exitType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitType) {
            return visitor.visitType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimitiveTypeContext extends antlr.ParserRuleContext {
    public _prec?: Token | null;
    public _scale?: Token | null;
    public _length?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TINYINT, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SMALLINT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTEGER, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BIGINT, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BOOLEAN, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FLOAT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REAL, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DOUBLE, 0);
    }
    public KW_PRECISION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PRECISION, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATE, 0);
    }
    public KW_DATETIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATETIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMPLOCALTZ(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMPLOCALTZ, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCAL, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ZONE, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STRING, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BINARY, 0);
    }
    public decimal(): DecimalContext | null {
        return this.getRuleContext(0, DecimalContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.Number);
    	} else {
    		return this.getToken(HiveSqlParser.Number, i);
    	}
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.COMMA, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VARCHAR, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CHAR, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_primitiveType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrimitiveType) {
             listener.enterPrimitiveType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrimitiveType) {
             listener.exitPrimitiveType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrimitiveType) {
            return visitor.visitPrimitiveType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ARRAY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ARRAY, 0)!;
    }
    public LESSTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LESSTHAN, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_listType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterListType) {
             listener.enterListType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitListType) {
             listener.exitListType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitListType) {
            return visitor.visitListType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StructTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STRUCT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_STRUCT, 0)!;
    }
    public LESSTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LESSTHAN, 0)!;
    }
    public columnNameColonTypeList(): ColumnNameColonTypeListContext {
        return this.getRuleContext(0, ColumnNameColonTypeListContext)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_structType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterStructType) {
             listener.enterStructType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitStructType) {
             listener.exitStructType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStructType) {
            return visitor.visitStructType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MapTypeContext extends antlr.ParserRuleContext {
    public _left?: PrimitiveTypeContext;
    public _right?: TypeContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MAP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MAP, 0)!;
    }
    public LESSTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LESSTHAN, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.COMMA, 0)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0)!;
    }
    public primitiveType(): PrimitiveTypeContext {
        return this.getRuleContext(0, PrimitiveTypeContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_mapType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterMapType) {
             listener.enterMapType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitMapType) {
             listener.exitMapType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMapType) {
            return visitor.visitMapType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnionTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNIONTYPE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_UNIONTYPE, 0)!;
    }
    public LESSTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LESSTHAN, 0)!;
    }
    public columnTypeList(): ColumnTypeListContext {
        return this.getRuleContext(0, ColumnTypeListContext)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_unionType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterUnionType) {
             listener.enterUnionType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitUnionType) {
             listener.exitUnionType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnionType) {
            return visitor.visitUnionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNION, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTERSECT, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXCEPT, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MINUS, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_setOperator;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSetOperator) {
             listener.enterSetOperator(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSetOperator) {
             listener.exitSetOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetOperator) {
            return visitor.visitSetOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryStatementExpressionContext extends antlr.ParserRuleContext {
    public _w?: WithClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryStatementExpressionBody(): QueryStatementExpressionBodyContext {
        return this.getRuleContext(0, QueryStatementExpressionBodyContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_queryStatementExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterQueryStatementExpression) {
             listener.enterQueryStatementExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitQueryStatementExpression) {
             listener.exitQueryStatementExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryStatementExpression) {
            return visitor.visitQueryStatementExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryStatementExpressionBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fromStatement(): FromStatementContext | null {
        return this.getRuleContext(0, FromStatementContext);
    }
    public regularBody(): RegularBodyContext | null {
        return this.getRuleContext(0, RegularBodyContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_queryStatementExpressionBody;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterQueryStatementExpressionBody) {
             listener.enterQueryStatementExpressionBody(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitQueryStatementExpressionBody) {
             listener.exitQueryStatementExpressionBody(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryStatementExpressionBody) {
            return visitor.visitQueryStatementExpressionBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WITH, 0)!;
    }
    public cteStatement(): CteStatementContext[];
    public cteStatement(i: number): CteStatementContext | null;
    public cteStatement(i?: number): CteStatementContext[] | CteStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CteStatementContext);
        }

        return this.getRuleContext(i, CteStatementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_withClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWithClause) {
             listener.enterWithClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWithClause) {
             listener.exitWithClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CteStatementContext extends antlr.ParserRuleContext {
    public _colAliases?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public queryStatementExpression(): QueryStatementExpressionContext {
        return this.getRuleContext(0, QueryStatementExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_cteStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCteStatement) {
             listener.enterCteStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCteStatement) {
             listener.exitCteStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCteStatement) {
            return visitor.visitCteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromStatementContext extends antlr.ParserRuleContext {
    public _u?: SetOperatorContext;
    public _r?: SingleFromStatementContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public singleFromStatement(): SingleFromStatementContext[];
    public singleFromStatement(i: number): SingleFromStatementContext | null;
    public singleFromStatement(i?: number): SingleFromStatementContext[] | SingleFromStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SingleFromStatementContext);
        }

        return this.getRuleContext(i, SingleFromStatementContext);
    }
    public setOperator(): SetOperatorContext[];
    public setOperator(i: number): SetOperatorContext | null;
    public setOperator(i?: number): SetOperatorContext[] | SetOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetOperatorContext);
        }

        return this.getRuleContext(i, SetOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_fromStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFromStatement) {
             listener.enterFromStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFromStatement) {
             listener.exitFromStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromStatement) {
            return visitor.visitFromStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleFromStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_singleFromStatement;
    }
    public override copyFrom(ctx: SingleFromStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class FromSelectStmtContext extends SingleFromStatementContext {
    public constructor(ctx: SingleFromStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public selectClause(): SelectClauseContext {
        return this.getRuleContext(0, SelectClauseContext)!;
    }
    public lateralView(): LateralViewContext | null {
        return this.getRuleContext(0, LateralViewContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public qualifyClause(): QualifyClauseContext | null {
        return this.getRuleContext(0, QualifyClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public clusterByClause(): ClusterByClauseContext | null {
        return this.getRuleContext(0, ClusterByClauseContext);
    }
    public distributeByClause(): DistributeByClauseContext | null {
        return this.getRuleContext(0, DistributeByClauseContext);
    }
    public sortByClause(): SortByClauseContext | null {
        return this.getRuleContext(0, SortByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFromSelectStmt) {
             listener.enterFromSelectStmt(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFromSelectStmt) {
             listener.exitFromSelectStmt(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromSelectStmt) {
            return visitor.visitFromSelectStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FromInsertStmtContext extends SingleFromStatementContext {
    public constructor(ctx: SingleFromStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public insertClause(): InsertClauseContext {
        return this.getRuleContext(0, InsertClauseContext)!;
    }
    public selectClause(): SelectClauseContext {
        return this.getRuleContext(0, SelectClauseContext)!;
    }
    public lateralView(): LateralViewContext | null {
        return this.getRuleContext(0, LateralViewContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public qualifyClause(): QualifyClauseContext | null {
        return this.getRuleContext(0, QualifyClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public clusterByClause(): ClusterByClauseContext | null {
        return this.getRuleContext(0, ClusterByClauseContext);
    }
    public distributeByClause(): DistributeByClauseContext | null {
        return this.getRuleContext(0, DistributeByClauseContext);
    }
    public sortByClause(): SortByClauseContext | null {
        return this.getRuleContext(0, SortByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFromInsertStmt) {
             listener.enterFromInsertStmt(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFromInsertStmt) {
             listener.exitFromInsertStmt(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromInsertStmt) {
            return visitor.visitFromInsertStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RegularBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_regularBody;
    }
    public override copyFrom(ctx: RegularBodyContext): void {
        super.copyFrom(ctx);
    }
}
export class InsertStmtContext extends RegularBodyContext {
    public _i?: InsertClauseContext;
    public _s?: SelectStatementContext;
    public constructor(ctx: RegularBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public insertClause(): InsertClauseContext {
        return this.getRuleContext(0, InsertClauseContext)!;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterInsertStmt) {
             listener.enterInsertStmt(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitInsertStmt) {
             listener.exitInsertStmt(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertStmt) {
            return visitor.visitInsertStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectStmtContext extends RegularBodyContext {
    public constructor(ctx: RegularBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectStmt) {
             listener.enterSelectStmt(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectStmt) {
             listener.exitSelectStmt(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStmt) {
            return visitor.visitSelectStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomSelectStatementContext extends antlr.ParserRuleContext {
    public _s?: SelectClauseContext;
    public _f?: FromClauseContext;
    public _w?: WhereClauseContext;
    public _g?: GroupByClauseContext;
    public _h?: HavingClauseContext;
    public _win?: Window_clauseContext;
    public _q?: QualifyClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public qualifyClause(): QualifyClauseContext | null {
        return this.getRuleContext(0, QualifyClauseContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public valuesClause(): ValuesClauseContext | null {
        return this.getRuleContext(0, ValuesClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_atomSelectStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAtomSelectStatement) {
             listener.enterAtomSelectStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAtomSelectStatement) {
             listener.exitAtomSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtomSelectStatement) {
            return visitor.visitAtomSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementContext extends antlr.ParserRuleContext {
    public _a?: AtomSelectStatementContext;
    public _set_?: SetOpSelectStatementContext;
    public _o?: OrderByClauseContext;
    public _c?: ClusterByClauseContext;
    public _d?: DistributeByClauseContext;
    public _sort?: SortByClauseContext;
    public _l?: LimitClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public atomSelectStatement(): AtomSelectStatementContext {
        return this.getRuleContext(0, AtomSelectStatementContext)!;
    }
    public setOpSelectStatement(): SetOpSelectStatementContext | null {
        return this.getRuleContext(0, SetOpSelectStatementContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public clusterByClause(): ClusterByClauseContext | null {
        return this.getRuleContext(0, ClusterByClauseContext);
    }
    public distributeByClause(): DistributeByClauseContext | null {
        return this.getRuleContext(0, DistributeByClauseContext);
    }
    public sortByClause(): SortByClauseContext | null {
        return this.getRuleContext(0, SortByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectStatement) {
             listener.enterSelectStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectStatement) {
             listener.exitSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetOpSelectStatementContext extends antlr.ParserRuleContext {
    public _u?: SetOperatorContext;
    public _b?: AtomSelectStatementContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public setOperator(): SetOperatorContext[];
    public setOperator(i: number): SetOperatorContext | null;
    public setOperator(i?: number): SetOperatorContext[] | SetOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetOperatorContext);
        }

        return this.getRuleContext(i, SetOperatorContext);
    }
    public atomSelectStatement(): AtomSelectStatementContext[];
    public atomSelectStatement(i: number): AtomSelectStatementContext | null;
    public atomSelectStatement(i?: number): AtomSelectStatementContext[] | AtomSelectStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AtomSelectStatementContext);
        }

        return this.getRuleContext(i, AtomSelectStatementContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_setOpSelectStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSetOpSelectStatement) {
             listener.enterSetOpSelectStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSetOpSelectStatement) {
             listener.exitSetOpSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetOpSelectStatement) {
            return visitor.visitSetOpSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementWithCTEContext extends antlr.ParserRuleContext {
    public _w?: WithClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectStatementWithCTE;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectStatementWithCTE) {
             listener.enterSelectStatementWithCTE(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectStatementWithCTE) {
             listener.exitSelectStatementWithCTE(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatementWithCTE) {
            return visitor.visitSelectStatementWithCTE(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertClauseContext extends antlr.ParserRuleContext {
    public _targetCols?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INSERT, 0)!;
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OVERWRITE, 0);
    }
    public destination(): DestinationContext | null {
        return this.getRuleContext(0, DestinationContext);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTO, 0);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_insertClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterInsertClause) {
             listener.enterInsertClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitInsertClause) {
             listener.exitInsertClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertClause) {
            return visitor.visitInsertClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DestinationContext extends antlr.ParserRuleContext {
    public _local?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DIRECTORY, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public tableRowFormat(): TableRowFormatContext | null {
        return this.getRuleContext(0, TableRowFormatContext);
    }
    public tableFileFormat(): TableFileFormatContext | null {
        return this.getRuleContext(0, TableFileFormatContext);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCAL, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_destination;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDestination) {
             listener.enterDestination(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDestination) {
             listener.exitDestination(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDestination) {
            return visitor.visitDestination(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public _offset?: Token | null;
    public _num?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIMIT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LIMIT, 0)!;
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OFFSET, 0);
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.Number);
    	} else {
    		return this.getToken(HiveSqlParser.Number, i);
    	}
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_limitClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLimitClause) {
             listener.enterLimitClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLimitClause) {
             listener.exitLimitClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAssignmentClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.EQUAL, 0)!;
    }
    public precedencePlusExpressionOrDefault(): PrecedencePlusExpressionOrDefaultContext {
        return this.getRuleContext(0, PrecedencePlusExpressionOrDefaultContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnAssignmentClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnAssignmentClause) {
             listener.enterColumnAssignmentClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnAssignmentClause) {
             listener.exitColumnAssignmentClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnAssignmentClause) {
            return visitor.visitColumnAssignmentClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedencePlusExpressionOrDefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFAULT, 0);
    }
    public precedencePlusExpression(): PrecedencePlusExpressionContext | null {
        return this.getRuleContext(0, PrecedencePlusExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedencePlusExpressionOrDefault;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedencePlusExpressionOrDefault) {
             listener.enterPrecedencePlusExpressionOrDefault(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedencePlusExpressionOrDefault) {
             listener.exitPrecedencePlusExpressionOrDefault(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedencePlusExpressionOrDefault) {
            return visitor.visitPrecedencePlusExpressionOrDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetColumnsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SET, 0)!;
    }
    public columnAssignmentClause(): ColumnAssignmentClauseContext[];
    public columnAssignmentClause(i: number): ColumnAssignmentClauseContext | null;
    public columnAssignmentClause(i?: number): ColumnAssignmentClauseContext[] | ColumnAssignmentClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnAssignmentClauseContext);
        }

        return this.getRuleContext(i, ColumnAssignmentClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_setColumnsClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSetColumnsClause) {
             listener.enterSetColumnsClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSetColumnsClause) {
             listener.exitSetColumnsClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetColumnsClause) {
            return visitor.visitSetColumnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlTransactionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_START, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTION, 0);
    }
    public transactionMode(): TransactionModeContext[];
    public transactionMode(i: number): TransactionModeContext | null;
    public transactionMode(i?: number): TransactionModeContext[] | TransactionModeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransactionModeContext);
        }

        return this.getRuleContext(i, TransactionModeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMIT, 0);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WORK, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLLBACK, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public KW_AUTOCOMMIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AUTOCOMMIT, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FALSE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_sqlTransactionStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSqlTransactionStatement) {
             listener.enterSqlTransactionStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSqlTransactionStatement) {
             listener.exitSqlTransactionStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSqlTransactionStatement) {
            return visitor.visitSqlTransactionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ISOLATION, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LEVEL, 0);
    }
    public KW_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SNAPSHOT, 0);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_READ, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ONLY, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WRITE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_transactionMode;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTransactionMode) {
             listener.enterTransactionMode(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTransactionMode) {
             listener.exitTransactionMode(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionMode) {
            return visitor.visitTransactionMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClausesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public whenMatchedAndClause(): WhenMatchedAndClauseContext[];
    public whenMatchedAndClause(i: number): WhenMatchedAndClauseContext | null;
    public whenMatchedAndClause(i?: number): WhenMatchedAndClauseContext[] | WhenMatchedAndClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenMatchedAndClauseContext);
        }

        return this.getRuleContext(i, WhenMatchedAndClauseContext);
    }
    public whenMatchedThenClause(): WhenMatchedThenClauseContext[];
    public whenMatchedThenClause(i: number): WhenMatchedThenClauseContext | null;
    public whenMatchedThenClause(i?: number): WhenMatchedThenClauseContext[] | WhenMatchedThenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenMatchedThenClauseContext);
        }

        return this.getRuleContext(i, WhenMatchedThenClauseContext);
    }
    public whenNotMatchedClause(): WhenNotMatchedClauseContext | null {
        return this.getRuleContext(0, WhenNotMatchedClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_whenClauses;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWhenClauses) {
             listener.enterWhenClauses(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWhenClauses) {
             listener.exitWhenClauses(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenClauses) {
            return visitor.visitWhenClauses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenNotMatchedClauseContext extends antlr.ParserRuleContext {
    public _targetCols?: ColumnParenthesesListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WHEN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_NOT, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_THEN, 0)!;
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INSERT, 0)!;
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_VALUES, 0)!;
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext {
        return this.getRuleContext(0, ExpressionsInParenthesisContext)!;
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AND, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public columnParenthesesList(): ColumnParenthesesListContext | null {
        return this.getRuleContext(0, ColumnParenthesesListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_whenNotMatchedClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWhenNotMatchedClause) {
             listener.enterWhenNotMatchedClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWhenNotMatchedClause) {
             listener.exitWhenNotMatchedClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenNotMatchedClause) {
            return visitor.visitWhenNotMatchedClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenMatchedAndClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MATCHED, 0)!;
    }
    public KW_AND(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AND, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_THEN, 0)!;
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UPDATE, 0);
    }
    public setColumnsClause(): SetColumnsClauseContext | null {
        return this.getRuleContext(0, SetColumnsClauseContext);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DELETE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_whenMatchedAndClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWhenMatchedAndClause) {
             listener.enterWhenMatchedAndClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWhenMatchedAndClause) {
             listener.exitWhenMatchedAndClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenMatchedAndClause) {
            return visitor.visitWhenMatchedAndClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenMatchedThenClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_THEN, 0)!;
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UPDATE, 0);
    }
    public setColumnsClause(): SetColumnsClauseContext | null {
        return this.getRuleContext(0, SetColumnsClauseContext);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DELETE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_whenMatchedThenClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWhenMatchedThenClause) {
             listener.enterWhenMatchedThenClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWhenMatchedThenClause) {
             listener.exitWhenMatchedThenClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenMatchedThenClause) {
            return visitor.visitWhenMatchedThenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompactionPoolContext extends antlr.ParserRuleContext {
    public _poolName?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_POOL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_POOL, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_compactionPool;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCompactionPool) {
             listener.enterCompactionPool(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCompactionPool) {
             listener.exitCompactionPool(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCompactionPool) {
            return visitor.visitCompactionPool(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompactionTypeContext extends antlr.ParserRuleContext {
    public _compactType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TYPE, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_compactionType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCompactionType) {
             listener.enterCompactionType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCompactionType) {
             listener.exitCompactionType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCompactionType) {
            return visitor.visitCompactionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompactionStatusContext extends antlr.ParserRuleContext {
    public _status?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STATUS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_STATUS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_compactionStatus;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCompactionStatus) {
             listener.enterCompactionStatus(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCompactionStatus) {
             listener.exitCompactionStatus(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCompactionStatus) {
            return visitor.visitCompactionStatus(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementContext extends antlr.ParserRuleContext {
    public _tableNameTree?: ViewNameContext;
    public _mvRewriteFlag?: RewriteEnabledContext;
    public _mvRewriteFlag2?: RewriteDisabledContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public alterTableStatementSuffix(): AlterTableStatementSuffixContext | null {
        return this.getRuleContext(0, AlterTableStatementSuffixContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public alterViewStatementSuffix(): AlterViewStatementSuffixContext | null {
        return this.getRuleContext(0, AlterViewStatementSuffixContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MATERIALIZED, 0);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public alterDatabaseStatementSuffix(): AlterDatabaseStatementSuffixContext | null {
        return this.getRuleContext(0, AlterDatabaseStatementSuffixContext);
    }
    public KW_DATACONNECTOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATACONNECTOR, 0);
    }
    public alterDataConnectorStatementSuffix(): AlterDataConnectorStatementSuffixContext | null {
        return this.getRuleContext(0, AlterDataConnectorStatementSuffixContext);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INDEX, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ON, 0);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public KW_REBUILD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REBUILD, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public rewriteEnabled(): RewriteEnabledContext | null {
        return this.getRuleContext(0, RewriteEnabledContext);
    }
    public rewriteDisabled(): RewriteDisabledContext | null {
        return this.getRuleContext(0, RewriteDisabledContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterStatement) {
             listener.enterAlterStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterStatement) {
             listener.exitAlterStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterStatement) {
            return visitor.visitAlterStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableStatementSuffixContext extends antlr.ParserRuleContext {
    public _exchangename?: TableNameContext;
    public _cName?: Id_Context;
    public _fk?: AlterForeignKeyWithNameContext;
    public _spec?: PartitionTransformSpecContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public tableNameCreate(): TableNameCreateContext | null {
        return this.getRuleContext(0, TableNameCreateContext);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RECOVER, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITIONS, 0);
    }
    public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext | null {
        return this.getRuleContext(0, AlterStatementSuffixDropPartitionsContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADD, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public locationPath(): LocationPathContext[];
    public locationPath(i: number): LocationPathContext | null;
    public locationPath(i?: number): LocationPathContext[] | LocationPathContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LocationPathContext);
        }

        return this.getRuleContext(i, LocationPathContext);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TOUCH, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ARCHIVE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TBLPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNSET, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public tableSkewed(): TableSkewedContext | null {
        return this.getRuleContext(0, TableSkewedContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SKEWED, 0);
    }
    public storedAsDirs(): StoredAsDirsContext | null {
        return this.getRuleContext(0, StoredAsDirsContext);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXCHANGE, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITION, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMN, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public columnNameType(): ColumnNameTypeContext | null {
        return this.getRuleContext(0, ColumnNameTypeContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DROP, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public alterConstraintWithName(): AlterConstraintWithNameContext | null {
        return this.getRuleContext(0, AlterConstraintWithNameContext);
    }
    public alterForeignKeyWithName(): AlterForeignKeyWithNameContext | null {
        return this.getRuleContext(0, AlterForeignKeyWithNameContext);
    }
    public alterTblPartitionStatementSuffix(): AlterTblPartitionStatementSuffixContext | null {
        return this.getRuleContext(0, AlterTblPartitionStatementSuffixContext);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OWNER, 0);
    }
    public principalName(): PrincipalNameContext | null {
        return this.getRuleContext(0, PrincipalNameContext);
    }
    public KW_SPEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SPEC, 0);
    }
    public partitionTransformSpec(): PartitionTransformSpecContext | null {
        return this.getRuleContext(0, PartitionTransformSpecContext);
    }
    public alterStatementSuffixExecute(): AlterStatementSuffixExecuteContext | null {
        return this.getRuleContext(0, AlterStatementSuffixExecuteContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterTableStatementSuffix;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterTableStatementSuffix) {
             listener.enterAlterTableStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterTableStatementSuffix) {
             listener.exitAlterTableStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableStatementSuffix) {
            return visitor.visitAlterTableStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTblPartitionStatementSuffixContext extends antlr.ParserRuleContext {
    public _newLoc?: Token | null;
    public _serdeName?: Token | null;
    public _num?: Token | null;
    public _compactType?: Token | null;
    public _colName?: ColumnNameContext;
    public _comment?: Token | null;
    public _oldName?: ColumnNameContext;
    public _newName?: ColumnNameCreateContext;
    public _first?: Token | null;
    public _afterCol?: Id_Context;
    public _add?: Token | null;
    public _replace?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FILEFORMAT, 0);
    }
    public fileFormat(): FileFormatContext | null {
        return this.getRuleContext(0, FileFormatContext);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCATION, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONCATENATE, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNSET, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTO, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BUCKETS, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SKEWED, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public skewedLocationMap(): SkewedLocationMapContext[];
    public skewedLocationMap(i: number): SkewedLocationMapContext | null;
    public skewedLocationMap(i?: number): SkewedLocationMapContext[] | SkewedLocationMapContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewedLocationMapContext);
        }

        return this.getRuleContext(i, SkewedLocationMapContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CLUSTERED, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SORTED, 0);
    }
    public tableBuckets(): TableBucketsContext | null {
        return this.getRuleContext(0, TableBucketsContext);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPACT, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AND, 0);
    }
    public KW_WAIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WAIT, 0);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public compactionPool(): CompactionPoolContext | null {
        return this.getRuleContext(0, CompactionPoolContext);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OVERWRITE, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UPDATE, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STATISTICS, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FOR, 0);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMN, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CHANGE, 0);
    }
    public columnType(): ColumnTypeContext | null {
        return this.getRuleContext(0, ColumnTypeContext);
    }
    public columnNameCreate(): ColumnNameCreateContext | null {
        return this.getRuleContext(0, ColumnNameCreateContext);
    }
    public alterColumnConstraint(): AlterColumnConstraintContext | null {
        return this.getRuleContext(0, AlterColumnConstraintContext);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AFTER, 0);
    }
    public restrictOrCascade(): RestrictOrCascadeContext | null {
        return this.getRuleContext(0, RestrictOrCascadeContext);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FIRST, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMNS, 0);
    }
    public columnNameTypeList(): ColumnNameTypeListContext | null {
        return this.getRuleContext(0, ColumnNameTypeListContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADD, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLACE, 0);
    }
    public enableSpecification(): EnableSpecificationContext | null {
        return this.getRuleContext(0, EnableSpecificationContext);
    }
    public KW_OFFLINE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OFFLINE, 0);
    }
    public KW_NO_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NO_DROP, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterTblPartitionStatementSuffix;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterTblPartitionStatementSuffix) {
             listener.enterAlterTblPartitionStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterTblPartitionStatementSuffix) {
             listener.exitAlterTblPartitionStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTblPartitionStatementSuffix) {
            return visitor.visitAlterTblPartitionStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterViewStatementSuffixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TBLPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNSET, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public tableNameCreate(): TableNameCreateContext | null {
        return this.getRuleContext(0, TableNameCreateContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADD, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public locationPath(): LocationPathContext[];
    public locationPath(i: number): LocationPathContext | null;
    public locationPath(i?: number): LocationPathContext[] | LocationPathContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LocationPathContext);
        }

        return this.getRuleContext(i, LocationPathContext);
    }
    public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext | null {
        return this.getRuleContext(0, AlterStatementSuffixDropPartitionsContext);
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext | null {
        return this.getRuleContext(0, SelectStatementWithCTEContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterViewStatementSuffix;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterViewStatementSuffix) {
             listener.enterAlterViewStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterViewStatementSuffix) {
             listener.exitAlterViewStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterViewStatementSuffix) {
            return visitor.visitAlterViewStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseStatementSuffixContext extends antlr.ParserRuleContext {
    public _name?: DbSchemaNameContext;
    public _dbName?: DbSchemaNameContext;
    public _newLocation?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SET, 0)!;
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DBPROPERTIES, 0);
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OWNER, 0);
    }
    public principalAlterName(): PrincipalAlterNameContext | null {
        return this.getRuleContext(0, PrincipalAlterNameContext);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCATION, 0);
    }
    public KW_MANAGEDLOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGEDLOCATION, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterDatabaseStatementSuffix;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterDatabaseStatementSuffix) {
             listener.enterAlterDatabaseStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterDatabaseStatementSuffix) {
             listener.exitAlterDatabaseStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabaseStatementSuffix) {
            return visitor.visitAlterDatabaseStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDataConnectorStatementSuffixContext extends antlr.ParserRuleContext {
    public _name?: DbSchemaNameContext;
    public _dcName?: DbSchemaNameContext;
    public _newUri?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SET, 0)!;
    }
    public KW_DCPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DCPROPERTIES, 0);
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OWNER, 0);
    }
    public principalAlterName(): PrincipalAlterNameContext | null {
        return this.getRuleContext(0, PrincipalAlterNameContext);
    }
    public KW_URL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_URL, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterDataConnectorStatementSuffix;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterDataConnectorStatementSuffix) {
             listener.enterAlterDataConnectorStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterDataConnectorStatementSuffix) {
             listener.exitAlterDataConnectorStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterDataConnectorStatementSuffix) {
            return visitor.visitAlterDataConnectorStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LocationPathContext extends antlr.ParserRuleContext {
    public _locn?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LOCATION, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_locationPath;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLocationPath) {
             listener.enterLocationPath(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLocationPath) {
             listener.exitLocationPath(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLocationPath) {
            return visitor.visitLocationPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixDropPartitionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_PARTITION(): antlr.TerminalNode[];
    public KW_PARTITION(i: number): antlr.TerminalNode | null;
    public KW_PARTITION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_PARTITION);
    	} else {
    		return this.getToken(HiveSqlParser.KW_PARTITION, i);
    	}
    }
    public partitionSelectorSpec(): PartitionSelectorSpecContext[];
    public partitionSelectorSpec(i: number): PartitionSelectorSpecContext | null;
    public partitionSelectorSpec(i?: number): PartitionSelectorSpecContext[] | PartitionSelectorSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSelectorSpecContext);
        }

        return this.getRuleContext(i, PartitionSelectorSpecContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IGNORE, 0);
    }
    public KW_PROTECTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PROTECTION, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PURGE, 0);
    }
    public replicationClause(): ReplicationClauseContext | null {
        return this.getRuleContext(0, ReplicationClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterStatementSuffixDropPartitions;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterStatementSuffixDropPartitions) {
             listener.enterAlterStatementSuffixDropPartitions(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterStatementSuffixDropPartitions) {
             listener.exitAlterStatementSuffixDropPartitions(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixDropPartitions) {
            return visitor.visitAlterStatementSuffixDropPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedLocationMapContext extends antlr.ParserRuleContext {
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.EQUAL, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public skewedColumnValuePair(): SkewedColumnValuePairContext | null {
        return this.getRuleContext(0, SkewedColumnValuePairContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_skewedLocationMap;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSkewedLocationMap) {
             listener.enterSkewedLocationMap(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSkewedLocationMap) {
             listener.exitSkewedLocationMap(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSkewedLocationMap) {
            return visitor.visitSkewedLocationMap(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixExecuteContext extends antlr.ParserRuleContext {
    public _rollbackParam?: Token | null;
    public _expireParam?: Token | null;
    public _snapshotParam?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXECUTE, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLLBACK, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public KW_EXPIRE_SNAPSHOTS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXPIRE_SNAPSHOTS, 0);
    }
    public KW_SET_CURRENT_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET_CURRENT_SNAPSHOT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterStatementSuffixExecute;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterStatementSuffixExecute) {
             listener.enterAlterStatementSuffixExecute(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterStatementSuffixExecute) {
             listener.exitAlterStatementSuffixExecute(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixExecute) {
            return visitor.visitAlterStatementSuffixExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: Token | null;
    public _outFmt?: Token | null;
    public _serdeCls?: Token | null;
    public _inDriver?: Token | null;
    public _outDriver?: Token | null;
    public _genericSpec?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDE, 0);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public KW_INPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPUTDRIVER, 0);
    }
    public KW_OUTPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTPUTDRIVER, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_fileFormat;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFileFormat) {
             listener.enterFileFormat(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFileFormat) {
             listener.exitFileFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFileFormat) {
            return visitor.visitFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeTableOrFileContext extends antlr.ParserRuleContext {
    public _format?: Id_Context;
    public _uri?: Token | null;
    public _likeName?: TableNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LIKE, 0)!;
    }
    public KW_FILE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FILE, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_likeTableOrFile;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLikeTableOrFile) {
             listener.enterLikeTableOrFile(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLikeTableOrFile) {
             listener.exitLikeTableOrFile(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLikeTableOrFile) {
            return visitor.visitLikeTableOrFile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableStatementContext extends antlr.ParserRuleContext {
    public _temp?: Token | null;
    public _trans?: Token | null;
    public _ext?: Token | null;
    public _name?: TableNameCreateContext;
    public _mgd?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public likeTableOrFile(): LikeTableOrFileContext | null {
        return this.getRuleContext(0, LikeTableOrFileContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TRANSACTIONAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTIONAL, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXTERNAL, 0);
    }
    public createTablePartitionSpec(): CreateTablePartitionSpecContext | null {
        return this.getRuleContext(0, CreateTablePartitionSpecContext);
    }
    public tableRowFormat(): TableRowFormatContext | null {
        return this.getRuleContext(0, TableRowFormatContext);
    }
    public tableFileFormat(): TableFileFormatContext | null {
        return this.getRuleContext(0, TableFileFormatContext);
    }
    public locationPath(): LocationPathContext | null {
        return this.getRuleContext(0, LocationPathContext);
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | null {
        return this.getRuleContext(0, TablePropertiesPrefixedContext);
    }
    public tableLifecycle(): TableLifecycleContext | null {
        return this.getRuleContext(0, TableLifecycleContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public columnNameTypeOrConstraintList(): ColumnNameTypeOrConstraintListContext | null {
        return this.getRuleContext(0, ColumnNameTypeOrConstraintListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public tableComment(): TableCommentContext | null {
        return this.getRuleContext(0, TableCommentContext);
    }
    public tableBuckets(): TableBucketsContext | null {
        return this.getRuleContext(0, TableBucketsContext);
    }
    public tableSkewed(): TableSkewedContext | null {
        return this.getRuleContext(0, TableSkewedContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext | null {
        return this.getRuleContext(0, SelectStatementWithCTEContext);
    }
    public KW_MANAGED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createTableStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateTableStatement) {
             listener.enterCreateTableStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateTableStatement) {
             listener.exitCreateTableStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableStatement) {
            return visitor.visitCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDataConnectorStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public _dcType?: Token | null;
    public _url?: Token | null;
    public _comment?: Token | null;
    public _dcprops?: KeyValuePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_DATACONNECTOR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DATACONNECTOR, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TYPE, 0);
    }
    public KW_URL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_URL, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_DCPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DCPROPERTIES, 0);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createDataConnectorStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateDataConnectorStatement) {
             listener.enterCreateDataConnectorStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateDataConnectorStatement) {
             listener.exitCreateDataConnectorStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDataConnectorStatement) {
            return visitor.visitCreateDataConnectorStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropDataConnectorStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_DATACONNECTOR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DATACONNECTOR, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropDataConnectorStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropDataConnectorStatement) {
             listener.enterDropDataConnectorStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropDataConnectorStatement) {
             listener.exitDropDataConnectorStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropDataConnectorStatement) {
            return visitor.visitDropDataConnectorStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAllColumnsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STAR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.STAR, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableAllColumns;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableAllColumns) {
             listener.enterTableAllColumns(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableAllColumns) {
             listener.exitTableAllColumns(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableAllColumns) {
            return visitor.visitTableAllColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_expressionList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExpressionList) {
             listener.enterExpressionList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExpressionList) {
             listener.exitExpressionList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionList) {
            return visitor.visitExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_aliasList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAliasList) {
             listener.enterAliasList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAliasList) {
             listener.exitAliasList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAliasList) {
            return visitor.visitAliasList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FROM, 0)!;
    }
    public fromSource(): FromSourceContext {
        return this.getRuleContext(0, FromSourceContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_fromClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFromClause) {
             listener.enterFromClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFromClause) {
             listener.exitFromClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNIQUEJOIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNIQUEJOIN, 0);
    }
    public uniqueJoinSource(): UniqueJoinSourceContext[];
    public uniqueJoinSource(i: number): UniqueJoinSourceContext | null;
    public uniqueJoinSource(i?: number): UniqueJoinSourceContext[] | UniqueJoinSourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UniqueJoinSourceContext);
        }

        return this.getRuleContext(i, UniqueJoinSourceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public joinSource(): JoinSourceContext | null {
        return this.getRuleContext(0, JoinSourceContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_fromSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFromSource) {
             listener.enterFromSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFromSource) {
             listener.exitFromSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromSource) {
            return visitor.visitFromSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomjoinSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableSource(): TableSourceContext | null {
        return this.getRuleContext(0, TableSourceContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public virtualTableSource(): VirtualTableSourceContext | null {
        return this.getRuleContext(0, VirtualTableSourceContext);
    }
    public subQuerySource(): SubQuerySourceContext | null {
        return this.getRuleContext(0, SubQuerySourceContext);
    }
    public partitionedTableFunction(): PartitionedTableFunctionContext | null {
        return this.getRuleContext(0, PartitionedTableFunctionContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public joinSource(): JoinSourceContext | null {
        return this.getRuleContext(0, JoinSourceContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_atomjoinSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAtomjoinSource) {
             listener.enterAtomjoinSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAtomjoinSource) {
             listener.exitAtomjoinSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtomjoinSource) {
            return visitor.visitAtomjoinSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public atomjoinSource(): AtomjoinSourceContext {
        return this.getRuleContext(0, AtomjoinSourceContext)!;
    }
    public joinToken(): JoinTokenContext[];
    public joinToken(i: number): JoinTokenContext | null;
    public joinToken(i?: number): JoinTokenContext[] | JoinTokenContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinTokenContext);
        }

        return this.getRuleContext(i, JoinTokenContext);
    }
    public joinSourcePart(): JoinSourcePartContext[];
    public joinSourcePart(i: number): JoinSourcePartContext | null;
    public joinSourcePart(i?: number): JoinSourcePartContext[] | JoinSourcePartContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinSourcePartContext);
        }

        return this.getRuleContext(i, JoinSourcePartContext);
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_ON);
    	} else {
    		return this.getToken(HiveSqlParser.KW_ON, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_USING(): antlr.TerminalNode[];
    public KW_USING(i: number): antlr.TerminalNode | null;
    public KW_USING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_USING);
    	} else {
    		return this.getToken(HiveSqlParser.KW_USING, i);
    	}
    }
    public columnParenthesesList(): ColumnParenthesesListContext[];
    public columnParenthesesList(i: number): ColumnParenthesesListContext | null;
    public columnParenthesesList(i?: number): ColumnParenthesesListContext[] | ColumnParenthesesListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnParenthesesListContext);
        }

        return this.getRuleContext(i, ColumnParenthesesListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_joinSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterJoinSource) {
             listener.enterJoinSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitJoinSource) {
             listener.exitJoinSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinSource) {
            return visitor.visitJoinSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinSourcePartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableSource(): TableSourceContext | null {
        return this.getRuleContext(0, TableSourceContext);
    }
    public virtualTableSource(): VirtualTableSourceContext | null {
        return this.getRuleContext(0, VirtualTableSourceContext);
    }
    public subQuerySource(): SubQuerySourceContext | null {
        return this.getRuleContext(0, SubQuerySourceContext);
    }
    public partitionedTableFunction(): PartitionedTableFunctionContext | null {
        return this.getRuleContext(0, PartitionedTableFunctionContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_joinSourcePart;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterJoinSourcePart) {
             listener.enterJoinSourcePart(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitJoinSourcePart) {
             listener.exitJoinSourcePart(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinSourcePart) {
            return visitor.visitJoinSourcePart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UniqueJoinSourceContext extends antlr.ParserRuleContext {
    public _tabname?: TableOrViewContext;
    public _ts?: TableSampleContext;
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public expressionList(): ExpressionListContext {
        return this.getRuleContext(0, ExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public tableOrView(): TableOrViewContext {
        return this.getRuleContext(0, TableOrViewContext)!;
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PRESERVE, 0);
    }
    public tableSample(): TableSampleContext | null {
        return this.getRuleContext(0, TableSampleContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_uniqueJoinSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterUniqueJoinSource) {
             listener.enterUniqueJoinSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitUniqueJoinSource) {
             listener.exitUniqueJoinSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUniqueJoinSource) {
            return visitor.visitUniqueJoinSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTokenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.COMMA, 0);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_JOIN, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INNER, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CROSS, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LEFT, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RIGHT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FULL, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTER, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SEMI, 0);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ANTI, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_joinToken;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterJoinToken) {
             listener.enterJoinToken(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitJoinToken) {
             listener.exitJoinToken(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinToken) {
            return visitor.visitJoinToken(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LateralViewContext extends antlr.ParserRuleContext {
    public _alias?: TableAliasContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LATERAL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LATERAL, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VIEW, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTER, 0);
    }
    public function_(): Function_Context | null {
        return this.getRuleContext(0, Function_Context);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public valuesClause(): ValuesClauseContext | null {
        return this.getRuleContext(0, ValuesClauseContext);
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_lateralView;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLateralView) {
             listener.enterLateralView(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLateralView) {
             listener.exitLateralView(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLateralView) {
            return visitor.visitLateralView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableAlias;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableAlias) {
             listener.enterTableAlias(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableAlias) {
             listener.exitTableAlias(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableAlias) {
            return visitor.visitTableAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSampleContext extends antlr.ParserRuleContext {
    public _numerator?: Token | null;
    public _denominator?: Token | null;
    public _expression?: ExpressionContext;
    public _expr: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLESAMPLE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BUCKET, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OF, 0);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.Number);
    	} else {
    		return this.getToken(HiveSqlParser.Number, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ON, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public ByteLengthLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.ByteLengthLiteral, 0);
    }
    public KW_PERCENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PERCENT, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROWS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableSample;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableSample) {
             listener.enterTableSample(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableSample) {
             listener.exitTableSample(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSample) {
            return visitor.visitTableSample(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSourceContext extends antlr.ParserRuleContext {
    public _tabname?: TableOrViewContext;
    public _props?: TablePropertiesContext;
    public _ts?: TableSampleContext;
    public _asOf?: AsOfClauseContext;
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableOrView(): TableOrViewContext {
        return this.getRuleContext(0, TableOrViewContext)!;
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public tableSample(): TableSampleContext | null {
        return this.getRuleContext(0, TableSampleContext);
    }
    public asOfClause(): AsOfClauseContext | null {
        return this.getRuleContext(0, AsOfClauseContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableSource) {
             listener.enterTableSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableSource) {
             listener.exitTableSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSource) {
            return visitor.visitTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AsOfClauseContext extends antlr.ParserRuleContext {
    public _asOfTime?: ExpressionContext;
    public _asOfVersion?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode[];
    public KW_FOR(i: number): antlr.TerminalNode | null;
    public KW_FOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_FOR);
    	} else {
    		return this.getToken(HiveSqlParser.KW_FOR, i);
    	}
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OF, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_asOfClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAsOfClause) {
             listener.enterAsOfClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAsOfClause) {
             listener.exitAsOfClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAsOfClause) {
            return visitor.visitAsOfClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbSchemaNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dbSchemaName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDbSchemaName) {
             listener.enterDbSchemaName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDbSchemaName) {
             listener.exitDbSchemaName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDbSchemaName) {
            return visitor.visitDbSchemaName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbSchemaNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dbSchemaNameCreate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDbSchemaNameCreate) {
             listener.enterDbSchemaNameCreate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDbSchemaNameCreate) {
             listener.exitDbSchemaNameCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDbSchemaNameCreate) {
            return visitor.visitDbSchemaNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableOrViewContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableOrView;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableOrView) {
             listener.enterTableOrView(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableOrView) {
             listener.exitTableOrView(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOrView) {
            return visitor.visitTableOrView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameContext extends antlr.ParserRuleContext {
    public _db?: Id_Context;
    public _tab?: Id_Context;
    public _meta?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameCreateContext extends antlr.ParserRuleContext {
    public _db?: Id_Context;
    public _tab?: Id_Context;
    public _meta?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableNameCreate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableNameCreate) {
             listener.enterTableNameCreate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableNameCreate) {
             listener.exitTableNameCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableNameCreate) {
            return visitor.visitTableNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameContext extends antlr.ParserRuleContext {
    public _db?: Id_Context;
    public _view?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewName) {
             listener.enterViewName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewName) {
             listener.exitViewName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewName) {
            return visitor.visitViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameCreateContext extends antlr.ParserRuleContext {
    public _db?: Id_Context;
    public _view?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewNameCreate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewNameCreate) {
             listener.enterViewNameCreate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewNameCreate) {
             listener.exitViewNameCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewNameCreate) {
            return visitor.visitViewNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubQuerySourceContext extends antlr.ParserRuleContext {
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public queryStatementExpression(): QueryStatementExpressionContext {
        return this.getRuleContext(0, QueryStatementExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_subQuerySource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSubQuerySource) {
             listener.enterSubQuerySource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSubQuerySource) {
             listener.exitSubQuerySource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubQuerySource) {
            return visitor.visitSubQuerySource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitioningSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITION, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BY, 0);
    }
    public expressions(): ExpressionsContext | null {
        return this.getRuleContext(0, ExpressionsContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public distributeByClause(): DistributeByClauseContext | null {
        return this.getRuleContext(0, DistributeByClauseContext);
    }
    public sortByClause(): SortByClauseContext | null {
        return this.getRuleContext(0, SortByClauseContext);
    }
    public clusterByClause(): ClusterByClauseContext | null {
        return this.getRuleContext(0, ClusterByClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitioningSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitioningSpec) {
             listener.enterPartitioningSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitioningSpec) {
             listener.exitPartitioningSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitioningSpec) {
            return visitor.visitPartitioningSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionTableFunctionSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subQuerySource(): SubQuerySourceContext | null {
        return this.getRuleContext(0, SubQuerySourceContext);
    }
    public tableSource(): TableSourceContext | null {
        return this.getRuleContext(0, TableSourceContext);
    }
    public partitionedTableFunction(): PartitionedTableFunctionContext | null {
        return this.getRuleContext(0, PartitionedTableFunctionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionTableFunctionSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionTableFunctionSource) {
             listener.enterPartitionTableFunctionSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionTableFunctionSource) {
             listener.exitPartitionTableFunctionSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionTableFunctionSource) {
            return visitor.visitPartitionTableFunctionSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionedTableFunctionContext extends antlr.ParserRuleContext {
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public atomPartitionedTableFunction(): AtomPartitionedTableFunctionContext {
        return this.getRuleContext(0, AtomPartitionedTableFunctionContext)!;
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionedTableFunction;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionedTableFunction) {
             listener.enterPartitionedTableFunction(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionedTableFunction) {
             listener.exitPartitionedTableFunction(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionedTableFunction) {
            return visitor.visitPartitionedTableFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomPartitionedTableFunctionContext extends antlr.ParserRuleContext {
    public _n?: Id_Context;
    public _ptfsrc?: PartitionTableFunctionSourceContext;
    public _spec?: PartitioningSpecContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public partitionTableFunctionSource(): PartitionTableFunctionSourceContext {
        return this.getRuleContext(0, PartitionTableFunctionSourceContext)!;
    }
    public Identifier(): antlr.TerminalNode[];
    public Identifier(i: number): antlr.TerminalNode | null;
    public Identifier(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.Identifier);
    	} else {
    		return this.getToken(HiveSqlParser.Identifier, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public partitioningSpec(): PartitioningSpecContext | null {
        return this.getRuleContext(0, PartitioningSpecContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_atomPartitionedTableFunction;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAtomPartitionedTableFunction) {
             listener.enterAtomPartitionedTableFunction(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAtomPartitionedTableFunction) {
             listener.exitAtomPartitionedTableFunction(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtomPartitionedTableFunction) {
            return visitor.visitAtomPartitionedTableFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WHERE, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_whereClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_VALUES, 0)!;
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext[];
    public expressionsInParenthesis(i: number): ExpressionsInParenthesisContext | null;
    public expressionsInParenthesis(i?: number): ExpressionsInParenthesisContext[] | ExpressionsInParenthesisContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionsInParenthesisContext);
        }

        return this.getRuleContext(i, ExpressionsInParenthesisContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public firstExpressionsWithAlias(): FirstExpressionsWithAliasContext | null {
        return this.getRuleContext(0, FirstExpressionsWithAliasContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_valuesClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterValuesClause) {
             listener.enterValuesClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitValuesClause) {
             listener.exitValuesClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValuesClause) {
            return visitor.visitValuesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomValuesClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public valuesClause(): ValuesClauseContext {
        return this.getRuleContext(0, ValuesClauseContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_atomValuesClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAtomValuesClause) {
             listener.enterAtomValuesClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAtomValuesClause) {
             listener.exitAtomValuesClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtomValuesClause) {
            return visitor.visitAtomValuesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VirtualTableSourceContext extends antlr.ParserRuleContext {
    public _alias?: TableAliasContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public atomValuesClause(): AtomValuesClauseContext {
        return this.getRuleContext(0, AtomValuesClauseContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_virtualTableSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterVirtualTableSource) {
             listener.enterVirtualTableSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitVirtualTableSource) {
             listener.exitVirtualTableSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVirtualTableSource) {
            return visitor.visitVirtualTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SELECT, 0);
    }
    public selectList(): SelectListContext | null {
        return this.getRuleContext(0, SelectListContext);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSFORM, 0);
    }
    public selectTrfmClause(): SelectTrfmClauseContext | null {
        return this.getRuleContext(0, SelectTrfmClauseContext);
    }
    public QUERY_HINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.QUERY_HINT, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTINCT, 0);
    }
    public trfmClause(): TrfmClauseContext | null {
        return this.getRuleContext(0, TrfmClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectClause) {
             listener.enterSelectClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectClause) {
             listener.exitSelectClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectClause) {
            return visitor.visitSelectClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectTrfmClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public selectExpressionList(): SelectExpressionListContext {
        return this.getRuleContext(0, SelectExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public recordWriter(): RecordWriterContext {
        return this.getRuleContext(0, RecordWriterContext)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_USING, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public recordReader(): RecordReaderContext {
        return this.getRuleContext(0, RecordReaderContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public aliasList(): AliasListContext | null {
        return this.getRuleContext(0, AliasListContext);
    }
    public columnNameTypeList(): ColumnNameTypeListContext | null {
        return this.getRuleContext(0, ColumnNameTypeListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectTrfmClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectTrfmClause) {
             listener.enterSelectTrfmClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectTrfmClause) {
             listener.exitSelectTrfmClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectTrfmClause) {
            return visitor.visitSelectTrfmClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectItem(): SelectItemContext[];
    public selectItem(i: number): SelectItemContext | null;
    public selectItem(i?: number): SelectItemContext[] | SelectItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectItemContext);
        }

        return this.getRuleContext(i, SelectItemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectList) {
             listener.enterSelectList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectList) {
             listener.exitSelectList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectList) {
            return visitor.visitSelectList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemContext extends antlr.ParserRuleContext {
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableAllColumns(): TableAllColumnsContext | null {
        return this.getRuleContext(0, TableAllColumnsContext);
    }
    public selectLiteralColumnName(): SelectLiteralColumnNameContext | null {
        return this.getRuleContext(0, SelectLiteralColumnNameContext);
    }
    public selectExpressionColumnName(): SelectExpressionColumnNameContext | null {
        return this.getRuleContext(0, SelectExpressionColumnNameContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectItem;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectItem) {
             listener.enterSelectItem(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectItem) {
             listener.exitSelectItem(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectItem) {
            return visitor.visitSelectItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectLiteralColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectLiteralColumnName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectLiteralColumnName) {
             listener.enterSelectLiteralColumnName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectLiteralColumnName) {
             listener.exitSelectLiteralColumnName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectLiteralColumnName) {
            return visitor.visitSelectLiteralColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectExpressionColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectExpressionColumnName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectExpressionColumnName) {
             listener.enterSelectExpressionColumnName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectExpressionColumnName) {
             listener.exitSelectExpressionColumnName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectExpressionColumnName) {
            return visitor.visitSelectExpressionColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrfmClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectExpressionList(): SelectExpressionListContext {
        return this.getRuleContext(0, SelectExpressionListContext)!;
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public recordWriter(): RecordWriterContext {
        return this.getRuleContext(0, RecordWriterContext)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_USING, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public recordReader(): RecordReaderContext {
        return this.getRuleContext(0, RecordReaderContext)!;
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAP, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REDUCE, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public aliasList(): AliasListContext | null {
        return this.getRuleContext(0, AliasListContext);
    }
    public columnNameTypeList(): ColumnNameTypeListContext | null {
        return this.getRuleContext(0, ColumnNameTypeListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_trfmClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTrfmClause) {
             listener.enterTrfmClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTrfmClause) {
             listener.exitTrfmClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTrfmClause) {
            return visitor.visitTrfmClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableAllColumns(): TableAllColumnsContext | null {
        return this.getRuleContext(0, TableAllColumnsContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectExpression) {
             listener.enterSelectExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectExpression) {
             listener.exitSelectExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectExpression) {
            return visitor.visitSelectExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectExpression(): SelectExpressionContext[];
    public selectExpression(i: number): SelectExpressionContext | null;
    public selectExpression(i?: number): SelectExpressionContext[] | SelectExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectExpressionContext);
        }

        return this.getRuleContext(i, SelectExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectExpressionList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectExpressionList) {
             listener.enterSelectExpressionList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectExpressionList) {
             listener.exitSelectExpressionList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectExpressionList) {
            return visitor.visitSelectExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WINDOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WINDOW, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode[];
    public KW_AS(i: number): antlr.TerminalNode | null;
    public KW_AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_AS);
    	} else {
    		return this.getToken(HiveSqlParser.KW_AS, i);
    	}
    }
    public window_specification(): Window_specificationContext[];
    public window_specification(i: number): Window_specificationContext | null;
    public window_specification(i?: number): Window_specificationContext[] | Window_specificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_specificationContext);
        }

        return this.getRuleContext(i, Window_specificationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_window_clause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWindow_clause) {
             listener.enterWindow_clause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWindow_clause) {
             listener.exitWindow_clause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_clause) {
            return visitor.visitWindow_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public partitioningSpec(): PartitioningSpecContext | null {
        return this.getRuleContext(0, PartitioningSpecContext);
    }
    public window_frame(): Window_frameContext | null {
        return this.getRuleContext(0, Window_frameContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_window_specification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWindow_specification) {
             listener.enterWindow_specification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWindow_specification) {
             listener.exitWindow_specification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_specification) {
            return visitor.visitWindow_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROWS, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RANGE, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BETWEEN, 0);
    }
    public window_frame_boundary(): Window_frame_boundaryContext[];
    public window_frame_boundary(i: number): Window_frame_boundaryContext | null;
    public window_frame_boundary(i?: number): Window_frame_boundaryContext[] | Window_frame_boundaryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_frame_boundaryContext);
        }

        return this.getRuleContext(i, Window_frame_boundaryContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AND, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PRECEDING, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROW, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_window_frame;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWindow_frame) {
             listener.enterWindow_frame(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWindow_frame) {
             listener.exitWindow_frame(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame) {
            return visitor.visitWindow_frame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_boundaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNBOUNDED, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PRECEDING, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FOLLOWING, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROW, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_window_frame_boundary;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWindow_frame_boundary) {
             listener.enterWindow_frame_boundary(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWindow_frame_boundary) {
             listener.exitWindow_frame_boundary(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_boundary) {
            return visitor.visitWindow_frame_boundary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GROUP, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public rollupStandard(): RollupStandardContext | null {
        return this.getRuleContext(0, RollupStandardContext);
    }
    public rollupOldSyntax(): RollupOldSyntaxContext | null {
        return this.getRuleContext(0, RollupOldSyntaxContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_groupByClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterGroupByClause) {
             listener.enterGroupByClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitGroupByClause) {
             listener.exitGroupByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RollupStandardContext extends antlr.ParserRuleContext {
    public _rollup?: Token | null;
    public _cube?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CUBE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rollupStandard;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRollupStandard) {
             listener.enterRollupStandard(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRollupStandard) {
             listener.exitRollupStandard(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRollupStandard) {
            return visitor.visitRollupStandard(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RollupOldSyntaxContext extends antlr.ParserRuleContext {
    public _expr?: ExpressionsNotInParenthesisContext;
    public _rollup?: Token | null;
    public _cube?: Token | null;
    public _sets?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
        return this.getRuleContext(0, ExpressionsNotInParenthesisContext)!;
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CUBE, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SETS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public groupingSetExpression(): GroupingSetExpressionContext[];
    public groupingSetExpression(i: number): GroupingSetExpressionContext | null;
    public groupingSetExpression(i?: number): GroupingSetExpressionContext[] | GroupingSetExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetExpressionContext);
        }

        return this.getRuleContext(i, GroupingSetExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUPING, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rollupOldSyntax;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRollupOldSyntax) {
             listener.enterRollupOldSyntax(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRollupOldSyntax) {
             listener.exitRollupOldSyntax(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRollupOldSyntax) {
            return visitor.visitRollupOldSyntax(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_groupingSetExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterGroupingSetExpression) {
             listener.enterGroupingSetExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitGroupingSetExpression) {
             listener.exitGroupingSetExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingSetExpression) {
            return visitor.visitGroupingSetExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HAVING(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_HAVING, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_havingClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_QUALIFY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_QUALIFY, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_qualifyClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterQualifyClause) {
             listener.enterQualifyClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitQualifyClause) {
             listener.exitQualifyClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifyClause) {
            return visitor.visitQualifyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionOrDefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFAULT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_expressionOrDefault;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExpressionOrDefault) {
             listener.enterExpressionOrDefault(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExpressionOrDefault) {
             listener.exitExpressionOrDefault(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionOrDefault) {
            return visitor.visitExpressionOrDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FirstExpressionsWithAliasContext extends antlr.ParserRuleContext {
    public _first?: ExpressionContext;
    public _colAlias?: Id_Context;
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_AS(): antlr.TerminalNode[];
    public KW_AS(i: number): antlr.TerminalNode | null;
    public KW_AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_AS);
    	} else {
    		return this.getToken(HiveSqlParser.KW_AS, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_firstExpressionsWithAlias;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFirstExpressionsWithAlias) {
             listener.enterFirstExpressionsWithAlias(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFirstExpressionsWithAlias) {
             listener.exitFirstExpressionsWithAlias(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFirstExpressionsWithAlias) {
            return visitor.visitFirstExpressionsWithAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsInParenthesisContext);
    }
    public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsNotInParenthesisContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_expressions;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExpressions) {
             listener.enterExpressions(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExpressions) {
             listener.exitExpressions(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressions) {
            return visitor.visitExpressions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionsInParenthesisContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
        return this.getRuleContext(0, ExpressionsNotInParenthesisContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_expressionsInParenthesis;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExpressionsInParenthesis) {
             listener.enterExpressionsInParenthesis(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExpressionsInParenthesis) {
             listener.exitExpressionsInParenthesis(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionsInParenthesis) {
            return visitor.visitExpressionsInParenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionsNotInParenthesisContext extends antlr.ParserRuleContext {
    public _first?: ExpressionOrDefaultContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionOrDefault(): ExpressionOrDefaultContext[];
    public expressionOrDefault(i: number): ExpressionOrDefaultContext | null;
    public expressionOrDefault(i?: number): ExpressionOrDefaultContext[] | ExpressionOrDefaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionOrDefaultContext);
        }

        return this.getRuleContext(i, ExpressionOrDefaultContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_expressionsNotInParenthesis;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExpressionsNotInParenthesis) {
             listener.enterExpressionsNotInParenthesis(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExpressionsNotInParenthesis) {
             listener.exitExpressionsNotInParenthesis(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionsNotInParenthesis) {
            return visitor.visitExpressionsNotInParenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ORDER(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ORDER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public columnRefOrder(): ColumnRefOrderContext[];
    public columnRefOrder(i: number): ColumnRefOrderContext | null;
    public columnRefOrder(i?: number): ColumnRefOrderContext[] | ColumnRefOrderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnRefOrderContext);
        }

        return this.getRuleContext(i, ColumnRefOrderContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_orderByClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterOrderByClause) {
             listener.enterOrderByClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitOrderByClause) {
             listener.exitOrderByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderByClause) {
            return visitor.visitOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusterByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTER(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CLUSTER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public expressions(): ExpressionsContext {
        return this.getRuleContext(0, ExpressionsContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_clusterByClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterClusterByClause) {
             listener.enterClusterByClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitClusterByClause) {
             listener.exitClusterByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitClusterByClause) {
            return visitor.visitClusterByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DistributeByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DISTRIBUTE, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public expressions(): ExpressionsContext {
        return this.getRuleContext(0, ExpressionsContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_distributeByClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDistributeByClause) {
             listener.enterDistributeByClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDistributeByClause) {
             listener.exitDistributeByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDistributeByClause) {
            return visitor.visitDistributeByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SORT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SORT, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public columnRefOrder(): ColumnRefOrderContext[];
    public columnRefOrder(i: number): ColumnRefOrderContext | null;
    public columnRefOrder(i?: number): ColumnRefOrderContext[] | ColumnRefOrderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnRefOrderContext);
        }

        return this.getRuleContext(i, ColumnRefOrderContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_sortByClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSortByClause) {
             listener.enterSortByClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSortByClause) {
             listener.exitSortByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSortByClause) {
            return visitor.visitSortByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_Context extends antlr.ParserRuleContext {
    public _leading?: Token | null;
    public _trailing?: Token | null;
    public _trim_characters?: SelectExpressionContext;
    public _str?: SelectExpressionContext;
    public _star?: Token | null;
    public _dist?: Token | null;
    public _within?: Token | null;
    public _ordBy?: OrderByClauseContext;
    public _nt?: Null_treatmentContext;
    public _ws?: Window_specificationContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRIM, 0);
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FROM, 0);
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public selectExpression(): SelectExpressionContext[];
    public selectExpression(i: number): SelectExpressionContext | null;
    public selectExpression(i?: number): SelectExpressionContext[] | SelectExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectExpressionContext);
        }

        return this.getRuleContext(i, SelectExpressionContext);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BOTH, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LEADING, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRAILING, 0);
    }
    public functionNameForInvoke(): FunctionNameForInvokeContext | null {
        return this.getRuleContext(0, FunctionNameForInvokeContext);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUP, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OVER, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.STAR, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITHIN, 0);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public window_specification(): Window_specificationContext | null {
        return this.getRuleContext(0, Window_specificationContext);
    }
    public null_treatment(): Null_treatmentContext | null {
        return this.getRuleContext(0, Null_treatmentContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTINCT, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_function_;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFunction_) {
             listener.enterFunction_(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFunction_) {
             listener.exitFunction_(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunction_) {
            return visitor.visitFunction_(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Null_treatmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULLS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_NULLS, 0)!;
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESPECT, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IGNORE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_null_treatment;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterNull_treatment) {
             listener.enterNull_treatment(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitNull_treatment) {
             listener.exitNull_treatment(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNull_treatment) {
            return visitor.visitNull_treatment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionIdentifier(): FunctionIdentifierContext {
        return this.getRuleContext(0, FunctionIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_functionNameCreate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFunctionNameCreate) {
             listener.enterFunctionNameCreate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFunctionNameCreate) {
             listener.exitFunctionNameCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameCreate) {
            return visitor.visitFunctionNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameForDDLContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionIdentifier(): FunctionIdentifierContext | null {
        return this.getRuleContext(0, FunctionIdentifierContext);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_functionNameForDDL;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFunctionNameForDDL) {
             listener.enterFunctionNameForDDL(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFunctionNameForDDL) {
             listener.exitFunctionNameForDDL(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameForDDL) {
            return visitor.visitFunctionNameForDDL(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameForInvokeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionIdentifier(): FunctionIdentifierContext | null {
        return this.getRuleContext(0, FunctionIdentifierContext);
    }
    public sql11ReservedKeywordsUsedAsFunctionName(): Sql11ReservedKeywordsUsedAsFunctionNameContext | null {
        return this.getRuleContext(0, Sql11ReservedKeywordsUsedAsFunctionNameContext);
    }
    public sysFuncNames(): SysFuncNamesContext | null {
        return this.getRuleContext(0, SysFuncNamesContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_functionNameForInvoke;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFunctionNameForInvoke) {
             listener.enterFunctionNameForInvoke(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFunctionNameForInvoke) {
             listener.exitFunctionNameForInvoke(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameForInvoke) {
            return visitor.visitFunctionNameForInvoke(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CastExpressionContext extends antlr.ParserRuleContext {
    public _toType?: PrimitiveTypeContext;
    public _fmt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CAST(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public primitiveType(): PrimitiveTypeContext {
        return this.getRuleContext(0, PrimitiveTypeContext)!;
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORMAT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_castExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCastExpression) {
             listener.enterCastExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCastExpression) {
             listener.exitCastExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCastExpression) {
            return visitor.visitCastExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CASE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CASE, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_END, 0)!;
    }
    public KW_WHEN(): antlr.TerminalNode[];
    public KW_WHEN(i: number): antlr.TerminalNode | null;
    public KW_WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_WHEN);
    	} else {
    		return this.getToken(HiveSqlParser.KW_WHEN, i);
    	}
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_THEN);
    	} else {
    		return this.getToken(HiveSqlParser.KW_THEN, i);
    	}
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ELSE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_caseExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCaseExpression) {
             listener.enterCaseExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCaseExpression) {
             listener.exitCaseExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCaseExpression) {
            return visitor.visitCaseExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CASE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CASE, 0)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_END, 0)!;
    }
    public KW_WHEN(): antlr.TerminalNode[];
    public KW_WHEN(i: number): antlr.TerminalNode | null;
    public KW_WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_WHEN);
    	} else {
    		return this.getToken(HiveSqlParser.KW_WHEN, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_THEN);
    	} else {
    		return this.getToken(HiveSqlParser.KW_THEN, i);
    	}
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ELSE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_whenExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWhenExpression) {
             listener.enterWhenExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWhenExpression) {
             listener.exitWhenExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenExpression) {
            return visitor.visitWhenExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FloorExpressionContext extends antlr.ParserRuleContext {
    public _floorUnit?: TimeQualifiersContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FLOOR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FLOOR, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public timeQualifiers(): TimeQualifiersContext | null {
        return this.getRuleContext(0, TimeQualifiersContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_floorExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFloorExpression) {
             listener.enterFloorExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFloorExpression) {
             listener.exitFloorExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFloorExpression) {
            return visitor.visitFloorExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtractExpressionContext extends antlr.ParserRuleContext {
    public _timeUnit?: TimeQualifiersContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXTRACT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXTRACT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FROM, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public timeQualifiers(): TimeQualifiersContext {
        return this.getRuleContext(0, TimeQualifiersContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_extractExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExtractExpression) {
             listener.enterExtractExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExtractExpression) {
             listener.exitExtractExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExtractExpression) {
            return visitor.visitExtractExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeQualifiersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public year(): YearContext | null {
        return this.getRuleContext(0, YearContext);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUARTER, 0);
    }
    public month(): MonthContext | null {
        return this.getRuleContext(0, MonthContext);
    }
    public week(): WeekContext | null {
        return this.getRuleContext(0, WeekContext);
    }
    public day(): DayContext | null {
        return this.getRuleContext(0, DayContext);
    }
    public hour(): HourContext | null {
        return this.getRuleContext(0, HourContext);
    }
    public minute(): MinuteContext | null {
        return this.getRuleContext(0, MinuteContext);
    }
    public second(): SecondContext | null {
        return this.getRuleContext(0, SecondContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_timeQualifiers;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTimeQualifiers) {
             listener.enterTimeQualifiers(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTimeQualifiers) {
             listener.exitTimeQualifiers(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTimeQualifiers) {
            return visitor.visitTimeQualifiers(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantContext extends antlr.ParserRuleContext {
    public _value?: IntervalValueContext;
    public _qualifiers?: IntervalQualifiersContext;
    public _csName?: Token | null;
    public _csLiteral?: Token | null;
    public _p?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalValue(): IntervalValueContext | null {
        return this.getRuleContext(0, IntervalValueContext);
    }
    public intervalQualifiers(): IntervalQualifiersContext | null {
        return this.getRuleContext(0, IntervalQualifiersContext);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATE, 0);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_TIMESTAMPLOCALTZ(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMPLOCALTZ, 0);
    }
    public IntegralLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.IntegralLiteral, 0);
    }
    public NumberLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.NumberLiteral, 0);
    }
    public CharSetName(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.CharSetName, 0);
    }
    public CharSetLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.CharSetLiteral, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FALSE, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NULL, 0);
    }
    public QUESTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.QUESTION, 0);
    }
    public Identifier(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Identifier, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_constant;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterConstant) {
             listener.enterConstant(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitConstant) {
             listener.exitConstant(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstant) {
            return visitor.visitConstant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_intervalValue;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterIntervalValue) {
             listener.enterIntervalValue(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitIntervalValue) {
             listener.exitIntervalValue(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalValue) {
            return visitor.visitIntervalValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalExpressionContext extends antlr.ParserRuleContext {
    public _value?: IntervalValueContext;
    public _qualifiers?: IntervalQualifiersContext;
    public _expr?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public intervalValue(): IntervalValueContext | null {
        return this.getRuleContext(0, IntervalValueContext);
    }
    public intervalQualifiers(): IntervalQualifiersContext {
        return this.getRuleContext(0, IntervalQualifiersContext)!;
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTERVAL, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_intervalExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterIntervalExpression) {
             listener.enterIntervalExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitIntervalExpression) {
             listener.exitIntervalExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalExpression) {
            return visitor.visitIntervalExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalQualifiersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public year(): YearContext | null {
        return this.getRuleContext(0, YearContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public month(): MonthContext | null {
        return this.getRuleContext(0, MonthContext);
    }
    public day(): DayContext | null {
        return this.getRuleContext(0, DayContext);
    }
    public second(): SecondContext | null {
        return this.getRuleContext(0, SecondContext);
    }
    public hour(): HourContext | null {
        return this.getRuleContext(0, HourContext);
    }
    public minute(): MinuteContext | null {
        return this.getRuleContext(0, MinuteContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_intervalQualifiers;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterIntervalQualifiers) {
             listener.enterIntervalQualifiers(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitIntervalQualifiers) {
             listener.exitIntervalQualifiers(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalQualifiers) {
            return visitor.visitIntervalQualifiers(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceAndExpression(): PrecedenceAndExpressionContext[];
    public precedenceAndExpression(i: number): PrecedenceAndExpressionContext | null;
    public precedenceAndExpression(i?: number): PrecedenceAndExpressionContext[] | PrecedenceAndExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceAndExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceAndExpressionContext);
    }
    public KW_OR(): antlr.TerminalNode[];
    public KW_OR(i: number): antlr.TerminalNode | null;
    public KW_OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_OR);
    	} else {
    		return this.getToken(HiveSqlParser.KW_OR, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_expression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public intervalExpression(): IntervalExpressionContext | null {
        return this.getRuleContext(0, IntervalExpressionContext);
    }
    public castExpression(): CastExpressionContext | null {
        return this.getRuleContext(0, CastExpressionContext);
    }
    public extractExpression(): ExtractExpressionContext | null {
        return this.getRuleContext(0, ExtractExpressionContext);
    }
    public floorExpression(): FloorExpressionContext | null {
        return this.getRuleContext(0, FloorExpressionContext);
    }
    public caseExpression(): CaseExpressionContext | null {
        return this.getRuleContext(0, CaseExpressionContext);
    }
    public whenExpression(): WhenExpressionContext | null {
        return this.getRuleContext(0, WhenExpressionContext);
    }
    public subQueryExpression(): SubQueryExpressionContext | null {
        return this.getRuleContext(0, SubQueryExpressionContext);
    }
    public function_(): Function_Context | null {
        return this.getRuleContext(0, Function_Context);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsInParenthesisContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_atomExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAtomExpression) {
             listener.enterAtomExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAtomExpression) {
             listener.exitAtomExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtomExpression) {
            return visitor.visitAtomExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceUnaryPrefixExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public atomExpression(): AtomExpressionContext {
        return this.getRuleContext(0, AtomExpressionContext)!;
    }
    public LSQUARE(): antlr.TerminalNode[];
    public LSQUARE(i: number): antlr.TerminalNode | null;
    public LSQUARE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LSQUARE);
    	} else {
    		return this.getToken(HiveSqlParser.LSQUARE, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RSQUARE(): antlr.TerminalNode[];
    public RSQUARE(i: number): antlr.TerminalNode | null;
    public RSQUARE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RSQUARE);
    	} else {
    		return this.getToken(HiveSqlParser.RSQUARE, i);
    	}
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public PLUS(): antlr.TerminalNode[];
    public PLUS(i: number): antlr.TerminalNode | null;
    public PLUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.PLUS);
    	} else {
    		return this.getToken(HiveSqlParser.PLUS, i);
    	}
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.MINUS);
    	} else {
    		return this.getToken(HiveSqlParser.MINUS, i);
    	}
    }
    public TILDE(): antlr.TerminalNode[];
    public TILDE(i: number): antlr.TerminalNode | null;
    public TILDE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.TILDE);
    	} else {
    		return this.getToken(HiveSqlParser.TILDE, i);
    	}
    }
    public BITWISENOT(): antlr.TerminalNode[];
    public BITWISENOT(i: number): antlr.TerminalNode | null;
    public BITWISENOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.BITWISENOT);
    	} else {
    		return this.getToken(HiveSqlParser.BITWISENOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceUnaryPrefixExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceUnaryPrefixExpression) {
             listener.enterPrecedenceUnaryPrefixExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceUnaryPrefixExpression) {
             listener.exitPrecedenceUnaryPrefixExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceUnaryPrefixExpression) {
            return visitor.visitPrecedenceUnaryPrefixExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceBitwiseXorExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceUnaryPrefixExpression(): PrecedenceUnaryPrefixExpressionContext[];
    public precedenceUnaryPrefixExpression(i: number): PrecedenceUnaryPrefixExpressionContext | null;
    public precedenceUnaryPrefixExpression(i?: number): PrecedenceUnaryPrefixExpressionContext[] | PrecedenceUnaryPrefixExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceUnaryPrefixExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceUnaryPrefixExpressionContext);
    }
    public BITWISEXOR(): antlr.TerminalNode[];
    public BITWISEXOR(i: number): antlr.TerminalNode | null;
    public BITWISEXOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.BITWISEXOR);
    	} else {
    		return this.getToken(HiveSqlParser.BITWISEXOR, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceBitwiseXorExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceBitwiseXorExpression) {
             listener.enterPrecedenceBitwiseXorExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceBitwiseXorExpression) {
             listener.exitPrecedenceBitwiseXorExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceBitwiseXorExpression) {
            return visitor.visitPrecedenceBitwiseXorExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceStarExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceBitwiseXorExpression(): PrecedenceBitwiseXorExpressionContext[];
    public precedenceBitwiseXorExpression(i: number): PrecedenceBitwiseXorExpressionContext | null;
    public precedenceBitwiseXorExpression(i?: number): PrecedenceBitwiseXorExpressionContext[] | PrecedenceBitwiseXorExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceBitwiseXorExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceBitwiseXorExpressionContext);
    }
    public STAR(): antlr.TerminalNode[];
    public STAR(i: number): antlr.TerminalNode | null;
    public STAR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.STAR);
    	} else {
    		return this.getToken(HiveSqlParser.STAR, i);
    	}
    }
    public DIVIDE(): antlr.TerminalNode[];
    public DIVIDE(i: number): antlr.TerminalNode | null;
    public DIVIDE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DIVIDE);
    	} else {
    		return this.getToken(HiveSqlParser.DIVIDE, i);
    	}
    }
    public MOD(): antlr.TerminalNode[];
    public MOD(i: number): antlr.TerminalNode | null;
    public MOD(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.MOD);
    	} else {
    		return this.getToken(HiveSqlParser.MOD, i);
    	}
    }
    public DIV(): antlr.TerminalNode[];
    public DIV(i: number): antlr.TerminalNode | null;
    public DIV(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DIV);
    	} else {
    		return this.getToken(HiveSqlParser.DIV, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceStarExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceStarExpression) {
             listener.enterPrecedenceStarExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceStarExpression) {
             listener.exitPrecedenceStarExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceStarExpression) {
            return visitor.visitPrecedenceStarExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedencePlusExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceStarExpression(): PrecedenceStarExpressionContext[];
    public precedenceStarExpression(i: number): PrecedenceStarExpressionContext | null;
    public precedenceStarExpression(i?: number): PrecedenceStarExpressionContext[] | PrecedenceStarExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceStarExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceStarExpressionContext);
    }
    public PLUS(): antlr.TerminalNode[];
    public PLUS(i: number): antlr.TerminalNode | null;
    public PLUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.PLUS);
    	} else {
    		return this.getToken(HiveSqlParser.PLUS, i);
    	}
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.MINUS);
    	} else {
    		return this.getToken(HiveSqlParser.MINUS, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedencePlusExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedencePlusExpression) {
             listener.enterPrecedencePlusExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedencePlusExpression) {
             listener.exitPrecedencePlusExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedencePlusExpression) {
            return visitor.visitPrecedencePlusExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceConcatenateExpressionContext extends antlr.ParserRuleContext {
    public _plus?: PrecedencePlusExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedencePlusExpression(): PrecedencePlusExpressionContext[];
    public precedencePlusExpression(i: number): PrecedencePlusExpressionContext | null;
    public precedencePlusExpression(i?: number): PrecedencePlusExpressionContext[] | PrecedencePlusExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedencePlusExpressionContext);
        }

        return this.getRuleContext(i, PrecedencePlusExpressionContext);
    }
    public CONCATENATE(): antlr.TerminalNode[];
    public CONCATENATE(i: number): antlr.TerminalNode | null;
    public CONCATENATE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.CONCATENATE);
    	} else {
    		return this.getToken(HiveSqlParser.CONCATENATE, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceConcatenateExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceConcatenateExpression) {
             listener.enterPrecedenceConcatenateExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceConcatenateExpression) {
             listener.exitPrecedenceConcatenateExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceConcatenateExpression) {
            return visitor.visitPrecedenceConcatenateExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceAmpersandExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceConcatenateExpression(): PrecedenceConcatenateExpressionContext[];
    public precedenceConcatenateExpression(i: number): PrecedenceConcatenateExpressionContext | null;
    public precedenceConcatenateExpression(i?: number): PrecedenceConcatenateExpressionContext[] | PrecedenceConcatenateExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceConcatenateExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceConcatenateExpressionContext);
    }
    public AMPERSAND(): antlr.TerminalNode[];
    public AMPERSAND(i: number): antlr.TerminalNode | null;
    public AMPERSAND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.AMPERSAND);
    	} else {
    		return this.getToken(HiveSqlParser.AMPERSAND, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceAmpersandExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceAmpersandExpression) {
             listener.enterPrecedenceAmpersandExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceAmpersandExpression) {
             listener.exitPrecedenceAmpersandExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceAmpersandExpression) {
            return visitor.visitPrecedenceAmpersandExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceBitwiseOrExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceAmpersandExpression(): PrecedenceAmpersandExpressionContext[];
    public precedenceAmpersandExpression(i: number): PrecedenceAmpersandExpressionContext | null;
    public precedenceAmpersandExpression(i?: number): PrecedenceAmpersandExpressionContext[] | PrecedenceAmpersandExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceAmpersandExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceAmpersandExpressionContext);
    }
    public BITWISEOR(): antlr.TerminalNode[];
    public BITWISEOR(i: number): antlr.TerminalNode | null;
    public BITWISEOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.BITWISEOR);
    	} else {
    		return this.getToken(HiveSqlParser.BITWISEOR, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceBitwiseOrExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceBitwiseOrExpression) {
             listener.enterPrecedenceBitwiseOrExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceBitwiseOrExpression) {
             listener.exitPrecedenceBitwiseOrExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceBitwiseOrExpression) {
            return visitor.visitPrecedenceBitwiseOrExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REGEXP, 0);
    }
    public LESSTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LESSTHANOREQUALTO, 0);
    }
    public LESSTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LESSTHAN, 0);
    }
    public GREATERTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.GREATERTHANOREQUALTO, 0);
    }
    public GREATERTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceSimilarOperator;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceSimilarOperator) {
             listener.enterPrecedenceSimilarOperator(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceSimilarOperator) {
             listener.exitPrecedenceSimilarOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarOperator) {
            return visitor.visitPrecedenceSimilarOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubQueryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_subQueryExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSubQueryExpression) {
             listener.enterSubQueryExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSubQueryExpression) {
             listener.exitSubQueryExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubQueryExpression) {
            return visitor.visitSubQueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionContext extends antlr.ParserRuleContext {
    public _a?: PrecedenceBitwiseOrExpressionContext;
    public _part?: PrecedenceSimilarExpressionPartContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext | null {
        return this.getRuleContext(0, PrecedenceBitwiseOrExpressionContext);
    }
    public precedenceSimilarExpressionPart(): PrecedenceSimilarExpressionPartContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionPartContext);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXISTS, 0);
    }
    public subQueryExpression(): SubQueryExpressionContext | null {
        return this.getRuleContext(0, SubQueryExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceSimilarExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceSimilarExpression) {
             listener.enterPrecedenceSimilarExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceSimilarExpression) {
             listener.exitPrecedenceSimilarExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpression) {
            return visitor.visitPrecedenceSimilarExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionPartContext extends antlr.ParserRuleContext {
    public _equalExpr?: PrecedenceBitwiseOrExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceSimilarOperator(): PrecedenceSimilarOperatorContext | null {
        return this.getRuleContext(0, PrecedenceSimilarOperatorContext);
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext | null {
        return this.getRuleContext(0, PrecedenceBitwiseOrExpressionContext);
    }
    public precedenceSimilarExpressionAtom(): PrecedenceSimilarExpressionAtomContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionAtomContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public precedenceSimilarExpressionPartNot(): PrecedenceSimilarExpressionPartNotContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionPartNotContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceSimilarExpressionPart;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceSimilarExpressionPart) {
             listener.enterPrecedenceSimilarExpressionPart(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceSimilarExpressionPart) {
             listener.exitPrecedenceSimilarExpressionPart(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionPart) {
            return visitor.visitPrecedenceSimilarExpressionPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionAtomContext extends antlr.ParserRuleContext {
    public _min?: PrecedenceBitwiseOrExpressionContext;
    public _max?: PrecedenceBitwiseOrExpressionContext;
    public _expr?: ExpressionsInParenthesisContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IN, 0);
    }
    public precedenceSimilarExpressionIn(): PrecedenceSimilarExpressionInContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionInContext);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BETWEEN, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AND, 0);
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext[];
    public precedenceBitwiseOrExpression(i: number): PrecedenceBitwiseOrExpressionContext | null;
    public precedenceBitwiseOrExpression(i?: number): PrecedenceBitwiseOrExpressionContext[] | PrecedenceBitwiseOrExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceBitwiseOrExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceBitwiseOrExpressionContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ANY, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsInParenthesisContext);
    }
    public subQuerySelectorOperator(): SubQuerySelectorOperatorContext | null {
        return this.getRuleContext(0, SubQuerySelectorOperatorContext);
    }
    public subQueryExpression(): SubQueryExpressionContext | null {
        return this.getRuleContext(0, SubQueryExpressionContext);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SOME, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceSimilarExpressionAtom;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceSimilarExpressionAtom) {
             listener.enterPrecedenceSimilarExpressionAtom(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceSimilarExpressionAtom) {
             listener.exitPrecedenceSimilarExpressionAtom(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionAtom) {
            return visitor.visitPrecedenceSimilarExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionInContext extends antlr.ParserRuleContext {
    public _expr?: ExpressionsInParenthesisContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subQueryExpression(): SubQueryExpressionContext | null {
        return this.getRuleContext(0, SubQueryExpressionContext);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsInParenthesisContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceSimilarExpressionIn;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceSimilarExpressionIn) {
             listener.enterPrecedenceSimilarExpressionIn(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceSimilarExpressionIn) {
             listener.exitPrecedenceSimilarExpressionIn(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionIn) {
            return visitor.visitPrecedenceSimilarExpressionIn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionPartNotContext extends antlr.ParserRuleContext {
    public _notExpr?: PrecedenceBitwiseOrExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REGEXP, 0);
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext | null {
        return this.getRuleContext(0, PrecedenceBitwiseOrExpressionContext);
    }
    public precedenceSimilarExpressionAtom(): PrecedenceSimilarExpressionAtomContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionAtomContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceSimilarExpressionPartNot;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceSimilarExpressionPartNot) {
             listener.enterPrecedenceSimilarExpressionPartNot(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceSimilarExpressionPartNot) {
             listener.exitPrecedenceSimilarExpressionPartNot(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionPartNot) {
            return visitor.visitPrecedenceSimilarExpressionPartNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceDistinctOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_IS, 0)!;
    }
    public KW_DISTINCT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DISTINCT, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FROM, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceDistinctOperator;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceDistinctOperator) {
             listener.enterPrecedenceDistinctOperator(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceDistinctOperator) {
             listener.exitPrecedenceDistinctOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceDistinctOperator) {
            return visitor.visitPrecedenceDistinctOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceEqualOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public EQUAL_NS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL_NS, 0);
    }
    public NOTEQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.NOTEQUAL, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IS, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTINCT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FROM, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceEqualOperator;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceEqualOperator) {
             listener.enterPrecedenceEqualOperator(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceEqualOperator) {
             listener.exitPrecedenceEqualOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceEqualOperator) {
            return visitor.visitPrecedenceEqualOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceEqualExpressionContext extends antlr.ParserRuleContext {
    public _precedenceEqualOperator?: PrecedenceEqualOperatorContext;
    public _equal: PrecedenceEqualOperatorContext[] = [];
    public _precedenceSimilarExpression?: PrecedenceSimilarExpressionContext;
    public _p: PrecedenceSimilarExpressionContext[] = [];
    public _precedenceDistinctOperator?: PrecedenceDistinctOperatorContext;
    public _dist: PrecedenceDistinctOperatorContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceSimilarExpression(): PrecedenceSimilarExpressionContext[];
    public precedenceSimilarExpression(i: number): PrecedenceSimilarExpressionContext | null;
    public precedenceSimilarExpression(i?: number): PrecedenceSimilarExpressionContext[] | PrecedenceSimilarExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceSimilarExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceSimilarExpressionContext);
    }
    public precedenceEqualOperator(): PrecedenceEqualOperatorContext[];
    public precedenceEqualOperator(i: number): PrecedenceEqualOperatorContext | null;
    public precedenceEqualOperator(i?: number): PrecedenceEqualOperatorContext[] | PrecedenceEqualOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceEqualOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceEqualOperatorContext);
    }
    public precedenceDistinctOperator(): PrecedenceDistinctOperatorContext[];
    public precedenceDistinctOperator(i: number): PrecedenceDistinctOperatorContext | null;
    public precedenceDistinctOperator(i?: number): PrecedenceDistinctOperatorContext[] | PrecedenceDistinctOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceDistinctOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceDistinctOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceEqualExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceEqualExpression) {
             listener.enterPrecedenceEqualExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceEqualExpression) {
             listener.exitPrecedenceEqualExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceEqualExpression) {
            return visitor.visitPrecedenceEqualExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsConditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NULL, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FALSE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNKNOWN, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_isCondition;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterIsCondition) {
             listener.enterIsCondition(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitIsCondition) {
             listener.exitIsCondition(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIsCondition) {
            return visitor.visitIsCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceNotExpressionContext extends antlr.ParserRuleContext {
    public _a?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceEqualExpression(): PrecedenceEqualExpressionContext {
        return this.getRuleContext(0, PrecedenceEqualExpressionContext)!;
    }
    public KW_NOT(): antlr.TerminalNode[];
    public KW_NOT(i: number): antlr.TerminalNode | null;
    public KW_NOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_NOT);
    	} else {
    		return this.getToken(HiveSqlParser.KW_NOT, i);
    	}
    }
    public isCondition(): IsConditionContext | null {
        return this.getRuleContext(0, IsConditionContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceNotExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceNotExpression) {
             listener.enterPrecedenceNotExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceNotExpression) {
             listener.exitPrecedenceNotExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceNotExpression) {
            return visitor.visitPrecedenceNotExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceAndExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceNotExpression(): PrecedenceNotExpressionContext[];
    public precedenceNotExpression(i: number): PrecedenceNotExpressionContext | null;
    public precedenceNotExpression(i?: number): PrecedenceNotExpressionContext[] | PrecedenceNotExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceNotExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceNotExpressionContext);
    }
    public KW_AND(): antlr.TerminalNode[];
    public KW_AND(i: number): antlr.TerminalNode | null;
    public KW_AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_AND);
    	} else {
    		return this.getToken(HiveSqlParser.KW_AND, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceAndExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceAndExpression) {
             listener.enterPrecedenceAndExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceAndExpression) {
             listener.exitPrecedenceAndExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceAndExpression) {
            return visitor.visitPrecedenceAndExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableOrPartitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableOrPartition;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableOrPartition) {
             listener.enterTableOrPartition(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableOrPartition) {
             listener.exitTableOrPartition(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOrPartition) {
            return visitor.visitTableOrPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_PARTITION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public partitionVal(): PartitionValContext[];
    public partitionVal(i: number): PartitionValContext | null;
    public partitionVal(i?: number): PartitionValContext[] | PartitionValContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValContext);
        }

        return this.getRuleContext(i, PartitionValContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionSpec) {
             listener.enterPartitionSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionSpec) {
             listener.exitPartitionSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpec) {
            return visitor.visitPartitionSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionVal;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionVal) {
             listener.enterPartitionVal(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionVal) {
             listener.exitPartitionVal(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionVal) {
            return visitor.visitPartitionVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSelectorSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public partitionSelectorVal(): PartitionSelectorValContext[];
    public partitionSelectorVal(i: number): PartitionSelectorValContext | null;
    public partitionSelectorVal(i?: number): PartitionSelectorValContext[] | PartitionSelectorValContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSelectorValContext);
        }

        return this.getRuleContext(i, PartitionSelectorValContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionSelectorSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionSelectorSpec) {
             listener.enterPartitionSelectorSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionSelectorSpec) {
             listener.exitPartitionSelectorSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSelectorSpec) {
            return visitor.visitPartitionSelectorSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSelectorValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public constant(): ConstantContext {
        return this.getRuleContext(0, ConstantContext)!;
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public subQuerySelectorOperator(): SubQuerySelectorOperatorContext | null {
        return this.getRuleContext(0, SubQuerySelectorOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionSelectorVal;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionSelectorVal) {
             listener.enterPartitionSelectorVal(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionSelectorVal) {
             listener.exitPartitionSelectorVal(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSelectorVal) {
            return visitor.visitPartitionSelectorVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubQuerySelectorOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public NOTEQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.NOTEQUAL, 0);
    }
    public LESSTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LESSTHANOREQUALTO, 0);
    }
    public LESSTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LESSTHAN, 0);
    }
    public GREATERTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.GREATERTHANOREQUALTO, 0);
    }
    public GREATERTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_subQuerySelectorOperator;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSubQuerySelectorOperator) {
             listener.enterSubQuerySelectorOperator(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSubQuerySelectorOperator) {
             listener.exitSubQuerySelectorOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubQuerySelectorOperator) {
            return visitor.visitSubQuerySelectorOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SysFuncNamesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AND, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OR, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IF, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CASE, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WHEN, 0);
    }
    public KW_FLOOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FLOOR, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TINYINT, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SMALLINT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTEGER, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BIGINT, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FLOAT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REAL, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DOUBLE, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BOOLEAN, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STRING, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BINARY, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ARRAY, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAP, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STRUCT, 0);
    }
    public KW_UNIONTYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNIONTYPE, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public EQUAL_NS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL_NS, 0);
    }
    public NOTEQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.NOTEQUAL, 0);
    }
    public LESSTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LESSTHANOREQUALTO, 0);
    }
    public LESSTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LESSTHAN, 0);
    }
    public GREATERTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.GREATERTHANOREQUALTO, 0);
    }
    public GREATERTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0);
    }
    public DIVIDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DIVIDE, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.MINUS, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.STAR, 0);
    }
    public MOD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.MOD, 0);
    }
    public DIV(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DIV, 0);
    }
    public AMPERSAND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.AMPERSAND, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.TILDE, 0);
    }
    public BITWISEOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.BITWISEOR, 0);
    }
    public BITWISEXOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.BITWISEXOR, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REGEXP, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IN, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BETWEEN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_sysFuncNames;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSysFuncNames) {
             listener.enterSysFuncNames(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSysFuncNames) {
             listener.exitSysFuncNames(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSysFuncNames) {
            return visitor.visitSysFuncNames(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Identifier(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Identifier, 0);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_id_;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterId_) {
             listener.enterId_(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitId_) {
             listener.exitId_(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitId_) {
            return visitor.visitId_(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionIdentifierContext extends antlr.ParserRuleContext {
    public _fn?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_functionIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFunctionIdentifier) {
             listener.enterFunctionIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFunctionIdentifier) {
             listener.exitFunctionIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionIdentifier) {
            return visitor.visitFunctionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_principalIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrincipalIdentifier) {
             listener.enterPrincipalIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrincipalIdentifier) {
             listener.exitPrincipalIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrincipalIdentifier) {
            return visitor.visitPrincipalIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ABORT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ABORT, 0);
    }
    public KW_ACTIVATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ACTIVATE, 0);
    }
    public KW_ACTIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ACTIVE, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADD, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADMIN, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AFTER, 0);
    }
    public KW_ALLOC_FRACTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALLOC_FRACTION, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ANALYZE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ARCHIVE, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ASC, 0);
    }
    public KW_AST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AST, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AT, 0);
    }
    public KW_AUTOCOMMIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AUTOCOMMIT, 0);
    }
    public KW_BATCH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BATCH, 0);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BEFORE, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BUCKET, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BUCKETS, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CACHE, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CASCADE, 0);
    }
    public KW_CBO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CBO, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CHANGE, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CHECK, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CLUSTER, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CLUSTERED, 0);
    }
    public KW_CLUSTERSTATUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CLUSTERSTATUS, 0);
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLLECTION, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPACT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPUTE, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONCATENATE, 0);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONTINUE, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COST, 0);
    }
    public KW_CRON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CRON, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATA, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATABASES, 0);
    }
    public KW_DATETIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATETIME, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DAYS, 0);
    }
    public KW_DAYOFWEEK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DAYOFWEEK, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_DCPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DCPROPERTIES, 0);
    }
    public KW_DEBUG(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEBUG, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFAULT, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFERRED, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFINED, 0);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DELIMITED, 0);
    }
    public KW_DEPENDENCY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEPENDENCY, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DESC, 0);
    }
    public KW_DETAIL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DETAIL, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DIRECTORIES, 0);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DIRECTORY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISABLE, 0);
    }
    public KW_DISABLED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISABLED, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTRIBUTED, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DO, 0);
    }
    public KW_DUMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DUMP, 0);
    }
    public KW_ELEM_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ELEM_TYPE, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ENABLE, 0);
    }
    public KW_ENABLED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ENABLED, 0);
    }
    public KW_ENFORCED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ENFORCED, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ESCAPED, 0);
    }
    public KW_EVERY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EVERY, 0);
    }
    public KW_EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXCLUSIVE, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXECUTE, 0);
    }
    public KW_EXECUTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXECUTED, 0);
    }
    public KW_EXPIRE_SNAPSHOTS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXPIRE_SNAPSHOTS, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXPORT, 0);
    }
    public KW_EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXPRESSION, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FIELDS, 0);
    }
    public KW_FILE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FILE, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FILEFORMAT, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FIRST, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORMAT, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORMATTED, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_HOLD_DDLTIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_HOLD_DDLTIME, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_HOURS, 0);
    }
    public KW_IDXPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IDXPROPERTIES, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IGNORE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INDEXES, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPATH, 0);
    }
    public KW_INPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPUTDRIVER, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ISOLATION, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ITEMS, 0);
    }
    public KW_JAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_JAR, 0);
    }
    public KW_JOINCOST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_JOINCOST, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KEY, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KEYS, 0);
    }
    public KW_KEY_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KEY_TYPE, 0);
    }
    public KW_KILL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KILL, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LAST, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LEVEL, 0);
    }
    public KW_LIFECYCLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIFECYCLE, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIMIT, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LINES, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOAD, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCK, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCKS, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOGICAL, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LONG, 0);
    }
    public KW_MANAGED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGED, 0);
    }
    public KW_MANAGEDLOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGEDLOCATION, 0);
    }
    public KW_MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGEMENT, 0);
    }
    public KW_MAPJOIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAPJOIN, 0);
    }
    public KW_MAPPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAPPING, 0);
    }
    public KW_MATCHED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MATCHED, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_METADATA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_METADATA, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MINUTES, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MONTHS, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MOVE, 0);
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MSCK, 0);
    }
    public KW_NORELY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NORELY, 0);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOSCAN, 0);
    }
    public KW_NOVALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOVALIDATE, 0);
    }
    public KW_NO_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NO_DROP, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NULLS, 0);
    }
    public KW_OFFLINE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OFFLINE, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OFFSET, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OPERATOR, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OPTION, 0);
    }
    public KW_OUTPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTPUTDRIVER, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OVERWRITE, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OWNER, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITIONED, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITIONS, 0);
    }
    public KW_PATH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PATH, 0);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PLAN, 0);
    }
    public KW_PLANS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PLANS, 0);
    }
    public KW_PLUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PLUS, 0);
    }
    public KW_POOL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_POOL, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PRINCIPALS, 0);
    }
    public KW_PROTECTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PROTECTION, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PURGE, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUARTER, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUERY, 0);
    }
    public KW_QUERY_PARALLELISM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUERY_PARALLELISM, 0);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_READ, 0);
    }
    public KW_READONLY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_READONLY, 0);
    }
    public KW_REBUILD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REBUILD, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RECORDREADER, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RECORDWRITER, 0);
    }
    public KW_RELOAD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RELOAD, 0);
    }
    public KW_RELY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RELY, 0);
    }
    public KW_REMOTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REMOTE, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RENAME, 0);
    }
    public KW_REOPTIMIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REOPTIMIZATION, 0);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPAIR, 0);
    }
    public KW_REPL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPL, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLACE, 0);
    }
    public KW_REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLICATION, 0);
    }
    public KW_RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESOURCE, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESPECT, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESTRICT, 0);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REWRITE, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLE, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLES, 0);
    }
    public KW_SCHEDULED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEDULED, 0);
    }
    public KW_SCHEDULING_POLICY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEDULING_POLICY, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEMAS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SECONDS, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SEMI, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERVER, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SETS, 0);
    }
    public KW_SET_CURRENT_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET_CURRENT_SNAPSHOT, 0);
    }
    public KW_SHARED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SHARED, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SHOW, 0);
    }
    public KW_SHOW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SHOW_DATABASE, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SKEWED, 0);
    }
    public KW_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SNAPSHOT, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SORT, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SORTED, 0);
    }
    public KW_SPEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SPEC, 0);
    }
    public KW_SSL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SSL, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STATISTICS, 0);
    }
    public KW_STATUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STATUS, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STORED, 0);
    }
    public KW_STREAMTABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STREAMTABLE, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STRING, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STRUCT, 0);
    }
    public KW_SUMMARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SUMMARY, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLES, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TERMINATED, 0);
    }
    public KW_TIMESTAMPTZ(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMPTZ, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TINYINT, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TOUCH, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSACTIONAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTIONAL, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRIM, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TYPE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_UNDO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNDO, 0);
    }
    public KW_UNIONTYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNIONTYPE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNKNOWN, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNLOCK, 0);
    }
    public KW_UNMANAGED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNMANAGED, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNSET, 0);
    }
    public KW_UNSIGNED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNSIGNED, 0);
    }
    public KW_URI(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_URI, 0);
    }
    public KW_URL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_URL, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USE, 0);
    }
    public KW_UTC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UTC, 0);
    }
    public KW_UTCTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UTCTIMESTAMP, 0);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VALIDATE, 0);
    }
    public KW_VALUE_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VALUE_TYPE, 0);
    }
    public KW_VECTORIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VECTORIZATION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VIEWS, 0);
    }
    public KW_WAIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WAIT, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WEEKS, 0);
    }
    public KW_WHILE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WHILE, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITHIN, 0);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WORK, 0);
    }
    public KW_WORKLOAD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WORKLOAD, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WRITE, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_YEARS, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ZONE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_nonReserved;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterNonReserved) {
             listener.enterNonReserved(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitNonReserved) {
             listener.exitNonReserved(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql11ReservedKeywordsUsedAsFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ARRAY, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BIGINT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BINARY, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BOOLEAN, 0);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATE, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DOUBLE, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FLOAT, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUPING, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IF, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTEGER, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAP, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REAL, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SMALLINT, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMP, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_sql11ReservedKeywordsUsedAsFunctionName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSql11ReservedKeywordsUsedAsFunctionName) {
             listener.enterSql11ReservedKeywordsUsedAsFunctionName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSql11ReservedKeywordsUsedAsFunctionName) {
             listener.exitSql11ReservedKeywordsUsedAsFunctionName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSql11ReservedKeywordsUsedAsFunctionName) {
            return visitor.visitSql11ReservedKeywordsUsedAsFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConfigPropertiesItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SELECT, 0);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_JOIN, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITION, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAP, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REDUCE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USER, 0);
    }
    public KW_PERCENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PERCENT, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTERVAL, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROWS, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNION, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUP, 0);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MERGE, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NULL, 0);
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FETCH, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCAL, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DROP, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ON, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROW, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUPING, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public KW_FORCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORCE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_START, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INSERT, 0);
    }
    public KW_CONF(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONF, 0);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTO, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNIQUE, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMN, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSFORM, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTINCT, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IN, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REFERENCES, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ONLY, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_END, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FUNCTION, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UPDATE, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_DDL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DDL, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VALUES, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIME, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IS, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FOR, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BINARY, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USING, 0);
    }
    public KW_READS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_READS, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BETWEEN, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_configPropertiesItem;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterConfigPropertiesItem) {
             listener.enterConfigPropertiesItem(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitConfigPropertiesItem) {
             listener.exitConfigPropertiesItem(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConfigPropertiesItem) {
            return visitor.visitConfigPropertiesItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourcePlanDdlStatementsContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public _likeName?: Id_Context;
    public _newName?: Id_Context;
    public _src?: Id_Context;
    public _dest?: Id_Context;
    public _rpName?: Id_Context;
    public _triggerName?: Id_Context;
    public _poolName?: PoolPathContext;
    public _mappingType?: MappingTypesContext;
    public _path?: PoolPathContext;
    public _order?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CREATE, 0);
    }
    public KW_RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESOURCE, 0);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PLAN, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public rpAssignList(): RpAssignListContext | null {
        return this.getRuleContext(0, RpAssignListContext);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALTER, 0);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VALIDATE, 0);
    }
    public disable(): DisableContext | null {
        return this.getRuleContext(0, DisableContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNSET, 0);
    }
    public rpUnassign(): RpUnassignContext[];
    public rpUnassign(i: number): RpUnassignContext | null;
    public rpUnassign(i?: number): RpUnassignContext[] | RpUnassignContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RpUnassignContext);
        }

        return this.getRuleContext(i, RpUnassignContext);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public activate(): ActivateContext | null {
        return this.getRuleContext(0, ActivateContext);
    }
    public enable(): EnableContext | null {
        return this.getRuleContext(0, EnableContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DROP, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_WORKLOAD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WORKLOAD, 0);
    }
    public KW_MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGEMENT, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLACE, 0);
    }
    public KW_ACTIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ACTIVE, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRIGGER, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DOT, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WHEN, 0);
    }
    public triggerAtomExpression(): TriggerAtomExpressionContext | null {
        return this.getRuleContext(0, TriggerAtomExpressionContext);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DO, 0);
    }
    public triggerActionExpression(): TriggerActionExpressionContext | null {
        return this.getRuleContext(0, TriggerActionExpressionContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADD, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FROM, 0);
    }
    public KW_POOL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_POOL, 0);
    }
    public KW_UNMANAGED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNMANAGED, 0);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public poolAssignList(): PoolAssignListContext | null {
        return this.getRuleContext(0, PoolAssignListContext);
    }
    public KW_SCHEDULING_POLICY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEDULING_POLICY, 0);
    }
    public KW_MAPPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAPPING, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IN, 0);
    }
    public mappingTypes(): MappingTypesContext | null {
        return this.getRuleContext(0, MappingTypesContext);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ORDER, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_resourcePlanDdlStatements;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterResourcePlanDdlStatements) {
             listener.enterResourcePlanDdlStatements(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitResourcePlanDdlStatements) {
             listener.exitResourcePlanDdlStatements(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResourcePlanDdlStatements) {
            return visitor.visitResourcePlanDdlStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MappingTypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USER, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUP, 0);
    }
    public KW_APPLICATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_APPLICATION, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_mappingTypes;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterMappingTypes) {
             listener.enterMappingTypes(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitMappingTypes) {
             listener.exitMappingTypes(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMappingTypes) {
            return visitor.visitMappingTypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpAssignContext extends antlr.ParserRuleContext {
    public _parallelism?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_QUERY_PARALLELISM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUERY_PARALLELISM, 0);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.EQUAL, 0)!;
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFAULT, 0);
    }
    public KW_POOL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_POOL, 0);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rpAssign;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRpAssign) {
             listener.enterRpAssign(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRpAssign) {
             listener.exitRpAssign(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRpAssign) {
            return visitor.visitRpAssign(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpAssignListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rpAssign(): RpAssignContext[];
    public rpAssign(i: number): RpAssignContext | null;
    public rpAssign(i?: number): RpAssignContext[] | RpAssignContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RpAssignContext);
        }

        return this.getRuleContext(i, RpAssignContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rpAssignList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRpAssignList) {
             listener.enterRpAssignList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRpAssignList) {
             listener.exitRpAssignList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRpAssignList) {
            return visitor.visitRpAssignList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpUnassignContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_QUERY_PARALLELISM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUERY_PARALLELISM, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFAULT, 0);
    }
    public KW_POOL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_POOL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rpUnassign;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRpUnassign) {
             listener.enterRpUnassign(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRpUnassign) {
             listener.exitRpUnassign(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRpUnassign) {
            return visitor.visitRpUnassign(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ActivateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ACTIVATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ACTIVATE, 0)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLACE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_activate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterActivate) {
             listener.enterActivate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitActivate) {
             listener.exitActivate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitActivate) {
            return visitor.visitActivate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ENABLE, 0);
    }
    public KW_ENABLED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ENABLED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_enable;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterEnable) {
             listener.enterEnable(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitEnable) {
             listener.exitEnable(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEnable) {
            return visitor.visitEnable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DisableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISABLE, 0);
    }
    public KW_DISABLED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISABLED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_disable;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDisable) {
             listener.enterDisable(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDisable) {
             listener.exitDisable(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDisable) {
            return visitor.visitDisable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class YearContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_YEARS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_year;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterYear) {
             listener.enterYear(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitYear) {
             listener.exitYear(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitYear) {
            return visitor.visitYear(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MonthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MONTHS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_month;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterMonth) {
             listener.enterMonth(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitMonth) {
             listener.exitMonth(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMonth) {
            return visitor.visitMonth(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WeekContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WEEKS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_week;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWeek) {
             listener.enterWeek(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWeek) {
             listener.exitWeek(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWeek) {
            return visitor.visitWeek(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DayContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DAYS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_day;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDay) {
             listener.enterDay(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDay) {
             listener.exitDay(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDay) {
            return visitor.visitDay(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HourContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_HOURS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_hour;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterHour) {
             listener.enterHour(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitHour) {
             listener.exitHour(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHour) {
            return visitor.visitHour(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MinuteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MINUTES, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_minute;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterMinute) {
             listener.enterMinute(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitMinute) {
             listener.exitMinute(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMinute) {
            return visitor.visitMinute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SecondContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SECONDS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_second;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSecond) {
             listener.enterSecond(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSecond) {
             listener.exitSecond(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSecond) {
            return visitor.visitSecond(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecimalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DECIMAL, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NUMERIC, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_decimal;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDecimal) {
             listener.enterDecimal(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDecimal) {
             listener.exitDecimal(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecimal) {
            return visitor.visitDecimal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PoolPathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_poolPath;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPoolPath) {
             listener.enterPoolPath(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPoolPath) {
             listener.exitPoolPath(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPoolPath) {
            return visitor.visitPoolPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerAtomExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0)!;
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_triggerAtomExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTriggerAtomExpression) {
             listener.enterTriggerAtomExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTriggerAtomExpression) {
             listener.exitTriggerAtomExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerAtomExpression) {
            return visitor.visitTriggerAtomExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerActionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_KILL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KILL, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MOVE, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_triggerActionExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTriggerActionExpression) {
             listener.enterTriggerActionExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTriggerActionExpression) {
             listener.exitTriggerActionExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerActionExpression) {
            return visitor.visitTriggerActionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PoolAssignContext extends antlr.ParserRuleContext {
    public _allocFraction?: Token | null;
    public _parallelism?: Token | null;
    public _policy?: Token | null;
    public _path?: PoolPathContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALLOC_FRACTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALLOC_FRACTION, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public KW_QUERY_PARALLELISM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUERY_PARALLELISM, 0);
    }
    public KW_SCHEDULING_POLICY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEDULING_POLICY, 0);
    }
    public KW_PATH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PATH, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_poolAssign;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPoolAssign) {
             listener.enterPoolAssign(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPoolAssign) {
             listener.exitPoolAssign(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPoolAssign) {
            return visitor.visitPoolAssign(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PoolAssignListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public poolAssign(): PoolAssignContext[];
    public poolAssign(i: number): PoolAssignContext | null;
    public poolAssign(i?: number): PoolAssignContext[] | PoolAssignContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PoolAssignContext);
        }

        return this.getRuleContext(i, PoolAssignContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_poolAssignList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPoolAssignList) {
             listener.enterPoolAssignList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPoolAssignList) {
             listener.exitPoolAssignList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPoolAssignList) {
            return visitor.visitPoolAssignList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
