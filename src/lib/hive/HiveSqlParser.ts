// Generated from dt-sql-parser/src/grammar/hive/HiveSqlParser.g4 by ANTLR 4.13.1

// @ts-nocheck

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { HiveSqlParserListener } from "./HiveSqlParserListener.js";
import { HiveSqlParserVisitor } from "./HiveSqlParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


import { SQLParserBase } from '../SQLParserBase';


export class HiveSqlParser extends SQLParserBase {
    public static readonly KW_ABORT = 1;
    public static readonly KW_ACTIVATE = 2;
    public static readonly KW_ACTIVE = 3;
    public static readonly KW_ADD = 4;
    public static readonly KW_ADMIN = 5;
    public static readonly KW_AFTER = 6;
    public static readonly KW_ALL = 7;
    public static readonly KW_ALLOC_FRACTION = 8;
    public static readonly KW_ALTER = 9;
    public static readonly KW_ANALYZE = 10;
    public static readonly KW_AND = 11;
    public static readonly KW_ANTI = 12;
    public static readonly KW_ANY = 13;
    public static readonly KW_APPLICATION = 14;
    public static readonly KW_ARCHIVE = 15;
    public static readonly KW_ARRAY = 16;
    public static readonly KW_AS = 17;
    public static readonly KW_ASC = 18;
    public static readonly KW_AST = 19;
    public static readonly KW_AT = 20;
    public static readonly KW_AUTHORIZATION = 21;
    public static readonly KW_AUTOCOMMIT = 22;
    public static readonly KW_BATCH = 23;
    public static readonly KW_BEFORE = 24;
    public static readonly KW_BETWEEN = 25;
    public static readonly KW_BIGINT = 26;
    public static readonly KW_BINARY = 27;
    public static readonly KW_BOOLEAN = 28;
    public static readonly KW_BOTH = 29;
    public static readonly KW_BUCKET = 30;
    public static readonly KW_BUCKETS = 31;
    public static readonly KW_BY = 32;
    public static readonly KW_CACHE = 33;
    public static readonly KW_CASCADE = 34;
    public static readonly KW_CASE = 35;
    public static readonly KW_CAST = 36;
    public static readonly KW_CBO = 37;
    public static readonly KW_CHANGE = 38;
    public static readonly KW_CHAR = 39;
    public static readonly KW_CHECK = 40;
    public static readonly KW_CLUSTER = 41;
    public static readonly KW_CLUSTERED = 42;
    public static readonly KW_CLUSTERSTATUS = 43;
    public static readonly KW_COLLECTION = 44;
    public static readonly KW_COLUMN = 45;
    public static readonly KW_COLUMNS = 46;
    public static readonly KW_COMMENT = 47;
    public static readonly KW_COMMIT = 48;
    public static readonly KW_COMPACT = 49;
    public static readonly KW_COMPACTIONS = 50;
    public static readonly KW_COMPACT_ID = 51;
    public static readonly KW_COMPUTE = 52;
    public static readonly KW_CONCATENATE = 53;
    public static readonly KW_CONF = 54;
    public static readonly KW_CONSTRAINT = 55;
    public static readonly KW_CONTINUE = 56;
    public static readonly KW_COST = 57;
    public static readonly KW_CREATE = 58;
    public static readonly KW_CRON = 59;
    public static readonly KW_CROSS = 60;
    public static readonly KW_CUBE = 61;
    public static readonly KW_CURRENT = 62;
    public static readonly KW_CURRENT_DATE = 63;
    public static readonly KW_CURRENT_TIMESTAMP = 64;
    public static readonly KW_CURSOR = 65;
    public static readonly KW_DATA = 66;
    public static readonly KW_DATABASE = 67;
    public static readonly KW_DATABASES = 68;
    public static readonly KW_DATACONNECTOR = 69;
    public static readonly KW_DATACONNECTORS = 70;
    public static readonly KW_DATE = 71;
    public static readonly KW_DATETIME = 72;
    public static readonly KW_DAY = 73;
    public static readonly KW_DAYS = 74;
    public static readonly KW_DAYOFWEEK = 75;
    public static readonly KW_DBPROPERTIES = 76;
    public static readonly KW_DCPROPERTIES = 77;
    public static readonly KW_DDL = 78;
    public static readonly KW_DEBUG = 79;
    public static readonly KW_DEC = 80;
    public static readonly KW_DECIMAL = 81;
    public static readonly KW_NUMERIC = 82;
    public static readonly KW_DEFAULT = 83;
    public static readonly KW_DEFERRED = 84;
    public static readonly KW_DEFINED = 85;
    public static readonly KW_DELETE = 86;
    public static readonly KW_DELIMITED = 87;
    public static readonly KW_DEPENDENCY = 88;
    public static readonly KW_DESC = 89;
    public static readonly KW_DESCRIBE = 90;
    public static readonly KW_DETAIL = 91;
    public static readonly KW_DIRECTORIES = 92;
    public static readonly KW_DIRECTORY = 93;
    public static readonly KW_DISABLE = 94;
    public static readonly KW_DISABLED = 95;
    public static readonly KW_DISTINCT = 96;
    public static readonly KW_DISTRIBUTE = 97;
    public static readonly KW_DISTRIBUTED = 98;
    public static readonly KW_DO = 99;
    public static readonly KW_DOUBLE = 100;
    public static readonly KW_DROP = 101;
    public static readonly KW_RECOVER = 102;
    public static readonly KW_DUMP = 103;
    public static readonly KW_ELEM_TYPE = 104;
    public static readonly KW_ELSE = 105;
    public static readonly KW_ENABLE = 106;
    public static readonly KW_ENABLED = 107;
    public static readonly KW_END = 108;
    public static readonly KW_ENFORCED = 109;
    public static readonly KW_ESCAPED = 110;
    public static readonly KW_EVERY = 111;
    public static readonly KW_EXCEPT = 112;
    public static readonly KW_EXCHANGE = 113;
    public static readonly KW_EXCLUSIVE = 114;
    public static readonly KW_EXECUTE = 115;
    public static readonly KW_EXECUTED = 116;
    public static readonly KW_EXISTS = 117;
    public static readonly KW_EXPIRE_SNAPSHOTS = 118;
    public static readonly KW_EXPLAIN = 119;
    public static readonly KW_EXPORT = 120;
    public static readonly KW_EXPRESSION = 121;
    public static readonly KW_EXTENDED = 122;
    public static readonly KW_EXTERNAL = 123;
    public static readonly KW_EXTRACT = 124;
    public static readonly KW_FALSE = 125;
    public static readonly KW_FETCH = 126;
    public static readonly KW_FIELDS = 127;
    public static readonly KW_FILE = 128;
    public static readonly KW_FILEFORMAT = 129;
    public static readonly KW_FIRST = 130;
    public static readonly KW_FLOAT = 131;
    public static readonly KW_FLOOR = 132;
    public static readonly KW_FOLLOWING = 133;
    public static readonly KW_FOR = 134;
    public static readonly KW_FORCE = 135;
    public static readonly KW_FOREIGN = 136;
    public static readonly KW_FORMAT = 137;
    public static readonly KW_FORMATTED = 138;
    public static readonly KW_FROM = 139;
    public static readonly KW_FULL = 140;
    public static readonly KW_FUNCTION = 141;
    public static readonly KW_FUNCTIONS = 142;
    public static readonly KW_GRANT = 143;
    public static readonly KW_GROUP = 144;
    public static readonly KW_GROUPING = 145;
    public static readonly KW_HAVING = 146;
    public static readonly KW_HOLD_DDLTIME = 147;
    public static readonly KW_HOUR = 148;
    public static readonly KW_HOURS = 149;
    public static readonly KW_IDXPROPERTIES = 150;
    public static readonly KW_IF = 151;
    public static readonly KW_IGNORE = 152;
    public static readonly KW_IMPORT = 153;
    public static readonly KW_IN = 154;
    public static readonly KW_INDEX = 155;
    public static readonly KW_INDEXES = 156;
    public static readonly KW_INNER = 157;
    public static readonly KW_INPATH = 158;
    public static readonly KW_INPUTDRIVER = 159;
    public static readonly KW_INPUTFORMAT = 160;
    public static readonly KW_INSERT = 161;
    public static readonly KW_INT = 162;
    public static readonly KW_INTEGER = 163;
    public static readonly KW_INTERSECT = 164;
    public static readonly KW_INTERVAL = 165;
    public static readonly KW_INTO = 166;
    public static readonly KW_IS = 167;
    public static readonly KW_ISOLATION = 168;
    public static readonly KW_ITEMS = 169;
    public static readonly KW_JAR = 170;
    public static readonly KW_JOIN = 171;
    public static readonly KW_JOINCOST = 172;
    public static readonly KW_KEY = 173;
    public static readonly KW_KEYS = 174;
    public static readonly KW_KEY_TYPE = 175;
    public static readonly KW_KILL = 176;
    public static readonly KW_LAST = 177;
    public static readonly KW_LATERAL = 178;
    public static readonly KW_LEADING = 179;
    public static readonly KW_LEFT = 180;
    public static readonly KW_LESS = 181;
    public static readonly KW_LEVEL = 182;
    public static readonly KW_LIFECYCLE = 183;
    public static readonly KW_LIKE = 184;
    public static readonly KW_LIMIT = 185;
    public static readonly KW_LINES = 186;
    public static readonly KW_LOAD = 187;
    public static readonly KW_LOCAL = 188;
    public static readonly KW_LOCATION = 189;
    public static readonly KW_LOCK = 190;
    public static readonly KW_LOCKS = 191;
    public static readonly KW_LOGICAL = 192;
    public static readonly KW_LONG = 193;
    public static readonly KW_MACRO = 194;
    public static readonly KW_MANAGED = 195;
    public static readonly KW_MANAGEDLOCATION = 196;
    public static readonly KW_MANAGEMENT = 197;
    public static readonly KW_MAP = 198;
    public static readonly KW_MAPJOIN = 199;
    public static readonly KW_MAPPING = 200;
    public static readonly KW_MATCHED = 201;
    public static readonly KW_MATERIALIZED = 202;
    public static readonly KW_MERGE = 203;
    public static readonly KW_METADATA = 204;
    public static readonly KW_MINUS = 205;
    public static readonly KW_MINUTE = 206;
    public static readonly KW_MINUTES = 207;
    public static readonly KW_MONTH = 208;
    public static readonly KW_MONTHS = 209;
    public static readonly KW_MORE = 210;
    public static readonly KW_MOVE = 211;
    public static readonly KW_MSCK = 212;
    public static readonly KW_NONE = 213;
    public static readonly KW_NORELY = 214;
    public static readonly KW_NOSCAN = 215;
    public static readonly KW_NOT = 216;
    public static readonly KW_NOVALIDATE = 217;
    public static readonly KW_NO_DROP = 218;
    public static readonly KW_NULL = 219;
    public static readonly KW_NULLS = 220;
    public static readonly KW_OF = 221;
    public static readonly KW_OFFLINE = 222;
    public static readonly KW_OFFSET = 223;
    public static readonly KW_ON = 224;
    public static readonly KW_ONLY = 225;
    public static readonly KW_OPERATOR = 226;
    public static readonly KW_OPTION = 227;
    public static readonly KW_OR = 228;
    public static readonly KW_ORDER = 229;
    public static readonly KW_OUT = 230;
    public static readonly KW_OUTER = 231;
    public static readonly KW_OUTPUTDRIVER = 232;
    public static readonly KW_OUTPUTFORMAT = 233;
    public static readonly KW_OVER = 234;
    public static readonly KW_OVERWRITE = 235;
    public static readonly KW_OWNER = 236;
    public static readonly KW_PARTITION = 237;
    public static readonly KW_PARTITIONED = 238;
    public static readonly KW_PARTITIONS = 239;
    public static readonly KW_PATH = 240;
    public static readonly KW_PERCENT = 241;
    public static readonly KW_PKFK_JOIN = 242;
    public static readonly KW_PLAN = 243;
    public static readonly KW_PLANS = 244;
    public static readonly KW_PLUS = 245;
    public static readonly KW_POOL = 246;
    public static readonly KW_PRECEDING = 247;
    public static readonly KW_PRECISION = 248;
    public static readonly KW_PREPARE = 249;
    public static readonly KW_PRESERVE = 250;
    public static readonly KW_PRIMARY = 251;
    public static readonly KW_PRINCIPALS = 252;
    public static readonly KW_PROCEDURE = 253;
    public static readonly KW_PROTECTION = 254;
    public static readonly KW_PURGE = 255;
    public static readonly KW_QUALIFY = 256;
    public static readonly KW_QUARTER = 257;
    public static readonly KW_QUERY = 258;
    public static readonly KW_QUERY_PARALLELISM = 259;
    public static readonly KW_RANGE = 260;
    public static readonly KW_READ = 261;
    public static readonly KW_READONLY = 262;
    public static readonly KW_READS = 263;
    public static readonly KW_REAL = 264;
    public static readonly KW_REBUILD = 265;
    public static readonly KW_RECORDREADER = 266;
    public static readonly KW_RECORDWRITER = 267;
    public static readonly KW_REDUCE = 268;
    public static readonly KW_REFERENCES = 269;
    public static readonly KW_REGEXP = 270;
    public static readonly KW_RELOAD = 271;
    public static readonly KW_RELY = 272;
    public static readonly KW_REMOTE = 273;
    public static readonly KW_RENAME = 274;
    public static readonly KW_REOPTIMIZATION = 275;
    public static readonly KW_REPAIR = 276;
    public static readonly KW_REPL = 277;
    public static readonly KW_REPLACE = 278;
    public static readonly KW_REPLICATION = 279;
    public static readonly KW_RESOURCE = 280;
    public static readonly KW_RESPECT = 281;
    public static readonly KW_RESTRICT = 282;
    public static readonly KW_REVOKE = 283;
    public static readonly KW_REWRITE = 284;
    public static readonly KW_RIGHT = 285;
    public static readonly KW_RLIKE = 286;
    public static readonly KW_ROLE = 287;
    public static readonly KW_ROLES = 288;
    public static readonly KW_ROLLBACK = 289;
    public static readonly KW_ROLLUP = 290;
    public static readonly KW_ROW = 291;
    public static readonly KW_ROWS = 292;
    public static readonly KW_SCHEDULED = 293;
    public static readonly KW_SCHEDULING_POLICY = 294;
    public static readonly KW_SCHEMA = 295;
    public static readonly KW_SCHEMAS = 296;
    public static readonly KW_SECOND = 297;
    public static readonly KW_SECONDS = 298;
    public static readonly KW_SELECT = 299;
    public static readonly KW_SEMI = 300;
    public static readonly KW_SERDE = 301;
    public static readonly KW_SERDEPROPERTIES = 302;
    public static readonly KW_SERVER = 303;
    public static readonly KW_SET = 304;
    public static readonly KW_SETS = 305;
    public static readonly KW_SET_CURRENT_SNAPSHOT = 306;
    public static readonly KW_SHARED = 307;
    public static readonly KW_SHOW = 308;
    public static readonly KW_SHOW_DATABASE = 309;
    public static readonly KW_SKEWED = 310;
    public static readonly KW_SMALLINT = 311;
    public static readonly KW_SNAPSHOT = 312;
    public static readonly KW_SOME = 313;
    public static readonly KW_SORT = 314;
    public static readonly KW_SORTED = 315;
    public static readonly KW_SPEC = 316;
    public static readonly KW_SSL = 317;
    public static readonly KW_START = 318;
    public static readonly KW_STATISTICS = 319;
    public static readonly KW_STATUS = 320;
    public static readonly KW_STORED = 321;
    public static readonly KW_STREAMTABLE = 322;
    public static readonly KW_STRING = 323;
    public static readonly KW_STRUCT = 324;
    public static readonly KW_SUMMARY = 325;
    public static readonly KW_SYNC = 326;
    public static readonly KW_SYSTEM_TIME = 327;
    public static readonly KW_SYSTEM_VERSION = 328;
    public static readonly KW_TABLE = 329;
    public static readonly KW_TABLES = 330;
    public static readonly KW_TABLESAMPLE = 331;
    public static readonly KW_TBLPROPERTIES = 332;
    public static readonly KW_TEMPORARY = 333;
    public static readonly KW_TERMINATED = 334;
    public static readonly KW_THEN = 335;
    public static readonly KW_TIME = 336;
    public static readonly KW_TIMESTAMP = 337;
    public static readonly KW_TIMESTAMPLOCALTZ = 338;
    public static readonly KW_TIMESTAMPTZ = 339;
    public static readonly KW_TINYINT = 340;
    public static readonly KW_TO = 341;
    public static readonly KW_TOUCH = 342;
    public static readonly KW_TRAILING = 343;
    public static readonly KW_TRANSACTION = 344;
    public static readonly KW_TRANSACTIONAL = 345;
    public static readonly KW_TRANSACTIONS = 346;
    public static readonly KW_TRANSFORM = 347;
    public static readonly KW_TRIGGER = 348;
    public static readonly KW_TRIM = 349;
    public static readonly KW_TRUE = 350;
    public static readonly KW_TRUNCATE = 351;
    public static readonly KW_TYPE = 352;
    public static readonly KW_UNARCHIVE = 353;
    public static readonly KW_UNBOUNDED = 354;
    public static readonly KW_UNDO = 355;
    public static readonly KW_UNION = 356;
    public static readonly KW_UNIONTYPE = 357;
    public static readonly KW_UNIQUE = 358;
    public static readonly KW_UNIQUEJOIN = 359;
    public static readonly KW_UNKNOWN = 360;
    public static readonly KW_UNLOCK = 361;
    public static readonly KW_UNMANAGED = 362;
    public static readonly KW_UNSET = 363;
    public static readonly KW_UNSIGNED = 364;
    public static readonly KW_UPDATE = 365;
    public static readonly KW_URI = 366;
    public static readonly KW_URL = 367;
    public static readonly KW_USE = 368;
    public static readonly KW_USER = 369;
    public static readonly KW_USING = 370;
    public static readonly KW_UTC = 371;
    public static readonly KW_UTCTIMESTAMP = 372;
    public static readonly KW_VALIDATE = 373;
    public static readonly KW_VALUES = 374;
    public static readonly KW_VALUE_TYPE = 375;
    public static readonly KW_VARCHAR = 376;
    public static readonly KW_VECTORIZATION = 377;
    public static readonly KW_VIEW = 378;
    public static readonly KW_VIEWS = 379;
    public static readonly KW_WAIT = 380;
    public static readonly KW_WEEK = 381;
    public static readonly KW_WEEKS = 382;
    public static readonly KW_WHEN = 383;
    public static readonly KW_WHERE = 384;
    public static readonly KW_WHILE = 385;
    public static readonly KW_WINDOW = 386;
    public static readonly KW_WITH = 387;
    public static readonly KW_WITHIN = 388;
    public static readonly KW_WORK = 389;
    public static readonly KW_WORKLOAD = 390;
    public static readonly KW_WRITE = 391;
    public static readonly KW_YEAR = 392;
    public static readonly KW_YEARS = 393;
    public static readonly KW_ZONE = 394;
    public static readonly DOT = 395;
    public static readonly COLON = 396;
    public static readonly COMMA = 397;
    public static readonly SEMICOLON = 398;
    public static readonly LPAREN = 399;
    public static readonly RPAREN = 400;
    public static readonly LSQUARE = 401;
    public static readonly RSQUARE = 402;
    public static readonly LCURLY = 403;
    public static readonly RCURLY = 404;
    public static readonly EQUAL = 405;
    public static readonly EQUAL_NS = 406;
    public static readonly NOTEQUAL = 407;
    public static readonly LESSTHANOREQUALTO = 408;
    public static readonly LESSTHAN = 409;
    public static readonly GREATERTHANOREQUALTO = 410;
    public static readonly GREATERTHAN = 411;
    public static readonly DIVIDE = 412;
    public static readonly PLUS = 413;
    public static readonly MINUS = 414;
    public static readonly STAR = 415;
    public static readonly MOD = 416;
    public static readonly DIV = 417;
    public static readonly BITWISENOT = 418;
    public static readonly AMPERSAND = 419;
    public static readonly TILDE = 420;
    public static readonly BITWISEOR = 421;
    public static readonly CONCATENATE = 422;
    public static readonly BITWISEXOR = 423;
    public static readonly QUESTION = 424;
    public static readonly DOLLAR = 425;
    public static readonly StringLiteral = 426;
    public static readonly CharSetLiteral = 427;
    public static readonly IntegralLiteral = 428;
    public static readonly NumberLiteral = 429;
    public static readonly ByteLengthLiteral = 430;
    public static readonly Number = 431;
    public static readonly Identifier = 432;
    public static readonly CharSetName = 433;
    public static readonly WHITE_SPACE = 434;
    public static readonly LINE_COMMENT = 435;
    public static readonly QUERY_HINT = 436;
    public static readonly SHOW_HINT = 437;
    public static readonly HIDDEN_HINT = 438;
    public static readonly RULE_program = 0;
    public static readonly RULE_statement = 1;
    public static readonly RULE_explainStatement = 2;
    public static readonly RULE_explainOption = 3;
    public static readonly RULE_vectorizatonDetail = 4;
    public static readonly RULE_execStatement = 5;
    public static readonly RULE_loadStatement = 6;
    public static readonly RULE_replicationClause = 7;
    public static readonly RULE_exportStatement = 8;
    public static readonly RULE_importStatement = 9;
    public static readonly RULE_replDumpStatement = 10;
    public static readonly RULE_replDbPolicy = 11;
    public static readonly RULE_replLoadStatement = 12;
    public static readonly RULE_replTableLevelPolicy = 13;
    public static readonly RULE_ddlStatement = 14;
    public static readonly RULE_ifExists = 15;
    public static readonly RULE_ifNotExists = 16;
    public static readonly RULE_restrictOrCascade = 17;
    public static readonly RULE_rewriteEnabled = 18;
    public static readonly RULE_rewriteDisabled = 19;
    public static readonly RULE_storedAsDirs = 20;
    public static readonly RULE_createDatabaseStatement = 21;
    public static readonly RULE_dbConnectorName = 22;
    public static readonly RULE_switchDatabaseStatement = 23;
    public static readonly RULE_dropDatabaseStatement = 24;
    public static readonly RULE_databaseComment = 25;
    public static readonly RULE_truncateTableStatement = 26;
    public static readonly RULE_dropTableStatement = 27;
    public static readonly RULE_inputFileFormat = 28;
    public static readonly RULE_tabTypeExpr = 29;
    public static readonly RULE_partTypeExpr = 30;
    public static readonly RULE_tabPartColTypeExpr = 31;
    public static readonly RULE_descStatement = 32;
    public static readonly RULE_analyzeStatement = 33;
    public static readonly RULE_from_in = 34;
    public static readonly RULE_db_schema = 35;
    public static readonly RULE_showStatement = 36;
    public static readonly RULE_showTablesFilterExpr = 37;
    public static readonly RULE_lockStatement = 38;
    public static readonly RULE_lockDatabase = 39;
    public static readonly RULE_lockMode = 40;
    public static readonly RULE_unlockStatement = 41;
    public static readonly RULE_unlockDatabase = 42;
    public static readonly RULE_createRoleStatement = 43;
    public static readonly RULE_dropRoleStatement = 44;
    public static readonly RULE_grantPrivileges = 45;
    public static readonly RULE_revokePrivileges = 46;
    public static readonly RULE_grantRole = 47;
    public static readonly RULE_revokeRole = 48;
    public static readonly RULE_showRoleGrants = 49;
    public static readonly RULE_showRoles = 50;
    public static readonly RULE_showCurrentRole = 51;
    public static readonly RULE_setRole = 52;
    public static readonly RULE_showGrants = 53;
    public static readonly RULE_showRolePrincipals = 54;
    public static readonly RULE_privilegeIncludeColObject = 55;
    public static readonly RULE_privilegeObject = 56;
    public static readonly RULE_privObject = 57;
    public static readonly RULE_privObjectCols = 58;
    public static readonly RULE_privilegeList = 59;
    public static readonly RULE_privlegeDef = 60;
    public static readonly RULE_privilegeType = 61;
    public static readonly RULE_principalSpecification = 62;
    public static readonly RULE_principalName = 63;
    public static readonly RULE_principalAlterName = 64;
    public static readonly RULE_withGrantOption = 65;
    public static readonly RULE_grantOptionFor = 66;
    public static readonly RULE_adminOptionFor = 67;
    public static readonly RULE_withAdminOption = 68;
    public static readonly RULE_metastoreCheck = 69;
    public static readonly RULE_resourceList = 70;
    public static readonly RULE_resource = 71;
    public static readonly RULE_resourceType = 72;
    public static readonly RULE_createFunctionStatement = 73;
    public static readonly RULE_dropFunctionStatement = 74;
    public static readonly RULE_reloadFunctionsStatement = 75;
    public static readonly RULE_createMacroStatement = 76;
    public static readonly RULE_dropMacroStatement = 77;
    public static readonly RULE_createIndexStatement = 78;
    public static readonly RULE_dropIndexStatement = 79;
    public static readonly RULE_createViewStatement = 80;
    public static readonly RULE_viewPartition = 81;
    public static readonly RULE_viewOrganization = 82;
    public static readonly RULE_viewClusterSpec = 83;
    public static readonly RULE_viewComplexSpec = 84;
    public static readonly RULE_viewDistSpec = 85;
    public static readonly RULE_viewSortSpec = 86;
    public static readonly RULE_dropViewStatement = 87;
    public static readonly RULE_createMaterializedViewStatement = 88;
    public static readonly RULE_dropMaterializedViewStatement = 89;
    public static readonly RULE_createScheduledQueryStatement = 90;
    public static readonly RULE_dropScheduledQueryStatement = 91;
    public static readonly RULE_alterScheduledQueryStatement = 92;
    public static readonly RULE_alterScheduledQueryChange = 93;
    public static readonly RULE_scheduleSpec = 94;
    public static readonly RULE_executedAsSpec = 95;
    public static readonly RULE_definedAsSpec = 96;
    public static readonly RULE_showStmtIdentifier = 97;
    public static readonly RULE_tableComment = 98;
    public static readonly RULE_tableLifecycle = 99;
    public static readonly RULE_createTablePartitionSpec = 100;
    public static readonly RULE_createTablePartitionColumnTypeSpec = 101;
    public static readonly RULE_partitionTransformSpec = 102;
    public static readonly RULE_partitionTransformType = 103;
    public static readonly RULE_tableBuckets = 104;
    public static readonly RULE_tableSkewed = 105;
    public static readonly RULE_rowFormat = 106;
    public static readonly RULE_recordReader = 107;
    public static readonly RULE_recordWriter = 108;
    public static readonly RULE_rowFormatSerde = 109;
    public static readonly RULE_rowFormatDelimited = 110;
    public static readonly RULE_tableRowFormat = 111;
    public static readonly RULE_tablePropertiesPrefixed = 112;
    public static readonly RULE_tableProperties = 113;
    public static readonly RULE_tablePropertiesList = 114;
    public static readonly RULE_keyValueProperties = 115;
    public static readonly RULE_keyValuePropertyList = 116;
    public static readonly RULE_keyValueProperty = 117;
    public static readonly RULE_tableRowFormatFieldIdentifier = 118;
    public static readonly RULE_tableRowFormatCollItemsIdentifier = 119;
    public static readonly RULE_tableRowFormatMapKeysIdentifier = 120;
    public static readonly RULE_tableRowFormatLinesIdentifier = 121;
    public static readonly RULE_tableRowNullFormat = 122;
    public static readonly RULE_tableFileFormat = 123;
    public static readonly RULE_columnNameTypeList = 124;
    public static readonly RULE_columnNameTypeOrConstraintList = 125;
    public static readonly RULE_columnNameColonTypeList = 126;
    public static readonly RULE_columnNameList = 127;
    public static readonly RULE_columnName = 128;
    public static readonly RULE_columnNameCreate = 129;
    public static readonly RULE_extColumnName = 130;
    public static readonly RULE_columnNameOrderList = 131;
    public static readonly RULE_columnParenthesesList = 132;
    public static readonly RULE_enableValidateSpecification = 133;
    public static readonly RULE_enableSpecification = 134;
    public static readonly RULE_validateSpecification = 135;
    public static readonly RULE_enforcedSpecification = 136;
    public static readonly RULE_relySpecification = 137;
    public static readonly RULE_createConstraint = 138;
    public static readonly RULE_alterConstraintWithName = 139;
    public static readonly RULE_tableLevelConstraint = 140;
    public static readonly RULE_pkUkConstraint = 141;
    public static readonly RULE_checkConstraint = 142;
    public static readonly RULE_createForeignKey = 143;
    public static readonly RULE_alterForeignKeyWithName = 144;
    public static readonly RULE_skewedValueElement = 145;
    public static readonly RULE_skewedColumnValuePairList = 146;
    public static readonly RULE_skewedColumnValuePair = 147;
    public static readonly RULE_constantList = 148;
    public static readonly RULE_orderSpecification = 149;
    public static readonly RULE_nullOrdering = 150;
    public static readonly RULE_columnNameOrder = 151;
    public static readonly RULE_columnNameCommentList = 152;
    public static readonly RULE_columnNameComment = 153;
    public static readonly RULE_columnRefOrder = 154;
    public static readonly RULE_columnNameType = 155;
    public static readonly RULE_columnNameTypeOrConstraint = 156;
    public static readonly RULE_tableConstraint = 157;
    public static readonly RULE_columnNameTypeConstraint = 158;
    public static readonly RULE_columnConstraint = 159;
    public static readonly RULE_foreignKeyConstraint = 160;
    public static readonly RULE_colConstraint = 161;
    public static readonly RULE_alterColumnConstraint = 162;
    public static readonly RULE_alterForeignKeyConstraint = 163;
    public static readonly RULE_alterColConstraint = 164;
    public static readonly RULE_columnConstraintType = 165;
    public static readonly RULE_defaultVal = 166;
    public static readonly RULE_tableConstraintType = 167;
    public static readonly RULE_constraintOptsCreate = 168;
    public static readonly RULE_constraintOptsAlter = 169;
    public static readonly RULE_columnNameColonType = 170;
    public static readonly RULE_columnType = 171;
    public static readonly RULE_columnTypeList = 172;
    public static readonly RULE_type = 173;
    public static readonly RULE_primitiveType = 174;
    public static readonly RULE_listType = 175;
    public static readonly RULE_structType = 176;
    public static readonly RULE_mapType = 177;
    public static readonly RULE_unionType = 178;
    public static readonly RULE_setOperator = 179;
    public static readonly RULE_queryStatementExpression = 180;
    public static readonly RULE_queryStatementExpressionBody = 181;
    public static readonly RULE_withClause = 182;
    public static readonly RULE_cteStatement = 183;
    public static readonly RULE_fromStatement = 184;
    public static readonly RULE_singleFromStatement = 185;
    public static readonly RULE_regularBody = 186;
    public static readonly RULE_atomSelectStatement = 187;
    public static readonly RULE_selectStatement = 188;
    public static readonly RULE_setOpSelectStatement = 189;
    public static readonly RULE_selectStatementWithCTE = 190;
    public static readonly RULE_insertClause = 191;
    public static readonly RULE_destination = 192;
    public static readonly RULE_limitClause = 193;
    public static readonly RULE_columnAssignmentClause = 194;
    public static readonly RULE_precedencePlusExpressionOrDefault = 195;
    public static readonly RULE_setColumnsClause = 196;
    public static readonly RULE_sqlTransactionStatement = 197;
    public static readonly RULE_transactionMode = 198;
    public static readonly RULE_whenClauses = 199;
    public static readonly RULE_whenNotMatchedClause = 200;
    public static readonly RULE_whenMatchedAndClause = 201;
    public static readonly RULE_whenMatchedThenClause = 202;
    public static readonly RULE_compactionPool = 203;
    public static readonly RULE_compactionType = 204;
    public static readonly RULE_compactionStatus = 205;
    public static readonly RULE_alterStatement = 206;
    public static readonly RULE_alterTableStatementSuffix = 207;
    public static readonly RULE_alterTblPartitionStatementSuffix = 208;
    public static readonly RULE_alterViewStatementSuffix = 209;
    public static readonly RULE_alterDatabaseStatementSuffix = 210;
    public static readonly RULE_alterDataConnectorStatementSuffix = 211;
    public static readonly RULE_locationPath = 212;
    public static readonly RULE_alterStatementSuffixDropPartitions = 213;
    public static readonly RULE_skewedLocationMap = 214;
    public static readonly RULE_alterStatementSuffixExecute = 215;
    public static readonly RULE_fileFormat = 216;
    public static readonly RULE_likeTableOrFile = 217;
    public static readonly RULE_createTableStatement = 218;
    public static readonly RULE_createDataConnectorStatement = 219;
    public static readonly RULE_dropDataConnectorStatement = 220;
    public static readonly RULE_tableAllColumns = 221;
    public static readonly RULE_expressionList = 222;
    public static readonly RULE_aliasList = 223;
    public static readonly RULE_fromClause = 224;
    public static readonly RULE_fromSource = 225;
    public static readonly RULE_atomjoinSource = 226;
    public static readonly RULE_joinSource = 227;
    public static readonly RULE_joinSourcePart = 228;
    public static readonly RULE_uniqueJoinSource = 229;
    public static readonly RULE_joinToken = 230;
    public static readonly RULE_lateralView = 231;
    public static readonly RULE_tableAlias = 232;
    public static readonly RULE_tableSample = 233;
    public static readonly RULE_tableSource = 234;
    public static readonly RULE_asOfClause = 235;
    public static readonly RULE_dbSchemaName = 236;
    public static readonly RULE_dbSchemaNameCreate = 237;
    public static readonly RULE_tableOrView = 238;
    public static readonly RULE_tableName = 239;
    public static readonly RULE_tableNameCreate = 240;
    public static readonly RULE_viewName = 241;
    public static readonly RULE_viewNameCreate = 242;
    public static readonly RULE_subQuerySource = 243;
    public static readonly RULE_partitioningSpec = 244;
    public static readonly RULE_partitionTableFunctionSource = 245;
    public static readonly RULE_partitionedTableFunction = 246;
    public static readonly RULE_whereClause = 247;
    public static readonly RULE_valuesClause = 248;
    public static readonly RULE_virtualTableSource = 249;
    public static readonly RULE_selectClause = 250;
    public static readonly RULE_selectTrfmClause = 251;
    public static readonly RULE_selectItem = 252;
    public static readonly RULE_trfmClause = 253;
    public static readonly RULE_selectExpression = 254;
    public static readonly RULE_selectExpressionList = 255;
    public static readonly RULE_window_clause = 256;
    public static readonly RULE_window_specification = 257;
    public static readonly RULE_window_frame = 258;
    public static readonly RULE_window_frame_boundary = 259;
    public static readonly RULE_groupByClause = 260;
    public static readonly RULE_rollupStandard = 261;
    public static readonly RULE_rollupOldSyntax = 262;
    public static readonly RULE_groupingSetExpression = 263;
    public static readonly RULE_havingClause = 264;
    public static readonly RULE_qualifyClause = 265;
    public static readonly RULE_expressionOrDefault = 266;
    public static readonly RULE_firstExpressionsWithAlias = 267;
    public static readonly RULE_expressions = 268;
    public static readonly RULE_expressionsInParenthesis = 269;
    public static readonly RULE_expressionsNotInParenthesis = 270;
    public static readonly RULE_orderByClause = 271;
    public static readonly RULE_clusterByClause = 272;
    public static readonly RULE_distributeByClause = 273;
    public static readonly RULE_sortByClause = 274;
    public static readonly RULE_function_ = 275;
    public static readonly RULE_null_treatment = 276;
    public static readonly RULE_functionNameCreate = 277;
    public static readonly RULE_functionNameForDDL = 278;
    public static readonly RULE_functionNameForInvoke = 279;
    public static readonly RULE_castExpression = 280;
    public static readonly RULE_caseExpression = 281;
    public static readonly RULE_whenExpression = 282;
    public static readonly RULE_floorExpression = 283;
    public static readonly RULE_extractExpression = 284;
    public static readonly RULE_timeQualifiers = 285;
    public static readonly RULE_constant = 286;
    public static readonly RULE_intervalValue = 287;
    public static readonly RULE_intervalExpression = 288;
    public static readonly RULE_intervalQualifiers = 289;
    public static readonly RULE_expression = 290;
    public static readonly RULE_atomExpression = 291;
    public static readonly RULE_precedenceUnaryPrefixExpression = 292;
    public static readonly RULE_precedenceBitwiseXorExpression = 293;
    public static readonly RULE_precedenceStarExpression = 294;
    public static readonly RULE_precedencePlusExpression = 295;
    public static readonly RULE_precedenceConcatenateExpression = 296;
    public static readonly RULE_precedenceAmpersandExpression = 297;
    public static readonly RULE_precedenceBitwiseOrExpression = 298;
    public static readonly RULE_precedenceSimilarOperator = 299;
    public static readonly RULE_subQueryExpression = 300;
    public static readonly RULE_precedenceSimilarExpression = 301;
    public static readonly RULE_precedenceSimilarExpressionPart = 302;
    public static readonly RULE_precedenceSimilarExpressionAtom = 303;
    public static readonly RULE_precedenceSimilarExpressionIn = 304;
    public static readonly RULE_precedenceSimilarExpressionPartNot = 305;
    public static readonly RULE_precedenceDistinctOperator = 306;
    public static readonly RULE_precedenceEqualOperator = 307;
    public static readonly RULE_precedenceEqualExpression = 308;
    public static readonly RULE_isCondition = 309;
    public static readonly RULE_precedenceNotExpression = 310;
    public static readonly RULE_precedenceAndExpression = 311;
    public static readonly RULE_tableOrPartition = 312;
    public static readonly RULE_partitionSpec = 313;
    public static readonly RULE_partitionVal = 314;
    public static readonly RULE_partitionSelectorSpec = 315;
    public static readonly RULE_partitionSelectorVal = 316;
    public static readonly RULE_subQuerySelectorOperator = 317;
    public static readonly RULE_sysFuncNames = 318;
    public static readonly RULE_id_ = 319;
    public static readonly RULE_functionIdentifier = 320;
    public static readonly RULE_principalIdentifier = 321;
    public static readonly RULE_nonReserved = 322;
    public static readonly RULE_sql11ReservedKeywordsUsedAsFunctionName = 323;
    public static readonly RULE_configPropertiesItem = 324;
    public static readonly RULE_resourcePlanDdlStatements = 325;
    public static readonly RULE_mappingTypes = 326;
    public static readonly RULE_rpAssign = 327;
    public static readonly RULE_rpAssignList = 328;
    public static readonly RULE_rpUnassign = 329;
    public static readonly RULE_activate = 330;
    public static readonly RULE_enable = 331;
    public static readonly RULE_disable = 332;
    public static readonly RULE_year = 333;
    public static readonly RULE_month = 334;
    public static readonly RULE_week = 335;
    public static readonly RULE_day = 336;
    public static readonly RULE_hour = 337;
    public static readonly RULE_minute = 338;
    public static readonly RULE_second = 339;
    public static readonly RULE_decimal = 340;
    public static readonly RULE_poolPath = 341;
    public static readonly RULE_triggerAtomExpression = 342;
    public static readonly RULE_triggerActionExpression = 343;
    public static readonly RULE_poolAssign = 344;
    public static readonly RULE_poolAssignList = 345;

    public static readonly literalNames = [
        null, "'ABORT'", "'ACTIVATE'", "'ACTIVE'", "'ADD'", "'ADMIN'", "'AFTER'", 
        "'ALL'", "'ALLOC_FRACTION'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", 
        "'ANY'", "'APPLICATION'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", 
        "'AST'", "'AT'", "'AUTHORIZATION'", "'AUTOCOMMIT'", "'BATCH'", "'BEFORE'", 
        "'BETWEEN'", "'BIGINT'", "'BINARY'", "'BOOLEAN'", "'BOTH'", "'BUCKET'", 
        "'BUCKETS'", "'BY'", "'CACHE'", "'CASCADE'", "'CASE'", "'CAST'", 
        "'CBO'", "'CHANGE'", "'CHAR'", "'CHECK'", "'CLUSTER'", "'CLUSTERED'", 
        "'CLUSTERSTATUS'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", 
        "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", "'COMPACTIONID'", "'COMPUTE'", 
        "'CONCATENATE'", "'CONF'", "'CONSTRAINT'", "'CONTINUE'", "'COST'", 
        "'CREATE'", "'CRON'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
        "'CURRENT_TIMESTAMP'", "'CURSOR'", "'DATA'", "'DATABASE'", "'DATABASES'", 
        "'CONNECTOR'", "'CONNECTORS'", "'DATE'", "'DATETIME'", "'DAY'", 
        "'DAYS'", "'DAYOFWEEK'", "'DBPROPERTIES'", "'DCPROPERTIES'", "'DDL'", 
        "'DEBUG'", "'DEC'", "'DECIMAL'", "'NUMERIC'", "'DEFAULT'", "'DEFERRED'", 
        "'DEFINED'", "'DELETE'", "'DELIMITED'", "'DEPENDENCY'", "'DESC'", 
        "'DESCRIBE'", "'DETAIL'", "'DIRECTORIES'", "'DIRECTORY'", "'DISABLE'", 
        "'DISABLED'", "'DISTINCT'", "'DISTRIBUTE'", "'DISTRIBUTED'", "'DO'", 
        "'DOUBLE'", "'DROP'", "'RECOVER'", "'DUMP'", "'$ELEM$'", "'ELSE'", 
        "'ENABLE'", "'ENABLED'", "'END'", "'ENFORCED'", "'ESCAPED'", "'EVERY'", 
        "'EXCEPT'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXECUTE'", "'EXECUTED'", 
        "'EXISTS'", "'EXPIRE_SNAPSHOTS'", "'EXPLAIN'", "'EXPORT'", "'EXPRESSION'", 
        "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", 
        "'FILE'", "'FILEFORMAT'", "'FIRST'", "'FLOAT'", "'FLOOR'", "'FOLLOWING'", 
        "'FOR'", "'FORCE'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FROM'", 
        "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GRANT'", "'GROUP'", "'GROUPING'", 
        "'HAVING'", "'HOLD_DDLTIME'", "'HOUR'", "'HOURS'", "'IDXPROPERTIES'", 
        "'IF'", "'IGNORE'", "'IMPORT'", "'IN'", "'INDEX'", "'INDEXES'", 
        "'INNER'", "'INPATH'", "'INPUTDRIVER'", "'INPUTFORMAT'", "'INSERT'", 
        "'INT'", "'INTEGER'", "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", 
        "'ISOLATION'", "'ITEMS'", "'JAR'", "'JOIN'", "'JOINCOST'", "'KEY'", 
        "'KEYS'", "'$KEY$'", "'KILL'", "'LAST'", "'LATERAL'", "'LEADING'", 
        "'LEFT'", "'LESS'", "'LEVEL'", "'LIFECYCLE'", "'LIKE'", "'LIMIT'", 
        "'LINES'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCKS'", 
        "'LOGICAL'", "'LONG'", "'MACRO'", "'MANAGED'", "'MANAGEDLOCATION'", 
        "'MANAGEMENT'", "'MAP'", "'MAPJOIN'", "'MAPPING'", "'MATCHED'", 
        "'MATERIALIZED'", "'MERGE'", "'METADATA'", "'MINUS'", "'MINUTE'", 
        "'MINUTES'", "'MONTH'", "'MONTHS'", "'MORE'", "'MOVE'", "'MSCK'", 
        "'NONE'", "'NORELY'", "'NOSCAN'", "'NOT'", "'NOVALIDATE'", "'NO_DROP'", 
        "'NULL'", "'NULLS'", "'OF'", "'OFFLINE'", "'OFFSET'", "'ON'", "'ONLY'", 
        "'OPERATOR'", "'OPTION'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", 
        "'OUTPUTDRIVER'", "'OUTPUTFORMAT'", "'OVER'", "'OVERWRITE'", "'OWNER'", 
        "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PATH'", "'PERCENT'", 
        "'PKFK_JOIN'", "'PLAN'", "'PLANS'", "'PLUS'", "'POOL'", "'PRECEDING'", 
        "'PRECISION'", "'PREPARE'", "'PRESERVE'", "'PRIMARY'", "'PRINCIPALS'", 
        "'PROCEDURE'", "'PROTECTION'", "'PURGE'", "'QUALIFY'", "'QUARTER'", 
        "'QUERY'", "'QUERY_PARALLELISM'", "'RANGE'", "'READ'", "'READONLY'", 
        "'READS'", "'REAL'", "'REBUILD'", "'RECORDREADER'", "'RECORDWRITER'", 
        "'REDUCE'", "'REFERENCES'", "'REGEXP'", "'RELOAD'", "'RELY'", "'REMOTE'", 
        "'RENAME'", "'REOPTIMIZATION'", "'REPAIR'", "'REPL'", "'REPLACE'", 
        "'REPLICATION'", "'RESOURCE'", "'RESPECT'", "'RESTRICT'", "'REVOKE'", 
        "'REWRITE'", "'RIGHT'", "'RLIKE'", "'ROLE'", "'ROLES'", "'ROLLBACK'", 
        "'ROLLUP'", "'ROW'", "'ROWS'", "'SCHEDULED'", "'SCHEDULING_POLICY'", 
        "'SCHEMA'", "'SCHEMAS'", "'SECOND'", "'SECONDS'", "'SELECT'", "'SEMI'", 
        "'SERDE'", "'SERDEPROPERTIES'", "'SERVER'", "'SET'", "'SETS'", "'SET_CURRENT_SNAPSHOT'", 
        "'SHARED'", "'SHOW'", "'SHOW_DATABASE'", "'SKEWED'", "'SMALLINT'", 
        "'SNAPSHOT'", "'SOME'", "'SORT'", "'SORTED'", "'SPEC'", "'SSL'", 
        "'START'", "'STATISTICS'", "'STATUS'", "'STORED'", "'STREAMTABLE'", 
        "'STRING'", "'STRUCT'", "'SUMMARY'", "'SYNC'", "'SYSTEM_TIME'", 
        "'SYSTEM_VERSION'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TBLPROPERTIES'", 
        "'TEMPORARY'", "'TERMINATED'", "'THEN'", "'TIME'", "'TIMESTAMP'", 
        "'TIMESTAMPLOCALTZ'", "'TIMESTAMPTZ'", "'TINYINT'", "'TO'", "'TOUCH'", 
        "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONAL'", "'TRANSACTIONS'", 
        "'TRANSFORM'", "'TRIGGER'", "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'", 
        "'UNARCHIVE'", "'UNBOUNDED'", "'UNDO'", "'UNION'", "'UNIONTYPE'", 
        "'UNIQUE'", "'UNIQUEJOIN'", "'UNKNOWN'", "'UNLOCK'", "'UNMANAGED'", 
        "'UNSET'", "'UNSIGNED'", "'UPDATE'", "'URI'", "'URL'", "'USE'", 
        "'USER'", "'USING'", "'UTC'", "'UTC_TMESTAMP'", "'VALIDATE'", "'VALUES'", 
        "'$VALUE$'", "'VARCHAR'", "'VECTORIZATION'", "'VIEW'", "'VIEWS'", 
        "'WAIT'", "'WEEK'", "'WEEKS'", "'WHEN'", "'WHERE'", "'WHILE'", "'WINDOW'", 
        "'WITH'", "'WITHIN'", "'WORK'", "'WORKLOAD'", "'WRITE'", "'YEAR'", 
        "'YEARS'", "'ZONE'", "'.'", "':'", "','", "';'", "'('", "')'", "'['", 
        "']'", "'{'", "'}'", null, "'<=>'", null, "'<='", "'<'", "'>='", 
        "'>'", "'/'", "'+'", "'-'", "'*'", "'%'", "'DIV'", "'!'", "'&'", 
        "'~'", "'|'", "'||'", "'^'", "'?'", "'$'"
    ];

    public static readonly symbolicNames = [
        null, "KW_ABORT", "KW_ACTIVATE", "KW_ACTIVE", "KW_ADD", "KW_ADMIN", 
        "KW_AFTER", "KW_ALL", "KW_ALLOC_FRACTION", "KW_ALTER", "KW_ANALYZE", 
        "KW_AND", "KW_ANTI", "KW_ANY", "KW_APPLICATION", "KW_ARCHIVE", "KW_ARRAY", 
        "KW_AS", "KW_ASC", "KW_AST", "KW_AT", "KW_AUTHORIZATION", "KW_AUTOCOMMIT", 
        "KW_BATCH", "KW_BEFORE", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", 
        "KW_BOOLEAN", "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_CACHE", 
        "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CBO", "KW_CHANGE", "KW_CHAR", 
        "KW_CHECK", "KW_CLUSTER", "KW_CLUSTERED", "KW_CLUSTERSTATUS", "KW_COLLECTION", 
        "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPACT", 
        "KW_COMPACTIONS", "KW_COMPACT_ID", "KW_COMPUTE", "KW_CONCATENATE", 
        "KW_CONF", "KW_CONSTRAINT", "KW_CONTINUE", "KW_COST", "KW_CREATE", 
        "KW_CRON", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", 
        "KW_CURRENT_TIMESTAMP", "KW_CURSOR", "KW_DATA", "KW_DATABASE", "KW_DATABASES", 
        "KW_DATACONNECTOR", "KW_DATACONNECTORS", "KW_DATE", "KW_DATETIME", 
        "KW_DAY", "KW_DAYS", "KW_DAYOFWEEK", "KW_DBPROPERTIES", "KW_DCPROPERTIES", 
        "KW_DDL", "KW_DEBUG", "KW_DEC", "KW_DECIMAL", "KW_NUMERIC", "KW_DEFAULT", 
        "KW_DEFERRED", "KW_DEFINED", "KW_DELETE", "KW_DELIMITED", "KW_DEPENDENCY", 
        "KW_DESC", "KW_DESCRIBE", "KW_DETAIL", "KW_DIRECTORIES", "KW_DIRECTORY", 
        "KW_DISABLE", "KW_DISABLED", "KW_DISTINCT", "KW_DISTRIBUTE", "KW_DISTRIBUTED", 
        "KW_DO", "KW_DOUBLE", "KW_DROP", "KW_RECOVER", "KW_DUMP", "KW_ELEM_TYPE", 
        "KW_ELSE", "KW_ENABLE", "KW_ENABLED", "KW_END", "KW_ENFORCED", "KW_ESCAPED", 
        "KW_EVERY", "KW_EXCEPT", "KW_EXCHANGE", "KW_EXCLUSIVE", "KW_EXECUTE", 
        "KW_EXECUTED", "KW_EXISTS", "KW_EXPIRE_SNAPSHOTS", "KW_EXPLAIN", 
        "KW_EXPORT", "KW_EXPRESSION", "KW_EXTENDED", "KW_EXTERNAL", "KW_EXTRACT", 
        "KW_FALSE", "KW_FETCH", "KW_FIELDS", "KW_FILE", "KW_FILEFORMAT", 
        "KW_FIRST", "KW_FLOAT", "KW_FLOOR", "KW_FOLLOWING", "KW_FOR", "KW_FORCE", 
        "KW_FOREIGN", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", "KW_FULL", 
        "KW_FUNCTION", "KW_FUNCTIONS", "KW_GRANT", "KW_GROUP", "KW_GROUPING", 
        "KW_HAVING", "KW_HOLD_DDLTIME", "KW_HOUR", "KW_HOURS", "KW_IDXPROPERTIES", 
        "KW_IF", "KW_IGNORE", "KW_IMPORT", "KW_IN", "KW_INDEX", "KW_INDEXES", 
        "KW_INNER", "KW_INPATH", "KW_INPUTDRIVER", "KW_INPUTFORMAT", "KW_INSERT", 
        "KW_INT", "KW_INTEGER", "KW_INTERSECT", "KW_INTERVAL", "KW_INTO", 
        "KW_IS", "KW_ISOLATION", "KW_ITEMS", "KW_JAR", "KW_JOIN", "KW_JOINCOST", 
        "KW_KEY", "KW_KEYS", "KW_KEY_TYPE", "KW_KILL", "KW_LAST", "KW_LATERAL", 
        "KW_LEADING", "KW_LEFT", "KW_LESS", "KW_LEVEL", "KW_LIFECYCLE", 
        "KW_LIKE", "KW_LIMIT", "KW_LINES", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", 
        "KW_LOCK", "KW_LOCKS", "KW_LOGICAL", "KW_LONG", "KW_MACRO", "KW_MANAGED", 
        "KW_MANAGEDLOCATION", "KW_MANAGEMENT", "KW_MAP", "KW_MAPJOIN", "KW_MAPPING", 
        "KW_MATCHED", "KW_MATERIALIZED", "KW_MERGE", "KW_METADATA", "KW_MINUS", 
        "KW_MINUTE", "KW_MINUTES", "KW_MONTH", "KW_MONTHS", "KW_MORE", "KW_MOVE", 
        "KW_MSCK", "KW_NONE", "KW_NORELY", "KW_NOSCAN", "KW_NOT", "KW_NOVALIDATE", 
        "KW_NO_DROP", "KW_NULL", "KW_NULLS", "KW_OF", "KW_OFFLINE", "KW_OFFSET", 
        "KW_ON", "KW_ONLY", "KW_OPERATOR", "KW_OPTION", "KW_OR", "KW_ORDER", 
        "KW_OUT", "KW_OUTER", "KW_OUTPUTDRIVER", "KW_OUTPUTFORMAT", "KW_OVER", 
        "KW_OVERWRITE", "KW_OWNER", "KW_PARTITION", "KW_PARTITIONED", "KW_PARTITIONS", 
        "KW_PATH", "KW_PERCENT", "KW_PKFK_JOIN", "KW_PLAN", "KW_PLANS", 
        "KW_PLUS", "KW_POOL", "KW_PRECEDING", "KW_PRECISION", "KW_PREPARE", 
        "KW_PRESERVE", "KW_PRIMARY", "KW_PRINCIPALS", "KW_PROCEDURE", "KW_PROTECTION", 
        "KW_PURGE", "KW_QUALIFY", "KW_QUARTER", "KW_QUERY", "KW_QUERY_PARALLELISM", 
        "KW_RANGE", "KW_READ", "KW_READONLY", "KW_READS", "KW_REAL", "KW_REBUILD", 
        "KW_RECORDREADER", "KW_RECORDWRITER", "KW_REDUCE", "KW_REFERENCES", 
        "KW_REGEXP", "KW_RELOAD", "KW_RELY", "KW_REMOTE", "KW_RENAME", "KW_REOPTIMIZATION", 
        "KW_REPAIR", "KW_REPL", "KW_REPLACE", "KW_REPLICATION", "KW_RESOURCE", 
        "KW_RESPECT", "KW_RESTRICT", "KW_REVOKE", "KW_REWRITE", "KW_RIGHT", 
        "KW_RLIKE", "KW_ROLE", "KW_ROLES", "KW_ROLLBACK", "KW_ROLLUP", "KW_ROW", 
        "KW_ROWS", "KW_SCHEDULED", "KW_SCHEDULING_POLICY", "KW_SCHEMA", 
        "KW_SCHEMAS", "KW_SECOND", "KW_SECONDS", "KW_SELECT", "KW_SEMI", 
        "KW_SERDE", "KW_SERDEPROPERTIES", "KW_SERVER", "KW_SET", "KW_SETS", 
        "KW_SET_CURRENT_SNAPSHOT", "KW_SHARED", "KW_SHOW", "KW_SHOW_DATABASE", 
        "KW_SKEWED", "KW_SMALLINT", "KW_SNAPSHOT", "KW_SOME", "KW_SORT", 
        "KW_SORTED", "KW_SPEC", "KW_SSL", "KW_START", "KW_STATISTICS", "KW_STATUS", 
        "KW_STORED", "KW_STREAMTABLE", "KW_STRING", "KW_STRUCT", "KW_SUMMARY", 
        "KW_SYNC", "KW_SYSTEM_TIME", "KW_SYSTEM_VERSION", "KW_TABLE", "KW_TABLES", 
        "KW_TABLESAMPLE", "KW_TBLPROPERTIES", "KW_TEMPORARY", "KW_TERMINATED", 
        "KW_THEN", "KW_TIME", "KW_TIMESTAMP", "KW_TIMESTAMPLOCALTZ", "KW_TIMESTAMPTZ", 
        "KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRAILING", "KW_TRANSACTION", 
        "KW_TRANSACTIONAL", "KW_TRANSACTIONS", "KW_TRANSFORM", "KW_TRIGGER", 
        "KW_TRIM", "KW_TRUE", "KW_TRUNCATE", "KW_TYPE", "KW_UNARCHIVE", 
        "KW_UNBOUNDED", "KW_UNDO", "KW_UNION", "KW_UNIONTYPE", "KW_UNIQUE", 
        "KW_UNIQUEJOIN", "KW_UNKNOWN", "KW_UNLOCK", "KW_UNMANAGED", "KW_UNSET", 
        "KW_UNSIGNED", "KW_UPDATE", "KW_URI", "KW_URL", "KW_USE", "KW_USER", 
        "KW_USING", "KW_UTC", "KW_UTCTIMESTAMP", "KW_VALIDATE", "KW_VALUES", 
        "KW_VALUE_TYPE", "KW_VARCHAR", "KW_VECTORIZATION", "KW_VIEW", "KW_VIEWS", 
        "KW_WAIT", "KW_WEEK", "KW_WEEKS", "KW_WHEN", "KW_WHERE", "KW_WHILE", 
        "KW_WINDOW", "KW_WITH", "KW_WITHIN", "KW_WORK", "KW_WORKLOAD", "KW_WRITE", 
        "KW_YEAR", "KW_YEARS", "KW_ZONE", "DOT", "COLON", "COMMA", "SEMICOLON", 
        "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", "EQUAL", 
        "EQUAL_NS", "NOTEQUAL", "LESSTHANOREQUALTO", "LESSTHAN", "GREATERTHANOREQUALTO", 
        "GREATERTHAN", "DIVIDE", "PLUS", "MINUS", "STAR", "MOD", "DIV", 
        "BITWISENOT", "AMPERSAND", "TILDE", "BITWISEOR", "CONCATENATE", 
        "BITWISEXOR", "QUESTION", "DOLLAR", "StringLiteral", "CharSetLiteral", 
        "IntegralLiteral", "NumberLiteral", "ByteLengthLiteral", "Number", 
        "Identifier", "CharSetName", "WHITE_SPACE", "LINE_COMMENT", "QUERY_HINT", 
        "SHOW_HINT", "HIDDEN_HINT"
    ];
    public static readonly ruleNames = [
        "program", "statement", "explainStatement", "explainOption", "vectorizatonDetail", 
        "execStatement", "loadStatement", "replicationClause", "exportStatement", 
        "importStatement", "replDumpStatement", "replDbPolicy", "replLoadStatement", 
        "replTableLevelPolicy", "ddlStatement", "ifExists", "ifNotExists", 
        "restrictOrCascade", "rewriteEnabled", "rewriteDisabled", "storedAsDirs", 
        "createDatabaseStatement", "dbConnectorName", "switchDatabaseStatement", 
        "dropDatabaseStatement", "databaseComment", "truncateTableStatement", 
        "dropTableStatement", "inputFileFormat", "tabTypeExpr", "partTypeExpr", 
        "tabPartColTypeExpr", "descStatement", "analyzeStatement", "from_in", 
        "db_schema", "showStatement", "showTablesFilterExpr", "lockStatement", 
        "lockDatabase", "lockMode", "unlockStatement", "unlockDatabase", 
        "createRoleStatement", "dropRoleStatement", "grantPrivileges", "revokePrivileges", 
        "grantRole", "revokeRole", "showRoleGrants", "showRoles", "showCurrentRole", 
        "setRole", "showGrants", "showRolePrincipals", "privilegeIncludeColObject", 
        "privilegeObject", "privObject", "privObjectCols", "privilegeList", 
        "privlegeDef", "privilegeType", "principalSpecification", "principalName", 
        "principalAlterName", "withGrantOption", "grantOptionFor", "adminOptionFor", 
        "withAdminOption", "metastoreCheck", "resourceList", "resource", 
        "resourceType", "createFunctionStatement", "dropFunctionStatement", 
        "reloadFunctionsStatement", "createMacroStatement", "dropMacroStatement", 
        "createIndexStatement", "dropIndexStatement", "createViewStatement", 
        "viewPartition", "viewOrganization", "viewClusterSpec", "viewComplexSpec", 
        "viewDistSpec", "viewSortSpec", "dropViewStatement", "createMaterializedViewStatement", 
        "dropMaterializedViewStatement", "createScheduledQueryStatement", 
        "dropScheduledQueryStatement", "alterScheduledQueryStatement", "alterScheduledQueryChange", 
        "scheduleSpec", "executedAsSpec", "definedAsSpec", "showStmtIdentifier", 
        "tableComment", "tableLifecycle", "createTablePartitionSpec", "createTablePartitionColumnTypeSpec", 
        "partitionTransformSpec", "partitionTransformType", "tableBuckets", 
        "tableSkewed", "rowFormat", "recordReader", "recordWriter", "rowFormatSerde", 
        "rowFormatDelimited", "tableRowFormat", "tablePropertiesPrefixed", 
        "tableProperties", "tablePropertiesList", "keyValueProperties", 
        "keyValuePropertyList", "keyValueProperty", "tableRowFormatFieldIdentifier", 
        "tableRowFormatCollItemsIdentifier", "tableRowFormatMapKeysIdentifier", 
        "tableRowFormatLinesIdentifier", "tableRowNullFormat", "tableFileFormat", 
        "columnNameTypeList", "columnNameTypeOrConstraintList", "columnNameColonTypeList", 
        "columnNameList", "columnName", "columnNameCreate", "extColumnName", 
        "columnNameOrderList", "columnParenthesesList", "enableValidateSpecification", 
        "enableSpecification", "validateSpecification", "enforcedSpecification", 
        "relySpecification", "createConstraint", "alterConstraintWithName", 
        "tableLevelConstraint", "pkUkConstraint", "checkConstraint", "createForeignKey", 
        "alterForeignKeyWithName", "skewedValueElement", "skewedColumnValuePairList", 
        "skewedColumnValuePair", "constantList", "orderSpecification", "nullOrdering", 
        "columnNameOrder", "columnNameCommentList", "columnNameComment", 
        "columnRefOrder", "columnNameType", "columnNameTypeOrConstraint", 
        "tableConstraint", "columnNameTypeConstraint", "columnConstraint", 
        "foreignKeyConstraint", "colConstraint", "alterColumnConstraint", 
        "alterForeignKeyConstraint", "alterColConstraint", "columnConstraintType", 
        "defaultVal", "tableConstraintType", "constraintOptsCreate", "constraintOptsAlter", 
        "columnNameColonType", "columnType", "columnTypeList", "type", "primitiveType", 
        "listType", "structType", "mapType", "unionType", "setOperator", 
        "queryStatementExpression", "queryStatementExpressionBody", "withClause", 
        "cteStatement", "fromStatement", "singleFromStatement", "regularBody", 
        "atomSelectStatement", "selectStatement", "setOpSelectStatement", 
        "selectStatementWithCTE", "insertClause", "destination", "limitClause", 
        "columnAssignmentClause", "precedencePlusExpressionOrDefault", "setColumnsClause", 
        "sqlTransactionStatement", "transactionMode", "whenClauses", "whenNotMatchedClause", 
        "whenMatchedAndClause", "whenMatchedThenClause", "compactionPool", 
        "compactionType", "compactionStatus", "alterStatement", "alterTableStatementSuffix", 
        "alterTblPartitionStatementSuffix", "alterViewStatementSuffix", 
        "alterDatabaseStatementSuffix", "alterDataConnectorStatementSuffix", 
        "locationPath", "alterStatementSuffixDropPartitions", "skewedLocationMap", 
        "alterStatementSuffixExecute", "fileFormat", "likeTableOrFile", 
        "createTableStatement", "createDataConnectorStatement", "dropDataConnectorStatement", 
        "tableAllColumns", "expressionList", "aliasList", "fromClause", 
        "fromSource", "atomjoinSource", "joinSource", "joinSourcePart", 
        "uniqueJoinSource", "joinToken", "lateralView", "tableAlias", "tableSample", 
        "tableSource", "asOfClause", "dbSchemaName", "dbSchemaNameCreate", 
        "tableOrView", "tableName", "tableNameCreate", "viewName", "viewNameCreate", 
        "subQuerySource", "partitioningSpec", "partitionTableFunctionSource", 
        "partitionedTableFunction", "whereClause", "valuesClause", "virtualTableSource", 
        "selectClause", "selectTrfmClause", "selectItem", "trfmClause", 
        "selectExpression", "selectExpressionList", "window_clause", "window_specification", 
        "window_frame", "window_frame_boundary", "groupByClause", "rollupStandard", 
        "rollupOldSyntax", "groupingSetExpression", "havingClause", "qualifyClause", 
        "expressionOrDefault", "firstExpressionsWithAlias", "expressions", 
        "expressionsInParenthesis", "expressionsNotInParenthesis", "orderByClause", 
        "clusterByClause", "distributeByClause", "sortByClause", "function_", 
        "null_treatment", "functionNameCreate", "functionNameForDDL", "functionNameForInvoke", 
        "castExpression", "caseExpression", "whenExpression", "floorExpression", 
        "extractExpression", "timeQualifiers", "constant", "intervalValue", 
        "intervalExpression", "intervalQualifiers", "expression", "atomExpression", 
        "precedenceUnaryPrefixExpression", "precedenceBitwiseXorExpression", 
        "precedenceStarExpression", "precedencePlusExpression", "precedenceConcatenateExpression", 
        "precedenceAmpersandExpression", "precedenceBitwiseOrExpression", 
        "precedenceSimilarOperator", "subQueryExpression", "precedenceSimilarExpression", 
        "precedenceSimilarExpressionPart", "precedenceSimilarExpressionAtom", 
        "precedenceSimilarExpressionIn", "precedenceSimilarExpressionPartNot", 
        "precedenceDistinctOperator", "precedenceEqualOperator", "precedenceEqualExpression", 
        "isCondition", "precedenceNotExpression", "precedenceAndExpression", 
        "tableOrPartition", "partitionSpec", "partitionVal", "partitionSelectorSpec", 
        "partitionSelectorVal", "subQuerySelectorOperator", "sysFuncNames", 
        "id_", "functionIdentifier", "principalIdentifier", "nonReserved", 
        "sql11ReservedKeywordsUsedAsFunctionName", "configPropertiesItem", 
        "resourcePlanDdlStatements", "mappingTypes", "rpAssign", "rpAssignList", 
        "rpUnassign", "activate", "enable", "disable", "year", "month", 
        "week", "day", "hour", "minute", "second", "decimal", "poolPath", 
        "triggerAtomExpression", "triggerActionExpression", "poolAssign", 
        "poolAssignList",
    ];

    public get grammarFileName(): string { return "HiveSqlParser.g4"; }
    public get literalNames(): (string | null)[] { return HiveSqlParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return HiveSqlParser.symbolicNames; }
    public get ruleNames(): string[] { return HiveSqlParser.ruleNames; }
    public get serializedATN(): number[] { return HiveSqlParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, HiveSqlParser._ATN, HiveSqlParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public program(): ProgramContext {
        let localContext = new ProgramContext(this.context, this.state);
        this.enterRule(localContext, 0, HiveSqlParser.RULE_program);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 695;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 1538) !== 0) || _la === 48 || _la === 58 || ((((_la - 86)) & ~0x1F) === 0 && ((1 << (_la - 86)) & 540050201) !== 0) || ((((_la - 119)) & ~0x1F) === 0 && ((1 << (_la - 119)) & 17825795) !== 0) || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & 8388865) !== 0) || ((((_la - 187)) & ~0x1F) === 0 && ((1 << (_la - 187)) & 33622025) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 810024961) !== 0) || ((((_la - 283)) & ~0x1F) === 0 && ((1 << (_la - 283)) & 35717185) !== 0) || _la === 318 || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & 8537089) !== 0) || _la === 387 || _la === 399) {
                {
                {
                this.state = 692;
                this.statement();
                }
                }
                this.state = 697;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 698;
            this.match(HiveSqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 2, HiveSqlParser.RULE_statement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 702;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_EXPLAIN:
                {
                this.state = 700;
                this.explainStatement();
                }
                break;
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ALTER:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_COMMIT:
            case HiveSqlParser.KW_CREATE:
            case HiveSqlParser.KW_DELETE:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DESCRIBE:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DROP:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_FROM:
            case HiveSqlParser.KW_GRANT:
            case HiveSqlParser.KW_IMPORT:
            case HiveSqlParser.KW_INSERT:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_MERGE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_PREPARE:
            case HiveSqlParser.KW_REDUCE:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REVOKE:
            case HiveSqlParser.KW_ROLLBACK:
            case HiveSqlParser.KW_SELECT:
            case HiveSqlParser.KW_SET:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_START:
            case HiveSqlParser.KW_TRUNCATE:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UPDATE:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_VALUES:
            case HiveSqlParser.KW_WITH:
            case HiveSqlParser.LPAREN:
                {
                this.state = 701;
                this.execStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 705;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                {
                this.state = 704;
                this.match(HiveSqlParser.SEMICOLON);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainStatement(): ExplainStatementContext {
        let localContext = new ExplainStatementContext(this.context, this.state);
        this.enterRule(localContext, 4, HiveSqlParser.RULE_explainStatement);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 707;
            this.match(HiveSqlParser.KW_EXPLAIN);
            this.state = 717;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ALTER:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AUTHORIZATION:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_COMMIT:
            case HiveSqlParser.KW_CREATE:
            case HiveSqlParser.KW_DDL:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DELETE:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DESCRIBE:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DROP:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXTENDED:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FROM:
            case HiveSqlParser.KW_GRANT:
            case HiveSqlParser.KW_IMPORT:
            case HiveSqlParser.KW_INSERT:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_MERGE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_PREPARE:
            case HiveSqlParser.KW_REDUCE:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REVOKE:
            case HiveSqlParser.KW_ROLLBACK:
            case HiveSqlParser.KW_SELECT:
            case HiveSqlParser.KW_SET:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_START:
            case HiveSqlParser.KW_TRUNCATE:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UPDATE:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_VALUES:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_WITH:
            case HiveSqlParser.LPAREN:
                {
                this.state = 711;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 3, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 708;
                        this.explainOption();
                        }
                        }
                    }
                    this.state = 713;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 3, this.context);
                }
                this.state = 714;
                this.execStatement();
                }
                break;
            case HiveSqlParser.KW_REWRITE:
                {
                this.state = 715;
                this.match(HiveSqlParser.KW_REWRITE);
                this.state = 716;
                this.queryStatementExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainOption(): ExplainOptionContext {
        let localContext = new ExplainOptionContext(this.context, this.state);
        this.enterRule(localContext, 6, HiveSqlParser.RULE_explainOption);
        let _la: number;
        try {
            this.state = 741;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_EXTENDED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 719;
                this.match(HiveSqlParser.KW_EXTENDED);
                }
                break;
            case HiveSqlParser.KW_FORMATTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 720;
                this.match(HiveSqlParser.KW_FORMATTED);
                }
                break;
            case HiveSqlParser.KW_DEPENDENCY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 721;
                this.match(HiveSqlParser.KW_DEPENDENCY);
                }
                break;
            case HiveSqlParser.KW_CBO:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 722;
                this.match(HiveSqlParser.KW_CBO);
                this.state = 724;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 57 || _la === 172) {
                    {
                    this.state = 723;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 57 || _la === 172)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case HiveSqlParser.KW_LOGICAL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 726;
                this.match(HiveSqlParser.KW_LOGICAL);
                }
                break;
            case HiveSqlParser.KW_AUTHORIZATION:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 727;
                this.match(HiveSqlParser.KW_AUTHORIZATION);
                }
                break;
            case HiveSqlParser.KW_ANALYZE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 728;
                this.match(HiveSqlParser.KW_ANALYZE);
                }
                break;
            case HiveSqlParser.KW_REOPTIMIZATION:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 729;
                this.match(HiveSqlParser.KW_REOPTIMIZATION);
                }
                break;
            case HiveSqlParser.KW_LOCKS:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 730;
                this.match(HiveSqlParser.KW_LOCKS);
                }
                break;
            case HiveSqlParser.KW_AST:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 731;
                this.match(HiveSqlParser.KW_AST);
                }
                break;
            case HiveSqlParser.KW_VECTORIZATION:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 732;
                this.match(HiveSqlParser.KW_VECTORIZATION);
                this.state = 734;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 225) {
                    {
                    this.state = 733;
                    this.match(HiveSqlParser.KW_ONLY);
                    }
                }

                this.state = 737;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 91 || _la === 121 || _la === 226 || _la === 325) {
                    {
                    this.state = 736;
                    this.vectorizatonDetail();
                    }
                }

                }
                break;
            case HiveSqlParser.KW_DEBUG:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 739;
                this.match(HiveSqlParser.KW_DEBUG);
                }
                break;
            case HiveSqlParser.KW_DDL:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 740;
                this.match(HiveSqlParser.KW_DDL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vectorizatonDetail(): VectorizatonDetailContext {
        let localContext = new VectorizatonDetailContext(this.context, this.state);
        this.enterRule(localContext, 8, HiveSqlParser.RULE_vectorizatonDetail);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 743;
            _la = this.tokenStream.LA(1);
            if(!(_la === 91 || _la === 121 || _la === 226 || _la === 325)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public execStatement(): ExecStatementContext {
        let localContext = new ExecStatementContext(this.context, this.state);
        this.enterRule(localContext, 10, HiveSqlParser.RULE_execStatement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 816;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 17, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 745;
                this.queryStatementExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 746;
                this.loadStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 747;
                this.exportStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 748;
                this.importStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 749;
                this.replDumpStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 750;
                this.replLoadStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 751;
                this.match(HiveSqlParser.KW_REPL);
                this.state = 752;
                this.match(HiveSqlParser.KW_STATUS);
                this.state = 753;
                localContext._dbName = this.dbSchemaName();
                this.state = 756;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
                case 1:
                    {
                    this.state = 754;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 755;
                    localContext._replConf = this.keyValueProperties();
                    }
                    break;
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 758;
                this.ddlStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 759;
                this.match(HiveSqlParser.KW_DELETE);
                this.state = 760;
                this.match(HiveSqlParser.KW_FROM);
                this.state = 761;
                this.tableName();
                this.state = 763;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 384) {
                    {
                    this.state = 762;
                    this.whereClause();
                    }
                }

                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 765;
                this.match(HiveSqlParser.KW_UPDATE);
                this.state = 766;
                this.tableName();
                this.state = 767;
                this.setColumnsClause();
                this.state = 769;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 384) {
                    {
                    this.state = 768;
                    this.whereClause();
                    }
                }

                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 771;
                this.sqlTransactionStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 772;
                this.match(HiveSqlParser.KW_MERGE);
                this.state = 774;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 436) {
                    {
                    this.state = 773;
                    this.match(HiveSqlParser.QUERY_HINT);
                    }
                }

                this.state = 776;
                this.match(HiveSqlParser.KW_INTO);
                this.state = 777;
                this.tableName();
                this.state = 782;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252585854) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394 || _la === 432) {
                    {
                    this.state = 779;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 778;
                        this.match(HiveSqlParser.KW_AS);
                        }
                    }

                    this.state = 781;
                    this.id_();
                    }
                }

                this.state = 784;
                this.match(HiveSqlParser.KW_USING);
                this.state = 785;
                this.joinSourcePart();
                this.state = 786;
                this.match(HiveSqlParser.KW_ON);
                this.state = 787;
                this.expression();
                this.state = 788;
                this.whenClauses();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 790;
                this.match(HiveSqlParser.KW_PREPARE);
                this.state = 791;
                this.id_();
                this.state = 792;
                this.match(HiveSqlParser.KW_FROM);
                this.state = 793;
                this.queryStatementExpression();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 795;
                this.match(HiveSqlParser.KW_EXECUTE);
                this.state = 796;
                this.id_();
                this.state = 797;
                this.match(HiveSqlParser.KW_USING);
                this.state = 798;
                this.constantList();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 800;
                this.match(HiveSqlParser.KW_SET);
                this.state = 801;
                this.configPropertiesItem();
                this.state = 806;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 395) {
                    {
                    {
                    this.state = 802;
                    this.match(HiveSqlParser.DOT);
                    this.state = 803;
                    this.configPropertiesItem();
                    }
                    }
                    this.state = 808;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 809;
                this.match(HiveSqlParser.EQUAL);
                this.state = 813;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 16, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 810;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 815;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 16, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadStatement(): LoadStatementContext {
        let localContext = new LoadStatementContext(this.context, this.state);
        this.enterRule(localContext, 12, HiveSqlParser.RULE_loadStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 818;
            this.match(HiveSqlParser.KW_LOAD);
            this.state = 819;
            this.match(HiveSqlParser.KW_DATA);
            this.state = 821;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 188) {
                {
                this.state = 820;
                this.match(HiveSqlParser.KW_LOCAL);
                }
            }

            this.state = 823;
            this.match(HiveSqlParser.KW_INPATH);
            this.state = 824;
            this.match(HiveSqlParser.StringLiteral);
            this.state = 826;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235) {
                {
                this.state = 825;
                this.match(HiveSqlParser.KW_OVERWRITE);
                }
            }

            this.state = 828;
            this.match(HiveSqlParser.KW_INTO);
            this.state = 829;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 830;
            this.tableOrPartition();
            this.state = 832;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 160) {
                {
                this.state = 831;
                this.inputFileFormat();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replicationClause(): ReplicationClauseContext {
        let localContext = new ReplicationClauseContext(this.context, this.state);
        this.enterRule(localContext, 14, HiveSqlParser.RULE_replicationClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 834;
            this.match(HiveSqlParser.KW_FOR);
            this.state = 836;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 204) {
                {
                this.state = 835;
                this.match(HiveSqlParser.KW_METADATA);
                }
            }

            this.state = 838;
            this.match(HiveSqlParser.KW_REPLICATION);
            this.state = 839;
            this.match(HiveSqlParser.LPAREN);
            this.state = 840;
            this.match(HiveSqlParser.StringLiteral);
            this.state = 841;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exportStatement(): ExportStatementContext {
        let localContext = new ExportStatementContext(this.context, this.state);
        this.enterRule(localContext, 16, HiveSqlParser.RULE_exportStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 843;
            this.match(HiveSqlParser.KW_EXPORT);
            this.state = 844;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 845;
            this.tableOrPartition();
            this.state = 846;
            this.match(HiveSqlParser.KW_TO);
            this.state = 847;
            this.match(HiveSqlParser.StringLiteral);
            this.state = 849;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 134) {
                {
                this.state = 848;
                this.replicationClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importStatement(): ImportStatementContext {
        let localContext = new ImportStatementContext(this.context, this.state);
        this.enterRule(localContext, 18, HiveSqlParser.RULE_importStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 851;
            this.match(HiveSqlParser.KW_IMPORT);
            this.state = 857;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123 || _la === 329) {
                {
                this.state = 853;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 123) {
                    {
                    this.state = 852;
                    this.match(HiveSqlParser.KW_EXTERNAL);
                    }
                }

                this.state = 855;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 856;
                this.tableOrPartition();
                }
            }

            this.state = 859;
            this.match(HiveSqlParser.KW_FROM);
            this.state = 860;
            localContext._path = this.match(HiveSqlParser.StringLiteral);
            this.state = 862;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 189) {
                {
                this.state = 861;
                this.locationPath();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replDumpStatement(): ReplDumpStatementContext {
        let localContext = new ReplDumpStatementContext(this.context, this.state);
        this.enterRule(localContext, 20, HiveSqlParser.RULE_replDumpStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 864;
            this.match(HiveSqlParser.KW_REPL);
            this.state = 865;
            this.match(HiveSqlParser.KW_DUMP);
            this.state = 866;
            localContext._dbPolicy = this.replDbPolicy();
            this.state = 869;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 26, this.context) ) {
            case 1:
                {
                this.state = 867;
                this.match(HiveSqlParser.KW_REPLACE);
                this.state = 868;
                localContext._oldDbPolicy = this.replDbPolicy();
                }
                break;
            }
            this.state = 873;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
            case 1:
                {
                this.state = 871;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 872;
                localContext._replConf = this.keyValueProperties();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replDbPolicy(): ReplDbPolicyContext {
        let localContext = new ReplDbPolicyContext(this.context, this.state);
        this.enterRule(localContext, 22, HiveSqlParser.RULE_replDbPolicy);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 875;
            localContext._dbName = this.dbSchemaName();
            this.state = 878;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 395) {
                {
                this.state = 876;
                this.match(HiveSqlParser.DOT);
                this.state = 877;
                localContext._tablePolicy = this.replTableLevelPolicy();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replLoadStatement(): ReplLoadStatementContext {
        let localContext = new ReplLoadStatementContext(this.context, this.state);
        this.enterRule(localContext, 24, HiveSqlParser.RULE_replLoadStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 880;
            this.match(HiveSqlParser.KW_REPL);
            this.state = 881;
            this.match(HiveSqlParser.KW_LOAD);
            this.state = 882;
            localContext._sourceDbPolicy = this.replDbPolicy();
            this.state = 885;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 166) {
                {
                this.state = 883;
                this.match(HiveSqlParser.KW_INTO);
                this.state = 884;
                localContext._dbName = this.dbSchemaName();
                }
            }

            this.state = 889;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
            case 1:
                {
                this.state = 887;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 888;
                localContext._replConf = this.keyValueProperties();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replTableLevelPolicy(): ReplTableLevelPolicyContext {
        let localContext = new ReplTableLevelPolicyContext(this.context, this.state);
        this.enterRule(localContext, 26, HiveSqlParser.RULE_replTableLevelPolicy);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 891;
            localContext._replTablesIncludeList = this.match(HiveSqlParser.StringLiteral);
            this.state = 894;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 395) {
                {
                this.state = 892;
                this.match(HiveSqlParser.DOT);
                this.state = 893;
                localContext._replTablesExcludeList = this.match(HiveSqlParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ddlStatement(): DdlStatementContext {
        let localContext = new DdlStatementContext(this.context, this.state);
        this.enterRule(localContext, 28, HiveSqlParser.RULE_ddlStatement);
        let _la: number;
        try {
            this.state = 954;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 896;
                this.createDatabaseStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 897;
                this.switchDatabaseStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 898;
                this.dropDatabaseStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 899;
                this.createTableStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 900;
                this.dropTableStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 901;
                this.truncateTableStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 902;
                this.alterStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 903;
                this.descStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 904;
                this.showStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 905;
                this.metastoreCheck();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 906;
                this.createViewStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 907;
                this.createMaterializedViewStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 908;
                this.createScheduledQueryStatement();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 909;
                this.alterScheduledQueryStatement();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 910;
                this.dropScheduledQueryStatement();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 911;
                this.dropViewStatement();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 912;
                this.dropMaterializedViewStatement();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 913;
                this.createFunctionStatement();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 914;
                this.createMacroStatement();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 915;
                this.dropFunctionStatement();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 916;
                this.reloadFunctionsStatement();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 917;
                this.dropMacroStatement();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 918;
                this.createIndexStatement();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 919;
                this.dropIndexStatement();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 920;
                this.analyzeStatement();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 921;
                this.lockStatement();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 922;
                this.unlockStatement();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 923;
                this.lockDatabase();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 924;
                this.unlockDatabase();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 925;
                this.createRoleStatement();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 926;
                this.dropRoleStatement();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 927;
                this.grantPrivileges();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 928;
                this.revokePrivileges();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 929;
                this.showGrants();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 930;
                this.showRoleGrants();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 931;
                this.showRolePrincipals();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 932;
                this.showRoles();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 933;
                this.grantRole();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 934;
                this.revokeRole();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 935;
                this.setRole();
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 936;
                this.showCurrentRole();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 937;
                this.match(HiveSqlParser.KW_ABORT);
                this.state = 938;
                _la = this.tokenStream.LA(1);
                if(!(_la === 50 || _la === 346)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 940;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 939;
                    this.match(HiveSqlParser.Number);
                    }
                    }
                    this.state = 942;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 431);
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 944;
                this.match(HiveSqlParser.KW_KILL);
                this.state = 945;
                this.match(HiveSqlParser.KW_QUERY);
                this.state = 947;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 946;
                    this.match(HiveSqlParser.StringLiteral);
                    }
                    }
                    this.state = 949;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 426);
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 951;
                this.resourcePlanDdlStatements();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 952;
                this.createDataConnectorStatement();
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 953;
                this.dropDataConnectorStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExists(): IfExistsContext {
        let localContext = new IfExistsContext(this.context, this.state);
        this.enterRule(localContext, 30, HiveSqlParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 956;
            this.match(HiveSqlParser.KW_IF);
            this.state = 957;
            this.match(HiveSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifNotExists(): IfNotExistsContext {
        let localContext = new IfNotExistsContext(this.context, this.state);
        this.enterRule(localContext, 32, HiveSqlParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 959;
            this.match(HiveSqlParser.KW_IF);
            this.state = 960;
            this.match(HiveSqlParser.KW_NOT);
            this.state = 961;
            this.match(HiveSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public restrictOrCascade(): RestrictOrCascadeContext {
        let localContext = new RestrictOrCascadeContext(this.context, this.state);
        this.enterRule(localContext, 34, HiveSqlParser.RULE_restrictOrCascade);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 963;
            _la = this.tokenStream.LA(1);
            if(!(_la === 34 || _la === 282)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rewriteEnabled(): RewriteEnabledContext {
        let localContext = new RewriteEnabledContext(this.context, this.state);
        this.enterRule(localContext, 36, HiveSqlParser.RULE_rewriteEnabled);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 965;
            this.enable();
            this.state = 966;
            this.match(HiveSqlParser.KW_REWRITE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rewriteDisabled(): RewriteDisabledContext {
        let localContext = new RewriteDisabledContext(this.context, this.state);
        this.enterRule(localContext, 38, HiveSqlParser.RULE_rewriteDisabled);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 968;
            this.disable();
            this.state = 969;
            this.match(HiveSqlParser.KW_REWRITE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storedAsDirs(): StoredAsDirsContext {
        let localContext = new StoredAsDirsContext(this.context, this.state);
        this.enterRule(localContext, 40, HiveSqlParser.RULE_storedAsDirs);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 971;
            this.match(HiveSqlParser.KW_STORED);
            this.state = 972;
            this.match(HiveSqlParser.KW_AS);
            this.state = 973;
            this.match(HiveSqlParser.KW_DIRECTORIES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext {
        let localContext = new CreateDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 42, HiveSqlParser.RULE_createDatabaseStatement);
        let _la: number;
        try {
            this.state = 1015;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 44, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 975;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 977;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 273) {
                    {
                    this.state = 976;
                    this.match(HiveSqlParser.KW_REMOTE);
                    }
                }

                this.state = 979;
                this.db_schema();
                this.state = 981;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 980;
                    this.ifNotExists();
                    }
                }

                this.state = 983;
                localContext._name = this.dbSchemaNameCreate();
                this.state = 985;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47) {
                    {
                    this.state = 984;
                    this.databaseComment();
                    }
                }

                this.state = 988;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 189) {
                    {
                    this.state = 987;
                    this.locationPath();
                    }
                }

                this.state = 992;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 990;
                    this.match(HiveSqlParser.KW_MANAGEDLOCATION);
                    this.state = 991;
                    localContext._locn = this.match(HiveSqlParser.StringLiteral);
                    }
                }

                this.state = 997;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 40, this.context) ) {
                case 1:
                    {
                    this.state = 994;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 995;
                    this.match(HiveSqlParser.KW_DBPROPERTIES);
                    this.state = 996;
                    localContext._dbprops = this.keyValueProperties();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 999;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 1000;
                this.match(HiveSqlParser.KW_REMOTE);
                this.state = 1001;
                this.db_schema();
                this.state = 1003;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 1002;
                    this.ifNotExists();
                    }
                }

                this.state = 1005;
                localContext._name = this.dbSchemaNameCreate();
                this.state = 1007;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47) {
                    {
                    this.state = 1006;
                    this.databaseComment();
                    }
                }

                this.state = 1009;
                this.dbConnectorName();
                this.state = 1013;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 43, this.context) ) {
                case 1:
                    {
                    this.state = 1010;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 1011;
                    this.match(HiveSqlParser.KW_DBPROPERTIES);
                    this.state = 1012;
                    localContext._dbprops = this.keyValueProperties();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbConnectorName(): DbConnectorNameContext {
        let localContext = new DbConnectorNameContext(this.context, this.state);
        this.enterRule(localContext, 44, HiveSqlParser.RULE_dbConnectorName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1017;
            this.match(HiveSqlParser.KW_USING);
            this.state = 1018;
            localContext._dcName = this.dbSchemaName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public switchDatabaseStatement(): SwitchDatabaseStatementContext {
        let localContext = new SwitchDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 46, HiveSqlParser.RULE_switchDatabaseStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1020;
            this.match(HiveSqlParser.KW_USE);
            this.state = 1021;
            this.dbSchemaName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropDatabaseStatement(): DropDatabaseStatementContext {
        let localContext = new DropDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 48, HiveSqlParser.RULE_dropDatabaseStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1023;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1024;
            this.db_schema();
            this.state = 1026;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1025;
                this.ifExists();
                }
            }

            this.state = 1028;
            this.dbSchemaName();
            this.state = 1030;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34 || _la === 282) {
                {
                this.state = 1029;
                this.restrictOrCascade();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseComment(): DatabaseCommentContext {
        let localContext = new DatabaseCommentContext(this.context, this.state);
        this.enterRule(localContext, 50, HiveSqlParser.RULE_databaseComment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1032;
            this.match(HiveSqlParser.KW_COMMENT);
            this.state = 1033;
            localContext._comment = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncateTableStatement(): TruncateTableStatementContext {
        let localContext = new TruncateTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 52, HiveSqlParser.RULE_truncateTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1035;
            this.match(HiveSqlParser.KW_TRUNCATE);
            this.state = 1037;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 329) {
                {
                this.state = 1036;
                this.match(HiveSqlParser.KW_TABLE);
                }
            }

            this.state = 1039;
            this.tableOrPartition();
            this.state = 1045;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 46) {
                {
                this.state = 1040;
                this.match(HiveSqlParser.KW_COLUMNS);
                this.state = 1041;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1042;
                this.columnNameList();
                this.state = 1043;
                this.match(HiveSqlParser.RPAREN);
                }
            }

            this.state = 1048;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 135) {
                {
                this.state = 1047;
                this.match(HiveSqlParser.KW_FORCE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropTableStatement(): DropTableStatementContext {
        let localContext = new DropTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 54, HiveSqlParser.RULE_dropTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1050;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1051;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 1053;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1052;
                this.ifExists();
                }
            }

            this.state = 1055;
            this.tableName();
            this.state = 1057;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 255) {
                {
                this.state = 1056;
                this.match(HiveSqlParser.KW_PURGE);
                }
            }

            this.state = 1060;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 134) {
                {
                this.state = 1059;
                this.replicationClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inputFileFormat(): InputFileFormatContext {
        let localContext = new InputFileFormatContext(this.context, this.state);
        this.enterRule(localContext, 56, HiveSqlParser.RULE_inputFileFormat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1062;
            this.match(HiveSqlParser.KW_INPUTFORMAT);
            this.state = 1063;
            localContext._inFmt = this.match(HiveSqlParser.StringLiteral);
            this.state = 1064;
            this.match(HiveSqlParser.KW_SERDE);
            this.state = 1065;
            localContext._serdeCls = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tabTypeExpr(): TabTypeExprContext {
        let localContext = new TabTypeExprContext(this.context, this.state);
        this.enterRule(localContext, 58, HiveSqlParser.RULE_tabTypeExpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1067;
            this.id_();
            this.state = 1070;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 395) {
                {
                this.state = 1068;
                this.match(HiveSqlParser.DOT);
                this.state = 1069;
                this.id_();
                }
            }

            this.state = 1085;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 56, this.context) ) {
            case 1:
                {
                this.state = 1072;
                this.id_();
                this.state = 1082;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 395) {
                    {
                    {
                    this.state = 1073;
                    this.match(HiveSqlParser.DOT);
                    this.state = 1078;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
                    case 1:
                        {
                        this.state = 1074;
                        this.match(HiveSqlParser.KW_ELEM_TYPE);
                        }
                        break;
                    case 2:
                        {
                        this.state = 1075;
                        this.match(HiveSqlParser.KW_KEY_TYPE);
                        }
                        break;
                    case 3:
                        {
                        this.state = 1076;
                        this.match(HiveSqlParser.KW_VALUE_TYPE);
                        }
                        break;
                    case 4:
                        {
                        this.state = 1077;
                        this.id_();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 1084;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partTypeExpr(): PartTypeExprContext {
        let localContext = new PartTypeExprContext(this.context, this.state);
        this.enterRule(localContext, 60, HiveSqlParser.RULE_partTypeExpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1087;
            this.tabTypeExpr();
            this.state = 1089;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 237) {
                {
                this.state = 1088;
                this.partitionSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tabPartColTypeExpr(): TabPartColTypeExprContext {
        let localContext = new TabPartColTypeExprContext(this.context, this.state);
        this.enterRule(localContext, 62, HiveSqlParser.RULE_tabPartColTypeExpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1091;
            this.tableOrView();
            this.state = 1093;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
            case 1:
                {
                this.state = 1092;
                this.partitionSpec();
                }
                break;
            }
            this.state = 1096;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 59, this.context) ) {
            case 1:
                {
                this.state = 1095;
                this.extColumnName();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descStatement(): DescStatementContext {
        let localContext = new DescStatementContext(this.context, this.state);
        this.enterRule(localContext, 64, HiveSqlParser.RULE_descStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1098;
            _la = this.tokenStream.LA(1);
            if(!(_la === 89 || _la === 90)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1121;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 64, this.context) ) {
            case 1:
                {
                this.state = 1099;
                this.db_schema();
                this.state = 1101;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 1100;
                    this.match(HiveSqlParser.KW_EXTENDED);
                    }
                }

                this.state = 1103;
                localContext._dbName = this.dbSchemaName();
                }
                break;
            case 2:
                {
                this.state = 1105;
                this.match(HiveSqlParser.KW_DATACONNECTOR);
                this.state = 1107;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 1106;
                    this.match(HiveSqlParser.KW_EXTENDED);
                    }
                }

                this.state = 1109;
                localContext._dcName = this.dbSchemaName();
                }
                break;
            case 3:
                {
                this.state = 1110;
                this.match(HiveSqlParser.KW_FUNCTION);
                this.state = 1112;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 1111;
                    this.match(HiveSqlParser.KW_EXTENDED);
                    }
                }

                this.state = 1114;
                localContext._name = this.functionNameForDDL();
                }
                break;
            case 4:
                {
                this.state = 1117;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_FORMATTED:
                    {
                    this.state = 1115;
                    localContext._descOptions = this.match(HiveSqlParser.KW_FORMATTED);
                    }
                    break;
                case HiveSqlParser.KW_EXTENDED:
                    {
                    this.state = 1116;
                    localContext._descOptions = this.match(HiveSqlParser.KW_EXTENDED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1119;
                localContext._parttype = this.tabPartColTypeExpr();
                }
                break;
            case 5:
                {
                this.state = 1120;
                localContext._parttype = this.tabPartColTypeExpr();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzeStatement(): AnalyzeStatementContext {
        let localContext = new AnalyzeStatementContext(this.context, this.state);
        this.enterRule(localContext, 66, HiveSqlParser.RULE_analyzeStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1123;
            this.match(HiveSqlParser.KW_ANALYZE);
            this.state = 1124;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 1125;
            localContext._parttype = this.tableOrPartition();
            this.state = 1138;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_COMPUTE:
                {
                this.state = 1126;
                this.match(HiveSqlParser.KW_COMPUTE);
                this.state = 1127;
                this.match(HiveSqlParser.KW_STATISTICS);
                this.state = 1134;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_NOSCAN:
                    {
                    this.state = 1128;
                    localContext._noscan = this.match(HiveSqlParser.KW_NOSCAN);
                    }
                    break;
                case HiveSqlParser.KW_FOR:
                    {
                    this.state = 1129;
                    this.match(HiveSqlParser.KW_FOR);
                    this.state = 1130;
                    this.match(HiveSqlParser.KW_COLUMNS);
                    this.state = 1132;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 65, this.context) ) {
                    case 1:
                        {
                        this.state = 1131;
                        localContext._statsColumnName = this.columnNameList();
                        }
                        break;
                    }
                    }
                    break;
                case HiveSqlParser.EOF:
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ALTER:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_COMMIT:
                case HiveSqlParser.KW_CREATE:
                case HiveSqlParser.KW_DELETE:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DESCRIBE:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DROP:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_GRANT:
                case HiveSqlParser.KW_IMPORT:
                case HiveSqlParser.KW_INSERT:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MERGE:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_PREPARE:
                case HiveSqlParser.KW_REDUCE:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_REVOKE:
                case HiveSqlParser.KW_ROLLBACK:
                case HiveSqlParser.KW_SELECT:
                case HiveSqlParser.KW_SET:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_START:
                case HiveSqlParser.KW_TRUNCATE:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UPDATE:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_VALUES:
                case HiveSqlParser.KW_WITH:
                case HiveSqlParser.SEMICOLON:
                case HiveSqlParser.LPAREN:
                    break;
                default:
                    break;
                }
                }
                break;
            case HiveSqlParser.KW_CACHE:
                {
                this.state = 1136;
                this.match(HiveSqlParser.KW_CACHE);
                this.state = 1137;
                this.match(HiveSqlParser.KW_METADATA);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_in(): From_inContext {
        let localContext = new From_inContext(this.context, this.state);
        this.enterRule(localContext, 68, HiveSqlParser.RULE_from_in);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1140;
            _la = this.tokenStream.LA(1);
            if(!(_la === 139 || _la === 154)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public db_schema(): Db_schemaContext {
        let localContext = new Db_schemaContext(this.context, this.state);
        this.enterRule(localContext, 70, HiveSqlParser.RULE_db_schema);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1142;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 295)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStatement(): ShowStatementContext {
        let localContext = new ShowStatementContext(this.context, this.state);
        this.enterRule(localContext, 72, HiveSqlParser.RULE_showStatement);
        let _la: number;
        try {
            this.state = 1327;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 103, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1144;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1145;
                _la = this.tokenStream.LA(1);
                if(!(_la === 68 || _la === 296)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1148;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 184) {
                    {
                    this.state = 1146;
                    this.match(HiveSqlParser.KW_LIKE);
                    this.state = 1147;
                    this.showStmtIdentifier();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1150;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 1151;
                    localContext._isExtended = this.match(HiveSqlParser.KW_EXTENDED);
                    }
                }

                this.state = 1154;
                this.match(HiveSqlParser.KW_TABLES);
                this.state = 1158;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 70, this.context) ) {
                case 1:
                    {
                    this.state = 1155;
                    this.from_in();
                    this.state = 1156;
                    localContext._db_name = this.dbSchemaName();
                    }
                    break;
                }
                this.state = 1161;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 71, this.context) ) {
                case 1:
                    {
                    this.state = 1160;
                    localContext._filter = this.showTablesFilterExpr();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1163;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1164;
                this.match(HiveSqlParser.KW_VIEWS);
                this.state = 1168;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 72, this.context) ) {
                case 1:
                    {
                    this.state = 1165;
                    this.from_in();
                    this.state = 1166;
                    localContext._db_name = this.dbSchemaName();
                    }
                    break;
                }
                this.state = 1173;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 73, this.context) ) {
                case 1:
                    {
                    this.state = 1170;
                    this.match(HiveSqlParser.KW_LIKE);
                    this.state = 1171;
                    this.showStmtIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 1172;
                    this.showStmtIdentifier();
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1175;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1176;
                this.match(HiveSqlParser.KW_MATERIALIZED);
                this.state = 1177;
                this.match(HiveSqlParser.KW_VIEWS);
                this.state = 1181;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 74, this.context) ) {
                case 1:
                    {
                    this.state = 1178;
                    this.from_in();
                    this.state = 1179;
                    localContext._db_name = this.dbSchemaName();
                    }
                    break;
                }
                this.state = 1186;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 75, this.context) ) {
                case 1:
                    {
                    this.state = 1183;
                    this.match(HiveSqlParser.KW_LIKE);
                    this.state = 1184;
                    this.showStmtIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 1185;
                    this.showStmtIdentifier();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1188;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1190;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 315) {
                    {
                    this.state = 1189;
                    this.match(HiveSqlParser.KW_SORTED);
                    }
                }

                this.state = 1192;
                this.match(HiveSqlParser.KW_COLUMNS);
                this.state = 1193;
                this.from_in();
                this.state = 1194;
                this.tableOrView();
                this.state = 1198;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 77, this.context) ) {
                case 1:
                    {
                    this.state = 1195;
                    this.from_in();
                    this.state = 1196;
                    localContext._db_name = this.dbSchemaName();
                    }
                    break;
                }
                this.state = 1203;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 78, this.context) ) {
                case 1:
                    {
                    this.state = 1200;
                    this.match(HiveSqlParser.KW_LIKE);
                    this.state = 1201;
                    this.showStmtIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 1202;
                    this.showStmtIdentifier();
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1205;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1206;
                this.match(HiveSqlParser.KW_FUNCTIONS);
                this.state = 1209;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 184) {
                    {
                    this.state = 1207;
                    this.match(HiveSqlParser.KW_LIKE);
                    this.state = 1208;
                    this.functionNameForDDL();
                    }
                }

                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1211;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1212;
                this.match(HiveSqlParser.KW_PARTITIONS);
                this.state = 1213;
                localContext._tabOrViewName = this.tableOrView();
                this.state = 1215;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 237) {
                    {
                    this.state = 1214;
                    this.partitionSpec();
                    }
                }

                this.state = 1218;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 384) {
                    {
                    this.state = 1217;
                    this.whereClause();
                    }
                }

                this.state = 1221;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 1220;
                    this.orderByClause();
                    }
                }

                this.state = 1224;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 185) {
                    {
                    this.state = 1223;
                    this.limitClause();
                    }
                }

                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1226;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1227;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 1233;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_DATABASE:
                case HiveSqlParser.KW_SCHEMA:
                    {
                    this.state = 1228;
                    this.db_schema();
                    this.state = 1229;
                    localContext._db_name = this.dbSchemaName();
                    }
                    break;
                case HiveSqlParser.KW_TABLE:
                    {
                    this.state = 1231;
                    this.match(HiveSqlParser.KW_TABLE);
                    this.state = 1232;
                    localContext._tabName = this.tableName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1235;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1236;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 1237;
                this.match(HiveSqlParser.KW_EXTENDED);
                this.state = 1241;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 139 || _la === 154) {
                    {
                    this.state = 1238;
                    this.from_in();
                    this.state = 1239;
                    localContext._db_name = this.dbSchemaName();
                    }
                }

                this.state = 1243;
                this.match(HiveSqlParser.KW_LIKE);
                this.state = 1244;
                this.showStmtIdentifier();
                this.state = 1246;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 237) {
                    {
                    this.state = 1245;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1248;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1249;
                this.match(HiveSqlParser.KW_TBLPROPERTIES);
                this.state = 1250;
                this.tableName();
                this.state = 1254;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 87, this.context) ) {
                case 1:
                    {
                    this.state = 1251;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 1252;
                    localContext._prptyName = this.match(HiveSqlParser.StringLiteral);
                    this.state = 1253;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                }
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1256;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1257;
                this.match(HiveSqlParser.KW_LOCKS);
                this.state = 1269;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 91, this.context) ) {
                case 1:
                    {
                    this.state = 1258;
                    this.db_schema();
                    this.state = 1259;
                    localContext._dbName = this.dbSchemaName();
                    this.state = 1261;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 122) {
                        {
                        this.state = 1260;
                        localContext._isExtended = this.match(HiveSqlParser.KW_EXTENDED);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 1264;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
                    case 1:
                        {
                        this.state = 1263;
                        localContext._parttype = this.partTypeExpr();
                        }
                        break;
                    }
                    this.state = 1267;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 122) {
                        {
                        this.state = 1266;
                        localContext._isExtended = this.match(HiveSqlParser.KW_EXTENDED);
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1271;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1272;
                this.match(HiveSqlParser.KW_COMPACTIONS);
                this.state = 1299;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_COMPACT_ID:
                    {
                    this.state = 1273;
                    this.match(HiveSqlParser.KW_COMPACT_ID);
                    this.state = 1274;
                    this.match(HiveSqlParser.EQUAL);
                    this.state = 1275;
                    localContext._compactId = this.match(HiveSqlParser.Number);
                    }
                    break;
                case HiveSqlParser.EOF:
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ACTIVATE:
                case HiveSqlParser.KW_ACTIVE:
                case HiveSqlParser.KW_ADD:
                case HiveSqlParser.KW_ADMIN:
                case HiveSqlParser.KW_AFTER:
                case HiveSqlParser.KW_ALLOC_FRACTION:
                case HiveSqlParser.KW_ALTER:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_ARCHIVE:
                case HiveSqlParser.KW_ASC:
                case HiveSqlParser.KW_AST:
                case HiveSqlParser.KW_AT:
                case HiveSqlParser.KW_AUTOCOMMIT:
                case HiveSqlParser.KW_BATCH:
                case HiveSqlParser.KW_BEFORE:
                case HiveSqlParser.KW_BUCKET:
                case HiveSqlParser.KW_BUCKETS:
                case HiveSqlParser.KW_CACHE:
                case HiveSqlParser.KW_CASCADE:
                case HiveSqlParser.KW_CBO:
                case HiveSqlParser.KW_CHANGE:
                case HiveSqlParser.KW_CHECK:
                case HiveSqlParser.KW_CLUSTER:
                case HiveSqlParser.KW_CLUSTERED:
                case HiveSqlParser.KW_CLUSTERSTATUS:
                case HiveSqlParser.KW_COLLECTION:
                case HiveSqlParser.KW_COLUMNS:
                case HiveSqlParser.KW_COMMENT:
                case HiveSqlParser.KW_COMMIT:
                case HiveSqlParser.KW_COMPACT:
                case HiveSqlParser.KW_COMPACTIONS:
                case HiveSqlParser.KW_COMPUTE:
                case HiveSqlParser.KW_CONCATENATE:
                case HiveSqlParser.KW_CONTINUE:
                case HiveSqlParser.KW_COST:
                case HiveSqlParser.KW_CREATE:
                case HiveSqlParser.KW_CRON:
                case HiveSqlParser.KW_DATA:
                case HiveSqlParser.KW_DATABASE:
                case HiveSqlParser.KW_DATABASES:
                case HiveSqlParser.KW_DATETIME:
                case HiveSqlParser.KW_DAY:
                case HiveSqlParser.KW_DAYS:
                case HiveSqlParser.KW_DAYOFWEEK:
                case HiveSqlParser.KW_DBPROPERTIES:
                case HiveSqlParser.KW_DCPROPERTIES:
                case HiveSqlParser.KW_DEBUG:
                case HiveSqlParser.KW_DEFAULT:
                case HiveSqlParser.KW_DEFERRED:
                case HiveSqlParser.KW_DEFINED:
                case HiveSqlParser.KW_DELETE:
                case HiveSqlParser.KW_DELIMITED:
                case HiveSqlParser.KW_DEPENDENCY:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DESCRIBE:
                case HiveSqlParser.KW_DETAIL:
                case HiveSqlParser.KW_DIRECTORIES:
                case HiveSqlParser.KW_DIRECTORY:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DISTRIBUTE:
                case HiveSqlParser.KW_DISTRIBUTED:
                case HiveSqlParser.KW_DO:
                case HiveSqlParser.KW_DROP:
                case HiveSqlParser.KW_DUMP:
                case HiveSqlParser.KW_ELEM_TYPE:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_ENFORCED:
                case HiveSqlParser.KW_ESCAPED:
                case HiveSqlParser.KW_EVERY:
                case HiveSqlParser.KW_EXCLUSIVE:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXECUTED:
                case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_EXPRESSION:
                case HiveSqlParser.KW_FIELDS:
                case HiveSqlParser.KW_FILE:
                case HiveSqlParser.KW_FILEFORMAT:
                case HiveSqlParser.KW_FIRST:
                case HiveSqlParser.KW_FORMAT:
                case HiveSqlParser.KW_FORMATTED:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_FUNCTIONS:
                case HiveSqlParser.KW_GRANT:
                case HiveSqlParser.KW_HOLD_DDLTIME:
                case HiveSqlParser.KW_HOUR:
                case HiveSqlParser.KW_HOURS:
                case HiveSqlParser.KW_IDXPROPERTIES:
                case HiveSqlParser.KW_IGNORE:
                case HiveSqlParser.KW_IMPORT:
                case HiveSqlParser.KW_INDEX:
                case HiveSqlParser.KW_INDEXES:
                case HiveSqlParser.KW_INPATH:
                case HiveSqlParser.KW_INPUTDRIVER:
                case HiveSqlParser.KW_INPUTFORMAT:
                case HiveSqlParser.KW_INSERT:
                case HiveSqlParser.KW_ISOLATION:
                case HiveSqlParser.KW_ITEMS:
                case HiveSqlParser.KW_JAR:
                case HiveSqlParser.KW_JOINCOST:
                case HiveSqlParser.KW_KEY:
                case HiveSqlParser.KW_KEYS:
                case HiveSqlParser.KW_KEY_TYPE:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LAST:
                case HiveSqlParser.KW_LEVEL:
                case HiveSqlParser.KW_LIFECYCLE:
                case HiveSqlParser.KW_LIMIT:
                case HiveSqlParser.KW_LINES:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCATION:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_LOCKS:
                case HiveSqlParser.KW_LOGICAL:
                case HiveSqlParser.KW_LONG:
                case HiveSqlParser.KW_MANAGED:
                case HiveSqlParser.KW_MANAGEDLOCATION:
                case HiveSqlParser.KW_MANAGEMENT:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MAPJOIN:
                case HiveSqlParser.KW_MAPPING:
                case HiveSqlParser.KW_MATCHED:
                case HiveSqlParser.KW_MATERIALIZED:
                case HiveSqlParser.KW_MERGE:
                case HiveSqlParser.KW_METADATA:
                case HiveSqlParser.KW_MINUTE:
                case HiveSqlParser.KW_MINUTES:
                case HiveSqlParser.KW_MONTH:
                case HiveSqlParser.KW_MONTHS:
                case HiveSqlParser.KW_MOVE:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_NORELY:
                case HiveSqlParser.KW_NOSCAN:
                case HiveSqlParser.KW_NOVALIDATE:
                case HiveSqlParser.KW_NO_DROP:
                case HiveSqlParser.KW_NULLS:
                case HiveSqlParser.KW_OFFLINE:
                case HiveSqlParser.KW_OFFSET:
                case HiveSqlParser.KW_OPERATOR:
                case HiveSqlParser.KW_OPTION:
                case HiveSqlParser.KW_ORDER:
                case HiveSqlParser.KW_OUTPUTDRIVER:
                case HiveSqlParser.KW_OUTPUTFORMAT:
                case HiveSqlParser.KW_OVERWRITE:
                case HiveSqlParser.KW_OWNER:
                case HiveSqlParser.KW_PARTITIONED:
                case HiveSqlParser.KW_PARTITIONS:
                case HiveSqlParser.KW_PATH:
                case HiveSqlParser.KW_PLAN:
                case HiveSqlParser.KW_PLANS:
                case HiveSqlParser.KW_PLUS:
                case HiveSqlParser.KW_POOL:
                case HiveSqlParser.KW_PREPARE:
                case HiveSqlParser.KW_PRINCIPALS:
                case HiveSqlParser.KW_PROTECTION:
                case HiveSqlParser.KW_PURGE:
                case HiveSqlParser.KW_QUARTER:
                case HiveSqlParser.KW_QUERY:
                case HiveSqlParser.KW_QUERY_PARALLELISM:
                case HiveSqlParser.KW_READ:
                case HiveSqlParser.KW_READONLY:
                case HiveSqlParser.KW_REBUILD:
                case HiveSqlParser.KW_RECORDREADER:
                case HiveSqlParser.KW_RECORDWRITER:
                case HiveSqlParser.KW_REDUCE:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_RELY:
                case HiveSqlParser.KW_REMOTE:
                case HiveSqlParser.KW_RENAME:
                case HiveSqlParser.KW_REOPTIMIZATION:
                case HiveSqlParser.KW_REPAIR:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_REPLICATION:
                case HiveSqlParser.KW_RESOURCE:
                case HiveSqlParser.KW_RESPECT:
                case HiveSqlParser.KW_RESTRICT:
                case HiveSqlParser.KW_REVOKE:
                case HiveSqlParser.KW_REWRITE:
                case HiveSqlParser.KW_ROLE:
                case HiveSqlParser.KW_ROLES:
                case HiveSqlParser.KW_ROLLBACK:
                case HiveSqlParser.KW_SCHEDULED:
                case HiveSqlParser.KW_SCHEDULING_POLICY:
                case HiveSqlParser.KW_SCHEMA:
                case HiveSqlParser.KW_SCHEMAS:
                case HiveSqlParser.KW_SECOND:
                case HiveSqlParser.KW_SECONDS:
                case HiveSqlParser.KW_SELECT:
                case HiveSqlParser.KW_SEMI:
                case HiveSqlParser.KW_SERDE:
                case HiveSqlParser.KW_SERDEPROPERTIES:
                case HiveSqlParser.KW_SERVER:
                case HiveSqlParser.KW_SET:
                case HiveSqlParser.KW_SETS:
                case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
                case HiveSqlParser.KW_SHARED:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_SHOW_DATABASE:
                case HiveSqlParser.KW_SKEWED:
                case HiveSqlParser.KW_SNAPSHOT:
                case HiveSqlParser.KW_SORT:
                case HiveSqlParser.KW_SORTED:
                case HiveSqlParser.KW_SPEC:
                case HiveSqlParser.KW_SSL:
                case HiveSqlParser.KW_START:
                case HiveSqlParser.KW_STATISTICS:
                case HiveSqlParser.KW_STATUS:
                case HiveSqlParser.KW_STORED:
                case HiveSqlParser.KW_STREAMTABLE:
                case HiveSqlParser.KW_STRING:
                case HiveSqlParser.KW_STRUCT:
                case HiveSqlParser.KW_SUMMARY:
                case HiveSqlParser.KW_SYSTEM_TIME:
                case HiveSqlParser.KW_SYSTEM_VERSION:
                case HiveSqlParser.KW_TABLES:
                case HiveSqlParser.KW_TBLPROPERTIES:
                case HiveSqlParser.KW_TEMPORARY:
                case HiveSqlParser.KW_TERMINATED:
                case HiveSqlParser.KW_TIMESTAMPTZ:
                case HiveSqlParser.KW_TINYINT:
                case HiveSqlParser.KW_TOUCH:
                case HiveSqlParser.KW_TRANSACTION:
                case HiveSqlParser.KW_TRANSACTIONAL:
                case HiveSqlParser.KW_TRANSACTIONS:
                case HiveSqlParser.KW_TRIM:
                case HiveSqlParser.KW_TRUNCATE:
                case HiveSqlParser.KW_TYPE:
                case HiveSqlParser.KW_UNARCHIVE:
                case HiveSqlParser.KW_UNDO:
                case HiveSqlParser.KW_UNIONTYPE:
                case HiveSqlParser.KW_UNKNOWN:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UNMANAGED:
                case HiveSqlParser.KW_UNSET:
                case HiveSqlParser.KW_UNSIGNED:
                case HiveSqlParser.KW_UPDATE:
                case HiveSqlParser.KW_URI:
                case HiveSqlParser.KW_URL:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_UTC:
                case HiveSqlParser.KW_UTCTIMESTAMP:
                case HiveSqlParser.KW_VALIDATE:
                case HiveSqlParser.KW_VALUES:
                case HiveSqlParser.KW_VALUE_TYPE:
                case HiveSqlParser.KW_VECTORIZATION:
                case HiveSqlParser.KW_VIEW:
                case HiveSqlParser.KW_VIEWS:
                case HiveSqlParser.KW_WAIT:
                case HiveSqlParser.KW_WEEK:
                case HiveSqlParser.KW_WEEKS:
                case HiveSqlParser.KW_WHILE:
                case HiveSqlParser.KW_WITH:
                case HiveSqlParser.KW_WITHIN:
                case HiveSqlParser.KW_WORK:
                case HiveSqlParser.KW_WORKLOAD:
                case HiveSqlParser.KW_WRITE:
                case HiveSqlParser.KW_YEAR:
                case HiveSqlParser.KW_YEARS:
                case HiveSqlParser.KW_ZONE:
                case HiveSqlParser.SEMICOLON:
                case HiveSqlParser.LPAREN:
                case HiveSqlParser.Identifier:
                    {
                    this.state = 1282;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 93, this.context) ) {
                    case 1:
                        {
                        {
                        this.state = 1276;
                        this.db_schema();
                        this.state = 1277;
                        localContext._dbName = this.dbSchemaName();
                        }
                        }
                        break;
                    case 2:
                        {
                        this.state = 1280;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 92, this.context) ) {
                        case 1:
                            {
                            this.state = 1279;
                            localContext._parttype = this.partTypeExpr();
                            }
                            break;
                        }
                        }
                        break;
                    }
                    this.state = 1285;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 246) {
                        {
                        this.state = 1284;
                        this.compactionPool();
                        }
                    }

                    this.state = 1288;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 352) {
                        {
                        this.state = 1287;
                        this.compactionType();
                        }
                    }

                    this.state = 1291;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 320) {
                        {
                        this.state = 1290;
                        this.compactionStatus();
                        }
                    }

                    this.state = 1294;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 229) {
                        {
                        this.state = 1293;
                        this.orderByClause();
                        }
                    }

                    this.state = 1297;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 185) {
                        {
                        this.state = 1296;
                        this.limitClause();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1301;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1302;
                this.match(HiveSqlParser.KW_TRANSACTIONS);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1303;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1304;
                this.match(HiveSqlParser.KW_CONF);
                this.state = 1305;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1306;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1307;
                this.match(HiveSqlParser.KW_RESOURCE);
                this.state = 1311;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_PLAN:
                    {
                    this.state = 1308;
                    this.match(HiveSqlParser.KW_PLAN);
                    this.state = 1309;
                    localContext._rp_name = this.id_();
                    }
                    break;
                case HiveSqlParser.KW_PLANS:
                    {
                    this.state = 1310;
                    this.match(HiveSqlParser.KW_PLANS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1313;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1314;
                this.match(HiveSqlParser.KW_DATACONNECTORS);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1315;
                this.match(HiveSqlParser.KW_SHOW);
                this.state = 1317;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 1316;
                    this.match(HiveSqlParser.KW_FORMATTED);
                    }
                }

                this.state = 1319;
                _la = this.tokenStream.LA(1);
                if(!(_la === 155 || _la === 156)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1320;
                this.match(HiveSqlParser.KW_ON);
                this.state = 1321;
                this.tableName();
                this.state = 1325;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 102, this.context) ) {
                case 1:
                    {
                    this.state = 1322;
                    this.from_in();
                    this.state = 1323;
                    this.dbSchemaName();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showTablesFilterExpr(): ShowTablesFilterExprContext {
        let localContext = new ShowTablesFilterExprContext(this.context, this.state);
        this.enterRule(localContext, 74, HiveSqlParser.RULE_showTablesFilterExpr);
        try {
            this.state = 1337;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_WHERE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1329;
                this.match(HiveSqlParser.KW_WHERE);
                this.state = 1330;
                this.id_();
                this.state = 1331;
                this.match(HiveSqlParser.EQUAL);
                this.state = 1332;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case HiveSqlParser.KW_LIKE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1334;
                this.match(HiveSqlParser.KW_LIKE);
                this.state = 1335;
                this.showStmtIdentifier();
                }
                break;
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.StringLiteral:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1336;
                this.showStmtIdentifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockStatement(): LockStatementContext {
        let localContext = new LockStatementContext(this.context, this.state);
        this.enterRule(localContext, 76, HiveSqlParser.RULE_lockStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1339;
            this.match(HiveSqlParser.KW_LOCK);
            this.state = 1340;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 1341;
            this.tableOrPartition();
            this.state = 1342;
            this.lockMode();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockDatabase(): LockDatabaseContext {
        let localContext = new LockDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 78, HiveSqlParser.RULE_lockDatabase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1344;
            this.match(HiveSqlParser.KW_LOCK);
            this.state = 1345;
            this.db_schema();
            this.state = 1346;
            localContext._dbName = this.dbSchemaName();
            this.state = 1347;
            this.lockMode();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockMode(): LockModeContext {
        let localContext = new LockModeContext(this.context, this.state);
        this.enterRule(localContext, 80, HiveSqlParser.RULE_lockMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1349;
            _la = this.tokenStream.LA(1);
            if(!(_la === 114 || _la === 307)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlockStatement(): UnlockStatementContext {
        let localContext = new UnlockStatementContext(this.context, this.state);
        this.enterRule(localContext, 82, HiveSqlParser.RULE_unlockStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1351;
            this.match(HiveSqlParser.KW_UNLOCK);
            this.state = 1352;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 1353;
            this.tableOrPartition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlockDatabase(): UnlockDatabaseContext {
        let localContext = new UnlockDatabaseContext(this.context, this.state);
        this.enterRule(localContext, 84, HiveSqlParser.RULE_unlockDatabase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1355;
            this.match(HiveSqlParser.KW_UNLOCK);
            this.state = 1356;
            this.db_schema();
            this.state = 1357;
            localContext._dbName = this.dbSchemaName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRoleStatement(): CreateRoleStatementContext {
        let localContext = new CreateRoleStatementContext(this.context, this.state);
        this.enterRule(localContext, 86, HiveSqlParser.RULE_createRoleStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1359;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1360;
            this.match(HiveSqlParser.KW_ROLE);
            this.state = 1361;
            localContext._roleName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropRoleStatement(): DropRoleStatementContext {
        let localContext = new DropRoleStatementContext(this.context, this.state);
        this.enterRule(localContext, 88, HiveSqlParser.RULE_dropRoleStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1363;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1364;
            this.match(HiveSqlParser.KW_ROLE);
            this.state = 1365;
            localContext._roleName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantPrivileges(): GrantPrivilegesContext {
        let localContext = new GrantPrivilegesContext(this.context, this.state);
        this.enterRule(localContext, 90, HiveSqlParser.RULE_grantPrivileges);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1367;
            this.match(HiveSqlParser.KW_GRANT);
            this.state = 1368;
            localContext._privList = this.privilegeList();
            this.state = 1370;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 224) {
                {
                this.state = 1369;
                this.privilegeObject();
                }
            }

            this.state = 1372;
            this.match(HiveSqlParser.KW_TO);
            this.state = 1373;
            this.principalSpecification();
            this.state = 1375;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 106, this.context) ) {
            case 1:
                {
                this.state = 1374;
                this.withGrantOption();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokePrivileges(): RevokePrivilegesContext {
        let localContext = new RevokePrivilegesContext(this.context, this.state);
        this.enterRule(localContext, 92, HiveSqlParser.RULE_revokePrivileges);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1377;
            this.match(HiveSqlParser.KW_REVOKE);
            this.state = 1379;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 1378;
                this.grantOptionFor();
                }
            }

            this.state = 1381;
            this.privilegeList();
            this.state = 1383;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 224) {
                {
                this.state = 1382;
                this.privilegeObject();
                }
            }

            this.state = 1385;
            this.match(HiveSqlParser.KW_FROM);
            this.state = 1386;
            this.principalSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantRole(): GrantRoleContext {
        let localContext = new GrantRoleContext(this.context, this.state);
        this.enterRule(localContext, 94, HiveSqlParser.RULE_grantRole);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1388;
            this.match(HiveSqlParser.KW_GRANT);
            this.state = 1390;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 109, this.context) ) {
            case 1:
                {
                this.state = 1389;
                this.match(HiveSqlParser.KW_ROLE);
                }
                break;
            }
            this.state = 1392;
            this.id_();
            this.state = 1397;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1393;
                this.match(HiveSqlParser.COMMA);
                this.state = 1394;
                this.id_();
                }
                }
                this.state = 1399;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1400;
            this.match(HiveSqlParser.KW_TO);
            this.state = 1401;
            this.principalSpecification();
            this.state = 1403;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 111, this.context) ) {
            case 1:
                {
                this.state = 1402;
                this.withAdminOption();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokeRole(): RevokeRoleContext {
        let localContext = new RevokeRoleContext(this.context, this.state);
        this.enterRule(localContext, 96, HiveSqlParser.RULE_revokeRole);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1405;
            this.match(HiveSqlParser.KW_REVOKE);
            this.state = 1407;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 112, this.context) ) {
            case 1:
                {
                this.state = 1406;
                this.adminOptionFor();
                }
                break;
            }
            this.state = 1410;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 113, this.context) ) {
            case 1:
                {
                this.state = 1409;
                this.match(HiveSqlParser.KW_ROLE);
                }
                break;
            }
            this.state = 1412;
            this.id_();
            this.state = 1417;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1413;
                this.match(HiveSqlParser.COMMA);
                this.state = 1414;
                this.id_();
                }
                }
                this.state = 1419;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1420;
            this.match(HiveSqlParser.KW_FROM);
            this.state = 1421;
            this.principalSpecification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRoleGrants(): ShowRoleGrantsContext {
        let localContext = new ShowRoleGrantsContext(this.context, this.state);
        this.enterRule(localContext, 98, HiveSqlParser.RULE_showRoleGrants);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1423;
            this.match(HiveSqlParser.KW_SHOW);
            this.state = 1424;
            this.match(HiveSqlParser.KW_ROLE);
            this.state = 1425;
            this.match(HiveSqlParser.KW_GRANT);
            this.state = 1426;
            this.principalName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRoles(): ShowRolesContext {
        let localContext = new ShowRolesContext(this.context, this.state);
        this.enterRule(localContext, 100, HiveSqlParser.RULE_showRoles);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1428;
            this.match(HiveSqlParser.KW_SHOW);
            this.state = 1429;
            this.match(HiveSqlParser.KW_ROLES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showCurrentRole(): ShowCurrentRoleContext {
        let localContext = new ShowCurrentRoleContext(this.context, this.state);
        this.enterRule(localContext, 102, HiveSqlParser.RULE_showCurrentRole);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1431;
            this.match(HiveSqlParser.KW_SHOW);
            this.state = 1432;
            this.match(HiveSqlParser.KW_CURRENT);
            this.state = 1433;
            this.match(HiveSqlParser.KW_ROLES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setRole(): SetRoleContext {
        let localContext = new SetRoleContext(this.context, this.state);
        this.enterRule(localContext, 104, HiveSqlParser.RULE_setRole);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1435;
            this.match(HiveSqlParser.KW_SET);
            this.state = 1436;
            this.match(HiveSqlParser.KW_ROLE);
            this.state = 1440;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ALL:
                {
                this.state = 1437;
                localContext._all = this.match(HiveSqlParser.KW_ALL);
                }
                break;
            case HiveSqlParser.KW_NONE:
                {
                this.state = 1438;
                localContext._none = this.match(HiveSqlParser.KW_NONE);
                }
                break;
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.Identifier:
                {
                this.state = 1439;
                this.id_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showGrants(): ShowGrantsContext {
        let localContext = new ShowGrantsContext(this.context, this.state);
        this.enterRule(localContext, 106, HiveSqlParser.RULE_showGrants);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1442;
            this.match(HiveSqlParser.KW_SHOW);
            this.state = 1443;
            this.match(HiveSqlParser.KW_GRANT);
            this.state = 1445;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 144 || _la === 287 || _la === 369) {
                {
                this.state = 1444;
                this.principalName();
                }
            }

            this.state = 1449;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 224) {
                {
                this.state = 1447;
                this.match(HiveSqlParser.KW_ON);
                this.state = 1448;
                this.privilegeIncludeColObject();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showRolePrincipals(): ShowRolePrincipalsContext {
        let localContext = new ShowRolePrincipalsContext(this.context, this.state);
        this.enterRule(localContext, 108, HiveSqlParser.RULE_showRolePrincipals);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1451;
            this.match(HiveSqlParser.KW_SHOW);
            this.state = 1452;
            this.match(HiveSqlParser.KW_PRINCIPALS);
            this.state = 1453;
            localContext._roleName = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeIncludeColObject(): PrivilegeIncludeColObjectContext {
        let localContext = new PrivilegeIncludeColObjectContext(this.context, this.state);
        this.enterRule(localContext, 110, HiveSqlParser.RULE_privilegeIncludeColObject);
        try {
            this.state = 1457;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ALL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1455;
                this.match(HiveSqlParser.KW_ALL);
                }
                break;
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASE:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLE:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1456;
                this.privObjectCols();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeObject(): PrivilegeObjectContext {
        let localContext = new PrivilegeObjectContext(this.context, this.state);
        this.enterRule(localContext, 112, HiveSqlParser.RULE_privilegeObject);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1459;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1460;
            this.privObject();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privObject(): PrivObjectContext {
        let localContext = new PrivObjectContext(this.context, this.state);
        this.enterRule(localContext, 114, HiveSqlParser.RULE_privObject);
        let _la: number;
        try {
            this.state = 1473;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1462;
                this.db_schema();
                this.state = 1463;
                this.dbSchemaName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1466;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 1465;
                    this.match(HiveSqlParser.KW_TABLE);
                    }
                }

                this.state = 1468;
                this.tableOrPartition();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1469;
                this.match(HiveSqlParser.KW_URI);
                this.state = 1470;
                localContext._path = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1471;
                this.match(HiveSqlParser.KW_SERVER);
                this.state = 1472;
                this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privObjectCols(): PrivObjectColsContext {
        let localContext = new PrivObjectColsContext(this.context, this.state);
        this.enterRule(localContext, 116, HiveSqlParser.RULE_privObjectCols);
        let _la: number;
        try {
            this.state = 1495;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 124, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1475;
                this.db_schema();
                this.state = 1476;
                this.dbSchemaName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1479;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 1478;
                    this.match(HiveSqlParser.KW_TABLE);
                    }
                }

                this.state = 1481;
                this.tableName();
                this.state = 1486;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 122, this.context) ) {
                case 1:
                    {
                    this.state = 1482;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 1483;
                    localContext._cols = this.columnNameList();
                    this.state = 1484;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                }
                this.state = 1489;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 237) {
                    {
                    this.state = 1488;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1491;
                this.match(HiveSqlParser.KW_URI);
                this.state = 1492;
                localContext._path = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1493;
                this.match(HiveSqlParser.KW_SERVER);
                this.state = 1494;
                this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeList(): PrivilegeListContext {
        let localContext = new PrivilegeListContext(this.context, this.state);
        this.enterRule(localContext, 118, HiveSqlParser.RULE_privilegeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1497;
            this.privlegeDef();
            this.state = 1502;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1498;
                this.match(HiveSqlParser.COMMA);
                this.state = 1499;
                this.privlegeDef();
                }
                }
                this.state = 1504;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privlegeDef(): PrivlegeDefContext {
        let localContext = new PrivlegeDefContext(this.context, this.state);
        this.enterRule(localContext, 120, HiveSqlParser.RULE_privlegeDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1505;
            this.privilegeType();
            this.state = 1510;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399) {
                {
                this.state = 1506;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1507;
                localContext._cols = this.columnNameList();
                this.state = 1508;
                this.match(HiveSqlParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeType(): PrivilegeTypeContext {
        let localContext = new PrivilegeTypeContext(this.context, this.state);
        this.enterRule(localContext, 122, HiveSqlParser.RULE_privilegeType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1512;
            _la = this.tokenStream.LA(1);
            if(!(_la === 7 || _la === 9 || _la === 58 || _la === 86 || _la === 101 || _la === 155 || _la === 161 || _la === 190 || _la === 299 || _la === 309 || _la === 365)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        let localContext = new PrincipalSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 124, HiveSqlParser.RULE_principalSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1514;
            this.principalName();
            this.state = 1519;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1515;
                this.match(HiveSqlParser.COMMA);
                this.state = 1516;
                this.principalName();
                }
                }
                this.state = 1521;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principalName(): PrincipalNameContext {
        let localContext = new PrincipalNameContext(this.context, this.state);
        this.enterRule(localContext, 126, HiveSqlParser.RULE_principalName);
        try {
            this.state = 1528;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_USER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1522;
                this.match(HiveSqlParser.KW_USER);
                this.state = 1523;
                this.principalIdentifier();
                }
                break;
            case HiveSqlParser.KW_GROUP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1524;
                this.match(HiveSqlParser.KW_GROUP);
                this.state = 1525;
                this.principalIdentifier();
                }
                break;
            case HiveSqlParser.KW_ROLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1526;
                this.match(HiveSqlParser.KW_ROLE);
                this.state = 1527;
                this.id_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principalAlterName(): PrincipalAlterNameContext {
        let localContext = new PrincipalAlterNameContext(this.context, this.state);
        this.enterRule(localContext, 128, HiveSqlParser.RULE_principalAlterName);
        try {
            this.state = 1535;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 129, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1530;
                this.match(HiveSqlParser.KW_USER);
                this.state = 1531;
                this.principalIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1532;
                this.match(HiveSqlParser.KW_ROLE);
                this.state = 1533;
                this.id_();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1534;
                this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withGrantOption(): WithGrantOptionContext {
        let localContext = new WithGrantOptionContext(this.context, this.state);
        this.enterRule(localContext, 130, HiveSqlParser.RULE_withGrantOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1537;
            this.match(HiveSqlParser.KW_WITH);
            this.state = 1538;
            this.match(HiveSqlParser.KW_GRANT);
            this.state = 1539;
            this.match(HiveSqlParser.KW_OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantOptionFor(): GrantOptionForContext {
        let localContext = new GrantOptionForContext(this.context, this.state);
        this.enterRule(localContext, 132, HiveSqlParser.RULE_grantOptionFor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1541;
            this.match(HiveSqlParser.KW_GRANT);
            this.state = 1542;
            this.match(HiveSqlParser.KW_OPTION);
            this.state = 1543;
            this.match(HiveSqlParser.KW_FOR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public adminOptionFor(): AdminOptionForContext {
        let localContext = new AdminOptionForContext(this.context, this.state);
        this.enterRule(localContext, 134, HiveSqlParser.RULE_adminOptionFor);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1545;
            this.match(HiveSqlParser.KW_ADMIN);
            this.state = 1546;
            this.match(HiveSqlParser.KW_OPTION);
            this.state = 1547;
            this.match(HiveSqlParser.KW_FOR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withAdminOption(): WithAdminOptionContext {
        let localContext = new WithAdminOptionContext(this.context, this.state);
        this.enterRule(localContext, 136, HiveSqlParser.RULE_withAdminOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1549;
            this.match(HiveSqlParser.KW_WITH);
            this.state = 1550;
            this.match(HiveSqlParser.KW_ADMIN);
            this.state = 1551;
            this.match(HiveSqlParser.KW_OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public metastoreCheck(): MetastoreCheckContext {
        let localContext = new MetastoreCheckContext(this.context, this.state);
        this.enterRule(localContext, 138, HiveSqlParser.RULE_metastoreCheck);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1553;
            this.match(HiveSqlParser.KW_MSCK);
            this.state = 1555;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 276) {
                {
                this.state = 1554;
                localContext._repair = this.match(HiveSqlParser.KW_REPAIR);
                }
            }

            {
            this.state = 1557;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 1558;
            this.tableName();
            this.state = 1564;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 132, this.context) ) {
            case 1:
                {
                this.state = 1559;
                localContext._opt = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 4 || _la === 101 || _la === 326)) {
                    localContext._opt = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1560;
                localContext._parts = this.match(HiveSqlParser.KW_PARTITIONS);
                this.state = 1562;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 131, this.context) ) {
                case 1:
                    {
                    this.state = 1561;
                    this.partitionSelectorSpec();
                    }
                    break;
                }
                }
                break;
            }
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourceList(): ResourceListContext {
        let localContext = new ResourceListContext(this.context, this.state);
        this.enterRule(localContext, 140, HiveSqlParser.RULE_resourceList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1566;
            this.resource();
            this.state = 1571;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1567;
                this.match(HiveSqlParser.COMMA);
                this.state = 1568;
                this.resource();
                }
                }
                this.state = 1573;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resource(): ResourceContext {
        let localContext = new ResourceContext(this.context, this.state);
        this.enterRule(localContext, 142, HiveSqlParser.RULE_resource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1574;
            localContext._resType = this.resourceType();
            this.state = 1575;
            localContext._resPath = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourceType(): ResourceTypeContext {
        let localContext = new ResourceTypeContext(this.context, this.state);
        this.enterRule(localContext, 144, HiveSqlParser.RULE_resourceType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1577;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 128 || _la === 170)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFunctionStatement(): CreateFunctionStatementContext {
        let localContext = new CreateFunctionStatementContext(this.context, this.state);
        this.enterRule(localContext, 146, HiveSqlParser.RULE_createFunctionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1579;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1581;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 333) {
                {
                this.state = 1580;
                localContext._temp = this.match(HiveSqlParser.KW_TEMPORARY);
                }
            }

            this.state = 1583;
            this.match(HiveSqlParser.KW_FUNCTION);
            this.state = 1584;
            this.functionNameCreate();
            this.state = 1585;
            this.match(HiveSqlParser.KW_AS);
            this.state = 1586;
            this.match(HiveSqlParser.StringLiteral);
            this.state = 1589;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 370) {
                {
                this.state = 1587;
                this.match(HiveSqlParser.KW_USING);
                this.state = 1588;
                localContext._rList = this.resourceList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropFunctionStatement(): DropFunctionStatementContext {
        let localContext = new DropFunctionStatementContext(this.context, this.state);
        this.enterRule(localContext, 148, HiveSqlParser.RULE_dropFunctionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1591;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1593;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 333) {
                {
                this.state = 1592;
                localContext._temp = this.match(HiveSqlParser.KW_TEMPORARY);
                }
            }

            this.state = 1595;
            this.match(HiveSqlParser.KW_FUNCTION);
            this.state = 1597;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1596;
                this.ifExists();
                }
            }

            this.state = 1599;
            this.functionNameForDDL();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reloadFunctionsStatement(): ReloadFunctionsStatementContext {
        let localContext = new ReloadFunctionsStatementContext(this.context, this.state);
        this.enterRule(localContext, 150, HiveSqlParser.RULE_reloadFunctionsStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1601;
            this.match(HiveSqlParser.KW_RELOAD);
            this.state = 1602;
            _la = this.tokenStream.LA(1);
            if(!(_la === 141 || _la === 142)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMacroStatement(): CreateMacroStatementContext {
        let localContext = new CreateMacroStatementContext(this.context, this.state);
        this.enterRule(localContext, 152, HiveSqlParser.RULE_createMacroStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1604;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1605;
            this.match(HiveSqlParser.KW_TEMPORARY);
            this.state = 1606;
            this.match(HiveSqlParser.KW_MACRO);
            this.state = 1607;
            this.match(HiveSqlParser.Identifier);
            this.state = 1608;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1610;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394 || _la === 432) {
                {
                this.state = 1609;
                this.columnNameTypeList();
                }
            }

            this.state = 1612;
            this.match(HiveSqlParser.RPAREN);
            this.state = 1613;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropMacroStatement(): DropMacroStatementContext {
        let localContext = new DropMacroStatementContext(this.context, this.state);
        this.enterRule(localContext, 154, HiveSqlParser.RULE_dropMacroStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1615;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1616;
            this.match(HiveSqlParser.KW_TEMPORARY);
            this.state = 1617;
            this.match(HiveSqlParser.KW_MACRO);
            this.state = 1619;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1618;
                this.ifExists();
                }
            }

            this.state = 1621;
            this.match(HiveSqlParser.Identifier);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createIndexStatement(): CreateIndexStatementContext {
        let localContext = new CreateIndexStatementContext(this.context, this.state);
        this.enterRule(localContext, 156, HiveSqlParser.RULE_createIndexStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1623;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1624;
            this.match(HiveSqlParser.KW_INDEX);
            this.state = 1625;
            this.id_();
            this.state = 1626;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1627;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 1628;
            this.tableName();
            this.state = 1629;
            this.columnParenthesesList();
            this.state = 1630;
            this.match(HiveSqlParser.KW_AS);
            this.state = 1631;
            localContext._indextype = this.match(HiveSqlParser.StringLiteral);
            this.state = 1635;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 140, this.context) ) {
            case 1:
                {
                this.state = 1632;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 1633;
                this.match(HiveSqlParser.KW_DEFERRED);
                this.state = 1634;
                this.match(HiveSqlParser.KW_REBUILD);
                }
                break;
            }
            this.state = 1639;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 150) {
                {
                this.state = 1637;
                this.match(HiveSqlParser.KW_IDXPROPERTIES);
                this.state = 1638;
                this.tableProperties();
                }
            }

            this.state = 1644;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 154) {
                {
                this.state = 1641;
                this.match(HiveSqlParser.KW_IN);
                this.state = 1642;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 1643;
                this.tableName();
                }
            }

            this.state = 1649;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 238) {
                {
                this.state = 1646;
                this.match(HiveSqlParser.KW_PARTITIONED);
                this.state = 1647;
                this.match(HiveSqlParser.KW_BY);
                this.state = 1648;
                this.columnParenthesesList();
                }
            }

            this.state = 1655;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 291 || _la === 321) {
                {
                this.state = 1652;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 291) {
                    {
                    this.state = 1651;
                    this.tableRowFormat();
                    }
                }

                this.state = 1654;
                this.tableFileFormat();
                }
            }

            this.state = 1658;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 189) {
                {
                this.state = 1657;
                this.locationPath();
                }
            }

            this.state = 1661;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 332) {
                {
                this.state = 1660;
                this.tablePropertiesPrefixed();
                }
            }

            this.state = 1664;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 1663;
                this.tableComment();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropIndexStatement(): DropIndexStatementContext {
        let localContext = new DropIndexStatementContext(this.context, this.state);
        this.enterRule(localContext, 158, HiveSqlParser.RULE_dropIndexStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1666;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1667;
            this.match(HiveSqlParser.KW_INDEX);
            this.state = 1669;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1668;
                this.ifExists();
                }
            }

            this.state = 1671;
            this.id_();
            this.state = 1672;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1673;
            this.tableName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createViewStatement(): CreateViewStatementContext {
        let localContext = new CreateViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 160, HiveSqlParser.RULE_createViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1675;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1678;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 228) {
                {
                this.state = 1676;
                this.match(HiveSqlParser.KW_OR);
                this.state = 1677;
                this.match(HiveSqlParser.KW_REPLACE);
                }
            }

            this.state = 1680;
            this.match(HiveSqlParser.KW_VIEW);
            this.state = 1682;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1681;
                this.ifNotExists();
                }
            }

            this.state = 1684;
            localContext._name = this.viewNameCreate();
            this.state = 1689;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399) {
                {
                this.state = 1685;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1686;
                this.columnNameCommentList();
                this.state = 1687;
                this.match(HiveSqlParser.RPAREN);
                }
            }

            this.state = 1692;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 1691;
                this.tableComment();
                }
            }

            this.state = 1695;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 238) {
                {
                this.state = 1694;
                this.viewPartition();
                }
            }

            this.state = 1698;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 332) {
                {
                this.state = 1697;
                this.tablePropertiesPrefixed();
                }
            }

            this.state = 1700;
            this.match(HiveSqlParser.KW_AS);
            this.state = 1701;
            this.selectStatementWithCTE();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewPartition(): ViewPartitionContext {
        let localContext = new ViewPartitionContext(this.context, this.state);
        this.enterRule(localContext, 162, HiveSqlParser.RULE_viewPartition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1703;
            this.match(HiveSqlParser.KW_PARTITIONED);
            this.state = 1704;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1710;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.LPAREN:
                {
                this.state = 1705;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1706;
                this.columnNameList();
                }
                break;
            case HiveSqlParser.KW_SPEC:
                {
                this.state = 1707;
                this.match(HiveSqlParser.KW_SPEC);
                this.state = 1708;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1709;
                localContext._spec = this.partitionTransformSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1712;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewOrganization(): ViewOrganizationContext {
        let localContext = new ViewOrganizationContext(this.context, this.state);
        this.enterRule(localContext, 164, HiveSqlParser.RULE_viewOrganization);
        try {
            this.state = 1716;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_CLUSTERED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1714;
                this.viewClusterSpec();
                }
                break;
            case HiveSqlParser.KW_DISTRIBUTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1715;
                this.viewComplexSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewClusterSpec(): ViewClusterSpecContext {
        let localContext = new ViewClusterSpecContext(this.context, this.state);
        this.enterRule(localContext, 166, HiveSqlParser.RULE_viewClusterSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1718;
            this.match(HiveSqlParser.KW_CLUSTERED);
            this.state = 1719;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1720;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1721;
            this.columnNameList();
            this.state = 1722;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewComplexSpec(): ViewComplexSpecContext {
        let localContext = new ViewComplexSpecContext(this.context, this.state);
        this.enterRule(localContext, 168, HiveSqlParser.RULE_viewComplexSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1724;
            this.viewDistSpec();
            this.state = 1725;
            this.viewSortSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewDistSpec(): ViewDistSpecContext {
        let localContext = new ViewDistSpecContext(this.context, this.state);
        this.enterRule(localContext, 170, HiveSqlParser.RULE_viewDistSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1727;
            this.match(HiveSqlParser.KW_DISTRIBUTED);
            this.state = 1728;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1729;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1730;
            localContext._colList = this.columnNameList();
            this.state = 1731;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewSortSpec(): ViewSortSpecContext {
        let localContext = new ViewSortSpecContext(this.context, this.state);
        this.enterRule(localContext, 172, HiveSqlParser.RULE_viewSortSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1733;
            this.match(HiveSqlParser.KW_SORTED);
            this.state = 1734;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1735;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1736;
            localContext._colList = this.columnNameList();
            this.state = 1737;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropViewStatement(): DropViewStatementContext {
        let localContext = new DropViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 174, HiveSqlParser.RULE_dropViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1739;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1740;
            this.match(HiveSqlParser.KW_VIEW);
            this.state = 1742;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1741;
                this.ifExists();
                }
            }

            this.state = 1744;
            this.viewName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext {
        let localContext = new CreateMaterializedViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 176, HiveSqlParser.RULE_createMaterializedViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1746;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1747;
            this.match(HiveSqlParser.KW_MATERIALIZED);
            this.state = 1748;
            this.match(HiveSqlParser.KW_VIEW);
            this.state = 1750;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1749;
                this.ifNotExists();
                }
            }

            this.state = 1752;
            localContext._name = this.viewNameCreate();
            this.state = 1754;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 94 || _la === 95) {
                {
                this.state = 1753;
                this.rewriteDisabled();
                }
            }

            this.state = 1757;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 1756;
                this.tableComment();
                }
            }

            this.state = 1760;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 238) {
                {
                this.state = 1759;
                this.viewPartition();
                }
            }

            this.state = 1763;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 42 || _la === 98) {
                {
                this.state = 1762;
                this.viewOrganization();
                }
            }

            this.state = 1766;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 291) {
                {
                this.state = 1765;
                this.tableRowFormat();
                }
            }

            this.state = 1769;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 321) {
                {
                this.state = 1768;
                this.tableFileFormat();
                }
            }

            this.state = 1772;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 189) {
                {
                this.state = 1771;
                this.locationPath();
                }
            }

            this.state = 1775;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 332) {
                {
                this.state = 1774;
                this.tablePropertiesPrefixed();
                }
            }

            this.state = 1777;
            this.match(HiveSqlParser.KW_AS);
            this.state = 1778;
            this.selectStatementWithCTE();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropMaterializedViewStatement(): DropMaterializedViewStatementContext {
        let localContext = new DropMaterializedViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 178, HiveSqlParser.RULE_dropMaterializedViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1780;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1781;
            this.match(HiveSqlParser.KW_MATERIALIZED);
            this.state = 1782;
            this.match(HiveSqlParser.KW_VIEW);
            this.state = 1784;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 1783;
                this.ifExists();
                }
            }

            this.state = 1786;
            this.viewName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createScheduledQueryStatement(): CreateScheduledQueryStatementContext {
        let localContext = new CreateScheduledQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 180, HiveSqlParser.RULE_createScheduledQueryStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1788;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 1789;
            this.match(HiveSqlParser.KW_SCHEDULED);
            this.state = 1790;
            this.match(HiveSqlParser.KW_QUERY);
            this.state = 1791;
            localContext._name = this.id_();
            this.state = 1792;
            this.scheduleSpec();
            this.state = 1794;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 116) {
                {
                this.state = 1793;
                this.executedAsSpec();
                }
            }

            this.state = 1797;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 12291) !== 0)) {
                {
                this.state = 1796;
                this.enableSpecification();
                }
            }

            this.state = 1799;
            this.definedAsSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropScheduledQueryStatement(): DropScheduledQueryStatementContext {
        let localContext = new DropScheduledQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 182, HiveSqlParser.RULE_dropScheduledQueryStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1801;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 1802;
            this.match(HiveSqlParser.KW_SCHEDULED);
            this.state = 1803;
            this.match(HiveSqlParser.KW_QUERY);
            this.state = 1804;
            localContext._name = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterScheduledQueryStatement(): AlterScheduledQueryStatementContext {
        let localContext = new AlterScheduledQueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 184, HiveSqlParser.RULE_alterScheduledQueryStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1806;
            this.match(HiveSqlParser.KW_ALTER);
            this.state = 1807;
            this.match(HiveSqlParser.KW_SCHEDULED);
            this.state = 1808;
            this.match(HiveSqlParser.KW_QUERY);
            this.state = 1809;
            localContext._name = this.id_();
            this.state = 1810;
            localContext._mod = this.alterScheduledQueryChange();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterScheduledQueryChange(): AlterScheduledQueryChangeContext {
        let localContext = new AlterScheduledQueryChangeContext(this.context, this.state);
        this.enterRule(localContext, 186, HiveSqlParser.RULE_alterScheduledQueryChange);
        try {
            this.state = 1817;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_EVERY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1812;
                this.scheduleSpec();
                }
                break;
            case HiveSqlParser.KW_EXECUTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1813;
                this.executedAsSpec();
                }
                break;
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1814;
                this.enableSpecification();
                }
                break;
            case HiveSqlParser.KW_AS:
            case HiveSqlParser.KW_DEFINED:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1815;
                this.definedAsSpec();
                }
                break;
            case HiveSqlParser.KW_EXECUTE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1816;
                this.match(HiveSqlParser.KW_EXECUTE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public scheduleSpec(): ScheduleSpecContext {
        let localContext = new ScheduleSpecContext(this.context, this.state);
        this.enterRule(localContext, 188, HiveSqlParser.RULE_scheduleSpec);
        let _la: number;
        try {
            this.state = 1834;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_CRON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1819;
                this.match(HiveSqlParser.KW_CRON);
                this.state = 1820;
                localContext._cronString = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case HiveSqlParser.KW_EVERY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1821;
                this.match(HiveSqlParser.KW_EVERY);
                this.state = 1823;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 431) {
                    {
                    this.state = 1822;
                    localContext._value = this.match(HiveSqlParser.Number);
                    }
                }

                this.state = 1825;
                localContext._qualifier = this.intervalQualifiers();
                this.state = 1832;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20 || _la === 223) {
                    {
                    this.state = 1829;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case HiveSqlParser.KW_AT:
                        {
                        this.state = 1826;
                        this.match(HiveSqlParser.KW_AT);
                        }
                        break;
                    case HiveSqlParser.KW_OFFSET:
                        {
                        this.state = 1827;
                        this.match(HiveSqlParser.KW_OFFSET);
                        this.state = 1828;
                        this.match(HiveSqlParser.KW_BY);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1831;
                    localContext._offsetTs = this.match(HiveSqlParser.StringLiteral);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executedAsSpec(): ExecutedAsSpecContext {
        let localContext = new ExecutedAsSpecContext(this.context, this.state);
        this.enterRule(localContext, 190, HiveSqlParser.RULE_executedAsSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1836;
            this.match(HiveSqlParser.KW_EXECUTED);
            this.state = 1837;
            this.match(HiveSqlParser.KW_AS);
            this.state = 1838;
            localContext._executedAs = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public definedAsSpec(): DefinedAsSpecContext {
        let localContext = new DefinedAsSpecContext(this.context, this.state);
        this.enterRule(localContext, 192, HiveSqlParser.RULE_definedAsSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1841;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 85) {
                {
                this.state = 1840;
                this.match(HiveSqlParser.KW_DEFINED);
                }
            }

            this.state = 1843;
            this.match(HiveSqlParser.KW_AS);
            this.state = 1844;
            this.statement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStmtIdentifier(): ShowStmtIdentifierContext {
        let localContext = new ShowStmtIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 194, HiveSqlParser.RULE_showStmtIdentifier);
        try {
            this.state = 1848;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1846;
                this.id_();
                }
                break;
            case HiveSqlParser.StringLiteral:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1847;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableComment(): TableCommentContext {
        let localContext = new TableCommentContext(this.context, this.state);
        this.enterRule(localContext, 196, HiveSqlParser.RULE_tableComment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1850;
            this.match(HiveSqlParser.KW_COMMENT);
            this.state = 1851;
            localContext._comment = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableLifecycle(): TableLifecycleContext {
        let localContext = new TableLifecycleContext(this.context, this.state);
        this.enterRule(localContext, 198, HiveSqlParser.RULE_tableLifecycle);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1853;
            this.match(HiveSqlParser.KW_LIFECYCLE);
            this.state = 1854;
            this.match(HiveSqlParser.Number);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTablePartitionSpec(): CreateTablePartitionSpecContext {
        let localContext = new CreateTablePartitionSpecContext(this.context, this.state);
        this.enterRule(localContext, 200, HiveSqlParser.RULE_createTablePartitionSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1856;
            this.match(HiveSqlParser.KW_PARTITIONED);
            this.state = 1857;
            this.match(HiveSqlParser.KW_BY);
            this.state = 1866;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.LPAREN:
                {
                this.state = 1858;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1861;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 178, this.context) ) {
                case 1:
                    {
                    this.state = 1859;
                    localContext._opt1 = this.createTablePartitionColumnTypeSpec();
                    }
                    break;
                case 2:
                    {
                    this.state = 1860;
                    localContext._opt2 = this.columnNameList();
                    }
                    break;
                }
                }
                break;
            case HiveSqlParser.KW_SPEC:
                {
                this.state = 1863;
                this.match(HiveSqlParser.KW_SPEC);
                this.state = 1864;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1865;
                localContext._spec = this.partitionTransformSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1868;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTablePartitionColumnTypeSpec(): CreateTablePartitionColumnTypeSpecContext {
        let localContext = new CreateTablePartitionColumnTypeSpecContext(this.context, this.state);
        this.enterRule(localContext, 202, HiveSqlParser.RULE_createTablePartitionColumnTypeSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1870;
            this.columnNameTypeConstraint();
            this.state = 1875;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1871;
                this.match(HiveSqlParser.COMMA);
                this.state = 1872;
                this.columnNameTypeConstraint();
                }
                }
                this.state = 1877;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionTransformSpec(): PartitionTransformSpecContext {
        let localContext = new PartitionTransformSpecContext(this.context, this.state);
        this.enterRule(localContext, 204, HiveSqlParser.RULE_partitionTransformSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1878;
            this.partitionTransformType();
            this.state = 1883;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1879;
                this.match(HiveSqlParser.COMMA);
                this.state = 1880;
                this.partitionTransformType();
                }
                }
                this.state = 1885;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionTransformType(): PartitionTransformTypeContext {
        let localContext = new PartitionTransformTypeContext(this.context, this.state);
        this.enterRule(localContext, 206, HiveSqlParser.RULE_partitionTransformType);
        let _la: number;
        try {
            this.state = 1904;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 183, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1886;
                this.columnName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1891;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_YEAR:
                case HiveSqlParser.KW_YEARS:
                    {
                    this.state = 1887;
                    this.year();
                    }
                    break;
                case HiveSqlParser.KW_MONTH:
                case HiveSqlParser.KW_MONTHS:
                    {
                    this.state = 1888;
                    this.month();
                    }
                    break;
                case HiveSqlParser.KW_DAY:
                case HiveSqlParser.KW_DAYS:
                    {
                    this.state = 1889;
                    this.day();
                    }
                    break;
                case HiveSqlParser.KW_HOUR:
                case HiveSqlParser.KW_HOURS:
                    {
                    this.state = 1890;
                    this.hour();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1893;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1894;
                this.columnName();
                this.state = 1895;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1897;
                _la = this.tokenStream.LA(1);
                if(!(_la === 30 || _la === 351)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1898;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1899;
                localContext._value = this.match(HiveSqlParser.Number);
                this.state = 1900;
                this.match(HiveSqlParser.COMMA);
                this.state = 1901;
                this.columnName();
                this.state = 1902;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableBuckets(): TableBucketsContext {
        let localContext = new TableBucketsContext(this.context, this.state);
        this.enterRule(localContext, 208, HiveSqlParser.RULE_tableBuckets);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1906;
            this.match(HiveSqlParser.KW_CLUSTERED);
            this.state = 1907;
            this.match(HiveSqlParser.KW_BY);
            this.state = 1908;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1909;
            localContext._bucketCols = this.columnNameList();
            this.state = 1910;
            this.match(HiveSqlParser.RPAREN);
            this.state = 1917;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 315) {
                {
                this.state = 1911;
                this.match(HiveSqlParser.KW_SORTED);
                this.state = 1912;
                this.match(HiveSqlParser.KW_BY);
                this.state = 1913;
                this.match(HiveSqlParser.LPAREN);
                this.state = 1914;
                localContext._sortCols = this.columnNameOrderList();
                this.state = 1915;
                this.match(HiveSqlParser.RPAREN);
                }
            }

            this.state = 1919;
            this.match(HiveSqlParser.KW_INTO);
            this.state = 1920;
            localContext._num = this.match(HiveSqlParser.Number);
            this.state = 1921;
            this.match(HiveSqlParser.KW_BUCKETS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSkewed(): TableSkewedContext {
        let localContext = new TableSkewedContext(this.context, this.state);
        this.enterRule(localContext, 210, HiveSqlParser.RULE_tableSkewed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1923;
            this.match(HiveSqlParser.KW_SKEWED);
            this.state = 1924;
            this.match(HiveSqlParser.KW_BY);
            this.state = 1925;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1926;
            localContext._skewedCols = this.columnNameList();
            this.state = 1927;
            this.match(HiveSqlParser.RPAREN);
            this.state = 1928;
            this.match(HiveSqlParser.KW_ON);
            this.state = 1929;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1930;
            localContext._skewedValues = this.skewedValueElement();
            this.state = 1931;
            this.match(HiveSqlParser.RPAREN);
            this.state = 1933;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 185, this.context) ) {
            case 1:
                {
                this.state = 1932;
                this.storedAsDirs();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormat(): RowFormatContext {
        let localContext = new RowFormatContext(this.context, this.state);
        this.enterRule(localContext, 212, HiveSqlParser.RULE_rowFormat);
        try {
            this.state = 1937;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 186, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1935;
                this.rowFormatSerde();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1936;
                this.rowFormatDelimited();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public recordReader(): RecordReaderContext {
        let localContext = new RecordReaderContext(this.context, this.state);
        this.enterRule(localContext, 214, HiveSqlParser.RULE_recordReader);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1939;
            this.match(HiveSqlParser.KW_RECORDREADER);
            this.state = 1940;
            this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public recordWriter(): RecordWriterContext {
        let localContext = new RecordWriterContext(this.context, this.state);
        this.enterRule(localContext, 216, HiveSqlParser.RULE_recordWriter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1942;
            this.match(HiveSqlParser.KW_RECORDWRITER);
            this.state = 1943;
            this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormatSerde(): RowFormatSerdeContext {
        let localContext = new RowFormatSerdeContext(this.context, this.state);
        this.enterRule(localContext, 218, HiveSqlParser.RULE_rowFormatSerde);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1945;
            this.match(HiveSqlParser.KW_ROW);
            this.state = 1946;
            this.match(HiveSqlParser.KW_FORMAT);
            this.state = 1947;
            this.match(HiveSqlParser.KW_SERDE);
            this.state = 1948;
            localContext._name = this.match(HiveSqlParser.StringLiteral);
            this.state = 1952;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 187, this.context) ) {
            case 1:
                {
                this.state = 1949;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 1950;
                this.match(HiveSqlParser.KW_SERDEPROPERTIES);
                this.state = 1951;
                localContext._serdeprops = this.tableProperties();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormatDelimited(): RowFormatDelimitedContext {
        let localContext = new RowFormatDelimitedContext(this.context, this.state);
        this.enterRule(localContext, 220, HiveSqlParser.RULE_rowFormatDelimited);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1954;
            this.match(HiveSqlParser.KW_ROW);
            this.state = 1955;
            this.match(HiveSqlParser.KW_FORMAT);
            this.state = 1956;
            this.match(HiveSqlParser.KW_DELIMITED);
            this.state = 1958;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127) {
                {
                this.state = 1957;
                this.tableRowFormatFieldIdentifier();
                }
            }

            this.state = 1961;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 44) {
                {
                this.state = 1960;
                this.tableRowFormatCollItemsIdentifier();
                }
            }

            this.state = 1964;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 190, this.context) ) {
            case 1:
                {
                this.state = 1963;
                this.tableRowFormatMapKeysIdentifier();
                }
                break;
            }
            this.state = 1967;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 186) {
                {
                this.state = 1966;
                this.tableRowFormatLinesIdentifier();
                }
            }

            this.state = 1970;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 219) {
                {
                this.state = 1969;
                this.tableRowNullFormat();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormat(): TableRowFormatContext {
        let localContext = new TableRowFormatContext(this.context, this.state);
        this.enterRule(localContext, 222, HiveSqlParser.RULE_tableRowFormat);
        try {
            this.state = 1974;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 193, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1972;
                this.rowFormatDelimited();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1973;
                this.rowFormatSerde();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext {
        let localContext = new TablePropertiesPrefixedContext(this.context, this.state);
        this.enterRule(localContext, 224, HiveSqlParser.RULE_tablePropertiesPrefixed);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1976;
            this.match(HiveSqlParser.KW_TBLPROPERTIES);
            this.state = 1977;
            this.tableProperties();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableProperties(): TablePropertiesContext {
        let localContext = new TablePropertiesContext(this.context, this.state);
        this.enterRule(localContext, 226, HiveSqlParser.RULE_tableProperties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1979;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1980;
            this.tablePropertiesList();
            this.state = 1981;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablePropertiesList(): TablePropertiesListContext {
        let localContext = new TablePropertiesListContext(this.context, this.state);
        this.enterRule(localContext, 228, HiveSqlParser.RULE_tablePropertiesList);
        let _la: number;
        try {
            this.state = 1992;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 195, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1983;
                this.keyValuePropertyList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1984;
                localContext._key = this.match(HiveSqlParser.StringLiteral);
                this.state = 1989;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 1985;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 1986;
                    localContext._key = this.match(HiveSqlParser.StringLiteral);
                    }
                    }
                    this.state = 1991;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyValueProperties(): KeyValuePropertiesContext {
        let localContext = new KeyValuePropertiesContext(this.context, this.state);
        this.enterRule(localContext, 230, HiveSqlParser.RULE_keyValueProperties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1994;
            this.match(HiveSqlParser.LPAREN);
            this.state = 1995;
            this.keyValuePropertyList();
            this.state = 1996;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyValuePropertyList(): KeyValuePropertyListContext {
        let localContext = new KeyValuePropertyListContext(this.context, this.state);
        this.enterRule(localContext, 232, HiveSqlParser.RULE_keyValuePropertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1998;
            this.keyValueProperty();
            this.state = 2003;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 1999;
                this.match(HiveSqlParser.COMMA);
                this.state = 2000;
                this.keyValueProperty();
                }
                }
                this.state = 2005;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyValueProperty(): KeyValuePropertyContext {
        let localContext = new KeyValuePropertyContext(this.context, this.state);
        this.enterRule(localContext, 234, HiveSqlParser.RULE_keyValueProperty);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2006;
            localContext._key = this.match(HiveSqlParser.StringLiteral);
            this.state = 2007;
            this.match(HiveSqlParser.EQUAL);
            this.state = 2008;
            localContext._value = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormatFieldIdentifier(): TableRowFormatFieldIdentifierContext {
        let localContext = new TableRowFormatFieldIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 236, HiveSqlParser.RULE_tableRowFormatFieldIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2010;
            this.match(HiveSqlParser.KW_FIELDS);
            this.state = 2011;
            this.match(HiveSqlParser.KW_TERMINATED);
            this.state = 2012;
            this.match(HiveSqlParser.KW_BY);
            this.state = 2013;
            localContext._fldIdnt = this.match(HiveSqlParser.StringLiteral);
            this.state = 2017;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 110) {
                {
                this.state = 2014;
                this.match(HiveSqlParser.KW_ESCAPED);
                this.state = 2015;
                this.match(HiveSqlParser.KW_BY);
                this.state = 2016;
                localContext._fldEscape = this.match(HiveSqlParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormatCollItemsIdentifier(): TableRowFormatCollItemsIdentifierContext {
        let localContext = new TableRowFormatCollItemsIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 238, HiveSqlParser.RULE_tableRowFormatCollItemsIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2019;
            this.match(HiveSqlParser.KW_COLLECTION);
            this.state = 2020;
            this.match(HiveSqlParser.KW_ITEMS);
            this.state = 2021;
            this.match(HiveSqlParser.KW_TERMINATED);
            this.state = 2022;
            this.match(HiveSqlParser.KW_BY);
            this.state = 2023;
            localContext._collIdnt = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormatMapKeysIdentifier(): TableRowFormatMapKeysIdentifierContext {
        let localContext = new TableRowFormatMapKeysIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 240, HiveSqlParser.RULE_tableRowFormatMapKeysIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2025;
            this.match(HiveSqlParser.KW_MAP);
            this.state = 2026;
            this.match(HiveSqlParser.KW_KEYS);
            this.state = 2027;
            this.match(HiveSqlParser.KW_TERMINATED);
            this.state = 2028;
            this.match(HiveSqlParser.KW_BY);
            this.state = 2029;
            localContext._mapKeysIdnt = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowFormatLinesIdentifier(): TableRowFormatLinesIdentifierContext {
        let localContext = new TableRowFormatLinesIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 242, HiveSqlParser.RULE_tableRowFormatLinesIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2031;
            this.match(HiveSqlParser.KW_LINES);
            this.state = 2032;
            this.match(HiveSqlParser.KW_TERMINATED);
            this.state = 2033;
            this.match(HiveSqlParser.KW_BY);
            this.state = 2034;
            localContext._linesIdnt = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRowNullFormat(): TableRowNullFormatContext {
        let localContext = new TableRowNullFormatContext(this.context, this.state);
        this.enterRule(localContext, 244, HiveSqlParser.RULE_tableRowNullFormat);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2036;
            this.match(HiveSqlParser.KW_NULL);
            this.state = 2037;
            this.match(HiveSqlParser.KW_DEFINED);
            this.state = 2038;
            this.match(HiveSqlParser.KW_AS);
            this.state = 2039;
            localContext._nullIdnt = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFileFormat(): TableFileFormatContext {
        let localContext = new TableFileFormatContext(this.context, this.state);
        this.enterRule(localContext, 246, HiveSqlParser.RULE_tableFileFormat);
        let _la: number;
        try {
            this.state = 2082;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 203, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2041;
                this.match(HiveSqlParser.KW_STORED);
                this.state = 2042;
                this.match(HiveSqlParser.KW_AS);
                this.state = 2043;
                this.match(HiveSqlParser.KW_INPUTFORMAT);
                this.state = 2044;
                localContext._inFmt = this.match(HiveSqlParser.StringLiteral);
                this.state = 2045;
                this.match(HiveSqlParser.KW_OUTPUTFORMAT);
                this.state = 2046;
                localContext._outFmt = this.match(HiveSqlParser.StringLiteral);
                this.state = 2051;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 159) {
                    {
                    this.state = 2047;
                    this.match(HiveSqlParser.KW_INPUTDRIVER);
                    this.state = 2048;
                    localContext._inDriver = this.match(HiveSqlParser.StringLiteral);
                    this.state = 2049;
                    this.match(HiveSqlParser.KW_OUTPUTDRIVER);
                    this.state = 2050;
                    localContext._outDriver = this.match(HiveSqlParser.StringLiteral);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2053;
                this.match(HiveSqlParser.KW_STORED);
                this.state = 2054;
                this.match(HiveSqlParser.KW_BY);
                this.state = 2055;
                localContext._storageHandler = this.match(HiveSqlParser.StringLiteral);
                this.state = 2059;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 199, this.context) ) {
                case 1:
                    {
                    this.state = 2056;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 2057;
                    this.match(HiveSqlParser.KW_SERDEPROPERTIES);
                    this.state = 2058;
                    localContext._serdeprops = this.tableProperties();
                    }
                    break;
                }
                this.state = 2064;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 321) {
                    {
                    this.state = 2061;
                    this.match(HiveSqlParser.KW_STORED);
                    this.state = 2062;
                    this.match(HiveSqlParser.KW_AS);
                    this.state = 2063;
                    localContext._fileformat = this.id_();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2066;
                this.match(HiveSqlParser.KW_STORED);
                this.state = 2067;
                this.match(HiveSqlParser.KW_BY);
                this.state = 2068;
                localContext._genericSpec = this.id_();
                this.state = 2072;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 201, this.context) ) {
                case 1:
                    {
                    this.state = 2069;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 2070;
                    this.match(HiveSqlParser.KW_SERDEPROPERTIES);
                    this.state = 2071;
                    localContext._serdeprops = this.tableProperties();
                    }
                    break;
                }
                this.state = 2077;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 321) {
                    {
                    this.state = 2074;
                    this.match(HiveSqlParser.KW_STORED);
                    this.state = 2075;
                    this.match(HiveSqlParser.KW_AS);
                    this.state = 2076;
                    localContext._fileformat = this.id_();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2079;
                this.match(HiveSqlParser.KW_STORED);
                this.state = 2080;
                this.match(HiveSqlParser.KW_AS);
                this.state = 2081;
                localContext._genericSpec = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTypeList(): ColumnNameTypeListContext {
        let localContext = new ColumnNameTypeListContext(this.context, this.state);
        this.enterRule(localContext, 248, HiveSqlParser.RULE_columnNameTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2084;
            this.columnNameType();
            this.state = 2089;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2085;
                this.match(HiveSqlParser.COMMA);
                this.state = 2086;
                this.columnNameType();
                }
                }
                this.state = 2091;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTypeOrConstraintList(): ColumnNameTypeOrConstraintListContext {
        let localContext = new ColumnNameTypeOrConstraintListContext(this.context, this.state);
        this.enterRule(localContext, 250, HiveSqlParser.RULE_columnNameTypeOrConstraintList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2092;
            this.columnNameTypeOrConstraint();
            this.state = 2097;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2093;
                this.match(HiveSqlParser.COMMA);
                this.state = 2094;
                this.columnNameTypeOrConstraint();
                }
                }
                this.state = 2099;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameColonTypeList(): ColumnNameColonTypeListContext {
        let localContext = new ColumnNameColonTypeListContext(this.context, this.state);
        this.enterRule(localContext, 252, HiveSqlParser.RULE_columnNameColonTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2100;
            this.columnNameColonType();
            this.state = 2105;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2101;
                this.match(HiveSqlParser.COMMA);
                this.state = 2102;
                this.columnNameColonType();
                }
                }
                this.state = 2107;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameList(): ColumnNameListContext {
        let localContext = new ColumnNameListContext(this.context, this.state);
        this.enterRule(localContext, 254, HiveSqlParser.RULE_columnNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2108;
            this.columnName();
            this.state = 2113;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2109;
                this.match(HiveSqlParser.COMMA);
                this.state = 2110;
                this.columnName();
                }
                }
                this.state = 2115;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnName(): ColumnNameContext {
        let localContext = new ColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 256, HiveSqlParser.RULE_columnName);
        try {
            this.state = 2118;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 208, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2116;
                this.poolPath();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2117;
                if (!(this.shouldMatchEmpty())) {
                    throw this.createFailedPredicateException("this.shouldMatchEmpty()");
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        let localContext = new ColumnNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 258, HiveSqlParser.RULE_columnNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2120;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extColumnName(): ExtColumnNameContext {
        let localContext = new ExtColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 260, HiveSqlParser.RULE_extColumnName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2122;
            this.columnName();
            this.state = 2132;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 395) {
                {
                {
                this.state = 2123;
                this.match(HiveSqlParser.DOT);
                this.state = 2128;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 209, this.context) ) {
                case 1:
                    {
                    this.state = 2124;
                    this.match(HiveSqlParser.KW_ELEM_TYPE);
                    }
                    break;
                case 2:
                    {
                    this.state = 2125;
                    this.match(HiveSqlParser.KW_KEY_TYPE);
                    }
                    break;
                case 3:
                    {
                    this.state = 2126;
                    this.match(HiveSqlParser.KW_VALUE_TYPE);
                    }
                    break;
                case 4:
                    {
                    this.state = 2127;
                    this.id_();
                    }
                    break;
                }
                }
                }
                this.state = 2134;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameOrderList(): ColumnNameOrderListContext {
        let localContext = new ColumnNameOrderListContext(this.context, this.state);
        this.enterRule(localContext, 262, HiveSqlParser.RULE_columnNameOrderList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2135;
            this.columnNameOrder();
            this.state = 2140;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2136;
                this.match(HiveSqlParser.COMMA);
                this.state = 2137;
                this.columnNameOrder();
                }
                }
                this.state = 2142;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnParenthesesList(): ColumnParenthesesListContext {
        let localContext = new ColumnParenthesesListContext(this.context, this.state);
        this.enterRule(localContext, 264, HiveSqlParser.RULE_columnParenthesesList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2143;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2144;
            this.columnNameList();
            this.state = 2145;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enableValidateSpecification(): EnableValidateSpecificationContext {
        let localContext = new EnableValidateSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 266, HiveSqlParser.RULE_enableValidateSpecification);
        let _la: number;
        try {
            this.state = 2152;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2147;
                this.enableSpecification();
                this.state = 2149;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217 || _la === 373) {
                    {
                    this.state = 2148;
                    this.validateSpecification();
                    }
                }

                }
                break;
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2151;
                this.enforcedSpecification();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enableSpecification(): EnableSpecificationContext {
        let localContext = new EnableSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 268, HiveSqlParser.RULE_enableSpecification);
        try {
            this.state = 2156;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2154;
                this.enable();
                }
                break;
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2155;
                this.disable();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public validateSpecification(): ValidateSpecificationContext {
        let localContext = new ValidateSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 270, HiveSqlParser.RULE_validateSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2158;
            _la = this.tokenStream.LA(1);
            if(!(_la === 217 || _la === 373)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enforcedSpecification(): EnforcedSpecificationContext {
        let localContext = new EnforcedSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 272, HiveSqlParser.RULE_enforcedSpecification);
        try {
            this.state = 2163;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ENFORCED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2160;
                this.match(HiveSqlParser.KW_ENFORCED);
                }
                break;
            case HiveSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2161;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 2162;
                this.match(HiveSqlParser.KW_ENFORCED);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relySpecification(): RelySpecificationContext {
        let localContext = new RelySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 274, HiveSqlParser.RULE_relySpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2165;
            _la = this.tokenStream.LA(1);
            if(!(_la === 214 || _la === 272)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createConstraint(): CreateConstraintContext {
        let localContext = new CreateConstraintContext(this.context, this.state);
        this.enterRule(localContext, 276, HiveSqlParser.RULE_createConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2169;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2167;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2168;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2171;
            this.tableLevelConstraint();
            this.state = 2173;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 45059) !== 0) || _la === 216) {
                {
                this.state = 2172;
                this.constraintOptsCreate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterConstraintWithName(): AlterConstraintWithNameContext {
        let localContext = new AlterConstraintWithNameContext(this.context, this.state);
        this.enterRule(localContext, 278, HiveSqlParser.RULE_alterConstraintWithName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2175;
            this.match(HiveSqlParser.KW_CONSTRAINT);
            this.state = 2176;
            localContext._constraintName = this.id_();
            this.state = 2177;
            this.tableLevelConstraint();
            this.state = 2179;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 218, this.context) ) {
            case 1:
                {
                this.state = 2178;
                this.constraintOptsAlter();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableLevelConstraint(): TableLevelConstraintContext {
        let localContext = new TableLevelConstraintContext(this.context, this.state);
        this.enterRule(localContext, 280, HiveSqlParser.RULE_tableLevelConstraint);
        try {
            this.state = 2183;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_PRIMARY:
            case HiveSqlParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2181;
                this.pkUkConstraint();
                }
                break;
            case HiveSqlParser.KW_CHECK:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2182;
                this.checkConstraint();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pkUkConstraint(): PkUkConstraintContext {
        let localContext = new PkUkConstraintContext(this.context, this.state);
        this.enterRule(localContext, 282, HiveSqlParser.RULE_pkUkConstraint);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2185;
            this.tableConstraintType();
            this.state = 2186;
            localContext._pkCols = this.columnParenthesesList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkConstraint(): CheckConstraintContext {
        let localContext = new CheckConstraintContext(this.context, this.state);
        this.enterRule(localContext, 284, HiveSqlParser.RULE_checkConstraint);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2188;
            this.match(HiveSqlParser.KW_CHECK);
            this.state = 2189;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2190;
            this.expression();
            this.state = 2191;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createForeignKey(): CreateForeignKeyContext {
        let localContext = new CreateForeignKeyContext(this.context, this.state);
        this.enterRule(localContext, 286, HiveSqlParser.RULE_createForeignKey);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2195;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2193;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2194;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2197;
            this.match(HiveSqlParser.KW_FOREIGN);
            this.state = 2198;
            this.match(HiveSqlParser.KW_KEY);
            this.state = 2199;
            localContext._fkCols = this.columnParenthesesList();
            this.state = 2200;
            this.match(HiveSqlParser.KW_REFERENCES);
            this.state = 2201;
            localContext._tabName = this.tableName();
            this.state = 2202;
            localContext._parCols = this.columnParenthesesList();
            this.state = 2204;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 45059) !== 0) || _la === 216) {
                {
                this.state = 2203;
                this.constraintOptsCreate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterForeignKeyWithName(): AlterForeignKeyWithNameContext {
        let localContext = new AlterForeignKeyWithNameContext(this.context, this.state);
        this.enterRule(localContext, 288, HiveSqlParser.RULE_alterForeignKeyWithName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2206;
            this.match(HiveSqlParser.KW_CONSTRAINT);
            this.state = 2207;
            localContext._constraintName = this.id_();
            this.state = 2208;
            this.match(HiveSqlParser.KW_FOREIGN);
            this.state = 2209;
            this.match(HiveSqlParser.KW_KEY);
            this.state = 2210;
            localContext._fkCols = this.columnParenthesesList();
            this.state = 2211;
            this.match(HiveSqlParser.KW_REFERENCES);
            this.state = 2212;
            localContext._tabName = this.tableName();
            this.state = 2213;
            localContext._parCols = this.columnParenthesesList();
            this.state = 2215;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 222, this.context) ) {
            case 1:
                {
                this.state = 2214;
                this.constraintOptsAlter();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedValueElement(): SkewedValueElementContext {
        let localContext = new SkewedValueElementContext(this.context, this.state);
        this.enterRule(localContext, 290, HiveSqlParser.RULE_skewedValueElement);
        try {
            this.state = 2219;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_CURRENT_DATE:
            case HiveSqlParser.KW_CURRENT_TIMESTAMP:
            case HiveSqlParser.KW_DATE:
            case HiveSqlParser.KW_FALSE:
            case HiveSqlParser.KW_NULL:
            case HiveSqlParser.KW_TIMESTAMP:
            case HiveSqlParser.KW_TIMESTAMPLOCALTZ:
            case HiveSqlParser.KW_TRUE:
            case HiveSqlParser.QUESTION:
            case HiveSqlParser.StringLiteral:
            case HiveSqlParser.IntegralLiteral:
            case HiveSqlParser.NumberLiteral:
            case HiveSqlParser.Number:
            case HiveSqlParser.Identifier:
            case HiveSqlParser.CharSetName:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2217;
                this.constantList();
                }
                break;
            case HiveSqlParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2218;
                this.skewedColumnValuePairList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedColumnValuePairList(): SkewedColumnValuePairListContext {
        let localContext = new SkewedColumnValuePairListContext(this.context, this.state);
        this.enterRule(localContext, 292, HiveSqlParser.RULE_skewedColumnValuePairList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2221;
            this.skewedColumnValuePair();
            this.state = 2226;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2222;
                this.match(HiveSqlParser.COMMA);
                this.state = 2223;
                this.skewedColumnValuePair();
                }
                }
                this.state = 2228;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedColumnValuePair(): SkewedColumnValuePairContext {
        let localContext = new SkewedColumnValuePairContext(this.context, this.state);
        this.enterRule(localContext, 294, HiveSqlParser.RULE_skewedColumnValuePair);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2229;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2230;
            localContext._colValues = this.constantList();
            this.state = 2231;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constantList(): ConstantListContext {
        let localContext = new ConstantListContext(this.context, this.state);
        this.enterRule(localContext, 296, HiveSqlParser.RULE_constantList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2233;
            this.constant();
            this.state = 2238;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2234;
                this.match(HiveSqlParser.COMMA);
                this.state = 2235;
                this.constant();
                }
                }
                this.state = 2240;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderSpecification(): OrderSpecificationContext {
        let localContext = new OrderSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 298, HiveSqlParser.RULE_orderSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2241;
            _la = this.tokenStream.LA(1);
            if(!(_la === 18 || _la === 89)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullOrdering(): NullOrderingContext {
        let localContext = new NullOrderingContext(this.context, this.state);
        this.enterRule(localContext, 300, HiveSqlParser.RULE_nullOrdering);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2243;
            this.match(HiveSqlParser.KW_NULLS);
            this.state = 2244;
            _la = this.tokenStream.LA(1);
            if(!(_la === 130 || _la === 177)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameOrder(): ColumnNameOrderContext {
        let localContext = new ColumnNameOrderContext(this.context, this.state);
        this.enterRule(localContext, 302, HiveSqlParser.RULE_columnNameOrder);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2246;
            this.columnName();
            this.state = 2248;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18 || _la === 89) {
                {
                this.state = 2247;
                localContext._orderSpec = this.orderSpecification();
                }
            }

            this.state = 2251;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 220) {
                {
                this.state = 2250;
                localContext._nullSpec = this.nullOrdering();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameCommentList(): ColumnNameCommentListContext {
        let localContext = new ColumnNameCommentListContext(this.context, this.state);
        this.enterRule(localContext, 304, HiveSqlParser.RULE_columnNameCommentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2253;
            this.columnNameComment();
            this.state = 2258;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2254;
                this.match(HiveSqlParser.COMMA);
                this.state = 2255;
                this.columnNameComment();
                }
                }
                this.state = 2260;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameComment(): ColumnNameCommentContext {
        let localContext = new ColumnNameCommentContext(this.context, this.state);
        this.enterRule(localContext, 306, HiveSqlParser.RULE_columnNameComment);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2261;
            localContext._colName = this.columnNameCreate();
            this.state = 2264;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2262;
                this.match(HiveSqlParser.KW_COMMENT);
                this.state = 2263;
                localContext._comment = this.match(HiveSqlParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnRefOrder(): ColumnRefOrderContext {
        let localContext = new ColumnRefOrderContext(this.context, this.state);
        this.enterRule(localContext, 308, HiveSqlParser.RULE_columnRefOrder);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2268;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 230, this.context) ) {
            case 1:
                {
                this.state = 2266;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 2267;
                this.expression();
                }
                break;
            }
            this.state = 2271;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 231, this.context) ) {
            case 1:
                {
                this.state = 2270;
                localContext._orderSpec = this.orderSpecification();
                }
                break;
            }
            this.state = 2274;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 220) {
                {
                this.state = 2273;
                localContext._nullSpec = this.nullOrdering();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameType(): ColumnNameTypeContext {
        let localContext = new ColumnNameTypeContext(this.context, this.state);
        this.enterRule(localContext, 310, HiveSqlParser.RULE_columnNameType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2276;
            localContext._colName = this.columnNameCreate();
            this.state = 2277;
            this.columnType();
            this.state = 2280;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2278;
                this.match(HiveSqlParser.KW_COMMENT);
                this.state = 2279;
                localContext._comment = this.match(HiveSqlParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTypeOrConstraint(): ColumnNameTypeOrConstraintContext {
        let localContext = new ColumnNameTypeOrConstraintContext(this.context, this.state);
        this.enterRule(localContext, 312, HiveSqlParser.RULE_columnNameTypeOrConstraint);
        try {
            this.state = 2284;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 234, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2282;
                this.tableConstraint();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2283;
                this.columnNameTypeConstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableConstraint(): TableConstraintContext {
        let localContext = new TableConstraintContext(this.context, this.state);
        this.enterRule(localContext, 314, HiveSqlParser.RULE_tableConstraint);
        try {
            this.state = 2288;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 235, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2286;
                this.createForeignKey();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2287;
                this.createConstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameTypeConstraint(): ColumnNameTypeConstraintContext {
        let localContext = new ColumnNameTypeConstraintContext(this.context, this.state);
        this.enterRule(localContext, 316, HiveSqlParser.RULE_columnNameTypeConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2290;
            localContext._colName = this.columnNameCreate();
            this.state = 2291;
            localContext._colType = this.columnType();
            this.state = 2293;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 40 || _la === 55 || _la === 83 || _la === 216 || _la === 251 || _la === 269 || _la === 358) {
                {
                this.state = 2292;
                this.columnConstraint();
                }
            }

            this.state = 2297;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2295;
                this.match(HiveSqlParser.KW_COMMENT);
                this.state = 2296;
                localContext._comment = this.match(HiveSqlParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnConstraint(): ColumnConstraintContext {
        let localContext = new ColumnConstraintContext(this.context, this.state);
        this.enterRule(localContext, 318, HiveSqlParser.RULE_columnConstraint);
        try {
            this.state = 2301;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 238, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2299;
                this.foreignKeyConstraint();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2300;
                this.colConstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public foreignKeyConstraint(): ForeignKeyConstraintContext {
        let localContext = new ForeignKeyConstraintContext(this.context, this.state);
        this.enterRule(localContext, 320, HiveSqlParser.RULE_foreignKeyConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2305;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2303;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2304;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2307;
            this.match(HiveSqlParser.KW_REFERENCES);
            this.state = 2308;
            localContext._tabName = this.tableName();
            this.state = 2309;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2310;
            localContext._colName = this.columnName();
            this.state = 2311;
            this.match(HiveSqlParser.RPAREN);
            this.state = 2313;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 45059) !== 0) || _la === 216) {
                {
                this.state = 2312;
                this.constraintOptsCreate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colConstraint(): ColConstraintContext {
        let localContext = new ColConstraintContext(this.context, this.state);
        this.enterRule(localContext, 322, HiveSqlParser.RULE_colConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2317;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2315;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2316;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2319;
            this.columnConstraintType();
            this.state = 2321;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 45059) !== 0) || _la === 216) {
                {
                this.state = 2320;
                this.constraintOptsCreate();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterColumnConstraint(): AlterColumnConstraintContext {
        let localContext = new AlterColumnConstraintContext(this.context, this.state);
        this.enterRule(localContext, 324, HiveSqlParser.RULE_alterColumnConstraint);
        try {
            this.state = 2325;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 243, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2323;
                this.alterForeignKeyConstraint();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2324;
                this.alterColConstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterForeignKeyConstraint(): AlterForeignKeyConstraintContext {
        let localContext = new AlterForeignKeyConstraintContext(this.context, this.state);
        this.enterRule(localContext, 326, HiveSqlParser.RULE_alterForeignKeyConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2329;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2327;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2328;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2331;
            this.match(HiveSqlParser.KW_REFERENCES);
            this.state = 2332;
            localContext._tabName = this.tableName();
            this.state = 2333;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2334;
            localContext._colName = this.columnName();
            this.state = 2335;
            this.match(HiveSqlParser.RPAREN);
            this.state = 2337;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 245, this.context) ) {
            case 1:
                {
                this.state = 2336;
                this.constraintOptsAlter();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterColConstraint(): AlterColConstraintContext {
        let localContext = new AlterColConstraintContext(this.context, this.state);
        this.enterRule(localContext, 328, HiveSqlParser.RULE_alterColConstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2341;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2339;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2340;
                localContext._constraintName = this.id_();
                }
            }

            this.state = 2343;
            this.columnConstraintType();
            this.state = 2345;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
            case 1:
                {
                this.state = 2344;
                this.constraintOptsAlter();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnConstraintType(): ColumnConstraintTypeContext {
        let localContext = new ColumnConstraintTypeContext(this.context, this.state);
        this.enterRule(localContext, 330, HiveSqlParser.RULE_columnConstraintType);
        try {
            this.state = 2353;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2347;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 2348;
                this.match(HiveSqlParser.KW_NULL);
                }
                break;
            case HiveSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2349;
                this.match(HiveSqlParser.KW_DEFAULT);
                this.state = 2350;
                this.defaultVal();
                }
                break;
            case HiveSqlParser.KW_CHECK:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2351;
                this.checkConstraint();
                }
                break;
            case HiveSqlParser.KW_PRIMARY:
            case HiveSqlParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2352;
                this.tableConstraintType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultVal(): DefaultValContext {
        let localContext = new DefaultValContext(this.context, this.state);
        this.enterRule(localContext, 332, HiveSqlParser.RULE_defaultVal);
        try {
            this.state = 2358;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 249, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2355;
                this.constant();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2356;
                this.function_();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2357;
                this.castExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableConstraintType(): TableConstraintTypeContext {
        let localContext = new TableConstraintTypeContext(this.context, this.state);
        this.enterRule(localContext, 334, HiveSqlParser.RULE_tableConstraintType);
        try {
            this.state = 2363;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_PRIMARY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2360;
                this.match(HiveSqlParser.KW_PRIMARY);
                this.state = 2361;
                this.match(HiveSqlParser.KW_KEY);
                }
                break;
            case HiveSqlParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2362;
                this.match(HiveSqlParser.KW_UNIQUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext {
        let localContext = new ConstraintOptsCreateContext(this.context, this.state);
        this.enterRule(localContext, 336, HiveSqlParser.RULE_constraintOptsCreate);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2365;
            this.enableValidateSpecification();
            this.state = 2367;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 214 || _la === 272) {
                {
                this.state = 2366;
                this.relySpecification();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext {
        let localContext = new ConstraintOptsAlterContext(this.context, this.state);
        this.enterRule(localContext, 338, HiveSqlParser.RULE_constraintOptsAlter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2369;
            this.enableValidateSpecification();
            this.state = 2371;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 214 || _la === 272) {
                {
                this.state = 2370;
                this.relySpecification();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameColonType(): ColumnNameColonTypeContext {
        let localContext = new ColumnNameColonTypeContext(this.context, this.state);
        this.enterRule(localContext, 340, HiveSqlParser.RULE_columnNameColonType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2373;
            localContext._colName = this.columnNameCreate();
            this.state = 2374;
            this.match(HiveSqlParser.COLON);
            this.state = 2375;
            this.columnType();
            this.state = 2378;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 2376;
                this.match(HiveSqlParser.KW_COMMENT);
                this.state = 2377;
                localContext._comment = this.match(HiveSqlParser.StringLiteral);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnType(): ColumnTypeContext {
        let localContext = new ColumnTypeContext(this.context, this.state);
        this.enterRule(localContext, 342, HiveSqlParser.RULE_columnType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2380;
            this.type_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnTypeList(): ColumnTypeListContext {
        let localContext = new ColumnTypeListContext(this.context, this.state);
        this.enterRule(localContext, 344, HiveSqlParser.RULE_columnTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2382;
            this.columnType();
            this.state = 2387;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2383;
                this.match(HiveSqlParser.COMMA);
                this.state = 2384;
                this.columnType();
                }
                }
                this.state = 2389;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_(): TypeContext {
        let localContext = new TypeContext(this.context, this.state);
        this.enterRule(localContext, 346, HiveSqlParser.RULE_type);
        try {
            this.state = 2395;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_BIGINT:
            case HiveSqlParser.KW_BINARY:
            case HiveSqlParser.KW_BOOLEAN:
            case HiveSqlParser.KW_CHAR:
            case HiveSqlParser.KW_DATE:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DEC:
            case HiveSqlParser.KW_DECIMAL:
            case HiveSqlParser.KW_NUMERIC:
            case HiveSqlParser.KW_DOUBLE:
            case HiveSqlParser.KW_FLOAT:
            case HiveSqlParser.KW_INT:
            case HiveSqlParser.KW_INTEGER:
            case HiveSqlParser.KW_REAL:
            case HiveSqlParser.KW_SMALLINT:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_TIMESTAMP:
            case HiveSqlParser.KW_TIMESTAMPLOCALTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_VARCHAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2390;
                this.primitiveType();
                }
                break;
            case HiveSqlParser.KW_ARRAY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2391;
                this.listType();
                }
                break;
            case HiveSqlParser.KW_STRUCT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2392;
                this.structType();
                }
                break;
            case HiveSqlParser.KW_MAP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2393;
                this.mapType();
                }
                break;
            case HiveSqlParser.KW_UNIONTYPE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2394;
                this.unionType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public primitiveType(): PrimitiveTypeContext {
        let localContext = new PrimitiveTypeContext(this.context, this.state);
        this.enterRule(localContext, 348, HiveSqlParser.RULE_primitiveType);
        let _la: number;
        try {
            this.state = 2434;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 259, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2397;
                this.match(HiveSqlParser.KW_TINYINT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2398;
                this.match(HiveSqlParser.KW_SMALLINT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2399;
                this.match(HiveSqlParser.KW_INT);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2400;
                this.match(HiveSqlParser.KW_INTEGER);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2401;
                this.match(HiveSqlParser.KW_BIGINT);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2402;
                this.match(HiveSqlParser.KW_BOOLEAN);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2403;
                this.match(HiveSqlParser.KW_FLOAT);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2404;
                this.match(HiveSqlParser.KW_REAL);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2405;
                this.match(HiveSqlParser.KW_DOUBLE);
                this.state = 2407;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 248) {
                    {
                    this.state = 2406;
                    this.match(HiveSqlParser.KW_PRECISION);
                    }
                }

                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2409;
                this.match(HiveSqlParser.KW_DATE);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2410;
                this.match(HiveSqlParser.KW_DATETIME);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2411;
                this.match(HiveSqlParser.KW_TIMESTAMP);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2412;
                this.match(HiveSqlParser.KW_TIMESTAMPLOCALTZ);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2413;
                this.match(HiveSqlParser.KW_TIMESTAMP);
                this.state = 2414;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 2415;
                this.match(HiveSqlParser.KW_LOCAL);
                this.state = 2416;
                this.match(HiveSqlParser.KW_TIME);
                this.state = 2417;
                this.match(HiveSqlParser.KW_ZONE);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2418;
                this.match(HiveSqlParser.KW_STRING);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2419;
                this.match(HiveSqlParser.KW_BINARY);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2420;
                this.decimal();
                this.state = 2428;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
                case 1:
                    {
                    this.state = 2421;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 2422;
                    localContext._prec = this.match(HiveSqlParser.Number);
                    this.state = 2425;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 397) {
                        {
                        this.state = 2423;
                        this.match(HiveSqlParser.COMMA);
                        this.state = 2424;
                        localContext._scale = this.match(HiveSqlParser.Number);
                        }
                    }

                    this.state = 2427;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                }
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2430;
                _la = this.tokenStream.LA(1);
                if(!(_la === 39 || _la === 376)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2431;
                this.match(HiveSqlParser.LPAREN);
                this.state = 2432;
                localContext._length = this.match(HiveSqlParser.Number);
                this.state = 2433;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listType(): ListTypeContext {
        let localContext = new ListTypeContext(this.context, this.state);
        this.enterRule(localContext, 350, HiveSqlParser.RULE_listType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2436;
            this.match(HiveSqlParser.KW_ARRAY);
            this.state = 2437;
            this.match(HiveSqlParser.LESSTHAN);
            this.state = 2438;
            this.type_();
            this.state = 2439;
            this.match(HiveSqlParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public structType(): StructTypeContext {
        let localContext = new StructTypeContext(this.context, this.state);
        this.enterRule(localContext, 352, HiveSqlParser.RULE_structType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2441;
            this.match(HiveSqlParser.KW_STRUCT);
            this.state = 2442;
            this.match(HiveSqlParser.LESSTHAN);
            this.state = 2443;
            this.columnNameColonTypeList();
            this.state = 2444;
            this.match(HiveSqlParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mapType(): MapTypeContext {
        let localContext = new MapTypeContext(this.context, this.state);
        this.enterRule(localContext, 354, HiveSqlParser.RULE_mapType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2446;
            this.match(HiveSqlParser.KW_MAP);
            this.state = 2447;
            this.match(HiveSqlParser.LESSTHAN);
            this.state = 2448;
            localContext._left = this.primitiveType();
            this.state = 2449;
            this.match(HiveSqlParser.COMMA);
            this.state = 2450;
            localContext._right = this.type_();
            this.state = 2451;
            this.match(HiveSqlParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unionType(): UnionTypeContext {
        let localContext = new UnionTypeContext(this.context, this.state);
        this.enterRule(localContext, 356, HiveSqlParser.RULE_unionType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2453;
            this.match(HiveSqlParser.KW_UNIONTYPE);
            this.state = 2454;
            this.match(HiveSqlParser.LESSTHAN);
            this.state = 2455;
            this.columnTypeList();
            this.state = 2456;
            this.match(HiveSqlParser.GREATERTHAN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setOperator(): SetOperatorContext {
        let localContext = new SetOperatorContext(this.context, this.state);
        this.enterRule(localContext, 358, HiveSqlParser.RULE_setOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2458;
            _la = this.tokenStream.LA(1);
            if(!(_la === 112 || _la === 164 || _la === 205 || _la === 356)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2460;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 7 || _la === 96) {
                {
                this.state = 2459;
                _la = this.tokenStream.LA(1);
                if(!(_la === 7 || _la === 96)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryStatementExpression(): QueryStatementExpressionContext {
        let localContext = new QueryStatementExpressionContext(this.context, this.state);
        this.enterRule(localContext, 360, HiveSqlParser.RULE_queryStatementExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2463;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 387) {
                {
                this.state = 2462;
                localContext._w = this.withClause();
                }
            }

            this.state = 2465;
            this.queryStatementExpressionBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryStatementExpressionBody(): QueryStatementExpressionBodyContext {
        let localContext = new QueryStatementExpressionBodyContext(this.context, this.state);
        this.enterRule(localContext, 362, HiveSqlParser.RULE_queryStatementExpressionBody);
        try {
            this.state = 2469;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_FROM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2467;
                this.fromStatement();
                }
                break;
            case HiveSqlParser.KW_INSERT:
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_REDUCE:
            case HiveSqlParser.KW_SELECT:
            case HiveSqlParser.KW_VALUES:
            case HiveSqlParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2468;
                this.regularBody();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withClause(): WithClauseContext {
        let localContext = new WithClauseContext(this.context, this.state);
        this.enterRule(localContext, 364, HiveSqlParser.RULE_withClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2471;
            this.match(HiveSqlParser.KW_WITH);
            this.state = 2472;
            this.cteStatement();
            this.state = 2477;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2473;
                this.match(HiveSqlParser.COMMA);
                this.state = 2474;
                this.cteStatement();
                }
                }
                this.state = 2479;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cteStatement(): CteStatementContext {
        let localContext = new CteStatementContext(this.context, this.state);
        this.enterRule(localContext, 366, HiveSqlParser.RULE_cteStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2480;
            this.id_();
            this.state = 2485;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399) {
                {
                this.state = 2481;
                this.match(HiveSqlParser.LPAREN);
                this.state = 2482;
                localContext._colAliases = this.columnNameList();
                this.state = 2483;
                this.match(HiveSqlParser.RPAREN);
                }
            }

            this.state = 2487;
            this.match(HiveSqlParser.KW_AS);
            this.state = 2488;
            this.match(HiveSqlParser.LPAREN);
            this.state = 2489;
            this.queryStatementExpression();
            this.state = 2490;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromStatement(): FromStatementContext {
        let localContext = new FromStatementContext(this.context, this.state);
        this.enterRule(localContext, 368, HiveSqlParser.RULE_fromStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2492;
            this.singleFromStatement();
            this.state = 2498;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 112 || _la === 164 || _la === 205 || _la === 356) {
                {
                {
                this.state = 2493;
                localContext._u = this.setOperator();
                this.state = 2494;
                localContext._r = this.singleFromStatement();
                }
                }
                this.state = 2500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleFromStatement(): SingleFromStatementContext {
        let localContext = new SingleFromStatementContext(this.context, this.state);
        this.enterRule(localContext, 370, HiveSqlParser.RULE_singleFromStatement);
        let _la: number;
        try {
            this.state = 2572;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 288, this.context) ) {
            case 1:
                localContext = new FromInsertStmtContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2501;
                this.fromClause();
                this.state = 2502;
                this.insertClause();
                this.state = 2503;
                this.selectClause();
                this.state = 2505;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178 || _la === 397) {
                    {
                    this.state = 2504;
                    this.lateralView();
                    }
                }

                this.state = 2508;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 384) {
                    {
                    this.state = 2507;
                    this.whereClause();
                    }
                }

                this.state = 2511;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 2510;
                    this.groupByClause();
                    }
                }

                this.state = 2514;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 2513;
                    this.havingClause();
                    }
                }

                this.state = 2517;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 386) {
                    {
                    this.state = 2516;
                    this.window_clause();
                    }
                }

                this.state = 2520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 256) {
                    {
                    this.state = 2519;
                    this.qualifyClause();
                    }
                }

                this.state = 2523;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 2522;
                    this.orderByClause();
                    }
                }

                this.state = 2526;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 41) {
                    {
                    this.state = 2525;
                    this.clusterByClause();
                    }
                }

                this.state = 2529;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 2528;
                    this.distributeByClause();
                    }
                }

                this.state = 2532;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 314) {
                    {
                    this.state = 2531;
                    this.sortByClause();
                    }
                }

                this.state = 2535;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 185) {
                    {
                    this.state = 2534;
                    this.limitClause();
                    }
                }

                }
                break;
            case 2:
                localContext = new FromSelectStmtContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2537;
                this.fromClause();
                this.state = 2538;
                this.selectClause();
                this.state = 2540;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178 || _la === 397) {
                    {
                    this.state = 2539;
                    this.lateralView();
                    }
                }

                this.state = 2543;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 384) {
                    {
                    this.state = 2542;
                    this.whereClause();
                    }
                }

                this.state = 2546;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 2545;
                    this.groupByClause();
                    }
                }

                this.state = 2549;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 2548;
                    this.havingClause();
                    }
                }

                this.state = 2552;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 386) {
                    {
                    this.state = 2551;
                    this.window_clause();
                    }
                }

                this.state = 2555;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 256) {
                    {
                    this.state = 2554;
                    this.qualifyClause();
                    }
                }

                this.state = 2558;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 2557;
                    this.orderByClause();
                    }
                }

                this.state = 2561;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 41) {
                    {
                    this.state = 2560;
                    this.clusterByClause();
                    }
                }

                this.state = 2564;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 2563;
                    this.distributeByClause();
                    }
                }

                this.state = 2567;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 314) {
                    {
                    this.state = 2566;
                    this.sortByClause();
                    }
                }

                this.state = 2570;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 185) {
                    {
                    this.state = 2569;
                    this.limitClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public regularBody(): RegularBodyContext {
        let localContext = new RegularBodyContext(this.context, this.state);
        this.enterRule(localContext, 372, HiveSqlParser.RULE_regularBody);
        try {
            this.state = 2578;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_INSERT:
                localContext = new InsertStmtContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2574;
                (localContext as InsertStmtContext)._i = this.insertClause();
                this.state = 2575;
                (localContext as InsertStmtContext)._s = this.selectStatement();
                }
                break;
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_REDUCE:
            case HiveSqlParser.KW_SELECT:
            case HiveSqlParser.KW_VALUES:
            case HiveSqlParser.LPAREN:
                localContext = new SelectStmtContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2577;
                this.selectStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomSelectStatement(): AtomSelectStatementContext {
        let localContext = new AtomSelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 374, HiveSqlParser.RULE_atomSelectStatement);
        let _la: number;
        try {
            this.state = 2604;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_REDUCE:
            case HiveSqlParser.KW_SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2580;
                localContext._s = this.selectClause();
                this.state = 2582;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 290, this.context) ) {
                case 1:
                    {
                    this.state = 2581;
                    localContext._f = this.fromClause();
                    }
                    break;
                }
                this.state = 2585;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 384) {
                    {
                    this.state = 2584;
                    localContext._w = this.whereClause();
                    }
                }

                this.state = 2588;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 2587;
                    localContext._g = this.groupByClause();
                    }
                }

                this.state = 2591;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 2590;
                    localContext._h = this.havingClause();
                    }
                }

                this.state = 2594;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 386) {
                    {
                    this.state = 2593;
                    localContext._win = this.window_clause();
                    }
                }

                this.state = 2597;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 256) {
                    {
                    this.state = 2596;
                    localContext._q = this.qualifyClause();
                    }
                }

                }
                break;
            case HiveSqlParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2599;
                this.match(HiveSqlParser.LPAREN);
                this.state = 2600;
                this.selectStatement();
                this.state = 2601;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case HiveSqlParser.KW_VALUES:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2603;
                this.valuesClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatement(): SelectStatementContext {
        let localContext = new SelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 376, HiveSqlParser.RULE_selectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2606;
            localContext._a = this.atomSelectStatement();
            this.state = 2608;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 112 || _la === 164 || _la === 205 || _la === 356) {
                {
                this.state = 2607;
                localContext._set_ = this.setOpSelectStatement();
                }
            }

            this.state = 2611;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 229) {
                {
                this.state = 2610;
                localContext._o = this.orderByClause();
                }
            }

            this.state = 2614;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 41) {
                {
                this.state = 2613;
                localContext._c = this.clusterByClause();
                }
            }

            this.state = 2617;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 97) {
                {
                this.state = 2616;
                localContext._d = this.distributeByClause();
                }
            }

            this.state = 2620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 314) {
                {
                this.state = 2619;
                localContext._sort = this.sortByClause();
                }
            }

            this.state = 2623;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 185) {
                {
                this.state = 2622;
                localContext._l = this.limitClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setOpSelectStatement(): SetOpSelectStatementContext {
        let localContext = new SetOpSelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 378, HiveSqlParser.RULE_setOpSelectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2628;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 2625;
                localContext._u = this.setOperator();
                this.state = 2626;
                localContext._b = this.atomSelectStatement();
                }
                }
                this.state = 2630;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 112 || _la === 164 || _la === 205 || _la === 356);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext {
        let localContext = new SelectStatementWithCTEContext(this.context, this.state);
        this.enterRule(localContext, 380, HiveSqlParser.RULE_selectStatementWithCTE);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2633;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 387) {
                {
                this.state = 2632;
                localContext._w = this.withClause();
                }
            }

            this.state = 2635;
            this.selectStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertClause(): InsertClauseContext {
        let localContext = new InsertClauseContext(this.context, this.state);
        this.enterRule(localContext, 382, HiveSqlParser.RULE_insertClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2637;
            this.match(HiveSqlParser.KW_INSERT);
            this.state = 2654;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_OVERWRITE:
                {
                this.state = 2638;
                this.match(HiveSqlParser.KW_OVERWRITE);
                this.state = 2639;
                this.destination();
                this.state = 2641;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 2640;
                    this.ifNotExists();
                    }
                }

                }
                break;
            case HiveSqlParser.KW_INTO:
                {
                this.state = 2643;
                this.match(HiveSqlParser.KW_INTO);
                this.state = 2645;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 2644;
                    this.match(HiveSqlParser.KW_TABLE);
                    }
                }

                this.state = 2647;
                this.tableOrPartition();
                this.state = 2652;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 307, this.context) ) {
                case 1:
                    {
                    this.state = 2648;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 2649;
                    localContext._targetCols = this.columnNameList();
                    this.state = 2650;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public destination(): DestinationContext {
        let localContext = new DestinationContext(this.context, this.state);
        this.enterRule(localContext, 384, HiveSqlParser.RULE_destination);
        let _la: number;
        try {
            this.state = 2669;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_LOCAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2657;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188) {
                    {
                    this.state = 2656;
                    localContext._local = this.match(HiveSqlParser.KW_LOCAL);
                    }
                }

                this.state = 2659;
                this.match(HiveSqlParser.KW_DIRECTORY);
                this.state = 2660;
                this.match(HiveSqlParser.StringLiteral);
                this.state = 2662;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 291) {
                    {
                    this.state = 2661;
                    this.tableRowFormat();
                    }
                }

                this.state = 2665;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 321) {
                    {
                    this.state = 2664;
                    this.tableFileFormat();
                    }
                }

                }
                break;
            case HiveSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2667;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 2668;
                this.tableOrPartition();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 386, HiveSqlParser.RULE_limitClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2671;
            this.match(HiveSqlParser.KW_LIMIT);
            this.state = 2680;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
            case 1:
                {
                this.state = 2674;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 313, this.context) ) {
                case 1:
                    {
                    this.state = 2672;
                    localContext._offset = this.match(HiveSqlParser.Number);
                    this.state = 2673;
                    this.match(HiveSqlParser.COMMA);
                    }
                    break;
                }
                this.state = 2676;
                localContext._num = this.match(HiveSqlParser.Number);
                }
                break;
            case 2:
                {
                this.state = 2677;
                localContext._num = this.match(HiveSqlParser.Number);
                this.state = 2678;
                this.match(HiveSqlParser.KW_OFFSET);
                this.state = 2679;
                localContext._offset = this.match(HiveSqlParser.Number);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAssignmentClause(): ColumnAssignmentClauseContext {
        let localContext = new ColumnAssignmentClauseContext(this.context, this.state);
        this.enterRule(localContext, 388, HiveSqlParser.RULE_columnAssignmentClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2682;
            this.columnName();
            this.state = 2683;
            this.match(HiveSqlParser.EQUAL);
            this.state = 2684;
            this.precedencePlusExpressionOrDefault();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedencePlusExpressionOrDefault(): PrecedencePlusExpressionOrDefaultContext {
        let localContext = new PrecedencePlusExpressionOrDefaultContext(this.context, this.state);
        this.enterRule(localContext, 390, HiveSqlParser.RULE_precedencePlusExpressionOrDefault);
        try {
            this.state = 2688;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 315, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2686;
                this.match(HiveSqlParser.KW_DEFAULT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2687;
                this.precedencePlusExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setColumnsClause(): SetColumnsClauseContext {
        let localContext = new SetColumnsClauseContext(this.context, this.state);
        this.enterRule(localContext, 392, HiveSqlParser.RULE_setColumnsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2690;
            this.match(HiveSqlParser.KW_SET);
            this.state = 2691;
            this.columnAssignmentClause();
            this.state = 2696;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 2692;
                this.match(HiveSqlParser.COMMA);
                this.state = 2693;
                this.columnAssignmentClause();
                }
                }
                this.state = 2698;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlTransactionStatement(): SqlTransactionStatementContext {
        let localContext = new SqlTransactionStatementContext(this.context, this.state);
        this.enterRule(localContext, 394, HiveSqlParser.RULE_sqlTransactionStatement);
        let _la: number;
        try {
            this.state = 2722;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_START:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2699;
                this.match(HiveSqlParser.KW_START);
                this.state = 2700;
                this.match(HiveSqlParser.KW_TRANSACTION);
                this.state = 2709;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 168 || _la === 261) {
                    {
                    this.state = 2701;
                    this.transactionMode();
                    this.state = 2706;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 397) {
                        {
                        {
                        this.state = 2702;
                        this.match(HiveSqlParser.COMMA);
                        this.state = 2703;
                        this.transactionMode();
                        }
                        }
                        this.state = 2708;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case HiveSqlParser.KW_COMMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2711;
                this.match(HiveSqlParser.KW_COMMIT);
                this.state = 2713;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 389) {
                    {
                    this.state = 2712;
                    this.match(HiveSqlParser.KW_WORK);
                    }
                }

                }
                break;
            case HiveSqlParser.KW_ROLLBACK:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2715;
                this.match(HiveSqlParser.KW_ROLLBACK);
                this.state = 2717;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 389) {
                    {
                    this.state = 2716;
                    this.match(HiveSqlParser.KW_WORK);
                    }
                }

                }
                break;
            case HiveSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2719;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2720;
                this.match(HiveSqlParser.KW_AUTOCOMMIT);
                this.state = 2721;
                _la = this.tokenStream.LA(1);
                if(!(_la === 125 || _la === 350)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionMode(): TransactionModeContext {
        let localContext = new TransactionModeContext(this.context, this.state);
        this.enterRule(localContext, 396, HiveSqlParser.RULE_transactionMode);
        let _la: number;
        try {
            this.state = 2729;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ISOLATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2724;
                this.match(HiveSqlParser.KW_ISOLATION);
                this.state = 2725;
                this.match(HiveSqlParser.KW_LEVEL);
                this.state = 2726;
                this.match(HiveSqlParser.KW_SNAPSHOT);
                }
                break;
            case HiveSqlParser.KW_READ:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2727;
                this.match(HiveSqlParser.KW_READ);
                this.state = 2728;
                _la = this.tokenStream.LA(1);
                if(!(_la === 225 || _la === 391)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClauses(): WhenClausesContext {
        let localContext = new WhenClausesContext(this.context, this.state);
        this.enterRule(localContext, 398, HiveSqlParser.RULE_whenClauses);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2735;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 324, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 2733;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 323, this.context) ) {
                    case 1:
                        {
                        this.state = 2731;
                        this.whenMatchedAndClause();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2732;
                        this.whenMatchedThenClause();
                        }
                        break;
                    }
                    }
                }
                this.state = 2737;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 324, this.context);
            }
            this.state = 2739;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 383) {
                {
                this.state = 2738;
                this.whenNotMatchedClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenNotMatchedClause(): WhenNotMatchedClauseContext {
        let localContext = new WhenNotMatchedClauseContext(this.context, this.state);
        this.enterRule(localContext, 400, HiveSqlParser.RULE_whenNotMatchedClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2741;
            this.match(HiveSqlParser.KW_WHEN);
            this.state = 2742;
            this.match(HiveSqlParser.KW_NOT);
            this.state = 2743;
            this.match(HiveSqlParser.KW_MATCHED);
            this.state = 2746;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 11) {
                {
                this.state = 2744;
                this.match(HiveSqlParser.KW_AND);
                this.state = 2745;
                this.expression();
                }
            }

            this.state = 2748;
            this.match(HiveSqlParser.KW_THEN);
            this.state = 2749;
            this.match(HiveSqlParser.KW_INSERT);
            this.state = 2751;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399) {
                {
                this.state = 2750;
                localContext._targetCols = this.columnParenthesesList();
                }
            }

            this.state = 2753;
            this.match(HiveSqlParser.KW_VALUES);
            this.state = 2754;
            this.expressionsInParenthesis();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenMatchedAndClause(): WhenMatchedAndClauseContext {
        let localContext = new WhenMatchedAndClauseContext(this.context, this.state);
        this.enterRule(localContext, 402, HiveSqlParser.RULE_whenMatchedAndClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2756;
            this.match(HiveSqlParser.KW_WHEN);
            this.state = 2757;
            this.match(HiveSqlParser.KW_MATCHED);
            this.state = 2758;
            this.match(HiveSqlParser.KW_AND);
            this.state = 2759;
            this.expression();
            this.state = 2760;
            this.match(HiveSqlParser.KW_THEN);
            this.state = 2764;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_UPDATE:
                {
                this.state = 2761;
                this.match(HiveSqlParser.KW_UPDATE);
                this.state = 2762;
                this.setColumnsClause();
                }
                break;
            case HiveSqlParser.KW_DELETE:
                {
                this.state = 2763;
                this.match(HiveSqlParser.KW_DELETE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenMatchedThenClause(): WhenMatchedThenClauseContext {
        let localContext = new WhenMatchedThenClauseContext(this.context, this.state);
        this.enterRule(localContext, 404, HiveSqlParser.RULE_whenMatchedThenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2766;
            this.match(HiveSqlParser.KW_WHEN);
            this.state = 2767;
            this.match(HiveSqlParser.KW_MATCHED);
            this.state = 2768;
            this.match(HiveSqlParser.KW_THEN);
            this.state = 2772;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_UPDATE:
                {
                this.state = 2769;
                this.match(HiveSqlParser.KW_UPDATE);
                this.state = 2770;
                this.setColumnsClause();
                }
                break;
            case HiveSqlParser.KW_DELETE:
                {
                this.state = 2771;
                this.match(HiveSqlParser.KW_DELETE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compactionPool(): CompactionPoolContext {
        let localContext = new CompactionPoolContext(this.context, this.state);
        this.enterRule(localContext, 406, HiveSqlParser.RULE_compactionPool);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2774;
            this.match(HiveSqlParser.KW_POOL);
            this.state = 2775;
            localContext._poolName = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compactionType(): CompactionTypeContext {
        let localContext = new CompactionTypeContext(this.context, this.state);
        this.enterRule(localContext, 408, HiveSqlParser.RULE_compactionType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2777;
            this.match(HiveSqlParser.KW_TYPE);
            this.state = 2778;
            localContext._compactType = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public compactionStatus(): CompactionStatusContext {
        let localContext = new CompactionStatusContext(this.context, this.state);
        this.enterRule(localContext, 410, HiveSqlParser.RULE_compactionStatus);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2780;
            this.match(HiveSqlParser.KW_STATUS);
            this.state = 2781;
            localContext._status = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatement(): AlterStatementContext {
        let localContext = new AlterStatementContext(this.context, this.state);
        this.enterRule(localContext, 412, HiveSqlParser.RULE_alterStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2783;
            this.match(HiveSqlParser.KW_ALTER);
            this.state = 2814;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_TABLE:
                {
                this.state = 2784;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 2785;
                this.tableName();
                this.state = 2786;
                this.alterTableStatementSuffix();
                }
                break;
            case HiveSqlParser.KW_VIEW:
                {
                this.state = 2788;
                this.match(HiveSqlParser.KW_VIEW);
                this.state = 2789;
                this.viewName();
                this.state = 2791;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 2790;
                    this.match(HiveSqlParser.KW_AS);
                    }
                }

                this.state = 2793;
                this.alterViewStatementSuffix();
                }
                break;
            case HiveSqlParser.KW_MATERIALIZED:
                {
                this.state = 2795;
                this.match(HiveSqlParser.KW_MATERIALIZED);
                this.state = 2796;
                this.match(HiveSqlParser.KW_VIEW);
                this.state = 2797;
                localContext._tableNameTree = this.viewName();
                this.state = 2801;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                    {
                    this.state = 2798;
                    localContext._mvRewriteFlag = this.rewriteEnabled();
                    }
                    break;
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                    {
                    this.state = 2799;
                    localContext._mvRewriteFlag2 = this.rewriteDisabled();
                    }
                    break;
                case HiveSqlParser.KW_REBUILD:
                    {
                    this.state = 2800;
                    this.match(HiveSqlParser.KW_REBUILD);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case HiveSqlParser.KW_DATABASE:
            case HiveSqlParser.KW_SCHEMA:
                {
                this.state = 2803;
                this.db_schema();
                this.state = 2804;
                this.alterDatabaseStatementSuffix();
                }
                break;
            case HiveSqlParser.KW_DATACONNECTOR:
                {
                this.state = 2806;
                this.match(HiveSqlParser.KW_DATACONNECTOR);
                this.state = 2807;
                this.alterDataConnectorStatementSuffix();
                }
                break;
            case HiveSqlParser.KW_INDEX:
                {
                this.state = 2808;
                this.match(HiveSqlParser.KW_INDEX);
                this.state = 2809;
                this.id_();
                this.state = 2810;
                this.match(HiveSqlParser.KW_ON);
                this.state = 2811;
                this.tableOrPartition();
                this.state = 2812;
                this.match(HiveSqlParser.KW_REBUILD);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableStatementSuffix(): AlterTableStatementSuffixContext {
        let localContext = new AlterTableStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 414, HiveSqlParser.RULE_alterTableStatementSuffix);
        let _la: number;
        try {
            this.state = 2905;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 343, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2816;
                this.match(HiveSqlParser.KW_RENAME);
                this.state = 2817;
                this.match(HiveSqlParser.KW_TO);
                this.state = 2818;
                this.tableNameCreate();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2819;
                this.match(HiveSqlParser.KW_RECOVER);
                this.state = 2820;
                this.match(HiveSqlParser.KW_PARTITIONS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2821;
                this.alterStatementSuffixDropPartitions();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2822;
                this.match(HiveSqlParser.KW_ADD);
                this.state = 2824;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 2823;
                    this.ifNotExists();
                    }
                }

                this.state = 2830;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2826;
                    this.partitionSpec();
                    this.state = 2828;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 189) {
                        {
                        this.state = 2827;
                        this.locationPath();
                        }
                    }

                    }
                    }
                    this.state = 2832;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 237);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2834;
                this.match(HiveSqlParser.KW_TOUCH);
                this.state = 2838;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 237) {
                    {
                    {
                    this.state = 2835;
                    this.partitionSpec();
                    }
                    }
                    this.state = 2840;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2841;
                this.match(HiveSqlParser.KW_ARCHIVE);
                this.state = 2845;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 237) {
                    {
                    {
                    this.state = 2842;
                    this.partitionSpec();
                    }
                    }
                    this.state = 2847;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2848;
                this.match(HiveSqlParser.KW_UNARCHIVE);
                this.state = 2852;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 237) {
                    {
                    {
                    this.state = 2849;
                    this.partitionSpec();
                    }
                    }
                    this.state = 2854;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2855;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2856;
                this.match(HiveSqlParser.KW_TBLPROPERTIES);
                this.state = 2857;
                this.tableProperties();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2858;
                this.match(HiveSqlParser.KW_UNSET);
                this.state = 2859;
                this.match(HiveSqlParser.KW_TBLPROPERTIES);
                this.state = 2861;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 2860;
                    this.ifExists();
                    }
                }

                this.state = 2863;
                this.tableProperties();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2864;
                this.tableSkewed();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2865;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 2868;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_SKEWED:
                    {
                    this.state = 2866;
                    this.match(HiveSqlParser.KW_SKEWED);
                    }
                    break;
                case HiveSqlParser.KW_STORED:
                    {
                    this.state = 2867;
                    this.storedAsDirs();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2870;
                this.match(HiveSqlParser.KW_EXCHANGE);
                this.state = 2871;
                this.partitionSpec();
                this.state = 2872;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 2873;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 2874;
                localContext._exchangename = this.tableName();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2876;
                this.match(HiveSqlParser.KW_PARTITION);
                this.state = 2877;
                this.match(HiveSqlParser.KW_COLUMN);
                this.state = 2878;
                this.match(HiveSqlParser.LPAREN);
                this.state = 2879;
                this.columnNameType();
                this.state = 2880;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2882;
                this.match(HiveSqlParser.KW_DROP);
                this.state = 2883;
                this.match(HiveSqlParser.KW_CONSTRAINT);
                this.state = 2884;
                localContext._cName = this.id_();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2885;
                this.match(HiveSqlParser.KW_ADD);
                this.state = 2888;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 341, this.context) ) {
                case 1:
                    {
                    this.state = 2886;
                    localContext._fk = this.alterForeignKeyWithName();
                    }
                    break;
                case 2:
                    {
                    this.state = 2887;
                    this.alterConstraintWithName();
                    }
                    break;
                }
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2891;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 237) {
                    {
                    this.state = 2890;
                    this.partitionSpec();
                    }
                }

                this.state = 2893;
                this.alterTblPartitionStatementSuffix();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2894;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2895;
                this.match(HiveSqlParser.KW_OWNER);
                this.state = 2896;
                this.principalName();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2897;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2898;
                this.match(HiveSqlParser.KW_PARTITION);
                this.state = 2899;
                this.match(HiveSqlParser.KW_SPEC);
                this.state = 2900;
                this.match(HiveSqlParser.LPAREN);
                this.state = 2901;
                localContext._spec = this.partitionTransformSpec();
                this.state = 2902;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2904;
                this.alterStatementSuffixExecute();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTblPartitionStatementSuffix(): AlterTblPartitionStatementSuffixContext {
        let localContext = new AlterTblPartitionStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 416, HiveSqlParser.RULE_alterTblPartitionStatementSuffix);
        let _la: number;
        try {
            this.state = 3039;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 364, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2907;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2908;
                this.match(HiveSqlParser.KW_FILEFORMAT);
                this.state = 2909;
                this.fileFormat();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2910;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2911;
                this.match(HiveSqlParser.KW_LOCATION);
                this.state = 2912;
                localContext._newLoc = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2913;
                this.match(HiveSqlParser.KW_CONCATENATE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2914;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2924;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_SERDE:
                    {
                    this.state = 2915;
                    this.match(HiveSqlParser.KW_SERDE);
                    this.state = 2916;
                    localContext._serdeName = this.match(HiveSqlParser.StringLiteral);
                    this.state = 2920;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 344, this.context) ) {
                    case 1:
                        {
                        this.state = 2917;
                        this.match(HiveSqlParser.KW_WITH);
                        this.state = 2918;
                        this.match(HiveSqlParser.KW_SERDEPROPERTIES);
                        this.state = 2919;
                        this.tableProperties();
                        }
                        break;
                    }
                    }
                    break;
                case HiveSqlParser.KW_SERDEPROPERTIES:
                    {
                    this.state = 2922;
                    this.match(HiveSqlParser.KW_SERDEPROPERTIES);
                    this.state = 2923;
                    this.tableProperties();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2926;
                this.match(HiveSqlParser.KW_UNSET);
                this.state = 2927;
                this.match(HiveSqlParser.KW_SERDEPROPERTIES);
                this.state = 2928;
                this.tableProperties();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2929;
                this.match(HiveSqlParser.KW_RENAME);
                this.state = 2930;
                this.match(HiveSqlParser.KW_TO);
                this.state = 2931;
                this.partitionSpec();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2932;
                this.match(HiveSqlParser.KW_INTO);
                this.state = 2933;
                localContext._num = this.match(HiveSqlParser.Number);
                this.state = 2934;
                this.match(HiveSqlParser.KW_BUCKETS);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2935;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2936;
                this.match(HiveSqlParser.KW_SKEWED);
                this.state = 2937;
                this.match(HiveSqlParser.KW_LOCATION);
                this.state = 2938;
                this.match(HiveSqlParser.LPAREN);
                this.state = 2939;
                this.skewedLocationMap();
                this.state = 2944;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 2940;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 2941;
                    this.skewedLocationMap();
                    }
                    }
                    this.state = 2946;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2947;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2949;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 2950;
                _la = this.tokenStream.LA(1);
                if(!(_la === 42 || _la === 315)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2951;
                this.tableBuckets();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2952;
                this.match(HiveSqlParser.KW_COMPACT);
                this.state = 2953;
                localContext._compactType = this.match(HiveSqlParser.StringLiteral);
                this.state = 2956;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 11) {
                    {
                    this.state = 2954;
                    this.match(HiveSqlParser.KW_AND);
                    this.state = 2955;
                    this.match(HiveSqlParser.KW_WAIT);
                    }
                }

                this.state = 2962;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 42) {
                    {
                    this.state = 2958;
                    this.match(HiveSqlParser.KW_CLUSTERED);
                    this.state = 2959;
                    this.match(HiveSqlParser.KW_INTO);
                    this.state = 2960;
                    localContext._num = this.match(HiveSqlParser.Number);
                    this.state = 2961;
                    this.match(HiveSqlParser.KW_BUCKETS);
                    }
                }

                this.state = 2965;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 2964;
                    this.orderByClause();
                    }
                }

                this.state = 2968;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 246) {
                    {
                    this.state = 2967;
                    this.compactionPool();
                    }
                }

                this.state = 2974;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 351, this.context) ) {
                case 1:
                    {
                    this.state = 2970;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 2971;
                    this.match(HiveSqlParser.KW_OVERWRITE);
                    this.state = 2972;
                    this.match(HiveSqlParser.KW_TBLPROPERTIES);
                    this.state = 2973;
                    this.tableProperties();
                    }
                    break;
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2976;
                this.match(HiveSqlParser.KW_UPDATE);
                this.state = 2977;
                this.match(HiveSqlParser.KW_STATISTICS);
                this.state = 2978;
                this.match(HiveSqlParser.KW_FOR);
                this.state = 2980;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 352, this.context) ) {
                case 1:
                    {
                    this.state = 2979;
                    this.match(HiveSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2982;
                localContext._colName = this.columnName();
                this.state = 2983;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2984;
                this.tableProperties();
                this.state = 2987;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47) {
                    {
                    this.state = 2985;
                    this.match(HiveSqlParser.KW_COMMENT);
                    this.state = 2986;
                    localContext._comment = this.match(HiveSqlParser.StringLiteral);
                    }
                }

                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2989;
                this.match(HiveSqlParser.KW_UPDATE);
                this.state = 2990;
                this.match(HiveSqlParser.KW_STATISTICS);
                this.state = 2991;
                this.match(HiveSqlParser.KW_SET);
                this.state = 2992;
                this.tableProperties();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2993;
                this.match(HiveSqlParser.KW_CHANGE);
                this.state = 2995;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 354, this.context) ) {
                case 1:
                    {
                    this.state = 2994;
                    this.match(HiveSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2997;
                localContext._oldName = this.columnName();
                this.state = 2998;
                localContext._newName = this.columnNameCreate();
                this.state = 2999;
                this.columnType();
                this.state = 3001;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 40 || _la === 55 || _la === 83 || _la === 216 || _la === 251 || _la === 269 || _la === 358) {
                    {
                    this.state = 3000;
                    this.alterColumnConstraint();
                    }
                }

                this.state = 3005;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 47) {
                    {
                    this.state = 3003;
                    this.match(HiveSqlParser.KW_COMMENT);
                    this.state = 3004;
                    localContext._comment = this.match(HiveSqlParser.StringLiteral);
                    }
                }

                this.state = 3010;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_FIRST:
                    {
                    this.state = 3007;
                    localContext._first = this.match(HiveSqlParser.KW_FIRST);
                    }
                    break;
                case HiveSqlParser.KW_AFTER:
                    {
                    this.state = 3008;
                    this.match(HiveSqlParser.KW_AFTER);
                    this.state = 3009;
                    localContext._afterCol = this.id_();
                    }
                    break;
                case HiveSqlParser.EOF:
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ALTER:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_CASCADE:
                case HiveSqlParser.KW_COMMIT:
                case HiveSqlParser.KW_CREATE:
                case HiveSqlParser.KW_DELETE:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DESCRIBE:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DROP:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_GRANT:
                case HiveSqlParser.KW_IMPORT:
                case HiveSqlParser.KW_INSERT:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MERGE:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_PREPARE:
                case HiveSqlParser.KW_REDUCE:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_RESTRICT:
                case HiveSqlParser.KW_REVOKE:
                case HiveSqlParser.KW_ROLLBACK:
                case HiveSqlParser.KW_SELECT:
                case HiveSqlParser.KW_SET:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_START:
                case HiveSqlParser.KW_TRUNCATE:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UPDATE:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_VALUES:
                case HiveSqlParser.KW_WITH:
                case HiveSqlParser.SEMICOLON:
                case HiveSqlParser.LPAREN:
                    break;
                default:
                    break;
                }
                this.state = 3013;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 282) {
                    {
                    this.state = 3012;
                    this.restrictOrCascade();
                    }
                }

                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3017;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_ADD:
                    {
                    this.state = 3015;
                    localContext._add = this.match(HiveSqlParser.KW_ADD);
                    }
                    break;
                case HiveSqlParser.KW_REPLACE:
                    {
                    this.state = 3016;
                    localContext._replace = this.match(HiveSqlParser.KW_REPLACE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3019;
                this.match(HiveSqlParser.KW_COLUMNS);
                this.state = 3020;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3021;
                this.columnNameTypeList();
                this.state = 3022;
                this.match(HiveSqlParser.RPAREN);
                this.state = 3024;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 282) {
                    {
                    this.state = 3023;
                    this.restrictOrCascade();
                    }
                }

                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3026;
                this.match(HiveSqlParser.KW_UPDATE);
                this.state = 3027;
                this.match(HiveSqlParser.KW_COLUMNS);
                this.state = 3029;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 282) {
                    {
                    this.state = 3028;
                    this.restrictOrCascade();
                    }
                }

                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3031;
                this.enableSpecification();
                this.state = 3037;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_NO_DROP:
                    {
                    {
                    this.state = 3032;
                    this.match(HiveSqlParser.KW_NO_DROP);
                    this.state = 3034;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 34) {
                        {
                        this.state = 3033;
                        this.match(HiveSqlParser.KW_CASCADE);
                        }
                    }

                    }
                    }
                    break;
                case HiveSqlParser.KW_OFFLINE:
                    {
                    this.state = 3036;
                    this.match(HiveSqlParser.KW_OFFLINE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterViewStatementSuffix(): AlterViewStatementSuffixContext {
        let localContext = new AlterViewStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 418, HiveSqlParser.RULE_alterViewStatementSuffix);
        let _la: number;
        try {
            this.state = 3067;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3041;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3042;
                this.match(HiveSqlParser.KW_TBLPROPERTIES);
                this.state = 3043;
                this.tableProperties();
                }
                break;
            case HiveSqlParser.KW_UNSET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3044;
                this.match(HiveSqlParser.KW_UNSET);
                this.state = 3045;
                this.match(HiveSqlParser.KW_TBLPROPERTIES);
                this.state = 3047;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 3046;
                    this.ifExists();
                    }
                }

                this.state = 3049;
                this.tableProperties();
                }
                break;
            case HiveSqlParser.KW_RENAME:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3050;
                this.match(HiveSqlParser.KW_RENAME);
                this.state = 3051;
                this.match(HiveSqlParser.KW_TO);
                this.state = 3052;
                this.tableNameCreate();
                }
                break;
            case HiveSqlParser.KW_ADD:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3053;
                this.match(HiveSqlParser.KW_ADD);
                this.state = 3055;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 3054;
                    this.ifNotExists();
                    }
                }

                this.state = 3061;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3057;
                    this.partitionSpec();
                    this.state = 3059;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 189) {
                        {
                        this.state = 3058;
                        this.locationPath();
                        }
                    }

                    }
                    }
                    this.state = 3063;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 237);
                }
                break;
            case HiveSqlParser.KW_DROP:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3065;
                this.alterStatementSuffixDropPartitions();
                }
                break;
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_REDUCE:
            case HiveSqlParser.KW_SELECT:
            case HiveSqlParser.KW_VALUES:
            case HiveSqlParser.KW_WITH:
            case HiveSqlParser.LPAREN:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3066;
                this.selectStatementWithCTE();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDatabaseStatementSuffix(): AlterDatabaseStatementSuffixContext {
        let localContext = new AlterDatabaseStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 420, HiveSqlParser.RULE_alterDatabaseStatementSuffix);
        let _la: number;
        try {
            this.state = 3084;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 370, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3069;
                localContext._name = this.dbSchemaName();
                this.state = 3070;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3071;
                this.match(HiveSqlParser.KW_DBPROPERTIES);
                this.state = 3072;
                this.keyValueProperties();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3074;
                localContext._dbName = this.dbSchemaName();
                this.state = 3075;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3076;
                this.match(HiveSqlParser.KW_OWNER);
                this.state = 3077;
                this.principalAlterName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3079;
                localContext._dbName = this.dbSchemaName();
                this.state = 3080;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3081;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 196)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3082;
                localContext._newLocation = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterDataConnectorStatementSuffix(): AlterDataConnectorStatementSuffixContext {
        let localContext = new AlterDataConnectorStatementSuffixContext(this.context, this.state);
        this.enterRule(localContext, 422, HiveSqlParser.RULE_alterDataConnectorStatementSuffix);
        try {
            this.state = 3101;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 371, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3086;
                localContext._name = this.dbSchemaName();
                this.state = 3087;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3088;
                this.match(HiveSqlParser.KW_DCPROPERTIES);
                this.state = 3089;
                this.keyValueProperties();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3091;
                localContext._dcName = this.dbSchemaName();
                this.state = 3092;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3093;
                this.match(HiveSqlParser.KW_OWNER);
                this.state = 3094;
                this.principalAlterName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3096;
                localContext._dcName = this.dbSchemaName();
                this.state = 3097;
                this.match(HiveSqlParser.KW_SET);
                this.state = 3098;
                this.match(HiveSqlParser.KW_URL);
                this.state = 3099;
                localContext._newUri = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public locationPath(): LocationPathContext {
        let localContext = new LocationPathContext(this.context, this.state);
        this.enterRule(localContext, 424, HiveSqlParser.RULE_locationPath);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3103;
            this.match(HiveSqlParser.KW_LOCATION);
            this.state = 3104;
            localContext._locn = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext {
        let localContext = new AlterStatementSuffixDropPartitionsContext(this.context, this.state);
        this.enterRule(localContext, 426, HiveSqlParser.RULE_alterStatementSuffixDropPartitions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3106;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 3108;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 3107;
                this.ifExists();
                }
            }

            this.state = 3110;
            this.match(HiveSqlParser.KW_PARTITION);
            this.state = 3111;
            this.partitionSelectorSpec();
            this.state = 3117;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3112;
                this.match(HiveSqlParser.COMMA);
                this.state = 3113;
                this.match(HiveSqlParser.KW_PARTITION);
                this.state = 3114;
                this.partitionSelectorSpec();
                }
                }
                this.state = 3119;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3122;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 152) {
                {
                this.state = 3120;
                this.match(HiveSqlParser.KW_IGNORE);
                this.state = 3121;
                this.match(HiveSqlParser.KW_PROTECTION);
                }
            }

            this.state = 3125;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 255) {
                {
                this.state = 3124;
                this.match(HiveSqlParser.KW_PURGE);
                }
            }

            this.state = 3128;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 134) {
                {
                this.state = 3127;
                this.replicationClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewedLocationMap(): SkewedLocationMapContext {
        let localContext = new SkewedLocationMapContext(this.context, this.state);
        this.enterRule(localContext, 428, HiveSqlParser.RULE_skewedLocationMap);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3132;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_CURRENT_DATE:
            case HiveSqlParser.KW_CURRENT_TIMESTAMP:
            case HiveSqlParser.KW_DATE:
            case HiveSqlParser.KW_FALSE:
            case HiveSqlParser.KW_NULL:
            case HiveSqlParser.KW_TIMESTAMP:
            case HiveSqlParser.KW_TIMESTAMPLOCALTZ:
            case HiveSqlParser.KW_TRUE:
            case HiveSqlParser.QUESTION:
            case HiveSqlParser.StringLiteral:
            case HiveSqlParser.IntegralLiteral:
            case HiveSqlParser.NumberLiteral:
            case HiveSqlParser.Number:
            case HiveSqlParser.Identifier:
            case HiveSqlParser.CharSetName:
                {
                this.state = 3130;
                this.constant();
                }
                break;
            case HiveSqlParser.LPAREN:
                {
                this.state = 3131;
                this.skewedColumnValuePair();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3134;
            this.match(HiveSqlParser.EQUAL);
            this.state = 3135;
            localContext._value = this.match(HiveSqlParser.StringLiteral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatementSuffixExecute(): AlterStatementSuffixExecuteContext {
        let localContext = new AlterStatementSuffixExecuteContext(this.context, this.state);
        this.enterRule(localContext, 430, HiveSqlParser.RULE_alterStatementSuffixExecute);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3137;
            this.match(HiveSqlParser.KW_EXECUTE);
            this.state = 3147;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ROLLBACK:
                {
                this.state = 3138;
                this.match(HiveSqlParser.KW_ROLLBACK);
                this.state = 3139;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3140;
                localContext._rollbackParam = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 426 || _la === 431)) {
                    localContext._rollbackParam = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
                {
                this.state = 3141;
                this.match(HiveSqlParser.KW_EXPIRE_SNAPSHOTS);
                this.state = 3142;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3143;
                localContext._expireParam = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
                {
                this.state = 3144;
                this.match(HiveSqlParser.KW_SET_CURRENT_SNAPSHOT);
                this.state = 3145;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3146;
                localContext._snapshotParam = this.match(HiveSqlParser.Number);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3149;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fileFormat(): FileFormatContext {
        let localContext = new FileFormatContext(this.context, this.state);
        this.enterRule(localContext, 432, HiveSqlParser.RULE_fileFormat);
        let _la: number;
        try {
            this.state = 3164;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 380, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3151;
                this.match(HiveSqlParser.KW_INPUTFORMAT);
                this.state = 3152;
                localContext._inFmt = this.match(HiveSqlParser.StringLiteral);
                this.state = 3153;
                this.match(HiveSqlParser.KW_OUTPUTFORMAT);
                this.state = 3154;
                localContext._outFmt = this.match(HiveSqlParser.StringLiteral);
                this.state = 3155;
                this.match(HiveSqlParser.KW_SERDE);
                this.state = 3156;
                localContext._serdeCls = this.match(HiveSqlParser.StringLiteral);
                this.state = 3161;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 159) {
                    {
                    this.state = 3157;
                    this.match(HiveSqlParser.KW_INPUTDRIVER);
                    this.state = 3158;
                    localContext._inDriver = this.match(HiveSqlParser.StringLiteral);
                    this.state = 3159;
                    this.match(HiveSqlParser.KW_OUTPUTDRIVER);
                    this.state = 3160;
                    localContext._outDriver = this.match(HiveSqlParser.StringLiteral);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3163;
                localContext._genericSpec = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likeTableOrFile(): LikeTableOrFileContext {
        let localContext = new LikeTableOrFileContext(this.context, this.state);
        this.enterRule(localContext, 434, HiveSqlParser.RULE_likeTableOrFile);
        try {
            this.state = 3175;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 381, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3166;
                this.match(HiveSqlParser.KW_LIKE);
                this.state = 3167;
                this.match(HiveSqlParser.KW_FILE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3168;
                this.match(HiveSqlParser.KW_LIKE);
                this.state = 3169;
                this.match(HiveSqlParser.KW_FILE);
                this.state = 3170;
                localContext._format = this.id_();
                this.state = 3171;
                localContext._uri = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3173;
                this.match(HiveSqlParser.KW_LIKE);
                this.state = 3174;
                localContext._likeName = this.tableName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableStatement(): CreateTableStatementContext {
        let localContext = new CreateTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 436, HiveSqlParser.RULE_createTableStatement);
        let _la: number;
        try {
            this.state = 3312;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 422, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3177;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 3179;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 333) {
                    {
                    this.state = 3178;
                    localContext._temp = this.match(HiveSqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 3182;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 345) {
                    {
                    this.state = 3181;
                    localContext._trans = this.match(HiveSqlParser.KW_TRANSACTIONAL);
                    }
                }

                this.state = 3185;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 123) {
                    {
                    this.state = 3184;
                    localContext._ext = this.match(HiveSqlParser.KW_EXTERNAL);
                    }
                }

                this.state = 3187;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 3189;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 3188;
                    this.ifNotExists();
                    }
                }

                this.state = 3191;
                localContext._name = this.tableNameCreate();
                this.state = 3248;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_LIKE:
                    {
                    this.state = 3192;
                    this.likeTableOrFile();
                    this.state = 3194;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 238) {
                        {
                        this.state = 3193;
                        this.createTablePartitionSpec();
                        }
                    }

                    this.state = 3197;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 291) {
                        {
                        this.state = 3196;
                        this.tableRowFormat();
                        }
                    }

                    this.state = 3200;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 321) {
                        {
                        this.state = 3199;
                        this.tableFileFormat();
                        }
                    }

                    this.state = 3203;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 189) {
                        {
                        this.state = 3202;
                        this.locationPath();
                        }
                    }

                    this.state = 3206;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 332) {
                        {
                        this.state = 3205;
                        this.tablePropertiesPrefixed();
                        }
                    }

                    this.state = 3209;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 183) {
                        {
                        this.state = 3208;
                        this.tableLifecycle();
                        }
                    }

                    }
                    break;
                case HiveSqlParser.EOF:
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ALTER:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_AS:
                case HiveSqlParser.KW_CLUSTERED:
                case HiveSqlParser.KW_COMMENT:
                case HiveSqlParser.KW_COMMIT:
                case HiveSqlParser.KW_CREATE:
                case HiveSqlParser.KW_DELETE:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DESCRIBE:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DROP:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_GRANT:
                case HiveSqlParser.KW_IMPORT:
                case HiveSqlParser.KW_INSERT:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LIFECYCLE:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCATION:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MERGE:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_PARTITIONED:
                case HiveSqlParser.KW_PREPARE:
                case HiveSqlParser.KW_REDUCE:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_REVOKE:
                case HiveSqlParser.KW_ROLLBACK:
                case HiveSqlParser.KW_ROW:
                case HiveSqlParser.KW_SELECT:
                case HiveSqlParser.KW_SET:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_SKEWED:
                case HiveSqlParser.KW_START:
                case HiveSqlParser.KW_STORED:
                case HiveSqlParser.KW_TBLPROPERTIES:
                case HiveSqlParser.KW_TRUNCATE:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UPDATE:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_VALUES:
                case HiveSqlParser.KW_WITH:
                case HiveSqlParser.SEMICOLON:
                case HiveSqlParser.LPAREN:
                    {
                    this.state = 3215;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 392, this.context) ) {
                    case 1:
                        {
                        this.state = 3211;
                        this.match(HiveSqlParser.LPAREN);
                        this.state = 3212;
                        this.columnNameTypeOrConstraintList();
                        this.state = 3213;
                        this.match(HiveSqlParser.RPAREN);
                        }
                        break;
                    }
                    this.state = 3218;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 47) {
                        {
                        this.state = 3217;
                        this.tableComment();
                        }
                    }

                    this.state = 3221;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 238) {
                        {
                        this.state = 3220;
                        this.createTablePartitionSpec();
                        }
                    }

                    this.state = 3224;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 42) {
                        {
                        this.state = 3223;
                        this.tableBuckets();
                        }
                    }

                    this.state = 3227;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 310) {
                        {
                        this.state = 3226;
                        this.tableSkewed();
                        }
                    }

                    this.state = 3230;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 291) {
                        {
                        this.state = 3229;
                        this.tableRowFormat();
                        }
                    }

                    this.state = 3233;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 321) {
                        {
                        this.state = 3232;
                        this.tableFileFormat();
                        }
                    }

                    this.state = 3236;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 189) {
                        {
                        this.state = 3235;
                        this.locationPath();
                        }
                    }

                    this.state = 3239;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 332) {
                        {
                        this.state = 3238;
                        this.tablePropertiesPrefixed();
                        }
                    }

                    this.state = 3242;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 183) {
                        {
                        this.state = 3241;
                        this.tableLifecycle();
                        }
                    }

                    this.state = 3246;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3244;
                        this.match(HiveSqlParser.KW_AS);
                        this.state = 3245;
                        this.selectStatementWithCTE();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3250;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 3251;
                localContext._mgd = this.match(HiveSqlParser.KW_MANAGED);
                this.state = 3252;
                this.match(HiveSqlParser.KW_TABLE);
                this.state = 3254;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 3253;
                    this.ifNotExists();
                    }
                }

                this.state = 3256;
                localContext._name = this.tableNameCreate();
                this.state = 3310;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_LIKE:
                    {
                    this.state = 3257;
                    this.likeTableOrFile();
                    this.state = 3259;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 291) {
                        {
                        this.state = 3258;
                        this.tableRowFormat();
                        }
                    }

                    this.state = 3262;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 321) {
                        {
                        this.state = 3261;
                        this.tableFileFormat();
                        }
                    }

                    this.state = 3265;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 189) {
                        {
                        this.state = 3264;
                        this.locationPath();
                        }
                    }

                    this.state = 3268;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 332) {
                        {
                        this.state = 3267;
                        this.tablePropertiesPrefixed();
                        }
                    }

                    this.state = 3271;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 183) {
                        {
                        this.state = 3270;
                        this.tableLifecycle();
                        }
                    }

                    }
                    break;
                case HiveSqlParser.EOF:
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ALTER:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_AS:
                case HiveSqlParser.KW_CLUSTERED:
                case HiveSqlParser.KW_COMMENT:
                case HiveSqlParser.KW_COMMIT:
                case HiveSqlParser.KW_CREATE:
                case HiveSqlParser.KW_DELETE:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DESCRIBE:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DROP:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_GRANT:
                case HiveSqlParser.KW_IMPORT:
                case HiveSqlParser.KW_INSERT:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LIFECYCLE:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCATION:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MERGE:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_PARTITIONED:
                case HiveSqlParser.KW_PREPARE:
                case HiveSqlParser.KW_REDUCE:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_REVOKE:
                case HiveSqlParser.KW_ROLLBACK:
                case HiveSqlParser.KW_ROW:
                case HiveSqlParser.KW_SELECT:
                case HiveSqlParser.KW_SET:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_SKEWED:
                case HiveSqlParser.KW_START:
                case HiveSqlParser.KW_STORED:
                case HiveSqlParser.KW_TBLPROPERTIES:
                case HiveSqlParser.KW_TRUNCATE:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UPDATE:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_VALUES:
                case HiveSqlParser.KW_WITH:
                case HiveSqlParser.SEMICOLON:
                case HiveSqlParser.LPAREN:
                    {
                    this.state = 3277;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 410, this.context) ) {
                    case 1:
                        {
                        this.state = 3273;
                        this.match(HiveSqlParser.LPAREN);
                        this.state = 3274;
                        this.columnNameTypeOrConstraintList();
                        this.state = 3275;
                        this.match(HiveSqlParser.RPAREN);
                        }
                        break;
                    }
                    this.state = 3280;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 47) {
                        {
                        this.state = 3279;
                        this.tableComment();
                        }
                    }

                    this.state = 3283;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 238) {
                        {
                        this.state = 3282;
                        this.createTablePartitionSpec();
                        }
                    }

                    this.state = 3286;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 42) {
                        {
                        this.state = 3285;
                        this.tableBuckets();
                        }
                    }

                    this.state = 3289;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 310) {
                        {
                        this.state = 3288;
                        this.tableSkewed();
                        }
                    }

                    this.state = 3292;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 291) {
                        {
                        this.state = 3291;
                        this.tableRowFormat();
                        }
                    }

                    this.state = 3295;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 321) {
                        {
                        this.state = 3294;
                        this.tableFileFormat();
                        }
                    }

                    this.state = 3298;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 189) {
                        {
                        this.state = 3297;
                        this.locationPath();
                        }
                    }

                    this.state = 3301;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 332) {
                        {
                        this.state = 3300;
                        this.tablePropertiesPrefixed();
                        }
                    }

                    this.state = 3304;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 183) {
                        {
                        this.state = 3303;
                        this.tableLifecycle();
                        }
                    }

                    this.state = 3308;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3306;
                        this.match(HiveSqlParser.KW_AS);
                        this.state = 3307;
                        this.selectStatementWithCTE();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDataConnectorStatement(): CreateDataConnectorStatementContext {
        let localContext = new CreateDataConnectorStatementContext(this.context, this.state);
        this.enterRule(localContext, 438, HiveSqlParser.RULE_createDataConnectorStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3314;
            this.match(HiveSqlParser.KW_CREATE);
            this.state = 3315;
            this.match(HiveSqlParser.KW_DATACONNECTOR);
            this.state = 3317;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 3316;
                this.ifNotExists();
                }
            }

            this.state = 3319;
            localContext._name = this.id_();
            this.state = 3322;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 352) {
                {
                this.state = 3320;
                this.match(HiveSqlParser.KW_TYPE);
                this.state = 3321;
                localContext._dcType = this.match(HiveSqlParser.StringLiteral);
                }
            }

            this.state = 3326;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 367) {
                {
                this.state = 3324;
                this.match(HiveSqlParser.KW_URL);
                this.state = 3325;
                localContext._url = this.match(HiveSqlParser.StringLiteral);
                }
            }

            this.state = 3330;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 47) {
                {
                this.state = 3328;
                this.match(HiveSqlParser.KW_COMMENT);
                this.state = 3329;
                localContext._comment = this.match(HiveSqlParser.StringLiteral);
                }
            }

            this.state = 3335;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 427, this.context) ) {
            case 1:
                {
                this.state = 3332;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 3333;
                this.match(HiveSqlParser.KW_DCPROPERTIES);
                this.state = 3334;
                localContext._dcprops = this.keyValueProperties();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropDataConnectorStatement(): DropDataConnectorStatementContext {
        let localContext = new DropDataConnectorStatementContext(this.context, this.state);
        this.enterRule(localContext, 440, HiveSqlParser.RULE_dropDataConnectorStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3337;
            this.match(HiveSqlParser.KW_DROP);
            this.state = 3338;
            this.match(HiveSqlParser.KW_DATACONNECTOR);
            this.state = 3340;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 3339;
                this.ifExists();
                }
            }

            this.state = 3342;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAllColumns(): TableAllColumnsContext {
        let localContext = new TableAllColumnsContext(this.context, this.state);
        this.enterRule(localContext, 442, HiveSqlParser.RULE_tableAllColumns);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3349;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394 || _la === 432) {
                {
                {
                this.state = 3344;
                this.id_();
                this.state = 3345;
                this.match(HiveSqlParser.DOT);
                }
                }
                this.state = 3351;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3352;
            this.match(HiveSqlParser.STAR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionList(): ExpressionListContext {
        let localContext = new ExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 444, HiveSqlParser.RULE_expressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3354;
            this.expression();
            this.state = 3359;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3355;
                this.match(HiveSqlParser.COMMA);
                this.state = 3356;
                this.expression();
                }
                }
                this.state = 3361;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aliasList(): AliasListContext {
        let localContext = new AliasListContext(this.context, this.state);
        this.enterRule(localContext, 446, HiveSqlParser.RULE_aliasList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3362;
            this.id_();
            this.state = 3367;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3363;
                this.match(HiveSqlParser.COMMA);
                this.state = 3364;
                this.id_();
                }
                }
                this.state = 3369;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 448, HiveSqlParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3370;
            this.match(HiveSqlParser.KW_FROM);
            this.state = 3371;
            this.fromSource();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromSource(): FromSourceContext {
        let localContext = new FromSourceContext(this.context, this.state);
        this.enterRule(localContext, 450, HiveSqlParser.RULE_fromSource);
        let _la: number;
        try {
            this.state = 3382;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_UNIQUEJOIN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3373;
                this.match(HiveSqlParser.KW_UNIQUEJOIN);
                this.state = 3374;
                this.uniqueJoinSource();
                this.state = 3377;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3375;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3376;
                    this.uniqueJoinSource();
                    }
                    }
                    this.state = 3379;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 397);
                }
                break;
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLE:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.LPAREN:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3381;
                this.joinSource();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomjoinSource(): AtomjoinSourceContext {
        let localContext = new AtomjoinSourceContext(this.context, this.state);
        this.enterRule(localContext, 452, HiveSqlParser.RULE_atomjoinSource);
        try {
            let alternative: number;
            this.state = 3416;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 438, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3384;
                this.tableSource();
                this.state = 3388;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 434, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3385;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 3390;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 434, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3391;
                this.virtualTableSource();
                this.state = 3395;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 435, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3392;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 3397;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 435, this.context);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3398;
                this.subQuerySource();
                this.state = 3402;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 436, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3399;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 3404;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 436, this.context);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3405;
                this.partitionedTableFunction();
                this.state = 3409;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 437, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3406;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 3411;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 437, this.context);
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3412;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3413;
                this.joinSource();
                this.state = 3414;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinSource(): JoinSourceContext {
        let localContext = new JoinSourceContext(this.context, this.state);
        this.enterRule(localContext, 454, HiveSqlParser.RULE_joinSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3418;
            this.atomjoinSource();
            this.state = 3429;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 60 || ((((_la - 140)) & ~0x1F) === 0 && ((1 << (_la - 140)) & 2147614721) !== 0) || _la === 180 || _la === 285 || _la === 397) {
                {
                {
                this.state = 3419;
                this.joinToken();
                this.state = 3420;
                this.joinSourcePart();
                this.state = 3425;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_ON:
                    {
                    this.state = 3421;
                    this.match(HiveSqlParser.KW_ON);
                    this.state = 3422;
                    this.expression();
                    }
                    break;
                case HiveSqlParser.KW_USING:
                    {
                    this.state = 3423;
                    this.match(HiveSqlParser.KW_USING);
                    this.state = 3424;
                    this.columnParenthesesList();
                    }
                    break;
                case HiveSqlParser.EOF:
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ALTER:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_CLUSTER:
                case HiveSqlParser.KW_COMMIT:
                case HiveSqlParser.KW_CREATE:
                case HiveSqlParser.KW_CROSS:
                case HiveSqlParser.KW_DELETE:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DESCRIBE:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DISTRIBUTE:
                case HiveSqlParser.KW_DROP:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_EXCEPT:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_FULL:
                case HiveSqlParser.KW_GRANT:
                case HiveSqlParser.KW_GROUP:
                case HiveSqlParser.KW_HAVING:
                case HiveSqlParser.KW_IMPORT:
                case HiveSqlParser.KW_INNER:
                case HiveSqlParser.KW_INSERT:
                case HiveSqlParser.KW_INTERSECT:
                case HiveSqlParser.KW_JOIN:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LEFT:
                case HiveSqlParser.KW_LIMIT:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MERGE:
                case HiveSqlParser.KW_MINUS:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_ORDER:
                case HiveSqlParser.KW_PREPARE:
                case HiveSqlParser.KW_QUALIFY:
                case HiveSqlParser.KW_REDUCE:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_REVOKE:
                case HiveSqlParser.KW_RIGHT:
                case HiveSqlParser.KW_ROLLBACK:
                case HiveSqlParser.KW_SELECT:
                case HiveSqlParser.KW_SET:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_SORT:
                case HiveSqlParser.KW_START:
                case HiveSqlParser.KW_TRUNCATE:
                case HiveSqlParser.KW_UNION:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UPDATE:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_VALUES:
                case HiveSqlParser.KW_WHERE:
                case HiveSqlParser.KW_WINDOW:
                case HiveSqlParser.KW_WITH:
                case HiveSqlParser.COMMA:
                case HiveSqlParser.SEMICOLON:
                case HiveSqlParser.LPAREN:
                case HiveSqlParser.RPAREN:
                    break;
                default:
                    break;
                }
                }
                }
                this.state = 3431;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinSourcePart(): JoinSourcePartContext {
        let localContext = new JoinSourcePartContext(this.context, this.state);
        this.enterRule(localContext, 456, HiveSqlParser.RULE_joinSourcePart);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3436;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 441, this.context) ) {
            case 1:
                {
                this.state = 3432;
                this.tableSource();
                }
                break;
            case 2:
                {
                this.state = 3433;
                this.virtualTableSource();
                }
                break;
            case 3:
                {
                this.state = 3434;
                this.subQuerySource();
                }
                break;
            case 4:
                {
                this.state = 3435;
                this.partitionedTableFunction();
                }
                break;
            }
            this.state = 3441;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 442, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3438;
                    this.lateralView();
                    }
                    }
                }
                this.state = 3443;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 442, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uniqueJoinSource(): UniqueJoinSourceContext {
        let localContext = new UniqueJoinSourceContext(this.context, this.state);
        this.enterRule(localContext, 458, HiveSqlParser.RULE_uniqueJoinSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3445;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 250) {
                {
                this.state = 3444;
                this.match(HiveSqlParser.KW_PRESERVE);
                }
            }

            this.state = 3447;
            localContext._tabname = this.tableOrView();
            this.state = 3449;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 331) {
                {
                this.state = 3448;
                localContext._ts = this.tableSample();
                }
            }

            this.state = 3455;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252585854) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394 || _la === 432) {
                {
                this.state = 3452;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3451;
                    this.match(HiveSqlParser.KW_AS);
                    }
                }

                this.state = 3454;
                localContext._alias = this.id_();
                }
            }

            this.state = 3457;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3458;
            this.expressionList();
            this.state = 3459;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinToken(): JoinTokenContext {
        let localContext = new JoinTokenContext(this.context, this.state);
        this.enterRule(localContext, 460, HiveSqlParser.RULE_joinToken);
        let _la: number;
        try {
            this.state = 3475;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.COMMA:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3461;
                this.match(HiveSqlParser.COMMA);
                }
                break;
            case HiveSqlParser.KW_CROSS:
            case HiveSqlParser.KW_FULL:
            case HiveSqlParser.KW_INNER:
            case HiveSqlParser.KW_JOIN:
            case HiveSqlParser.KW_LEFT:
            case HiveSqlParser.KW_RIGHT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3472;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_INNER:
                    {
                    this.state = 3462;
                    this.match(HiveSqlParser.KW_INNER);
                    }
                    break;
                case HiveSqlParser.KW_CROSS:
                    {
                    this.state = 3463;
                    this.match(HiveSqlParser.KW_CROSS);
                    }
                    break;
                case HiveSqlParser.KW_FULL:
                case HiveSqlParser.KW_RIGHT:
                    {
                    this.state = 3464;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 140 || _la === 285)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3466;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 231) {
                        {
                        this.state = 3465;
                        this.match(HiveSqlParser.KW_OUTER);
                        }
                    }

                    }
                    break;
                case HiveSqlParser.KW_LEFT:
                    {
                    this.state = 3468;
                    this.match(HiveSqlParser.KW_LEFT);
                    this.state = 3470;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 12 || _la === 231 || _la === 300) {
                        {
                        this.state = 3469;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 12 || _la === 231 || _la === 300)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                case HiveSqlParser.KW_JOIN:
                    break;
                default:
                    break;
                }
                this.state = 3474;
                this.match(HiveSqlParser.KW_JOIN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lateralView(): LateralViewContext {
        let localContext = new LateralViewContext(this.context, this.state);
        this.enterRule(localContext, 462, HiveSqlParser.RULE_lateralView);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3534;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 460, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3477;
                this.match(HiveSqlParser.KW_LATERAL);
                this.state = 3478;
                this.match(HiveSqlParser.KW_VIEW);
                this.state = 3479;
                this.match(HiveSqlParser.KW_OUTER);
                this.state = 3480;
                this.function_();
                this.state = 3481;
                localContext._alias = this.tableAlias();
                this.state = 3491;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3482;
                    this.match(HiveSqlParser.KW_AS);
                    this.state = 3483;
                    this.id_();
                    this.state = 3488;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 451, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 3484;
                            this.match(HiveSqlParser.COMMA);
                            this.state = 3485;
                            this.id_();
                            }
                            }
                        }
                        this.state = 3490;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 451, this.context);
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3494;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 397) {
                    {
                    this.state = 3493;
                    this.match(HiveSqlParser.COMMA);
                    }
                }

                this.state = 3496;
                this.match(HiveSqlParser.KW_LATERAL);
                this.state = 3532;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_VIEW:
                    {
                    this.state = 3497;
                    this.match(HiveSqlParser.KW_VIEW);
                    this.state = 3498;
                    this.function_();
                    this.state = 3499;
                    localContext._alias = this.tableAlias();
                    this.state = 3509;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3500;
                        this.match(HiveSqlParser.KW_AS);
                        this.state = 3501;
                        this.id_();
                        this.state = 3506;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 454, this.context);
                        while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                            if (alternative === 1) {
                                {
                                {
                                this.state = 3502;
                                this.match(HiveSqlParser.COMMA);
                                this.state = 3503;
                                this.id_();
                                }
                                }
                            }
                            this.state = 3508;
                            this.errorHandler.sync(this);
                            alternative = this.interpreter.adaptivePredict(this.tokenStream, 454, this.context);
                        }
                        }
                    }

                    }
                    break;
                case HiveSqlParser.KW_TABLE:
                    {
                    this.state = 3511;
                    this.match(HiveSqlParser.KW_TABLE);
                    this.state = 3512;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 3513;
                    this.valuesClause();
                    this.state = 3514;
                    this.match(HiveSqlParser.RPAREN);
                    this.state = 3516;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3515;
                        this.match(HiveSqlParser.KW_AS);
                        }
                    }

                    this.state = 3518;
                    localContext._alias = this.tableAlias();
                    this.state = 3530;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 458, this.context) ) {
                    case 1:
                        {
                        this.state = 3519;
                        this.match(HiveSqlParser.LPAREN);
                        this.state = 3520;
                        this.id_();
                        this.state = 3525;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 397) {
                            {
                            {
                            this.state = 3521;
                            this.match(HiveSqlParser.COMMA);
                            this.state = 3522;
                            this.id_();
                            }
                            }
                            this.state = 3527;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        this.state = 3528;
                        this.match(HiveSqlParser.RPAREN);
                        }
                        break;
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAlias(): TableAliasContext {
        let localContext = new TableAliasContext(this.context, this.state);
        this.enterRule(localContext, 464, HiveSqlParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3536;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSample(): TableSampleContext {
        let localContext = new TableSampleContext(this.context, this.state);
        this.enterRule(localContext, 466, HiveSqlParser.RULE_tableSample);
        let _la: number;
        try {
            this.state = 3565;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 464, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3538;
                this.match(HiveSqlParser.KW_TABLESAMPLE);
                this.state = 3539;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3540;
                this.match(HiveSqlParser.KW_BUCKET);
                this.state = 3541;
                localContext._numerator = this.match(HiveSqlParser.Number);
                this.state = 3542;
                this.match(HiveSqlParser.KW_OUT);
                this.state = 3543;
                this.match(HiveSqlParser.KW_OF);
                this.state = 3544;
                localContext._denominator = this.match(HiveSqlParser.Number);
                this.state = 3554;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 224) {
                    {
                    this.state = 3545;
                    this.match(HiveSqlParser.KW_ON);
                    this.state = 3546;
                    localContext._expression = this.expression();
                    localContext._expr.push(localContext._expression);
                    this.state = 3551;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 397) {
                        {
                        {
                        this.state = 3547;
                        this.match(HiveSqlParser.COMMA);
                        this.state = 3548;
                        localContext._expression = this.expression();
                        localContext._expr.push(localContext._expression);
                        }
                        }
                        this.state = 3553;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 3556;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3557;
                this.match(HiveSqlParser.KW_TABLESAMPLE);
                this.state = 3558;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3562;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.Number:
                    {
                    this.state = 3559;
                    this.match(HiveSqlParser.Number);
                    this.state = 3560;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 241 || _la === 292)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case HiveSqlParser.ByteLengthLiteral:
                    {
                    this.state = 3561;
                    this.match(HiveSqlParser.ByteLengthLiteral);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3564;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSource(): TableSourceContext {
        let localContext = new TableSourceContext(this.context, this.state);
        this.enterRule(localContext, 468, HiveSqlParser.RULE_tableSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3567;
            localContext._tabname = this.tableOrView();
            this.state = 3569;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 465, this.context) ) {
            case 1:
                {
                this.state = 3568;
                localContext._props = this.tableProperties();
                }
                break;
            }
            this.state = 3572;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 331) {
                {
                this.state = 3571;
                localContext._ts = this.tableSample();
                }
            }

            this.state = 3575;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 134) {
                {
                this.state = 3574;
                localContext._asOf = this.asOfClause();
                }
            }

            this.state = 3581;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 469, this.context) ) {
            case 1:
                {
                this.state = 3578;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3577;
                    this.match(HiveSqlParser.KW_AS);
                    }
                }

                this.state = 3580;
                localContext._alias = this.id_();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public asOfClause(): AsOfClauseContext {
        let localContext = new AsOfClauseContext(this.context, this.state);
        this.enterRule(localContext, 470, HiveSqlParser.RULE_asOfClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3583;
            this.match(HiveSqlParser.KW_FOR);
            this.state = 3593;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_SYSTEM_TIME:
                {
                this.state = 3584;
                this.match(HiveSqlParser.KW_SYSTEM_TIME);
                this.state = 3585;
                this.match(HiveSqlParser.KW_AS);
                this.state = 3586;
                this.match(HiveSqlParser.KW_OF);
                this.state = 3587;
                localContext._asOfTime = this.expression();
                }
                break;
            case HiveSqlParser.KW_FOR:
                {
                this.state = 3588;
                this.match(HiveSqlParser.KW_FOR);
                this.state = 3589;
                this.match(HiveSqlParser.KW_SYSTEM_VERSION);
                this.state = 3590;
                this.match(HiveSqlParser.KW_AS);
                this.state = 3591;
                this.match(HiveSqlParser.KW_OF);
                this.state = 3592;
                localContext._asOfVersion = this.match(HiveSqlParser.Number);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbSchemaName(): DbSchemaNameContext {
        let localContext = new DbSchemaNameContext(this.context, this.state);
        this.enterRule(localContext, 472, HiveSqlParser.RULE_dbSchemaName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3595;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbSchemaNameCreate(): DbSchemaNameCreateContext {
        let localContext = new DbSchemaNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 474, HiveSqlParser.RULE_dbSchemaNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3597;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableOrView(): TableOrViewContext {
        let localContext = new TableOrViewContext(this.context, this.state);
        this.enterRule(localContext, 476, HiveSqlParser.RULE_tableOrView);
        try {
            this.state = 3601;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 471, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3599;
                this.tableName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3600;
                this.viewName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableName(): TableNameContext {
        let localContext = new TableNameContext(this.context, this.state);
        this.enterRule(localContext, 478, HiveSqlParser.RULE_tableName);
        try {
            this.state = 3611;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 473, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3603;
                localContext._db = this.id_();
                this.state = 3604;
                this.match(HiveSqlParser.DOT);
                this.state = 3605;
                localContext._tab = this.id_();
                this.state = 3608;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 472, this.context) ) {
                case 1:
                    {
                    this.state = 3606;
                    this.match(HiveSqlParser.DOT);
                    this.state = 3607;
                    localContext._meta = this.id_();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3610;
                localContext._tab = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableNameCreate(): TableNameCreateContext {
        let localContext = new TableNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 480, HiveSqlParser.RULE_tableNameCreate);
        let _la: number;
        try {
            this.state = 3621;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 475, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3613;
                localContext._db = this.id_();
                this.state = 3614;
                this.match(HiveSqlParser.DOT);
                this.state = 3615;
                localContext._tab = this.id_();
                this.state = 3618;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 395) {
                    {
                    this.state = 3616;
                    this.match(HiveSqlParser.DOT);
                    this.state = 3617;
                    localContext._meta = this.id_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3620;
                localContext._tab = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewName(): ViewNameContext {
        let localContext = new ViewNameContext(this.context, this.state);
        this.enterRule(localContext, 482, HiveSqlParser.RULE_viewName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3626;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 476, this.context) ) {
            case 1:
                {
                this.state = 3623;
                localContext._db = this.id_();
                this.state = 3624;
                this.match(HiveSqlParser.DOT);
                }
                break;
            }
            this.state = 3628;
            localContext._view = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewNameCreate(): ViewNameCreateContext {
        let localContext = new ViewNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 484, HiveSqlParser.RULE_viewNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3633;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 477, this.context) ) {
            case 1:
                {
                this.state = 3630;
                localContext._db = this.id_();
                this.state = 3631;
                this.match(HiveSqlParser.DOT);
                }
                break;
            }
            this.state = 3635;
            localContext._view = this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subQuerySource(): SubQuerySourceContext {
        let localContext = new SubQuerySourceContext(this.context, this.state);
        this.enterRule(localContext, 486, HiveSqlParser.RULE_subQuerySource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3637;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3638;
            this.queryStatementExpression();
            this.state = 3639;
            this.match(HiveSqlParser.RPAREN);
            this.state = 3641;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 3640;
                this.match(HiveSqlParser.KW_AS);
                }
            }

            this.state = 3643;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitioningSpec(): PartitioningSpecContext {
        let localContext = new PartitioningSpecContext(this.context, this.state);
        this.enterRule(localContext, 488, HiveSqlParser.RULE_partitioningSpec);
        let _la: number;
        try {
            this.state = 3658;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_PARTITION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3645;
                this.match(HiveSqlParser.KW_PARTITION);
                this.state = 3646;
                this.match(HiveSqlParser.KW_BY);
                this.state = 3647;
                this.expressions();
                this.state = 3649;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 3648;
                    this.orderByClause();
                    }
                }

                }
                break;
            case HiveSqlParser.KW_ORDER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3651;
                this.orderByClause();
                }
                break;
            case HiveSqlParser.KW_DISTRIBUTE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3652;
                this.distributeByClause();
                this.state = 3654;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 314) {
                    {
                    this.state = 3653;
                    this.sortByClause();
                    }
                }

                }
                break;
            case HiveSqlParser.KW_SORT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3656;
                this.sortByClause();
                }
                break;
            case HiveSqlParser.KW_CLUSTER:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3657;
                this.clusterByClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionTableFunctionSource(): PartitionTableFunctionSourceContext {
        let localContext = new PartitionTableFunctionSourceContext(this.context, this.state);
        this.enterRule(localContext, 490, HiveSqlParser.RULE_partitionTableFunctionSource);
        try {
            this.state = 3663;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 482, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3660;
                this.subQuerySource();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3661;
                this.tableSource();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3662;
                this.partitionedTableFunction();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionedTableFunction(): PartitionedTableFunctionContext {
        let localContext = new PartitionedTableFunctionContext(this.context, this.state);
        this.enterRule(localContext, 492, HiveSqlParser.RULE_partitionedTableFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3665;
            localContext._n = this.id_();
            this.state = 3666;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3667;
            this.match(HiveSqlParser.KW_ON);
            this.state = 3668;
            localContext._ptfsrc = this.partitionTableFunctionSource();
            this.state = 3670;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 41 || _la === 97 || _la === 229 || _la === 237 || _la === 314) {
                {
                this.state = 3669;
                localContext._spec = this.partitioningSpec();
                }
            }

            this.state = 3687;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 432) {
                {
                this.state = 3672;
                this.match(HiveSqlParser.Identifier);
                this.state = 3673;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3674;
                this.expression();
                this.state = 3675;
                this.match(HiveSqlParser.RPAREN);
                this.state = 3684;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 3676;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3677;
                    this.match(HiveSqlParser.Identifier);
                    this.state = 3678;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 3679;
                    this.expression();
                    this.state = 3680;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    }
                    this.state = 3686;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3689;
            this.match(HiveSqlParser.RPAREN);
            this.state = 3691;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 486, this.context) ) {
            case 1:
                {
                this.state = 3690;
                localContext._alias = this.id_();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 494, HiveSqlParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3693;
            this.match(HiveSqlParser.KW_WHERE);
            this.state = 3694;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesClause(): ValuesClauseContext {
        let localContext = new ValuesClauseContext(this.context, this.state);
        this.enterRule(localContext, 496, HiveSqlParser.RULE_valuesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3696;
            this.match(HiveSqlParser.KW_VALUES);
            this.state = 3715;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 489, this.context) ) {
            case 1:
                {
                this.state = 3697;
                this.expressionsInParenthesis();
                this.state = 3702;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 3698;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3699;
                    this.expressionsInParenthesis();
                    }
                    }
                    this.state = 3704;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                {
                this.state = 3705;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3706;
                this.firstExpressionsWithAlias();
                this.state = 3707;
                this.match(HiveSqlParser.RPAREN);
                this.state = 3712;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 3708;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3709;
                    this.expressionsInParenthesis();
                    }
                    }
                    this.state = 3714;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public virtualTableSource(): VirtualTableSourceContext {
        let localContext = new VirtualTableSourceContext(this.context, this.state);
        this.enterRule(localContext, 498, HiveSqlParser.RULE_virtualTableSource);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3717;
            this.match(HiveSqlParser.KW_TABLE);
            this.state = 3718;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3719;
            this.valuesClause();
            this.state = 3720;
            this.match(HiveSqlParser.RPAREN);
            this.state = 3722;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 3721;
                this.match(HiveSqlParser.KW_AS);
                }
            }

            this.state = 3724;
            this.tableAlias();
            this.state = 3734;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399) {
                {
                this.state = 3725;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3726;
                this.id_();
                this.state = 3731;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 3727;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3728;
                    this.id_();
                    }
                    }
                    this.state = 3733;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3736;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectClause(): SelectClauseContext {
        let localContext = new SelectClauseContext(this.context, this.state);
        this.enterRule(localContext, 500, HiveSqlParser.RULE_selectClause);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3758;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3738;
                this.match(HiveSqlParser.KW_SELECT);
                this.state = 3740;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 493, this.context) ) {
                case 1:
                    {
                    this.state = 3739;
                    this.match(HiveSqlParser.QUERY_HINT);
                    }
                    break;
                }
                this.state = 3755;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 496, this.context) ) {
                case 1:
                    {
                    this.state = 3743;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 494, this.context) ) {
                    case 1:
                        {
                        this.state = 3742;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 7 || _la === 96)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                    }
                    this.state = 3745;
                    this.selectItem();
                    this.state = 3750;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 495, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 3746;
                            this.match(HiveSqlParser.COMMA);
                            this.state = 3747;
                            this.selectItem();
                            }
                            }
                        }
                        this.state = 3752;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 495, this.context);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 3753;
                    this.match(HiveSqlParser.KW_TRANSFORM);
                    this.state = 3754;
                    this.selectTrfmClause();
                    }
                    break;
                }
                }
                break;
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_REDUCE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3757;
                this.trfmClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectTrfmClause(): SelectTrfmClauseContext {
        let localContext = new SelectTrfmClauseContext(this.context, this.state);
        this.enterRule(localContext, 502, HiveSqlParser.RULE_selectTrfmClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3760;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3761;
            this.selectExpressionList();
            this.state = 3762;
            this.match(HiveSqlParser.RPAREN);
            this.state = 3763;
            this.rowFormat();
            this.state = 3764;
            this.recordWriter();
            this.state = 3765;
            this.match(HiveSqlParser.KW_USING);
            this.state = 3766;
            this.match(HiveSqlParser.StringLiteral);
            this.state = 3779;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 3767;
                this.match(HiveSqlParser.KW_AS);
                this.state = 3777;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 499, this.context) ) {
                case 1:
                    {
                    this.state = 3768;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 3771;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 498, this.context) ) {
                    case 1:
                        {
                        this.state = 3769;
                        this.aliasList();
                        }
                        break;
                    case 2:
                        {
                        this.state = 3770;
                        this.columnNameTypeList();
                        }
                        break;
                    }
                    this.state = 3773;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 3775;
                    this.aliasList();
                    }
                    break;
                case 3:
                    {
                    this.state = 3776;
                    this.columnNameTypeList();
                    }
                    break;
                }
                }
            }

            this.state = 3781;
            this.rowFormat();
            this.state = 3782;
            this.recordReader();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItem(): SelectItemContext {
        let localContext = new SelectItemContext(this.context, this.state);
        this.enterRule(localContext, 504, HiveSqlParser.RULE_selectItem);
        let _la: number;
        try {
            this.state = 3807;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 505, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3784;
                this.tableAllColumns();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 3787;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 501, this.context) ) {
                case 1:
                    {
                    this.state = 3785;
                    this.columnName();
                    }
                    break;
                case 2:
                    {
                    this.state = 3786;
                    this.expression();
                    }
                    break;
                }
                this.state = 3805;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 504, this.context) ) {
                case 1:
                    {
                    this.state = 3790;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 17) {
                        {
                        this.state = 3789;
                        this.match(HiveSqlParser.KW_AS);
                        }
                    }

                    this.state = 3792;
                    this.id_();
                    }
                    break;
                case 2:
                    {
                    this.state = 3793;
                    this.match(HiveSqlParser.KW_AS);
                    this.state = 3794;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 3795;
                    this.id_();
                    this.state = 3800;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 397) {
                        {
                        {
                        this.state = 3796;
                        this.match(HiveSqlParser.COMMA);
                        this.state = 3797;
                        this.id_();
                        }
                        }
                        this.state = 3802;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3803;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                }
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trfmClause(): TrfmClauseContext {
        let localContext = new TrfmClauseContext(this.context, this.state);
        this.enterRule(localContext, 506, HiveSqlParser.RULE_trfmClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3809;
            _la = this.tokenStream.LA(1);
            if(!(_la === 198 || _la === 268)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3810;
            this.selectExpressionList();
            this.state = 3811;
            this.rowFormat();
            this.state = 3812;
            this.recordWriter();
            this.state = 3813;
            this.match(HiveSqlParser.KW_USING);
            this.state = 3814;
            this.match(HiveSqlParser.StringLiteral);
            this.state = 3827;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 3815;
                this.match(HiveSqlParser.KW_AS);
                this.state = 3825;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 507, this.context) ) {
                case 1:
                    {
                    this.state = 3816;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 3819;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 506, this.context) ) {
                    case 1:
                        {
                        this.state = 3817;
                        this.aliasList();
                        }
                        break;
                    case 2:
                        {
                        this.state = 3818;
                        this.columnNameTypeList();
                        }
                        break;
                    }
                    this.state = 3821;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 3823;
                    this.aliasList();
                    }
                    break;
                case 3:
                    {
                    this.state = 3824;
                    this.columnNameTypeList();
                    }
                    break;
                }
                }
            }

            this.state = 3829;
            this.rowFormat();
            this.state = 3830;
            this.recordReader();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectExpression(): SelectExpressionContext {
        let localContext = new SelectExpressionContext(this.context, this.state);
        this.enterRule(localContext, 508, HiveSqlParser.RULE_selectExpression);
        try {
            this.state = 3834;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 509, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3832;
                this.tableAllColumns();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3833;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectExpressionList(): SelectExpressionListContext {
        let localContext = new SelectExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 510, HiveSqlParser.RULE_selectExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3836;
            this.selectExpression();
            this.state = 3841;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3837;
                this.match(HiveSqlParser.COMMA);
                this.state = 3838;
                this.selectExpression();
                }
                }
                this.state = 3843;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_clause(): Window_clauseContext {
        let localContext = new Window_clauseContext(this.context, this.state);
        this.enterRule(localContext, 512, HiveSqlParser.RULE_window_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3844;
            this.match(HiveSqlParser.KW_WINDOW);
            this.state = 3845;
            this.id_();
            this.state = 3846;
            this.match(HiveSqlParser.KW_AS);
            this.state = 3847;
            this.window_specification();
            this.state = 3855;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3848;
                this.match(HiveSqlParser.COMMA);
                this.state = 3849;
                this.id_();
                this.state = 3850;
                this.match(HiveSqlParser.KW_AS);
                this.state = 3851;
                this.window_specification();
                }
                }
                this.state = 3857;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_specification(): Window_specificationContext {
        let localContext = new Window_specificationContext(this.context, this.state);
        this.enterRule(localContext, 514, HiveSqlParser.RULE_window_specification);
        let _la: number;
        try {
            this.state = 3870;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3858;
                this.id_();
                }
                break;
            case HiveSqlParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3859;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3861;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 512, this.context) ) {
                case 1:
                    {
                    this.state = 3860;
                    this.id_();
                    }
                    break;
                }
                this.state = 3864;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 41 || _la === 97 || _la === 229 || _la === 237 || _la === 314) {
                    {
                    this.state = 3863;
                    this.partitioningSpec();
                    }
                }

                this.state = 3867;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 260 || _la === 292) {
                    {
                    this.state = 3866;
                    this.window_frame();
                    }
                }

                this.state = 3869;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame(): Window_frameContext {
        let localContext = new Window_frameContext(this.context, this.state);
        this.enterRule(localContext, 516, HiveSqlParser.RULE_window_frame);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3872;
            _la = this.tokenStream.LA(1);
            if(!(_la === 260 || _la === 292)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3886;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_CURRENT:
            case HiveSqlParser.KW_UNBOUNDED:
            case HiveSqlParser.Number:
                {
                this.state = 3879;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_UNBOUNDED:
                    {
                    {
                    this.state = 3873;
                    this.match(HiveSqlParser.KW_UNBOUNDED);
                    this.state = 3874;
                    this.match(HiveSqlParser.KW_PRECEDING);
                    }
                    }
                    break;
                case HiveSqlParser.KW_CURRENT:
                    {
                    {
                    this.state = 3875;
                    this.match(HiveSqlParser.KW_CURRENT);
                    this.state = 3876;
                    this.match(HiveSqlParser.KW_ROW);
                    }
                    }
                    break;
                case HiveSqlParser.Number:
                    {
                    {
                    this.state = 3877;
                    this.match(HiveSqlParser.Number);
                    this.state = 3878;
                    this.match(HiveSqlParser.KW_PRECEDING);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case HiveSqlParser.KW_BETWEEN:
                {
                this.state = 3881;
                this.match(HiveSqlParser.KW_BETWEEN);
                this.state = 3882;
                this.window_frame_boundary();
                this.state = 3883;
                this.match(HiveSqlParser.KW_AND);
                this.state = 3884;
                this.window_frame_boundary();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_frame_boundary(): Window_frame_boundaryContext {
        let localContext = new Window_frame_boundaryContext(this.context, this.state);
        this.enterRule(localContext, 518, HiveSqlParser.RULE_window_frame_boundary);
        let _la: number;
        try {
            this.state = 3892;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_UNBOUNDED:
            case HiveSqlParser.Number:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3888;
                _la = this.tokenStream.LA(1);
                if(!(_la === 354 || _la === 431)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3889;
                _la = this.tokenStream.LA(1);
                if(!(_la === 133 || _la === 247)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case HiveSqlParser.KW_CURRENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3890;
                this.match(HiveSqlParser.KW_CURRENT);
                this.state = 3891;
                this.match(HiveSqlParser.KW_ROW);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 520, HiveSqlParser.RULE_groupByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3894;
            this.match(HiveSqlParser.KW_GROUP);
            this.state = 3895;
            this.match(HiveSqlParser.KW_BY);
            this.state = 3901;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 519, this.context) ) {
            case 1:
                {
                this.state = 3896;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 3897;
                this.rollupStandard();
                }
                break;
            case 3:
                {
                this.state = 3898;
                this.rollupOldSyntax();
                }
                break;
            case 4:
                {
                {
                this.state = 3899;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3900;
                this.match(HiveSqlParser.RPAREN);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollupStandard(): RollupStandardContext {
        let localContext = new RollupStandardContext(this.context, this.state);
        this.enterRule(localContext, 522, HiveSqlParser.RULE_rollupStandard);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3905;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ROLLUP:
                {
                this.state = 3903;
                localContext._rollup = this.match(HiveSqlParser.KW_ROLLUP);
                }
                break;
            case HiveSqlParser.KW_CUBE:
                {
                this.state = 3904;
                localContext._cube = this.match(HiveSqlParser.KW_CUBE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3907;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3908;
            this.expression();
            this.state = 3913;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3909;
                this.match(HiveSqlParser.COMMA);
                this.state = 3910;
                this.expression();
                }
                }
                this.state = 3915;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3916;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollupOldSyntax(): RollupOldSyntaxContext {
        let localContext = new RollupOldSyntaxContext(this.context, this.state);
        this.enterRule(localContext, 524, HiveSqlParser.RULE_rollupOldSyntax);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3918;
            localContext._expr = this.expressionsNotInParenthesis();
            this.state = 3923;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 522, this.context) ) {
            case 1:
                {
                this.state = 3919;
                localContext._rollup = this.match(HiveSqlParser.KW_WITH);
                this.state = 3920;
                this.match(HiveSqlParser.KW_ROLLUP);
                }
                break;
            case 2:
                {
                this.state = 3921;
                localContext._cube = this.match(HiveSqlParser.KW_WITH);
                this.state = 3922;
                this.match(HiveSqlParser.KW_CUBE);
                }
                break;
            }
            this.state = 3938;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 145) {
                {
                this.state = 3925;
                localContext._sets = this.match(HiveSqlParser.KW_GROUPING);
                this.state = 3926;
                this.match(HiveSqlParser.KW_SETS);
                this.state = 3927;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3928;
                this.groupingSetExpression();
                this.state = 3933;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 3929;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3930;
                    this.groupingSetExpression();
                    }
                    }
                    this.state = 3935;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3936;
                this.match(HiveSqlParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSetExpression(): GroupingSetExpressionContext {
        let localContext = new GroupingSetExpressionContext(this.context, this.state);
        this.enterRule(localContext, 526, HiveSqlParser.RULE_groupingSetExpression);
        let _la: number;
        try {
            this.state = 3953;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 527, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3940;
                this.match(HiveSqlParser.LPAREN);
                this.state = 3942;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3755838846) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3315298239) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280869) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3976149863) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 2004783495) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4226874827) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & 2616949503) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & 3658431331) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & 989854189) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & 4260362175) !== 0) || ((((_la - 325)) & ~0x1F) === 0 && ((1 << (_la - 325)) & 1530590125) !== 0) || ((((_la - 357)) & ~0x1F) === 0 && ((1 << (_la - 357)) & 2549468921) !== 0) || ((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & 4294902847) !== 0) || ((((_la - 421)) & ~0x1F) === 0 && ((1 << (_la - 421)) & 7597) !== 0)) {
                    {
                    this.state = 3941;
                    this.expression();
                    }
                }

                this.state = 3948;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 3944;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3945;
                    this.expression();
                    }
                    }
                    this.state = 3950;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3951;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3952;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 528, HiveSqlParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3955;
            this.match(HiveSqlParser.KW_HAVING);
            this.state = 3956;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifyClause(): QualifyClauseContext {
        let localContext = new QualifyClauseContext(this.context, this.state);
        this.enterRule(localContext, 530, HiveSqlParser.RULE_qualifyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3958;
            this.match(HiveSqlParser.KW_QUALIFY);
            this.state = 3959;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionOrDefault(): ExpressionOrDefaultContext {
        let localContext = new ExpressionOrDefaultContext(this.context, this.state);
        this.enterRule(localContext, 532, HiveSqlParser.RULE_expressionOrDefault);
        try {
            this.state = 3963;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 528, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3961;
                this.match(HiveSqlParser.KW_DEFAULT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3962;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public firstExpressionsWithAlias(): FirstExpressionsWithAliasContext {
        let localContext = new FirstExpressionsWithAliasContext(this.context, this.state);
        this.enterRule(localContext, 534, HiveSqlParser.RULE_firstExpressionsWithAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3965;
            localContext._first = this.expression();
            this.state = 3967;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 17) {
                {
                this.state = 3966;
                this.match(HiveSqlParser.KW_AS);
                }
            }

            this.state = 3970;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394 || _la === 432) {
                {
                this.state = 3969;
                localContext._colAlias = this.id_();
                }
            }

            this.state = 3982;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 3972;
                this.match(HiveSqlParser.COMMA);
                this.state = 3973;
                this.expression();
                this.state = 3975;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 17) {
                    {
                    this.state = 3974;
                    this.match(HiveSqlParser.KW_AS);
                    }
                }

                this.state = 3978;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394 || _la === 432) {
                    {
                    this.state = 3977;
                    localContext._alias = this.id_();
                    }
                }

                }
                }
                this.state = 3984;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressions(): ExpressionsContext {
        let localContext = new ExpressionsContext(this.context, this.state);
        this.enterRule(localContext, 536, HiveSqlParser.RULE_expressions);
        try {
            this.state = 3987;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 534, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3985;
                this.expressionsInParenthesis();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3986;
                this.expressionsNotInParenthesis();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext {
        let localContext = new ExpressionsInParenthesisContext(this.context, this.state);
        this.enterRule(localContext, 538, HiveSqlParser.RULE_expressionsInParenthesis);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3989;
            this.match(HiveSqlParser.LPAREN);
            this.state = 3990;
            this.expressionsNotInParenthesis();
            this.state = 3991;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
        let localContext = new ExpressionsNotInParenthesisContext(this.context, this.state);
        this.enterRule(localContext, 540, HiveSqlParser.RULE_expressionsNotInParenthesis);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3993;
            localContext._first = this.expressionOrDefault();
            this.state = 4000;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 397) {
                {
                this.state = 3996;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3994;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 3995;
                    this.expressionOrDefault();
                    }
                    }
                    this.state = 3998;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 397);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderByClause(): OrderByClauseContext {
        let localContext = new OrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 542, HiveSqlParser.RULE_orderByClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4002;
            this.match(HiveSqlParser.KW_ORDER);
            this.state = 4003;
            this.match(HiveSqlParser.KW_BY);
            this.state = 4004;
            this.columnRefOrder();
            this.state = 4009;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 4005;
                this.match(HiveSqlParser.COMMA);
                this.state = 4006;
                this.columnRefOrder();
                }
                }
                this.state = 4011;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterByClause(): ClusterByClauseContext {
        let localContext = new ClusterByClauseContext(this.context, this.state);
        this.enterRule(localContext, 544, HiveSqlParser.RULE_clusterByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4012;
            this.match(HiveSqlParser.KW_CLUSTER);
            this.state = 4013;
            this.match(HiveSqlParser.KW_BY);
            this.state = 4014;
            this.expressions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distributeByClause(): DistributeByClauseContext {
        let localContext = new DistributeByClauseContext(this.context, this.state);
        this.enterRule(localContext, 546, HiveSqlParser.RULE_distributeByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4016;
            this.match(HiveSqlParser.KW_DISTRIBUTE);
            this.state = 4017;
            this.match(HiveSqlParser.KW_BY);
            this.state = 4018;
            this.expressions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortByClause(): SortByClauseContext {
        let localContext = new SortByClauseContext(this.context, this.state);
        this.enterRule(localContext, 548, HiveSqlParser.RULE_sortByClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4020;
            this.match(HiveSqlParser.KW_SORT);
            this.state = 4021;
            this.match(HiveSqlParser.KW_BY);
            this.state = 4041;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 540, this.context) ) {
            case 1:
                {
                {
                this.state = 4022;
                this.match(HiveSqlParser.LPAREN);
                this.state = 4023;
                this.columnRefOrder();
                this.state = 4028;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 4024;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 4025;
                    this.columnRefOrder();
                    }
                    }
                    this.state = 4030;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4031;
                this.match(HiveSqlParser.RPAREN);
                }
                }
                break;
            case 2:
                {
                {
                this.state = 4033;
                this.columnRefOrder();
                this.state = 4038;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 397) {
                    {
                    {
                    this.state = 4034;
                    this.match(HiveSqlParser.COMMA);
                    this.state = 4035;
                    this.columnRefOrder();
                    }
                    }
                    this.state = 4040;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_(): Function_Context {
        let localContext = new Function_Context(this.context, this.state);
        this.enterRule(localContext, 550, HiveSqlParser.RULE_function_);
        let _la: number;
        try {
            this.state = 4096;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 549, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4043;
                this.match(HiveSqlParser.KW_TRIM);
                this.state = 4044;
                this.match(HiveSqlParser.LPAREN);
                this.state = 4048;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_LEADING:
                    {
                    this.state = 4045;
                    localContext._leading = this.match(HiveSqlParser.KW_LEADING);
                    }
                    break;
                case HiveSqlParser.KW_TRAILING:
                    {
                    this.state = 4046;
                    localContext._trailing = this.match(HiveSqlParser.KW_TRAILING);
                    }
                    break;
                case HiveSqlParser.KW_BOTH:
                    {
                    this.state = 4047;
                    this.match(HiveSqlParser.KW_BOTH);
                    }
                    break;
                case HiveSqlParser.KW_ABORT:
                case HiveSqlParser.KW_ACTIVATE:
                case HiveSqlParser.KW_ACTIVE:
                case HiveSqlParser.KW_ADD:
                case HiveSqlParser.KW_ADMIN:
                case HiveSqlParser.KW_AFTER:
                case HiveSqlParser.KW_ALLOC_FRACTION:
                case HiveSqlParser.KW_ANALYZE:
                case HiveSqlParser.KW_AND:
                case HiveSqlParser.KW_ARCHIVE:
                case HiveSqlParser.KW_ARRAY:
                case HiveSqlParser.KW_ASC:
                case HiveSqlParser.KW_AST:
                case HiveSqlParser.KW_AT:
                case HiveSqlParser.KW_AUTOCOMMIT:
                case HiveSqlParser.KW_BATCH:
                case HiveSqlParser.KW_BEFORE:
                case HiveSqlParser.KW_BETWEEN:
                case HiveSqlParser.KW_BIGINT:
                case HiveSqlParser.KW_BINARY:
                case HiveSqlParser.KW_BOOLEAN:
                case HiveSqlParser.KW_BUCKET:
                case HiveSqlParser.KW_BUCKETS:
                case HiveSqlParser.KW_CACHE:
                case HiveSqlParser.KW_CASCADE:
                case HiveSqlParser.KW_CASE:
                case HiveSqlParser.KW_CAST:
                case HiveSqlParser.KW_CBO:
                case HiveSqlParser.KW_CHANGE:
                case HiveSqlParser.KW_CHECK:
                case HiveSqlParser.KW_CLUSTER:
                case HiveSqlParser.KW_CLUSTERED:
                case HiveSqlParser.KW_CLUSTERSTATUS:
                case HiveSqlParser.KW_COLLECTION:
                case HiveSqlParser.KW_COLUMNS:
                case HiveSqlParser.KW_COMMENT:
                case HiveSqlParser.KW_COMPACT:
                case HiveSqlParser.KW_COMPACTIONS:
                case HiveSqlParser.KW_COMPUTE:
                case HiveSqlParser.KW_CONCATENATE:
                case HiveSqlParser.KW_CONTINUE:
                case HiveSqlParser.KW_COST:
                case HiveSqlParser.KW_CRON:
                case HiveSqlParser.KW_CURRENT_DATE:
                case HiveSqlParser.KW_CURRENT_TIMESTAMP:
                case HiveSqlParser.KW_DATA:
                case HiveSqlParser.KW_DATABASES:
                case HiveSqlParser.KW_DATE:
                case HiveSqlParser.KW_DATETIME:
                case HiveSqlParser.KW_DAY:
                case HiveSqlParser.KW_DAYS:
                case HiveSqlParser.KW_DAYOFWEEK:
                case HiveSqlParser.KW_DBPROPERTIES:
                case HiveSqlParser.KW_DCPROPERTIES:
                case HiveSqlParser.KW_DEBUG:
                case HiveSqlParser.KW_DEFAULT:
                case HiveSqlParser.KW_DEFERRED:
                case HiveSqlParser.KW_DEFINED:
                case HiveSqlParser.KW_DELIMITED:
                case HiveSqlParser.KW_DEPENDENCY:
                case HiveSqlParser.KW_DESC:
                case HiveSqlParser.KW_DETAIL:
                case HiveSqlParser.KW_DIRECTORIES:
                case HiveSqlParser.KW_DIRECTORY:
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                case HiveSqlParser.KW_DISTRIBUTE:
                case HiveSqlParser.KW_DISTRIBUTED:
                case HiveSqlParser.KW_DO:
                case HiveSqlParser.KW_DOUBLE:
                case HiveSqlParser.KW_DUMP:
                case HiveSqlParser.KW_ELEM_TYPE:
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                case HiveSqlParser.KW_ENFORCED:
                case HiveSqlParser.KW_ESCAPED:
                case HiveSqlParser.KW_EVERY:
                case HiveSqlParser.KW_EXCLUSIVE:
                case HiveSqlParser.KW_EXECUTE:
                case HiveSqlParser.KW_EXECUTED:
                case HiveSqlParser.KW_EXISTS:
                case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
                case HiveSqlParser.KW_EXPLAIN:
                case HiveSqlParser.KW_EXPORT:
                case HiveSqlParser.KW_EXPRESSION:
                case HiveSqlParser.KW_EXTRACT:
                case HiveSqlParser.KW_FALSE:
                case HiveSqlParser.KW_FIELDS:
                case HiveSqlParser.KW_FILE:
                case HiveSqlParser.KW_FILEFORMAT:
                case HiveSqlParser.KW_FIRST:
                case HiveSqlParser.KW_FLOAT:
                case HiveSqlParser.KW_FLOOR:
                case HiveSqlParser.KW_FORMAT:
                case HiveSqlParser.KW_FORMATTED:
                case HiveSqlParser.KW_FROM:
                case HiveSqlParser.KW_FUNCTIONS:
                case HiveSqlParser.KW_GROUPING:
                case HiveSqlParser.KW_HOLD_DDLTIME:
                case HiveSqlParser.KW_HOUR:
                case HiveSqlParser.KW_HOURS:
                case HiveSqlParser.KW_IDXPROPERTIES:
                case HiveSqlParser.KW_IF:
                case HiveSqlParser.KW_IGNORE:
                case HiveSqlParser.KW_IN:
                case HiveSqlParser.KW_INDEX:
                case HiveSqlParser.KW_INDEXES:
                case HiveSqlParser.KW_INPATH:
                case HiveSqlParser.KW_INPUTDRIVER:
                case HiveSqlParser.KW_INPUTFORMAT:
                case HiveSqlParser.KW_INT:
                case HiveSqlParser.KW_INTEGER:
                case HiveSqlParser.KW_INTERVAL:
                case HiveSqlParser.KW_ISOLATION:
                case HiveSqlParser.KW_ITEMS:
                case HiveSqlParser.KW_JAR:
                case HiveSqlParser.KW_JOINCOST:
                case HiveSqlParser.KW_KEY:
                case HiveSqlParser.KW_KEYS:
                case HiveSqlParser.KW_KEY_TYPE:
                case HiveSqlParser.KW_KILL:
                case HiveSqlParser.KW_LAST:
                case HiveSqlParser.KW_LEVEL:
                case HiveSqlParser.KW_LIFECYCLE:
                case HiveSqlParser.KW_LIKE:
                case HiveSqlParser.KW_LIMIT:
                case HiveSqlParser.KW_LINES:
                case HiveSqlParser.KW_LOAD:
                case HiveSqlParser.KW_LOCATION:
                case HiveSqlParser.KW_LOCK:
                case HiveSqlParser.KW_LOCKS:
                case HiveSqlParser.KW_LOGICAL:
                case HiveSqlParser.KW_LONG:
                case HiveSqlParser.KW_MANAGED:
                case HiveSqlParser.KW_MANAGEDLOCATION:
                case HiveSqlParser.KW_MANAGEMENT:
                case HiveSqlParser.KW_MAP:
                case HiveSqlParser.KW_MAPJOIN:
                case HiveSqlParser.KW_MAPPING:
                case HiveSqlParser.KW_MATCHED:
                case HiveSqlParser.KW_MATERIALIZED:
                case HiveSqlParser.KW_METADATA:
                case HiveSqlParser.KW_MINUTE:
                case HiveSqlParser.KW_MINUTES:
                case HiveSqlParser.KW_MONTH:
                case HiveSqlParser.KW_MONTHS:
                case HiveSqlParser.KW_MOVE:
                case HiveSqlParser.KW_MSCK:
                case HiveSqlParser.KW_NORELY:
                case HiveSqlParser.KW_NOSCAN:
                case HiveSqlParser.KW_NOT:
                case HiveSqlParser.KW_NOVALIDATE:
                case HiveSqlParser.KW_NO_DROP:
                case HiveSqlParser.KW_NULL:
                case HiveSqlParser.KW_NULLS:
                case HiveSqlParser.KW_OFFLINE:
                case HiveSqlParser.KW_OFFSET:
                case HiveSqlParser.KW_OPERATOR:
                case HiveSqlParser.KW_OPTION:
                case HiveSqlParser.KW_OR:
                case HiveSqlParser.KW_OUTPUTDRIVER:
                case HiveSqlParser.KW_OUTPUTFORMAT:
                case HiveSqlParser.KW_OVERWRITE:
                case HiveSqlParser.KW_OWNER:
                case HiveSqlParser.KW_PARTITIONED:
                case HiveSqlParser.KW_PARTITIONS:
                case HiveSqlParser.KW_PATH:
                case HiveSqlParser.KW_PLAN:
                case HiveSqlParser.KW_PLANS:
                case HiveSqlParser.KW_PLUS:
                case HiveSqlParser.KW_POOL:
                case HiveSqlParser.KW_PRINCIPALS:
                case HiveSqlParser.KW_PROTECTION:
                case HiveSqlParser.KW_PURGE:
                case HiveSqlParser.KW_QUARTER:
                case HiveSqlParser.KW_QUERY:
                case HiveSqlParser.KW_QUERY_PARALLELISM:
                case HiveSqlParser.KW_READ:
                case HiveSqlParser.KW_READONLY:
                case HiveSqlParser.KW_REAL:
                case HiveSqlParser.KW_REBUILD:
                case HiveSqlParser.KW_RECORDREADER:
                case HiveSqlParser.KW_RECORDWRITER:
                case HiveSqlParser.KW_REGEXP:
                case HiveSqlParser.KW_RELOAD:
                case HiveSqlParser.KW_RELY:
                case HiveSqlParser.KW_REMOTE:
                case HiveSqlParser.KW_RENAME:
                case HiveSqlParser.KW_REOPTIMIZATION:
                case HiveSqlParser.KW_REPAIR:
                case HiveSqlParser.KW_REPL:
                case HiveSqlParser.KW_REPLACE:
                case HiveSqlParser.KW_REPLICATION:
                case HiveSqlParser.KW_RESOURCE:
                case HiveSqlParser.KW_RESPECT:
                case HiveSqlParser.KW_RESTRICT:
                case HiveSqlParser.KW_REWRITE:
                case HiveSqlParser.KW_RLIKE:
                case HiveSqlParser.KW_ROLE:
                case HiveSqlParser.KW_ROLES:
                case HiveSqlParser.KW_SCHEDULED:
                case HiveSqlParser.KW_SCHEDULING_POLICY:
                case HiveSqlParser.KW_SCHEMA:
                case HiveSqlParser.KW_SCHEMAS:
                case HiveSqlParser.KW_SECOND:
                case HiveSqlParser.KW_SECONDS:
                case HiveSqlParser.KW_SEMI:
                case HiveSqlParser.KW_SERDE:
                case HiveSqlParser.KW_SERDEPROPERTIES:
                case HiveSqlParser.KW_SERVER:
                case HiveSqlParser.KW_SETS:
                case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
                case HiveSqlParser.KW_SHARED:
                case HiveSqlParser.KW_SHOW:
                case HiveSqlParser.KW_SHOW_DATABASE:
                case HiveSqlParser.KW_SKEWED:
                case HiveSqlParser.KW_SMALLINT:
                case HiveSqlParser.KW_SNAPSHOT:
                case HiveSqlParser.KW_SORT:
                case HiveSqlParser.KW_SORTED:
                case HiveSqlParser.KW_SPEC:
                case HiveSqlParser.KW_SSL:
                case HiveSqlParser.KW_STATISTICS:
                case HiveSqlParser.KW_STATUS:
                case HiveSqlParser.KW_STORED:
                case HiveSqlParser.KW_STREAMTABLE:
                case HiveSqlParser.KW_STRING:
                case HiveSqlParser.KW_STRUCT:
                case HiveSqlParser.KW_SUMMARY:
                case HiveSqlParser.KW_SYSTEM_TIME:
                case HiveSqlParser.KW_SYSTEM_VERSION:
                case HiveSqlParser.KW_TABLES:
                case HiveSqlParser.KW_TBLPROPERTIES:
                case HiveSqlParser.KW_TEMPORARY:
                case HiveSqlParser.KW_TERMINATED:
                case HiveSqlParser.KW_TIMESTAMP:
                case HiveSqlParser.KW_TIMESTAMPLOCALTZ:
                case HiveSqlParser.KW_TIMESTAMPTZ:
                case HiveSqlParser.KW_TINYINT:
                case HiveSqlParser.KW_TOUCH:
                case HiveSqlParser.KW_TRANSACTION:
                case HiveSqlParser.KW_TRANSACTIONAL:
                case HiveSqlParser.KW_TRANSACTIONS:
                case HiveSqlParser.KW_TRIM:
                case HiveSqlParser.KW_TRUE:
                case HiveSqlParser.KW_TYPE:
                case HiveSqlParser.KW_UNARCHIVE:
                case HiveSqlParser.KW_UNDO:
                case HiveSqlParser.KW_UNIONTYPE:
                case HiveSqlParser.KW_UNKNOWN:
                case HiveSqlParser.KW_UNLOCK:
                case HiveSqlParser.KW_UNMANAGED:
                case HiveSqlParser.KW_UNSET:
                case HiveSqlParser.KW_UNSIGNED:
                case HiveSqlParser.KW_URI:
                case HiveSqlParser.KW_URL:
                case HiveSqlParser.KW_USE:
                case HiveSqlParser.KW_UTC:
                case HiveSqlParser.KW_UTCTIMESTAMP:
                case HiveSqlParser.KW_VALIDATE:
                case HiveSqlParser.KW_VALUE_TYPE:
                case HiveSqlParser.KW_VECTORIZATION:
                case HiveSqlParser.KW_VIEW:
                case HiveSqlParser.KW_VIEWS:
                case HiveSqlParser.KW_WAIT:
                case HiveSqlParser.KW_WEEK:
                case HiveSqlParser.KW_WEEKS:
                case HiveSqlParser.KW_WHEN:
                case HiveSqlParser.KW_WHILE:
                case HiveSqlParser.KW_WITHIN:
                case HiveSqlParser.KW_WORK:
                case HiveSqlParser.KW_WORKLOAD:
                case HiveSqlParser.KW_WRITE:
                case HiveSqlParser.KW_YEAR:
                case HiveSqlParser.KW_YEARS:
                case HiveSqlParser.KW_ZONE:
                case HiveSqlParser.LPAREN:
                case HiveSqlParser.EQUAL:
                case HiveSqlParser.EQUAL_NS:
                case HiveSqlParser.NOTEQUAL:
                case HiveSqlParser.LESSTHANOREQUALTO:
                case HiveSqlParser.LESSTHAN:
                case HiveSqlParser.GREATERTHANOREQUALTO:
                case HiveSqlParser.GREATERTHAN:
                case HiveSqlParser.DIVIDE:
                case HiveSqlParser.PLUS:
                case HiveSqlParser.MINUS:
                case HiveSqlParser.STAR:
                case HiveSqlParser.MOD:
                case HiveSqlParser.DIV:
                case HiveSqlParser.BITWISENOT:
                case HiveSqlParser.AMPERSAND:
                case HiveSqlParser.TILDE:
                case HiveSqlParser.BITWISEOR:
                case HiveSqlParser.BITWISEXOR:
                case HiveSqlParser.QUESTION:
                case HiveSqlParser.StringLiteral:
                case HiveSqlParser.IntegralLiteral:
                case HiveSqlParser.NumberLiteral:
                case HiveSqlParser.Number:
                case HiveSqlParser.Identifier:
                case HiveSqlParser.CharSetName:
                    break;
                default:
                    break;
                }
                this.state = 4051;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3755838846) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3315298239) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280869) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3976149863) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 2004783495) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4226874827) !== 0) || ((((_la - 195)) & ~0x1F) === 0 && ((1 << (_la - 195)) & 2616949503) !== 0) || ((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & 3658431331) !== 0) || ((((_la - 259)) & ~0x1F) === 0 && ((1 << (_la - 259)) & 989854189) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & 4260362175) !== 0) || ((((_la - 325)) & ~0x1F) === 0 && ((1 << (_la - 325)) & 1530590125) !== 0) || ((((_la - 357)) & ~0x1F) === 0 && ((1 << (_la - 357)) & 2549468921) !== 0) || ((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & 4294902847) !== 0) || ((((_la - 421)) & ~0x1F) === 0 && ((1 << (_la - 421)) & 7597) !== 0)) {
                    {
                    this.state = 4050;
                    localContext._trim_characters = this.selectExpression();
                    }
                }

                this.state = 4053;
                this.match(HiveSqlParser.KW_FROM);
                this.state = 4054;
                localContext._str = this.selectExpression();
                this.state = 4055;
                this.match(HiveSqlParser.RPAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4057;
                this.functionNameForInvoke();
                this.state = 4058;
                this.match(HiveSqlParser.LPAREN);
                this.state = 4073;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 546, this.context) ) {
                case 1:
                    {
                    this.state = 4059;
                    localContext._star = this.match(HiveSqlParser.STAR);
                    }
                    break;
                case 2:
                    {
                    this.state = 4061;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 7 || _la === 96) {
                        {
                        this.state = 4060;
                        localContext._dist = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 7 || _la === 96)) {
                            localContext._dist = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 4071;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 545, this.context) ) {
                    case 1:
                        {
                        this.state = 4063;
                        this.selectExpression();
                        this.state = 4068;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 397) {
                            {
                            {
                            this.state = 4064;
                            this.match(HiveSqlParser.COMMA);
                            this.state = 4065;
                            this.selectExpression();
                            }
                            }
                            this.state = 4070;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                        break;
                    }
                    }
                    break;
                }
                this.state = 4094;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 548, this.context) ) {
                case 1:
                    {
                    this.state = 4075;
                    this.match(HiveSqlParser.RPAREN);
                    this.state = 4076;
                    localContext._within = this.match(HiveSqlParser.KW_WITHIN);
                    this.state = 4077;
                    this.match(HiveSqlParser.KW_GROUP);
                    this.state = 4078;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 4079;
                    localContext._ordBy = this.orderByClause();
                    this.state = 4080;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 4082;
                    this.match(HiveSqlParser.RPAREN);
                    this.state = 4084;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 152 || _la === 281) {
                        {
                        this.state = 4083;
                        localContext._nt = this.null_treatment();
                        }
                    }

                    this.state = 4086;
                    this.match(HiveSqlParser.KW_OVER);
                    this.state = 4087;
                    localContext._ws = this.window_specification();
                    }
                    break;
                case 3:
                    {
                    this.state = 4088;
                    localContext._nt = this.null_treatment();
                    this.state = 4089;
                    this.match(HiveSqlParser.RPAREN);
                    this.state = 4090;
                    this.match(HiveSqlParser.KW_OVER);
                    this.state = 4091;
                    localContext._ws = this.window_specification();
                    }
                    break;
                case 4:
                    {
                    this.state = 4093;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public null_treatment(): Null_treatmentContext {
        let localContext = new Null_treatmentContext(this.context, this.state);
        this.enterRule(localContext, 552, HiveSqlParser.RULE_null_treatment);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4098;
            _la = this.tokenStream.LA(1);
            if(!(_la === 152 || _la === 281)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4099;
            this.match(HiveSqlParser.KW_NULLS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        let localContext = new FunctionNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 554, HiveSqlParser.RULE_functionNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4101;
            this.functionIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameForDDL(): FunctionNameForDDLContext {
        let localContext = new FunctionNameForDDLContext(this.context, this.state);
        this.enterRule(localContext, 556, HiveSqlParser.RULE_functionNameForDDL);
        try {
            this.state = 4105;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4103;
                this.functionIdentifier();
                }
                break;
            case HiveSqlParser.StringLiteral:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4104;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameForInvoke(): FunctionNameForInvokeContext {
        let localContext = new FunctionNameForInvokeContext(this.context, this.state);
        this.enterRule(localContext, 558, HiveSqlParser.RULE_functionNameForInvoke);
        try {
            this.state = 4110;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 551, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4107;
                this.functionIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4108;
                this.sql11ReservedKeywordsUsedAsFunctionName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4109;
                this.sysFuncNames();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public castExpression(): CastExpressionContext {
        let localContext = new CastExpressionContext(this.context, this.state);
        this.enterRule(localContext, 560, HiveSqlParser.RULE_castExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4112;
            this.match(HiveSqlParser.KW_CAST);
            this.state = 4113;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4114;
            this.expression();
            this.state = 4115;
            this.match(HiveSqlParser.KW_AS);
            this.state = 4116;
            localContext._toType = this.primitiveType();
            this.state = 4119;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 137) {
                {
                this.state = 4117;
                localContext._fmt = this.match(HiveSqlParser.KW_FORMAT);
                this.state = 4118;
                this.match(HiveSqlParser.StringLiteral);
                }
            }

            this.state = 4121;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseExpression(): CaseExpressionContext {
        let localContext = new CaseExpressionContext(this.context, this.state);
        this.enterRule(localContext, 562, HiveSqlParser.RULE_caseExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4123;
            this.match(HiveSqlParser.KW_CASE);
            this.state = 4124;
            this.expression();
            this.state = 4130;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4125;
                this.match(HiveSqlParser.KW_WHEN);
                this.state = 4126;
                this.expression();
                this.state = 4127;
                this.match(HiveSqlParser.KW_THEN);
                this.state = 4128;
                this.expression();
                }
                }
                this.state = 4132;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 383);
            this.state = 4136;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 4134;
                this.match(HiveSqlParser.KW_ELSE);
                this.state = 4135;
                this.expression();
                }
            }

            this.state = 4138;
            this.match(HiveSqlParser.KW_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenExpression(): WhenExpressionContext {
        let localContext = new WhenExpressionContext(this.context, this.state);
        this.enterRule(localContext, 564, HiveSqlParser.RULE_whenExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4140;
            this.match(HiveSqlParser.KW_CASE);
            this.state = 4146;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 4141;
                this.match(HiveSqlParser.KW_WHEN);
                this.state = 4142;
                this.expression();
                this.state = 4143;
                this.match(HiveSqlParser.KW_THEN);
                this.state = 4144;
                this.expression();
                }
                }
                this.state = 4148;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 383);
            this.state = 4152;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 4150;
                this.match(HiveSqlParser.KW_ELSE);
                this.state = 4151;
                this.expression();
                }
            }

            this.state = 4154;
            this.match(HiveSqlParser.KW_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public floorExpression(): FloorExpressionContext {
        let localContext = new FloorExpressionContext(this.context, this.state);
        this.enterRule(localContext, 566, HiveSqlParser.RULE_floorExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4156;
            this.match(HiveSqlParser.KW_FLOOR);
            this.state = 4157;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4158;
            this.expression();
            this.state = 4161;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 341) {
                {
                this.state = 4159;
                this.match(HiveSqlParser.KW_TO);
                this.state = 4160;
                localContext._floorUnit = this.timeQualifiers();
                }
            }

            this.state = 4163;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extractExpression(): ExtractExpressionContext {
        let localContext = new ExtractExpressionContext(this.context, this.state);
        this.enterRule(localContext, 568, HiveSqlParser.RULE_extractExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4165;
            this.match(HiveSqlParser.KW_EXTRACT);
            this.state = 4166;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4167;
            localContext._timeUnit = this.timeQualifiers();
            this.state = 4168;
            this.match(HiveSqlParser.KW_FROM);
            this.state = 4169;
            this.expression();
            this.state = 4170;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeQualifiers(): TimeQualifiersContext {
        let localContext = new TimeQualifiersContext(this.context, this.state);
        this.enterRule(localContext, 570, HiveSqlParser.RULE_timeQualifiers);
        try {
            this.state = 4180;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4172;
                this.year();
                }
                break;
            case HiveSqlParser.KW_QUARTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4173;
                this.match(HiveSqlParser.KW_QUARTER);
                }
                break;
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4174;
                this.month();
                }
                break;
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4175;
                this.week();
                }
                break;
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4176;
                this.day();
                }
                break;
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4177;
                this.hour();
                }
                break;
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4178;
                this.minute();
                }
                break;
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4179;
                this.second();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constant(): ConstantContext {
        let localContext = new ConstantContext(this.context, this.state);
        this.enterRule(localContext, 572, HiveSqlParser.RULE_constant);
        let _la: number;
        try {
            this.state = 4210;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 560, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4182;
                localContext._value = this.intervalValue();
                this.state = 4183;
                localContext._qualifiers = this.intervalQualifiers();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4185;
                this.match(HiveSqlParser.Number);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4186;
                this.match(HiveSqlParser.KW_DATE);
                this.state = 4187;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4188;
                this.match(HiveSqlParser.KW_CURRENT_DATE);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4189;
                this.match(HiveSqlParser.KW_TIMESTAMP);
                this.state = 4190;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4191;
                this.match(HiveSqlParser.KW_CURRENT_TIMESTAMP);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4192;
                this.match(HiveSqlParser.KW_TIMESTAMPLOCALTZ);
                this.state = 4193;
                this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4194;
                this.match(HiveSqlParser.StringLiteral);
                this.state = 4198;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 426) {
                    {
                    {
                    this.state = 4195;
                    this.match(HiveSqlParser.StringLiteral);
                    }
                    }
                    this.state = 4200;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4201;
                this.match(HiveSqlParser.IntegralLiteral);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4202;
                this.match(HiveSqlParser.NumberLiteral);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4203;
                localContext._csName = this.match(HiveSqlParser.CharSetName);
                this.state = 4204;
                localContext._csLiteral = this.match(HiveSqlParser.CharSetLiteral);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4205;
                this.match(HiveSqlParser.KW_TRUE);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4206;
                this.match(HiveSqlParser.KW_FALSE);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 4207;
                this.match(HiveSqlParser.KW_NULL);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 4208;
                localContext._p = this.match(HiveSqlParser.QUESTION);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 4209;
                this.match(HiveSqlParser.Identifier);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalValue(): IntervalValueContext {
        let localContext = new IntervalValueContext(this.context, this.state);
        this.enterRule(localContext, 574, HiveSqlParser.RULE_intervalValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4212;
            _la = this.tokenStream.LA(1);
            if(!(_la === 426 || _la === 431)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalExpression(): IntervalExpressionContext {
        let localContext = new IntervalExpressionContext(this.context, this.state);
        this.enterRule(localContext, 576, HiveSqlParser.RULE_intervalExpression);
        try {
            this.state = 4229;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.LPAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4214;
                this.match(HiveSqlParser.LPAREN);
                this.state = 4215;
                localContext._value = this.intervalValue();
                this.state = 4216;
                this.match(HiveSqlParser.RPAREN);
                this.state = 4217;
                localContext._qualifiers = this.intervalQualifiers();
                }
                break;
            case HiveSqlParser.KW_INTERVAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4219;
                this.match(HiveSqlParser.KW_INTERVAL);
                this.state = 4225;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.StringLiteral:
                case HiveSqlParser.Number:
                    {
                    this.state = 4220;
                    localContext._value = this.intervalValue();
                    }
                    break;
                case HiveSqlParser.LPAREN:
                    {
                    this.state = 4221;
                    this.match(HiveSqlParser.LPAREN);
                    this.state = 4222;
                    localContext._expr = this.expression();
                    this.state = 4223;
                    this.match(HiveSqlParser.RPAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4227;
                localContext._qualifiers = this.intervalQualifiers();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalQualifiers(): IntervalQualifiersContext {
        let localContext = new IntervalQualifiersContext(this.context, this.state);
        this.enterRule(localContext, 578, HiveSqlParser.RULE_intervalQualifiers);
        try {
            this.state = 4245;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 563, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4231;
                this.year();
                this.state = 4232;
                this.match(HiveSqlParser.KW_TO);
                this.state = 4233;
                this.month();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4235;
                this.day();
                this.state = 4236;
                this.match(HiveSqlParser.KW_TO);
                this.state = 4237;
                this.second();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4239;
                this.year();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4240;
                this.month();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4241;
                this.day();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4242;
                this.hour();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4243;
                this.minute();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4244;
                this.second();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 580, HiveSqlParser.RULE_expression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4247;
            this.precedenceAndExpression();
            this.state = 4252;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 228) {
                {
                {
                this.state = 4248;
                this.match(HiveSqlParser.KW_OR);
                this.state = 4249;
                this.precedenceAndExpression();
                }
                }
                this.state = 4254;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomExpression(): AtomExpressionContext {
        let localContext = new AtomExpressionContext(this.context, this.state);
        this.enterRule(localContext, 582, HiveSqlParser.RULE_atomExpression);
        try {
            this.state = 4266;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 565, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4255;
                this.constant();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4256;
                this.intervalExpression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4257;
                this.castExpression();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4258;
                this.extractExpression();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4259;
                this.floorExpression();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4260;
                this.caseExpression();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4261;
                this.whenExpression();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4262;
                this.subQueryExpression();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4263;
                this.function_();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4264;
                this.expressionsInParenthesis();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4265;
                this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceUnaryPrefixExpression(): PrecedenceUnaryPrefixExpressionContext {
        let localContext = new PrecedenceUnaryPrefixExpressionContext(this.context, this.state);
        this.enterRule(localContext, 584, HiveSqlParser.RULE_precedenceUnaryPrefixExpression);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4271;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 566, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4268;
                    _la = this.tokenStream.LA(1);
                    if(!(((((_la - 413)) & ~0x1F) === 0 && ((1 << (_la - 413)) & 163) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    }
                }
                this.state = 4273;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 566, this.context);
            }
            this.state = 4274;
            this.atomExpression();
            this.state = 4283;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 395 || _la === 401) {
                {
                this.state = 4281;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.LSQUARE:
                    {
                    this.state = 4275;
                    this.match(HiveSqlParser.LSQUARE);
                    this.state = 4276;
                    this.expression();
                    this.state = 4277;
                    this.match(HiveSqlParser.RSQUARE);
                    }
                    break;
                case HiveSqlParser.DOT:
                    {
                    this.state = 4279;
                    this.match(HiveSqlParser.DOT);
                    this.state = 4280;
                    this.id_();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 4285;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceBitwiseXorExpression(): PrecedenceBitwiseXorExpressionContext {
        let localContext = new PrecedenceBitwiseXorExpressionContext(this.context, this.state);
        this.enterRule(localContext, 586, HiveSqlParser.RULE_precedenceBitwiseXorExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4286;
            this.precedenceUnaryPrefixExpression();
            this.state = 4291;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 423) {
                {
                {
                this.state = 4287;
                this.match(HiveSqlParser.BITWISEXOR);
                this.state = 4288;
                this.precedenceUnaryPrefixExpression();
                }
                }
                this.state = 4293;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceStarExpression(): PrecedenceStarExpressionContext {
        let localContext = new PrecedenceStarExpressionContext(this.context, this.state);
        this.enterRule(localContext, 588, HiveSqlParser.RULE_precedenceStarExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4294;
            this.precedenceBitwiseXorExpression();
            this.state = 4299;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 412)) & ~0x1F) === 0 && ((1 << (_la - 412)) & 57) !== 0)) {
                {
                {
                this.state = 4295;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 412)) & ~0x1F) === 0 && ((1 << (_la - 412)) & 57) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4296;
                this.precedenceBitwiseXorExpression();
                }
                }
                this.state = 4301;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedencePlusExpression(): PrecedencePlusExpressionContext {
        let localContext = new PrecedencePlusExpressionContext(this.context, this.state);
        this.enterRule(localContext, 590, HiveSqlParser.RULE_precedencePlusExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4302;
            this.precedenceStarExpression();
            this.state = 4307;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 413 || _la === 414) {
                {
                {
                this.state = 4303;
                _la = this.tokenStream.LA(1);
                if(!(_la === 413 || _la === 414)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4304;
                this.precedenceStarExpression();
                }
                }
                this.state = 4309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceConcatenateExpression(): PrecedenceConcatenateExpressionContext {
        let localContext = new PrecedenceConcatenateExpressionContext(this.context, this.state);
        this.enterRule(localContext, 592, HiveSqlParser.RULE_precedenceConcatenateExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4310;
            this.precedencePlusExpression();
            this.state = 4315;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 422) {
                {
                {
                this.state = 4311;
                this.match(HiveSqlParser.CONCATENATE);
                this.state = 4312;
                localContext._plus = this.precedencePlusExpression();
                }
                }
                this.state = 4317;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceAmpersandExpression(): PrecedenceAmpersandExpressionContext {
        let localContext = new PrecedenceAmpersandExpressionContext(this.context, this.state);
        this.enterRule(localContext, 594, HiveSqlParser.RULE_precedenceAmpersandExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4318;
            this.precedenceConcatenateExpression();
            this.state = 4323;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 419) {
                {
                {
                this.state = 4319;
                this.match(HiveSqlParser.AMPERSAND);
                this.state = 4320;
                this.precedenceConcatenateExpression();
                }
                }
                this.state = 4325;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext {
        let localContext = new PrecedenceBitwiseOrExpressionContext(this.context, this.state);
        this.enterRule(localContext, 596, HiveSqlParser.RULE_precedenceBitwiseOrExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4326;
            this.precedenceAmpersandExpression();
            this.state = 4331;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 421) {
                {
                {
                this.state = 4327;
                this.match(HiveSqlParser.BITWISEOR);
                this.state = 4328;
                this.precedenceAmpersandExpression();
                }
                }
                this.state = 4333;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarOperator(): PrecedenceSimilarOperatorContext {
        let localContext = new PrecedenceSimilarOperatorContext(this.context, this.state);
        this.enterRule(localContext, 598, HiveSqlParser.RULE_precedenceSimilarOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4334;
            _la = this.tokenStream.LA(1);
            if(!(_la === 184 || _la === 270 || _la === 286 || ((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subQueryExpression(): SubQueryExpressionContext {
        let localContext = new SubQueryExpressionContext(this.context, this.state);
        this.enterRule(localContext, 600, HiveSqlParser.RULE_subQueryExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4336;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4337;
            this.selectStatement();
            this.state = 4338;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpression(): PrecedenceSimilarExpressionContext {
        let localContext = new PrecedenceSimilarExpressionContext(this.context, this.state);
        this.enterRule(localContext, 602, HiveSqlParser.RULE_precedenceSimilarExpression);
        try {
            this.state = 4346;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_AND:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ARRAY:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BETWEEN:
            case HiveSqlParser.KW_BIGINT:
            case HiveSqlParser.KW_BINARY:
            case HiveSqlParser.KW_BOOLEAN:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CASE:
            case HiveSqlParser.KW_CAST:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_CURRENT_DATE:
            case HiveSqlParser.KW_CURRENT_TIMESTAMP:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATE:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DOUBLE:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_EXTRACT:
            case HiveSqlParser.KW_FALSE:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FLOAT:
            case HiveSqlParser.KW_FLOOR:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_GROUPING:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IF:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_IN:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_INT:
            case HiveSqlParser.KW_INTEGER:
            case HiveSqlParser.KW_INTERVAL:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIKE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAP:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOT:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULL:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OR:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REAL:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_REGEXP:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_RLIKE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SMALLINT:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMP:
            case HiveSqlParser.KW_TIMESTAMPLOCALTZ:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TRUE:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHEN:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.LPAREN:
            case HiveSqlParser.EQUAL:
            case HiveSqlParser.EQUAL_NS:
            case HiveSqlParser.NOTEQUAL:
            case HiveSqlParser.LESSTHANOREQUALTO:
            case HiveSqlParser.LESSTHAN:
            case HiveSqlParser.GREATERTHANOREQUALTO:
            case HiveSqlParser.GREATERTHAN:
            case HiveSqlParser.DIVIDE:
            case HiveSqlParser.PLUS:
            case HiveSqlParser.MINUS:
            case HiveSqlParser.STAR:
            case HiveSqlParser.MOD:
            case HiveSqlParser.DIV:
            case HiveSqlParser.BITWISENOT:
            case HiveSqlParser.AMPERSAND:
            case HiveSqlParser.TILDE:
            case HiveSqlParser.BITWISEOR:
            case HiveSqlParser.BITWISEXOR:
            case HiveSqlParser.QUESTION:
            case HiveSqlParser.StringLiteral:
            case HiveSqlParser.IntegralLiteral:
            case HiveSqlParser.NumberLiteral:
            case HiveSqlParser.Number:
            case HiveSqlParser.Identifier:
            case HiveSqlParser.CharSetName:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4340;
                localContext._a = this.precedenceBitwiseOrExpression();
                this.state = 4342;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 575, this.context) ) {
                case 1:
                    {
                    this.state = 4341;
                    localContext._part = this.precedenceSimilarExpressionPart();
                    }
                    break;
                }
                }
                break;
            case HiveSqlParser.KW_EXISTS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4344;
                this.match(HiveSqlParser.KW_EXISTS);
                this.state = 4345;
                this.subQueryExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionPart(): PrecedenceSimilarExpressionPartContext {
        let localContext = new PrecedenceSimilarExpressionPartContext(this.context, this.state);
        this.enterRule(localContext, 604, HiveSqlParser.RULE_precedenceSimilarExpressionPart);
        try {
            this.state = 4354;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 577, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4348;
                this.precedenceSimilarOperator();
                this.state = 4349;
                localContext._equalExpr = this.precedenceBitwiseOrExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4351;
                this.precedenceSimilarExpressionAtom();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4352;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 4353;
                this.precedenceSimilarExpressionPartNot();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionAtom(): PrecedenceSimilarExpressionAtomContext {
        let localContext = new PrecedenceSimilarExpressionAtomContext(this.context, this.state);
        this.enterRule(localContext, 606, HiveSqlParser.RULE_precedenceSimilarExpressionAtom);
        let _la: number;
        try {
            this.state = 4370;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_IN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4356;
                this.match(HiveSqlParser.KW_IN);
                this.state = 4357;
                this.precedenceSimilarExpressionIn();
                }
                break;
            case HiveSqlParser.KW_BETWEEN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4358;
                this.match(HiveSqlParser.KW_BETWEEN);
                this.state = 4359;
                localContext._min = this.precedenceBitwiseOrExpression();
                this.state = 4360;
                this.match(HiveSqlParser.KW_AND);
                this.state = 4361;
                localContext._max = this.precedenceBitwiseOrExpression();
                }
                break;
            case HiveSqlParser.KW_LIKE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4363;
                this.match(HiveSqlParser.KW_LIKE);
                this.state = 4364;
                _la = this.tokenStream.LA(1);
                if(!(_la === 7 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4365;
                localContext._expr = this.expressionsInParenthesis();
                }
                break;
            case HiveSqlParser.EQUAL:
            case HiveSqlParser.NOTEQUAL:
            case HiveSqlParser.LESSTHANOREQUALTO:
            case HiveSqlParser.LESSTHAN:
            case HiveSqlParser.GREATERTHANOREQUALTO:
            case HiveSqlParser.GREATERTHAN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4366;
                this.subQuerySelectorOperator();
                this.state = 4367;
                _la = this.tokenStream.LA(1);
                if(!(_la === 7 || _la === 13 || _la === 313)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4368;
                this.subQueryExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionIn(): PrecedenceSimilarExpressionInContext {
        let localContext = new PrecedenceSimilarExpressionInContext(this.context, this.state);
        this.enterRule(localContext, 608, HiveSqlParser.RULE_precedenceSimilarExpressionIn);
        try {
            this.state = 4374;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 579, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4372;
                this.subQueryExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4373;
                localContext._expr = this.expressionsInParenthesis();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceSimilarExpressionPartNot(): PrecedenceSimilarExpressionPartNotContext {
        let localContext = new PrecedenceSimilarExpressionPartNotContext(this.context, this.state);
        this.enterRule(localContext, 610, HiveSqlParser.RULE_precedenceSimilarExpressionPartNot);
        let _la: number;
        try {
            this.state = 4379;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 580, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4376;
                _la = this.tokenStream.LA(1);
                if(!(_la === 184 || _la === 270 || _la === 286)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4377;
                localContext._notExpr = this.precedenceBitwiseOrExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4378;
                this.precedenceSimilarExpressionAtom();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceDistinctOperator(): PrecedenceDistinctOperatorContext {
        let localContext = new PrecedenceDistinctOperatorContext(this.context, this.state);
        this.enterRule(localContext, 612, HiveSqlParser.RULE_precedenceDistinctOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4381;
            this.match(HiveSqlParser.KW_IS);
            this.state = 4382;
            this.match(HiveSqlParser.KW_DISTINCT);
            this.state = 4383;
            this.match(HiveSqlParser.KW_FROM);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceEqualOperator(): PrecedenceEqualOperatorContext {
        let localContext = new PrecedenceEqualOperatorContext(this.context, this.state);
        this.enterRule(localContext, 614, HiveSqlParser.RULE_precedenceEqualOperator);
        try {
            this.state = 4392;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.EQUAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4385;
                this.match(HiveSqlParser.EQUAL);
                }
                break;
            case HiveSqlParser.EQUAL_NS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4386;
                this.match(HiveSqlParser.EQUAL_NS);
                }
                break;
            case HiveSqlParser.NOTEQUAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4387;
                this.match(HiveSqlParser.NOTEQUAL);
                }
                break;
            case HiveSqlParser.KW_IS:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4388;
                this.match(HiveSqlParser.KW_IS);
                this.state = 4389;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 4390;
                this.match(HiveSqlParser.KW_DISTINCT);
                this.state = 4391;
                this.match(HiveSqlParser.KW_FROM);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceEqualExpression(): PrecedenceEqualExpressionContext {
        let localContext = new PrecedenceEqualExpressionContext(this.context, this.state);
        this.enterRule(localContext, 616, HiveSqlParser.RULE_precedenceEqualExpression);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4394;
            this.precedenceSimilarExpression();
            this.state = 4403;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 583, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 4401;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 582, this.context) ) {
                    case 1:
                        {
                        this.state = 4395;
                        localContext._precedenceEqualOperator = this.precedenceEqualOperator();
                        localContext._equal.push(localContext._precedenceEqualOperator);
                        this.state = 4396;
                        localContext._precedenceSimilarExpression = this.precedenceSimilarExpression();
                        localContext._p.push(localContext._precedenceSimilarExpression);
                        }
                        break;
                    case 2:
                        {
                        this.state = 4398;
                        localContext._precedenceDistinctOperator = this.precedenceDistinctOperator();
                        localContext._dist.push(localContext._precedenceDistinctOperator);
                        this.state = 4399;
                        localContext._precedenceSimilarExpression = this.precedenceSimilarExpression();
                        localContext._p.push(localContext._precedenceSimilarExpression);
                        }
                        break;
                    }
                    }
                }
                this.state = 4405;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 583, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public isCondition(): IsConditionContext {
        let localContext = new IsConditionContext(this.context, this.state);
        this.enterRule(localContext, 618, HiveSqlParser.RULE_isCondition);
        let _la: number;
        try {
            this.state = 4412;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_NULL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4406;
                this.match(HiveSqlParser.KW_NULL);
                }
                break;
            case HiveSqlParser.KW_TRUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4407;
                this.match(HiveSqlParser.KW_TRUE);
                }
                break;
            case HiveSqlParser.KW_FALSE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4408;
                this.match(HiveSqlParser.KW_FALSE);
                }
                break;
            case HiveSqlParser.KW_UNKNOWN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4409;
                this.match(HiveSqlParser.KW_UNKNOWN);
                }
                break;
            case HiveSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4410;
                this.match(HiveSqlParser.KW_NOT);
                this.state = 4411;
                _la = this.tokenStream.LA(1);
                if(!(_la === 125 || _la === 219 || _la === 350 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceNotExpression(): PrecedenceNotExpressionContext {
        let localContext = new PrecedenceNotExpressionContext(this.context, this.state);
        this.enterRule(localContext, 620, HiveSqlParser.RULE_precedenceNotExpression);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4417;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 585, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4414;
                    this.match(HiveSqlParser.KW_NOT);
                    }
                    }
                }
                this.state = 4419;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 585, this.context);
            }
            this.state = 4420;
            this.precedenceEqualExpression();
            this.state = 4423;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 167) {
                {
                this.state = 4421;
                localContext._a = this.match(HiveSqlParser.KW_IS);
                this.state = 4422;
                this.isCondition();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public precedenceAndExpression(): PrecedenceAndExpressionContext {
        let localContext = new PrecedenceAndExpressionContext(this.context, this.state);
        this.enterRule(localContext, 622, HiveSqlParser.RULE_precedenceAndExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4425;
            this.precedenceNotExpression();
            this.state = 4430;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 11) {
                {
                {
                this.state = 4426;
                this.match(HiveSqlParser.KW_AND);
                this.state = 4427;
                this.precedenceNotExpression();
                }
                }
                this.state = 4432;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableOrPartition(): TableOrPartitionContext {
        let localContext = new TableOrPartitionContext(this.context, this.state);
        this.enterRule(localContext, 624, HiveSqlParser.RULE_tableOrPartition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4433;
            this.tableName();
            this.state = 4435;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 237) {
                {
                this.state = 4434;
                this.partitionSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpec(): PartitionSpecContext {
        let localContext = new PartitionSpecContext(this.context, this.state);
        this.enterRule(localContext, 626, HiveSqlParser.RULE_partitionSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4437;
            this.match(HiveSqlParser.KW_PARTITION);
            this.state = 4438;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4439;
            this.partitionVal();
            this.state = 4444;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 4440;
                this.match(HiveSqlParser.COMMA);
                this.state = 4441;
                this.partitionVal();
                }
                }
                this.state = 4446;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4447;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionVal(): PartitionValContext {
        let localContext = new PartitionValContext(this.context, this.state);
        this.enterRule(localContext, 628, HiveSqlParser.RULE_partitionVal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4449;
            this.id_();
            this.state = 4452;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 405) {
                {
                this.state = 4450;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4451;
                this.constant();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSelectorSpec(): PartitionSelectorSpecContext {
        let localContext = new PartitionSelectorSpecContext(this.context, this.state);
        this.enterRule(localContext, 630, HiveSqlParser.RULE_partitionSelectorSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4454;
            this.match(HiveSqlParser.LPAREN);
            this.state = 4455;
            this.partitionSelectorVal();
            this.state = 4460;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 4456;
                this.match(HiveSqlParser.COMMA);
                this.state = 4457;
                this.partitionSelectorVal();
                }
                }
                this.state = 4462;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4463;
            this.match(HiveSqlParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSelectorVal(): PartitionSelectorValContext {
        let localContext = new PartitionSelectorValContext(this.context, this.state);
        this.enterRule(localContext, 632, HiveSqlParser.RULE_partitionSelectorVal);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4465;
            this.id_();
            this.state = 4468;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_LIKE:
                {
                this.state = 4466;
                this.match(HiveSqlParser.KW_LIKE);
                }
                break;
            case HiveSqlParser.EQUAL:
            case HiveSqlParser.NOTEQUAL:
            case HiveSqlParser.LESSTHANOREQUALTO:
            case HiveSqlParser.LESSTHAN:
            case HiveSqlParser.GREATERTHANOREQUALTO:
            case HiveSqlParser.GREATERTHAN:
                {
                this.state = 4467;
                this.subQuerySelectorOperator();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4470;
            this.constant();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subQuerySelectorOperator(): SubQuerySelectorOperatorContext {
        let localContext = new SubQuerySelectorOperatorContext(this.context, this.state);
        this.enterRule(localContext, 634, HiveSqlParser.RULE_subQuerySelectorOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4472;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 125) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sysFuncNames(): SysFuncNamesContext {
        let localContext = new SysFuncNamesContext(this.context, this.state);
        this.enterRule(localContext, 636, HiveSqlParser.RULE_sysFuncNames);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4474;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 11)) & ~0x1F) === 0 && ((1 << (_la - 11)) & 17023009) !== 0) || _la === 100 || _la === 131 || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3225944065) !== 0) || _la === 184 || _la === 198 || _la === 216 || _la === 228 || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4194369) !== 0) || ((((_la - 311)) & ~0x1F) === 0 && ((1 << (_la - 311)) & 536883201) !== 0) || _la === 357 || _la === 383 || ((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 385023) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public id_(): Id_Context {
        let localContext = new Id_Context(this.context, this.state);
        this.enterRule(localContext, 638, HiveSqlParser.RULE_id_);
        try {
            this.state = 4478;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4476;
                this.match(HiveSqlParser.Identifier);
                }
                break;
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4477;
                this.nonReserved();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionIdentifier(): FunctionIdentifierContext {
        let localContext = new FunctionIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 640, HiveSqlParser.RULE_functionIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4480;
            this.id_();
            this.state = 4483;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 395) {
                {
                this.state = 4481;
                this.match(HiveSqlParser.DOT);
                this.state = 4482;
                localContext._fn = this.id_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principalIdentifier(): PrincipalIdentifierContext {
        let localContext = new PrincipalIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 642, HiveSqlParser.RULE_principalIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4485;
            this.id_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 644, HiveSqlParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4487;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3203280837) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 3774298979) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 1985876353) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 3152987127) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 215407575) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1859156443) !== 0) || ((((_la - 265)) & ~0x1F) === 0 && ((1 << (_la - 265)) & 4039901127) !== 0) || ((((_la - 297)) & ~0x1F) === 0 && ((1 << (_la - 297)) & 3755917179) !== 0) || ((((_la - 330)) & ~0x1F) === 0 && ((1 << (_la - 330)) & 3402225181) !== 0) || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 4238323319) !== 0) || _la === 394)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql11ReservedKeywordsUsedAsFunctionName(): Sql11ReservedKeywordsUsedAsFunctionNameContext {
        let localContext = new Sql11ReservedKeywordsUsedAsFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 646, HiveSqlParser.RULE_sql11ReservedKeywordsUsedAsFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4489;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 469827584) !== 0) || ((((_la - 63)) & ~0x1F) === 0 && ((1 << (_la - 63)) & 259) !== 0) || _la === 100 || _la === 131 || ((((_la - 145)) & ~0x1F) === 0 && ((1 << (_la - 145)) & 393281) !== 0) || _la === 198 || _la === 264 || _la === 311 || _la === 337)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public configPropertiesItem(): ConfigPropertiesItemContext {
        let localContext = new ConfigPropertiesItemContext(this.context, this.state);
        this.enterRule(localContext, 648, HiveSqlParser.RULE_configPropertiesItem);
        try {
            this.state = 4541;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ABORT:
            case HiveSqlParser.KW_ACTIVATE:
            case HiveSqlParser.KW_ACTIVE:
            case HiveSqlParser.KW_ADD:
            case HiveSqlParser.KW_ADMIN:
            case HiveSqlParser.KW_AFTER:
            case HiveSqlParser.KW_ALLOC_FRACTION:
            case HiveSqlParser.KW_ANALYZE:
            case HiveSqlParser.KW_ARCHIVE:
            case HiveSqlParser.KW_ASC:
            case HiveSqlParser.KW_AST:
            case HiveSqlParser.KW_AT:
            case HiveSqlParser.KW_AUTOCOMMIT:
            case HiveSqlParser.KW_BATCH:
            case HiveSqlParser.KW_BEFORE:
            case HiveSqlParser.KW_BUCKET:
            case HiveSqlParser.KW_BUCKETS:
            case HiveSqlParser.KW_CACHE:
            case HiveSqlParser.KW_CASCADE:
            case HiveSqlParser.KW_CBO:
            case HiveSqlParser.KW_CHANGE:
            case HiveSqlParser.KW_CHECK:
            case HiveSqlParser.KW_CLUSTER:
            case HiveSqlParser.KW_CLUSTERED:
            case HiveSqlParser.KW_CLUSTERSTATUS:
            case HiveSqlParser.KW_COLLECTION:
            case HiveSqlParser.KW_COLUMNS:
            case HiveSqlParser.KW_COMMENT:
            case HiveSqlParser.KW_COMPACT:
            case HiveSqlParser.KW_COMPACTIONS:
            case HiveSqlParser.KW_COMPUTE:
            case HiveSqlParser.KW_CONCATENATE:
            case HiveSqlParser.KW_CONTINUE:
            case HiveSqlParser.KW_COST:
            case HiveSqlParser.KW_CRON:
            case HiveSqlParser.KW_DATA:
            case HiveSqlParser.KW_DATABASES:
            case HiveSqlParser.KW_DATETIME:
            case HiveSqlParser.KW_DAY:
            case HiveSqlParser.KW_DAYS:
            case HiveSqlParser.KW_DAYOFWEEK:
            case HiveSqlParser.KW_DBPROPERTIES:
            case HiveSqlParser.KW_DCPROPERTIES:
            case HiveSqlParser.KW_DEBUG:
            case HiveSqlParser.KW_DEFAULT:
            case HiveSqlParser.KW_DEFERRED:
            case HiveSqlParser.KW_DEFINED:
            case HiveSqlParser.KW_DELIMITED:
            case HiveSqlParser.KW_DEPENDENCY:
            case HiveSqlParser.KW_DESC:
            case HiveSqlParser.KW_DETAIL:
            case HiveSqlParser.KW_DIRECTORIES:
            case HiveSqlParser.KW_DIRECTORY:
            case HiveSqlParser.KW_DISABLE:
            case HiveSqlParser.KW_DISABLED:
            case HiveSqlParser.KW_DISTRIBUTE:
            case HiveSqlParser.KW_DISTRIBUTED:
            case HiveSqlParser.KW_DO:
            case HiveSqlParser.KW_DUMP:
            case HiveSqlParser.KW_ELEM_TYPE:
            case HiveSqlParser.KW_ENABLE:
            case HiveSqlParser.KW_ENABLED:
            case HiveSqlParser.KW_ENFORCED:
            case HiveSqlParser.KW_ESCAPED:
            case HiveSqlParser.KW_EVERY:
            case HiveSqlParser.KW_EXCLUSIVE:
            case HiveSqlParser.KW_EXECUTE:
            case HiveSqlParser.KW_EXECUTED:
            case HiveSqlParser.KW_EXPIRE_SNAPSHOTS:
            case HiveSqlParser.KW_EXPLAIN:
            case HiveSqlParser.KW_EXPORT:
            case HiveSqlParser.KW_EXPRESSION:
            case HiveSqlParser.KW_FIELDS:
            case HiveSqlParser.KW_FILE:
            case HiveSqlParser.KW_FILEFORMAT:
            case HiveSqlParser.KW_FIRST:
            case HiveSqlParser.KW_FORMAT:
            case HiveSqlParser.KW_FORMATTED:
            case HiveSqlParser.KW_FUNCTIONS:
            case HiveSqlParser.KW_HOLD_DDLTIME:
            case HiveSqlParser.KW_HOUR:
            case HiveSqlParser.KW_HOURS:
            case HiveSqlParser.KW_IDXPROPERTIES:
            case HiveSqlParser.KW_IGNORE:
            case HiveSqlParser.KW_INDEX:
            case HiveSqlParser.KW_INDEXES:
            case HiveSqlParser.KW_INPATH:
            case HiveSqlParser.KW_INPUTDRIVER:
            case HiveSqlParser.KW_INPUTFORMAT:
            case HiveSqlParser.KW_ISOLATION:
            case HiveSqlParser.KW_ITEMS:
            case HiveSqlParser.KW_JAR:
            case HiveSqlParser.KW_JOINCOST:
            case HiveSqlParser.KW_KEY:
            case HiveSqlParser.KW_KEYS:
            case HiveSqlParser.KW_KEY_TYPE:
            case HiveSqlParser.KW_KILL:
            case HiveSqlParser.KW_LAST:
            case HiveSqlParser.KW_LEVEL:
            case HiveSqlParser.KW_LIFECYCLE:
            case HiveSqlParser.KW_LIMIT:
            case HiveSqlParser.KW_LINES:
            case HiveSqlParser.KW_LOAD:
            case HiveSqlParser.KW_LOCATION:
            case HiveSqlParser.KW_LOCK:
            case HiveSqlParser.KW_LOCKS:
            case HiveSqlParser.KW_LOGICAL:
            case HiveSqlParser.KW_LONG:
            case HiveSqlParser.KW_MANAGED:
            case HiveSqlParser.KW_MANAGEDLOCATION:
            case HiveSqlParser.KW_MANAGEMENT:
            case HiveSqlParser.KW_MAPJOIN:
            case HiveSqlParser.KW_MAPPING:
            case HiveSqlParser.KW_MATCHED:
            case HiveSqlParser.KW_MATERIALIZED:
            case HiveSqlParser.KW_METADATA:
            case HiveSqlParser.KW_MINUTE:
            case HiveSqlParser.KW_MINUTES:
            case HiveSqlParser.KW_MONTH:
            case HiveSqlParser.KW_MONTHS:
            case HiveSqlParser.KW_MOVE:
            case HiveSqlParser.KW_MSCK:
            case HiveSqlParser.KW_NORELY:
            case HiveSqlParser.KW_NOSCAN:
            case HiveSqlParser.KW_NOVALIDATE:
            case HiveSqlParser.KW_NO_DROP:
            case HiveSqlParser.KW_NULLS:
            case HiveSqlParser.KW_OFFLINE:
            case HiveSqlParser.KW_OFFSET:
            case HiveSqlParser.KW_OPERATOR:
            case HiveSqlParser.KW_OPTION:
            case HiveSqlParser.KW_OUTPUTDRIVER:
            case HiveSqlParser.KW_OUTPUTFORMAT:
            case HiveSqlParser.KW_OVERWRITE:
            case HiveSqlParser.KW_OWNER:
            case HiveSqlParser.KW_PARTITIONED:
            case HiveSqlParser.KW_PARTITIONS:
            case HiveSqlParser.KW_PATH:
            case HiveSqlParser.KW_PLAN:
            case HiveSqlParser.KW_PLANS:
            case HiveSqlParser.KW_PLUS:
            case HiveSqlParser.KW_POOL:
            case HiveSqlParser.KW_PRINCIPALS:
            case HiveSqlParser.KW_PROTECTION:
            case HiveSqlParser.KW_PURGE:
            case HiveSqlParser.KW_QUARTER:
            case HiveSqlParser.KW_QUERY:
            case HiveSqlParser.KW_QUERY_PARALLELISM:
            case HiveSqlParser.KW_READ:
            case HiveSqlParser.KW_READONLY:
            case HiveSqlParser.KW_REBUILD:
            case HiveSqlParser.KW_RECORDREADER:
            case HiveSqlParser.KW_RECORDWRITER:
            case HiveSqlParser.KW_RELOAD:
            case HiveSqlParser.KW_RELY:
            case HiveSqlParser.KW_REMOTE:
            case HiveSqlParser.KW_RENAME:
            case HiveSqlParser.KW_REOPTIMIZATION:
            case HiveSqlParser.KW_REPAIR:
            case HiveSqlParser.KW_REPL:
            case HiveSqlParser.KW_REPLACE:
            case HiveSqlParser.KW_REPLICATION:
            case HiveSqlParser.KW_RESOURCE:
            case HiveSqlParser.KW_RESPECT:
            case HiveSqlParser.KW_RESTRICT:
            case HiveSqlParser.KW_REWRITE:
            case HiveSqlParser.KW_ROLE:
            case HiveSqlParser.KW_ROLES:
            case HiveSqlParser.KW_SCHEDULED:
            case HiveSqlParser.KW_SCHEDULING_POLICY:
            case HiveSqlParser.KW_SCHEMA:
            case HiveSqlParser.KW_SCHEMAS:
            case HiveSqlParser.KW_SECOND:
            case HiveSqlParser.KW_SECONDS:
            case HiveSqlParser.KW_SEMI:
            case HiveSqlParser.KW_SERDE:
            case HiveSqlParser.KW_SERDEPROPERTIES:
            case HiveSqlParser.KW_SERVER:
            case HiveSqlParser.KW_SETS:
            case HiveSqlParser.KW_SET_CURRENT_SNAPSHOT:
            case HiveSqlParser.KW_SHARED:
            case HiveSqlParser.KW_SHOW:
            case HiveSqlParser.KW_SHOW_DATABASE:
            case HiveSqlParser.KW_SKEWED:
            case HiveSqlParser.KW_SNAPSHOT:
            case HiveSqlParser.KW_SORT:
            case HiveSqlParser.KW_SORTED:
            case HiveSqlParser.KW_SPEC:
            case HiveSqlParser.KW_SSL:
            case HiveSqlParser.KW_STATISTICS:
            case HiveSqlParser.KW_STATUS:
            case HiveSqlParser.KW_STORED:
            case HiveSqlParser.KW_STREAMTABLE:
            case HiveSqlParser.KW_STRING:
            case HiveSqlParser.KW_STRUCT:
            case HiveSqlParser.KW_SUMMARY:
            case HiveSqlParser.KW_SYSTEM_TIME:
            case HiveSqlParser.KW_SYSTEM_VERSION:
            case HiveSqlParser.KW_TABLES:
            case HiveSqlParser.KW_TBLPROPERTIES:
            case HiveSqlParser.KW_TEMPORARY:
            case HiveSqlParser.KW_TERMINATED:
            case HiveSqlParser.KW_TIMESTAMPTZ:
            case HiveSqlParser.KW_TINYINT:
            case HiveSqlParser.KW_TOUCH:
            case HiveSqlParser.KW_TRANSACTION:
            case HiveSqlParser.KW_TRANSACTIONAL:
            case HiveSqlParser.KW_TRANSACTIONS:
            case HiveSqlParser.KW_TRIM:
            case HiveSqlParser.KW_TYPE:
            case HiveSqlParser.KW_UNARCHIVE:
            case HiveSqlParser.KW_UNDO:
            case HiveSqlParser.KW_UNIONTYPE:
            case HiveSqlParser.KW_UNKNOWN:
            case HiveSqlParser.KW_UNLOCK:
            case HiveSqlParser.KW_UNMANAGED:
            case HiveSqlParser.KW_UNSET:
            case HiveSqlParser.KW_UNSIGNED:
            case HiveSqlParser.KW_URI:
            case HiveSqlParser.KW_URL:
            case HiveSqlParser.KW_USE:
            case HiveSqlParser.KW_UTC:
            case HiveSqlParser.KW_UTCTIMESTAMP:
            case HiveSqlParser.KW_VALIDATE:
            case HiveSqlParser.KW_VALUE_TYPE:
            case HiveSqlParser.KW_VECTORIZATION:
            case HiveSqlParser.KW_VIEW:
            case HiveSqlParser.KW_VIEWS:
            case HiveSqlParser.KW_WAIT:
            case HiveSqlParser.KW_WEEK:
            case HiveSqlParser.KW_WEEKS:
            case HiveSqlParser.KW_WHILE:
            case HiveSqlParser.KW_WITHIN:
            case HiveSqlParser.KW_WORK:
            case HiveSqlParser.KW_WORKLOAD:
            case HiveSqlParser.KW_WRITE:
            case HiveSqlParser.KW_YEAR:
            case HiveSqlParser.KW_YEARS:
            case HiveSqlParser.KW_ZONE:
            case HiveSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4491;
                this.id_();
                }
                break;
            case HiveSqlParser.KW_JOIN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4492;
                this.match(HiveSqlParser.KW_JOIN);
                }
                break;
            case HiveSqlParser.KW_PARTITION:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4493;
                this.match(HiveSqlParser.KW_PARTITION);
                }
                break;
            case HiveSqlParser.KW_MAP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4494;
                this.match(HiveSqlParser.KW_MAP);
                }
                break;
            case HiveSqlParser.KW_REDUCE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4495;
                this.match(HiveSqlParser.KW_REDUCE);
                }
                break;
            case HiveSqlParser.KW_USER:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4496;
                this.match(HiveSqlParser.KW_USER);
                }
                break;
            case HiveSqlParser.KW_PERCENT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4497;
                this.match(HiveSqlParser.KW_PERCENT);
                }
                break;
            case HiveSqlParser.KW_INTERVAL:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4498;
                this.match(HiveSqlParser.KW_INTERVAL);
                }
                break;
            case HiveSqlParser.KW_ROWS:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4499;
                this.match(HiveSqlParser.KW_ROWS);
                }
                break;
            case HiveSqlParser.KW_UNION:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4500;
                this.match(HiveSqlParser.KW_UNION);
                }
                break;
            case HiveSqlParser.KW_GROUP:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4501;
                this.match(HiveSqlParser.KW_GROUP);
                }
                break;
            case HiveSqlParser.KW_MERGE:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4502;
                this.match(HiveSqlParser.KW_MERGE);
                }
                break;
            case HiveSqlParser.KW_NULL:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4503;
                this.match(HiveSqlParser.KW_NULL);
                }
                break;
            case HiveSqlParser.KW_FETCH:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 4504;
                this.match(HiveSqlParser.KW_FETCH);
                }
                break;
            case HiveSqlParser.KW_LOCAL:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 4505;
                this.match(HiveSqlParser.KW_LOCAL);
                }
                break;
            case HiveSqlParser.KW_DROP:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 4506;
                this.match(HiveSqlParser.KW_DROP);
                }
                break;
            case HiveSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 4507;
                this.match(HiveSqlParser.KW_TABLE);
                }
                break;
            case HiveSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 4508;
                this.match(HiveSqlParser.KW_ON);
                }
                break;
            case HiveSqlParser.KW_ROW:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 4509;
                this.match(HiveSqlParser.KW_ROW);
                }
                break;
            case HiveSqlParser.KW_GROUPING:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 4510;
                this.match(HiveSqlParser.KW_GROUPING);
                }
                break;
            case HiveSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 4511;
                this.match(HiveSqlParser.KW_SET);
                }
                break;
            case HiveSqlParser.KW_FORCE:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 4512;
                this.match(HiveSqlParser.KW_FORCE);
                }
                break;
            case HiveSqlParser.KW_START:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 4513;
                this.match(HiveSqlParser.KW_START);
                }
                break;
            case HiveSqlParser.KW_INSERT:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 4514;
                this.match(HiveSqlParser.KW_INSERT);
                }
                break;
            case HiveSqlParser.KW_CONF:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 4515;
                this.match(HiveSqlParser.KW_CONF);
                }
                break;
            case HiveSqlParser.KW_INTO:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 4516;
                this.match(HiveSqlParser.KW_INTO);
                }
                break;
            case HiveSqlParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 4517;
                this.match(HiveSqlParser.KW_UNIQUE);
                }
                break;
            case HiveSqlParser.KW_COLUMN:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 4518;
                this.match(HiveSqlParser.KW_COLUMN);
                }
                break;
            case HiveSqlParser.KW_TRANSFORM:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 4519;
                this.match(HiveSqlParser.KW_TRANSFORM);
                }
                break;
            case HiveSqlParser.KW_DISTINCT:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 4520;
                this.match(HiveSqlParser.KW_DISTINCT);
                }
                break;
            case HiveSqlParser.KW_IN:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 4521;
                this.match(HiveSqlParser.KW_IN);
                }
                break;
            case HiveSqlParser.KW_REFERENCES:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 4522;
                this.match(HiveSqlParser.KW_REFERENCES);
                }
                break;
            case HiveSqlParser.KW_TIMESTAMP:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 4523;
                this.match(HiveSqlParser.KW_TIMESTAMP);
                }
                break;
            case HiveSqlParser.KW_ONLY:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 4524;
                this.match(HiveSqlParser.KW_ONLY);
                }
                break;
            case HiveSqlParser.KW_END:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 4525;
                this.match(HiveSqlParser.KW_END);
                }
                break;
            case HiveSqlParser.KW_FUNCTION:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 4526;
                this.match(HiveSqlParser.KW_FUNCTION);
                }
                break;
            case HiveSqlParser.KW_UPDATE:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 4527;
                this.match(HiveSqlParser.KW_UPDATE);
                }
                break;
            case HiveSqlParser.KW_AUTHORIZATION:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 4528;
                this.match(HiveSqlParser.KW_AUTHORIZATION);
                }
                break;
            case HiveSqlParser.KW_DDL:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 4529;
                this.match(HiveSqlParser.KW_DDL);
                }
                break;
            case HiveSqlParser.KW_VALUES:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 4530;
                this.match(HiveSqlParser.KW_VALUES);
                }
                break;
            case HiveSqlParser.KW_TIME:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 4531;
                this.match(HiveSqlParser.KW_TIME);
                }
                break;
            case HiveSqlParser.KW_IS:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 4532;
                this.match(HiveSqlParser.KW_IS);
                }
                break;
            case HiveSqlParser.KW_FOR:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 4533;
                this.match(HiveSqlParser.KW_FOR);
                }
                break;
            case HiveSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 4534;
                this.match(HiveSqlParser.KW_NOT);
                }
                break;
            case HiveSqlParser.KW_BINARY:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 4535;
                this.match(HiveSqlParser.KW_BINARY);
                }
                break;
            case HiveSqlParser.KW_USING:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 4536;
                this.match(HiveSqlParser.KW_USING);
                }
                break;
            case HiveSqlParser.KW_READS:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 4537;
                this.match(HiveSqlParser.KW_READS);
                }
                break;
            case HiveSqlParser.KW_BETWEEN:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 4538;
                this.match(HiveSqlParser.KW_BETWEEN);
                }
                break;
            case HiveSqlParser.KW_CURRENT:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 4539;
                this.match(HiveSqlParser.KW_CURRENT);
                }
                break;
            case HiveSqlParser.KW_AS:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 4540;
                this.match(HiveSqlParser.KW_AS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resourcePlanDdlStatements(): ResourcePlanDdlStatementsContext {
        let localContext = new ResourcePlanDdlStatementsContext(this.context, this.state);
        this.enterRule(localContext, 650, HiveSqlParser.RULE_resourcePlanDdlStatements);
        let _la: number;
        try {
            this.state = 4708;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 612, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4543;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 4544;
                this.match(HiveSqlParser.KW_RESOURCE);
                this.state = 4545;
                this.match(HiveSqlParser.KW_PLAN);
                this.state = 4547;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 4546;
                    this.ifNotExists();
                    }
                }

                this.state = 4558;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 598, this.context) ) {
                case 1:
                    {
                    this.state = 4549;
                    localContext._name = this.id_();
                    this.state = 4550;
                    this.match(HiveSqlParser.KW_LIKE);
                    this.state = 4551;
                    localContext._likeName = this.id_();
                    }
                    break;
                case 2:
                    {
                    this.state = 4553;
                    localContext._name = this.id_();
                    this.state = 4556;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 597, this.context) ) {
                    case 1:
                        {
                        this.state = 4554;
                        this.match(HiveSqlParser.KW_WITH);
                        this.state = 4555;
                        this.rpAssignList();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4560;
                this.match(HiveSqlParser.KW_ALTER);
                this.state = 4561;
                this.match(HiveSqlParser.KW_RESOURCE);
                this.state = 4562;
                this.match(HiveSqlParser.KW_PLAN);
                this.state = 4563;
                localContext._name = this.id_();
                this.state = 4588;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_VALIDATE:
                    {
                    this.state = 4564;
                    this.match(HiveSqlParser.KW_VALIDATE);
                    }
                    break;
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                    {
                    this.state = 4565;
                    this.disable();
                    }
                    break;
                case HiveSqlParser.KW_SET:
                    {
                    this.state = 4566;
                    this.match(HiveSqlParser.KW_SET);
                    this.state = 4567;
                    this.rpAssignList();
                    }
                    break;
                case HiveSqlParser.KW_UNSET:
                    {
                    this.state = 4568;
                    this.match(HiveSqlParser.KW_UNSET);
                    this.state = 4569;
                    this.rpUnassign();
                    this.state = 4574;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 397) {
                        {
                        {
                        this.state = 4570;
                        this.match(HiveSqlParser.COMMA);
                        this.state = 4571;
                        this.rpUnassign();
                        }
                        }
                        this.state = 4576;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case HiveSqlParser.KW_RENAME:
                    {
                    this.state = 4577;
                    this.match(HiveSqlParser.KW_RENAME);
                    this.state = 4578;
                    this.match(HiveSqlParser.KW_TO);
                    this.state = 4579;
                    localContext._newName = this.id_();
                    }
                    break;
                case HiveSqlParser.KW_ACTIVATE:
                    {
                    this.state = 4580;
                    this.activate();
                    this.state = 4582;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 600, this.context) ) {
                    case 1:
                        {
                        this.state = 4581;
                        this.enable();
                        }
                        break;
                    }
                    }
                    break;
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                    {
                    this.state = 4584;
                    this.enable();
                    this.state = 4586;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 2) {
                        {
                        this.state = 4585;
                        this.activate();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4590;
                this.match(HiveSqlParser.KW_DROP);
                this.state = 4591;
                this.match(HiveSqlParser.KW_RESOURCE);
                this.state = 4592;
                this.match(HiveSqlParser.KW_PLAN);
                this.state = 4594;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 4593;
                    this.ifExists();
                    }
                }

                this.state = 4596;
                localContext._name = this.id_();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4599;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_ENABLE:
                case HiveSqlParser.KW_ENABLED:
                    {
                    this.state = 4597;
                    this.enable();
                    }
                    break;
                case HiveSqlParser.KW_DISABLE:
                case HiveSqlParser.KW_DISABLED:
                    {
                    this.state = 4598;
                    this.disable();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4601;
                this.match(HiveSqlParser.KW_WORKLOAD);
                this.state = 4602;
                this.match(HiveSqlParser.KW_MANAGEMENT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4604;
                this.match(HiveSqlParser.KW_REPLACE);
                this.state = 4616;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_ACTIVE:
                    {
                    this.state = 4605;
                    this.match(HiveSqlParser.KW_ACTIVE);
                    this.state = 4606;
                    this.match(HiveSqlParser.KW_RESOURCE);
                    this.state = 4607;
                    this.match(HiveSqlParser.KW_PLAN);
                    this.state = 4608;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 4609;
                    localContext._src = this.id_();
                    }
                    break;
                case HiveSqlParser.KW_RESOURCE:
                    {
                    this.state = 4610;
                    this.match(HiveSqlParser.KW_RESOURCE);
                    this.state = 4611;
                    this.match(HiveSqlParser.KW_PLAN);
                    this.state = 4612;
                    localContext._dest = this.id_();
                    this.state = 4613;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 4614;
                    localContext._src = this.id_();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4618;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 4619;
                this.match(HiveSqlParser.KW_TRIGGER);
                this.state = 4620;
                localContext._rpName = this.id_();
                this.state = 4621;
                this.match(HiveSqlParser.DOT);
                this.state = 4622;
                localContext._triggerName = this.id_();
                this.state = 4623;
                this.match(HiveSqlParser.KW_WHEN);
                this.state = 4624;
                this.triggerAtomExpression();
                this.state = 4625;
                this.match(HiveSqlParser.KW_DO);
                this.state = 4626;
                this.triggerActionExpression();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4628;
                this.match(HiveSqlParser.KW_ALTER);
                this.state = 4629;
                this.match(HiveSqlParser.KW_TRIGGER);
                this.state = 4630;
                localContext._rpName = this.id_();
                this.state = 4631;
                this.match(HiveSqlParser.DOT);
                this.state = 4632;
                localContext._triggerName = this.id_();
                this.state = 4649;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_WHEN:
                    {
                    this.state = 4633;
                    this.match(HiveSqlParser.KW_WHEN);
                    this.state = 4634;
                    this.triggerAtomExpression();
                    this.state = 4635;
                    this.match(HiveSqlParser.KW_DO);
                    this.state = 4636;
                    this.triggerActionExpression();
                    }
                    break;
                case HiveSqlParser.KW_ADD:
                case HiveSqlParser.KW_DROP:
                    {
                    this.state = 4642;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case HiveSqlParser.KW_ADD:
                        {
                        this.state = 4638;
                        this.match(HiveSqlParser.KW_ADD);
                        this.state = 4639;
                        this.match(HiveSqlParser.KW_TO);
                        }
                        break;
                    case HiveSqlParser.KW_DROP:
                        {
                        this.state = 4640;
                        this.match(HiveSqlParser.KW_DROP);
                        this.state = 4641;
                        this.match(HiveSqlParser.KW_FROM);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 4647;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case HiveSqlParser.KW_POOL:
                        {
                        this.state = 4644;
                        this.match(HiveSqlParser.KW_POOL);
                        this.state = 4645;
                        localContext._poolName = this.poolPath();
                        }
                        break;
                    case HiveSqlParser.KW_UNMANAGED:
                        {
                        this.state = 4646;
                        this.match(HiveSqlParser.KW_UNMANAGED);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4651;
                this.match(HiveSqlParser.KW_DROP);
                this.state = 4652;
                this.match(HiveSqlParser.KW_TRIGGER);
                this.state = 4653;
                localContext._rpName = this.id_();
                this.state = 4654;
                this.match(HiveSqlParser.DOT);
                this.state = 4655;
                localContext._triggerName = this.id_();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4657;
                this.match(HiveSqlParser.KW_CREATE);
                this.state = 4658;
                this.match(HiveSqlParser.KW_POOL);
                this.state = 4659;
                localContext._rpName = this.id_();
                this.state = 4660;
                this.match(HiveSqlParser.DOT);
                this.state = 4661;
                this.poolPath();
                this.state = 4662;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 4663;
                this.poolAssignList();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4665;
                this.match(HiveSqlParser.KW_ALTER);
                this.state = 4666;
                this.match(HiveSqlParser.KW_POOL);
                this.state = 4667;
                localContext._rpName = this.id_();
                this.state = 4668;
                this.match(HiveSqlParser.DOT);
                this.state = 4669;
                this.poolPath();
                this.state = 4677;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_SET:
                    {
                    this.state = 4670;
                    this.match(HiveSqlParser.KW_SET);
                    this.state = 4671;
                    this.poolAssignList();
                    }
                    break;
                case HiveSqlParser.KW_UNSET:
                    {
                    this.state = 4672;
                    this.match(HiveSqlParser.KW_UNSET);
                    this.state = 4673;
                    this.match(HiveSqlParser.KW_SCHEDULING_POLICY);
                    }
                    break;
                case HiveSqlParser.KW_ADD:
                case HiveSqlParser.KW_DROP:
                    {
                    this.state = 4674;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 4 || _la === 101)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 4675;
                    this.match(HiveSqlParser.KW_TRIGGER);
                    this.state = 4676;
                    localContext._triggerName = this.id_();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4679;
                this.match(HiveSqlParser.KW_DROP);
                this.state = 4680;
                this.match(HiveSqlParser.KW_POOL);
                this.state = 4681;
                localContext._rpName = this.id_();
                this.state = 4682;
                this.match(HiveSqlParser.DOT);
                this.state = 4683;
                this.poolPath();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4685;
                _la = this.tokenStream.LA(1);
                if(!(_la === 9 || _la === 58)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4686;
                localContext._mappingType = this.mappingTypes();
                this.state = 4687;
                this.match(HiveSqlParser.KW_MAPPING);
                this.state = 4688;
                this.match(HiveSqlParser.StringLiteral);
                this.state = 4689;
                this.match(HiveSqlParser.KW_IN);
                this.state = 4690;
                localContext._rpName = this.id_();
                this.state = 4694;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case HiveSqlParser.KW_TO:
                    {
                    this.state = 4691;
                    this.match(HiveSqlParser.KW_TO);
                    this.state = 4692;
                    localContext._path = this.poolPath();
                    }
                    break;
                case HiveSqlParser.KW_UNMANAGED:
                    {
                    this.state = 4693;
                    this.match(HiveSqlParser.KW_UNMANAGED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4699;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 611, this.context) ) {
                case 1:
                    {
                    this.state = 4696;
                    this.match(HiveSqlParser.KW_WITH);
                    this.state = 4697;
                    this.match(HiveSqlParser.KW_ORDER);
                    this.state = 4698;
                    localContext._order = this.match(HiveSqlParser.Number);
                    }
                    break;
                }
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4701;
                this.match(HiveSqlParser.KW_DROP);
                this.state = 4702;
                localContext._mappingType = this.mappingTypes();
                this.state = 4703;
                this.match(HiveSqlParser.KW_MAPPING);
                this.state = 4704;
                this.match(HiveSqlParser.StringLiteral);
                this.state = 4705;
                this.match(HiveSqlParser.KW_IN);
                this.state = 4706;
                localContext._rpName = this.id_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mappingTypes(): MappingTypesContext {
        let localContext = new MappingTypesContext(this.context, this.state);
        this.enterRule(localContext, 652, HiveSqlParser.RULE_mappingTypes);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4710;
            _la = this.tokenStream.LA(1);
            if(!(_la === 14 || _la === 144 || _la === 369)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpAssign(): RpAssignContext {
        let localContext = new RpAssignContext(this.context, this.state);
        this.enterRule(localContext, 654, HiveSqlParser.RULE_rpAssign);
        try {
            this.state = 4719;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_QUERY_PARALLELISM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4712;
                this.match(HiveSqlParser.KW_QUERY_PARALLELISM);
                this.state = 4713;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4714;
                localContext._parallelism = this.match(HiveSqlParser.Number);
                }
                break;
            case HiveSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4715;
                this.match(HiveSqlParser.KW_DEFAULT);
                this.state = 4716;
                this.match(HiveSqlParser.KW_POOL);
                this.state = 4717;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4718;
                this.poolPath();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpAssignList(): RpAssignListContext {
        let localContext = new RpAssignListContext(this.context, this.state);
        this.enterRule(localContext, 656, HiveSqlParser.RULE_rpAssignList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4721;
            this.rpAssign();
            this.state = 4726;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 4722;
                this.match(HiveSqlParser.COMMA);
                this.state = 4723;
                this.rpAssign();
                }
                }
                this.state = 4728;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rpUnassign(): RpUnassignContext {
        let localContext = new RpUnassignContext(this.context, this.state);
        this.enterRule(localContext, 658, HiveSqlParser.RULE_rpUnassign);
        try {
            this.state = 4732;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_QUERY_PARALLELISM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4729;
                this.match(HiveSqlParser.KW_QUERY_PARALLELISM);
                }
                break;
            case HiveSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4730;
                this.match(HiveSqlParser.KW_DEFAULT);
                this.state = 4731;
                this.match(HiveSqlParser.KW_POOL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public activate(): ActivateContext {
        let localContext = new ActivateContext(this.context, this.state);
        this.enterRule(localContext, 660, HiveSqlParser.RULE_activate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4734;
            this.match(HiveSqlParser.KW_ACTIVATE);
            this.state = 4737;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 616, this.context) ) {
            case 1:
                {
                this.state = 4735;
                this.match(HiveSqlParser.KW_WITH);
                this.state = 4736;
                this.match(HiveSqlParser.KW_REPLACE);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enable(): EnableContext {
        let localContext = new EnableContext(this.context, this.state);
        this.enterRule(localContext, 662, HiveSqlParser.RULE_enable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4739;
            _la = this.tokenStream.LA(1);
            if(!(_la === 106 || _la === 107)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public disable(): DisableContext {
        let localContext = new DisableContext(this.context, this.state);
        this.enterRule(localContext, 664, HiveSqlParser.RULE_disable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4741;
            _la = this.tokenStream.LA(1);
            if(!(_la === 94 || _la === 95)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public year(): YearContext {
        let localContext = new YearContext(this.context, this.state);
        this.enterRule(localContext, 666, HiveSqlParser.RULE_year);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4743;
            _la = this.tokenStream.LA(1);
            if(!(_la === 392 || _la === 393)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public month(): MonthContext {
        let localContext = new MonthContext(this.context, this.state);
        this.enterRule(localContext, 668, HiveSqlParser.RULE_month);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4745;
            _la = this.tokenStream.LA(1);
            if(!(_la === 208 || _la === 209)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public week(): WeekContext {
        let localContext = new WeekContext(this.context, this.state);
        this.enterRule(localContext, 670, HiveSqlParser.RULE_week);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4747;
            _la = this.tokenStream.LA(1);
            if(!(_la === 381 || _la === 382)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public day(): DayContext {
        let localContext = new DayContext(this.context, this.state);
        this.enterRule(localContext, 672, HiveSqlParser.RULE_day);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4749;
            _la = this.tokenStream.LA(1);
            if(!(_la === 73 || _la === 74)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hour(): HourContext {
        let localContext = new HourContext(this.context, this.state);
        this.enterRule(localContext, 674, HiveSqlParser.RULE_hour);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4751;
            _la = this.tokenStream.LA(1);
            if(!(_la === 148 || _la === 149)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public minute(): MinuteContext {
        let localContext = new MinuteContext(this.context, this.state);
        this.enterRule(localContext, 676, HiveSqlParser.RULE_minute);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4753;
            _la = this.tokenStream.LA(1);
            if(!(_la === 206 || _la === 207)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public second(): SecondContext {
        let localContext = new SecondContext(this.context, this.state);
        this.enterRule(localContext, 678, HiveSqlParser.RULE_second);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4755;
            _la = this.tokenStream.LA(1);
            if(!(_la === 297 || _la === 298)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decimal(): DecimalContext {
        let localContext = new DecimalContext(this.context, this.state);
        this.enterRule(localContext, 680, HiveSqlParser.RULE_decimal);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4757;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 80)) & ~0x1F) === 0 && ((1 << (_la - 80)) & 7) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public poolPath(): PoolPathContext {
        let localContext = new PoolPathContext(this.context, this.state);
        this.enterRule(localContext, 682, HiveSqlParser.RULE_poolPath);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4759;
            this.id_();
            this.state = 4764;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 617, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 4760;
                    this.match(HiveSqlParser.DOT);
                    this.state = 4761;
                    this.id_();
                    }
                    }
                }
                this.state = 4766;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 617, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerAtomExpression(): TriggerAtomExpressionContext {
        let localContext = new TriggerAtomExpressionContext(this.context, this.state);
        this.enterRule(localContext, 684, HiveSqlParser.RULE_triggerAtomExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4767;
            this.id_();
            this.state = 4768;
            this.match(HiveSqlParser.GREATERTHAN);
            this.state = 4769;
            _la = this.tokenStream.LA(1);
            if(!(_la === 426 || _la === 431)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerActionExpression(): TriggerActionExpressionContext {
        let localContext = new TriggerActionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 686, HiveSqlParser.RULE_triggerActionExpression);
        try {
            this.state = 4775;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_KILL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4771;
                this.match(HiveSqlParser.KW_KILL);
                }
                break;
            case HiveSqlParser.KW_MOVE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4772;
                this.match(HiveSqlParser.KW_MOVE);
                this.state = 4773;
                this.match(HiveSqlParser.KW_TO);
                this.state = 4774;
                this.poolPath();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public poolAssign(): PoolAssignContext {
        let localContext = new PoolAssignContext(this.context, this.state);
        this.enterRule(localContext, 688, HiveSqlParser.RULE_poolAssign);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4789;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case HiveSqlParser.KW_ALLOC_FRACTION:
                {
                this.state = 4777;
                this.match(HiveSqlParser.KW_ALLOC_FRACTION);
                this.state = 4778;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4779;
                localContext._allocFraction = this.match(HiveSqlParser.Number);
                }
                break;
            case HiveSqlParser.KW_QUERY_PARALLELISM:
                {
                this.state = 4780;
                this.match(HiveSqlParser.KW_QUERY_PARALLELISM);
                this.state = 4781;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4782;
                localContext._parallelism = this.match(HiveSqlParser.Number);
                }
                break;
            case HiveSqlParser.KW_SCHEDULING_POLICY:
                {
                this.state = 4783;
                this.match(HiveSqlParser.KW_SCHEDULING_POLICY);
                this.state = 4784;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4785;
                localContext._policy = this.match(HiveSqlParser.StringLiteral);
                }
                break;
            case HiveSqlParser.KW_PATH:
                {
                this.state = 4786;
                this.match(HiveSqlParser.KW_PATH);
                this.state = 4787;
                this.match(HiveSqlParser.EQUAL);
                this.state = 4788;
                localContext._path = this.poolPath();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public poolAssignList(): PoolAssignListContext {
        let localContext = new PoolAssignListContext(this.context, this.state);
        this.enterRule(localContext, 690, HiveSqlParser.RULE_poolAssignList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4791;
            this.poolAssign();
            this.state = 4796;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 397) {
                {
                {
                this.state = 4792;
                this.match(HiveSqlParser.COMMA);
                this.state = 4793;
                this.poolAssign();
                }
                }
                this.state = 4798;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 128:
            return this.columnName_sempred(localContext as ColumnNameContext, predIndex);
        }
        return true;
    }
    private columnName_sempred(localContext: ColumnNameContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.shouldMatchEmpty();
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,438,4800,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        1,0,5,0,694,8,0,10,0,12,0,697,9,0,1,0,1,0,1,1,1,1,3,1,703,8,1,1,
        1,3,1,706,8,1,1,2,1,2,5,2,710,8,2,10,2,12,2,713,9,2,1,2,1,2,1,2,
        3,2,718,8,2,1,3,1,3,1,3,1,3,1,3,3,3,725,8,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,3,3,735,8,3,1,3,3,3,738,8,3,1,3,1,3,3,3,742,8,3,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,757,8,5,1,5,
        1,5,1,5,1,5,1,5,3,5,764,8,5,1,5,1,5,1,5,1,5,3,5,770,8,5,1,5,1,5,
        1,5,3,5,775,8,5,1,5,1,5,1,5,3,5,780,8,5,1,5,3,5,783,8,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,5,5,805,8,5,10,5,12,5,808,9,5,1,5,1,5,5,5,812,8,5,10,5,12,
        5,815,9,5,3,5,817,8,5,1,6,1,6,1,6,3,6,822,8,6,1,6,1,6,1,6,3,6,827,
        8,6,1,6,1,6,1,6,1,6,3,6,833,8,6,1,7,1,7,3,7,837,8,7,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,850,8,8,1,9,1,9,3,9,854,8,9,
        1,9,1,9,3,9,858,8,9,1,9,1,9,1,9,3,9,863,8,9,1,10,1,10,1,10,1,10,
        1,10,3,10,870,8,10,1,10,1,10,3,10,874,8,10,1,11,1,11,1,11,3,11,879,
        8,11,1,12,1,12,1,12,1,12,1,12,3,12,886,8,12,1,12,1,12,3,12,890,8,
        12,1,13,1,13,1,13,3,13,895,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,4,14,941,
        8,14,11,14,12,14,942,1,14,1,14,1,14,4,14,948,8,14,11,14,12,14,949,
        1,14,1,14,1,14,3,14,955,8,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,
        1,21,3,21,978,8,21,1,21,1,21,3,21,982,8,21,1,21,1,21,3,21,986,8,
        21,1,21,3,21,989,8,21,1,21,1,21,3,21,993,8,21,1,21,1,21,1,21,3,21,
        998,8,21,1,21,1,21,1,21,1,21,3,21,1004,8,21,1,21,1,21,3,21,1008,
        8,21,1,21,1,21,1,21,1,21,3,21,1014,8,21,3,21,1016,8,21,1,22,1,22,
        1,22,1,23,1,23,1,23,1,24,1,24,1,24,3,24,1027,8,24,1,24,1,24,3,24,
        1031,8,24,1,25,1,25,1,25,1,26,1,26,3,26,1038,8,26,1,26,1,26,1,26,
        1,26,1,26,1,26,3,26,1046,8,26,1,26,3,26,1049,8,26,1,27,1,27,1,27,
        3,27,1054,8,27,1,27,1,27,3,27,1058,8,27,1,27,3,27,1061,8,27,1,28,
        1,28,1,28,1,28,1,28,1,29,1,29,1,29,3,29,1071,8,29,1,29,1,29,1,29,
        1,29,1,29,1,29,3,29,1079,8,29,5,29,1081,8,29,10,29,12,29,1084,9,
        29,3,29,1086,8,29,1,30,1,30,3,30,1090,8,30,1,31,1,31,3,31,1094,8,
        31,1,31,3,31,1097,8,31,1,32,1,32,1,32,3,32,1102,8,32,1,32,1,32,1,
        32,1,32,3,32,1108,8,32,1,32,1,32,1,32,3,32,1113,8,32,1,32,1,32,1,
        32,3,32,1118,8,32,1,32,1,32,3,32,1122,8,32,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,3,33,1133,8,33,3,33,1135,8,33,1,33,1,33,3,
        33,1139,8,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,3,36,1149,8,
        36,1,36,1,36,3,36,1153,8,36,1,36,1,36,1,36,1,36,3,36,1159,8,36,1,
        36,3,36,1162,8,36,1,36,1,36,1,36,1,36,1,36,3,36,1169,8,36,1,36,1,
        36,1,36,3,36,1174,8,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1182,8,
        36,1,36,1,36,1,36,3,36,1187,8,36,1,36,1,36,3,36,1191,8,36,1,36,1,
        36,1,36,1,36,1,36,1,36,3,36,1199,8,36,1,36,1,36,1,36,3,36,1204,8,
        36,1,36,1,36,1,36,1,36,3,36,1210,8,36,1,36,1,36,1,36,1,36,3,36,1216,
        8,36,1,36,3,36,1219,8,36,1,36,3,36,1222,8,36,1,36,3,36,1225,8,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1234,8,36,1,36,1,36,1,36,
        1,36,1,36,1,36,3,36,1242,8,36,1,36,1,36,1,36,3,36,1247,8,36,1,36,
        1,36,1,36,1,36,1,36,1,36,3,36,1255,8,36,1,36,1,36,1,36,1,36,1,36,
        3,36,1262,8,36,1,36,3,36,1265,8,36,1,36,3,36,1268,8,36,3,36,1270,
        8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1281,8,36,
        3,36,1283,8,36,1,36,3,36,1286,8,36,1,36,3,36,1289,8,36,1,36,3,36,
        1292,8,36,1,36,3,36,1295,8,36,1,36,3,36,1298,8,36,3,36,1300,8,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1312,8,36,
        1,36,1,36,1,36,1,36,3,36,1318,8,36,1,36,1,36,1,36,1,36,1,36,1,36,
        3,36,1326,8,36,3,36,1328,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,3,37,1338,8,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
        1,39,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,
        1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,3,45,1371,8,45,1,45,
        1,45,1,45,3,45,1376,8,45,1,46,1,46,3,46,1380,8,46,1,46,1,46,3,46,
        1384,8,46,1,46,1,46,1,46,1,47,1,47,3,47,1391,8,47,1,47,1,47,1,47,
        5,47,1396,8,47,10,47,12,47,1399,9,47,1,47,1,47,1,47,3,47,1404,8,
        47,1,48,1,48,3,48,1408,8,48,1,48,3,48,1411,8,48,1,48,1,48,1,48,5,
        48,1416,8,48,10,48,12,48,1419,9,48,1,48,1,48,1,48,1,49,1,49,1,49,
        1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,
        1,52,3,52,1441,8,52,1,53,1,53,1,53,3,53,1446,8,53,1,53,1,53,3,53,
        1450,8,53,1,54,1,54,1,54,1,54,1,55,1,55,3,55,1458,8,55,1,56,1,56,
        1,56,1,57,1,57,1,57,1,57,3,57,1467,8,57,1,57,1,57,1,57,1,57,1,57,
        3,57,1474,8,57,1,58,1,58,1,58,1,58,3,58,1480,8,58,1,58,1,58,1,58,
        1,58,1,58,3,58,1487,8,58,1,58,3,58,1490,8,58,1,58,1,58,1,58,1,58,
        3,58,1496,8,58,1,59,1,59,1,59,5,59,1501,8,59,10,59,12,59,1504,9,
        59,1,60,1,60,1,60,1,60,1,60,3,60,1511,8,60,1,61,1,61,1,62,1,62,1,
        62,5,62,1518,8,62,10,62,12,62,1521,9,62,1,63,1,63,1,63,1,63,1,63,
        1,63,3,63,1529,8,63,1,64,1,64,1,64,1,64,1,64,3,64,1536,8,64,1,65,
        1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,68,1,68,
        1,68,1,68,1,69,1,69,3,69,1556,8,69,1,69,1,69,1,69,1,69,1,69,3,69,
        1563,8,69,3,69,1565,8,69,1,70,1,70,1,70,5,70,1570,8,70,10,70,12,
        70,1573,9,70,1,71,1,71,1,71,1,72,1,72,1,73,1,73,3,73,1582,8,73,1,
        73,1,73,1,73,1,73,1,73,1,73,3,73,1590,8,73,1,74,1,74,3,74,1594,8,
        74,1,74,1,74,3,74,1598,8,74,1,74,1,74,1,75,1,75,1,75,1,76,1,76,1,
        76,1,76,1,76,1,76,3,76,1611,8,76,1,76,1,76,1,76,1,77,1,77,1,77,1,
        77,3,77,1620,8,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
        78,1,78,1,78,1,78,1,78,3,78,1636,8,78,1,78,1,78,3,78,1640,8,78,1,
        78,1,78,1,78,3,78,1645,8,78,1,78,1,78,1,78,3,78,1650,8,78,1,78,3,
        78,1653,8,78,1,78,3,78,1656,8,78,1,78,3,78,1659,8,78,1,78,3,78,1662,
        8,78,1,78,3,78,1665,8,78,1,79,1,79,1,79,3,79,1670,8,79,1,79,1,79,
        1,79,1,79,1,80,1,80,1,80,3,80,1679,8,80,1,80,1,80,3,80,1683,8,80,
        1,80,1,80,1,80,1,80,1,80,3,80,1690,8,80,1,80,3,80,1693,8,80,1,80,
        3,80,1696,8,80,1,80,3,80,1699,8,80,1,80,1,80,1,80,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,3,81,1711,8,81,1,81,1,81,1,82,1,82,3,82,1717,
        8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,85,1,85,1,85,
        1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,3,87,
        1743,8,87,1,87,1,87,1,88,1,88,1,88,1,88,3,88,1751,8,88,1,88,1,88,
        3,88,1755,8,88,1,88,3,88,1758,8,88,1,88,3,88,1761,8,88,1,88,3,88,
        1764,8,88,1,88,3,88,1767,8,88,1,88,3,88,1770,8,88,1,88,3,88,1773,
        8,88,1,88,3,88,1776,8,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,3,89,
        1785,8,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1795,8,90,
        1,90,3,90,1798,8,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,
        1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,3,93,1818,8,93,1,94,
        1,94,1,94,1,94,3,94,1824,8,94,1,94,1,94,1,94,1,94,3,94,1830,8,94,
        1,94,3,94,1833,8,94,3,94,1835,8,94,1,95,1,95,1,95,1,95,1,96,3,96,
        1842,8,96,1,96,1,96,1,96,1,97,1,97,3,97,1849,8,97,1,98,1,98,1,98,
        1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,3,100,1862,8,100,1,
        100,1,100,1,100,3,100,1867,8,100,1,100,1,100,1,101,1,101,1,101,5,
        101,1874,8,101,10,101,12,101,1877,9,101,1,102,1,102,1,102,5,102,
        1882,8,102,10,102,12,102,1885,9,102,1,103,1,103,1,103,1,103,1,103,
        3,103,1892,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,1,103,3,103,1905,8,103,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,3,104,1918,8,104,1,104,1,104,
        1,104,1,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,3,105,1934,8,105,1,106,1,106,3,106,1938,8,106,1,107,1,107,
        1,107,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        3,109,1953,8,109,1,110,1,110,1,110,1,110,3,110,1959,8,110,1,110,
        3,110,1962,8,110,1,110,3,110,1965,8,110,1,110,3,110,1968,8,110,1,
        110,3,110,1971,8,110,1,111,1,111,3,111,1975,8,111,1,112,1,112,1,
        112,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,5,114,1988,8,
        114,10,114,12,114,1991,9,114,3,114,1993,8,114,1,115,1,115,1,115,
        1,115,1,116,1,116,1,116,5,116,2002,8,116,10,116,12,116,2005,9,116,
        1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
        3,118,2018,8,118,1,119,1,119,1,119,1,119,1,119,1,119,1,120,1,120,
        1,120,1,120,1,120,1,120,1,121,1,121,1,121,1,121,1,121,1,122,1,122,
        1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
        1,123,1,123,3,123,2052,8,123,1,123,1,123,1,123,1,123,1,123,1,123,
        3,123,2060,8,123,1,123,1,123,1,123,3,123,2065,8,123,1,123,1,123,
        1,123,1,123,1,123,1,123,3,123,2073,8,123,1,123,1,123,1,123,3,123,
        2078,8,123,1,123,1,123,1,123,3,123,2083,8,123,1,124,1,124,1,124,
        5,124,2088,8,124,10,124,12,124,2091,9,124,1,125,1,125,1,125,5,125,
        2096,8,125,10,125,12,125,2099,9,125,1,126,1,126,1,126,5,126,2104,
        8,126,10,126,12,126,2107,9,126,1,127,1,127,1,127,5,127,2112,8,127,
        10,127,12,127,2115,9,127,1,128,1,128,3,128,2119,8,128,1,129,1,129,
        1,130,1,130,1,130,1,130,1,130,1,130,3,130,2129,8,130,5,130,2131,
        8,130,10,130,12,130,2134,9,130,1,131,1,131,1,131,5,131,2139,8,131,
        10,131,12,131,2142,9,131,1,132,1,132,1,132,1,132,1,133,1,133,3,133,
        2150,8,133,1,133,3,133,2153,8,133,1,134,1,134,3,134,2157,8,134,1,
        135,1,135,1,136,1,136,1,136,3,136,2164,8,136,1,137,1,137,1,138,1,
        138,3,138,2170,8,138,1,138,1,138,3,138,2174,8,138,1,139,1,139,1,
        139,1,139,3,139,2180,8,139,1,140,1,140,3,140,2184,8,140,1,141,1,
        141,1,141,1,142,1,142,1,142,1,142,1,142,1,143,1,143,3,143,2196,8,
        143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,3,143,2205,8,143,1,
        144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,2216,8,
        144,1,145,1,145,3,145,2220,8,145,1,146,1,146,1,146,5,146,2225,8,
        146,10,146,12,146,2228,9,146,1,147,1,147,1,147,1,147,1,148,1,148,
        1,148,5,148,2237,8,148,10,148,12,148,2240,9,148,1,149,1,149,1,150,
        1,150,1,150,1,151,1,151,3,151,2249,8,151,1,151,3,151,2252,8,151,
        1,152,1,152,1,152,5,152,2257,8,152,10,152,12,152,2260,9,152,1,153,
        1,153,1,153,3,153,2265,8,153,1,154,1,154,3,154,2269,8,154,1,154,
        3,154,2272,8,154,1,154,3,154,2275,8,154,1,155,1,155,1,155,1,155,
        3,155,2281,8,155,1,156,1,156,3,156,2285,8,156,1,157,1,157,3,157,
        2289,8,157,1,158,1,158,1,158,3,158,2294,8,158,1,158,1,158,3,158,
        2298,8,158,1,159,1,159,3,159,2302,8,159,1,160,1,160,3,160,2306,8,
        160,1,160,1,160,1,160,1,160,1,160,1,160,3,160,2314,8,160,1,161,1,
        161,3,161,2318,8,161,1,161,1,161,3,161,2322,8,161,1,162,1,162,3,
        162,2326,8,162,1,163,1,163,3,163,2330,8,163,1,163,1,163,1,163,1,
        163,1,163,1,163,3,163,2338,8,163,1,164,1,164,3,164,2342,8,164,1,
        164,1,164,3,164,2346,8,164,1,165,1,165,1,165,1,165,1,165,1,165,3,
        165,2354,8,165,1,166,1,166,1,166,3,166,2359,8,166,1,167,1,167,1,
        167,3,167,2364,8,167,1,168,1,168,3,168,2368,8,168,1,169,1,169,3,
        169,2372,8,169,1,170,1,170,1,170,1,170,1,170,3,170,2379,8,170,1,
        171,1,171,1,172,1,172,1,172,5,172,2386,8,172,10,172,12,172,2389,
        9,172,1,173,1,173,1,173,1,173,1,173,3,173,2396,8,173,1,174,1,174,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,2408,8,174,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,
        1,174,1,174,1,174,1,174,1,174,3,174,2426,8,174,1,174,3,174,2429,
        8,174,1,174,1,174,1,174,1,174,3,174,2435,8,174,1,175,1,175,1,175,
        1,175,1,175,1,176,1,176,1,176,1,176,1,176,1,177,1,177,1,177,1,177,
        1,177,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,179,1,179,3,179,
        2461,8,179,1,180,3,180,2464,8,180,1,180,1,180,1,181,1,181,3,181,
        2470,8,181,1,182,1,182,1,182,1,182,5,182,2476,8,182,10,182,12,182,
        2479,9,182,1,183,1,183,1,183,1,183,1,183,3,183,2486,8,183,1,183,
        1,183,1,183,1,183,1,183,1,184,1,184,1,184,1,184,5,184,2497,8,184,
        10,184,12,184,2500,9,184,1,185,1,185,1,185,1,185,3,185,2506,8,185,
        1,185,3,185,2509,8,185,1,185,3,185,2512,8,185,1,185,3,185,2515,8,
        185,1,185,3,185,2518,8,185,1,185,3,185,2521,8,185,1,185,3,185,2524,
        8,185,1,185,3,185,2527,8,185,1,185,3,185,2530,8,185,1,185,3,185,
        2533,8,185,1,185,3,185,2536,8,185,1,185,1,185,1,185,3,185,2541,8,
        185,1,185,3,185,2544,8,185,1,185,3,185,2547,8,185,1,185,3,185,2550,
        8,185,1,185,3,185,2553,8,185,1,185,3,185,2556,8,185,1,185,3,185,
        2559,8,185,1,185,3,185,2562,8,185,1,185,3,185,2565,8,185,1,185,3,
        185,2568,8,185,1,185,3,185,2571,8,185,3,185,2573,8,185,1,186,1,186,
        1,186,1,186,3,186,2579,8,186,1,187,1,187,3,187,2583,8,187,1,187,
        3,187,2586,8,187,1,187,3,187,2589,8,187,1,187,3,187,2592,8,187,1,
        187,3,187,2595,8,187,1,187,3,187,2598,8,187,1,187,1,187,1,187,1,
        187,1,187,3,187,2605,8,187,1,188,1,188,3,188,2609,8,188,1,188,3,
        188,2612,8,188,1,188,3,188,2615,8,188,1,188,3,188,2618,8,188,1,188,
        3,188,2621,8,188,1,188,3,188,2624,8,188,1,189,1,189,1,189,4,189,
        2629,8,189,11,189,12,189,2630,1,190,3,190,2634,8,190,1,190,1,190,
        1,191,1,191,1,191,1,191,3,191,2642,8,191,1,191,1,191,3,191,2646,
        8,191,1,191,1,191,1,191,1,191,1,191,3,191,2653,8,191,3,191,2655,
        8,191,1,192,3,192,2658,8,192,1,192,1,192,1,192,3,192,2663,8,192,
        1,192,3,192,2666,8,192,1,192,1,192,3,192,2670,8,192,1,193,1,193,
        1,193,3,193,2675,8,193,1,193,1,193,1,193,1,193,3,193,2681,8,193,
        1,194,1,194,1,194,1,194,1,195,1,195,3,195,2689,8,195,1,196,1,196,
        1,196,1,196,5,196,2695,8,196,10,196,12,196,2698,9,196,1,197,1,197,
        1,197,1,197,1,197,5,197,2705,8,197,10,197,12,197,2708,9,197,3,197,
        2710,8,197,1,197,1,197,3,197,2714,8,197,1,197,1,197,3,197,2718,8,
        197,1,197,1,197,1,197,3,197,2723,8,197,1,198,1,198,1,198,1,198,1,
        198,3,198,2730,8,198,1,199,1,199,5,199,2734,8,199,10,199,12,199,
        2737,9,199,1,199,3,199,2740,8,199,1,200,1,200,1,200,1,200,1,200,
        3,200,2747,8,200,1,200,1,200,1,200,3,200,2752,8,200,1,200,1,200,
        1,200,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,2765,
        8,201,1,202,1,202,1,202,1,202,1,202,1,202,3,202,2773,8,202,1,203,
        1,203,1,203,1,204,1,204,1,204,1,205,1,205,1,205,1,206,1,206,1,206,
        1,206,1,206,1,206,1,206,1,206,3,206,2792,8,206,1,206,1,206,1,206,
        1,206,1,206,1,206,1,206,1,206,3,206,2802,8,206,1,206,1,206,1,206,
        1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,3,206,2815,8,206,
        1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,3,207,2825,8,207,
        1,207,1,207,3,207,2829,8,207,4,207,2831,8,207,11,207,12,207,2832,
        1,207,1,207,5,207,2837,8,207,10,207,12,207,2840,9,207,1,207,1,207,
        5,207,2844,8,207,10,207,12,207,2847,9,207,1,207,1,207,5,207,2851,
        8,207,10,207,12,207,2854,9,207,1,207,1,207,1,207,1,207,1,207,1,207,
        3,207,2862,8,207,1,207,1,207,1,207,1,207,1,207,3,207,2869,8,207,
        1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
        1,207,1,207,1,207,1,207,1,207,1,207,1,207,3,207,2889,8,207,1,207,
        3,207,2892,8,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
        1,207,1,207,1,207,1,207,3,207,2906,8,207,1,208,1,208,1,208,1,208,
        1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,3,208,2921,
        8,208,1,208,1,208,3,208,2925,8,208,1,208,1,208,1,208,1,208,1,208,
        1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,
        5,208,2943,8,208,10,208,12,208,2946,9,208,1,208,1,208,1,208,1,208,
        1,208,1,208,1,208,1,208,1,208,3,208,2957,8,208,1,208,1,208,1,208,
        1,208,3,208,2963,8,208,1,208,3,208,2966,8,208,1,208,3,208,2969,8,
        208,1,208,1,208,1,208,1,208,3,208,2975,8,208,1,208,1,208,1,208,1,
        208,3,208,2981,8,208,1,208,1,208,1,208,1,208,1,208,3,208,2988,8,
        208,1,208,1,208,1,208,1,208,1,208,1,208,3,208,2996,8,208,1,208,1,
        208,1,208,1,208,3,208,3002,8,208,1,208,1,208,3,208,3006,8,208,1,
        208,1,208,1,208,3,208,3011,8,208,1,208,3,208,3014,8,208,1,208,1,
        208,3,208,3018,8,208,1,208,1,208,1,208,1,208,1,208,3,208,3025,8,
        208,1,208,1,208,1,208,3,208,3030,8,208,1,208,1,208,1,208,3,208,3035,
        8,208,1,208,3,208,3038,8,208,3,208,3040,8,208,1,209,1,209,1,209,
        1,209,1,209,1,209,3,209,3048,8,209,1,209,1,209,1,209,1,209,1,209,
        1,209,3,209,3056,8,209,1,209,1,209,3,209,3060,8,209,4,209,3062,8,
        209,11,209,12,209,3063,1,209,1,209,3,209,3068,8,209,1,210,1,210,
        1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,
        1,210,1,210,3,210,3085,8,210,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,3102,
        8,211,1,212,1,212,1,212,1,213,1,213,3,213,3109,8,213,1,213,1,213,
        1,213,1,213,1,213,5,213,3116,8,213,10,213,12,213,3119,9,213,1,213,
        1,213,3,213,3123,8,213,1,213,3,213,3126,8,213,1,213,3,213,3129,8,
        213,1,214,1,214,3,214,3133,8,214,1,214,1,214,1,214,1,215,1,215,1,
        215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,3,215,3148,8,215,1,
        215,1,215,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,3,216,3162,8,216,1,216,3,216,3165,8,216,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,3,217,3176,8,217,1,218,1,218,
        3,218,3180,8,218,1,218,3,218,3183,8,218,1,218,3,218,3186,8,218,1,
        218,1,218,3,218,3190,8,218,1,218,1,218,1,218,3,218,3195,8,218,1,
        218,3,218,3198,8,218,1,218,3,218,3201,8,218,1,218,3,218,3204,8,218,
        1,218,3,218,3207,8,218,1,218,3,218,3210,8,218,1,218,1,218,1,218,
        1,218,3,218,3216,8,218,1,218,3,218,3219,8,218,1,218,3,218,3222,8,
        218,1,218,3,218,3225,8,218,1,218,3,218,3228,8,218,1,218,3,218,3231,
        8,218,1,218,3,218,3234,8,218,1,218,3,218,3237,8,218,1,218,3,218,
        3240,8,218,1,218,3,218,3243,8,218,1,218,1,218,3,218,3247,8,218,3,
        218,3249,8,218,1,218,1,218,1,218,1,218,3,218,3255,8,218,1,218,1,
        218,1,218,3,218,3260,8,218,1,218,3,218,3263,8,218,1,218,3,218,3266,
        8,218,1,218,3,218,3269,8,218,1,218,3,218,3272,8,218,1,218,1,218,
        1,218,1,218,3,218,3278,8,218,1,218,3,218,3281,8,218,1,218,3,218,
        3284,8,218,1,218,3,218,3287,8,218,1,218,3,218,3290,8,218,1,218,3,
        218,3293,8,218,1,218,3,218,3296,8,218,1,218,3,218,3299,8,218,1,218,
        3,218,3302,8,218,1,218,3,218,3305,8,218,1,218,1,218,3,218,3309,8,
        218,3,218,3311,8,218,3,218,3313,8,218,1,219,1,219,1,219,3,219,3318,
        8,219,1,219,1,219,1,219,3,219,3323,8,219,1,219,1,219,3,219,3327,
        8,219,1,219,1,219,3,219,3331,8,219,1,219,1,219,1,219,3,219,3336,
        8,219,1,220,1,220,1,220,3,220,3341,8,220,1,220,1,220,1,221,1,221,
        1,221,5,221,3348,8,221,10,221,12,221,3351,9,221,1,221,1,221,1,222,
        1,222,1,222,5,222,3358,8,222,10,222,12,222,3361,9,222,1,223,1,223,
        1,223,5,223,3366,8,223,10,223,12,223,3369,9,223,1,224,1,224,1,224,
        1,225,1,225,1,225,1,225,4,225,3378,8,225,11,225,12,225,3379,1,225,
        3,225,3383,8,225,1,226,1,226,5,226,3387,8,226,10,226,12,226,3390,
        9,226,1,226,1,226,5,226,3394,8,226,10,226,12,226,3397,9,226,1,226,
        1,226,5,226,3401,8,226,10,226,12,226,3404,9,226,1,226,1,226,5,226,
        3408,8,226,10,226,12,226,3411,9,226,1,226,1,226,1,226,1,226,3,226,
        3417,8,226,1,227,1,227,1,227,1,227,1,227,1,227,1,227,3,227,3426,
        8,227,5,227,3428,8,227,10,227,12,227,3431,9,227,1,228,1,228,1,228,
        1,228,3,228,3437,8,228,1,228,5,228,3440,8,228,10,228,12,228,3443,
        9,228,1,229,3,229,3446,8,229,1,229,1,229,3,229,3450,8,229,1,229,
        3,229,3453,8,229,1,229,3,229,3456,8,229,1,229,1,229,1,229,1,229,
        1,230,1,230,1,230,1,230,1,230,3,230,3467,8,230,1,230,1,230,3,230,
        3471,8,230,3,230,3473,8,230,1,230,3,230,3476,8,230,1,231,1,231,1,
        231,1,231,1,231,1,231,1,231,1,231,1,231,5,231,3487,8,231,10,231,
        12,231,3490,9,231,3,231,3492,8,231,1,231,3,231,3495,8,231,1,231,
        1,231,1,231,1,231,1,231,1,231,1,231,1,231,5,231,3505,8,231,10,231,
        12,231,3508,9,231,3,231,3510,8,231,1,231,1,231,1,231,1,231,1,231,
        3,231,3517,8,231,1,231,1,231,1,231,1,231,1,231,5,231,3524,8,231,
        10,231,12,231,3527,9,231,1,231,1,231,3,231,3531,8,231,3,231,3533,
        8,231,3,231,3535,8,231,1,232,1,232,1,233,1,233,1,233,1,233,1,233,
        1,233,1,233,1,233,1,233,1,233,1,233,5,233,3550,8,233,10,233,12,233,
        3553,9,233,3,233,3555,8,233,1,233,1,233,1,233,1,233,1,233,1,233,
        3,233,3563,8,233,1,233,3,233,3566,8,233,1,234,1,234,3,234,3570,8,
        234,1,234,3,234,3573,8,234,1,234,3,234,3576,8,234,1,234,3,234,3579,
        8,234,1,234,3,234,3582,8,234,1,235,1,235,1,235,1,235,1,235,1,235,
        1,235,1,235,1,235,1,235,3,235,3594,8,235,1,236,1,236,1,237,1,237,
        1,238,1,238,3,238,3602,8,238,1,239,1,239,1,239,1,239,1,239,3,239,
        3609,8,239,1,239,3,239,3612,8,239,1,240,1,240,1,240,1,240,1,240,
        3,240,3619,8,240,1,240,3,240,3622,8,240,1,241,1,241,1,241,3,241,
        3627,8,241,1,241,1,241,1,242,1,242,1,242,3,242,3634,8,242,1,242,
        1,242,1,243,1,243,1,243,1,243,3,243,3642,8,243,1,243,1,243,1,244,
        1,244,1,244,1,244,3,244,3650,8,244,1,244,1,244,1,244,3,244,3655,
        8,244,1,244,1,244,3,244,3659,8,244,1,245,1,245,1,245,3,245,3664,
        8,245,1,246,1,246,1,246,1,246,1,246,3,246,3671,8,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,1,246,1,246,1,246,5,246,3683,8,246,
        10,246,12,246,3686,9,246,3,246,3688,8,246,1,246,1,246,3,246,3692,
        8,246,1,247,1,247,1,247,1,248,1,248,1,248,1,248,5,248,3701,8,248,
        10,248,12,248,3704,9,248,1,248,1,248,1,248,1,248,1,248,5,248,3711,
        8,248,10,248,12,248,3714,9,248,3,248,3716,8,248,1,249,1,249,1,249,
        1,249,1,249,3,249,3723,8,249,1,249,1,249,1,249,1,249,1,249,5,249,
        3730,8,249,10,249,12,249,3733,9,249,3,249,3735,8,249,1,249,1,249,
        1,250,1,250,3,250,3741,8,250,1,250,3,250,3744,8,250,1,250,1,250,
        1,250,5,250,3749,8,250,10,250,12,250,3752,9,250,1,250,1,250,3,250,
        3756,8,250,1,250,3,250,3759,8,250,1,251,1,251,1,251,1,251,1,251,
        1,251,1,251,1,251,1,251,1,251,1,251,3,251,3772,8,251,1,251,1,251,
        1,251,1,251,3,251,3778,8,251,3,251,3780,8,251,1,251,1,251,1,251,
        1,252,1,252,1,252,3,252,3788,8,252,1,252,3,252,3791,8,252,1,252,
        1,252,1,252,1,252,1,252,1,252,5,252,3799,8,252,10,252,12,252,3802,
        9,252,1,252,1,252,3,252,3806,8,252,3,252,3808,8,252,1,253,1,253,
        1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,3820,8,253,
        1,253,1,253,1,253,1,253,3,253,3826,8,253,3,253,3828,8,253,1,253,
        1,253,1,253,1,254,1,254,3,254,3835,8,254,1,255,1,255,1,255,5,255,
        3840,8,255,10,255,12,255,3843,9,255,1,256,1,256,1,256,1,256,1,256,
        1,256,1,256,1,256,1,256,5,256,3854,8,256,10,256,12,256,3857,9,256,
        1,257,1,257,1,257,3,257,3862,8,257,1,257,3,257,3865,8,257,1,257,
        3,257,3868,8,257,1,257,3,257,3871,8,257,1,258,1,258,1,258,1,258,
        1,258,1,258,1,258,3,258,3880,8,258,1,258,1,258,1,258,1,258,1,258,
        3,258,3887,8,258,1,259,1,259,1,259,1,259,3,259,3893,8,259,1,260,
        1,260,1,260,1,260,1,260,1,260,1,260,3,260,3902,8,260,1,261,1,261,
        3,261,3906,8,261,1,261,1,261,1,261,1,261,5,261,3912,8,261,10,261,
        12,261,3915,9,261,1,261,1,261,1,262,1,262,1,262,1,262,1,262,3,262,
        3924,8,262,1,262,1,262,1,262,1,262,1,262,1,262,5,262,3932,8,262,
        10,262,12,262,3935,9,262,1,262,1,262,3,262,3939,8,262,1,263,1,263,
        3,263,3943,8,263,1,263,1,263,5,263,3947,8,263,10,263,12,263,3950,
        9,263,1,263,1,263,3,263,3954,8,263,1,264,1,264,1,264,1,265,1,265,
        1,265,1,266,1,266,3,266,3964,8,266,1,267,1,267,3,267,3968,8,267,
        1,267,3,267,3971,8,267,1,267,1,267,1,267,3,267,3976,8,267,1,267,
        3,267,3979,8,267,5,267,3981,8,267,10,267,12,267,3984,9,267,1,268,
        1,268,3,268,3988,8,268,1,269,1,269,1,269,1,269,1,270,1,270,1,270,
        4,270,3997,8,270,11,270,12,270,3998,3,270,4001,8,270,1,271,1,271,
        1,271,1,271,1,271,5,271,4008,8,271,10,271,12,271,4011,9,271,1,272,
        1,272,1,272,1,272,1,273,1,273,1,273,1,273,1,274,1,274,1,274,1,274,
        1,274,1,274,5,274,4027,8,274,10,274,12,274,4030,9,274,1,274,1,274,
        1,274,1,274,1,274,5,274,4037,8,274,10,274,12,274,4040,9,274,3,274,
        4042,8,274,1,275,1,275,1,275,1,275,1,275,3,275,4049,8,275,1,275,
        3,275,4052,8,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,
        3,275,4062,8,275,1,275,1,275,1,275,5,275,4067,8,275,10,275,12,275,
        4070,9,275,3,275,4072,8,275,3,275,4074,8,275,1,275,1,275,1,275,1,
        275,1,275,1,275,1,275,1,275,1,275,3,275,4085,8,275,1,275,1,275,1,
        275,1,275,1,275,1,275,1,275,1,275,3,275,4095,8,275,3,275,4097,8,
        275,1,276,1,276,1,276,1,277,1,277,1,278,1,278,3,278,4106,8,278,1,
        279,1,279,1,279,3,279,4111,8,279,1,280,1,280,1,280,1,280,1,280,1,
        280,1,280,3,280,4120,8,280,1,280,1,280,1,281,1,281,1,281,1,281,1,
        281,1,281,1,281,4,281,4131,8,281,11,281,12,281,4132,1,281,1,281,
        3,281,4137,8,281,1,281,1,281,1,282,1,282,1,282,1,282,1,282,1,282,
        4,282,4147,8,282,11,282,12,282,4148,1,282,1,282,3,282,4153,8,282,
        1,282,1,282,1,283,1,283,1,283,1,283,1,283,3,283,4162,8,283,1,283,
        1,283,1,284,1,284,1,284,1,284,1,284,1,284,1,284,1,285,1,285,1,285,
        1,285,1,285,1,285,1,285,1,285,3,285,4181,8,285,1,286,1,286,1,286,
        1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,
        5,286,4197,8,286,10,286,12,286,4200,9,286,1,286,1,286,1,286,1,286,
        1,286,1,286,1,286,1,286,1,286,3,286,4211,8,286,1,287,1,287,1,288,
        1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,3,288,
        4226,8,288,1,288,1,288,3,288,4230,8,288,1,289,1,289,1,289,1,289,
        1,289,1,289,1,289,1,289,1,289,1,289,1,289,1,289,1,289,1,289,3,289,
        4246,8,289,1,290,1,290,1,290,5,290,4251,8,290,10,290,12,290,4254,
        9,290,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,
        1,291,3,291,4267,8,291,1,292,5,292,4270,8,292,10,292,12,292,4273,
        9,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,5,292,4282,8,292,
        10,292,12,292,4285,9,292,1,293,1,293,1,293,5,293,4290,8,293,10,293,
        12,293,4293,9,293,1,294,1,294,1,294,5,294,4298,8,294,10,294,12,294,
        4301,9,294,1,295,1,295,1,295,5,295,4306,8,295,10,295,12,295,4309,
        9,295,1,296,1,296,1,296,5,296,4314,8,296,10,296,12,296,4317,9,296,
        1,297,1,297,1,297,5,297,4322,8,297,10,297,12,297,4325,9,297,1,298,
        1,298,1,298,5,298,4330,8,298,10,298,12,298,4333,9,298,1,299,1,299,
        1,300,1,300,1,300,1,300,1,301,1,301,3,301,4343,8,301,1,301,1,301,
        3,301,4347,8,301,1,302,1,302,1,302,1,302,1,302,1,302,3,302,4355,
        8,302,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,
        1,303,1,303,1,303,1,303,3,303,4371,8,303,1,304,1,304,3,304,4375,
        8,304,1,305,1,305,1,305,3,305,4380,8,305,1,306,1,306,1,306,1,306,
        1,307,1,307,1,307,1,307,1,307,1,307,1,307,3,307,4393,8,307,1,308,
        1,308,1,308,1,308,1,308,1,308,1,308,5,308,4402,8,308,10,308,12,308,
        4405,9,308,1,309,1,309,1,309,1,309,1,309,1,309,3,309,4413,8,309,
        1,310,5,310,4416,8,310,10,310,12,310,4419,9,310,1,310,1,310,1,310,
        3,310,4424,8,310,1,311,1,311,1,311,5,311,4429,8,311,10,311,12,311,
        4432,9,311,1,312,1,312,3,312,4436,8,312,1,313,1,313,1,313,1,313,
        1,313,5,313,4443,8,313,10,313,12,313,4446,9,313,1,313,1,313,1,314,
        1,314,1,314,3,314,4453,8,314,1,315,1,315,1,315,1,315,5,315,4459,
        8,315,10,315,12,315,4462,9,315,1,315,1,315,1,316,1,316,1,316,3,316,
        4469,8,316,1,316,1,316,1,317,1,317,1,318,1,318,1,319,1,319,3,319,
        4479,8,319,1,320,1,320,1,320,3,320,4484,8,320,1,321,1,321,1,322,
        1,322,1,323,1,323,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,
        1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,
        1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,
        1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,
        1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,1,324,3,324,4542,
        8,324,1,325,1,325,1,325,1,325,3,325,4548,8,325,1,325,1,325,1,325,
        1,325,1,325,1,325,1,325,3,325,4557,8,325,3,325,4559,8,325,1,325,
        1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,
        5,325,4573,8,325,10,325,12,325,4576,9,325,1,325,1,325,1,325,1,325,
        1,325,3,325,4583,8,325,1,325,1,325,3,325,4587,8,325,3,325,4589,8,
        325,1,325,1,325,1,325,1,325,3,325,4595,8,325,1,325,1,325,1,325,3,
        325,4600,8,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,
        325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,4617,8,325,1,325,1,
        325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,
        1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,
        1,325,3,325,4643,8,325,1,325,1,325,1,325,3,325,4648,8,325,3,325,
        4650,8,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,
        1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,
        1,325,1,325,1,325,1,325,1,325,1,325,3,325,4678,8,325,1,325,1,325,
        1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,
        1,325,1,325,3,325,4695,8,325,1,325,1,325,1,325,3,325,4700,8,325,
        1,325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,4709,8,325,1,326,
        1,326,1,327,1,327,1,327,1,327,1,327,1,327,1,327,3,327,4720,8,327,
        1,328,1,328,1,328,5,328,4725,8,328,10,328,12,328,4728,9,328,1,329,
        1,329,1,329,3,329,4733,8,329,1,330,1,330,1,330,3,330,4738,8,330,
        1,331,1,331,1,332,1,332,1,333,1,333,1,334,1,334,1,335,1,335,1,336,
        1,336,1,337,1,337,1,338,1,338,1,339,1,339,1,340,1,340,1,341,1,341,
        1,341,5,341,4763,8,341,10,341,12,341,4766,9,341,1,342,1,342,1,342,
        1,342,1,343,1,343,1,343,1,343,3,343,4776,8,343,1,344,1,344,1,344,
        1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,3,344,4790,
        8,344,1,345,1,345,1,345,5,345,4795,8,345,10,345,12,345,4798,9,345,
        1,345,1,813,0,346,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
        212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
        244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,
        276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
        308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
        340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
        372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,
        404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,
        436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,
        468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,
        500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,
        532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,
        564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,
        596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,
        628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,
        660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,
        0,60,2,0,57,57,172,172,4,0,91,91,121,121,226,226,325,325,2,0,50,
        50,346,346,2,0,34,34,282,282,1,0,89,90,2,0,139,139,154,154,2,0,67,
        67,295,295,2,0,68,68,296,296,1,0,155,156,2,0,114,114,307,307,11,
        0,7,7,9,9,58,58,86,86,101,101,155,155,161,161,190,190,299,299,309,
        309,365,365,3,0,4,4,101,101,326,326,3,0,15,15,128,128,170,170,1,
        0,141,142,2,0,30,30,351,351,2,0,217,217,373,373,2,0,214,214,272,
        272,2,0,18,18,89,89,2,0,130,130,177,177,2,0,39,39,376,376,4,0,112,
        112,164,164,205,205,356,356,2,0,7,7,96,96,2,0,125,125,350,350,2,
        0,225,225,391,391,2,0,42,42,315,315,2,0,189,189,196,196,2,0,426,
        426,431,431,2,0,140,140,285,285,3,0,12,12,231,231,300,300,2,0,241,
        241,292,292,2,0,198,198,268,268,2,0,260,260,292,292,2,0,354,354,
        431,431,2,0,133,133,247,247,2,0,152,152,281,281,3,0,413,414,418,
        418,420,420,2,0,412,412,415,417,1,0,413,414,4,0,184,184,270,270,
        286,286,408,411,2,0,7,7,13,13,3,0,7,7,13,13,313,313,3,0,184,184,
        270,270,286,286,4,0,125,125,219,219,350,350,360,360,2,0,405,405,
        407,411,24,0,11,11,16,16,25,28,35,35,100,100,131,132,151,151,154,
        154,162,163,184,184,198,198,216,216,228,228,264,264,270,270,286,
        286,311,311,323,324,340,340,357,357,383,383,405,417,419,421,423,
        423,85,0,1,6,8,8,10,10,15,15,18,20,22,24,30,31,33,34,37,38,40,44,
        46,47,49,50,52,53,56,57,59,59,66,66,68,68,72,77,79,79,83,85,87,89,
        91,95,97,99,103,104,106,107,109,111,114,116,118,121,127,130,137,
        138,142,142,147,150,152,152,155,156,158,160,168,170,172,177,182,
        183,185,187,189,193,195,197,199,202,204,204,206,209,211,212,214,
        215,217,218,220,220,222,223,226,227,232,233,235,236,238,240,243,
        246,252,252,254,255,257,259,261,262,265,267,271,282,284,284,287,
        288,293,298,300,303,305,310,312,312,314,317,319,325,327,328,330,
        330,332,334,339,340,342,342,344,346,349,349,352,353,355,355,357,
        357,360,364,366,368,371,373,375,375,377,382,385,385,388,394,13,0,
        16,16,26,28,63,64,71,71,100,100,131,131,145,145,151,151,162,163,
        198,198,264,264,311,311,337,337,2,0,4,4,101,101,2,0,9,9,58,58,3,
        0,14,14,144,144,369,369,1,0,106,107,1,0,94,95,1,0,392,393,1,0,208,
        209,1,0,381,382,1,0,73,74,1,0,148,149,1,0,206,207,1,0,297,298,1,
        0,80,82,5390,0,695,1,0,0,0,2,702,1,0,0,0,4,707,1,0,0,0,6,741,1,0,
        0,0,8,743,1,0,0,0,10,816,1,0,0,0,12,818,1,0,0,0,14,834,1,0,0,0,16,
        843,1,0,0,0,18,851,1,0,0,0,20,864,1,0,0,0,22,875,1,0,0,0,24,880,
        1,0,0,0,26,891,1,0,0,0,28,954,1,0,0,0,30,956,1,0,0,0,32,959,1,0,
        0,0,34,963,1,0,0,0,36,965,1,0,0,0,38,968,1,0,0,0,40,971,1,0,0,0,
        42,1015,1,0,0,0,44,1017,1,0,0,0,46,1020,1,0,0,0,48,1023,1,0,0,0,
        50,1032,1,0,0,0,52,1035,1,0,0,0,54,1050,1,0,0,0,56,1062,1,0,0,0,
        58,1067,1,0,0,0,60,1087,1,0,0,0,62,1091,1,0,0,0,64,1098,1,0,0,0,
        66,1123,1,0,0,0,68,1140,1,0,0,0,70,1142,1,0,0,0,72,1327,1,0,0,0,
        74,1337,1,0,0,0,76,1339,1,0,0,0,78,1344,1,0,0,0,80,1349,1,0,0,0,
        82,1351,1,0,0,0,84,1355,1,0,0,0,86,1359,1,0,0,0,88,1363,1,0,0,0,
        90,1367,1,0,0,0,92,1377,1,0,0,0,94,1388,1,0,0,0,96,1405,1,0,0,0,
        98,1423,1,0,0,0,100,1428,1,0,0,0,102,1431,1,0,0,0,104,1435,1,0,0,
        0,106,1442,1,0,0,0,108,1451,1,0,0,0,110,1457,1,0,0,0,112,1459,1,
        0,0,0,114,1473,1,0,0,0,116,1495,1,0,0,0,118,1497,1,0,0,0,120,1505,
        1,0,0,0,122,1512,1,0,0,0,124,1514,1,0,0,0,126,1528,1,0,0,0,128,1535,
        1,0,0,0,130,1537,1,0,0,0,132,1541,1,0,0,0,134,1545,1,0,0,0,136,1549,
        1,0,0,0,138,1553,1,0,0,0,140,1566,1,0,0,0,142,1574,1,0,0,0,144,1577,
        1,0,0,0,146,1579,1,0,0,0,148,1591,1,0,0,0,150,1601,1,0,0,0,152,1604,
        1,0,0,0,154,1615,1,0,0,0,156,1623,1,0,0,0,158,1666,1,0,0,0,160,1675,
        1,0,0,0,162,1703,1,0,0,0,164,1716,1,0,0,0,166,1718,1,0,0,0,168,1724,
        1,0,0,0,170,1727,1,0,0,0,172,1733,1,0,0,0,174,1739,1,0,0,0,176,1746,
        1,0,0,0,178,1780,1,0,0,0,180,1788,1,0,0,0,182,1801,1,0,0,0,184,1806,
        1,0,0,0,186,1817,1,0,0,0,188,1834,1,0,0,0,190,1836,1,0,0,0,192,1841,
        1,0,0,0,194,1848,1,0,0,0,196,1850,1,0,0,0,198,1853,1,0,0,0,200,1856,
        1,0,0,0,202,1870,1,0,0,0,204,1878,1,0,0,0,206,1904,1,0,0,0,208,1906,
        1,0,0,0,210,1923,1,0,0,0,212,1937,1,0,0,0,214,1939,1,0,0,0,216,1942,
        1,0,0,0,218,1945,1,0,0,0,220,1954,1,0,0,0,222,1974,1,0,0,0,224,1976,
        1,0,0,0,226,1979,1,0,0,0,228,1992,1,0,0,0,230,1994,1,0,0,0,232,1998,
        1,0,0,0,234,2006,1,0,0,0,236,2010,1,0,0,0,238,2019,1,0,0,0,240,2025,
        1,0,0,0,242,2031,1,0,0,0,244,2036,1,0,0,0,246,2082,1,0,0,0,248,2084,
        1,0,0,0,250,2092,1,0,0,0,252,2100,1,0,0,0,254,2108,1,0,0,0,256,2118,
        1,0,0,0,258,2120,1,0,0,0,260,2122,1,0,0,0,262,2135,1,0,0,0,264,2143,
        1,0,0,0,266,2152,1,0,0,0,268,2156,1,0,0,0,270,2158,1,0,0,0,272,2163,
        1,0,0,0,274,2165,1,0,0,0,276,2169,1,0,0,0,278,2175,1,0,0,0,280,2183,
        1,0,0,0,282,2185,1,0,0,0,284,2188,1,0,0,0,286,2195,1,0,0,0,288,2206,
        1,0,0,0,290,2219,1,0,0,0,292,2221,1,0,0,0,294,2229,1,0,0,0,296,2233,
        1,0,0,0,298,2241,1,0,0,0,300,2243,1,0,0,0,302,2246,1,0,0,0,304,2253,
        1,0,0,0,306,2261,1,0,0,0,308,2268,1,0,0,0,310,2276,1,0,0,0,312,2284,
        1,0,0,0,314,2288,1,0,0,0,316,2290,1,0,0,0,318,2301,1,0,0,0,320,2305,
        1,0,0,0,322,2317,1,0,0,0,324,2325,1,0,0,0,326,2329,1,0,0,0,328,2341,
        1,0,0,0,330,2353,1,0,0,0,332,2358,1,0,0,0,334,2363,1,0,0,0,336,2365,
        1,0,0,0,338,2369,1,0,0,0,340,2373,1,0,0,0,342,2380,1,0,0,0,344,2382,
        1,0,0,0,346,2395,1,0,0,0,348,2434,1,0,0,0,350,2436,1,0,0,0,352,2441,
        1,0,0,0,354,2446,1,0,0,0,356,2453,1,0,0,0,358,2458,1,0,0,0,360,2463,
        1,0,0,0,362,2469,1,0,0,0,364,2471,1,0,0,0,366,2480,1,0,0,0,368,2492,
        1,0,0,0,370,2572,1,0,0,0,372,2578,1,0,0,0,374,2604,1,0,0,0,376,2606,
        1,0,0,0,378,2628,1,0,0,0,380,2633,1,0,0,0,382,2637,1,0,0,0,384,2669,
        1,0,0,0,386,2671,1,0,0,0,388,2682,1,0,0,0,390,2688,1,0,0,0,392,2690,
        1,0,0,0,394,2722,1,0,0,0,396,2729,1,0,0,0,398,2735,1,0,0,0,400,2741,
        1,0,0,0,402,2756,1,0,0,0,404,2766,1,0,0,0,406,2774,1,0,0,0,408,2777,
        1,0,0,0,410,2780,1,0,0,0,412,2783,1,0,0,0,414,2905,1,0,0,0,416,3039,
        1,0,0,0,418,3067,1,0,0,0,420,3084,1,0,0,0,422,3101,1,0,0,0,424,3103,
        1,0,0,0,426,3106,1,0,0,0,428,3132,1,0,0,0,430,3137,1,0,0,0,432,3164,
        1,0,0,0,434,3175,1,0,0,0,436,3312,1,0,0,0,438,3314,1,0,0,0,440,3337,
        1,0,0,0,442,3349,1,0,0,0,444,3354,1,0,0,0,446,3362,1,0,0,0,448,3370,
        1,0,0,0,450,3382,1,0,0,0,452,3416,1,0,0,0,454,3418,1,0,0,0,456,3436,
        1,0,0,0,458,3445,1,0,0,0,460,3475,1,0,0,0,462,3534,1,0,0,0,464,3536,
        1,0,0,0,466,3565,1,0,0,0,468,3567,1,0,0,0,470,3583,1,0,0,0,472,3595,
        1,0,0,0,474,3597,1,0,0,0,476,3601,1,0,0,0,478,3611,1,0,0,0,480,3621,
        1,0,0,0,482,3626,1,0,0,0,484,3633,1,0,0,0,486,3637,1,0,0,0,488,3658,
        1,0,0,0,490,3663,1,0,0,0,492,3665,1,0,0,0,494,3693,1,0,0,0,496,3696,
        1,0,0,0,498,3717,1,0,0,0,500,3758,1,0,0,0,502,3760,1,0,0,0,504,3807,
        1,0,0,0,506,3809,1,0,0,0,508,3834,1,0,0,0,510,3836,1,0,0,0,512,3844,
        1,0,0,0,514,3870,1,0,0,0,516,3872,1,0,0,0,518,3892,1,0,0,0,520,3894,
        1,0,0,0,522,3905,1,0,0,0,524,3918,1,0,0,0,526,3953,1,0,0,0,528,3955,
        1,0,0,0,530,3958,1,0,0,0,532,3963,1,0,0,0,534,3965,1,0,0,0,536,3987,
        1,0,0,0,538,3989,1,0,0,0,540,3993,1,0,0,0,542,4002,1,0,0,0,544,4012,
        1,0,0,0,546,4016,1,0,0,0,548,4020,1,0,0,0,550,4096,1,0,0,0,552,4098,
        1,0,0,0,554,4101,1,0,0,0,556,4105,1,0,0,0,558,4110,1,0,0,0,560,4112,
        1,0,0,0,562,4123,1,0,0,0,564,4140,1,0,0,0,566,4156,1,0,0,0,568,4165,
        1,0,0,0,570,4180,1,0,0,0,572,4210,1,0,0,0,574,4212,1,0,0,0,576,4229,
        1,0,0,0,578,4245,1,0,0,0,580,4247,1,0,0,0,582,4266,1,0,0,0,584,4271,
        1,0,0,0,586,4286,1,0,0,0,588,4294,1,0,0,0,590,4302,1,0,0,0,592,4310,
        1,0,0,0,594,4318,1,0,0,0,596,4326,1,0,0,0,598,4334,1,0,0,0,600,4336,
        1,0,0,0,602,4346,1,0,0,0,604,4354,1,0,0,0,606,4370,1,0,0,0,608,4374,
        1,0,0,0,610,4379,1,0,0,0,612,4381,1,0,0,0,614,4392,1,0,0,0,616,4394,
        1,0,0,0,618,4412,1,0,0,0,620,4417,1,0,0,0,622,4425,1,0,0,0,624,4433,
        1,0,0,0,626,4437,1,0,0,0,628,4449,1,0,0,0,630,4454,1,0,0,0,632,4465,
        1,0,0,0,634,4472,1,0,0,0,636,4474,1,0,0,0,638,4478,1,0,0,0,640,4480,
        1,0,0,0,642,4485,1,0,0,0,644,4487,1,0,0,0,646,4489,1,0,0,0,648,4541,
        1,0,0,0,650,4708,1,0,0,0,652,4710,1,0,0,0,654,4719,1,0,0,0,656,4721,
        1,0,0,0,658,4732,1,0,0,0,660,4734,1,0,0,0,662,4739,1,0,0,0,664,4741,
        1,0,0,0,666,4743,1,0,0,0,668,4745,1,0,0,0,670,4747,1,0,0,0,672,4749,
        1,0,0,0,674,4751,1,0,0,0,676,4753,1,0,0,0,678,4755,1,0,0,0,680,4757,
        1,0,0,0,682,4759,1,0,0,0,684,4767,1,0,0,0,686,4775,1,0,0,0,688,4789,
        1,0,0,0,690,4791,1,0,0,0,692,694,3,2,1,0,693,692,1,0,0,0,694,697,
        1,0,0,0,695,693,1,0,0,0,695,696,1,0,0,0,696,698,1,0,0,0,697,695,
        1,0,0,0,698,699,5,0,0,1,699,1,1,0,0,0,700,703,3,4,2,0,701,703,3,
        10,5,0,702,700,1,0,0,0,702,701,1,0,0,0,703,705,1,0,0,0,704,706,5,
        398,0,0,705,704,1,0,0,0,705,706,1,0,0,0,706,3,1,0,0,0,707,717,5,
        119,0,0,708,710,3,6,3,0,709,708,1,0,0,0,710,713,1,0,0,0,711,709,
        1,0,0,0,711,712,1,0,0,0,712,714,1,0,0,0,713,711,1,0,0,0,714,718,
        3,10,5,0,715,716,5,284,0,0,716,718,3,360,180,0,717,711,1,0,0,0,717,
        715,1,0,0,0,718,5,1,0,0,0,719,742,5,122,0,0,720,742,5,138,0,0,721,
        742,5,88,0,0,722,724,5,37,0,0,723,725,7,0,0,0,724,723,1,0,0,0,724,
        725,1,0,0,0,725,742,1,0,0,0,726,742,5,192,0,0,727,742,5,21,0,0,728,
        742,5,10,0,0,729,742,5,275,0,0,730,742,5,191,0,0,731,742,5,19,0,
        0,732,734,5,377,0,0,733,735,5,225,0,0,734,733,1,0,0,0,734,735,1,
        0,0,0,735,737,1,0,0,0,736,738,3,8,4,0,737,736,1,0,0,0,737,738,1,
        0,0,0,738,742,1,0,0,0,739,742,5,79,0,0,740,742,5,78,0,0,741,719,
        1,0,0,0,741,720,1,0,0,0,741,721,1,0,0,0,741,722,1,0,0,0,741,726,
        1,0,0,0,741,727,1,0,0,0,741,728,1,0,0,0,741,729,1,0,0,0,741,730,
        1,0,0,0,741,731,1,0,0,0,741,732,1,0,0,0,741,739,1,0,0,0,741,740,
        1,0,0,0,742,7,1,0,0,0,743,744,7,1,0,0,744,9,1,0,0,0,745,817,3,360,
        180,0,746,817,3,12,6,0,747,817,3,16,8,0,748,817,3,18,9,0,749,817,
        3,20,10,0,750,817,3,24,12,0,751,752,5,277,0,0,752,753,5,320,0,0,
        753,756,3,472,236,0,754,755,5,387,0,0,755,757,3,230,115,0,756,754,
        1,0,0,0,756,757,1,0,0,0,757,817,1,0,0,0,758,817,3,28,14,0,759,760,
        5,86,0,0,760,761,5,139,0,0,761,763,3,478,239,0,762,764,3,494,247,
        0,763,762,1,0,0,0,763,764,1,0,0,0,764,817,1,0,0,0,765,766,5,365,
        0,0,766,767,3,478,239,0,767,769,3,392,196,0,768,770,3,494,247,0,
        769,768,1,0,0,0,769,770,1,0,0,0,770,817,1,0,0,0,771,817,3,394,197,
        0,772,774,5,203,0,0,773,775,5,436,0,0,774,773,1,0,0,0,774,775,1,
        0,0,0,775,776,1,0,0,0,776,777,5,166,0,0,777,782,3,478,239,0,778,
        780,5,17,0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,
        783,3,638,319,0,782,779,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,
        784,785,5,370,0,0,785,786,3,456,228,0,786,787,5,224,0,0,787,788,
        3,580,290,0,788,789,3,398,199,0,789,817,1,0,0,0,790,791,5,249,0,
        0,791,792,3,638,319,0,792,793,5,139,0,0,793,794,3,360,180,0,794,
        817,1,0,0,0,795,796,5,115,0,0,796,797,3,638,319,0,797,798,5,370,
        0,0,798,799,3,296,148,0,799,817,1,0,0,0,800,801,5,304,0,0,801,806,
        3,648,324,0,802,803,5,395,0,0,803,805,3,648,324,0,804,802,1,0,0,
        0,805,808,1,0,0,0,806,804,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,
        0,808,806,1,0,0,0,809,813,5,405,0,0,810,812,9,0,0,0,811,810,1,0,
        0,0,812,815,1,0,0,0,813,814,1,0,0,0,813,811,1,0,0,0,814,817,1,0,
        0,0,815,813,1,0,0,0,816,745,1,0,0,0,816,746,1,0,0,0,816,747,1,0,
        0,0,816,748,1,0,0,0,816,749,1,0,0,0,816,750,1,0,0,0,816,751,1,0,
        0,0,816,758,1,0,0,0,816,759,1,0,0,0,816,765,1,0,0,0,816,771,1,0,
        0,0,816,772,1,0,0,0,816,790,1,0,0,0,816,795,1,0,0,0,816,800,1,0,
        0,0,817,11,1,0,0,0,818,819,5,187,0,0,819,821,5,66,0,0,820,822,5,
        188,0,0,821,820,1,0,0,0,821,822,1,0,0,0,822,823,1,0,0,0,823,824,
        5,158,0,0,824,826,5,426,0,0,825,827,5,235,0,0,826,825,1,0,0,0,826,
        827,1,0,0,0,827,828,1,0,0,0,828,829,5,166,0,0,829,830,5,329,0,0,
        830,832,3,624,312,0,831,833,3,56,28,0,832,831,1,0,0,0,832,833,1,
        0,0,0,833,13,1,0,0,0,834,836,5,134,0,0,835,837,5,204,0,0,836,835,
        1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,838,839,5,279,0,0,839,840,
        5,399,0,0,840,841,5,426,0,0,841,842,5,400,0,0,842,15,1,0,0,0,843,
        844,5,120,0,0,844,845,5,329,0,0,845,846,3,624,312,0,846,847,5,341,
        0,0,847,849,5,426,0,0,848,850,3,14,7,0,849,848,1,0,0,0,849,850,1,
        0,0,0,850,17,1,0,0,0,851,857,5,153,0,0,852,854,5,123,0,0,853,852,
        1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,856,5,329,0,0,856,858,
        3,624,312,0,857,853,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,
        860,5,139,0,0,860,862,5,426,0,0,861,863,3,424,212,0,862,861,1,0,
        0,0,862,863,1,0,0,0,863,19,1,0,0,0,864,865,5,277,0,0,865,866,5,103,
        0,0,866,869,3,22,11,0,867,868,5,278,0,0,868,870,3,22,11,0,869,867,
        1,0,0,0,869,870,1,0,0,0,870,873,1,0,0,0,871,872,5,387,0,0,872,874,
        3,230,115,0,873,871,1,0,0,0,873,874,1,0,0,0,874,21,1,0,0,0,875,878,
        3,472,236,0,876,877,5,395,0,0,877,879,3,26,13,0,878,876,1,0,0,0,
        878,879,1,0,0,0,879,23,1,0,0,0,880,881,5,277,0,0,881,882,5,187,0,
        0,882,885,3,22,11,0,883,884,5,166,0,0,884,886,3,472,236,0,885,883,
        1,0,0,0,885,886,1,0,0,0,886,889,1,0,0,0,887,888,5,387,0,0,888,890,
        3,230,115,0,889,887,1,0,0,0,889,890,1,0,0,0,890,25,1,0,0,0,891,894,
        5,426,0,0,892,893,5,395,0,0,893,895,5,426,0,0,894,892,1,0,0,0,894,
        895,1,0,0,0,895,27,1,0,0,0,896,955,3,42,21,0,897,955,3,46,23,0,898,
        955,3,48,24,0,899,955,3,436,218,0,900,955,3,54,27,0,901,955,3,52,
        26,0,902,955,3,412,206,0,903,955,3,64,32,0,904,955,3,72,36,0,905,
        955,3,138,69,0,906,955,3,160,80,0,907,955,3,176,88,0,908,955,3,180,
        90,0,909,955,3,184,92,0,910,955,3,182,91,0,911,955,3,174,87,0,912,
        955,3,178,89,0,913,955,3,146,73,0,914,955,3,152,76,0,915,955,3,148,
        74,0,916,955,3,150,75,0,917,955,3,154,77,0,918,955,3,156,78,0,919,
        955,3,158,79,0,920,955,3,66,33,0,921,955,3,76,38,0,922,955,3,82,
        41,0,923,955,3,78,39,0,924,955,3,84,42,0,925,955,3,86,43,0,926,955,
        3,88,44,0,927,955,3,90,45,0,928,955,3,92,46,0,929,955,3,106,53,0,
        930,955,3,98,49,0,931,955,3,108,54,0,932,955,3,100,50,0,933,955,
        3,94,47,0,934,955,3,96,48,0,935,955,3,104,52,0,936,955,3,102,51,
        0,937,938,5,1,0,0,938,940,7,2,0,0,939,941,5,431,0,0,940,939,1,0,
        0,0,941,942,1,0,0,0,942,940,1,0,0,0,942,943,1,0,0,0,943,955,1,0,
        0,0,944,945,5,176,0,0,945,947,5,258,0,0,946,948,5,426,0,0,947,946,
        1,0,0,0,948,949,1,0,0,0,949,947,1,0,0,0,949,950,1,0,0,0,950,955,
        1,0,0,0,951,955,3,650,325,0,952,955,3,438,219,0,953,955,3,440,220,
        0,954,896,1,0,0,0,954,897,1,0,0,0,954,898,1,0,0,0,954,899,1,0,0,
        0,954,900,1,0,0,0,954,901,1,0,0,0,954,902,1,0,0,0,954,903,1,0,0,
        0,954,904,1,0,0,0,954,905,1,0,0,0,954,906,1,0,0,0,954,907,1,0,0,
        0,954,908,1,0,0,0,954,909,1,0,0,0,954,910,1,0,0,0,954,911,1,0,0,
        0,954,912,1,0,0,0,954,913,1,0,0,0,954,914,1,0,0,0,954,915,1,0,0,
        0,954,916,1,0,0,0,954,917,1,0,0,0,954,918,1,0,0,0,954,919,1,0,0,
        0,954,920,1,0,0,0,954,921,1,0,0,0,954,922,1,0,0,0,954,923,1,0,0,
        0,954,924,1,0,0,0,954,925,1,0,0,0,954,926,1,0,0,0,954,927,1,0,0,
        0,954,928,1,0,0,0,954,929,1,0,0,0,954,930,1,0,0,0,954,931,1,0,0,
        0,954,932,1,0,0,0,954,933,1,0,0,0,954,934,1,0,0,0,954,935,1,0,0,
        0,954,936,1,0,0,0,954,937,1,0,0,0,954,944,1,0,0,0,954,951,1,0,0,
        0,954,952,1,0,0,0,954,953,1,0,0,0,955,29,1,0,0,0,956,957,5,151,0,
        0,957,958,5,117,0,0,958,31,1,0,0,0,959,960,5,151,0,0,960,961,5,216,
        0,0,961,962,5,117,0,0,962,33,1,0,0,0,963,964,7,3,0,0,964,35,1,0,
        0,0,965,966,3,662,331,0,966,967,5,284,0,0,967,37,1,0,0,0,968,969,
        3,664,332,0,969,970,5,284,0,0,970,39,1,0,0,0,971,972,5,321,0,0,972,
        973,5,17,0,0,973,974,5,92,0,0,974,41,1,0,0,0,975,977,5,58,0,0,976,
        978,5,273,0,0,977,976,1,0,0,0,977,978,1,0,0,0,978,979,1,0,0,0,979,
        981,3,70,35,0,980,982,3,32,16,0,981,980,1,0,0,0,981,982,1,0,0,0,
        982,983,1,0,0,0,983,985,3,474,237,0,984,986,3,50,25,0,985,984,1,
        0,0,0,985,986,1,0,0,0,986,988,1,0,0,0,987,989,3,424,212,0,988,987,
        1,0,0,0,988,989,1,0,0,0,989,992,1,0,0,0,990,991,5,196,0,0,991,993,
        5,426,0,0,992,990,1,0,0,0,992,993,1,0,0,0,993,997,1,0,0,0,994,995,
        5,387,0,0,995,996,5,76,0,0,996,998,3,230,115,0,997,994,1,0,0,0,997,
        998,1,0,0,0,998,1016,1,0,0,0,999,1000,5,58,0,0,1000,1001,5,273,0,
        0,1001,1003,3,70,35,0,1002,1004,3,32,16,0,1003,1002,1,0,0,0,1003,
        1004,1,0,0,0,1004,1005,1,0,0,0,1005,1007,3,474,237,0,1006,1008,3,
        50,25,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,
        1013,3,44,22,0,1010,1011,5,387,0,0,1011,1012,5,76,0,0,1012,1014,
        3,230,115,0,1013,1010,1,0,0,0,1013,1014,1,0,0,0,1014,1016,1,0,0,
        0,1015,975,1,0,0,0,1015,999,1,0,0,0,1016,43,1,0,0,0,1017,1018,5,
        370,0,0,1018,1019,3,472,236,0,1019,45,1,0,0,0,1020,1021,5,368,0,
        0,1021,1022,3,472,236,0,1022,47,1,0,0,0,1023,1024,5,101,0,0,1024,
        1026,3,70,35,0,1025,1027,3,30,15,0,1026,1025,1,0,0,0,1026,1027,1,
        0,0,0,1027,1028,1,0,0,0,1028,1030,3,472,236,0,1029,1031,3,34,17,
        0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,49,1,0,0,0,1032,1033,
        5,47,0,0,1033,1034,5,426,0,0,1034,51,1,0,0,0,1035,1037,5,351,0,0,
        1036,1038,5,329,0,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,1039,
        1,0,0,0,1039,1045,3,624,312,0,1040,1041,5,46,0,0,1041,1042,5,399,
        0,0,1042,1043,3,254,127,0,1043,1044,5,400,0,0,1044,1046,1,0,0,0,
        1045,1040,1,0,0,0,1045,1046,1,0,0,0,1046,1048,1,0,0,0,1047,1049,
        5,135,0,0,1048,1047,1,0,0,0,1048,1049,1,0,0,0,1049,53,1,0,0,0,1050,
        1051,5,101,0,0,1051,1053,5,329,0,0,1052,1054,3,30,15,0,1053,1052,
        1,0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,1055,1057,3,478,239,
        0,1056,1058,5,255,0,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,1060,
        1,0,0,0,1059,1061,3,14,7,0,1060,1059,1,0,0,0,1060,1061,1,0,0,0,1061,
        55,1,0,0,0,1062,1063,5,160,0,0,1063,1064,5,426,0,0,1064,1065,5,301,
        0,0,1065,1066,5,426,0,0,1066,57,1,0,0,0,1067,1070,3,638,319,0,1068,
        1069,5,395,0,0,1069,1071,3,638,319,0,1070,1068,1,0,0,0,1070,1071,
        1,0,0,0,1071,1085,1,0,0,0,1072,1082,3,638,319,0,1073,1078,5,395,
        0,0,1074,1079,5,104,0,0,1075,1079,5,175,0,0,1076,1079,5,375,0,0,
        1077,1079,3,638,319,0,1078,1074,1,0,0,0,1078,1075,1,0,0,0,1078,1076,
        1,0,0,0,1078,1077,1,0,0,0,1079,1081,1,0,0,0,1080,1073,1,0,0,0,1081,
        1084,1,0,0,0,1082,1080,1,0,0,0,1082,1083,1,0,0,0,1083,1086,1,0,0,
        0,1084,1082,1,0,0,0,1085,1072,1,0,0,0,1085,1086,1,0,0,0,1086,59,
        1,0,0,0,1087,1089,3,58,29,0,1088,1090,3,626,313,0,1089,1088,1,0,
        0,0,1089,1090,1,0,0,0,1090,61,1,0,0,0,1091,1093,3,476,238,0,1092,
        1094,3,626,313,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1096,1,
        0,0,0,1095,1097,3,260,130,0,1096,1095,1,0,0,0,1096,1097,1,0,0,0,
        1097,63,1,0,0,0,1098,1121,7,4,0,0,1099,1101,3,70,35,0,1100,1102,
        5,122,0,0,1101,1100,1,0,0,0,1101,1102,1,0,0,0,1102,1103,1,0,0,0,
        1103,1104,3,472,236,0,1104,1122,1,0,0,0,1105,1107,5,69,0,0,1106,
        1108,5,122,0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,
        0,0,1109,1122,3,472,236,0,1110,1112,5,141,0,0,1111,1113,5,122,0,
        0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,1113,1114,1,0,0,0,1114,1122,
        3,556,278,0,1115,1118,5,138,0,0,1116,1118,5,122,0,0,1117,1115,1,
        0,0,0,1117,1116,1,0,0,0,1118,1119,1,0,0,0,1119,1122,3,62,31,0,1120,
        1122,3,62,31,0,1121,1099,1,0,0,0,1121,1105,1,0,0,0,1121,1110,1,0,
        0,0,1121,1117,1,0,0,0,1121,1120,1,0,0,0,1122,65,1,0,0,0,1123,1124,
        5,10,0,0,1124,1125,5,329,0,0,1125,1138,3,624,312,0,1126,1127,5,52,
        0,0,1127,1134,5,319,0,0,1128,1135,5,215,0,0,1129,1130,5,134,0,0,
        1130,1132,5,46,0,0,1131,1133,3,254,127,0,1132,1131,1,0,0,0,1132,
        1133,1,0,0,0,1133,1135,1,0,0,0,1134,1128,1,0,0,0,1134,1129,1,0,0,
        0,1134,1135,1,0,0,0,1135,1139,1,0,0,0,1136,1137,5,33,0,0,1137,1139,
        5,204,0,0,1138,1126,1,0,0,0,1138,1136,1,0,0,0,1139,67,1,0,0,0,1140,
        1141,7,5,0,0,1141,69,1,0,0,0,1142,1143,7,6,0,0,1143,71,1,0,0,0,1144,
        1145,5,308,0,0,1145,1148,7,7,0,0,1146,1147,5,184,0,0,1147,1149,3,
        194,97,0,1148,1146,1,0,0,0,1148,1149,1,0,0,0,1149,1328,1,0,0,0,1150,
        1152,5,308,0,0,1151,1153,5,122,0,0,1152,1151,1,0,0,0,1152,1153,1,
        0,0,0,1153,1154,1,0,0,0,1154,1158,5,330,0,0,1155,1156,3,68,34,0,
        1156,1157,3,472,236,0,1157,1159,1,0,0,0,1158,1155,1,0,0,0,1158,1159,
        1,0,0,0,1159,1161,1,0,0,0,1160,1162,3,74,37,0,1161,1160,1,0,0,0,
        1161,1162,1,0,0,0,1162,1328,1,0,0,0,1163,1164,5,308,0,0,1164,1168,
        5,379,0,0,1165,1166,3,68,34,0,1166,1167,3,472,236,0,1167,1169,1,
        0,0,0,1168,1165,1,0,0,0,1168,1169,1,0,0,0,1169,1173,1,0,0,0,1170,
        1171,5,184,0,0,1171,1174,3,194,97,0,1172,1174,3,194,97,0,1173,1170,
        1,0,0,0,1173,1172,1,0,0,0,1173,1174,1,0,0,0,1174,1328,1,0,0,0,1175,
        1176,5,308,0,0,1176,1177,5,202,0,0,1177,1181,5,379,0,0,1178,1179,
        3,68,34,0,1179,1180,3,472,236,0,1180,1182,1,0,0,0,1181,1178,1,0,
        0,0,1181,1182,1,0,0,0,1182,1186,1,0,0,0,1183,1184,5,184,0,0,1184,
        1187,3,194,97,0,1185,1187,3,194,97,0,1186,1183,1,0,0,0,1186,1185,
        1,0,0,0,1186,1187,1,0,0,0,1187,1328,1,0,0,0,1188,1190,5,308,0,0,
        1189,1191,5,315,0,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,1192,
        1,0,0,0,1192,1193,5,46,0,0,1193,1194,3,68,34,0,1194,1198,3,476,238,
        0,1195,1196,3,68,34,0,1196,1197,3,472,236,0,1197,1199,1,0,0,0,1198,
        1195,1,0,0,0,1198,1199,1,0,0,0,1199,1203,1,0,0,0,1200,1201,5,184,
        0,0,1201,1204,3,194,97,0,1202,1204,3,194,97,0,1203,1200,1,0,0,0,
        1203,1202,1,0,0,0,1203,1204,1,0,0,0,1204,1328,1,0,0,0,1205,1206,
        5,308,0,0,1206,1209,5,142,0,0,1207,1208,5,184,0,0,1208,1210,3,556,
        278,0,1209,1207,1,0,0,0,1209,1210,1,0,0,0,1210,1328,1,0,0,0,1211,
        1212,5,308,0,0,1212,1213,5,239,0,0,1213,1215,3,476,238,0,1214,1216,
        3,626,313,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1218,1,0,0,
        0,1217,1219,3,494,247,0,1218,1217,1,0,0,0,1218,1219,1,0,0,0,1219,
        1221,1,0,0,0,1220,1222,3,542,271,0,1221,1220,1,0,0,0,1221,1222,1,
        0,0,0,1222,1224,1,0,0,0,1223,1225,3,386,193,0,1224,1223,1,0,0,0,
        1224,1225,1,0,0,0,1225,1328,1,0,0,0,1226,1227,5,308,0,0,1227,1233,
        5,58,0,0,1228,1229,3,70,35,0,1229,1230,3,472,236,0,1230,1234,1,0,
        0,0,1231,1232,5,329,0,0,1232,1234,3,478,239,0,1233,1228,1,0,0,0,
        1233,1231,1,0,0,0,1234,1328,1,0,0,0,1235,1236,5,308,0,0,1236,1237,
        5,329,0,0,1237,1241,5,122,0,0,1238,1239,3,68,34,0,1239,1240,3,472,
        236,0,1240,1242,1,0,0,0,1241,1238,1,0,0,0,1241,1242,1,0,0,0,1242,
        1243,1,0,0,0,1243,1244,5,184,0,0,1244,1246,3,194,97,0,1245,1247,
        3,626,313,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,1247,1328,1,0,0,
        0,1248,1249,5,308,0,0,1249,1250,5,332,0,0,1250,1254,3,478,239,0,
        1251,1252,5,399,0,0,1252,1253,5,426,0,0,1253,1255,5,400,0,0,1254,
        1251,1,0,0,0,1254,1255,1,0,0,0,1255,1328,1,0,0,0,1256,1257,5,308,
        0,0,1257,1269,5,191,0,0,1258,1259,3,70,35,0,1259,1261,3,472,236,
        0,1260,1262,5,122,0,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1270,
        1,0,0,0,1263,1265,3,60,30,0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,
        1265,1267,1,0,0,0,1266,1268,5,122,0,0,1267,1266,1,0,0,0,1267,1268,
        1,0,0,0,1268,1270,1,0,0,0,1269,1258,1,0,0,0,1269,1264,1,0,0,0,1270,
        1328,1,0,0,0,1271,1272,5,308,0,0,1272,1299,5,50,0,0,1273,1274,5,
        51,0,0,1274,1275,5,405,0,0,1275,1300,5,431,0,0,1276,1277,3,70,35,
        0,1277,1278,3,472,236,0,1278,1283,1,0,0,0,1279,1281,3,60,30,0,1280,
        1279,1,0,0,0,1280,1281,1,0,0,0,1281,1283,1,0,0,0,1282,1276,1,0,0,
        0,1282,1280,1,0,0,0,1283,1285,1,0,0,0,1284,1286,3,406,203,0,1285,
        1284,1,0,0,0,1285,1286,1,0,0,0,1286,1288,1,0,0,0,1287,1289,3,408,
        204,0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,1291,1,0,0,0,1290,
        1292,3,410,205,0,1291,1290,1,0,0,0,1291,1292,1,0,0,0,1292,1294,1,
        0,0,0,1293,1295,3,542,271,0,1294,1293,1,0,0,0,1294,1295,1,0,0,0,
        1295,1297,1,0,0,0,1296,1298,3,386,193,0,1297,1296,1,0,0,0,1297,1298,
        1,0,0,0,1298,1300,1,0,0,0,1299,1273,1,0,0,0,1299,1282,1,0,0,0,1300,
        1328,1,0,0,0,1301,1302,5,308,0,0,1302,1328,5,346,0,0,1303,1304,5,
        308,0,0,1304,1305,5,54,0,0,1305,1328,5,426,0,0,1306,1307,5,308,0,
        0,1307,1311,5,280,0,0,1308,1309,5,243,0,0,1309,1312,3,638,319,0,
        1310,1312,5,244,0,0,1311,1308,1,0,0,0,1311,1310,1,0,0,0,1312,1328,
        1,0,0,0,1313,1314,5,308,0,0,1314,1328,5,70,0,0,1315,1317,5,308,0,
        0,1316,1318,5,138,0,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,1319,
        1,0,0,0,1319,1320,7,8,0,0,1320,1321,5,224,0,0,1321,1325,3,478,239,
        0,1322,1323,3,68,34,0,1323,1324,3,472,236,0,1324,1326,1,0,0,0,1325,
        1322,1,0,0,0,1325,1326,1,0,0,0,1326,1328,1,0,0,0,1327,1144,1,0,0,
        0,1327,1150,1,0,0,0,1327,1163,1,0,0,0,1327,1175,1,0,0,0,1327,1188,
        1,0,0,0,1327,1205,1,0,0,0,1327,1211,1,0,0,0,1327,1226,1,0,0,0,1327,
        1235,1,0,0,0,1327,1248,1,0,0,0,1327,1256,1,0,0,0,1327,1271,1,0,0,
        0,1327,1301,1,0,0,0,1327,1303,1,0,0,0,1327,1306,1,0,0,0,1327,1313,
        1,0,0,0,1327,1315,1,0,0,0,1328,73,1,0,0,0,1329,1330,5,384,0,0,1330,
        1331,3,638,319,0,1331,1332,5,405,0,0,1332,1333,5,426,0,0,1333,1338,
        1,0,0,0,1334,1335,5,184,0,0,1335,1338,3,194,97,0,1336,1338,3,194,
        97,0,1337,1329,1,0,0,0,1337,1334,1,0,0,0,1337,1336,1,0,0,0,1338,
        75,1,0,0,0,1339,1340,5,190,0,0,1340,1341,5,329,0,0,1341,1342,3,624,
        312,0,1342,1343,3,80,40,0,1343,77,1,0,0,0,1344,1345,5,190,0,0,1345,
        1346,3,70,35,0,1346,1347,3,472,236,0,1347,1348,3,80,40,0,1348,79,
        1,0,0,0,1349,1350,7,9,0,0,1350,81,1,0,0,0,1351,1352,5,361,0,0,1352,
        1353,5,329,0,0,1353,1354,3,624,312,0,1354,83,1,0,0,0,1355,1356,5,
        361,0,0,1356,1357,3,70,35,0,1357,1358,3,472,236,0,1358,85,1,0,0,
        0,1359,1360,5,58,0,0,1360,1361,5,287,0,0,1361,1362,3,638,319,0,1362,
        87,1,0,0,0,1363,1364,5,101,0,0,1364,1365,5,287,0,0,1365,1366,3,638,
        319,0,1366,89,1,0,0,0,1367,1368,5,143,0,0,1368,1370,3,118,59,0,1369,
        1371,3,112,56,0,1370,1369,1,0,0,0,1370,1371,1,0,0,0,1371,1372,1,
        0,0,0,1372,1373,5,341,0,0,1373,1375,3,124,62,0,1374,1376,3,130,65,
        0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,1376,91,1,0,0,0,1377,1379,
        5,283,0,0,1378,1380,3,132,66,0,1379,1378,1,0,0,0,1379,1380,1,0,0,
        0,1380,1381,1,0,0,0,1381,1383,3,118,59,0,1382,1384,3,112,56,0,1383,
        1382,1,0,0,0,1383,1384,1,0,0,0,1384,1385,1,0,0,0,1385,1386,5,139,
        0,0,1386,1387,3,124,62,0,1387,93,1,0,0,0,1388,1390,5,143,0,0,1389,
        1391,5,287,0,0,1390,1389,1,0,0,0,1390,1391,1,0,0,0,1391,1392,1,0,
        0,0,1392,1397,3,638,319,0,1393,1394,5,397,0,0,1394,1396,3,638,319,
        0,1395,1393,1,0,0,0,1396,1399,1,0,0,0,1397,1395,1,0,0,0,1397,1398,
        1,0,0,0,1398,1400,1,0,0,0,1399,1397,1,0,0,0,1400,1401,5,341,0,0,
        1401,1403,3,124,62,0,1402,1404,3,136,68,0,1403,1402,1,0,0,0,1403,
        1404,1,0,0,0,1404,95,1,0,0,0,1405,1407,5,283,0,0,1406,1408,3,134,
        67,0,1407,1406,1,0,0,0,1407,1408,1,0,0,0,1408,1410,1,0,0,0,1409,
        1411,5,287,0,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,
        0,0,1412,1417,3,638,319,0,1413,1414,5,397,0,0,1414,1416,3,638,319,
        0,1415,1413,1,0,0,0,1416,1419,1,0,0,0,1417,1415,1,0,0,0,1417,1418,
        1,0,0,0,1418,1420,1,0,0,0,1419,1417,1,0,0,0,1420,1421,5,139,0,0,
        1421,1422,3,124,62,0,1422,97,1,0,0,0,1423,1424,5,308,0,0,1424,1425,
        5,287,0,0,1425,1426,5,143,0,0,1426,1427,3,126,63,0,1427,99,1,0,0,
        0,1428,1429,5,308,0,0,1429,1430,5,288,0,0,1430,101,1,0,0,0,1431,
        1432,5,308,0,0,1432,1433,5,62,0,0,1433,1434,5,288,0,0,1434,103,1,
        0,0,0,1435,1436,5,304,0,0,1436,1440,5,287,0,0,1437,1441,5,7,0,0,
        1438,1441,5,213,0,0,1439,1441,3,638,319,0,1440,1437,1,0,0,0,1440,
        1438,1,0,0,0,1440,1439,1,0,0,0,1441,105,1,0,0,0,1442,1443,5,308,
        0,0,1443,1445,5,143,0,0,1444,1446,3,126,63,0,1445,1444,1,0,0,0,1445,
        1446,1,0,0,0,1446,1449,1,0,0,0,1447,1448,5,224,0,0,1448,1450,3,110,
        55,0,1449,1447,1,0,0,0,1449,1450,1,0,0,0,1450,107,1,0,0,0,1451,1452,
        5,308,0,0,1452,1453,5,252,0,0,1453,1454,3,638,319,0,1454,109,1,0,
        0,0,1455,1458,5,7,0,0,1456,1458,3,116,58,0,1457,1455,1,0,0,0,1457,
        1456,1,0,0,0,1458,111,1,0,0,0,1459,1460,5,224,0,0,1460,1461,3,114,
        57,0,1461,113,1,0,0,0,1462,1463,3,70,35,0,1463,1464,3,472,236,0,
        1464,1474,1,0,0,0,1465,1467,5,329,0,0,1466,1465,1,0,0,0,1466,1467,
        1,0,0,0,1467,1468,1,0,0,0,1468,1474,3,624,312,0,1469,1470,5,366,
        0,0,1470,1474,5,426,0,0,1471,1472,5,303,0,0,1472,1474,3,638,319,
        0,1473,1462,1,0,0,0,1473,1466,1,0,0,0,1473,1469,1,0,0,0,1473,1471,
        1,0,0,0,1474,115,1,0,0,0,1475,1476,3,70,35,0,1476,1477,3,472,236,
        0,1477,1496,1,0,0,0,1478,1480,5,329,0,0,1479,1478,1,0,0,0,1479,1480,
        1,0,0,0,1480,1481,1,0,0,0,1481,1486,3,478,239,0,1482,1483,5,399,
        0,0,1483,1484,3,254,127,0,1484,1485,5,400,0,0,1485,1487,1,0,0,0,
        1486,1482,1,0,0,0,1486,1487,1,0,0,0,1487,1489,1,0,0,0,1488,1490,
        3,626,313,0,1489,1488,1,0,0,0,1489,1490,1,0,0,0,1490,1496,1,0,0,
        0,1491,1492,5,366,0,0,1492,1496,5,426,0,0,1493,1494,5,303,0,0,1494,
        1496,3,638,319,0,1495,1475,1,0,0,0,1495,1479,1,0,0,0,1495,1491,1,
        0,0,0,1495,1493,1,0,0,0,1496,117,1,0,0,0,1497,1502,3,120,60,0,1498,
        1499,5,397,0,0,1499,1501,3,120,60,0,1500,1498,1,0,0,0,1501,1504,
        1,0,0,0,1502,1500,1,0,0,0,1502,1503,1,0,0,0,1503,119,1,0,0,0,1504,
        1502,1,0,0,0,1505,1510,3,122,61,0,1506,1507,5,399,0,0,1507,1508,
        3,254,127,0,1508,1509,5,400,0,0,1509,1511,1,0,0,0,1510,1506,1,0,
        0,0,1510,1511,1,0,0,0,1511,121,1,0,0,0,1512,1513,7,10,0,0,1513,123,
        1,0,0,0,1514,1519,3,126,63,0,1515,1516,5,397,0,0,1516,1518,3,126,
        63,0,1517,1515,1,0,0,0,1518,1521,1,0,0,0,1519,1517,1,0,0,0,1519,
        1520,1,0,0,0,1520,125,1,0,0,0,1521,1519,1,0,0,0,1522,1523,5,369,
        0,0,1523,1529,3,642,321,0,1524,1525,5,144,0,0,1525,1529,3,642,321,
        0,1526,1527,5,287,0,0,1527,1529,3,638,319,0,1528,1522,1,0,0,0,1528,
        1524,1,0,0,0,1528,1526,1,0,0,0,1529,127,1,0,0,0,1530,1531,5,369,
        0,0,1531,1536,3,642,321,0,1532,1533,5,287,0,0,1533,1536,3,638,319,
        0,1534,1536,3,638,319,0,1535,1530,1,0,0,0,1535,1532,1,0,0,0,1535,
        1534,1,0,0,0,1536,129,1,0,0,0,1537,1538,5,387,0,0,1538,1539,5,143,
        0,0,1539,1540,5,227,0,0,1540,131,1,0,0,0,1541,1542,5,143,0,0,1542,
        1543,5,227,0,0,1543,1544,5,134,0,0,1544,133,1,0,0,0,1545,1546,5,
        5,0,0,1546,1547,5,227,0,0,1547,1548,5,134,0,0,1548,135,1,0,0,0,1549,
        1550,5,387,0,0,1550,1551,5,5,0,0,1551,1552,5,227,0,0,1552,137,1,
        0,0,0,1553,1555,5,212,0,0,1554,1556,5,276,0,0,1555,1554,1,0,0,0,
        1555,1556,1,0,0,0,1556,1557,1,0,0,0,1557,1558,5,329,0,0,1558,1564,
        3,478,239,0,1559,1560,7,11,0,0,1560,1562,5,239,0,0,1561,1563,3,630,
        315,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,1565,1,0,0,0,1564,
        1559,1,0,0,0,1564,1565,1,0,0,0,1565,139,1,0,0,0,1566,1571,3,142,
        71,0,1567,1568,5,397,0,0,1568,1570,3,142,71,0,1569,1567,1,0,0,0,
        1570,1573,1,0,0,0,1571,1569,1,0,0,0,1571,1572,1,0,0,0,1572,141,1,
        0,0,0,1573,1571,1,0,0,0,1574,1575,3,144,72,0,1575,1576,5,426,0,0,
        1576,143,1,0,0,0,1577,1578,7,12,0,0,1578,145,1,0,0,0,1579,1581,5,
        58,0,0,1580,1582,5,333,0,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,
        1583,1,0,0,0,1583,1584,5,141,0,0,1584,1585,3,554,277,0,1585,1586,
        5,17,0,0,1586,1589,5,426,0,0,1587,1588,5,370,0,0,1588,1590,3,140,
        70,0,1589,1587,1,0,0,0,1589,1590,1,0,0,0,1590,147,1,0,0,0,1591,1593,
        5,101,0,0,1592,1594,5,333,0,0,1593,1592,1,0,0,0,1593,1594,1,0,0,
        0,1594,1595,1,0,0,0,1595,1597,5,141,0,0,1596,1598,3,30,15,0,1597,
        1596,1,0,0,0,1597,1598,1,0,0,0,1598,1599,1,0,0,0,1599,1600,3,556,
        278,0,1600,149,1,0,0,0,1601,1602,5,271,0,0,1602,1603,7,13,0,0,1603,
        151,1,0,0,0,1604,1605,5,58,0,0,1605,1606,5,333,0,0,1606,1607,5,194,
        0,0,1607,1608,5,432,0,0,1608,1610,5,399,0,0,1609,1611,3,248,124,
        0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,1612,1,0,0,0,1612,1613,
        5,400,0,0,1613,1614,3,580,290,0,1614,153,1,0,0,0,1615,1616,5,101,
        0,0,1616,1617,5,333,0,0,1617,1619,5,194,0,0,1618,1620,3,30,15,0,
        1619,1618,1,0,0,0,1619,1620,1,0,0,0,1620,1621,1,0,0,0,1621,1622,
        5,432,0,0,1622,155,1,0,0,0,1623,1624,5,58,0,0,1624,1625,5,155,0,
        0,1625,1626,3,638,319,0,1626,1627,5,224,0,0,1627,1628,5,329,0,0,
        1628,1629,3,478,239,0,1629,1630,3,264,132,0,1630,1631,5,17,0,0,1631,
        1635,5,426,0,0,1632,1633,5,387,0,0,1633,1634,5,84,0,0,1634,1636,
        5,265,0,0,1635,1632,1,0,0,0,1635,1636,1,0,0,0,1636,1639,1,0,0,0,
        1637,1638,5,150,0,0,1638,1640,3,226,113,0,1639,1637,1,0,0,0,1639,
        1640,1,0,0,0,1640,1644,1,0,0,0,1641,1642,5,154,0,0,1642,1643,5,329,
        0,0,1643,1645,3,478,239,0,1644,1641,1,0,0,0,1644,1645,1,0,0,0,1645,
        1649,1,0,0,0,1646,1647,5,238,0,0,1647,1648,5,32,0,0,1648,1650,3,
        264,132,0,1649,1646,1,0,0,0,1649,1650,1,0,0,0,1650,1655,1,0,0,0,
        1651,1653,3,222,111,0,1652,1651,1,0,0,0,1652,1653,1,0,0,0,1653,1654,
        1,0,0,0,1654,1656,3,246,123,0,1655,1652,1,0,0,0,1655,1656,1,0,0,
        0,1656,1658,1,0,0,0,1657,1659,3,424,212,0,1658,1657,1,0,0,0,1658,
        1659,1,0,0,0,1659,1661,1,0,0,0,1660,1662,3,224,112,0,1661,1660,1,
        0,0,0,1661,1662,1,0,0,0,1662,1664,1,0,0,0,1663,1665,3,196,98,0,1664,
        1663,1,0,0,0,1664,1665,1,0,0,0,1665,157,1,0,0,0,1666,1667,5,101,
        0,0,1667,1669,5,155,0,0,1668,1670,3,30,15,0,1669,1668,1,0,0,0,1669,
        1670,1,0,0,0,1670,1671,1,0,0,0,1671,1672,3,638,319,0,1672,1673,5,
        224,0,0,1673,1674,3,478,239,0,1674,159,1,0,0,0,1675,1678,5,58,0,
        0,1676,1677,5,228,0,0,1677,1679,5,278,0,0,1678,1676,1,0,0,0,1678,
        1679,1,0,0,0,1679,1680,1,0,0,0,1680,1682,5,378,0,0,1681,1683,3,32,
        16,0,1682,1681,1,0,0,0,1682,1683,1,0,0,0,1683,1684,1,0,0,0,1684,
        1689,3,484,242,0,1685,1686,5,399,0,0,1686,1687,3,304,152,0,1687,
        1688,5,400,0,0,1688,1690,1,0,0,0,1689,1685,1,0,0,0,1689,1690,1,0,
        0,0,1690,1692,1,0,0,0,1691,1693,3,196,98,0,1692,1691,1,0,0,0,1692,
        1693,1,0,0,0,1693,1695,1,0,0,0,1694,1696,3,162,81,0,1695,1694,1,
        0,0,0,1695,1696,1,0,0,0,1696,1698,1,0,0,0,1697,1699,3,224,112,0,
        1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,1700,1,0,0,0,1700,1701,
        5,17,0,0,1701,1702,3,380,190,0,1702,161,1,0,0,0,1703,1704,5,238,
        0,0,1704,1710,5,224,0,0,1705,1706,5,399,0,0,1706,1711,3,254,127,
        0,1707,1708,5,316,0,0,1708,1709,5,399,0,0,1709,1711,3,204,102,0,
        1710,1705,1,0,0,0,1710,1707,1,0,0,0,1711,1712,1,0,0,0,1712,1713,
        5,400,0,0,1713,163,1,0,0,0,1714,1717,3,166,83,0,1715,1717,3,168,
        84,0,1716,1714,1,0,0,0,1716,1715,1,0,0,0,1717,165,1,0,0,0,1718,1719,
        5,42,0,0,1719,1720,5,224,0,0,1720,1721,5,399,0,0,1721,1722,3,254,
        127,0,1722,1723,5,400,0,0,1723,167,1,0,0,0,1724,1725,3,170,85,0,
        1725,1726,3,172,86,0,1726,169,1,0,0,0,1727,1728,5,98,0,0,1728,1729,
        5,224,0,0,1729,1730,5,399,0,0,1730,1731,3,254,127,0,1731,1732,5,
        400,0,0,1732,171,1,0,0,0,1733,1734,5,315,0,0,1734,1735,5,224,0,0,
        1735,1736,5,399,0,0,1736,1737,3,254,127,0,1737,1738,5,400,0,0,1738,
        173,1,0,0,0,1739,1740,5,101,0,0,1740,1742,5,378,0,0,1741,1743,3,
        30,15,0,1742,1741,1,0,0,0,1742,1743,1,0,0,0,1743,1744,1,0,0,0,1744,
        1745,3,482,241,0,1745,175,1,0,0,0,1746,1747,5,58,0,0,1747,1748,5,
        202,0,0,1748,1750,5,378,0,0,1749,1751,3,32,16,0,1750,1749,1,0,0,
        0,1750,1751,1,0,0,0,1751,1752,1,0,0,0,1752,1754,3,484,242,0,1753,
        1755,3,38,19,0,1754,1753,1,0,0,0,1754,1755,1,0,0,0,1755,1757,1,0,
        0,0,1756,1758,3,196,98,0,1757,1756,1,0,0,0,1757,1758,1,0,0,0,1758,
        1760,1,0,0,0,1759,1761,3,162,81,0,1760,1759,1,0,0,0,1760,1761,1,
        0,0,0,1761,1763,1,0,0,0,1762,1764,3,164,82,0,1763,1762,1,0,0,0,1763,
        1764,1,0,0,0,1764,1766,1,0,0,0,1765,1767,3,222,111,0,1766,1765,1,
        0,0,0,1766,1767,1,0,0,0,1767,1769,1,0,0,0,1768,1770,3,246,123,0,
        1769,1768,1,0,0,0,1769,1770,1,0,0,0,1770,1772,1,0,0,0,1771,1773,
        3,424,212,0,1772,1771,1,0,0,0,1772,1773,1,0,0,0,1773,1775,1,0,0,
        0,1774,1776,3,224,112,0,1775,1774,1,0,0,0,1775,1776,1,0,0,0,1776,
        1777,1,0,0,0,1777,1778,5,17,0,0,1778,1779,3,380,190,0,1779,177,1,
        0,0,0,1780,1781,5,101,0,0,1781,1782,5,202,0,0,1782,1784,5,378,0,
        0,1783,1785,3,30,15,0,1784,1783,1,0,0,0,1784,1785,1,0,0,0,1785,1786,
        1,0,0,0,1786,1787,3,482,241,0,1787,179,1,0,0,0,1788,1789,5,58,0,
        0,1789,1790,5,293,0,0,1790,1791,5,258,0,0,1791,1792,3,638,319,0,
        1792,1794,3,188,94,0,1793,1795,3,190,95,0,1794,1793,1,0,0,0,1794,
        1795,1,0,0,0,1795,1797,1,0,0,0,1796,1798,3,268,134,0,1797,1796,1,
        0,0,0,1797,1798,1,0,0,0,1798,1799,1,0,0,0,1799,1800,3,192,96,0,1800,
        181,1,0,0,0,1801,1802,5,101,0,0,1802,1803,5,293,0,0,1803,1804,5,
        258,0,0,1804,1805,3,638,319,0,1805,183,1,0,0,0,1806,1807,5,9,0,0,
        1807,1808,5,293,0,0,1808,1809,5,258,0,0,1809,1810,3,638,319,0,1810,
        1811,3,186,93,0,1811,185,1,0,0,0,1812,1818,3,188,94,0,1813,1818,
        3,190,95,0,1814,1818,3,268,134,0,1815,1818,3,192,96,0,1816,1818,
        5,115,0,0,1817,1812,1,0,0,0,1817,1813,1,0,0,0,1817,1814,1,0,0,0,
        1817,1815,1,0,0,0,1817,1816,1,0,0,0,1818,187,1,0,0,0,1819,1820,5,
        59,0,0,1820,1835,5,426,0,0,1821,1823,5,111,0,0,1822,1824,5,431,0,
        0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,1825,1,0,0,0,1825,1832,
        3,578,289,0,1826,1830,5,20,0,0,1827,1828,5,223,0,0,1828,1830,5,32,
        0,0,1829,1826,1,0,0,0,1829,1827,1,0,0,0,1830,1831,1,0,0,0,1831,1833,
        5,426,0,0,1832,1829,1,0,0,0,1832,1833,1,0,0,0,1833,1835,1,0,0,0,
        1834,1819,1,0,0,0,1834,1821,1,0,0,0,1835,189,1,0,0,0,1836,1837,5,
        116,0,0,1837,1838,5,17,0,0,1838,1839,5,426,0,0,1839,191,1,0,0,0,
        1840,1842,5,85,0,0,1841,1840,1,0,0,0,1841,1842,1,0,0,0,1842,1843,
        1,0,0,0,1843,1844,5,17,0,0,1844,1845,3,2,1,0,1845,193,1,0,0,0,1846,
        1849,3,638,319,0,1847,1849,5,426,0,0,1848,1846,1,0,0,0,1848,1847,
        1,0,0,0,1849,195,1,0,0,0,1850,1851,5,47,0,0,1851,1852,5,426,0,0,
        1852,197,1,0,0,0,1853,1854,5,183,0,0,1854,1855,5,431,0,0,1855,199,
        1,0,0,0,1856,1857,5,238,0,0,1857,1866,5,32,0,0,1858,1861,5,399,0,
        0,1859,1862,3,202,101,0,1860,1862,3,254,127,0,1861,1859,1,0,0,0,
        1861,1860,1,0,0,0,1862,1867,1,0,0,0,1863,1864,5,316,0,0,1864,1865,
        5,399,0,0,1865,1867,3,204,102,0,1866,1858,1,0,0,0,1866,1863,1,0,
        0,0,1867,1868,1,0,0,0,1868,1869,5,400,0,0,1869,201,1,0,0,0,1870,
        1875,3,316,158,0,1871,1872,5,397,0,0,1872,1874,3,316,158,0,1873,
        1871,1,0,0,0,1874,1877,1,0,0,0,1875,1873,1,0,0,0,1875,1876,1,0,0,
        0,1876,203,1,0,0,0,1877,1875,1,0,0,0,1878,1883,3,206,103,0,1879,
        1880,5,397,0,0,1880,1882,3,206,103,0,1881,1879,1,0,0,0,1882,1885,
        1,0,0,0,1883,1881,1,0,0,0,1883,1884,1,0,0,0,1884,205,1,0,0,0,1885,
        1883,1,0,0,0,1886,1905,3,256,128,0,1887,1892,3,666,333,0,1888,1892,
        3,668,334,0,1889,1892,3,672,336,0,1890,1892,3,674,337,0,1891,1887,
        1,0,0,0,1891,1888,1,0,0,0,1891,1889,1,0,0,0,1891,1890,1,0,0,0,1892,
        1893,1,0,0,0,1893,1894,5,399,0,0,1894,1895,3,256,128,0,1895,1896,
        5,400,0,0,1896,1905,1,0,0,0,1897,1898,7,14,0,0,1898,1899,5,399,0,
        0,1899,1900,5,431,0,0,1900,1901,5,397,0,0,1901,1902,3,256,128,0,
        1902,1903,5,400,0,0,1903,1905,1,0,0,0,1904,1886,1,0,0,0,1904,1891,
        1,0,0,0,1904,1897,1,0,0,0,1905,207,1,0,0,0,1906,1907,5,42,0,0,1907,
        1908,5,32,0,0,1908,1909,5,399,0,0,1909,1910,3,254,127,0,1910,1917,
        5,400,0,0,1911,1912,5,315,0,0,1912,1913,5,32,0,0,1913,1914,5,399,
        0,0,1914,1915,3,262,131,0,1915,1916,5,400,0,0,1916,1918,1,0,0,0,
        1917,1911,1,0,0,0,1917,1918,1,0,0,0,1918,1919,1,0,0,0,1919,1920,
        5,166,0,0,1920,1921,5,431,0,0,1921,1922,5,31,0,0,1922,209,1,0,0,
        0,1923,1924,5,310,0,0,1924,1925,5,32,0,0,1925,1926,5,399,0,0,1926,
        1927,3,254,127,0,1927,1928,5,400,0,0,1928,1929,5,224,0,0,1929,1930,
        5,399,0,0,1930,1931,3,290,145,0,1931,1933,5,400,0,0,1932,1934,3,
        40,20,0,1933,1932,1,0,0,0,1933,1934,1,0,0,0,1934,211,1,0,0,0,1935,
        1938,3,218,109,0,1936,1938,3,220,110,0,1937,1935,1,0,0,0,1937,1936,
        1,0,0,0,1938,213,1,0,0,0,1939,1940,5,266,0,0,1940,1941,5,426,0,0,
        1941,215,1,0,0,0,1942,1943,5,267,0,0,1943,1944,5,426,0,0,1944,217,
        1,0,0,0,1945,1946,5,291,0,0,1946,1947,5,137,0,0,1947,1948,5,301,
        0,0,1948,1952,5,426,0,0,1949,1950,5,387,0,0,1950,1951,5,302,0,0,
        1951,1953,3,226,113,0,1952,1949,1,0,0,0,1952,1953,1,0,0,0,1953,219,
        1,0,0,0,1954,1955,5,291,0,0,1955,1956,5,137,0,0,1956,1958,5,87,0,
        0,1957,1959,3,236,118,0,1958,1957,1,0,0,0,1958,1959,1,0,0,0,1959,
        1961,1,0,0,0,1960,1962,3,238,119,0,1961,1960,1,0,0,0,1961,1962,1,
        0,0,0,1962,1964,1,0,0,0,1963,1965,3,240,120,0,1964,1963,1,0,0,0,
        1964,1965,1,0,0,0,1965,1967,1,0,0,0,1966,1968,3,242,121,0,1967,1966,
        1,0,0,0,1967,1968,1,0,0,0,1968,1970,1,0,0,0,1969,1971,3,244,122,
        0,1970,1969,1,0,0,0,1970,1971,1,0,0,0,1971,221,1,0,0,0,1972,1975,
        3,220,110,0,1973,1975,3,218,109,0,1974,1972,1,0,0,0,1974,1973,1,
        0,0,0,1975,223,1,0,0,0,1976,1977,5,332,0,0,1977,1978,3,226,113,0,
        1978,225,1,0,0,0,1979,1980,5,399,0,0,1980,1981,3,228,114,0,1981,
        1982,5,400,0,0,1982,227,1,0,0,0,1983,1993,3,232,116,0,1984,1989,
        5,426,0,0,1985,1986,5,397,0,0,1986,1988,5,426,0,0,1987,1985,1,0,
        0,0,1988,1991,1,0,0,0,1989,1987,1,0,0,0,1989,1990,1,0,0,0,1990,1993,
        1,0,0,0,1991,1989,1,0,0,0,1992,1983,1,0,0,0,1992,1984,1,0,0,0,1993,
        229,1,0,0,0,1994,1995,5,399,0,0,1995,1996,3,232,116,0,1996,1997,
        5,400,0,0,1997,231,1,0,0,0,1998,2003,3,234,117,0,1999,2000,5,397,
        0,0,2000,2002,3,234,117,0,2001,1999,1,0,0,0,2002,2005,1,0,0,0,2003,
        2001,1,0,0,0,2003,2004,1,0,0,0,2004,233,1,0,0,0,2005,2003,1,0,0,
        0,2006,2007,5,426,0,0,2007,2008,5,405,0,0,2008,2009,5,426,0,0,2009,
        235,1,0,0,0,2010,2011,5,127,0,0,2011,2012,5,334,0,0,2012,2013,5,
        32,0,0,2013,2017,5,426,0,0,2014,2015,5,110,0,0,2015,2016,5,32,0,
        0,2016,2018,5,426,0,0,2017,2014,1,0,0,0,2017,2018,1,0,0,0,2018,237,
        1,0,0,0,2019,2020,5,44,0,0,2020,2021,5,169,0,0,2021,2022,5,334,0,
        0,2022,2023,5,32,0,0,2023,2024,5,426,0,0,2024,239,1,0,0,0,2025,2026,
        5,198,0,0,2026,2027,5,174,0,0,2027,2028,5,334,0,0,2028,2029,5,32,
        0,0,2029,2030,5,426,0,0,2030,241,1,0,0,0,2031,2032,5,186,0,0,2032,
        2033,5,334,0,0,2033,2034,5,32,0,0,2034,2035,5,426,0,0,2035,243,1,
        0,0,0,2036,2037,5,219,0,0,2037,2038,5,85,0,0,2038,2039,5,17,0,0,
        2039,2040,5,426,0,0,2040,245,1,0,0,0,2041,2042,5,321,0,0,2042,2043,
        5,17,0,0,2043,2044,5,160,0,0,2044,2045,5,426,0,0,2045,2046,5,233,
        0,0,2046,2051,5,426,0,0,2047,2048,5,159,0,0,2048,2049,5,426,0,0,
        2049,2050,5,232,0,0,2050,2052,5,426,0,0,2051,2047,1,0,0,0,2051,2052,
        1,0,0,0,2052,2083,1,0,0,0,2053,2054,5,321,0,0,2054,2055,5,32,0,0,
        2055,2059,5,426,0,0,2056,2057,5,387,0,0,2057,2058,5,302,0,0,2058,
        2060,3,226,113,0,2059,2056,1,0,0,0,2059,2060,1,0,0,0,2060,2064,1,
        0,0,0,2061,2062,5,321,0,0,2062,2063,5,17,0,0,2063,2065,3,638,319,
        0,2064,2061,1,0,0,0,2064,2065,1,0,0,0,2065,2083,1,0,0,0,2066,2067,
        5,321,0,0,2067,2068,5,32,0,0,2068,2072,3,638,319,0,2069,2070,5,387,
        0,0,2070,2071,5,302,0,0,2071,2073,3,226,113,0,2072,2069,1,0,0,0,
        2072,2073,1,0,0,0,2073,2077,1,0,0,0,2074,2075,5,321,0,0,2075,2076,
        5,17,0,0,2076,2078,3,638,319,0,2077,2074,1,0,0,0,2077,2078,1,0,0,
        0,2078,2083,1,0,0,0,2079,2080,5,321,0,0,2080,2081,5,17,0,0,2081,
        2083,3,638,319,0,2082,2041,1,0,0,0,2082,2053,1,0,0,0,2082,2066,1,
        0,0,0,2082,2079,1,0,0,0,2083,247,1,0,0,0,2084,2089,3,310,155,0,2085,
        2086,5,397,0,0,2086,2088,3,310,155,0,2087,2085,1,0,0,0,2088,2091,
        1,0,0,0,2089,2087,1,0,0,0,2089,2090,1,0,0,0,2090,249,1,0,0,0,2091,
        2089,1,0,0,0,2092,2097,3,312,156,0,2093,2094,5,397,0,0,2094,2096,
        3,312,156,0,2095,2093,1,0,0,0,2096,2099,1,0,0,0,2097,2095,1,0,0,
        0,2097,2098,1,0,0,0,2098,251,1,0,0,0,2099,2097,1,0,0,0,2100,2105,
        3,340,170,0,2101,2102,5,397,0,0,2102,2104,3,340,170,0,2103,2101,
        1,0,0,0,2104,2107,1,0,0,0,2105,2103,1,0,0,0,2105,2106,1,0,0,0,2106,
        253,1,0,0,0,2107,2105,1,0,0,0,2108,2113,3,256,128,0,2109,2110,5,
        397,0,0,2110,2112,3,256,128,0,2111,2109,1,0,0,0,2112,2115,1,0,0,
        0,2113,2111,1,0,0,0,2113,2114,1,0,0,0,2114,255,1,0,0,0,2115,2113,
        1,0,0,0,2116,2119,3,682,341,0,2117,2119,4,128,0,0,2118,2116,1,0,
        0,0,2118,2117,1,0,0,0,2119,257,1,0,0,0,2120,2121,3,638,319,0,2121,
        259,1,0,0,0,2122,2132,3,256,128,0,2123,2128,5,395,0,0,2124,2129,
        5,104,0,0,2125,2129,5,175,0,0,2126,2129,5,375,0,0,2127,2129,3,638,
        319,0,2128,2124,1,0,0,0,2128,2125,1,0,0,0,2128,2126,1,0,0,0,2128,
        2127,1,0,0,0,2129,2131,1,0,0,0,2130,2123,1,0,0,0,2131,2134,1,0,0,
        0,2132,2130,1,0,0,0,2132,2133,1,0,0,0,2133,261,1,0,0,0,2134,2132,
        1,0,0,0,2135,2140,3,302,151,0,2136,2137,5,397,0,0,2137,2139,3,302,
        151,0,2138,2136,1,0,0,0,2139,2142,1,0,0,0,2140,2138,1,0,0,0,2140,
        2141,1,0,0,0,2141,263,1,0,0,0,2142,2140,1,0,0,0,2143,2144,5,399,
        0,0,2144,2145,3,254,127,0,2145,2146,5,400,0,0,2146,265,1,0,0,0,2147,
        2149,3,268,134,0,2148,2150,3,270,135,0,2149,2148,1,0,0,0,2149,2150,
        1,0,0,0,2150,2153,1,0,0,0,2151,2153,3,272,136,0,2152,2147,1,0,0,
        0,2152,2151,1,0,0,0,2153,267,1,0,0,0,2154,2157,3,662,331,0,2155,
        2157,3,664,332,0,2156,2154,1,0,0,0,2156,2155,1,0,0,0,2157,269,1,
        0,0,0,2158,2159,7,15,0,0,2159,271,1,0,0,0,2160,2164,5,109,0,0,2161,
        2162,5,216,0,0,2162,2164,5,109,0,0,2163,2160,1,0,0,0,2163,2161,1,
        0,0,0,2164,273,1,0,0,0,2165,2166,7,16,0,0,2166,275,1,0,0,0,2167,
        2168,5,55,0,0,2168,2170,3,638,319,0,2169,2167,1,0,0,0,2169,2170,
        1,0,0,0,2170,2171,1,0,0,0,2171,2173,3,280,140,0,2172,2174,3,336,
        168,0,2173,2172,1,0,0,0,2173,2174,1,0,0,0,2174,277,1,0,0,0,2175,
        2176,5,55,0,0,2176,2177,3,638,319,0,2177,2179,3,280,140,0,2178,2180,
        3,338,169,0,2179,2178,1,0,0,0,2179,2180,1,0,0,0,2180,279,1,0,0,0,
        2181,2184,3,282,141,0,2182,2184,3,284,142,0,2183,2181,1,0,0,0,2183,
        2182,1,0,0,0,2184,281,1,0,0,0,2185,2186,3,334,167,0,2186,2187,3,
        264,132,0,2187,283,1,0,0,0,2188,2189,5,40,0,0,2189,2190,5,399,0,
        0,2190,2191,3,580,290,0,2191,2192,5,400,0,0,2192,285,1,0,0,0,2193,
        2194,5,55,0,0,2194,2196,3,638,319,0,2195,2193,1,0,0,0,2195,2196,
        1,0,0,0,2196,2197,1,0,0,0,2197,2198,5,136,0,0,2198,2199,5,173,0,
        0,2199,2200,3,264,132,0,2200,2201,5,269,0,0,2201,2202,3,478,239,
        0,2202,2204,3,264,132,0,2203,2205,3,336,168,0,2204,2203,1,0,0,0,
        2204,2205,1,0,0,0,2205,287,1,0,0,0,2206,2207,5,55,0,0,2207,2208,
        3,638,319,0,2208,2209,5,136,0,0,2209,2210,5,173,0,0,2210,2211,3,
        264,132,0,2211,2212,5,269,0,0,2212,2213,3,478,239,0,2213,2215,3,
        264,132,0,2214,2216,3,338,169,0,2215,2214,1,0,0,0,2215,2216,1,0,
        0,0,2216,289,1,0,0,0,2217,2220,3,296,148,0,2218,2220,3,292,146,0,
        2219,2217,1,0,0,0,2219,2218,1,0,0,0,2220,291,1,0,0,0,2221,2226,3,
        294,147,0,2222,2223,5,397,0,0,2223,2225,3,294,147,0,2224,2222,1,
        0,0,0,2225,2228,1,0,0,0,2226,2224,1,0,0,0,2226,2227,1,0,0,0,2227,
        293,1,0,0,0,2228,2226,1,0,0,0,2229,2230,5,399,0,0,2230,2231,3,296,
        148,0,2231,2232,5,400,0,0,2232,295,1,0,0,0,2233,2238,3,572,286,0,
        2234,2235,5,397,0,0,2235,2237,3,572,286,0,2236,2234,1,0,0,0,2237,
        2240,1,0,0,0,2238,2236,1,0,0,0,2238,2239,1,0,0,0,2239,297,1,0,0,
        0,2240,2238,1,0,0,0,2241,2242,7,17,0,0,2242,299,1,0,0,0,2243,2244,
        5,220,0,0,2244,2245,7,18,0,0,2245,301,1,0,0,0,2246,2248,3,256,128,
        0,2247,2249,3,298,149,0,2248,2247,1,0,0,0,2248,2249,1,0,0,0,2249,
        2251,1,0,0,0,2250,2252,3,300,150,0,2251,2250,1,0,0,0,2251,2252,1,
        0,0,0,2252,303,1,0,0,0,2253,2258,3,306,153,0,2254,2255,5,397,0,0,
        2255,2257,3,306,153,0,2256,2254,1,0,0,0,2257,2260,1,0,0,0,2258,2256,
        1,0,0,0,2258,2259,1,0,0,0,2259,305,1,0,0,0,2260,2258,1,0,0,0,2261,
        2264,3,258,129,0,2262,2263,5,47,0,0,2263,2265,5,426,0,0,2264,2262,
        1,0,0,0,2264,2265,1,0,0,0,2265,307,1,0,0,0,2266,2269,3,256,128,0,
        2267,2269,3,580,290,0,2268,2266,1,0,0,0,2268,2267,1,0,0,0,2269,2271,
        1,0,0,0,2270,2272,3,298,149,0,2271,2270,1,0,0,0,2271,2272,1,0,0,
        0,2272,2274,1,0,0,0,2273,2275,3,300,150,0,2274,2273,1,0,0,0,2274,
        2275,1,0,0,0,2275,309,1,0,0,0,2276,2277,3,258,129,0,2277,2280,3,
        342,171,0,2278,2279,5,47,0,0,2279,2281,5,426,0,0,2280,2278,1,0,0,
        0,2280,2281,1,0,0,0,2281,311,1,0,0,0,2282,2285,3,314,157,0,2283,
        2285,3,316,158,0,2284,2282,1,0,0,0,2284,2283,1,0,0,0,2285,313,1,
        0,0,0,2286,2289,3,286,143,0,2287,2289,3,276,138,0,2288,2286,1,0,
        0,0,2288,2287,1,0,0,0,2289,315,1,0,0,0,2290,2291,3,258,129,0,2291,
        2293,3,342,171,0,2292,2294,3,318,159,0,2293,2292,1,0,0,0,2293,2294,
        1,0,0,0,2294,2297,1,0,0,0,2295,2296,5,47,0,0,2296,2298,5,426,0,0,
        2297,2295,1,0,0,0,2297,2298,1,0,0,0,2298,317,1,0,0,0,2299,2302,3,
        320,160,0,2300,2302,3,322,161,0,2301,2299,1,0,0,0,2301,2300,1,0,
        0,0,2302,319,1,0,0,0,2303,2304,5,55,0,0,2304,2306,3,638,319,0,2305,
        2303,1,0,0,0,2305,2306,1,0,0,0,2306,2307,1,0,0,0,2307,2308,5,269,
        0,0,2308,2309,3,478,239,0,2309,2310,5,399,0,0,2310,2311,3,256,128,
        0,2311,2313,5,400,0,0,2312,2314,3,336,168,0,2313,2312,1,0,0,0,2313,
        2314,1,0,0,0,2314,321,1,0,0,0,2315,2316,5,55,0,0,2316,2318,3,638,
        319,0,2317,2315,1,0,0,0,2317,2318,1,0,0,0,2318,2319,1,0,0,0,2319,
        2321,3,330,165,0,2320,2322,3,336,168,0,2321,2320,1,0,0,0,2321,2322,
        1,0,0,0,2322,323,1,0,0,0,2323,2326,3,326,163,0,2324,2326,3,328,164,
        0,2325,2323,1,0,0,0,2325,2324,1,0,0,0,2326,325,1,0,0,0,2327,2328,
        5,55,0,0,2328,2330,3,638,319,0,2329,2327,1,0,0,0,2329,2330,1,0,0,
        0,2330,2331,1,0,0,0,2331,2332,5,269,0,0,2332,2333,3,478,239,0,2333,
        2334,5,399,0,0,2334,2335,3,256,128,0,2335,2337,5,400,0,0,2336,2338,
        3,338,169,0,2337,2336,1,0,0,0,2337,2338,1,0,0,0,2338,327,1,0,0,0,
        2339,2340,5,55,0,0,2340,2342,3,638,319,0,2341,2339,1,0,0,0,2341,
        2342,1,0,0,0,2342,2343,1,0,0,0,2343,2345,3,330,165,0,2344,2346,3,
        338,169,0,2345,2344,1,0,0,0,2345,2346,1,0,0,0,2346,329,1,0,0,0,2347,
        2348,5,216,0,0,2348,2354,5,219,0,0,2349,2350,5,83,0,0,2350,2354,
        3,332,166,0,2351,2354,3,284,142,0,2352,2354,3,334,167,0,2353,2347,
        1,0,0,0,2353,2349,1,0,0,0,2353,2351,1,0,0,0,2353,2352,1,0,0,0,2354,
        331,1,0,0,0,2355,2359,3,572,286,0,2356,2359,3,550,275,0,2357,2359,
        3,560,280,0,2358,2355,1,0,0,0,2358,2356,1,0,0,0,2358,2357,1,0,0,
        0,2359,333,1,0,0,0,2360,2361,5,251,0,0,2361,2364,5,173,0,0,2362,
        2364,5,358,0,0,2363,2360,1,0,0,0,2363,2362,1,0,0,0,2364,335,1,0,
        0,0,2365,2367,3,266,133,0,2366,2368,3,274,137,0,2367,2366,1,0,0,
        0,2367,2368,1,0,0,0,2368,337,1,0,0,0,2369,2371,3,266,133,0,2370,
        2372,3,274,137,0,2371,2370,1,0,0,0,2371,2372,1,0,0,0,2372,339,1,
        0,0,0,2373,2374,3,258,129,0,2374,2375,5,396,0,0,2375,2378,3,342,
        171,0,2376,2377,5,47,0,0,2377,2379,5,426,0,0,2378,2376,1,0,0,0,2378,
        2379,1,0,0,0,2379,341,1,0,0,0,2380,2381,3,346,173,0,2381,343,1,0,
        0,0,2382,2387,3,342,171,0,2383,2384,5,397,0,0,2384,2386,3,342,171,
        0,2385,2383,1,0,0,0,2386,2389,1,0,0,0,2387,2385,1,0,0,0,2387,2388,
        1,0,0,0,2388,345,1,0,0,0,2389,2387,1,0,0,0,2390,2396,3,348,174,0,
        2391,2396,3,350,175,0,2392,2396,3,352,176,0,2393,2396,3,354,177,
        0,2394,2396,3,356,178,0,2395,2390,1,0,0,0,2395,2391,1,0,0,0,2395,
        2392,1,0,0,0,2395,2393,1,0,0,0,2395,2394,1,0,0,0,2396,347,1,0,0,
        0,2397,2435,5,340,0,0,2398,2435,5,311,0,0,2399,2435,5,162,0,0,2400,
        2435,5,163,0,0,2401,2435,5,26,0,0,2402,2435,5,28,0,0,2403,2435,5,
        131,0,0,2404,2435,5,264,0,0,2405,2407,5,100,0,0,2406,2408,5,248,
        0,0,2407,2406,1,0,0,0,2407,2408,1,0,0,0,2408,2435,1,0,0,0,2409,2435,
        5,71,0,0,2410,2435,5,72,0,0,2411,2435,5,337,0,0,2412,2435,5,338,
        0,0,2413,2414,5,337,0,0,2414,2415,5,387,0,0,2415,2416,5,188,0,0,
        2416,2417,5,336,0,0,2417,2435,5,394,0,0,2418,2435,5,323,0,0,2419,
        2435,5,27,0,0,2420,2428,3,680,340,0,2421,2422,5,399,0,0,2422,2425,
        5,431,0,0,2423,2424,5,397,0,0,2424,2426,5,431,0,0,2425,2423,1,0,
        0,0,2425,2426,1,0,0,0,2426,2427,1,0,0,0,2427,2429,5,400,0,0,2428,
        2421,1,0,0,0,2428,2429,1,0,0,0,2429,2435,1,0,0,0,2430,2431,7,19,
        0,0,2431,2432,5,399,0,0,2432,2433,5,431,0,0,2433,2435,5,400,0,0,
        2434,2397,1,0,0,0,2434,2398,1,0,0,0,2434,2399,1,0,0,0,2434,2400,
        1,0,0,0,2434,2401,1,0,0,0,2434,2402,1,0,0,0,2434,2403,1,0,0,0,2434,
        2404,1,0,0,0,2434,2405,1,0,0,0,2434,2409,1,0,0,0,2434,2410,1,0,0,
        0,2434,2411,1,0,0,0,2434,2412,1,0,0,0,2434,2413,1,0,0,0,2434,2418,
        1,0,0,0,2434,2419,1,0,0,0,2434,2420,1,0,0,0,2434,2430,1,0,0,0,2435,
        349,1,0,0,0,2436,2437,5,16,0,0,2437,2438,5,409,0,0,2438,2439,3,346,
        173,0,2439,2440,5,411,0,0,2440,351,1,0,0,0,2441,2442,5,324,0,0,2442,
        2443,5,409,0,0,2443,2444,3,252,126,0,2444,2445,5,411,0,0,2445,353,
        1,0,0,0,2446,2447,5,198,0,0,2447,2448,5,409,0,0,2448,2449,3,348,
        174,0,2449,2450,5,397,0,0,2450,2451,3,346,173,0,2451,2452,5,411,
        0,0,2452,355,1,0,0,0,2453,2454,5,357,0,0,2454,2455,5,409,0,0,2455,
        2456,3,344,172,0,2456,2457,5,411,0,0,2457,357,1,0,0,0,2458,2460,
        7,20,0,0,2459,2461,7,21,0,0,2460,2459,1,0,0,0,2460,2461,1,0,0,0,
        2461,359,1,0,0,0,2462,2464,3,364,182,0,2463,2462,1,0,0,0,2463,2464,
        1,0,0,0,2464,2465,1,0,0,0,2465,2466,3,362,181,0,2466,361,1,0,0,0,
        2467,2470,3,368,184,0,2468,2470,3,372,186,0,2469,2467,1,0,0,0,2469,
        2468,1,0,0,0,2470,363,1,0,0,0,2471,2472,5,387,0,0,2472,2477,3,366,
        183,0,2473,2474,5,397,0,0,2474,2476,3,366,183,0,2475,2473,1,0,0,
        0,2476,2479,1,0,0,0,2477,2475,1,0,0,0,2477,2478,1,0,0,0,2478,365,
        1,0,0,0,2479,2477,1,0,0,0,2480,2485,3,638,319,0,2481,2482,5,399,
        0,0,2482,2483,3,254,127,0,2483,2484,5,400,0,0,2484,2486,1,0,0,0,
        2485,2481,1,0,0,0,2485,2486,1,0,0,0,2486,2487,1,0,0,0,2487,2488,
        5,17,0,0,2488,2489,5,399,0,0,2489,2490,3,360,180,0,2490,2491,5,400,
        0,0,2491,367,1,0,0,0,2492,2498,3,370,185,0,2493,2494,3,358,179,0,
        2494,2495,3,370,185,0,2495,2497,1,0,0,0,2496,2493,1,0,0,0,2497,2500,
        1,0,0,0,2498,2496,1,0,0,0,2498,2499,1,0,0,0,2499,369,1,0,0,0,2500,
        2498,1,0,0,0,2501,2502,3,448,224,0,2502,2503,3,382,191,0,2503,2505,
        3,500,250,0,2504,2506,3,462,231,0,2505,2504,1,0,0,0,2505,2506,1,
        0,0,0,2506,2508,1,0,0,0,2507,2509,3,494,247,0,2508,2507,1,0,0,0,
        2508,2509,1,0,0,0,2509,2511,1,0,0,0,2510,2512,3,520,260,0,2511,2510,
        1,0,0,0,2511,2512,1,0,0,0,2512,2514,1,0,0,0,2513,2515,3,528,264,
        0,2514,2513,1,0,0,0,2514,2515,1,0,0,0,2515,2517,1,0,0,0,2516,2518,
        3,512,256,0,2517,2516,1,0,0,0,2517,2518,1,0,0,0,2518,2520,1,0,0,
        0,2519,2521,3,530,265,0,2520,2519,1,0,0,0,2520,2521,1,0,0,0,2521,
        2523,1,0,0,0,2522,2524,3,542,271,0,2523,2522,1,0,0,0,2523,2524,1,
        0,0,0,2524,2526,1,0,0,0,2525,2527,3,544,272,0,2526,2525,1,0,0,0,
        2526,2527,1,0,0,0,2527,2529,1,0,0,0,2528,2530,3,546,273,0,2529,2528,
        1,0,0,0,2529,2530,1,0,0,0,2530,2532,1,0,0,0,2531,2533,3,548,274,
        0,2532,2531,1,0,0,0,2532,2533,1,0,0,0,2533,2535,1,0,0,0,2534,2536,
        3,386,193,0,2535,2534,1,0,0,0,2535,2536,1,0,0,0,2536,2573,1,0,0,
        0,2537,2538,3,448,224,0,2538,2540,3,500,250,0,2539,2541,3,462,231,
        0,2540,2539,1,0,0,0,2540,2541,1,0,0,0,2541,2543,1,0,0,0,2542,2544,
        3,494,247,0,2543,2542,1,0,0,0,2543,2544,1,0,0,0,2544,2546,1,0,0,
        0,2545,2547,3,520,260,0,2546,2545,1,0,0,0,2546,2547,1,0,0,0,2547,
        2549,1,0,0,0,2548,2550,3,528,264,0,2549,2548,1,0,0,0,2549,2550,1,
        0,0,0,2550,2552,1,0,0,0,2551,2553,3,512,256,0,2552,2551,1,0,0,0,
        2552,2553,1,0,0,0,2553,2555,1,0,0,0,2554,2556,3,530,265,0,2555,2554,
        1,0,0,0,2555,2556,1,0,0,0,2556,2558,1,0,0,0,2557,2559,3,542,271,
        0,2558,2557,1,0,0,0,2558,2559,1,0,0,0,2559,2561,1,0,0,0,2560,2562,
        3,544,272,0,2561,2560,1,0,0,0,2561,2562,1,0,0,0,2562,2564,1,0,0,
        0,2563,2565,3,546,273,0,2564,2563,1,0,0,0,2564,2565,1,0,0,0,2565,
        2567,1,0,0,0,2566,2568,3,548,274,0,2567,2566,1,0,0,0,2567,2568,1,
        0,0,0,2568,2570,1,0,0,0,2569,2571,3,386,193,0,2570,2569,1,0,0,0,
        2570,2571,1,0,0,0,2571,2573,1,0,0,0,2572,2501,1,0,0,0,2572,2537,
        1,0,0,0,2573,371,1,0,0,0,2574,2575,3,382,191,0,2575,2576,3,376,188,
        0,2576,2579,1,0,0,0,2577,2579,3,376,188,0,2578,2574,1,0,0,0,2578,
        2577,1,0,0,0,2579,373,1,0,0,0,2580,2582,3,500,250,0,2581,2583,3,
        448,224,0,2582,2581,1,0,0,0,2582,2583,1,0,0,0,2583,2585,1,0,0,0,
        2584,2586,3,494,247,0,2585,2584,1,0,0,0,2585,2586,1,0,0,0,2586,2588,
        1,0,0,0,2587,2589,3,520,260,0,2588,2587,1,0,0,0,2588,2589,1,0,0,
        0,2589,2591,1,0,0,0,2590,2592,3,528,264,0,2591,2590,1,0,0,0,2591,
        2592,1,0,0,0,2592,2594,1,0,0,0,2593,2595,3,512,256,0,2594,2593,1,
        0,0,0,2594,2595,1,0,0,0,2595,2597,1,0,0,0,2596,2598,3,530,265,0,
        2597,2596,1,0,0,0,2597,2598,1,0,0,0,2598,2605,1,0,0,0,2599,2600,
        5,399,0,0,2600,2601,3,376,188,0,2601,2602,5,400,0,0,2602,2605,1,
        0,0,0,2603,2605,3,496,248,0,2604,2580,1,0,0,0,2604,2599,1,0,0,0,
        2604,2603,1,0,0,0,2605,375,1,0,0,0,2606,2608,3,374,187,0,2607,2609,
        3,378,189,0,2608,2607,1,0,0,0,2608,2609,1,0,0,0,2609,2611,1,0,0,
        0,2610,2612,3,542,271,0,2611,2610,1,0,0,0,2611,2612,1,0,0,0,2612,
        2614,1,0,0,0,2613,2615,3,544,272,0,2614,2613,1,0,0,0,2614,2615,1,
        0,0,0,2615,2617,1,0,0,0,2616,2618,3,546,273,0,2617,2616,1,0,0,0,
        2617,2618,1,0,0,0,2618,2620,1,0,0,0,2619,2621,3,548,274,0,2620,2619,
        1,0,0,0,2620,2621,1,0,0,0,2621,2623,1,0,0,0,2622,2624,3,386,193,
        0,2623,2622,1,0,0,0,2623,2624,1,0,0,0,2624,377,1,0,0,0,2625,2626,
        3,358,179,0,2626,2627,3,374,187,0,2627,2629,1,0,0,0,2628,2625,1,
        0,0,0,2629,2630,1,0,0,0,2630,2628,1,0,0,0,2630,2631,1,0,0,0,2631,
        379,1,0,0,0,2632,2634,3,364,182,0,2633,2632,1,0,0,0,2633,2634,1,
        0,0,0,2634,2635,1,0,0,0,2635,2636,3,376,188,0,2636,381,1,0,0,0,2637,
        2654,5,161,0,0,2638,2639,5,235,0,0,2639,2641,3,384,192,0,2640,2642,
        3,32,16,0,2641,2640,1,0,0,0,2641,2642,1,0,0,0,2642,2655,1,0,0,0,
        2643,2645,5,166,0,0,2644,2646,5,329,0,0,2645,2644,1,0,0,0,2645,2646,
        1,0,0,0,2646,2647,1,0,0,0,2647,2652,3,624,312,0,2648,2649,5,399,
        0,0,2649,2650,3,254,127,0,2650,2651,5,400,0,0,2651,2653,1,0,0,0,
        2652,2648,1,0,0,0,2652,2653,1,0,0,0,2653,2655,1,0,0,0,2654,2638,
        1,0,0,0,2654,2643,1,0,0,0,2655,383,1,0,0,0,2656,2658,5,188,0,0,2657,
        2656,1,0,0,0,2657,2658,1,0,0,0,2658,2659,1,0,0,0,2659,2660,5,93,
        0,0,2660,2662,5,426,0,0,2661,2663,3,222,111,0,2662,2661,1,0,0,0,
        2662,2663,1,0,0,0,2663,2665,1,0,0,0,2664,2666,3,246,123,0,2665,2664,
        1,0,0,0,2665,2666,1,0,0,0,2666,2670,1,0,0,0,2667,2668,5,329,0,0,
        2668,2670,3,624,312,0,2669,2657,1,0,0,0,2669,2667,1,0,0,0,2670,385,
        1,0,0,0,2671,2680,5,185,0,0,2672,2673,5,431,0,0,2673,2675,5,397,
        0,0,2674,2672,1,0,0,0,2674,2675,1,0,0,0,2675,2676,1,0,0,0,2676,2681,
        5,431,0,0,2677,2678,5,431,0,0,2678,2679,5,223,0,0,2679,2681,5,431,
        0,0,2680,2674,1,0,0,0,2680,2677,1,0,0,0,2681,387,1,0,0,0,2682,2683,
        3,256,128,0,2683,2684,5,405,0,0,2684,2685,3,390,195,0,2685,389,1,
        0,0,0,2686,2689,5,83,0,0,2687,2689,3,590,295,0,2688,2686,1,0,0,0,
        2688,2687,1,0,0,0,2689,391,1,0,0,0,2690,2691,5,304,0,0,2691,2696,
        3,388,194,0,2692,2693,5,397,0,0,2693,2695,3,388,194,0,2694,2692,
        1,0,0,0,2695,2698,1,0,0,0,2696,2694,1,0,0,0,2696,2697,1,0,0,0,2697,
        393,1,0,0,0,2698,2696,1,0,0,0,2699,2700,5,318,0,0,2700,2709,5,344,
        0,0,2701,2706,3,396,198,0,2702,2703,5,397,0,0,2703,2705,3,396,198,
        0,2704,2702,1,0,0,0,2705,2708,1,0,0,0,2706,2704,1,0,0,0,2706,2707,
        1,0,0,0,2707,2710,1,0,0,0,2708,2706,1,0,0,0,2709,2701,1,0,0,0,2709,
        2710,1,0,0,0,2710,2723,1,0,0,0,2711,2713,5,48,0,0,2712,2714,5,389,
        0,0,2713,2712,1,0,0,0,2713,2714,1,0,0,0,2714,2723,1,0,0,0,2715,2717,
        5,289,0,0,2716,2718,5,389,0,0,2717,2716,1,0,0,0,2717,2718,1,0,0,
        0,2718,2723,1,0,0,0,2719,2720,5,304,0,0,2720,2721,5,22,0,0,2721,
        2723,7,22,0,0,2722,2699,1,0,0,0,2722,2711,1,0,0,0,2722,2715,1,0,
        0,0,2722,2719,1,0,0,0,2723,395,1,0,0,0,2724,2725,5,168,0,0,2725,
        2726,5,182,0,0,2726,2730,5,312,0,0,2727,2728,5,261,0,0,2728,2730,
        7,23,0,0,2729,2724,1,0,0,0,2729,2727,1,0,0,0,2730,397,1,0,0,0,2731,
        2734,3,402,201,0,2732,2734,3,404,202,0,2733,2731,1,0,0,0,2733,2732,
        1,0,0,0,2734,2737,1,0,0,0,2735,2733,1,0,0,0,2735,2736,1,0,0,0,2736,
        2739,1,0,0,0,2737,2735,1,0,0,0,2738,2740,3,400,200,0,2739,2738,1,
        0,0,0,2739,2740,1,0,0,0,2740,399,1,0,0,0,2741,2742,5,383,0,0,2742,
        2743,5,216,0,0,2743,2746,5,201,0,0,2744,2745,5,11,0,0,2745,2747,
        3,580,290,0,2746,2744,1,0,0,0,2746,2747,1,0,0,0,2747,2748,1,0,0,
        0,2748,2749,5,335,0,0,2749,2751,5,161,0,0,2750,2752,3,264,132,0,
        2751,2750,1,0,0,0,2751,2752,1,0,0,0,2752,2753,1,0,0,0,2753,2754,
        5,374,0,0,2754,2755,3,538,269,0,2755,401,1,0,0,0,2756,2757,5,383,
        0,0,2757,2758,5,201,0,0,2758,2759,5,11,0,0,2759,2760,3,580,290,0,
        2760,2764,5,335,0,0,2761,2762,5,365,0,0,2762,2765,3,392,196,0,2763,
        2765,5,86,0,0,2764,2761,1,0,0,0,2764,2763,1,0,0,0,2765,403,1,0,0,
        0,2766,2767,5,383,0,0,2767,2768,5,201,0,0,2768,2772,5,335,0,0,2769,
        2770,5,365,0,0,2770,2773,3,392,196,0,2771,2773,5,86,0,0,2772,2769,
        1,0,0,0,2772,2771,1,0,0,0,2773,405,1,0,0,0,2774,2775,5,246,0,0,2775,
        2776,5,426,0,0,2776,407,1,0,0,0,2777,2778,5,352,0,0,2778,2779,5,
        426,0,0,2779,409,1,0,0,0,2780,2781,5,320,0,0,2781,2782,5,426,0,0,
        2782,411,1,0,0,0,2783,2814,5,9,0,0,2784,2785,5,329,0,0,2785,2786,
        3,478,239,0,2786,2787,3,414,207,0,2787,2815,1,0,0,0,2788,2789,5,
        378,0,0,2789,2791,3,482,241,0,2790,2792,5,17,0,0,2791,2790,1,0,0,
        0,2791,2792,1,0,0,0,2792,2793,1,0,0,0,2793,2794,3,418,209,0,2794,
        2815,1,0,0,0,2795,2796,5,202,0,0,2796,2797,5,378,0,0,2797,2801,3,
        482,241,0,2798,2802,3,36,18,0,2799,2802,3,38,19,0,2800,2802,5,265,
        0,0,2801,2798,1,0,0,0,2801,2799,1,0,0,0,2801,2800,1,0,0,0,2802,2815,
        1,0,0,0,2803,2804,3,70,35,0,2804,2805,3,420,210,0,2805,2815,1,0,
        0,0,2806,2807,5,69,0,0,2807,2815,3,422,211,0,2808,2809,5,155,0,0,
        2809,2810,3,638,319,0,2810,2811,5,224,0,0,2811,2812,3,624,312,0,
        2812,2813,5,265,0,0,2813,2815,1,0,0,0,2814,2784,1,0,0,0,2814,2788,
        1,0,0,0,2814,2795,1,0,0,0,2814,2803,1,0,0,0,2814,2806,1,0,0,0,2814,
        2808,1,0,0,0,2815,413,1,0,0,0,2816,2817,5,274,0,0,2817,2818,5,341,
        0,0,2818,2906,3,480,240,0,2819,2820,5,102,0,0,2820,2906,5,239,0,
        0,2821,2906,3,426,213,0,2822,2824,5,4,0,0,2823,2825,3,32,16,0,2824,
        2823,1,0,0,0,2824,2825,1,0,0,0,2825,2830,1,0,0,0,2826,2828,3,626,
        313,0,2827,2829,3,424,212,0,2828,2827,1,0,0,0,2828,2829,1,0,0,0,
        2829,2831,1,0,0,0,2830,2826,1,0,0,0,2831,2832,1,0,0,0,2832,2830,
        1,0,0,0,2832,2833,1,0,0,0,2833,2906,1,0,0,0,2834,2838,5,342,0,0,
        2835,2837,3,626,313,0,2836,2835,1,0,0,0,2837,2840,1,0,0,0,2838,2836,
        1,0,0,0,2838,2839,1,0,0,0,2839,2906,1,0,0,0,2840,2838,1,0,0,0,2841,
        2845,5,15,0,0,2842,2844,3,626,313,0,2843,2842,1,0,0,0,2844,2847,
        1,0,0,0,2845,2843,1,0,0,0,2845,2846,1,0,0,0,2846,2906,1,0,0,0,2847,
        2845,1,0,0,0,2848,2852,5,353,0,0,2849,2851,3,626,313,0,2850,2849,
        1,0,0,0,2851,2854,1,0,0,0,2852,2850,1,0,0,0,2852,2853,1,0,0,0,2853,
        2906,1,0,0,0,2854,2852,1,0,0,0,2855,2856,5,304,0,0,2856,2857,5,332,
        0,0,2857,2906,3,226,113,0,2858,2859,5,363,0,0,2859,2861,5,332,0,
        0,2860,2862,3,30,15,0,2861,2860,1,0,0,0,2861,2862,1,0,0,0,2862,2863,
        1,0,0,0,2863,2906,3,226,113,0,2864,2906,3,210,105,0,2865,2868,5,
        216,0,0,2866,2869,5,310,0,0,2867,2869,3,40,20,0,2868,2866,1,0,0,
        0,2868,2867,1,0,0,0,2869,2906,1,0,0,0,2870,2871,5,113,0,0,2871,2872,
        3,626,313,0,2872,2873,5,387,0,0,2873,2874,5,329,0,0,2874,2875,3,
        478,239,0,2875,2906,1,0,0,0,2876,2877,5,237,0,0,2877,2878,5,45,0,
        0,2878,2879,5,399,0,0,2879,2880,3,310,155,0,2880,2881,5,400,0,0,
        2881,2906,1,0,0,0,2882,2883,5,101,0,0,2883,2884,5,55,0,0,2884,2906,
        3,638,319,0,2885,2888,5,4,0,0,2886,2889,3,288,144,0,2887,2889,3,
        278,139,0,2888,2886,1,0,0,0,2888,2887,1,0,0,0,2889,2906,1,0,0,0,
        2890,2892,3,626,313,0,2891,2890,1,0,0,0,2891,2892,1,0,0,0,2892,2893,
        1,0,0,0,2893,2906,3,416,208,0,2894,2895,5,304,0,0,2895,2896,5,236,
        0,0,2896,2906,3,126,63,0,2897,2898,5,304,0,0,2898,2899,5,237,0,0,
        2899,2900,5,316,0,0,2900,2901,5,399,0,0,2901,2902,3,204,102,0,2902,
        2903,5,400,0,0,2903,2906,1,0,0,0,2904,2906,3,430,215,0,2905,2816,
        1,0,0,0,2905,2819,1,0,0,0,2905,2821,1,0,0,0,2905,2822,1,0,0,0,2905,
        2834,1,0,0,0,2905,2841,1,0,0,0,2905,2848,1,0,0,0,2905,2855,1,0,0,
        0,2905,2858,1,0,0,0,2905,2864,1,0,0,0,2905,2865,1,0,0,0,2905,2870,
        1,0,0,0,2905,2876,1,0,0,0,2905,2882,1,0,0,0,2905,2885,1,0,0,0,2905,
        2891,1,0,0,0,2905,2894,1,0,0,0,2905,2897,1,0,0,0,2905,2904,1,0,0,
        0,2906,415,1,0,0,0,2907,2908,5,304,0,0,2908,2909,5,129,0,0,2909,
        3040,3,432,216,0,2910,2911,5,304,0,0,2911,2912,5,189,0,0,2912,3040,
        5,426,0,0,2913,3040,5,53,0,0,2914,2924,5,304,0,0,2915,2916,5,301,
        0,0,2916,2920,5,426,0,0,2917,2918,5,387,0,0,2918,2919,5,302,0,0,
        2919,2921,3,226,113,0,2920,2917,1,0,0,0,2920,2921,1,0,0,0,2921,2925,
        1,0,0,0,2922,2923,5,302,0,0,2923,2925,3,226,113,0,2924,2915,1,0,
        0,0,2924,2922,1,0,0,0,2925,3040,1,0,0,0,2926,2927,5,363,0,0,2927,
        2928,5,302,0,0,2928,3040,3,226,113,0,2929,2930,5,274,0,0,2930,2931,
        5,341,0,0,2931,3040,3,626,313,0,2932,2933,5,166,0,0,2933,2934,5,
        431,0,0,2934,3040,5,31,0,0,2935,2936,5,304,0,0,2936,2937,5,310,0,
        0,2937,2938,5,189,0,0,2938,2939,5,399,0,0,2939,2944,3,428,214,0,
        2940,2941,5,397,0,0,2941,2943,3,428,214,0,2942,2940,1,0,0,0,2943,
        2946,1,0,0,0,2944,2942,1,0,0,0,2944,2945,1,0,0,0,2945,2947,1,0,0,
        0,2946,2944,1,0,0,0,2947,2948,5,400,0,0,2948,3040,1,0,0,0,2949,2950,
        5,216,0,0,2950,3040,7,24,0,0,2951,3040,3,208,104,0,2952,2953,5,49,
        0,0,2953,2956,5,426,0,0,2954,2955,5,11,0,0,2955,2957,5,380,0,0,2956,
        2954,1,0,0,0,2956,2957,1,0,0,0,2957,2962,1,0,0,0,2958,2959,5,42,
        0,0,2959,2960,5,166,0,0,2960,2961,5,431,0,0,2961,2963,5,31,0,0,2962,
        2958,1,0,0,0,2962,2963,1,0,0,0,2963,2965,1,0,0,0,2964,2966,3,542,
        271,0,2965,2964,1,0,0,0,2965,2966,1,0,0,0,2966,2968,1,0,0,0,2967,
        2969,3,406,203,0,2968,2967,1,0,0,0,2968,2969,1,0,0,0,2969,2974,1,
        0,0,0,2970,2971,5,387,0,0,2971,2972,5,235,0,0,2972,2973,5,332,0,
        0,2973,2975,3,226,113,0,2974,2970,1,0,0,0,2974,2975,1,0,0,0,2975,
        3040,1,0,0,0,2976,2977,5,365,0,0,2977,2978,5,319,0,0,2978,2980,5,
        134,0,0,2979,2981,5,45,0,0,2980,2979,1,0,0,0,2980,2981,1,0,0,0,2981,
        2982,1,0,0,0,2982,2983,3,256,128,0,2983,2984,5,304,0,0,2984,2987,
        3,226,113,0,2985,2986,5,47,0,0,2986,2988,5,426,0,0,2987,2985,1,0,
        0,0,2987,2988,1,0,0,0,2988,3040,1,0,0,0,2989,2990,5,365,0,0,2990,
        2991,5,319,0,0,2991,2992,5,304,0,0,2992,3040,3,226,113,0,2993,2995,
        5,38,0,0,2994,2996,5,45,0,0,2995,2994,1,0,0,0,2995,2996,1,0,0,0,
        2996,2997,1,0,0,0,2997,2998,3,256,128,0,2998,2999,3,258,129,0,2999,
        3001,3,342,171,0,3000,3002,3,324,162,0,3001,3000,1,0,0,0,3001,3002,
        1,0,0,0,3002,3005,1,0,0,0,3003,3004,5,47,0,0,3004,3006,5,426,0,0,
        3005,3003,1,0,0,0,3005,3006,1,0,0,0,3006,3010,1,0,0,0,3007,3011,
        5,130,0,0,3008,3009,5,6,0,0,3009,3011,3,638,319,0,3010,3007,1,0,
        0,0,3010,3008,1,0,0,0,3010,3011,1,0,0,0,3011,3013,1,0,0,0,3012,3014,
        3,34,17,0,3013,3012,1,0,0,0,3013,3014,1,0,0,0,3014,3040,1,0,0,0,
        3015,3018,5,4,0,0,3016,3018,5,278,0,0,3017,3015,1,0,0,0,3017,3016,
        1,0,0,0,3018,3019,1,0,0,0,3019,3020,5,46,0,0,3020,3021,5,399,0,0,
        3021,3022,3,248,124,0,3022,3024,5,400,0,0,3023,3025,3,34,17,0,3024,
        3023,1,0,0,0,3024,3025,1,0,0,0,3025,3040,1,0,0,0,3026,3027,5,365,
        0,0,3027,3029,5,46,0,0,3028,3030,3,34,17,0,3029,3028,1,0,0,0,3029,
        3030,1,0,0,0,3030,3040,1,0,0,0,3031,3037,3,268,134,0,3032,3034,5,
        218,0,0,3033,3035,5,34,0,0,3034,3033,1,0,0,0,3034,3035,1,0,0,0,3035,
        3038,1,0,0,0,3036,3038,5,222,0,0,3037,3032,1,0,0,0,3037,3036,1,0,
        0,0,3038,3040,1,0,0,0,3039,2907,1,0,0,0,3039,2910,1,0,0,0,3039,2913,
        1,0,0,0,3039,2914,1,0,0,0,3039,2926,1,0,0,0,3039,2929,1,0,0,0,3039,
        2932,1,0,0,0,3039,2935,1,0,0,0,3039,2949,1,0,0,0,3039,2951,1,0,0,
        0,3039,2952,1,0,0,0,3039,2976,1,0,0,0,3039,2989,1,0,0,0,3039,2993,
        1,0,0,0,3039,3017,1,0,0,0,3039,3026,1,0,0,0,3039,3031,1,0,0,0,3040,
        417,1,0,0,0,3041,3042,5,304,0,0,3042,3043,5,332,0,0,3043,3068,3,
        226,113,0,3044,3045,5,363,0,0,3045,3047,5,332,0,0,3046,3048,3,30,
        15,0,3047,3046,1,0,0,0,3047,3048,1,0,0,0,3048,3049,1,0,0,0,3049,
        3068,3,226,113,0,3050,3051,5,274,0,0,3051,3052,5,341,0,0,3052,3068,
        3,480,240,0,3053,3055,5,4,0,0,3054,3056,3,32,16,0,3055,3054,1,0,
        0,0,3055,3056,1,0,0,0,3056,3061,1,0,0,0,3057,3059,3,626,313,0,3058,
        3060,3,424,212,0,3059,3058,1,0,0,0,3059,3060,1,0,0,0,3060,3062,1,
        0,0,0,3061,3057,1,0,0,0,3062,3063,1,0,0,0,3063,3061,1,0,0,0,3063,
        3064,1,0,0,0,3064,3068,1,0,0,0,3065,3068,3,426,213,0,3066,3068,3,
        380,190,0,3067,3041,1,0,0,0,3067,3044,1,0,0,0,3067,3050,1,0,0,0,
        3067,3053,1,0,0,0,3067,3065,1,0,0,0,3067,3066,1,0,0,0,3068,419,1,
        0,0,0,3069,3070,3,472,236,0,3070,3071,5,304,0,0,3071,3072,5,76,0,
        0,3072,3073,3,230,115,0,3073,3085,1,0,0,0,3074,3075,3,472,236,0,
        3075,3076,5,304,0,0,3076,3077,5,236,0,0,3077,3078,3,128,64,0,3078,
        3085,1,0,0,0,3079,3080,3,472,236,0,3080,3081,5,304,0,0,3081,3082,
        7,25,0,0,3082,3083,5,426,0,0,3083,3085,1,0,0,0,3084,3069,1,0,0,0,
        3084,3074,1,0,0,0,3084,3079,1,0,0,0,3085,421,1,0,0,0,3086,3087,3,
        472,236,0,3087,3088,5,304,0,0,3088,3089,5,77,0,0,3089,3090,3,230,
        115,0,3090,3102,1,0,0,0,3091,3092,3,472,236,0,3092,3093,5,304,0,
        0,3093,3094,5,236,0,0,3094,3095,3,128,64,0,3095,3102,1,0,0,0,3096,
        3097,3,472,236,0,3097,3098,5,304,0,0,3098,3099,5,367,0,0,3099,3100,
        5,426,0,0,3100,3102,1,0,0,0,3101,3086,1,0,0,0,3101,3091,1,0,0,0,
        3101,3096,1,0,0,0,3102,423,1,0,0,0,3103,3104,5,189,0,0,3104,3105,
        5,426,0,0,3105,425,1,0,0,0,3106,3108,5,101,0,0,3107,3109,3,30,15,
        0,3108,3107,1,0,0,0,3108,3109,1,0,0,0,3109,3110,1,0,0,0,3110,3111,
        5,237,0,0,3111,3117,3,630,315,0,3112,3113,5,397,0,0,3113,3114,5,
        237,0,0,3114,3116,3,630,315,0,3115,3112,1,0,0,0,3116,3119,1,0,0,
        0,3117,3115,1,0,0,0,3117,3118,1,0,0,0,3118,3122,1,0,0,0,3119,3117,
        1,0,0,0,3120,3121,5,152,0,0,3121,3123,5,254,0,0,3122,3120,1,0,0,
        0,3122,3123,1,0,0,0,3123,3125,1,0,0,0,3124,3126,5,255,0,0,3125,3124,
        1,0,0,0,3125,3126,1,0,0,0,3126,3128,1,0,0,0,3127,3129,3,14,7,0,3128,
        3127,1,0,0,0,3128,3129,1,0,0,0,3129,427,1,0,0,0,3130,3133,3,572,
        286,0,3131,3133,3,294,147,0,3132,3130,1,0,0,0,3132,3131,1,0,0,0,
        3133,3134,1,0,0,0,3134,3135,5,405,0,0,3135,3136,5,426,0,0,3136,429,
        1,0,0,0,3137,3147,5,115,0,0,3138,3139,5,289,0,0,3139,3140,5,399,
        0,0,3140,3148,7,26,0,0,3141,3142,5,118,0,0,3142,3143,5,399,0,0,3143,
        3148,5,426,0,0,3144,3145,5,306,0,0,3145,3146,5,399,0,0,3146,3148,
        5,431,0,0,3147,3138,1,0,0,0,3147,3141,1,0,0,0,3147,3144,1,0,0,0,
        3148,3149,1,0,0,0,3149,3150,5,400,0,0,3150,431,1,0,0,0,3151,3152,
        5,160,0,0,3152,3153,5,426,0,0,3153,3154,5,233,0,0,3154,3155,5,426,
        0,0,3155,3156,5,301,0,0,3156,3161,5,426,0,0,3157,3158,5,159,0,0,
        3158,3159,5,426,0,0,3159,3160,5,232,0,0,3160,3162,5,426,0,0,3161,
        3157,1,0,0,0,3161,3162,1,0,0,0,3162,3165,1,0,0,0,3163,3165,3,638,
        319,0,3164,3151,1,0,0,0,3164,3163,1,0,0,0,3165,433,1,0,0,0,3166,
        3167,5,184,0,0,3167,3176,5,128,0,0,3168,3169,5,184,0,0,3169,3170,
        5,128,0,0,3170,3171,3,638,319,0,3171,3172,5,426,0,0,3172,3176,1,
        0,0,0,3173,3174,5,184,0,0,3174,3176,3,478,239,0,3175,3166,1,0,0,
        0,3175,3168,1,0,0,0,3175,3173,1,0,0,0,3176,435,1,0,0,0,3177,3179,
        5,58,0,0,3178,3180,5,333,0,0,3179,3178,1,0,0,0,3179,3180,1,0,0,0,
        3180,3182,1,0,0,0,3181,3183,5,345,0,0,3182,3181,1,0,0,0,3182,3183,
        1,0,0,0,3183,3185,1,0,0,0,3184,3186,5,123,0,0,3185,3184,1,0,0,0,
        3185,3186,1,0,0,0,3186,3187,1,0,0,0,3187,3189,5,329,0,0,3188,3190,
        3,32,16,0,3189,3188,1,0,0,0,3189,3190,1,0,0,0,3190,3191,1,0,0,0,
        3191,3248,3,480,240,0,3192,3194,3,434,217,0,3193,3195,3,200,100,
        0,3194,3193,1,0,0,0,3194,3195,1,0,0,0,3195,3197,1,0,0,0,3196,3198,
        3,222,111,0,3197,3196,1,0,0,0,3197,3198,1,0,0,0,3198,3200,1,0,0,
        0,3199,3201,3,246,123,0,3200,3199,1,0,0,0,3200,3201,1,0,0,0,3201,
        3203,1,0,0,0,3202,3204,3,424,212,0,3203,3202,1,0,0,0,3203,3204,1,
        0,0,0,3204,3206,1,0,0,0,3205,3207,3,224,112,0,3206,3205,1,0,0,0,
        3206,3207,1,0,0,0,3207,3209,1,0,0,0,3208,3210,3,198,99,0,3209,3208,
        1,0,0,0,3209,3210,1,0,0,0,3210,3249,1,0,0,0,3211,3212,5,399,0,0,
        3212,3213,3,250,125,0,3213,3214,5,400,0,0,3214,3216,1,0,0,0,3215,
        3211,1,0,0,0,3215,3216,1,0,0,0,3216,3218,1,0,0,0,3217,3219,3,196,
        98,0,3218,3217,1,0,0,0,3218,3219,1,0,0,0,3219,3221,1,0,0,0,3220,
        3222,3,200,100,0,3221,3220,1,0,0,0,3221,3222,1,0,0,0,3222,3224,1,
        0,0,0,3223,3225,3,208,104,0,3224,3223,1,0,0,0,3224,3225,1,0,0,0,
        3225,3227,1,0,0,0,3226,3228,3,210,105,0,3227,3226,1,0,0,0,3227,3228,
        1,0,0,0,3228,3230,1,0,0,0,3229,3231,3,222,111,0,3230,3229,1,0,0,
        0,3230,3231,1,0,0,0,3231,3233,1,0,0,0,3232,3234,3,246,123,0,3233,
        3232,1,0,0,0,3233,3234,1,0,0,0,3234,3236,1,0,0,0,3235,3237,3,424,
        212,0,3236,3235,1,0,0,0,3236,3237,1,0,0,0,3237,3239,1,0,0,0,3238,
        3240,3,224,112,0,3239,3238,1,0,0,0,3239,3240,1,0,0,0,3240,3242,1,
        0,0,0,3241,3243,3,198,99,0,3242,3241,1,0,0,0,3242,3243,1,0,0,0,3243,
        3246,1,0,0,0,3244,3245,5,17,0,0,3245,3247,3,380,190,0,3246,3244,
        1,0,0,0,3246,3247,1,0,0,0,3247,3249,1,0,0,0,3248,3192,1,0,0,0,3248,
        3215,1,0,0,0,3249,3313,1,0,0,0,3250,3251,5,58,0,0,3251,3252,5,195,
        0,0,3252,3254,5,329,0,0,3253,3255,3,32,16,0,3254,3253,1,0,0,0,3254,
        3255,1,0,0,0,3255,3256,1,0,0,0,3256,3310,3,480,240,0,3257,3259,3,
        434,217,0,3258,3260,3,222,111,0,3259,3258,1,0,0,0,3259,3260,1,0,
        0,0,3260,3262,1,0,0,0,3261,3263,3,246,123,0,3262,3261,1,0,0,0,3262,
        3263,1,0,0,0,3263,3265,1,0,0,0,3264,3266,3,424,212,0,3265,3264,1,
        0,0,0,3265,3266,1,0,0,0,3266,3268,1,0,0,0,3267,3269,3,224,112,0,
        3268,3267,1,0,0,0,3268,3269,1,0,0,0,3269,3271,1,0,0,0,3270,3272,
        3,198,99,0,3271,3270,1,0,0,0,3271,3272,1,0,0,0,3272,3311,1,0,0,0,
        3273,3274,5,399,0,0,3274,3275,3,250,125,0,3275,3276,5,400,0,0,3276,
        3278,1,0,0,0,3277,3273,1,0,0,0,3277,3278,1,0,0,0,3278,3280,1,0,0,
        0,3279,3281,3,196,98,0,3280,3279,1,0,0,0,3280,3281,1,0,0,0,3281,
        3283,1,0,0,0,3282,3284,3,200,100,0,3283,3282,1,0,0,0,3283,3284,1,
        0,0,0,3284,3286,1,0,0,0,3285,3287,3,208,104,0,3286,3285,1,0,0,0,
        3286,3287,1,0,0,0,3287,3289,1,0,0,0,3288,3290,3,210,105,0,3289,3288,
        1,0,0,0,3289,3290,1,0,0,0,3290,3292,1,0,0,0,3291,3293,3,222,111,
        0,3292,3291,1,0,0,0,3292,3293,1,0,0,0,3293,3295,1,0,0,0,3294,3296,
        3,246,123,0,3295,3294,1,0,0,0,3295,3296,1,0,0,0,3296,3298,1,0,0,
        0,3297,3299,3,424,212,0,3298,3297,1,0,0,0,3298,3299,1,0,0,0,3299,
        3301,1,0,0,0,3300,3302,3,224,112,0,3301,3300,1,0,0,0,3301,3302,1,
        0,0,0,3302,3304,1,0,0,0,3303,3305,3,198,99,0,3304,3303,1,0,0,0,3304,
        3305,1,0,0,0,3305,3308,1,0,0,0,3306,3307,5,17,0,0,3307,3309,3,380,
        190,0,3308,3306,1,0,0,0,3308,3309,1,0,0,0,3309,3311,1,0,0,0,3310,
        3257,1,0,0,0,3310,3277,1,0,0,0,3311,3313,1,0,0,0,3312,3177,1,0,0,
        0,3312,3250,1,0,0,0,3313,437,1,0,0,0,3314,3315,5,58,0,0,3315,3317,
        5,69,0,0,3316,3318,3,32,16,0,3317,3316,1,0,0,0,3317,3318,1,0,0,0,
        3318,3319,1,0,0,0,3319,3322,3,638,319,0,3320,3321,5,352,0,0,3321,
        3323,5,426,0,0,3322,3320,1,0,0,0,3322,3323,1,0,0,0,3323,3326,1,0,
        0,0,3324,3325,5,367,0,0,3325,3327,5,426,0,0,3326,3324,1,0,0,0,3326,
        3327,1,0,0,0,3327,3330,1,0,0,0,3328,3329,5,47,0,0,3329,3331,5,426,
        0,0,3330,3328,1,0,0,0,3330,3331,1,0,0,0,3331,3335,1,0,0,0,3332,3333,
        5,387,0,0,3333,3334,5,77,0,0,3334,3336,3,230,115,0,3335,3332,1,0,
        0,0,3335,3336,1,0,0,0,3336,439,1,0,0,0,3337,3338,5,101,0,0,3338,
        3340,5,69,0,0,3339,3341,3,30,15,0,3340,3339,1,0,0,0,3340,3341,1,
        0,0,0,3341,3342,1,0,0,0,3342,3343,3,638,319,0,3343,441,1,0,0,0,3344,
        3345,3,638,319,0,3345,3346,5,395,0,0,3346,3348,1,0,0,0,3347,3344,
        1,0,0,0,3348,3351,1,0,0,0,3349,3347,1,0,0,0,3349,3350,1,0,0,0,3350,
        3352,1,0,0,0,3351,3349,1,0,0,0,3352,3353,5,415,0,0,3353,443,1,0,
        0,0,3354,3359,3,580,290,0,3355,3356,5,397,0,0,3356,3358,3,580,290,
        0,3357,3355,1,0,0,0,3358,3361,1,0,0,0,3359,3357,1,0,0,0,3359,3360,
        1,0,0,0,3360,445,1,0,0,0,3361,3359,1,0,0,0,3362,3367,3,638,319,0,
        3363,3364,5,397,0,0,3364,3366,3,638,319,0,3365,3363,1,0,0,0,3366,
        3369,1,0,0,0,3367,3365,1,0,0,0,3367,3368,1,0,0,0,3368,447,1,0,0,
        0,3369,3367,1,0,0,0,3370,3371,5,139,0,0,3371,3372,3,450,225,0,3372,
        449,1,0,0,0,3373,3374,5,359,0,0,3374,3377,3,458,229,0,3375,3376,
        5,397,0,0,3376,3378,3,458,229,0,3377,3375,1,0,0,0,3378,3379,1,0,
        0,0,3379,3377,1,0,0,0,3379,3380,1,0,0,0,3380,3383,1,0,0,0,3381,3383,
        3,454,227,0,3382,3373,1,0,0,0,3382,3381,1,0,0,0,3383,451,1,0,0,0,
        3384,3388,3,468,234,0,3385,3387,3,462,231,0,3386,3385,1,0,0,0,3387,
        3390,1,0,0,0,3388,3386,1,0,0,0,3388,3389,1,0,0,0,3389,3417,1,0,0,
        0,3390,3388,1,0,0,0,3391,3395,3,498,249,0,3392,3394,3,462,231,0,
        3393,3392,1,0,0,0,3394,3397,1,0,0,0,3395,3393,1,0,0,0,3395,3396,
        1,0,0,0,3396,3417,1,0,0,0,3397,3395,1,0,0,0,3398,3402,3,486,243,
        0,3399,3401,3,462,231,0,3400,3399,1,0,0,0,3401,3404,1,0,0,0,3402,
        3400,1,0,0,0,3402,3403,1,0,0,0,3403,3417,1,0,0,0,3404,3402,1,0,0,
        0,3405,3409,3,492,246,0,3406,3408,3,462,231,0,3407,3406,1,0,0,0,
        3408,3411,1,0,0,0,3409,3407,1,0,0,0,3409,3410,1,0,0,0,3410,3417,
        1,0,0,0,3411,3409,1,0,0,0,3412,3413,5,399,0,0,3413,3414,3,454,227,
        0,3414,3415,5,400,0,0,3415,3417,1,0,0,0,3416,3384,1,0,0,0,3416,3391,
        1,0,0,0,3416,3398,1,0,0,0,3416,3405,1,0,0,0,3416,3412,1,0,0,0,3417,
        453,1,0,0,0,3418,3429,3,452,226,0,3419,3420,3,460,230,0,3420,3425,
        3,456,228,0,3421,3422,5,224,0,0,3422,3426,3,580,290,0,3423,3424,
        5,370,0,0,3424,3426,3,264,132,0,3425,3421,1,0,0,0,3425,3423,1,0,
        0,0,3425,3426,1,0,0,0,3426,3428,1,0,0,0,3427,3419,1,0,0,0,3428,3431,
        1,0,0,0,3429,3427,1,0,0,0,3429,3430,1,0,0,0,3430,455,1,0,0,0,3431,
        3429,1,0,0,0,3432,3437,3,468,234,0,3433,3437,3,498,249,0,3434,3437,
        3,486,243,0,3435,3437,3,492,246,0,3436,3432,1,0,0,0,3436,3433,1,
        0,0,0,3436,3434,1,0,0,0,3436,3435,1,0,0,0,3437,3441,1,0,0,0,3438,
        3440,3,462,231,0,3439,3438,1,0,0,0,3440,3443,1,0,0,0,3441,3439,1,
        0,0,0,3441,3442,1,0,0,0,3442,457,1,0,0,0,3443,3441,1,0,0,0,3444,
        3446,5,250,0,0,3445,3444,1,0,0,0,3445,3446,1,0,0,0,3446,3447,1,0,
        0,0,3447,3449,3,476,238,0,3448,3450,3,466,233,0,3449,3448,1,0,0,
        0,3449,3450,1,0,0,0,3450,3455,1,0,0,0,3451,3453,5,17,0,0,3452,3451,
        1,0,0,0,3452,3453,1,0,0,0,3453,3454,1,0,0,0,3454,3456,3,638,319,
        0,3455,3452,1,0,0,0,3455,3456,1,0,0,0,3456,3457,1,0,0,0,3457,3458,
        5,399,0,0,3458,3459,3,444,222,0,3459,3460,5,400,0,0,3460,459,1,0,
        0,0,3461,3476,5,397,0,0,3462,3473,5,157,0,0,3463,3473,5,60,0,0,3464,
        3466,7,27,0,0,3465,3467,5,231,0,0,3466,3465,1,0,0,0,3466,3467,1,
        0,0,0,3467,3473,1,0,0,0,3468,3470,5,180,0,0,3469,3471,7,28,0,0,3470,
        3469,1,0,0,0,3470,3471,1,0,0,0,3471,3473,1,0,0,0,3472,3462,1,0,0,
        0,3472,3463,1,0,0,0,3472,3464,1,0,0,0,3472,3468,1,0,0,0,3472,3473,
        1,0,0,0,3473,3474,1,0,0,0,3474,3476,5,171,0,0,3475,3461,1,0,0,0,
        3475,3472,1,0,0,0,3476,461,1,0,0,0,3477,3478,5,178,0,0,3478,3479,
        5,378,0,0,3479,3480,5,231,0,0,3480,3481,3,550,275,0,3481,3491,3,
        464,232,0,3482,3483,5,17,0,0,3483,3488,3,638,319,0,3484,3485,5,397,
        0,0,3485,3487,3,638,319,0,3486,3484,1,0,0,0,3487,3490,1,0,0,0,3488,
        3486,1,0,0,0,3488,3489,1,0,0,0,3489,3492,1,0,0,0,3490,3488,1,0,0,
        0,3491,3482,1,0,0,0,3491,3492,1,0,0,0,3492,3535,1,0,0,0,3493,3495,
        5,397,0,0,3494,3493,1,0,0,0,3494,3495,1,0,0,0,3495,3496,1,0,0,0,
        3496,3532,5,178,0,0,3497,3498,5,378,0,0,3498,3499,3,550,275,0,3499,
        3509,3,464,232,0,3500,3501,5,17,0,0,3501,3506,3,638,319,0,3502,3503,
        5,397,0,0,3503,3505,3,638,319,0,3504,3502,1,0,0,0,3505,3508,1,0,
        0,0,3506,3504,1,0,0,0,3506,3507,1,0,0,0,3507,3510,1,0,0,0,3508,3506,
        1,0,0,0,3509,3500,1,0,0,0,3509,3510,1,0,0,0,3510,3533,1,0,0,0,3511,
        3512,5,329,0,0,3512,3513,5,399,0,0,3513,3514,3,496,248,0,3514,3516,
        5,400,0,0,3515,3517,5,17,0,0,3516,3515,1,0,0,0,3516,3517,1,0,0,0,
        3517,3518,1,0,0,0,3518,3530,3,464,232,0,3519,3520,5,399,0,0,3520,
        3525,3,638,319,0,3521,3522,5,397,0,0,3522,3524,3,638,319,0,3523,
        3521,1,0,0,0,3524,3527,1,0,0,0,3525,3523,1,0,0,0,3525,3526,1,0,0,
        0,3526,3528,1,0,0,0,3527,3525,1,0,0,0,3528,3529,5,400,0,0,3529,3531,
        1,0,0,0,3530,3519,1,0,0,0,3530,3531,1,0,0,0,3531,3533,1,0,0,0,3532,
        3497,1,0,0,0,3532,3511,1,0,0,0,3533,3535,1,0,0,0,3534,3477,1,0,0,
        0,3534,3494,1,0,0,0,3535,463,1,0,0,0,3536,3537,3,638,319,0,3537,
        465,1,0,0,0,3538,3539,5,331,0,0,3539,3540,5,399,0,0,3540,3541,5,
        30,0,0,3541,3542,5,431,0,0,3542,3543,5,230,0,0,3543,3544,5,221,0,
        0,3544,3554,5,431,0,0,3545,3546,5,224,0,0,3546,3551,3,580,290,0,
        3547,3548,5,397,0,0,3548,3550,3,580,290,0,3549,3547,1,0,0,0,3550,
        3553,1,0,0,0,3551,3549,1,0,0,0,3551,3552,1,0,0,0,3552,3555,1,0,0,
        0,3553,3551,1,0,0,0,3554,3545,1,0,0,0,3554,3555,1,0,0,0,3555,3556,
        1,0,0,0,3556,3566,5,400,0,0,3557,3558,5,331,0,0,3558,3562,5,399,
        0,0,3559,3560,5,431,0,0,3560,3563,7,29,0,0,3561,3563,5,430,0,0,3562,
        3559,1,0,0,0,3562,3561,1,0,0,0,3563,3564,1,0,0,0,3564,3566,5,400,
        0,0,3565,3538,1,0,0,0,3565,3557,1,0,0,0,3566,467,1,0,0,0,3567,3569,
        3,476,238,0,3568,3570,3,226,113,0,3569,3568,1,0,0,0,3569,3570,1,
        0,0,0,3570,3572,1,0,0,0,3571,3573,3,466,233,0,3572,3571,1,0,0,0,
        3572,3573,1,0,0,0,3573,3575,1,0,0,0,3574,3576,3,470,235,0,3575,3574,
        1,0,0,0,3575,3576,1,0,0,0,3576,3581,1,0,0,0,3577,3579,5,17,0,0,3578,
        3577,1,0,0,0,3578,3579,1,0,0,0,3579,3580,1,0,0,0,3580,3582,3,638,
        319,0,3581,3578,1,0,0,0,3581,3582,1,0,0,0,3582,469,1,0,0,0,3583,
        3593,5,134,0,0,3584,3585,5,327,0,0,3585,3586,5,17,0,0,3586,3587,
        5,221,0,0,3587,3594,3,580,290,0,3588,3589,5,134,0,0,3589,3590,5,
        328,0,0,3590,3591,5,17,0,0,3591,3592,5,221,0,0,3592,3594,5,431,0,
        0,3593,3584,1,0,0,0,3593,3588,1,0,0,0,3594,471,1,0,0,0,3595,3596,
        3,638,319,0,3596,473,1,0,0,0,3597,3598,3,638,319,0,3598,475,1,0,
        0,0,3599,3602,3,478,239,0,3600,3602,3,482,241,0,3601,3599,1,0,0,
        0,3601,3600,1,0,0,0,3602,477,1,0,0,0,3603,3604,3,638,319,0,3604,
        3605,5,395,0,0,3605,3608,3,638,319,0,3606,3607,5,395,0,0,3607,3609,
        3,638,319,0,3608,3606,1,0,0,0,3608,3609,1,0,0,0,3609,3612,1,0,0,
        0,3610,3612,3,638,319,0,3611,3603,1,0,0,0,3611,3610,1,0,0,0,3612,
        479,1,0,0,0,3613,3614,3,638,319,0,3614,3615,5,395,0,0,3615,3618,
        3,638,319,0,3616,3617,5,395,0,0,3617,3619,3,638,319,0,3618,3616,
        1,0,0,0,3618,3619,1,0,0,0,3619,3622,1,0,0,0,3620,3622,3,638,319,
        0,3621,3613,1,0,0,0,3621,3620,1,0,0,0,3622,481,1,0,0,0,3623,3624,
        3,638,319,0,3624,3625,5,395,0,0,3625,3627,1,0,0,0,3626,3623,1,0,
        0,0,3626,3627,1,0,0,0,3627,3628,1,0,0,0,3628,3629,3,638,319,0,3629,
        483,1,0,0,0,3630,3631,3,638,319,0,3631,3632,5,395,0,0,3632,3634,
        1,0,0,0,3633,3630,1,0,0,0,3633,3634,1,0,0,0,3634,3635,1,0,0,0,3635,
        3636,3,638,319,0,3636,485,1,0,0,0,3637,3638,5,399,0,0,3638,3639,
        3,360,180,0,3639,3641,5,400,0,0,3640,3642,5,17,0,0,3641,3640,1,0,
        0,0,3641,3642,1,0,0,0,3642,3643,1,0,0,0,3643,3644,3,638,319,0,3644,
        487,1,0,0,0,3645,3646,5,237,0,0,3646,3647,5,32,0,0,3647,3649,3,536,
        268,0,3648,3650,3,542,271,0,3649,3648,1,0,0,0,3649,3650,1,0,0,0,
        3650,3659,1,0,0,0,3651,3659,3,542,271,0,3652,3654,3,546,273,0,3653,
        3655,3,548,274,0,3654,3653,1,0,0,0,3654,3655,1,0,0,0,3655,3659,1,
        0,0,0,3656,3659,3,548,274,0,3657,3659,3,544,272,0,3658,3645,1,0,
        0,0,3658,3651,1,0,0,0,3658,3652,1,0,0,0,3658,3656,1,0,0,0,3658,3657,
        1,0,0,0,3659,489,1,0,0,0,3660,3664,3,486,243,0,3661,3664,3,468,234,
        0,3662,3664,3,492,246,0,3663,3660,1,0,0,0,3663,3661,1,0,0,0,3663,
        3662,1,0,0,0,3664,491,1,0,0,0,3665,3666,3,638,319,0,3666,3667,5,
        399,0,0,3667,3668,5,224,0,0,3668,3670,3,490,245,0,3669,3671,3,488,
        244,0,3670,3669,1,0,0,0,3670,3671,1,0,0,0,3671,3687,1,0,0,0,3672,
        3673,5,432,0,0,3673,3674,5,399,0,0,3674,3675,3,580,290,0,3675,3684,
        5,400,0,0,3676,3677,5,397,0,0,3677,3678,5,432,0,0,3678,3679,5,399,
        0,0,3679,3680,3,580,290,0,3680,3681,5,400,0,0,3681,3683,1,0,0,0,
        3682,3676,1,0,0,0,3683,3686,1,0,0,0,3684,3682,1,0,0,0,3684,3685,
        1,0,0,0,3685,3688,1,0,0,0,3686,3684,1,0,0,0,3687,3672,1,0,0,0,3687,
        3688,1,0,0,0,3688,3689,1,0,0,0,3689,3691,5,400,0,0,3690,3692,3,638,
        319,0,3691,3690,1,0,0,0,3691,3692,1,0,0,0,3692,493,1,0,0,0,3693,
        3694,5,384,0,0,3694,3695,3,580,290,0,3695,495,1,0,0,0,3696,3715,
        5,374,0,0,3697,3702,3,538,269,0,3698,3699,5,397,0,0,3699,3701,3,
        538,269,0,3700,3698,1,0,0,0,3701,3704,1,0,0,0,3702,3700,1,0,0,0,
        3702,3703,1,0,0,0,3703,3716,1,0,0,0,3704,3702,1,0,0,0,3705,3706,
        5,399,0,0,3706,3707,3,534,267,0,3707,3712,5,400,0,0,3708,3709,5,
        397,0,0,3709,3711,3,538,269,0,3710,3708,1,0,0,0,3711,3714,1,0,0,
        0,3712,3710,1,0,0,0,3712,3713,1,0,0,0,3713,3716,1,0,0,0,3714,3712,
        1,0,0,0,3715,3697,1,0,0,0,3715,3705,1,0,0,0,3716,497,1,0,0,0,3717,
        3718,5,329,0,0,3718,3719,5,399,0,0,3719,3720,3,496,248,0,3720,3722,
        5,400,0,0,3721,3723,5,17,0,0,3722,3721,1,0,0,0,3722,3723,1,0,0,0,
        3723,3724,1,0,0,0,3724,3734,3,464,232,0,3725,3726,5,399,0,0,3726,
        3731,3,638,319,0,3727,3728,5,397,0,0,3728,3730,3,638,319,0,3729,
        3727,1,0,0,0,3730,3733,1,0,0,0,3731,3729,1,0,0,0,3731,3732,1,0,0,
        0,3732,3735,1,0,0,0,3733,3731,1,0,0,0,3734,3725,1,0,0,0,3734,3735,
        1,0,0,0,3735,3736,1,0,0,0,3736,3737,5,400,0,0,3737,499,1,0,0,0,3738,
        3740,5,299,0,0,3739,3741,5,436,0,0,3740,3739,1,0,0,0,3740,3741,1,
        0,0,0,3741,3755,1,0,0,0,3742,3744,7,21,0,0,3743,3742,1,0,0,0,3743,
        3744,1,0,0,0,3744,3745,1,0,0,0,3745,3750,3,504,252,0,3746,3747,5,
        397,0,0,3747,3749,3,504,252,0,3748,3746,1,0,0,0,3749,3752,1,0,0,
        0,3750,3748,1,0,0,0,3750,3751,1,0,0,0,3751,3756,1,0,0,0,3752,3750,
        1,0,0,0,3753,3754,5,347,0,0,3754,3756,3,502,251,0,3755,3743,1,0,
        0,0,3755,3753,1,0,0,0,3756,3759,1,0,0,0,3757,3759,3,506,253,0,3758,
        3738,1,0,0,0,3758,3757,1,0,0,0,3759,501,1,0,0,0,3760,3761,5,399,
        0,0,3761,3762,3,510,255,0,3762,3763,5,400,0,0,3763,3764,3,212,106,
        0,3764,3765,3,216,108,0,3765,3766,5,370,0,0,3766,3779,5,426,0,0,
        3767,3777,5,17,0,0,3768,3771,5,399,0,0,3769,3772,3,446,223,0,3770,
        3772,3,248,124,0,3771,3769,1,0,0,0,3771,3770,1,0,0,0,3772,3773,1,
        0,0,0,3773,3774,5,400,0,0,3774,3778,1,0,0,0,3775,3778,3,446,223,
        0,3776,3778,3,248,124,0,3777,3768,1,0,0,0,3777,3775,1,0,0,0,3777,
        3776,1,0,0,0,3778,3780,1,0,0,0,3779,3767,1,0,0,0,3779,3780,1,0,0,
        0,3780,3781,1,0,0,0,3781,3782,3,212,106,0,3782,3783,3,214,107,0,
        3783,503,1,0,0,0,3784,3808,3,442,221,0,3785,3788,3,256,128,0,3786,
        3788,3,580,290,0,3787,3785,1,0,0,0,3787,3786,1,0,0,0,3788,3805,1,
        0,0,0,3789,3791,5,17,0,0,3790,3789,1,0,0,0,3790,3791,1,0,0,0,3791,
        3792,1,0,0,0,3792,3806,3,638,319,0,3793,3794,5,17,0,0,3794,3795,
        5,399,0,0,3795,3800,3,638,319,0,3796,3797,5,397,0,0,3797,3799,3,
        638,319,0,3798,3796,1,0,0,0,3799,3802,1,0,0,0,3800,3798,1,0,0,0,
        3800,3801,1,0,0,0,3801,3803,1,0,0,0,3802,3800,1,0,0,0,3803,3804,
        5,400,0,0,3804,3806,1,0,0,0,3805,3790,1,0,0,0,3805,3793,1,0,0,0,
        3805,3806,1,0,0,0,3806,3808,1,0,0,0,3807,3784,1,0,0,0,3807,3787,
        1,0,0,0,3808,505,1,0,0,0,3809,3810,7,30,0,0,3810,3811,3,510,255,
        0,3811,3812,3,212,106,0,3812,3813,3,216,108,0,3813,3814,5,370,0,
        0,3814,3827,5,426,0,0,3815,3825,5,17,0,0,3816,3819,5,399,0,0,3817,
        3820,3,446,223,0,3818,3820,3,248,124,0,3819,3817,1,0,0,0,3819,3818,
        1,0,0,0,3820,3821,1,0,0,0,3821,3822,5,400,0,0,3822,3826,1,0,0,0,
        3823,3826,3,446,223,0,3824,3826,3,248,124,0,3825,3816,1,0,0,0,3825,
        3823,1,0,0,0,3825,3824,1,0,0,0,3826,3828,1,0,0,0,3827,3815,1,0,0,
        0,3827,3828,1,0,0,0,3828,3829,1,0,0,0,3829,3830,3,212,106,0,3830,
        3831,3,214,107,0,3831,507,1,0,0,0,3832,3835,3,442,221,0,3833,3835,
        3,580,290,0,3834,3832,1,0,0,0,3834,3833,1,0,0,0,3835,509,1,0,0,0,
        3836,3841,3,508,254,0,3837,3838,5,397,0,0,3838,3840,3,508,254,0,
        3839,3837,1,0,0,0,3840,3843,1,0,0,0,3841,3839,1,0,0,0,3841,3842,
        1,0,0,0,3842,511,1,0,0,0,3843,3841,1,0,0,0,3844,3845,5,386,0,0,3845,
        3846,3,638,319,0,3846,3847,5,17,0,0,3847,3855,3,514,257,0,3848,3849,
        5,397,0,0,3849,3850,3,638,319,0,3850,3851,5,17,0,0,3851,3852,3,514,
        257,0,3852,3854,1,0,0,0,3853,3848,1,0,0,0,3854,3857,1,0,0,0,3855,
        3853,1,0,0,0,3855,3856,1,0,0,0,3856,513,1,0,0,0,3857,3855,1,0,0,
        0,3858,3871,3,638,319,0,3859,3861,5,399,0,0,3860,3862,3,638,319,
        0,3861,3860,1,0,0,0,3861,3862,1,0,0,0,3862,3864,1,0,0,0,3863,3865,
        3,488,244,0,3864,3863,1,0,0,0,3864,3865,1,0,0,0,3865,3867,1,0,0,
        0,3866,3868,3,516,258,0,3867,3866,1,0,0,0,3867,3868,1,0,0,0,3868,
        3869,1,0,0,0,3869,3871,5,400,0,0,3870,3858,1,0,0,0,3870,3859,1,0,
        0,0,3871,515,1,0,0,0,3872,3886,7,31,0,0,3873,3874,5,354,0,0,3874,
        3880,5,247,0,0,3875,3876,5,62,0,0,3876,3880,5,291,0,0,3877,3878,
        5,431,0,0,3878,3880,5,247,0,0,3879,3873,1,0,0,0,3879,3875,1,0,0,
        0,3879,3877,1,0,0,0,3880,3887,1,0,0,0,3881,3882,5,25,0,0,3882,3883,
        3,518,259,0,3883,3884,5,11,0,0,3884,3885,3,518,259,0,3885,3887,1,
        0,0,0,3886,3879,1,0,0,0,3886,3881,1,0,0,0,3887,517,1,0,0,0,3888,
        3889,7,32,0,0,3889,3893,7,33,0,0,3890,3891,5,62,0,0,3891,3893,5,
        291,0,0,3892,3888,1,0,0,0,3892,3890,1,0,0,0,3893,519,1,0,0,0,3894,
        3895,5,144,0,0,3895,3901,5,32,0,0,3896,3902,3,256,128,0,3897,3902,
        3,522,261,0,3898,3902,3,524,262,0,3899,3900,5,399,0,0,3900,3902,
        5,400,0,0,3901,3896,1,0,0,0,3901,3897,1,0,0,0,3901,3898,1,0,0,0,
        3901,3899,1,0,0,0,3902,521,1,0,0,0,3903,3906,5,290,0,0,3904,3906,
        5,61,0,0,3905,3903,1,0,0,0,3905,3904,1,0,0,0,3906,3907,1,0,0,0,3907,
        3908,5,399,0,0,3908,3913,3,580,290,0,3909,3910,5,397,0,0,3910,3912,
        3,580,290,0,3911,3909,1,0,0,0,3912,3915,1,0,0,0,3913,3911,1,0,0,
        0,3913,3914,1,0,0,0,3914,3916,1,0,0,0,3915,3913,1,0,0,0,3916,3917,
        5,400,0,0,3917,523,1,0,0,0,3918,3923,3,540,270,0,3919,3920,5,387,
        0,0,3920,3924,5,290,0,0,3921,3922,5,387,0,0,3922,3924,5,61,0,0,3923,
        3919,1,0,0,0,3923,3921,1,0,0,0,3923,3924,1,0,0,0,3924,3938,1,0,0,
        0,3925,3926,5,145,0,0,3926,3927,5,305,0,0,3927,3928,5,399,0,0,3928,
        3933,3,526,263,0,3929,3930,5,397,0,0,3930,3932,3,526,263,0,3931,
        3929,1,0,0,0,3932,3935,1,0,0,0,3933,3931,1,0,0,0,3933,3934,1,0,0,
        0,3934,3936,1,0,0,0,3935,3933,1,0,0,0,3936,3937,5,400,0,0,3937,3939,
        1,0,0,0,3938,3925,1,0,0,0,3938,3939,1,0,0,0,3939,525,1,0,0,0,3940,
        3942,5,399,0,0,3941,3943,3,580,290,0,3942,3941,1,0,0,0,3942,3943,
        1,0,0,0,3943,3948,1,0,0,0,3944,3945,5,397,0,0,3945,3947,3,580,290,
        0,3946,3944,1,0,0,0,3947,3950,1,0,0,0,3948,3946,1,0,0,0,3948,3949,
        1,0,0,0,3949,3951,1,0,0,0,3950,3948,1,0,0,0,3951,3954,5,400,0,0,
        3952,3954,3,580,290,0,3953,3940,1,0,0,0,3953,3952,1,0,0,0,3954,527,
        1,0,0,0,3955,3956,5,146,0,0,3956,3957,3,580,290,0,3957,529,1,0,0,
        0,3958,3959,5,256,0,0,3959,3960,3,580,290,0,3960,531,1,0,0,0,3961,
        3964,5,83,0,0,3962,3964,3,580,290,0,3963,3961,1,0,0,0,3963,3962,
        1,0,0,0,3964,533,1,0,0,0,3965,3967,3,580,290,0,3966,3968,5,17,0,
        0,3967,3966,1,0,0,0,3967,3968,1,0,0,0,3968,3970,1,0,0,0,3969,3971,
        3,638,319,0,3970,3969,1,0,0,0,3970,3971,1,0,0,0,3971,3982,1,0,0,
        0,3972,3973,5,397,0,0,3973,3975,3,580,290,0,3974,3976,5,17,0,0,3975,
        3974,1,0,0,0,3975,3976,1,0,0,0,3976,3978,1,0,0,0,3977,3979,3,638,
        319,0,3978,3977,1,0,0,0,3978,3979,1,0,0,0,3979,3981,1,0,0,0,3980,
        3972,1,0,0,0,3981,3984,1,0,0,0,3982,3980,1,0,0,0,3982,3983,1,0,0,
        0,3983,535,1,0,0,0,3984,3982,1,0,0,0,3985,3988,3,538,269,0,3986,
        3988,3,540,270,0,3987,3985,1,0,0,0,3987,3986,1,0,0,0,3988,537,1,
        0,0,0,3989,3990,5,399,0,0,3990,3991,3,540,270,0,3991,3992,5,400,
        0,0,3992,539,1,0,0,0,3993,4000,3,532,266,0,3994,3995,5,397,0,0,3995,
        3997,3,532,266,0,3996,3994,1,0,0,0,3997,3998,1,0,0,0,3998,3996,1,
        0,0,0,3998,3999,1,0,0,0,3999,4001,1,0,0,0,4000,3996,1,0,0,0,4000,
        4001,1,0,0,0,4001,541,1,0,0,0,4002,4003,5,229,0,0,4003,4004,5,32,
        0,0,4004,4009,3,308,154,0,4005,4006,5,397,0,0,4006,4008,3,308,154,
        0,4007,4005,1,0,0,0,4008,4011,1,0,0,0,4009,4007,1,0,0,0,4009,4010,
        1,0,0,0,4010,543,1,0,0,0,4011,4009,1,0,0,0,4012,4013,5,41,0,0,4013,
        4014,5,32,0,0,4014,4015,3,536,268,0,4015,545,1,0,0,0,4016,4017,5,
        97,0,0,4017,4018,5,32,0,0,4018,4019,3,536,268,0,4019,547,1,0,0,0,
        4020,4021,5,314,0,0,4021,4041,5,32,0,0,4022,4023,5,399,0,0,4023,
        4028,3,308,154,0,4024,4025,5,397,0,0,4025,4027,3,308,154,0,4026,
        4024,1,0,0,0,4027,4030,1,0,0,0,4028,4026,1,0,0,0,4028,4029,1,0,0,
        0,4029,4031,1,0,0,0,4030,4028,1,0,0,0,4031,4032,5,400,0,0,4032,4042,
        1,0,0,0,4033,4038,3,308,154,0,4034,4035,5,397,0,0,4035,4037,3,308,
        154,0,4036,4034,1,0,0,0,4037,4040,1,0,0,0,4038,4036,1,0,0,0,4038,
        4039,1,0,0,0,4039,4042,1,0,0,0,4040,4038,1,0,0,0,4041,4022,1,0,0,
        0,4041,4033,1,0,0,0,4042,549,1,0,0,0,4043,4044,5,349,0,0,4044,4048,
        5,399,0,0,4045,4049,5,179,0,0,4046,4049,5,343,0,0,4047,4049,5,29,
        0,0,4048,4045,1,0,0,0,4048,4046,1,0,0,0,4048,4047,1,0,0,0,4048,4049,
        1,0,0,0,4049,4051,1,0,0,0,4050,4052,3,508,254,0,4051,4050,1,0,0,
        0,4051,4052,1,0,0,0,4052,4053,1,0,0,0,4053,4054,5,139,0,0,4054,4055,
        3,508,254,0,4055,4056,5,400,0,0,4056,4097,1,0,0,0,4057,4058,3,558,
        279,0,4058,4073,5,399,0,0,4059,4074,5,415,0,0,4060,4062,7,21,0,0,
        4061,4060,1,0,0,0,4061,4062,1,0,0,0,4062,4071,1,0,0,0,4063,4068,
        3,508,254,0,4064,4065,5,397,0,0,4065,4067,3,508,254,0,4066,4064,
        1,0,0,0,4067,4070,1,0,0,0,4068,4066,1,0,0,0,4068,4069,1,0,0,0,4069,
        4072,1,0,0,0,4070,4068,1,0,0,0,4071,4063,1,0,0,0,4071,4072,1,0,0,
        0,4072,4074,1,0,0,0,4073,4059,1,0,0,0,4073,4061,1,0,0,0,4074,4094,
        1,0,0,0,4075,4076,5,400,0,0,4076,4077,5,388,0,0,4077,4078,5,144,
        0,0,4078,4079,5,399,0,0,4079,4080,3,542,271,0,4080,4081,5,400,0,
        0,4081,4095,1,0,0,0,4082,4084,5,400,0,0,4083,4085,3,552,276,0,4084,
        4083,1,0,0,0,4084,4085,1,0,0,0,4085,4086,1,0,0,0,4086,4087,5,234,
        0,0,4087,4095,3,514,257,0,4088,4089,3,552,276,0,4089,4090,5,400,
        0,0,4090,4091,5,234,0,0,4091,4092,3,514,257,0,4092,4095,1,0,0,0,
        4093,4095,5,400,0,0,4094,4075,1,0,0,0,4094,4082,1,0,0,0,4094,4088,
        1,0,0,0,4094,4093,1,0,0,0,4095,4097,1,0,0,0,4096,4043,1,0,0,0,4096,
        4057,1,0,0,0,4097,551,1,0,0,0,4098,4099,7,34,0,0,4099,4100,5,220,
        0,0,4100,553,1,0,0,0,4101,4102,3,640,320,0,4102,555,1,0,0,0,4103,
        4106,3,640,320,0,4104,4106,5,426,0,0,4105,4103,1,0,0,0,4105,4104,
        1,0,0,0,4106,557,1,0,0,0,4107,4111,3,640,320,0,4108,4111,3,646,323,
        0,4109,4111,3,636,318,0,4110,4107,1,0,0,0,4110,4108,1,0,0,0,4110,
        4109,1,0,0,0,4111,559,1,0,0,0,4112,4113,5,36,0,0,4113,4114,5,399,
        0,0,4114,4115,3,580,290,0,4115,4116,5,17,0,0,4116,4119,3,348,174,
        0,4117,4118,5,137,0,0,4118,4120,5,426,0,0,4119,4117,1,0,0,0,4119,
        4120,1,0,0,0,4120,4121,1,0,0,0,4121,4122,5,400,0,0,4122,561,1,0,
        0,0,4123,4124,5,35,0,0,4124,4130,3,580,290,0,4125,4126,5,383,0,0,
        4126,4127,3,580,290,0,4127,4128,5,335,0,0,4128,4129,3,580,290,0,
        4129,4131,1,0,0,0,4130,4125,1,0,0,0,4131,4132,1,0,0,0,4132,4130,
        1,0,0,0,4132,4133,1,0,0,0,4133,4136,1,0,0,0,4134,4135,5,105,0,0,
        4135,4137,3,580,290,0,4136,4134,1,0,0,0,4136,4137,1,0,0,0,4137,4138,
        1,0,0,0,4138,4139,5,108,0,0,4139,563,1,0,0,0,4140,4146,5,35,0,0,
        4141,4142,5,383,0,0,4142,4143,3,580,290,0,4143,4144,5,335,0,0,4144,
        4145,3,580,290,0,4145,4147,1,0,0,0,4146,4141,1,0,0,0,4147,4148,1,
        0,0,0,4148,4146,1,0,0,0,4148,4149,1,0,0,0,4149,4152,1,0,0,0,4150,
        4151,5,105,0,0,4151,4153,3,580,290,0,4152,4150,1,0,0,0,4152,4153,
        1,0,0,0,4153,4154,1,0,0,0,4154,4155,5,108,0,0,4155,565,1,0,0,0,4156,
        4157,5,132,0,0,4157,4158,5,399,0,0,4158,4161,3,580,290,0,4159,4160,
        5,341,0,0,4160,4162,3,570,285,0,4161,4159,1,0,0,0,4161,4162,1,0,
        0,0,4162,4163,1,0,0,0,4163,4164,5,400,0,0,4164,567,1,0,0,0,4165,
        4166,5,124,0,0,4166,4167,5,399,0,0,4167,4168,3,570,285,0,4168,4169,
        5,139,0,0,4169,4170,3,580,290,0,4170,4171,5,400,0,0,4171,569,1,0,
        0,0,4172,4181,3,666,333,0,4173,4181,5,257,0,0,4174,4181,3,668,334,
        0,4175,4181,3,670,335,0,4176,4181,3,672,336,0,4177,4181,3,674,337,
        0,4178,4181,3,676,338,0,4179,4181,3,678,339,0,4180,4172,1,0,0,0,
        4180,4173,1,0,0,0,4180,4174,1,0,0,0,4180,4175,1,0,0,0,4180,4176,
        1,0,0,0,4180,4177,1,0,0,0,4180,4178,1,0,0,0,4180,4179,1,0,0,0,4181,
        571,1,0,0,0,4182,4183,3,574,287,0,4183,4184,3,578,289,0,4184,4211,
        1,0,0,0,4185,4211,5,431,0,0,4186,4187,5,71,0,0,4187,4211,5,426,0,
        0,4188,4211,5,63,0,0,4189,4190,5,337,0,0,4190,4211,5,426,0,0,4191,
        4211,5,64,0,0,4192,4193,5,338,0,0,4193,4211,5,426,0,0,4194,4198,
        5,426,0,0,4195,4197,5,426,0,0,4196,4195,1,0,0,0,4197,4200,1,0,0,
        0,4198,4196,1,0,0,0,4198,4199,1,0,0,0,4199,4211,1,0,0,0,4200,4198,
        1,0,0,0,4201,4211,5,428,0,0,4202,4211,5,429,0,0,4203,4204,5,433,
        0,0,4204,4211,5,427,0,0,4205,4211,5,350,0,0,4206,4211,5,125,0,0,
        4207,4211,5,219,0,0,4208,4211,5,424,0,0,4209,4211,5,432,0,0,4210,
        4182,1,0,0,0,4210,4185,1,0,0,0,4210,4186,1,0,0,0,4210,4188,1,0,0,
        0,4210,4189,1,0,0,0,4210,4191,1,0,0,0,4210,4192,1,0,0,0,4210,4194,
        1,0,0,0,4210,4201,1,0,0,0,4210,4202,1,0,0,0,4210,4203,1,0,0,0,4210,
        4205,1,0,0,0,4210,4206,1,0,0,0,4210,4207,1,0,0,0,4210,4208,1,0,0,
        0,4210,4209,1,0,0,0,4211,573,1,0,0,0,4212,4213,7,26,0,0,4213,575,
        1,0,0,0,4214,4215,5,399,0,0,4215,4216,3,574,287,0,4216,4217,5,400,
        0,0,4217,4218,3,578,289,0,4218,4230,1,0,0,0,4219,4225,5,165,0,0,
        4220,4226,3,574,287,0,4221,4222,5,399,0,0,4222,4223,3,580,290,0,
        4223,4224,5,400,0,0,4224,4226,1,0,0,0,4225,4220,1,0,0,0,4225,4221,
        1,0,0,0,4226,4227,1,0,0,0,4227,4228,3,578,289,0,4228,4230,1,0,0,
        0,4229,4214,1,0,0,0,4229,4219,1,0,0,0,4230,577,1,0,0,0,4231,4232,
        3,666,333,0,4232,4233,5,341,0,0,4233,4234,3,668,334,0,4234,4246,
        1,0,0,0,4235,4236,3,672,336,0,4236,4237,5,341,0,0,4237,4238,3,678,
        339,0,4238,4246,1,0,0,0,4239,4246,3,666,333,0,4240,4246,3,668,334,
        0,4241,4246,3,672,336,0,4242,4246,3,674,337,0,4243,4246,3,676,338,
        0,4244,4246,3,678,339,0,4245,4231,1,0,0,0,4245,4235,1,0,0,0,4245,
        4239,1,0,0,0,4245,4240,1,0,0,0,4245,4241,1,0,0,0,4245,4242,1,0,0,
        0,4245,4243,1,0,0,0,4245,4244,1,0,0,0,4246,579,1,0,0,0,4247,4252,
        3,622,311,0,4248,4249,5,228,0,0,4249,4251,3,622,311,0,4250,4248,
        1,0,0,0,4251,4254,1,0,0,0,4252,4250,1,0,0,0,4252,4253,1,0,0,0,4253,
        581,1,0,0,0,4254,4252,1,0,0,0,4255,4267,3,572,286,0,4256,4267,3,
        576,288,0,4257,4267,3,560,280,0,4258,4267,3,568,284,0,4259,4267,
        3,566,283,0,4260,4267,3,562,281,0,4261,4267,3,564,282,0,4262,4267,
        3,600,300,0,4263,4267,3,550,275,0,4264,4267,3,538,269,0,4265,4267,
        3,638,319,0,4266,4255,1,0,0,0,4266,4256,1,0,0,0,4266,4257,1,0,0,
        0,4266,4258,1,0,0,0,4266,4259,1,0,0,0,4266,4260,1,0,0,0,4266,4261,
        1,0,0,0,4266,4262,1,0,0,0,4266,4263,1,0,0,0,4266,4264,1,0,0,0,4266,
        4265,1,0,0,0,4267,583,1,0,0,0,4268,4270,7,35,0,0,4269,4268,1,0,0,
        0,4270,4273,1,0,0,0,4271,4269,1,0,0,0,4271,4272,1,0,0,0,4272,4274,
        1,0,0,0,4273,4271,1,0,0,0,4274,4283,3,582,291,0,4275,4276,5,401,
        0,0,4276,4277,3,580,290,0,4277,4278,5,402,0,0,4278,4282,1,0,0,0,
        4279,4280,5,395,0,0,4280,4282,3,638,319,0,4281,4275,1,0,0,0,4281,
        4279,1,0,0,0,4282,4285,1,0,0,0,4283,4281,1,0,0,0,4283,4284,1,0,0,
        0,4284,585,1,0,0,0,4285,4283,1,0,0,0,4286,4291,3,584,292,0,4287,
        4288,5,423,0,0,4288,4290,3,584,292,0,4289,4287,1,0,0,0,4290,4293,
        1,0,0,0,4291,4289,1,0,0,0,4291,4292,1,0,0,0,4292,587,1,0,0,0,4293,
        4291,1,0,0,0,4294,4299,3,586,293,0,4295,4296,7,36,0,0,4296,4298,
        3,586,293,0,4297,4295,1,0,0,0,4298,4301,1,0,0,0,4299,4297,1,0,0,
        0,4299,4300,1,0,0,0,4300,589,1,0,0,0,4301,4299,1,0,0,0,4302,4307,
        3,588,294,0,4303,4304,7,37,0,0,4304,4306,3,588,294,0,4305,4303,1,
        0,0,0,4306,4309,1,0,0,0,4307,4305,1,0,0,0,4307,4308,1,0,0,0,4308,
        591,1,0,0,0,4309,4307,1,0,0,0,4310,4315,3,590,295,0,4311,4312,5,
        422,0,0,4312,4314,3,590,295,0,4313,4311,1,0,0,0,4314,4317,1,0,0,
        0,4315,4313,1,0,0,0,4315,4316,1,0,0,0,4316,593,1,0,0,0,4317,4315,
        1,0,0,0,4318,4323,3,592,296,0,4319,4320,5,419,0,0,4320,4322,3,592,
        296,0,4321,4319,1,0,0,0,4322,4325,1,0,0,0,4323,4321,1,0,0,0,4323,
        4324,1,0,0,0,4324,595,1,0,0,0,4325,4323,1,0,0,0,4326,4331,3,594,
        297,0,4327,4328,5,421,0,0,4328,4330,3,594,297,0,4329,4327,1,0,0,
        0,4330,4333,1,0,0,0,4331,4329,1,0,0,0,4331,4332,1,0,0,0,4332,597,
        1,0,0,0,4333,4331,1,0,0,0,4334,4335,7,38,0,0,4335,599,1,0,0,0,4336,
        4337,5,399,0,0,4337,4338,3,376,188,0,4338,4339,5,400,0,0,4339,601,
        1,0,0,0,4340,4342,3,596,298,0,4341,4343,3,604,302,0,4342,4341,1,
        0,0,0,4342,4343,1,0,0,0,4343,4347,1,0,0,0,4344,4345,5,117,0,0,4345,
        4347,3,600,300,0,4346,4340,1,0,0,0,4346,4344,1,0,0,0,4347,603,1,
        0,0,0,4348,4349,3,598,299,0,4349,4350,3,596,298,0,4350,4355,1,0,
        0,0,4351,4355,3,606,303,0,4352,4353,5,216,0,0,4353,4355,3,610,305,
        0,4354,4348,1,0,0,0,4354,4351,1,0,0,0,4354,4352,1,0,0,0,4355,605,
        1,0,0,0,4356,4357,5,154,0,0,4357,4371,3,608,304,0,4358,4359,5,25,
        0,0,4359,4360,3,596,298,0,4360,4361,5,11,0,0,4361,4362,3,596,298,
        0,4362,4371,1,0,0,0,4363,4364,5,184,0,0,4364,4365,7,39,0,0,4365,
        4371,3,538,269,0,4366,4367,3,634,317,0,4367,4368,7,40,0,0,4368,4369,
        3,600,300,0,4369,4371,1,0,0,0,4370,4356,1,0,0,0,4370,4358,1,0,0,
        0,4370,4363,1,0,0,0,4370,4366,1,0,0,0,4371,607,1,0,0,0,4372,4375,
        3,600,300,0,4373,4375,3,538,269,0,4374,4372,1,0,0,0,4374,4373,1,
        0,0,0,4375,609,1,0,0,0,4376,4377,7,41,0,0,4377,4380,3,596,298,0,
        4378,4380,3,606,303,0,4379,4376,1,0,0,0,4379,4378,1,0,0,0,4380,611,
        1,0,0,0,4381,4382,5,167,0,0,4382,4383,5,96,0,0,4383,4384,5,139,0,
        0,4384,613,1,0,0,0,4385,4393,5,405,0,0,4386,4393,5,406,0,0,4387,
        4393,5,407,0,0,4388,4389,5,167,0,0,4389,4390,5,216,0,0,4390,4391,
        5,96,0,0,4391,4393,5,139,0,0,4392,4385,1,0,0,0,4392,4386,1,0,0,0,
        4392,4387,1,0,0,0,4392,4388,1,0,0,0,4393,615,1,0,0,0,4394,4403,3,
        602,301,0,4395,4396,3,614,307,0,4396,4397,3,602,301,0,4397,4402,
        1,0,0,0,4398,4399,3,612,306,0,4399,4400,3,602,301,0,4400,4402,1,
        0,0,0,4401,4395,1,0,0,0,4401,4398,1,0,0,0,4402,4405,1,0,0,0,4403,
        4401,1,0,0,0,4403,4404,1,0,0,0,4404,617,1,0,0,0,4405,4403,1,0,0,
        0,4406,4413,5,219,0,0,4407,4413,5,350,0,0,4408,4413,5,125,0,0,4409,
        4413,5,360,0,0,4410,4411,5,216,0,0,4411,4413,7,42,0,0,4412,4406,
        1,0,0,0,4412,4407,1,0,0,0,4412,4408,1,0,0,0,4412,4409,1,0,0,0,4412,
        4410,1,0,0,0,4413,619,1,0,0,0,4414,4416,5,216,0,0,4415,4414,1,0,
        0,0,4416,4419,1,0,0,0,4417,4415,1,0,0,0,4417,4418,1,0,0,0,4418,4420,
        1,0,0,0,4419,4417,1,0,0,0,4420,4423,3,616,308,0,4421,4422,5,167,
        0,0,4422,4424,3,618,309,0,4423,4421,1,0,0,0,4423,4424,1,0,0,0,4424,
        621,1,0,0,0,4425,4430,3,620,310,0,4426,4427,5,11,0,0,4427,4429,3,
        620,310,0,4428,4426,1,0,0,0,4429,4432,1,0,0,0,4430,4428,1,0,0,0,
        4430,4431,1,0,0,0,4431,623,1,0,0,0,4432,4430,1,0,0,0,4433,4435,3,
        478,239,0,4434,4436,3,626,313,0,4435,4434,1,0,0,0,4435,4436,1,0,
        0,0,4436,625,1,0,0,0,4437,4438,5,237,0,0,4438,4439,5,399,0,0,4439,
        4444,3,628,314,0,4440,4441,5,397,0,0,4441,4443,3,628,314,0,4442,
        4440,1,0,0,0,4443,4446,1,0,0,0,4444,4442,1,0,0,0,4444,4445,1,0,0,
        0,4445,4447,1,0,0,0,4446,4444,1,0,0,0,4447,4448,5,400,0,0,4448,627,
        1,0,0,0,4449,4452,3,638,319,0,4450,4451,5,405,0,0,4451,4453,3,572,
        286,0,4452,4450,1,0,0,0,4452,4453,1,0,0,0,4453,629,1,0,0,0,4454,
        4455,5,399,0,0,4455,4460,3,632,316,0,4456,4457,5,397,0,0,4457,4459,
        3,632,316,0,4458,4456,1,0,0,0,4459,4462,1,0,0,0,4460,4458,1,0,0,
        0,4460,4461,1,0,0,0,4461,4463,1,0,0,0,4462,4460,1,0,0,0,4463,4464,
        5,400,0,0,4464,631,1,0,0,0,4465,4468,3,638,319,0,4466,4469,5,184,
        0,0,4467,4469,3,634,317,0,4468,4466,1,0,0,0,4468,4467,1,0,0,0,4469,
        4470,1,0,0,0,4470,4471,3,572,286,0,4471,633,1,0,0,0,4472,4473,7,
        43,0,0,4473,635,1,0,0,0,4474,4475,7,44,0,0,4475,637,1,0,0,0,4476,
        4479,5,432,0,0,4477,4479,3,644,322,0,4478,4476,1,0,0,0,4478,4477,
        1,0,0,0,4479,639,1,0,0,0,4480,4483,3,638,319,0,4481,4482,5,395,0,
        0,4482,4484,3,638,319,0,4483,4481,1,0,0,0,4483,4484,1,0,0,0,4484,
        641,1,0,0,0,4485,4486,3,638,319,0,4486,643,1,0,0,0,4487,4488,7,45,
        0,0,4488,645,1,0,0,0,4489,4490,7,46,0,0,4490,647,1,0,0,0,4491,4542,
        3,638,319,0,4492,4542,5,171,0,0,4493,4542,5,237,0,0,4494,4542,5,
        198,0,0,4495,4542,5,268,0,0,4496,4542,5,369,0,0,4497,4542,5,241,
        0,0,4498,4542,5,165,0,0,4499,4542,5,292,0,0,4500,4542,5,356,0,0,
        4501,4542,5,144,0,0,4502,4542,5,203,0,0,4503,4542,5,219,0,0,4504,
        4542,5,126,0,0,4505,4542,5,188,0,0,4506,4542,5,101,0,0,4507,4542,
        5,329,0,0,4508,4542,5,224,0,0,4509,4542,5,291,0,0,4510,4542,5,145,
        0,0,4511,4542,5,304,0,0,4512,4542,5,135,0,0,4513,4542,5,318,0,0,
        4514,4542,5,161,0,0,4515,4542,5,54,0,0,4516,4542,5,166,0,0,4517,
        4542,5,358,0,0,4518,4542,5,45,0,0,4519,4542,5,347,0,0,4520,4542,
        5,96,0,0,4521,4542,5,154,0,0,4522,4542,5,269,0,0,4523,4542,5,337,
        0,0,4524,4542,5,225,0,0,4525,4542,5,108,0,0,4526,4542,5,141,0,0,
        4527,4542,5,365,0,0,4528,4542,5,21,0,0,4529,4542,5,78,0,0,4530,4542,
        5,374,0,0,4531,4542,5,336,0,0,4532,4542,5,167,0,0,4533,4542,5,134,
        0,0,4534,4542,5,216,0,0,4535,4542,5,27,0,0,4536,4542,5,370,0,0,4537,
        4542,5,263,0,0,4538,4542,5,25,0,0,4539,4542,5,62,0,0,4540,4542,5,
        17,0,0,4541,4491,1,0,0,0,4541,4492,1,0,0,0,4541,4493,1,0,0,0,4541,
        4494,1,0,0,0,4541,4495,1,0,0,0,4541,4496,1,0,0,0,4541,4497,1,0,0,
        0,4541,4498,1,0,0,0,4541,4499,1,0,0,0,4541,4500,1,0,0,0,4541,4501,
        1,0,0,0,4541,4502,1,0,0,0,4541,4503,1,0,0,0,4541,4504,1,0,0,0,4541,
        4505,1,0,0,0,4541,4506,1,0,0,0,4541,4507,1,0,0,0,4541,4508,1,0,0,
        0,4541,4509,1,0,0,0,4541,4510,1,0,0,0,4541,4511,1,0,0,0,4541,4512,
        1,0,0,0,4541,4513,1,0,0,0,4541,4514,1,0,0,0,4541,4515,1,0,0,0,4541,
        4516,1,0,0,0,4541,4517,1,0,0,0,4541,4518,1,0,0,0,4541,4519,1,0,0,
        0,4541,4520,1,0,0,0,4541,4521,1,0,0,0,4541,4522,1,0,0,0,4541,4523,
        1,0,0,0,4541,4524,1,0,0,0,4541,4525,1,0,0,0,4541,4526,1,0,0,0,4541,
        4527,1,0,0,0,4541,4528,1,0,0,0,4541,4529,1,0,0,0,4541,4530,1,0,0,
        0,4541,4531,1,0,0,0,4541,4532,1,0,0,0,4541,4533,1,0,0,0,4541,4534,
        1,0,0,0,4541,4535,1,0,0,0,4541,4536,1,0,0,0,4541,4537,1,0,0,0,4541,
        4538,1,0,0,0,4541,4539,1,0,0,0,4541,4540,1,0,0,0,4542,649,1,0,0,
        0,4543,4544,5,58,0,0,4544,4545,5,280,0,0,4545,4547,5,243,0,0,4546,
        4548,3,32,16,0,4547,4546,1,0,0,0,4547,4548,1,0,0,0,4548,4558,1,0,
        0,0,4549,4550,3,638,319,0,4550,4551,5,184,0,0,4551,4552,3,638,319,
        0,4552,4559,1,0,0,0,4553,4556,3,638,319,0,4554,4555,5,387,0,0,4555,
        4557,3,656,328,0,4556,4554,1,0,0,0,4556,4557,1,0,0,0,4557,4559,1,
        0,0,0,4558,4549,1,0,0,0,4558,4553,1,0,0,0,4559,4709,1,0,0,0,4560,
        4561,5,9,0,0,4561,4562,5,280,0,0,4562,4563,5,243,0,0,4563,4588,3,
        638,319,0,4564,4589,5,373,0,0,4565,4589,3,664,332,0,4566,4567,5,
        304,0,0,4567,4589,3,656,328,0,4568,4569,5,363,0,0,4569,4574,3,658,
        329,0,4570,4571,5,397,0,0,4571,4573,3,658,329,0,4572,4570,1,0,0,
        0,4573,4576,1,0,0,0,4574,4572,1,0,0,0,4574,4575,1,0,0,0,4575,4589,
        1,0,0,0,4576,4574,1,0,0,0,4577,4578,5,274,0,0,4578,4579,5,341,0,
        0,4579,4589,3,638,319,0,4580,4582,3,660,330,0,4581,4583,3,662,331,
        0,4582,4581,1,0,0,0,4582,4583,1,0,0,0,4583,4589,1,0,0,0,4584,4586,
        3,662,331,0,4585,4587,3,660,330,0,4586,4585,1,0,0,0,4586,4587,1,
        0,0,0,4587,4589,1,0,0,0,4588,4564,1,0,0,0,4588,4565,1,0,0,0,4588,
        4566,1,0,0,0,4588,4568,1,0,0,0,4588,4577,1,0,0,0,4588,4580,1,0,0,
        0,4588,4584,1,0,0,0,4589,4709,1,0,0,0,4590,4591,5,101,0,0,4591,4592,
        5,280,0,0,4592,4594,5,243,0,0,4593,4595,3,30,15,0,4594,4593,1,0,
        0,0,4594,4595,1,0,0,0,4595,4596,1,0,0,0,4596,4709,3,638,319,0,4597,
        4600,3,662,331,0,4598,4600,3,664,332,0,4599,4597,1,0,0,0,4599,4598,
        1,0,0,0,4600,4601,1,0,0,0,4601,4602,5,390,0,0,4602,4603,5,197,0,
        0,4603,4709,1,0,0,0,4604,4616,5,278,0,0,4605,4606,5,3,0,0,4606,4607,
        5,280,0,0,4607,4608,5,243,0,0,4608,4609,5,387,0,0,4609,4617,3,638,
        319,0,4610,4611,5,280,0,0,4611,4612,5,243,0,0,4612,4613,3,638,319,
        0,4613,4614,5,387,0,0,4614,4615,3,638,319,0,4615,4617,1,0,0,0,4616,
        4605,1,0,0,0,4616,4610,1,0,0,0,4617,4709,1,0,0,0,4618,4619,5,58,
        0,0,4619,4620,5,348,0,0,4620,4621,3,638,319,0,4621,4622,5,395,0,
        0,4622,4623,3,638,319,0,4623,4624,5,383,0,0,4624,4625,3,684,342,
        0,4625,4626,5,99,0,0,4626,4627,3,686,343,0,4627,4709,1,0,0,0,4628,
        4629,5,9,0,0,4629,4630,5,348,0,0,4630,4631,3,638,319,0,4631,4632,
        5,395,0,0,4632,4649,3,638,319,0,4633,4634,5,383,0,0,4634,4635,3,
        684,342,0,4635,4636,5,99,0,0,4636,4637,3,686,343,0,4637,4650,1,0,
        0,0,4638,4639,5,4,0,0,4639,4643,5,341,0,0,4640,4641,5,101,0,0,4641,
        4643,5,139,0,0,4642,4638,1,0,0,0,4642,4640,1,0,0,0,4643,4647,1,0,
        0,0,4644,4645,5,246,0,0,4645,4648,3,682,341,0,4646,4648,5,362,0,
        0,4647,4644,1,0,0,0,4647,4646,1,0,0,0,4648,4650,1,0,0,0,4649,4633,
        1,0,0,0,4649,4642,1,0,0,0,4650,4709,1,0,0,0,4651,4652,5,101,0,0,
        4652,4653,5,348,0,0,4653,4654,3,638,319,0,4654,4655,5,395,0,0,4655,
        4656,3,638,319,0,4656,4709,1,0,0,0,4657,4658,5,58,0,0,4658,4659,
        5,246,0,0,4659,4660,3,638,319,0,4660,4661,5,395,0,0,4661,4662,3,
        682,341,0,4662,4663,5,387,0,0,4663,4664,3,690,345,0,4664,4709,1,
        0,0,0,4665,4666,5,9,0,0,4666,4667,5,246,0,0,4667,4668,3,638,319,
        0,4668,4669,5,395,0,0,4669,4677,3,682,341,0,4670,4671,5,304,0,0,
        4671,4678,3,690,345,0,4672,4673,5,363,0,0,4673,4678,5,294,0,0,4674,
        4675,7,47,0,0,4675,4676,5,348,0,0,4676,4678,3,638,319,0,4677,4670,
        1,0,0,0,4677,4672,1,0,0,0,4677,4674,1,0,0,0,4678,4709,1,0,0,0,4679,
        4680,5,101,0,0,4680,4681,5,246,0,0,4681,4682,3,638,319,0,4682,4683,
        5,395,0,0,4683,4684,3,682,341,0,4684,4709,1,0,0,0,4685,4686,7,48,
        0,0,4686,4687,3,652,326,0,4687,4688,5,200,0,0,4688,4689,5,426,0,
        0,4689,4690,5,154,0,0,4690,4694,3,638,319,0,4691,4692,5,341,0,0,
        4692,4695,3,682,341,0,4693,4695,5,362,0,0,4694,4691,1,0,0,0,4694,
        4693,1,0,0,0,4695,4699,1,0,0,0,4696,4697,5,387,0,0,4697,4698,5,229,
        0,0,4698,4700,5,431,0,0,4699,4696,1,0,0,0,4699,4700,1,0,0,0,4700,
        4709,1,0,0,0,4701,4702,5,101,0,0,4702,4703,3,652,326,0,4703,4704,
        5,200,0,0,4704,4705,5,426,0,0,4705,4706,5,154,0,0,4706,4707,3,638,
        319,0,4707,4709,1,0,0,0,4708,4543,1,0,0,0,4708,4560,1,0,0,0,4708,
        4590,1,0,0,0,4708,4599,1,0,0,0,4708,4604,1,0,0,0,4708,4618,1,0,0,
        0,4708,4628,1,0,0,0,4708,4651,1,0,0,0,4708,4657,1,0,0,0,4708,4665,
        1,0,0,0,4708,4679,1,0,0,0,4708,4685,1,0,0,0,4708,4701,1,0,0,0,4709,
        651,1,0,0,0,4710,4711,7,49,0,0,4711,653,1,0,0,0,4712,4713,5,259,
        0,0,4713,4714,5,405,0,0,4714,4720,5,431,0,0,4715,4716,5,83,0,0,4716,
        4717,5,246,0,0,4717,4718,5,405,0,0,4718,4720,3,682,341,0,4719,4712,
        1,0,0,0,4719,4715,1,0,0,0,4720,655,1,0,0,0,4721,4726,3,654,327,0,
        4722,4723,5,397,0,0,4723,4725,3,654,327,0,4724,4722,1,0,0,0,4725,
        4728,1,0,0,0,4726,4724,1,0,0,0,4726,4727,1,0,0,0,4727,657,1,0,0,
        0,4728,4726,1,0,0,0,4729,4733,5,259,0,0,4730,4731,5,83,0,0,4731,
        4733,5,246,0,0,4732,4729,1,0,0,0,4732,4730,1,0,0,0,4733,659,1,0,
        0,0,4734,4737,5,2,0,0,4735,4736,5,387,0,0,4736,4738,5,278,0,0,4737,
        4735,1,0,0,0,4737,4738,1,0,0,0,4738,661,1,0,0,0,4739,4740,7,50,0,
        0,4740,663,1,0,0,0,4741,4742,7,51,0,0,4742,665,1,0,0,0,4743,4744,
        7,52,0,0,4744,667,1,0,0,0,4745,4746,7,53,0,0,4746,669,1,0,0,0,4747,
        4748,7,54,0,0,4748,671,1,0,0,0,4749,4750,7,55,0,0,4750,673,1,0,0,
        0,4751,4752,7,56,0,0,4752,675,1,0,0,0,4753,4754,7,57,0,0,4754,677,
        1,0,0,0,4755,4756,7,58,0,0,4756,679,1,0,0,0,4757,4758,7,59,0,0,4758,
        681,1,0,0,0,4759,4764,3,638,319,0,4760,4761,5,395,0,0,4761,4763,
        3,638,319,0,4762,4760,1,0,0,0,4763,4766,1,0,0,0,4764,4762,1,0,0,
        0,4764,4765,1,0,0,0,4765,683,1,0,0,0,4766,4764,1,0,0,0,4767,4768,
        3,638,319,0,4768,4769,5,411,0,0,4769,4770,7,26,0,0,4770,685,1,0,
        0,0,4771,4776,5,176,0,0,4772,4773,5,211,0,0,4773,4774,5,341,0,0,
        4774,4776,3,682,341,0,4775,4771,1,0,0,0,4775,4772,1,0,0,0,4776,687,
        1,0,0,0,4777,4778,5,8,0,0,4778,4779,5,405,0,0,4779,4790,5,431,0,
        0,4780,4781,5,259,0,0,4781,4782,5,405,0,0,4782,4790,5,431,0,0,4783,
        4784,5,294,0,0,4784,4785,5,405,0,0,4785,4790,5,426,0,0,4786,4787,
        5,240,0,0,4787,4788,5,405,0,0,4788,4790,3,682,341,0,4789,4777,1,
        0,0,0,4789,4780,1,0,0,0,4789,4783,1,0,0,0,4789,4786,1,0,0,0,4790,
        689,1,0,0,0,4791,4796,3,688,344,0,4792,4793,5,397,0,0,4793,4795,
        3,688,344,0,4794,4792,1,0,0,0,4795,4798,1,0,0,0,4796,4794,1,0,0,
        0,4796,4797,1,0,0,0,4797,691,1,0,0,0,4798,4796,1,0,0,0,621,695,702,
        705,711,717,724,734,737,741,756,763,769,774,779,782,806,813,816,
        821,826,832,836,849,853,857,862,869,873,878,885,889,894,942,949,
        954,977,981,985,988,992,997,1003,1007,1013,1015,1026,1030,1037,1045,
        1048,1053,1057,1060,1070,1078,1082,1085,1089,1093,1096,1101,1107,
        1112,1117,1121,1132,1134,1138,1148,1152,1158,1161,1168,1173,1181,
        1186,1190,1198,1203,1209,1215,1218,1221,1224,1233,1241,1246,1254,
        1261,1264,1267,1269,1280,1282,1285,1288,1291,1294,1297,1299,1311,
        1317,1325,1327,1337,1370,1375,1379,1383,1390,1397,1403,1407,1410,
        1417,1440,1445,1449,1457,1466,1473,1479,1486,1489,1495,1502,1510,
        1519,1528,1535,1555,1562,1564,1571,1581,1589,1593,1597,1610,1619,
        1635,1639,1644,1649,1652,1655,1658,1661,1664,1669,1678,1682,1689,
        1692,1695,1698,1710,1716,1742,1750,1754,1757,1760,1763,1766,1769,
        1772,1775,1784,1794,1797,1817,1823,1829,1832,1834,1841,1848,1861,
        1866,1875,1883,1891,1904,1917,1933,1937,1952,1958,1961,1964,1967,
        1970,1974,1989,1992,2003,2017,2051,2059,2064,2072,2077,2082,2089,
        2097,2105,2113,2118,2128,2132,2140,2149,2152,2156,2163,2169,2173,
        2179,2183,2195,2204,2215,2219,2226,2238,2248,2251,2258,2264,2268,
        2271,2274,2280,2284,2288,2293,2297,2301,2305,2313,2317,2321,2325,
        2329,2337,2341,2345,2353,2358,2363,2367,2371,2378,2387,2395,2407,
        2425,2428,2434,2460,2463,2469,2477,2485,2498,2505,2508,2511,2514,
        2517,2520,2523,2526,2529,2532,2535,2540,2543,2546,2549,2552,2555,
        2558,2561,2564,2567,2570,2572,2578,2582,2585,2588,2591,2594,2597,
        2604,2608,2611,2614,2617,2620,2623,2630,2633,2641,2645,2652,2654,
        2657,2662,2665,2669,2674,2680,2688,2696,2706,2709,2713,2717,2722,
        2729,2733,2735,2739,2746,2751,2764,2772,2791,2801,2814,2824,2828,
        2832,2838,2845,2852,2861,2868,2888,2891,2905,2920,2924,2944,2956,
        2962,2965,2968,2974,2980,2987,2995,3001,3005,3010,3013,3017,3024,
        3029,3034,3037,3039,3047,3055,3059,3063,3067,3084,3101,3108,3117,
        3122,3125,3128,3132,3147,3161,3164,3175,3179,3182,3185,3189,3194,
        3197,3200,3203,3206,3209,3215,3218,3221,3224,3227,3230,3233,3236,
        3239,3242,3246,3248,3254,3259,3262,3265,3268,3271,3277,3280,3283,
        3286,3289,3292,3295,3298,3301,3304,3308,3310,3312,3317,3322,3326,
        3330,3335,3340,3349,3359,3367,3379,3382,3388,3395,3402,3409,3416,
        3425,3429,3436,3441,3445,3449,3452,3455,3466,3470,3472,3475,3488,
        3491,3494,3506,3509,3516,3525,3530,3532,3534,3551,3554,3562,3565,
        3569,3572,3575,3578,3581,3593,3601,3608,3611,3618,3621,3626,3633,
        3641,3649,3654,3658,3663,3670,3684,3687,3691,3702,3712,3715,3722,
        3731,3734,3740,3743,3750,3755,3758,3771,3777,3779,3787,3790,3800,
        3805,3807,3819,3825,3827,3834,3841,3855,3861,3864,3867,3870,3879,
        3886,3892,3901,3905,3913,3923,3933,3938,3942,3948,3953,3963,3967,
        3970,3975,3978,3982,3987,3998,4000,4009,4028,4038,4041,4048,4051,
        4061,4068,4071,4073,4084,4094,4096,4105,4110,4119,4132,4136,4148,
        4152,4161,4180,4198,4210,4225,4229,4245,4252,4266,4271,4281,4283,
        4291,4299,4307,4315,4323,4331,4342,4346,4354,4370,4374,4379,4392,
        4401,4403,4412,4417,4423,4430,4435,4444,4452,4460,4468,4478,4483,
        4541,4547,4556,4558,4574,4582,4586,4588,4594,4599,4616,4642,4647,
        4649,4677,4694,4699,4708,4719,4726,4732,4737,4764,4775,4789,4796
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!HiveSqlParser.__ATN) {
            HiveSqlParser.__ATN = new antlr.ATNDeserializer().deserialize(HiveSqlParser._serializedATN);
        }

        return HiveSqlParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(HiveSqlParser.literalNames, HiveSqlParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return HiveSqlParser.vocabulary;
    }

    private static readonly decisionsToDFA = HiveSqlParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ProgramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.EOF, 0)!;
    }
    public statement(): StatementContext[];
    public statement(i: number): StatementContext | null;
    public statement(i?: number): StatementContext[] | StatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StatementContext);
        }

        return this.getRuleContext(i, StatementContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_program;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterProgram) {
             listener.enterProgram(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitProgram) {
             listener.exitProgram(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProgram) {
            return visitor.visitProgram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explainStatement(): ExplainStatementContext | null {
        return this.getRuleContext(0, ExplainStatementContext);
    }
    public execStatement(): ExecStatementContext | null {
        return this.getRuleContext(0, ExecStatementContext);
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.SEMICOLON, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_statement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterStatement) {
             listener.enterStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitStatement) {
             listener.exitStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXPLAIN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXPLAIN, 0)!;
    }
    public execStatement(): ExecStatementContext | null {
        return this.getRuleContext(0, ExecStatementContext);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REWRITE, 0);
    }
    public queryStatementExpression(): QueryStatementExpressionContext | null {
        return this.getRuleContext(0, QueryStatementExpressionContext);
    }
    public explainOption(): ExplainOptionContext[];
    public explainOption(i: number): ExplainOptionContext | null;
    public explainOption(i?: number): ExplainOptionContext[] | ExplainOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExplainOptionContext);
        }

        return this.getRuleContext(i, ExplainOptionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_explainStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExplainStatement) {
             listener.enterExplainStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExplainStatement) {
             listener.exitExplainStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainStatement) {
            return visitor.visitExplainStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXTENDED, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORMATTED, 0);
    }
    public KW_DEPENDENCY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEPENDENCY, 0);
    }
    public KW_CBO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CBO, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COST, 0);
    }
    public KW_JOINCOST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_JOINCOST, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOGICAL, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ANALYZE, 0);
    }
    public KW_REOPTIMIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REOPTIMIZATION, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCKS, 0);
    }
    public KW_AST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AST, 0);
    }
    public KW_VECTORIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VECTORIZATION, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ONLY, 0);
    }
    public vectorizatonDetail(): VectorizatonDetailContext | null {
        return this.getRuleContext(0, VectorizatonDetailContext);
    }
    public KW_DEBUG(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEBUG, 0);
    }
    public KW_DDL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DDL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_explainOption;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExplainOption) {
             listener.enterExplainOption(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExplainOption) {
             listener.exitExplainOption(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainOption) {
            return visitor.visitExplainOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VectorizatonDetailContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SUMMARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SUMMARY, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OPERATOR, 0);
    }
    public KW_EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXPRESSION, 0);
    }
    public KW_DETAIL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DETAIL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_vectorizatonDetail;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterVectorizatonDetail) {
             listener.enterVectorizatonDetail(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitVectorizatonDetail) {
             listener.exitVectorizatonDetail(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVectorizatonDetail) {
            return visitor.visitVectorizatonDetail(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecStatementContext extends antlr.ParserRuleContext {
    public _dbName?: DbSchemaNameContext;
    public _replConf?: KeyValuePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryStatementExpression(): QueryStatementExpressionContext | null {
        return this.getRuleContext(0, QueryStatementExpressionContext);
    }
    public loadStatement(): LoadStatementContext | null {
        return this.getRuleContext(0, LoadStatementContext);
    }
    public exportStatement(): ExportStatementContext | null {
        return this.getRuleContext(0, ExportStatementContext);
    }
    public importStatement(): ImportStatementContext | null {
        return this.getRuleContext(0, ImportStatementContext);
    }
    public replDumpStatement(): ReplDumpStatementContext | null {
        return this.getRuleContext(0, ReplDumpStatementContext);
    }
    public replLoadStatement(): ReplLoadStatementContext | null {
        return this.getRuleContext(0, ReplLoadStatementContext);
    }
    public KW_REPL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPL, 0);
    }
    public KW_STATUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STATUS, 0);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public ddlStatement(): DdlStatementContext | null {
        return this.getRuleContext(0, DdlStatementContext);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DELETE, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FROM, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UPDATE, 0);
    }
    public setColumnsClause(): SetColumnsClauseContext | null {
        return this.getRuleContext(0, SetColumnsClauseContext);
    }
    public sqlTransactionStatement(): SqlTransactionStatementContext | null {
        return this.getRuleContext(0, SqlTransactionStatementContext);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MERGE, 0);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTO, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USING, 0);
    }
    public joinSourcePart(): JoinSourcePartContext | null {
        return this.getRuleContext(0, JoinSourcePartContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ON, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public whenClauses(): WhenClausesContext | null {
        return this.getRuleContext(0, WhenClausesContext);
    }
    public QUERY_HINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.QUERY_HINT, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public KW_PREPARE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PREPARE, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXECUTE, 0);
    }
    public constantList(): ConstantListContext | null {
        return this.getRuleContext(0, ConstantListContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public configPropertiesItem(): ConfigPropertiesItemContext[];
    public configPropertiesItem(i: number): ConfigPropertiesItemContext | null;
    public configPropertiesItem(i?: number): ConfigPropertiesItemContext[] | ConfigPropertiesItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConfigPropertiesItemContext);
        }

        return this.getRuleContext(i, ConfigPropertiesItemContext);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_execStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExecStatement) {
             listener.enterExecStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExecStatement) {
             listener.exitExecStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExecStatement) {
            return visitor.visitExecStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LOAD, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DATA, 0)!;
    }
    public KW_INPATH(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INPATH, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INTO, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCAL, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OVERWRITE, 0);
    }
    public inputFileFormat(): InputFileFormatContext | null {
        return this.getRuleContext(0, InputFileFormatContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_loadStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLoadStatement) {
             listener.enterLoadStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLoadStatement) {
             listener.exitLoadStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoadStatement) {
            return visitor.visitLoadStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplicationClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FOR, 0)!;
    }
    public KW_REPLICATION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REPLICATION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public KW_METADATA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_METADATA, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_replicationClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterReplicationClause) {
             listener.enterReplicationClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitReplicationClause) {
             listener.exitReplicationClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplicationClause) {
            return visitor.visitReplicationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExportStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXPORT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXPORT, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TO, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public replicationClause(): ReplicationClauseContext | null {
        return this.getRuleContext(0, ReplicationClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_exportStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExportStatement) {
             listener.enterExportStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExportStatement) {
             listener.exitExportStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExportStatement) {
            return visitor.visitExportStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportStatementContext extends antlr.ParserRuleContext {
    public _path?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IMPORT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_IMPORT, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FROM, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public locationPath(): LocationPathContext | null {
        return this.getRuleContext(0, LocationPathContext);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXTERNAL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_importStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterImportStatement) {
             listener.enterImportStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitImportStatement) {
             listener.exitImportStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitImportStatement) {
            return visitor.visitImportStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplDumpStatementContext extends antlr.ParserRuleContext {
    public _dbPolicy?: ReplDbPolicyContext;
    public _oldDbPolicy?: ReplDbPolicyContext;
    public _replConf?: KeyValuePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REPL, 0)!;
    }
    public KW_DUMP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DUMP, 0)!;
    }
    public replDbPolicy(): ReplDbPolicyContext[];
    public replDbPolicy(i: number): ReplDbPolicyContext | null;
    public replDbPolicy(i?: number): ReplDbPolicyContext[] | ReplDbPolicyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ReplDbPolicyContext);
        }

        return this.getRuleContext(i, ReplDbPolicyContext);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLACE, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_replDumpStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterReplDumpStatement) {
             listener.enterReplDumpStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitReplDumpStatement) {
             listener.exitReplDumpStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplDumpStatement) {
            return visitor.visitReplDumpStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplDbPolicyContext extends antlr.ParserRuleContext {
    public _dbName?: DbSchemaNameContext;
    public _tablePolicy?: ReplTableLevelPolicyContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DOT, 0);
    }
    public replTableLevelPolicy(): ReplTableLevelPolicyContext | null {
        return this.getRuleContext(0, ReplTableLevelPolicyContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_replDbPolicy;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterReplDbPolicy) {
             listener.enterReplDbPolicy(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitReplDbPolicy) {
             listener.exitReplDbPolicy(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplDbPolicy) {
            return visitor.visitReplDbPolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplLoadStatementContext extends antlr.ParserRuleContext {
    public _sourceDbPolicy?: ReplDbPolicyContext;
    public _dbName?: DbSchemaNameContext;
    public _replConf?: KeyValuePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REPL, 0)!;
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LOAD, 0)!;
    }
    public replDbPolicy(): ReplDbPolicyContext {
        return this.getRuleContext(0, ReplDbPolicyContext)!;
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTO, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_replLoadStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterReplLoadStatement) {
             listener.enterReplLoadStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitReplLoadStatement) {
             listener.exitReplLoadStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplLoadStatement) {
            return visitor.visitReplLoadStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplTableLevelPolicyContext extends antlr.ParserRuleContext {
    public _replTablesIncludeList?: Token | null;
    public _replTablesExcludeList?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_replTableLevelPolicy;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterReplTableLevelPolicy) {
             listener.enterReplTableLevelPolicy(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitReplTableLevelPolicy) {
             listener.exitReplTableLevelPolicy(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplTableLevelPolicy) {
            return visitor.visitReplTableLevelPolicy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DdlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext | null {
        return this.getRuleContext(0, CreateDatabaseStatementContext);
    }
    public switchDatabaseStatement(): SwitchDatabaseStatementContext | null {
        return this.getRuleContext(0, SwitchDatabaseStatementContext);
    }
    public dropDatabaseStatement(): DropDatabaseStatementContext | null {
        return this.getRuleContext(0, DropDatabaseStatementContext);
    }
    public createTableStatement(): CreateTableStatementContext | null {
        return this.getRuleContext(0, CreateTableStatementContext);
    }
    public dropTableStatement(): DropTableStatementContext | null {
        return this.getRuleContext(0, DropTableStatementContext);
    }
    public truncateTableStatement(): TruncateTableStatementContext | null {
        return this.getRuleContext(0, TruncateTableStatementContext);
    }
    public alterStatement(): AlterStatementContext | null {
        return this.getRuleContext(0, AlterStatementContext);
    }
    public descStatement(): DescStatementContext | null {
        return this.getRuleContext(0, DescStatementContext);
    }
    public showStatement(): ShowStatementContext | null {
        return this.getRuleContext(0, ShowStatementContext);
    }
    public metastoreCheck(): MetastoreCheckContext | null {
        return this.getRuleContext(0, MetastoreCheckContext);
    }
    public createViewStatement(): CreateViewStatementContext | null {
        return this.getRuleContext(0, CreateViewStatementContext);
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext | null {
        return this.getRuleContext(0, CreateMaterializedViewStatementContext);
    }
    public createScheduledQueryStatement(): CreateScheduledQueryStatementContext | null {
        return this.getRuleContext(0, CreateScheduledQueryStatementContext);
    }
    public alterScheduledQueryStatement(): AlterScheduledQueryStatementContext | null {
        return this.getRuleContext(0, AlterScheduledQueryStatementContext);
    }
    public dropScheduledQueryStatement(): DropScheduledQueryStatementContext | null {
        return this.getRuleContext(0, DropScheduledQueryStatementContext);
    }
    public dropViewStatement(): DropViewStatementContext | null {
        return this.getRuleContext(0, DropViewStatementContext);
    }
    public dropMaterializedViewStatement(): DropMaterializedViewStatementContext | null {
        return this.getRuleContext(0, DropMaterializedViewStatementContext);
    }
    public createFunctionStatement(): CreateFunctionStatementContext | null {
        return this.getRuleContext(0, CreateFunctionStatementContext);
    }
    public createMacroStatement(): CreateMacroStatementContext | null {
        return this.getRuleContext(0, CreateMacroStatementContext);
    }
    public dropFunctionStatement(): DropFunctionStatementContext | null {
        return this.getRuleContext(0, DropFunctionStatementContext);
    }
    public reloadFunctionsStatement(): ReloadFunctionsStatementContext | null {
        return this.getRuleContext(0, ReloadFunctionsStatementContext);
    }
    public dropMacroStatement(): DropMacroStatementContext | null {
        return this.getRuleContext(0, DropMacroStatementContext);
    }
    public createIndexStatement(): CreateIndexStatementContext | null {
        return this.getRuleContext(0, CreateIndexStatementContext);
    }
    public dropIndexStatement(): DropIndexStatementContext | null {
        return this.getRuleContext(0, DropIndexStatementContext);
    }
    public analyzeStatement(): AnalyzeStatementContext | null {
        return this.getRuleContext(0, AnalyzeStatementContext);
    }
    public lockStatement(): LockStatementContext | null {
        return this.getRuleContext(0, LockStatementContext);
    }
    public unlockStatement(): UnlockStatementContext | null {
        return this.getRuleContext(0, UnlockStatementContext);
    }
    public lockDatabase(): LockDatabaseContext | null {
        return this.getRuleContext(0, LockDatabaseContext);
    }
    public unlockDatabase(): UnlockDatabaseContext | null {
        return this.getRuleContext(0, UnlockDatabaseContext);
    }
    public createRoleStatement(): CreateRoleStatementContext | null {
        return this.getRuleContext(0, CreateRoleStatementContext);
    }
    public dropRoleStatement(): DropRoleStatementContext | null {
        return this.getRuleContext(0, DropRoleStatementContext);
    }
    public grantPrivileges(): GrantPrivilegesContext | null {
        return this.getRuleContext(0, GrantPrivilegesContext);
    }
    public revokePrivileges(): RevokePrivilegesContext | null {
        return this.getRuleContext(0, RevokePrivilegesContext);
    }
    public showGrants(): ShowGrantsContext | null {
        return this.getRuleContext(0, ShowGrantsContext);
    }
    public showRoleGrants(): ShowRoleGrantsContext | null {
        return this.getRuleContext(0, ShowRoleGrantsContext);
    }
    public showRolePrincipals(): ShowRolePrincipalsContext | null {
        return this.getRuleContext(0, ShowRolePrincipalsContext);
    }
    public showRoles(): ShowRolesContext | null {
        return this.getRuleContext(0, ShowRolesContext);
    }
    public grantRole(): GrantRoleContext | null {
        return this.getRuleContext(0, GrantRoleContext);
    }
    public revokeRole(): RevokeRoleContext | null {
        return this.getRuleContext(0, RevokeRoleContext);
    }
    public setRole(): SetRoleContext | null {
        return this.getRuleContext(0, SetRoleContext);
    }
    public showCurrentRole(): ShowCurrentRoleContext | null {
        return this.getRuleContext(0, ShowCurrentRoleContext);
    }
    public KW_ABORT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ABORT, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPACTIONS, 0);
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.Number);
    	} else {
    		return this.getToken(HiveSqlParser.Number, i);
    	}
    }
    public KW_KILL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KILL, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUERY, 0);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public resourcePlanDdlStatements(): ResourcePlanDdlStatementsContext | null {
        return this.getRuleContext(0, ResourcePlanDdlStatementsContext);
    }
    public createDataConnectorStatement(): CreateDataConnectorStatementContext | null {
        return this.getRuleContext(0, CreateDataConnectorStatementContext);
    }
    public dropDataConnectorStatement(): DropDataConnectorStatementContext | null {
        return this.getRuleContext(0, DropDataConnectorStatementContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_ddlStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDdlStatement) {
             listener.enterDdlStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDdlStatement) {
             listener.exitDdlStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDdlStatement) {
            return visitor.visitDdlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_IF, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_ifExists;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterIfExists) {
             listener.enterIfExists(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitIfExists) {
             listener.exitIfExists(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfNotExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_IF, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_NOT, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_ifNotExists;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterIfNotExists) {
             listener.enterIfNotExists(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitIfNotExists) {
             listener.exitIfNotExists(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RestrictOrCascadeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESTRICT, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_restrictOrCascade;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRestrictOrCascade) {
             listener.enterRestrictOrCascade(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRestrictOrCascade) {
             listener.exitRestrictOrCascade(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRestrictOrCascade) {
            return visitor.visitRestrictOrCascade(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RewriteEnabledContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enable(): EnableContext {
        return this.getRuleContext(0, EnableContext)!;
    }
    public KW_REWRITE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REWRITE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rewriteEnabled;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRewriteEnabled) {
             listener.enterRewriteEnabled(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRewriteEnabled) {
             listener.exitRewriteEnabled(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRewriteEnabled) {
            return visitor.visitRewriteEnabled(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RewriteDisabledContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public disable(): DisableContext {
        return this.getRuleContext(0, DisableContext)!;
    }
    public KW_REWRITE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REWRITE, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rewriteDisabled;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRewriteDisabled) {
             listener.enterRewriteDisabled(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRewriteDisabled) {
             listener.exitRewriteDisabled(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRewriteDisabled) {
            return visitor.visitRewriteDisabled(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StoredAsDirsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_STORED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public KW_DIRECTORIES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DIRECTORIES, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_storedAsDirs;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterStoredAsDirs) {
             listener.enterStoredAsDirs(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitStoredAsDirs) {
             listener.exitStoredAsDirs(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStoredAsDirs) {
            return visitor.visitStoredAsDirs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseStatementContext extends antlr.ParserRuleContext {
    public _name?: DbSchemaNameCreateContext;
    public _locn?: Token | null;
    public _dbprops?: KeyValuePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public db_schema(): Db_schemaContext {
        return this.getRuleContext(0, Db_schemaContext)!;
    }
    public dbSchemaNameCreate(): DbSchemaNameCreateContext {
        return this.getRuleContext(0, DbSchemaNameCreateContext)!;
    }
    public KW_REMOTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REMOTE, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public databaseComment(): DatabaseCommentContext | null {
        return this.getRuleContext(0, DatabaseCommentContext);
    }
    public locationPath(): LocationPathContext | null {
        return this.getRuleContext(0, LocationPathContext);
    }
    public KW_MANAGEDLOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGEDLOCATION, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DBPROPERTIES, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public dbConnectorName(): DbConnectorNameContext | null {
        return this.getRuleContext(0, DbConnectorNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createDatabaseStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateDatabaseStatement) {
             listener.enterCreateDatabaseStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateDatabaseStatement) {
             listener.exitCreateDatabaseStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabaseStatement) {
            return visitor.visitCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbConnectorNameContext extends antlr.ParserRuleContext {
    public _dcName?: DbSchemaNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_USING, 0)!;
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dbConnectorName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDbConnectorName) {
             listener.enterDbConnectorName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDbConnectorName) {
             listener.exitDbConnectorName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDbConnectorName) {
            return visitor.visitDbConnectorName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SwitchDatabaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_USE, 0)!;
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_switchDatabaseStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSwitchDatabaseStatement) {
             listener.enterSwitchDatabaseStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSwitchDatabaseStatement) {
             listener.exitSwitchDatabaseStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSwitchDatabaseStatement) {
            return visitor.visitSwitchDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropDatabaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public db_schema(): Db_schemaContext {
        return this.getRuleContext(0, Db_schemaContext)!;
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public restrictOrCascade(): RestrictOrCascadeContext | null {
        return this.getRuleContext(0, RestrictOrCascadeContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropDatabaseStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropDatabaseStatement) {
             listener.enterDropDatabaseStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropDatabaseStatement) {
             listener.exitDropDatabaseStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropDatabaseStatement) {
            return visitor.visitDropDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseCommentContext extends antlr.ParserRuleContext {
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_databaseComment;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDatabaseComment) {
             listener.enterDatabaseComment(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDatabaseComment) {
             listener.exitDatabaseComment(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseComment) {
            return visitor.visitDatabaseComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUNCATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TRUNCATE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMNS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public KW_FORCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORCE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_truncateTableStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTruncateTableStatement) {
             listener.enterTruncateTableStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTruncateTableStatement) {
             listener.exitTruncateTableStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateTableStatement) {
            return visitor.visitTruncateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PURGE, 0);
    }
    public replicationClause(): ReplicationClauseContext | null {
        return this.getRuleContext(0, ReplicationClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropTableStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropTableStatement) {
             listener.enterDropTableStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropTableStatement) {
             listener.exitDropTableStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropTableStatement) {
            return visitor.visitDropTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InputFileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: Token | null;
    public _serdeCls?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INPUTFORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SERDE, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_inputFileFormat;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterInputFileFormat) {
             listener.enterInputFileFormat(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitInputFileFormat) {
             listener.exitInputFileFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInputFileFormat) {
            return visitor.visitInputFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TabTypeExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public KW_ELEM_TYPE(): antlr.TerminalNode[];
    public KW_ELEM_TYPE(i: number): antlr.TerminalNode | null;
    public KW_ELEM_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_ELEM_TYPE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_ELEM_TYPE, i);
    	}
    }
    public KW_KEY_TYPE(): antlr.TerminalNode[];
    public KW_KEY_TYPE(i: number): antlr.TerminalNode | null;
    public KW_KEY_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_KEY_TYPE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_KEY_TYPE, i);
    	}
    }
    public KW_VALUE_TYPE(): antlr.TerminalNode[];
    public KW_VALUE_TYPE(i: number): antlr.TerminalNode | null;
    public KW_VALUE_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_VALUE_TYPE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_VALUE_TYPE, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tabTypeExpr;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTabTypeExpr) {
             listener.enterTabTypeExpr(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTabTypeExpr) {
             listener.exitTabTypeExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTabTypeExpr) {
            return visitor.visitTabTypeExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartTypeExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tabTypeExpr(): TabTypeExprContext {
        return this.getRuleContext(0, TabTypeExprContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partTypeExpr;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartTypeExpr) {
             listener.enterPartTypeExpr(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartTypeExpr) {
             listener.exitPartTypeExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartTypeExpr) {
            return visitor.visitPartTypeExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TabPartColTypeExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableOrView(): TableOrViewContext {
        return this.getRuleContext(0, TableOrViewContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public extColumnName(): ExtColumnNameContext | null {
        return this.getRuleContext(0, ExtColumnNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tabPartColTypeExpr;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTabPartColTypeExpr) {
             listener.enterTabPartColTypeExpr(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTabPartColTypeExpr) {
             listener.exitTabPartColTypeExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTabPartColTypeExpr) {
            return visitor.visitTabPartColTypeExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescStatementContext extends antlr.ParserRuleContext {
    public _dbName?: DbSchemaNameContext;
    public _dcName?: DbSchemaNameContext;
    public _name?: FunctionNameForDDLContext;
    public _descOptions?: Token | null;
    public _parttype?: TabPartColTypeExprContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DESCRIBE, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DESC, 0);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public KW_DATACONNECTOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATACONNECTOR, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FUNCTION, 0);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public functionNameForDDL(): FunctionNameForDDLContext | null {
        return this.getRuleContext(0, FunctionNameForDDLContext);
    }
    public tabPartColTypeExpr(): TabPartColTypeExprContext | null {
        return this.getRuleContext(0, TabPartColTypeExprContext);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXTENDED, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORMATTED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_descStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDescStatement) {
             listener.enterDescStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDescStatement) {
             listener.exitDescStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescStatement) {
            return visitor.visitDescStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyzeStatementContext extends antlr.ParserRuleContext {
    public _parttype?: TableOrPartitionContext;
    public _noscan?: Token | null;
    public _statsColumnName?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANALYZE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ANALYZE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPUTE, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STATISTICS, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CACHE, 0);
    }
    public KW_METADATA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_METADATA, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FOR, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMNS, 0);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOSCAN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_analyzeStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAnalyzeStatement) {
             listener.enterAnalyzeStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAnalyzeStatement) {
             listener.exitAnalyzeStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeStatement) {
            return visitor.visitAnalyzeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class From_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_from_in;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFrom_in) {
             listener.enterFrom_in(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFrom_in) {
             listener.exitFrom_in(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrom_in) {
            return visitor.visitFrom_in(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Db_schemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATABASE, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_db_schema;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDb_schema) {
             listener.enterDb_schema(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDb_schema) {
             listener.exitDb_schema(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDb_schema) {
            return visitor.visitDb_schema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStatementContext extends antlr.ParserRuleContext {
    public _isExtended?: Token | null;
    public _db_name?: DbSchemaNameContext;
    public _filter?: ShowTablesFilterExprContext;
    public _tabOrViewName?: TableOrViewContext;
    public _tabName?: TableNameContext;
    public _prptyName?: Token | null;
    public _dbName?: DbSchemaNameContext;
    public _parttype?: PartTypeExprContext;
    public _compactId?: Token | null;
    public _rp_name?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SHOW, 0)!;
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATABASES, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEMAS, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public showStmtIdentifier(): ShowStmtIdentifierContext | null {
        return this.getRuleContext(0, ShowStmtIdentifierContext);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLES, 0);
    }
    public from_in(): From_inContext[];
    public from_in(i: number): From_inContext | null;
    public from_in(i?: number): From_inContext[] | From_inContext | null {
        if (i === undefined) {
            return this.getRuleContexts(From_inContext);
        }

        return this.getRuleContext(i, From_inContext);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXTENDED, 0);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public showTablesFilterExpr(): ShowTablesFilterExprContext | null {
        return this.getRuleContext(0, ShowTablesFilterExprContext);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VIEWS, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMNS, 0);
    }
    public tableOrView(): TableOrViewContext | null {
        return this.getRuleContext(0, TableOrViewContext);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SORTED, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FUNCTIONS, 0);
    }
    public functionNameForDDL(): FunctionNameForDDLContext | null {
        return this.getRuleContext(0, FunctionNameForDDLContext);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITIONS, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CREATE, 0);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TBLPROPERTIES, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCKS, 0);
    }
    public partTypeExpr(): PartTypeExprContext | null {
        return this.getRuleContext(0, PartTypeExprContext);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPACT_ID(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPACT_ID, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public compactionPool(): CompactionPoolContext | null {
        return this.getRuleContext(0, CompactionPoolContext);
    }
    public compactionType(): CompactionTypeContext | null {
        return this.getRuleContext(0, CompactionTypeContext);
    }
    public compactionStatus(): CompactionStatusContext | null {
        return this.getRuleContext(0, CompactionStatusContext);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_CONF(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONF, 0);
    }
    public KW_RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESOURCE, 0);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PLAN, 0);
    }
    public KW_PLANS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PLANS, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_DATACONNECTORS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATACONNECTORS, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ON, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INDEXES, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORMATTED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowStatement) {
             listener.enterShowStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowStatement) {
             listener.exitShowStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowStatement) {
            return visitor.visitShowStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowTablesFilterExprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WHERE, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public showStmtIdentifier(): ShowStmtIdentifierContext | null {
        return this.getRuleContext(0, ShowStmtIdentifierContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showTablesFilterExpr;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowTablesFilterExpr) {
             listener.enterShowTablesFilterExpr(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowTablesFilterExpr) {
             listener.exitShowTablesFilterExpr(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowTablesFilterExpr) {
            return visitor.visitShowTablesFilterExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCK(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LOCK, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public lockMode(): LockModeContext {
        return this.getRuleContext(0, LockModeContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_lockStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLockStatement) {
             listener.enterLockStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLockStatement) {
             listener.exitLockStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockStatement) {
            return visitor.visitLockStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockDatabaseContext extends antlr.ParserRuleContext {
    public _dbName?: DbSchemaNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCK(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LOCK, 0)!;
    }
    public db_schema(): Db_schemaContext {
        return this.getRuleContext(0, Db_schemaContext)!;
    }
    public lockMode(): LockModeContext {
        return this.getRuleContext(0, LockModeContext)!;
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_lockDatabase;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLockDatabase) {
             listener.enterLockDatabase(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLockDatabase) {
             listener.exitLockDatabase(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockDatabase) {
            return visitor.visitLockDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHARED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SHARED, 0);
    }
    public KW_EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXCLUSIVE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_lockMode;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLockMode) {
             listener.enterLockMode(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLockMode) {
             listener.exitLockMode(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockMode) {
            return visitor.visitLockMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlockStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNLOCK(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_UNLOCK, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableOrPartition(): TableOrPartitionContext {
        return this.getRuleContext(0, TableOrPartitionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_unlockStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterUnlockStatement) {
             listener.enterUnlockStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitUnlockStatement) {
             listener.exitUnlockStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnlockStatement) {
            return visitor.visitUnlockStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlockDatabaseContext extends antlr.ParserRuleContext {
    public _dbName?: DbSchemaNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNLOCK(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_UNLOCK, 0)!;
    }
    public db_schema(): Db_schemaContext {
        return this.getRuleContext(0, Db_schemaContext)!;
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_unlockDatabase;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterUnlockDatabase) {
             listener.enterUnlockDatabase(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitUnlockDatabase) {
             listener.exitUnlockDatabase(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnlockDatabase) {
            return visitor.visitUnlockDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRoleStatementContext extends antlr.ParserRuleContext {
    public _roleName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROLE, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createRoleStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateRoleStatement) {
             listener.enterCreateRoleStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateRoleStatement) {
             listener.exitCreateRoleStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRoleStatement) {
            return visitor.visitCreateRoleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropRoleStatementContext extends antlr.ParserRuleContext {
    public _roleName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROLE, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropRoleStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropRoleStatement) {
             listener.enterDropRoleStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropRoleStatement) {
             listener.exitDropRoleStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropRoleStatement) {
            return visitor.visitDropRoleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantPrivilegesContext extends antlr.ParserRuleContext {
    public _privList?: PrivilegeListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GRANT, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TO, 0)!;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        return this.getRuleContext(0, PrincipalSpecificationContext)!;
    }
    public privilegeList(): PrivilegeListContext {
        return this.getRuleContext(0, PrivilegeListContext)!;
    }
    public privilegeObject(): PrivilegeObjectContext | null {
        return this.getRuleContext(0, PrivilegeObjectContext);
    }
    public withGrantOption(): WithGrantOptionContext | null {
        return this.getRuleContext(0, WithGrantOptionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_grantPrivileges;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterGrantPrivileges) {
             listener.enterGrantPrivileges(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitGrantPrivileges) {
             listener.exitGrantPrivileges(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantPrivileges) {
            return visitor.visitGrantPrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokePrivilegesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REVOKE, 0)!;
    }
    public privilegeList(): PrivilegeListContext {
        return this.getRuleContext(0, PrivilegeListContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FROM, 0)!;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        return this.getRuleContext(0, PrincipalSpecificationContext)!;
    }
    public grantOptionFor(): GrantOptionForContext | null {
        return this.getRuleContext(0, GrantOptionForContext);
    }
    public privilegeObject(): PrivilegeObjectContext | null {
        return this.getRuleContext(0, PrivilegeObjectContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_revokePrivileges;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRevokePrivileges) {
             listener.enterRevokePrivileges(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRevokePrivileges) {
             listener.exitRevokePrivileges(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRevokePrivileges) {
            return visitor.visitRevokePrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GRANT, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TO, 0)!;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        return this.getRuleContext(0, PrincipalSpecificationContext)!;
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public withAdminOption(): WithAdminOptionContext | null {
        return this.getRuleContext(0, WithAdminOptionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_grantRole;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterGrantRole) {
             listener.enterGrantRole(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitGrantRole) {
             listener.exitGrantRole(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantRole) {
            return visitor.visitGrantRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokeRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REVOKE, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FROM, 0)!;
    }
    public principalSpecification(): PrincipalSpecificationContext {
        return this.getRuleContext(0, PrincipalSpecificationContext)!;
    }
    public adminOptionFor(): AdminOptionForContext | null {
        return this.getRuleContext(0, AdminOptionForContext);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_revokeRole;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRevokeRole) {
             listener.enterRevokeRole(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRevokeRole) {
             listener.exitRevokeRole(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRevokeRole) {
            return visitor.visitRevokeRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRoleGrantsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SHOW, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROLE, 0)!;
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GRANT, 0)!;
    }
    public principalName(): PrincipalNameContext {
        return this.getRuleContext(0, PrincipalNameContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showRoleGrants;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowRoleGrants) {
             listener.enterShowRoleGrants(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowRoleGrants) {
             listener.exitShowRoleGrants(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowRoleGrants) {
            return visitor.visitShowRoleGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRolesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SHOW, 0)!;
    }
    public KW_ROLES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROLES, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showRoles;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowRoles) {
             listener.enterShowRoles(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowRoles) {
             listener.exitShowRoles(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowRoles) {
            return visitor.visitShowRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowCurrentRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SHOW, 0)!;
    }
    public KW_CURRENT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CURRENT, 0)!;
    }
    public KW_ROLES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROLES, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showCurrentRole;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowCurrentRole) {
             listener.enterShowCurrentRole(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowCurrentRole) {
             listener.exitShowCurrentRole(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCurrentRole) {
            return visitor.visitShowCurrentRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetRoleContext extends antlr.ParserRuleContext {
    public _all?: Token | null;
    public _none?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SET, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROLE, 0)!;
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NONE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_setRole;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSetRole) {
             listener.enterSetRole(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSetRole) {
             listener.exitSetRole(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetRole) {
            return visitor.visitSetRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowGrantsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SHOW, 0)!;
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GRANT, 0)!;
    }
    public principalName(): PrincipalNameContext | null {
        return this.getRuleContext(0, PrincipalNameContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ON, 0);
    }
    public privilegeIncludeColObject(): PrivilegeIncludeColObjectContext | null {
        return this.getRuleContext(0, PrivilegeIncludeColObjectContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showGrants;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowGrants) {
             listener.enterShowGrants(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowGrants) {
             listener.exitShowGrants(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowGrants) {
            return visitor.visitShowGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowRolePrincipalsContext extends antlr.ParserRuleContext {
    public _roleName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SHOW, 0)!;
    }
    public KW_PRINCIPALS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_PRINCIPALS, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showRolePrincipals;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowRolePrincipals) {
             listener.enterShowRolePrincipals(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowRolePrincipals) {
             listener.exitShowRolePrincipals(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowRolePrincipals) {
            return visitor.visitShowRolePrincipals(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeIncludeColObjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public privObjectCols(): PrivObjectColsContext | null {
        return this.getRuleContext(0, PrivObjectColsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privilegeIncludeColObject;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivilegeIncludeColObject) {
             listener.enterPrivilegeIncludeColObject(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivilegeIncludeColObject) {
             listener.exitPrivilegeIncludeColObject(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeIncludeColObject) {
            return visitor.visitPrivilegeIncludeColObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeObjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public privObject(): PrivObjectContext {
        return this.getRuleContext(0, PrivObjectContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privilegeObject;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivilegeObject) {
             listener.enterPrivilegeObject(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivilegeObject) {
             listener.exitPrivilegeObject(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeObject) {
            return visitor.visitPrivilegeObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivObjectContext extends antlr.ParserRuleContext {
    public _path?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public KW_URI(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_URI, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERVER, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privObject;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivObject) {
             listener.enterPrivObject(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivObject) {
             listener.exitPrivObject(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivObject) {
            return visitor.visitPrivObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivObjectColsContext extends antlr.ParserRuleContext {
    public _cols?: ColumnNameListContext;
    public _path?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public KW_URI(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_URI, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERVER, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privObjectCols;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivObjectCols) {
             listener.enterPrivObjectCols(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivObjectCols) {
             listener.exitPrivObjectCols(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivObjectCols) {
            return visitor.visitPrivObjectCols(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privlegeDef(): PrivlegeDefContext[];
    public privlegeDef(i: number): PrivlegeDefContext | null;
    public privlegeDef(i?: number): PrivlegeDefContext[] | PrivlegeDefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivlegeDefContext);
        }

        return this.getRuleContext(i, PrivlegeDefContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privilegeList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivilegeList) {
             listener.enterPrivilegeList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivilegeList) {
             listener.exitPrivilegeList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeList) {
            return visitor.visitPrivilegeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivlegeDefContext extends antlr.ParserRuleContext {
    public _cols?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilegeType(): PrivilegeTypeContext {
        return this.getRuleContext(0, PrivilegeTypeContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privlegeDef;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivlegeDef) {
             listener.enterPrivlegeDef(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivlegeDef) {
             listener.exitPrivlegeDef(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivlegeDef) {
            return visitor.visitPrivlegeDef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALTER, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UPDATE, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CREATE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DROP, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INDEX, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCK, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SELECT, 0);
    }
    public KW_SHOW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SHOW_DATABASE, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INSERT, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DELETE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_privilegeType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrivilegeType) {
             listener.enterPrivilegeType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrivilegeType) {
             listener.exitPrivilegeType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeType) {
            return visitor.visitPrivilegeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public principalName(): PrincipalNameContext[];
    public principalName(i: number): PrincipalNameContext | null;
    public principalName(i?: number): PrincipalNameContext[] | PrincipalNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalNameContext);
        }

        return this.getRuleContext(i, PrincipalNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_principalSpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrincipalSpecification) {
             listener.enterPrincipalSpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrincipalSpecification) {
             listener.exitPrincipalSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrincipalSpecification) {
            return visitor.visitPrincipalSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USER, 0);
    }
    public principalIdentifier(): PrincipalIdentifierContext | null {
        return this.getRuleContext(0, PrincipalIdentifierContext);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUP, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLE, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_principalName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrincipalName) {
             listener.enterPrincipalName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrincipalName) {
             listener.exitPrincipalName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrincipalName) {
            return visitor.visitPrincipalName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalAlterNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USER, 0);
    }
    public principalIdentifier(): PrincipalIdentifierContext | null {
        return this.getRuleContext(0, PrincipalIdentifierContext);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLE, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_principalAlterName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrincipalAlterName) {
             listener.enterPrincipalAlterName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrincipalAlterName) {
             listener.exitPrincipalAlterName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrincipalAlterName) {
            return visitor.visitPrincipalAlterName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithGrantOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WITH, 0)!;
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GRANT, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_OPTION, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_withGrantOption;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWithGrantOption) {
             listener.enterWithGrantOption(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWithGrantOption) {
             listener.exitWithGrantOption(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWithGrantOption) {
            return visitor.visitWithGrantOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantOptionForContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GRANT, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_OPTION, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FOR, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_grantOptionFor;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterGrantOptionFor) {
             listener.enterGrantOptionFor(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitGrantOptionFor) {
             listener.exitGrantOptionFor(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantOptionFor) {
            return visitor.visitGrantOptionFor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AdminOptionForContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADMIN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ADMIN, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_OPTION, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FOR, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_adminOptionFor;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAdminOptionFor) {
             listener.enterAdminOptionFor(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAdminOptionFor) {
             listener.exitAdminOptionFor(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAdminOptionFor) {
            return visitor.visitAdminOptionFor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithAdminOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WITH, 0)!;
    }
    public KW_ADMIN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ADMIN, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_OPTION, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_withAdminOption;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWithAdminOption) {
             listener.enterWithAdminOption(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWithAdminOption) {
             listener.exitWithAdminOption(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWithAdminOption) {
            return visitor.visitWithAdminOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MetastoreCheckContext extends antlr.ParserRuleContext {
    public _repair?: Token | null;
    public _opt?: Token | null;
    public _parts?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MSCK(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MSCK, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPAIR, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITIONS, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DROP, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SYNC, 0);
    }
    public partitionSelectorSpec(): PartitionSelectorSpecContext | null {
        return this.getRuleContext(0, PartitionSelectorSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_metastoreCheck;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterMetastoreCheck) {
             listener.enterMetastoreCheck(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitMetastoreCheck) {
             listener.exitMetastoreCheck(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMetastoreCheck) {
            return visitor.visitMetastoreCheck(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public resource(): ResourceContext[];
    public resource(i: number): ResourceContext | null;
    public resource(i?: number): ResourceContext[] | ResourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }

        return this.getRuleContext(i, ResourceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_resourceList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterResourceList) {
             listener.enterResourceList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitResourceList) {
             listener.exitResourceList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResourceList) {
            return visitor.visitResourceList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceContext extends antlr.ParserRuleContext {
    public _resType?: ResourceTypeContext;
    public _resPath?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public resourceType(): ResourceTypeContext {
        return this.getRuleContext(0, ResourceTypeContext)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_resource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterResource) {
             listener.enterResource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitResource) {
             listener.exitResource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResource) {
            return visitor.visitResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_JAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_JAR, 0);
    }
    public KW_FILE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FILE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ARCHIVE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_resourceType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterResourceType) {
             listener.enterResourceType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitResourceType) {
             listener.exitResourceType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResourceType) {
            return visitor.visitResourceType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFunctionStatementContext extends antlr.ParserRuleContext {
    public _temp?: Token | null;
    public _rList?: ResourceListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FUNCTION, 0)!;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        return this.getRuleContext(0, FunctionNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USING, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TEMPORARY, 0);
    }
    public resourceList(): ResourceListContext | null {
        return this.getRuleContext(0, ResourceListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createFunctionStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateFunctionStatement) {
             listener.enterCreateFunctionStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateFunctionStatement) {
             listener.exitCreateFunctionStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFunctionStatement) {
            return visitor.visitCreateFunctionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropFunctionStatementContext extends antlr.ParserRuleContext {
    public _temp?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FUNCTION, 0)!;
    }
    public functionNameForDDL(): FunctionNameForDDLContext {
        return this.getRuleContext(0, FunctionNameForDDLContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TEMPORARY, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropFunctionStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropFunctionStatement) {
             listener.enterDropFunctionStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropFunctionStatement) {
             listener.exitDropFunctionStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropFunctionStatement) {
            return visitor.visitDropFunctionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReloadFunctionsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RELOAD(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_RELOAD, 0)!;
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FUNCTION, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_reloadFunctionsStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterReloadFunctionsStatement) {
             listener.enterReloadFunctionsStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitReloadFunctionsStatement) {
             listener.exitReloadFunctionsStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReloadFunctionsStatement) {
            return visitor.visitReloadFunctionsStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMacroStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TEMPORARY, 0)!;
    }
    public KW_MACRO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MACRO, 0)!;
    }
    public Identifier(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.Identifier, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public columnNameTypeList(): ColumnNameTypeListContext | null {
        return this.getRuleContext(0, ColumnNameTypeListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createMacroStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateMacroStatement) {
             listener.enterCreateMacroStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateMacroStatement) {
             listener.exitCreateMacroStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMacroStatement) {
            return visitor.visitCreateMacroStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropMacroStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TEMPORARY, 0)!;
    }
    public KW_MACRO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MACRO, 0)!;
    }
    public Identifier(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.Identifier, 0)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropMacroStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropMacroStatement) {
             listener.enterDropMacroStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropMacroStatement) {
             listener.exitDropMacroStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropMacroStatement) {
            return visitor.visitDropMacroStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexStatementContext extends antlr.ParserRuleContext {
    public _indextype?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INDEX, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode[];
    public KW_TABLE(i: number): antlr.TerminalNode | null;
    public KW_TABLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_TABLE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_TABLE, i);
    	}
    }
    public tableName(): TableNameContext[];
    public tableName(i: number): TableNameContext | null;
    public tableName(i?: number): TableNameContext[] | TableNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableNameContext);
        }

        return this.getRuleContext(i, TableNameContext);
    }
    public columnParenthesesList(): ColumnParenthesesListContext[];
    public columnParenthesesList(i: number): ColumnParenthesesListContext | null;
    public columnParenthesesList(i?: number): ColumnParenthesesListContext[] | ColumnParenthesesListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnParenthesesListContext);
        }

        return this.getRuleContext(i, ColumnParenthesesListContext);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFERRED, 0);
    }
    public KW_REBUILD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REBUILD, 0);
    }
    public KW_IDXPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IDXPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IN, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITIONED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BY, 0);
    }
    public tableFileFormat(): TableFileFormatContext | null {
        return this.getRuleContext(0, TableFileFormatContext);
    }
    public locationPath(): LocationPathContext | null {
        return this.getRuleContext(0, LocationPathContext);
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | null {
        return this.getRuleContext(0, TablePropertiesPrefixedContext);
    }
    public tableComment(): TableCommentContext | null {
        return this.getRuleContext(0, TableCommentContext);
    }
    public tableRowFormat(): TableRowFormatContext | null {
        return this.getRuleContext(0, TableRowFormatContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createIndexStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateIndexStatement) {
             listener.enterCreateIndexStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateIndexStatement) {
             listener.exitCreateIndexStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndexStatement) {
            return visitor.visitCreateIndexStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropIndexStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INDEX, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropIndexStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropIndexStatement) {
             listener.enterDropIndexStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropIndexStatement) {
             listener.exitDropIndexStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndexStatement) {
            return visitor.visitDropIndexStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateViewStatementContext extends antlr.ParserRuleContext {
    public _name?: ViewNameCreateContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_VIEW, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext {
        return this.getRuleContext(0, SelectStatementWithCTEContext)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLACE, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public columnNameCommentList(): ColumnNameCommentListContext | null {
        return this.getRuleContext(0, ColumnNameCommentListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public tableComment(): TableCommentContext | null {
        return this.getRuleContext(0, TableCommentContext);
    }
    public viewPartition(): ViewPartitionContext | null {
        return this.getRuleContext(0, ViewPartitionContext);
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | null {
        return this.getRuleContext(0, TablePropertiesPrefixedContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createViewStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateViewStatement) {
             listener.enterCreateViewStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateViewStatement) {
             listener.exitCreateViewStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateViewStatement) {
            return visitor.visitCreateViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewPartitionContext extends antlr.ParserRuleContext {
    public _spec?: PartitionTransformSpecContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITIONED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_PARTITIONED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public KW_SPEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SPEC, 0);
    }
    public partitionTransformSpec(): PartitionTransformSpecContext | null {
        return this.getRuleContext(0, PartitionTransformSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewPartition;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewPartition) {
             listener.enterViewPartition(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewPartition) {
             listener.exitViewPartition(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewPartition) {
            return visitor.visitViewPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewOrganizationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewClusterSpec(): ViewClusterSpecContext | null {
        return this.getRuleContext(0, ViewClusterSpecContext);
    }
    public viewComplexSpec(): ViewComplexSpecContext | null {
        return this.getRuleContext(0, ViewComplexSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewOrganization;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewOrganization) {
             listener.enterViewOrganization(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewOrganization) {
             listener.exitViewOrganization(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewOrganization) {
            return visitor.visitViewOrganization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewClusterSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTERED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CLUSTERED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewClusterSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewClusterSpec) {
             listener.enterViewClusterSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewClusterSpec) {
             listener.exitViewClusterSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewClusterSpec) {
            return visitor.visitViewClusterSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewComplexSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewDistSpec(): ViewDistSpecContext {
        return this.getRuleContext(0, ViewDistSpecContext)!;
    }
    public viewSortSpec(): ViewSortSpecContext {
        return this.getRuleContext(0, ViewSortSpecContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewComplexSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewComplexSpec) {
             listener.enterViewComplexSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewComplexSpec) {
             listener.exitViewComplexSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewComplexSpec) {
            return visitor.visitViewComplexSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewDistSpecContext extends antlr.ParserRuleContext {
    public _colList?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTRIBUTED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DISTRIBUTED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewDistSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewDistSpec) {
             listener.enterViewDistSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewDistSpec) {
             listener.exitViewDistSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewDistSpec) {
            return visitor.visitViewDistSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewSortSpecContext extends antlr.ParserRuleContext {
    public _colList?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SORTED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SORTED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewSortSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewSortSpec) {
             listener.enterViewSortSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewSortSpec) {
             listener.exitViewSortSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewSortSpec) {
            return visitor.visitViewSortSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropViewStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropViewStatement) {
             listener.enterDropViewStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropViewStatement) {
             listener.exitDropViewStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropViewStatement) {
            return visitor.visitDropViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMaterializedViewStatementContext extends antlr.ParserRuleContext {
    public _name?: ViewNameCreateContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_VIEW, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext {
        return this.getRuleContext(0, SelectStatementWithCTEContext)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public rewriteDisabled(): RewriteDisabledContext | null {
        return this.getRuleContext(0, RewriteDisabledContext);
    }
    public tableComment(): TableCommentContext | null {
        return this.getRuleContext(0, TableCommentContext);
    }
    public viewPartition(): ViewPartitionContext | null {
        return this.getRuleContext(0, ViewPartitionContext);
    }
    public viewOrganization(): ViewOrganizationContext | null {
        return this.getRuleContext(0, ViewOrganizationContext);
    }
    public tableRowFormat(): TableRowFormatContext | null {
        return this.getRuleContext(0, TableRowFormatContext);
    }
    public tableFileFormat(): TableFileFormatContext | null {
        return this.getRuleContext(0, TableFileFormatContext);
    }
    public locationPath(): LocationPathContext | null {
        return this.getRuleContext(0, LocationPathContext);
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | null {
        return this.getRuleContext(0, TablePropertiesPrefixedContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createMaterializedViewStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateMaterializedViewStatement) {
             listener.enterCreateMaterializedViewStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateMaterializedViewStatement) {
             listener.exitCreateMaterializedViewStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedViewStatement) {
            return visitor.visitCreateMaterializedViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropMaterializedViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropMaterializedViewStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropMaterializedViewStatement) {
             listener.enterDropMaterializedViewStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropMaterializedViewStatement) {
             listener.exitDropMaterializedViewStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropMaterializedViewStatement) {
            return visitor.visitDropMaterializedViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateScheduledQueryStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_SCHEDULED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SCHEDULED, 0)!;
    }
    public KW_QUERY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_QUERY, 0)!;
    }
    public scheduleSpec(): ScheduleSpecContext {
        return this.getRuleContext(0, ScheduleSpecContext)!;
    }
    public definedAsSpec(): DefinedAsSpecContext {
        return this.getRuleContext(0, DefinedAsSpecContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public executedAsSpec(): ExecutedAsSpecContext | null {
        return this.getRuleContext(0, ExecutedAsSpecContext);
    }
    public enableSpecification(): EnableSpecificationContext | null {
        return this.getRuleContext(0, EnableSpecificationContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createScheduledQueryStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateScheduledQueryStatement) {
             listener.enterCreateScheduledQueryStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateScheduledQueryStatement) {
             listener.exitCreateScheduledQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateScheduledQueryStatement) {
            return visitor.visitCreateScheduledQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropScheduledQueryStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_SCHEDULED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SCHEDULED, 0)!;
    }
    public KW_QUERY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_QUERY, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropScheduledQueryStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropScheduledQueryStatement) {
             listener.enterDropScheduledQueryStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropScheduledQueryStatement) {
             listener.exitDropScheduledQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropScheduledQueryStatement) {
            return visitor.visitDropScheduledQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterScheduledQueryStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public _mod?: AlterScheduledQueryChangeContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ALTER, 0)!;
    }
    public KW_SCHEDULED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SCHEDULED, 0)!;
    }
    public KW_QUERY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_QUERY, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public alterScheduledQueryChange(): AlterScheduledQueryChangeContext {
        return this.getRuleContext(0, AlterScheduledQueryChangeContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterScheduledQueryStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterScheduledQueryStatement) {
             listener.enterAlterScheduledQueryStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterScheduledQueryStatement) {
             listener.exitAlterScheduledQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterScheduledQueryStatement) {
            return visitor.visitAlterScheduledQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterScheduledQueryChangeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public scheduleSpec(): ScheduleSpecContext | null {
        return this.getRuleContext(0, ScheduleSpecContext);
    }
    public executedAsSpec(): ExecutedAsSpecContext | null {
        return this.getRuleContext(0, ExecutedAsSpecContext);
    }
    public enableSpecification(): EnableSpecificationContext | null {
        return this.getRuleContext(0, EnableSpecificationContext);
    }
    public definedAsSpec(): DefinedAsSpecContext | null {
        return this.getRuleContext(0, DefinedAsSpecContext);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXECUTE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterScheduledQueryChange;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterScheduledQueryChange) {
             listener.enterAlterScheduledQueryChange(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterScheduledQueryChange) {
             listener.exitAlterScheduledQueryChange(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterScheduledQueryChange) {
            return visitor.visitAlterScheduledQueryChange(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScheduleSpecContext extends antlr.ParserRuleContext {
    public _cronString?: Token | null;
    public _value?: Token | null;
    public _qualifier?: IntervalQualifiersContext;
    public _offsetTs?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CRON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CRON, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_EVERY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EVERY, 0);
    }
    public intervalQualifiers(): IntervalQualifiersContext | null {
        return this.getRuleContext(0, IntervalQualifiersContext);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AT, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OFFSET, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BY, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_scheduleSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterScheduleSpec) {
             listener.enterScheduleSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitScheduleSpec) {
             listener.exitScheduleSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitScheduleSpec) {
            return visitor.visitScheduleSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecutedAsSpecContext extends antlr.ParserRuleContext {
    public _executedAs?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXECUTED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_executedAsSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExecutedAsSpec) {
             listener.enterExecutedAsSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExecutedAsSpec) {
             listener.exitExecutedAsSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExecutedAsSpec) {
            return visitor.visitExecutedAsSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefinedAsSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFINED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_definedAsSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDefinedAsSpec) {
             listener.enterDefinedAsSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDefinedAsSpec) {
             listener.exitDefinedAsSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefinedAsSpec) {
            return visitor.visitDefinedAsSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStmtIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_showStmtIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterShowStmtIdentifier) {
             listener.enterShowStmtIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitShowStmtIdentifier) {
             listener.exitShowStmtIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowStmtIdentifier) {
            return visitor.visitShowStmtIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableCommentContext extends antlr.ParserRuleContext {
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableComment;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableComment) {
             listener.enterTableComment(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableComment) {
             listener.exitTableComment(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableComment) {
            return visitor.visitTableComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableLifecycleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIFECYCLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LIFECYCLE, 0)!;
    }
    public Number(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.Number, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableLifecycle;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableLifecycle) {
             listener.enterTableLifecycle(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableLifecycle) {
             listener.exitTableLifecycle(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableLifecycle) {
            return visitor.visitTableLifecycle(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTablePartitionSpecContext extends antlr.ParserRuleContext {
    public _opt1?: CreateTablePartitionColumnTypeSpecContext;
    public _opt2?: ColumnNameListContext;
    public _spec?: PartitionTransformSpecContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITIONED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_PARTITIONED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public KW_SPEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SPEC, 0);
    }
    public partitionTransformSpec(): PartitionTransformSpecContext | null {
        return this.getRuleContext(0, PartitionTransformSpecContext);
    }
    public createTablePartitionColumnTypeSpec(): CreateTablePartitionColumnTypeSpecContext | null {
        return this.getRuleContext(0, CreateTablePartitionColumnTypeSpecContext);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createTablePartitionSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateTablePartitionSpec) {
             listener.enterCreateTablePartitionSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateTablePartitionSpec) {
             listener.exitCreateTablePartitionSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTablePartitionSpec) {
            return visitor.visitCreateTablePartitionSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTablePartitionColumnTypeSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameTypeConstraint(): ColumnNameTypeConstraintContext[];
    public columnNameTypeConstraint(i: number): ColumnNameTypeConstraintContext | null;
    public columnNameTypeConstraint(i?: number): ColumnNameTypeConstraintContext[] | ColumnNameTypeConstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameTypeConstraintContext);
        }

        return this.getRuleContext(i, ColumnNameTypeConstraintContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createTablePartitionColumnTypeSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateTablePartitionColumnTypeSpec) {
             listener.enterCreateTablePartitionColumnTypeSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateTablePartitionColumnTypeSpec) {
             listener.exitCreateTablePartitionColumnTypeSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTablePartitionColumnTypeSpec) {
            return visitor.visitCreateTablePartitionColumnTypeSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionTransformSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionTransformType(): PartitionTransformTypeContext[];
    public partitionTransformType(i: number): PartitionTransformTypeContext | null;
    public partitionTransformType(i?: number): PartitionTransformTypeContext[] | PartitionTransformTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionTransformTypeContext);
        }

        return this.getRuleContext(i, PartitionTransformTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionTransformSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionTransformSpec) {
             listener.enterPartitionTransformSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionTransformSpec) {
             listener.exitPartitionTransformSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionTransformSpec) {
            return visitor.visitPartitionTransformSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionTransformTypeContext extends antlr.ParserRuleContext {
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public year(): YearContext | null {
        return this.getRuleContext(0, YearContext);
    }
    public month(): MonthContext | null {
        return this.getRuleContext(0, MonthContext);
    }
    public day(): DayContext | null {
        return this.getRuleContext(0, DayContext);
    }
    public hour(): HourContext | null {
        return this.getRuleContext(0, HourContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.COMMA, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRUNCATE, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BUCKET, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionTransformType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionTransformType) {
             listener.enterPartitionTransformType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionTransformType) {
             listener.exitPartitionTransformType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionTransformType) {
            return visitor.visitPartitionTransformType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableBucketsContext extends antlr.ParserRuleContext {
    public _bucketCols?: ColumnNameListContext;
    public _sortCols?: ColumnNameOrderListContext;
    public _num?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTERED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CLUSTERED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_BY);
    	} else {
    		return this.getToken(HiveSqlParser.KW_BY, i);
    	}
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INTO, 0)!;
    }
    public KW_BUCKETS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BUCKETS, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public Number(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.Number, 0)!;
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SORTED, 0);
    }
    public columnNameOrderList(): ColumnNameOrderListContext | null {
        return this.getRuleContext(0, ColumnNameOrderListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableBuckets;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableBuckets) {
             listener.enterTableBuckets(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableBuckets) {
             listener.exitTableBuckets(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableBuckets) {
            return visitor.visitTableBuckets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSkewedContext extends antlr.ParserRuleContext {
    public _skewedCols?: ColumnNameListContext;
    public _skewedValues?: SkewedValueElementContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SKEWED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SKEWED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public skewedValueElement(): SkewedValueElementContext {
        return this.getRuleContext(0, SkewedValueElementContext)!;
    }
    public storedAsDirs(): StoredAsDirsContext | null {
        return this.getRuleContext(0, StoredAsDirsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableSkewed;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableSkewed) {
             listener.enterTableSkewed(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableSkewed) {
             listener.exitTableSkewed(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSkewed) {
            return visitor.visitTableSkewed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowFormatSerde(): RowFormatSerdeContext | null {
        return this.getRuleContext(0, RowFormatSerdeContext);
    }
    public rowFormatDelimited(): RowFormatDelimitedContext | null {
        return this.getRuleContext(0, RowFormatDelimitedContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rowFormat;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRowFormat) {
             listener.enterRowFormat(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRowFormat) {
             listener.exitRowFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowFormat) {
            return visitor.visitRowFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RecordReaderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RECORDREADER(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_RECORDREADER, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_recordReader;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRecordReader) {
             listener.enterRecordReader(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRecordReader) {
             listener.exitRecordReader(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRecordReader) {
            return visitor.visitRecordReader(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RecordWriterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_RECORDWRITER, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_recordWriter;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRecordWriter) {
             listener.enterRecordWriter(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRecordWriter) {
             listener.exitRecordWriter(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRecordWriter) {
            return visitor.visitRecordWriter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatSerdeContext extends antlr.ParserRuleContext {
    public _name?: Token | null;
    public _serdeprops?: TablePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SERDE, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rowFormatSerde;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRowFormatSerde) {
             listener.enterRowFormatSerde(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRowFormatSerde) {
             listener.exitRowFormatSerde(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowFormatSerde) {
            return visitor.visitRowFormatSerde(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatDelimitedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FORMAT, 0)!;
    }
    public KW_DELIMITED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DELIMITED, 0)!;
    }
    public tableRowFormatFieldIdentifier(): TableRowFormatFieldIdentifierContext | null {
        return this.getRuleContext(0, TableRowFormatFieldIdentifierContext);
    }
    public tableRowFormatCollItemsIdentifier(): TableRowFormatCollItemsIdentifierContext | null {
        return this.getRuleContext(0, TableRowFormatCollItemsIdentifierContext);
    }
    public tableRowFormatMapKeysIdentifier(): TableRowFormatMapKeysIdentifierContext | null {
        return this.getRuleContext(0, TableRowFormatMapKeysIdentifierContext);
    }
    public tableRowFormatLinesIdentifier(): TableRowFormatLinesIdentifierContext | null {
        return this.getRuleContext(0, TableRowFormatLinesIdentifierContext);
    }
    public tableRowNullFormat(): TableRowNullFormatContext | null {
        return this.getRuleContext(0, TableRowNullFormatContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rowFormatDelimited;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRowFormatDelimited) {
             listener.enterRowFormatDelimited(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRowFormatDelimited) {
             listener.exitRowFormatDelimited(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowFormatDelimited) {
            return visitor.visitRowFormatDelimited(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowFormatDelimited(): RowFormatDelimitedContext | null {
        return this.getRuleContext(0, RowFormatDelimitedContext);
    }
    public rowFormatSerde(): RowFormatSerdeContext | null {
        return this.getRuleContext(0, RowFormatSerdeContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableRowFormat;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableRowFormat) {
             listener.enterTableRowFormat(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableRowFormat) {
             listener.exitTableRowFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormat) {
            return visitor.visitTableRowFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertiesPrefixedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TBLPROPERTIES, 0)!;
    }
    public tableProperties(): TablePropertiesContext {
        return this.getRuleContext(0, TablePropertiesContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tablePropertiesPrefixed;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTablePropertiesPrefixed) {
             listener.enterTablePropertiesPrefixed(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTablePropertiesPrefixed) {
             listener.exitTablePropertiesPrefixed(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablePropertiesPrefixed) {
            return visitor.visitTablePropertiesPrefixed(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public tablePropertiesList(): TablePropertiesListContext {
        return this.getRuleContext(0, TablePropertiesListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableProperties;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableProperties) {
             listener.enterTableProperties(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableProperties) {
             listener.exitTableProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableProperties) {
            return visitor.visitTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablePropertiesListContext extends antlr.ParserRuleContext {
    public _key?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyValuePropertyList(): KeyValuePropertyListContext | null {
        return this.getRuleContext(0, KeyValuePropertyListContext);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tablePropertiesList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTablePropertiesList) {
             listener.enterTablePropertiesList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTablePropertiesList) {
             listener.exitTablePropertiesList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablePropertiesList) {
            return visitor.visitTablePropertiesList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyValuePropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public keyValuePropertyList(): KeyValuePropertyListContext {
        return this.getRuleContext(0, KeyValuePropertyListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_keyValueProperties;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterKeyValueProperties) {
             listener.enterKeyValueProperties(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitKeyValueProperties) {
             listener.exitKeyValueProperties(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKeyValueProperties) {
            return visitor.visitKeyValueProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyValuePropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public keyValueProperty(): KeyValuePropertyContext[];
    public keyValueProperty(i: number): KeyValuePropertyContext | null;
    public keyValueProperty(i?: number): KeyValuePropertyContext[] | KeyValuePropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyValuePropertyContext);
        }

        return this.getRuleContext(i, KeyValuePropertyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_keyValuePropertyList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterKeyValuePropertyList) {
             listener.enterKeyValuePropertyList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitKeyValuePropertyList) {
             listener.exitKeyValuePropertyList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKeyValuePropertyList) {
            return visitor.visitKeyValuePropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyValuePropertyContext extends antlr.ParserRuleContext {
    public _key?: Token | null;
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.EQUAL, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_keyValueProperty;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterKeyValueProperty) {
             listener.enterKeyValueProperty(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitKeyValueProperty) {
             listener.exitKeyValueProperty(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKeyValueProperty) {
            return visitor.visitKeyValueProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatFieldIdentifierContext extends antlr.ParserRuleContext {
    public _fldIdnt?: Token | null;
    public _fldEscape?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FIELDS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FIELDS, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_BY);
    	} else {
    		return this.getToken(HiveSqlParser.KW_BY, i);
    	}
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ESCAPED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableRowFormatFieldIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableRowFormatFieldIdentifier) {
             listener.enterTableRowFormatFieldIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableRowFormatFieldIdentifier) {
             listener.exitTableRowFormatFieldIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormatFieldIdentifier) {
            return visitor.visitTableRowFormatFieldIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatCollItemsIdentifierContext extends antlr.ParserRuleContext {
    public _collIdnt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COLLECTION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_COLLECTION, 0)!;
    }
    public KW_ITEMS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ITEMS, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableRowFormatCollItemsIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableRowFormatCollItemsIdentifier) {
             listener.enterTableRowFormatCollItemsIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableRowFormatCollItemsIdentifier) {
             listener.exitTableRowFormatCollItemsIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormatCollItemsIdentifier) {
            return visitor.visitTableRowFormatCollItemsIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatMapKeysIdentifierContext extends antlr.ParserRuleContext {
    public _mapKeysIdnt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MAP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MAP, 0)!;
    }
    public KW_KEYS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_KEYS, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableRowFormatMapKeysIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableRowFormatMapKeysIdentifier) {
             listener.enterTableRowFormatMapKeysIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableRowFormatMapKeysIdentifier) {
             listener.exitTableRowFormatMapKeysIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormatMapKeysIdentifier) {
            return visitor.visitTableRowFormatMapKeysIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowFormatLinesIdentifierContext extends antlr.ParserRuleContext {
    public _linesIdnt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LINES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LINES, 0)!;
    }
    public KW_TERMINATED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TERMINATED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableRowFormatLinesIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableRowFormatLinesIdentifier) {
             listener.enterTableRowFormatLinesIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableRowFormatLinesIdentifier) {
             listener.exitTableRowFormatLinesIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRowFormatLinesIdentifier) {
            return visitor.visitTableRowFormatLinesIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRowNullFormatContext extends antlr.ParserRuleContext {
    public _nullIdnt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_NULL, 0)!;
    }
    public KW_DEFINED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DEFINED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableRowNullFormat;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableRowNullFormat) {
             listener.enterTableRowNullFormat(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableRowNullFormat) {
             listener.exitTableRowNullFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableRowNullFormat) {
            return visitor.visitTableRowNullFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: Token | null;
    public _outFmt?: Token | null;
    public _inDriver?: Token | null;
    public _outDriver?: Token | null;
    public _storageHandler?: Token | null;
    public _serdeprops?: TablePropertiesContext;
    public _fileformat?: Id_Context;
    public _genericSpec?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORED(): antlr.TerminalNode[];
    public KW_STORED(i: number): antlr.TerminalNode | null;
    public KW_STORED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_STORED);
    	} else {
    		return this.getToken(HiveSqlParser.KW_STORED, i);
    	}
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public KW_INPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPUTDRIVER, 0);
    }
    public KW_OUTPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTPUTDRIVER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BY, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableFileFormat;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableFileFormat) {
             listener.enterTableFileFormat(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableFileFormat) {
             listener.exitTableFileFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableFileFormat) {
            return visitor.visitTableFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameType(): ColumnNameTypeContext[];
    public columnNameType(i: number): ColumnNameTypeContext | null;
    public columnNameType(i?: number): ColumnNameTypeContext[] | ColumnNameTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameTypeContext);
        }

        return this.getRuleContext(i, ColumnNameTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameTypeList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameTypeList) {
             listener.enterColumnNameTypeList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameTypeList) {
             listener.exitColumnNameTypeList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTypeList) {
            return visitor.visitColumnNameTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeOrConstraintListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameTypeOrConstraint(): ColumnNameTypeOrConstraintContext[];
    public columnNameTypeOrConstraint(i: number): ColumnNameTypeOrConstraintContext | null;
    public columnNameTypeOrConstraint(i?: number): ColumnNameTypeOrConstraintContext[] | ColumnNameTypeOrConstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameTypeOrConstraintContext);
        }

        return this.getRuleContext(i, ColumnNameTypeOrConstraintContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameTypeOrConstraintList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameTypeOrConstraintList) {
             listener.enterColumnNameTypeOrConstraintList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameTypeOrConstraintList) {
             listener.exitColumnNameTypeOrConstraintList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTypeOrConstraintList) {
            return visitor.visitColumnNameTypeOrConstraintList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameColonTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameColonType(): ColumnNameColonTypeContext[];
    public columnNameColonType(i: number): ColumnNameColonTypeContext | null;
    public columnNameColonType(i?: number): ColumnNameColonTypeContext[] | ColumnNameColonTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameColonTypeContext);
        }

        return this.getRuleContext(i, ColumnNameColonTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameColonTypeList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameColonTypeList) {
             listener.enterColumnNameColonTypeList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameColonTypeList) {
             listener.exitColumnNameColonTypeList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameColonTypeList) {
            return visitor.visitColumnNameColonTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameList) {
             listener.enterColumnNameList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameList) {
             listener.exitColumnNameList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameList) {
            return visitor.visitColumnNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameCreate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameCreate) {
             listener.enterColumnNameCreate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameCreate) {
             listener.exitColumnNameCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCreate) {
            return visitor.visitColumnNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public KW_ELEM_TYPE(): antlr.TerminalNode[];
    public KW_ELEM_TYPE(i: number): antlr.TerminalNode | null;
    public KW_ELEM_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_ELEM_TYPE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_ELEM_TYPE, i);
    	}
    }
    public KW_KEY_TYPE(): antlr.TerminalNode[];
    public KW_KEY_TYPE(i: number): antlr.TerminalNode | null;
    public KW_KEY_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_KEY_TYPE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_KEY_TYPE, i);
    	}
    }
    public KW_VALUE_TYPE(): antlr.TerminalNode[];
    public KW_VALUE_TYPE(i: number): antlr.TerminalNode | null;
    public KW_VALUE_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_VALUE_TYPE);
    	} else {
    		return this.getToken(HiveSqlParser.KW_VALUE_TYPE, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_extColumnName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExtColumnName) {
             listener.enterExtColumnName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExtColumnName) {
             listener.exitExtColumnName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExtColumnName) {
            return visitor.visitExtColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameOrderListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameOrder(): ColumnNameOrderContext[];
    public columnNameOrder(i: number): ColumnNameOrderContext | null;
    public columnNameOrder(i?: number): ColumnNameOrderContext[] | ColumnNameOrderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameOrderContext);
        }

        return this.getRuleContext(i, ColumnNameOrderContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameOrderList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameOrderList) {
             listener.enterColumnNameOrderList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameOrderList) {
             listener.exitColumnNameOrderList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameOrderList) {
            return visitor.visitColumnNameOrderList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnParenthesesListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public columnNameList(): ColumnNameListContext {
        return this.getRuleContext(0, ColumnNameListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnParenthesesList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnParenthesesList) {
             listener.enterColumnParenthesesList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnParenthesesList) {
             listener.exitColumnParenthesesList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnParenthesesList) {
            return visitor.visitColumnParenthesesList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnableValidateSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enableSpecification(): EnableSpecificationContext | null {
        return this.getRuleContext(0, EnableSpecificationContext);
    }
    public validateSpecification(): ValidateSpecificationContext | null {
        return this.getRuleContext(0, ValidateSpecificationContext);
    }
    public enforcedSpecification(): EnforcedSpecificationContext | null {
        return this.getRuleContext(0, EnforcedSpecificationContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_enableValidateSpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterEnableValidateSpecification) {
             listener.enterEnableValidateSpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitEnableValidateSpecification) {
             listener.exitEnableValidateSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEnableValidateSpecification) {
            return visitor.visitEnableValidateSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnableSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enable(): EnableContext | null {
        return this.getRuleContext(0, EnableContext);
    }
    public disable(): DisableContext | null {
        return this.getRuleContext(0, DisableContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_enableSpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterEnableSpecification) {
             listener.enterEnableSpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitEnableSpecification) {
             listener.exitEnableSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEnableSpecification) {
            return visitor.visitEnableSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValidateSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VALIDATE, 0);
    }
    public KW_NOVALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOVALIDATE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_validateSpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterValidateSpecification) {
             listener.enterValidateSpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitValidateSpecification) {
             listener.exitValidateSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValidateSpecification) {
            return visitor.visitValidateSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnforcedSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ENFORCED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ENFORCED, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_enforcedSpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterEnforcedSpecification) {
             listener.enterEnforcedSpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitEnforcedSpecification) {
             listener.exitEnforcedSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEnforcedSpecification) {
            return visitor.visitEnforcedSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RELY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RELY, 0);
    }
    public KW_NORELY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NORELY, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_relySpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRelySpecification) {
             listener.enterRelySpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRelySpecification) {
             listener.exitRelySpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelySpecification) {
            return visitor.visitRelySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableLevelConstraint(): TableLevelConstraintContext {
        return this.getRuleContext(0, TableLevelConstraintContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext | null {
        return this.getRuleContext(0, ConstraintOptsCreateContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateConstraint) {
             listener.enterCreateConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateConstraint) {
             listener.exitCreateConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateConstraint) {
            return visitor.visitCreateConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterConstraintWithNameContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0)!;
    }
    public tableLevelConstraint(): TableLevelConstraintContext {
        return this.getRuleContext(0, TableLevelConstraintContext)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext | null {
        return this.getRuleContext(0, ConstraintOptsAlterContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterConstraintWithName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterConstraintWithName) {
             listener.enterAlterConstraintWithName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterConstraintWithName) {
             listener.exitAlterConstraintWithName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterConstraintWithName) {
            return visitor.visitAlterConstraintWithName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableLevelConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pkUkConstraint(): PkUkConstraintContext | null {
        return this.getRuleContext(0, PkUkConstraintContext);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(0, CheckConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableLevelConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableLevelConstraint) {
             listener.enterTableLevelConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableLevelConstraint) {
             listener.exitTableLevelConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableLevelConstraint) {
            return visitor.visitTableLevelConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PkUkConstraintContext extends antlr.ParserRuleContext {
    public _pkCols?: ColumnParenthesesListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableConstraintType(): TableConstraintTypeContext {
        return this.getRuleContext(0, TableConstraintTypeContext)!;
    }
    public columnParenthesesList(): ColumnParenthesesListContext {
        return this.getRuleContext(0, ColumnParenthesesListContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_pkUkConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPkUkConstraint) {
             listener.enterPkUkConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPkUkConstraint) {
             listener.exitPkUkConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPkUkConstraint) {
            return visitor.visitPkUkConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CHECK(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CHECK, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_checkConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCheckConstraint) {
             listener.enterCheckConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCheckConstraint) {
             listener.exitCheckConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCheckConstraint) {
            return visitor.visitCheckConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateForeignKeyContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public _fkCols?: ColumnParenthesesListContext;
    public _tabName?: TableNameContext;
    public _parCols?: ColumnParenthesesListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_KEY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_KEY, 0)!;
    }
    public KW_REFERENCES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REFERENCES, 0)!;
    }
    public columnParenthesesList(): ColumnParenthesesListContext[];
    public columnParenthesesList(i: number): ColumnParenthesesListContext | null;
    public columnParenthesesList(i?: number): ColumnParenthesesListContext[] | ColumnParenthesesListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnParenthesesListContext);
        }

        return this.getRuleContext(i, ColumnParenthesesListContext);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext | null {
        return this.getRuleContext(0, ConstraintOptsCreateContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createForeignKey;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateForeignKey) {
             listener.enterCreateForeignKey(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateForeignKey) {
             listener.exitCreateForeignKey(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateForeignKey) {
            return visitor.visitCreateForeignKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterForeignKeyWithNameContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public _fkCols?: ColumnParenthesesListContext;
    public _tabName?: TableNameContext;
    public _parCols?: ColumnParenthesesListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_KEY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_KEY, 0)!;
    }
    public KW_REFERENCES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REFERENCES, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public columnParenthesesList(): ColumnParenthesesListContext[];
    public columnParenthesesList(i: number): ColumnParenthesesListContext | null;
    public columnParenthesesList(i?: number): ColumnParenthesesListContext[] | ColumnParenthesesListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnParenthesesListContext);
        }

        return this.getRuleContext(i, ColumnParenthesesListContext);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext | null {
        return this.getRuleContext(0, ConstraintOptsAlterContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterForeignKeyWithName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterForeignKeyWithName) {
             listener.enterAlterForeignKeyWithName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterForeignKeyWithName) {
             listener.exitAlterForeignKeyWithName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterForeignKeyWithName) {
            return visitor.visitAlterForeignKeyWithName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedValueElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constantList(): ConstantListContext | null {
        return this.getRuleContext(0, ConstantListContext);
    }
    public skewedColumnValuePairList(): SkewedColumnValuePairListContext | null {
        return this.getRuleContext(0, SkewedColumnValuePairListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_skewedValueElement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSkewedValueElement) {
             listener.enterSkewedValueElement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSkewedValueElement) {
             listener.exitSkewedValueElement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSkewedValueElement) {
            return visitor.visitSkewedValueElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedColumnValuePairListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public skewedColumnValuePair(): SkewedColumnValuePairContext[];
    public skewedColumnValuePair(i: number): SkewedColumnValuePairContext | null;
    public skewedColumnValuePair(i?: number): SkewedColumnValuePairContext[] | SkewedColumnValuePairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewedColumnValuePairContext);
        }

        return this.getRuleContext(i, SkewedColumnValuePairContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_skewedColumnValuePairList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSkewedColumnValuePairList) {
             listener.enterSkewedColumnValuePairList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSkewedColumnValuePairList) {
             listener.exitSkewedColumnValuePairList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSkewedColumnValuePairList) {
            return visitor.visitSkewedColumnValuePairList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedColumnValuePairContext extends antlr.ParserRuleContext {
    public _colValues?: ConstantListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public constantList(): ConstantListContext {
        return this.getRuleContext(0, ConstantListContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_skewedColumnValuePair;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSkewedColumnValuePair) {
             listener.enterSkewedColumnValuePair(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSkewedColumnValuePair) {
             listener.exitSkewedColumnValuePair(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSkewedColumnValuePair) {
            return visitor.visitSkewedColumnValuePair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_constantList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterConstantList) {
             listener.enterConstantList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitConstantList) {
             listener.exitConstantList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstantList) {
            return visitor.visitConstantList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DESC, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_orderSpecification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterOrderSpecification) {
             listener.enterOrderSpecification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitOrderSpecification) {
             listener.exitOrderSpecification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderSpecification) {
            return visitor.visitOrderSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullOrderingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULLS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_NULLS, 0)!;
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LAST, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_nullOrdering;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterNullOrdering) {
             listener.enterNullOrdering(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitNullOrdering) {
             listener.exitNullOrdering(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNullOrdering) {
            return visitor.visitNullOrdering(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameOrderContext extends antlr.ParserRuleContext {
    public _orderSpec?: OrderSpecificationContext;
    public _nullSpec?: NullOrderingContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public orderSpecification(): OrderSpecificationContext | null {
        return this.getRuleContext(0, OrderSpecificationContext);
    }
    public nullOrdering(): NullOrderingContext | null {
        return this.getRuleContext(0, NullOrderingContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameOrder;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameOrder) {
             listener.enterColumnNameOrder(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameOrder) {
             listener.exitColumnNameOrder(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameOrder) {
            return visitor.visitColumnNameOrder(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCommentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameComment(): ColumnNameCommentContext[];
    public columnNameComment(i: number): ColumnNameCommentContext | null;
    public columnNameComment(i?: number): ColumnNameCommentContext[] | ColumnNameCommentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameCommentContext);
        }

        return this.getRuleContext(i, ColumnNameCommentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameCommentList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameCommentList) {
             listener.enterColumnNameCommentList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameCommentList) {
             listener.exitColumnNameCommentList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCommentList) {
            return visitor.visitColumnNameCommentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCommentContext extends antlr.ParserRuleContext {
    public _colName?: ColumnNameCreateContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameComment;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameComment) {
             listener.enterColumnNameComment(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameComment) {
             listener.exitColumnNameComment(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameComment) {
            return visitor.visitColumnNameComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnRefOrderContext extends antlr.ParserRuleContext {
    public _orderSpec?: OrderSpecificationContext;
    public _nullSpec?: NullOrderingContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public orderSpecification(): OrderSpecificationContext | null {
        return this.getRuleContext(0, OrderSpecificationContext);
    }
    public nullOrdering(): NullOrderingContext | null {
        return this.getRuleContext(0, NullOrderingContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnRefOrder;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnRefOrder) {
             listener.enterColumnRefOrder(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnRefOrder) {
             listener.exitColumnRefOrder(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnRefOrder) {
            return visitor.visitColumnRefOrder(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeContext extends antlr.ParserRuleContext {
    public _colName?: ColumnNameCreateContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnType(): ColumnTypeContext {
        return this.getRuleContext(0, ColumnTypeContext)!;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameType) {
             listener.enterColumnNameType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameType) {
             listener.exitColumnNameType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameType) {
            return visitor.visitColumnNameType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeOrConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableConstraint(): TableConstraintContext | null {
        return this.getRuleContext(0, TableConstraintContext);
    }
    public columnNameTypeConstraint(): ColumnNameTypeConstraintContext | null {
        return this.getRuleContext(0, ColumnNameTypeConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameTypeOrConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameTypeOrConstraint) {
             listener.enterColumnNameTypeOrConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameTypeOrConstraint) {
             listener.exitColumnNameTypeOrConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTypeOrConstraint) {
            return visitor.visitColumnNameTypeOrConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createForeignKey(): CreateForeignKeyContext | null {
        return this.getRuleContext(0, CreateForeignKeyContext);
    }
    public createConstraint(): CreateConstraintContext | null {
        return this.getRuleContext(0, CreateConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableConstraint) {
             listener.enterTableConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableConstraint) {
             listener.exitTableConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableConstraint) {
            return visitor.visitTableConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameTypeConstraintContext extends antlr.ParserRuleContext {
    public _colName?: ColumnNameCreateContext;
    public _colType?: ColumnTypeContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public columnType(): ColumnTypeContext {
        return this.getRuleContext(0, ColumnTypeContext)!;
    }
    public columnConstraint(): ColumnConstraintContext | null {
        return this.getRuleContext(0, ColumnConstraintContext);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameTypeConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameTypeConstraint) {
             listener.enterColumnNameTypeConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameTypeConstraint) {
             listener.exitColumnNameTypeConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameTypeConstraint) {
            return visitor.visitColumnNameTypeConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public foreignKeyConstraint(): ForeignKeyConstraintContext | null {
        return this.getRuleContext(0, ForeignKeyConstraintContext);
    }
    public colConstraint(): ColConstraintContext | null {
        return this.getRuleContext(0, ColConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnConstraint) {
             listener.enterColumnConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnConstraint) {
             listener.exitColumnConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnConstraint) {
            return visitor.visitColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForeignKeyConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public _tabName?: TableNameContext;
    public _colName?: ColumnNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REFERENCES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REFERENCES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext | null {
        return this.getRuleContext(0, ConstraintOptsCreateContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_foreignKeyConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterForeignKeyConstraint) {
             listener.enterForeignKeyConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitForeignKeyConstraint) {
             listener.exitForeignKeyConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitForeignKeyConstraint) {
            return visitor.visitForeignKeyConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnConstraintType(): ColumnConstraintTypeContext {
        return this.getRuleContext(0, ColumnConstraintTypeContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsCreate(): ConstraintOptsCreateContext | null {
        return this.getRuleContext(0, ConstraintOptsCreateContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_colConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColConstraint) {
             listener.enterColConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColConstraint) {
             listener.exitColConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColConstraint) {
            return visitor.visitColConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterColumnConstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterForeignKeyConstraint(): AlterForeignKeyConstraintContext | null {
        return this.getRuleContext(0, AlterForeignKeyConstraintContext);
    }
    public alterColConstraint(): AlterColConstraintContext | null {
        return this.getRuleContext(0, AlterColConstraintContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterColumnConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterColumnConstraint) {
             listener.enterAlterColumnConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterColumnConstraint) {
             listener.exitAlterColumnConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterColumnConstraint) {
            return visitor.visitAlterColumnConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterForeignKeyConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public _tabName?: TableNameContext;
    public _colName?: ColumnNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REFERENCES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_REFERENCES, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext | null {
        return this.getRuleContext(0, ConstraintOptsAlterContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterForeignKeyConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterForeignKeyConstraint) {
             listener.enterAlterForeignKeyConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterForeignKeyConstraint) {
             listener.exitAlterForeignKeyConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterForeignKeyConstraint) {
            return visitor.visitAlterForeignKeyConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterColConstraintContext extends antlr.ParserRuleContext {
    public _constraintName?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnConstraintType(): ColumnConstraintTypeContext {
        return this.getRuleContext(0, ColumnConstraintTypeContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public constraintOptsAlter(): ConstraintOptsAlterContext | null {
        return this.getRuleContext(0, ConstraintOptsAlterContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterColConstraint;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterColConstraint) {
             listener.enterAlterColConstraint(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterColConstraint) {
             listener.exitAlterColConstraint(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterColConstraint) {
            return visitor.visitAlterColConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnConstraintTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFAULT, 0);
    }
    public defaultVal(): DefaultValContext | null {
        return this.getRuleContext(0, DefaultValContext);
    }
    public checkConstraint(): CheckConstraintContext | null {
        return this.getRuleContext(0, CheckConstraintContext);
    }
    public tableConstraintType(): TableConstraintTypeContext | null {
        return this.getRuleContext(0, TableConstraintTypeContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnConstraintType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnConstraintType) {
             listener.enterColumnConstraintType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnConstraintType) {
             listener.exitColumnConstraintType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnConstraintType) {
            return visitor.visitColumnConstraintType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public function_(): Function_Context | null {
        return this.getRuleContext(0, Function_Context);
    }
    public castExpression(): CastExpressionContext | null {
        return this.getRuleContext(0, CastExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_defaultVal;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDefaultVal) {
             listener.enterDefaultVal(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDefaultVal) {
             listener.exitDefaultVal(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefaultVal) {
            return visitor.visitDefaultVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableConstraintTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PRIMARY, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KEY, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNIQUE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableConstraintType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableConstraintType) {
             listener.enterTableConstraintType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableConstraintType) {
             listener.exitTableConstraintType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableConstraintType) {
            return visitor.visitTableConstraintType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintOptsCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enableValidateSpecification(): EnableValidateSpecificationContext {
        return this.getRuleContext(0, EnableValidateSpecificationContext)!;
    }
    public relySpecification(): RelySpecificationContext | null {
        return this.getRuleContext(0, RelySpecificationContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_constraintOptsCreate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterConstraintOptsCreate) {
             listener.enterConstraintOptsCreate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitConstraintOptsCreate) {
             listener.exitConstraintOptsCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintOptsCreate) {
            return visitor.visitConstraintOptsCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintOptsAlterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enableValidateSpecification(): EnableValidateSpecificationContext {
        return this.getRuleContext(0, EnableValidateSpecificationContext)!;
    }
    public relySpecification(): RelySpecificationContext | null {
        return this.getRuleContext(0, RelySpecificationContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_constraintOptsAlter;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterConstraintOptsAlter) {
             listener.enterConstraintOptsAlter(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitConstraintOptsAlter) {
             listener.exitConstraintOptsAlter(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintOptsAlter) {
            return visitor.visitConstraintOptsAlter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameColonTypeContext extends antlr.ParserRuleContext {
    public _colName?: ColumnNameCreateContext;
    public _comment?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.COLON, 0)!;
    }
    public columnType(): ColumnTypeContext {
        return this.getRuleContext(0, ColumnTypeContext)!;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnNameColonType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnNameColonType) {
             listener.enterColumnNameColonType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnNameColonType) {
             listener.exitColumnNameColonType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameColonType) {
            return visitor.visitColumnNameColonType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnType) {
             listener.enterColumnType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnType) {
             listener.exitColumnType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnType) {
            return visitor.visitColumnType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnType(): ColumnTypeContext[];
    public columnType(i: number): ColumnTypeContext | null;
    public columnType(i?: number): ColumnTypeContext[] | ColumnTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeContext);
        }

        return this.getRuleContext(i, ColumnTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnTypeList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnTypeList) {
             listener.enterColumnTypeList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnTypeList) {
             listener.exitColumnTypeList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeList) {
            return visitor.visitColumnTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primitiveType(): PrimitiveTypeContext | null {
        return this.getRuleContext(0, PrimitiveTypeContext);
    }
    public listType(): ListTypeContext | null {
        return this.getRuleContext(0, ListTypeContext);
    }
    public structType(): StructTypeContext | null {
        return this.getRuleContext(0, StructTypeContext);
    }
    public mapType(): MapTypeContext | null {
        return this.getRuleContext(0, MapTypeContext);
    }
    public unionType(): UnionTypeContext | null {
        return this.getRuleContext(0, UnionTypeContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_type;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterType) {
             listener.enterType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitType) {
             listener.exitType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitType) {
            return visitor.visitType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimitiveTypeContext extends antlr.ParserRuleContext {
    public _prec?: Token | null;
    public _scale?: Token | null;
    public _length?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TINYINT, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SMALLINT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTEGER, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BIGINT, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BOOLEAN, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FLOAT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REAL, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DOUBLE, 0);
    }
    public KW_PRECISION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PRECISION, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATE, 0);
    }
    public KW_DATETIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATETIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMPLOCALTZ(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMPLOCALTZ, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCAL, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ZONE, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STRING, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BINARY, 0);
    }
    public decimal(): DecimalContext | null {
        return this.getRuleContext(0, DecimalContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.Number);
    	} else {
    		return this.getToken(HiveSqlParser.Number, i);
    	}
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.COMMA, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VARCHAR, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CHAR, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_primitiveType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrimitiveType) {
             listener.enterPrimitiveType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrimitiveType) {
             listener.exitPrimitiveType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrimitiveType) {
            return visitor.visitPrimitiveType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ARRAY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ARRAY, 0)!;
    }
    public LESSTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LESSTHAN, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_listType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterListType) {
             listener.enterListType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitListType) {
             listener.exitListType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitListType) {
            return visitor.visitListType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StructTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STRUCT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_STRUCT, 0)!;
    }
    public LESSTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LESSTHAN, 0)!;
    }
    public columnNameColonTypeList(): ColumnNameColonTypeListContext {
        return this.getRuleContext(0, ColumnNameColonTypeListContext)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_structType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterStructType) {
             listener.enterStructType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitStructType) {
             listener.exitStructType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStructType) {
            return visitor.visitStructType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MapTypeContext extends antlr.ParserRuleContext {
    public _left?: PrimitiveTypeContext;
    public _right?: TypeContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MAP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MAP, 0)!;
    }
    public LESSTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LESSTHAN, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.COMMA, 0)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0)!;
    }
    public primitiveType(): PrimitiveTypeContext {
        return this.getRuleContext(0, PrimitiveTypeContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_mapType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterMapType) {
             listener.enterMapType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitMapType) {
             listener.exitMapType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMapType) {
            return visitor.visitMapType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnionTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNIONTYPE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_UNIONTYPE, 0)!;
    }
    public LESSTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LESSTHAN, 0)!;
    }
    public columnTypeList(): ColumnTypeListContext {
        return this.getRuleContext(0, ColumnTypeListContext)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_unionType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterUnionType) {
             listener.enterUnionType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitUnionType) {
             listener.exitUnionType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnionType) {
            return visitor.visitUnionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNION, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTERSECT, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXCEPT, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MINUS, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_setOperator;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSetOperator) {
             listener.enterSetOperator(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSetOperator) {
             listener.exitSetOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetOperator) {
            return visitor.visitSetOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryStatementExpressionContext extends antlr.ParserRuleContext {
    public _w?: WithClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryStatementExpressionBody(): QueryStatementExpressionBodyContext {
        return this.getRuleContext(0, QueryStatementExpressionBodyContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_queryStatementExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterQueryStatementExpression) {
             listener.enterQueryStatementExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitQueryStatementExpression) {
             listener.exitQueryStatementExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryStatementExpression) {
            return visitor.visitQueryStatementExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryStatementExpressionBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fromStatement(): FromStatementContext | null {
        return this.getRuleContext(0, FromStatementContext);
    }
    public regularBody(): RegularBodyContext | null {
        return this.getRuleContext(0, RegularBodyContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_queryStatementExpressionBody;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterQueryStatementExpressionBody) {
             listener.enterQueryStatementExpressionBody(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitQueryStatementExpressionBody) {
             listener.exitQueryStatementExpressionBody(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryStatementExpressionBody) {
            return visitor.visitQueryStatementExpressionBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WITH, 0)!;
    }
    public cteStatement(): CteStatementContext[];
    public cteStatement(i: number): CteStatementContext | null;
    public cteStatement(i?: number): CteStatementContext[] | CteStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CteStatementContext);
        }

        return this.getRuleContext(i, CteStatementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_withClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWithClause) {
             listener.enterWithClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWithClause) {
             listener.exitWithClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CteStatementContext extends antlr.ParserRuleContext {
    public _colAliases?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public queryStatementExpression(): QueryStatementExpressionContext {
        return this.getRuleContext(0, QueryStatementExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_cteStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCteStatement) {
             listener.enterCteStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCteStatement) {
             listener.exitCteStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCteStatement) {
            return visitor.visitCteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromStatementContext extends antlr.ParserRuleContext {
    public _u?: SetOperatorContext;
    public _r?: SingleFromStatementContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public singleFromStatement(): SingleFromStatementContext[];
    public singleFromStatement(i: number): SingleFromStatementContext | null;
    public singleFromStatement(i?: number): SingleFromStatementContext[] | SingleFromStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SingleFromStatementContext);
        }

        return this.getRuleContext(i, SingleFromStatementContext);
    }
    public setOperator(): SetOperatorContext[];
    public setOperator(i: number): SetOperatorContext | null;
    public setOperator(i?: number): SetOperatorContext[] | SetOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetOperatorContext);
        }

        return this.getRuleContext(i, SetOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_fromStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFromStatement) {
             listener.enterFromStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFromStatement) {
             listener.exitFromStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromStatement) {
            return visitor.visitFromStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleFromStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_singleFromStatement;
    }
    public override copyFrom(ctx: SingleFromStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class FromSelectStmtContext extends SingleFromStatementContext {
    public constructor(ctx: SingleFromStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public selectClause(): SelectClauseContext {
        return this.getRuleContext(0, SelectClauseContext)!;
    }
    public lateralView(): LateralViewContext | null {
        return this.getRuleContext(0, LateralViewContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public qualifyClause(): QualifyClauseContext | null {
        return this.getRuleContext(0, QualifyClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public clusterByClause(): ClusterByClauseContext | null {
        return this.getRuleContext(0, ClusterByClauseContext);
    }
    public distributeByClause(): DistributeByClauseContext | null {
        return this.getRuleContext(0, DistributeByClauseContext);
    }
    public sortByClause(): SortByClauseContext | null {
        return this.getRuleContext(0, SortByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFromSelectStmt) {
             listener.enterFromSelectStmt(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFromSelectStmt) {
             listener.exitFromSelectStmt(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromSelectStmt) {
            return visitor.visitFromSelectStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FromInsertStmtContext extends SingleFromStatementContext {
    public constructor(ctx: SingleFromStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public insertClause(): InsertClauseContext {
        return this.getRuleContext(0, InsertClauseContext)!;
    }
    public selectClause(): SelectClauseContext {
        return this.getRuleContext(0, SelectClauseContext)!;
    }
    public lateralView(): LateralViewContext | null {
        return this.getRuleContext(0, LateralViewContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public qualifyClause(): QualifyClauseContext | null {
        return this.getRuleContext(0, QualifyClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public clusterByClause(): ClusterByClauseContext | null {
        return this.getRuleContext(0, ClusterByClauseContext);
    }
    public distributeByClause(): DistributeByClauseContext | null {
        return this.getRuleContext(0, DistributeByClauseContext);
    }
    public sortByClause(): SortByClauseContext | null {
        return this.getRuleContext(0, SortByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFromInsertStmt) {
             listener.enterFromInsertStmt(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFromInsertStmt) {
             listener.exitFromInsertStmt(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromInsertStmt) {
            return visitor.visitFromInsertStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RegularBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_regularBody;
    }
    public override copyFrom(ctx: RegularBodyContext): void {
        super.copyFrom(ctx);
    }
}
export class InsertStmtContext extends RegularBodyContext {
    public _i?: InsertClauseContext;
    public _s?: SelectStatementContext;
    public constructor(ctx: RegularBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public insertClause(): InsertClauseContext {
        return this.getRuleContext(0, InsertClauseContext)!;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterInsertStmt) {
             listener.enterInsertStmt(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitInsertStmt) {
             listener.exitInsertStmt(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertStmt) {
            return visitor.visitInsertStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectStmtContext extends RegularBodyContext {
    public constructor(ctx: RegularBodyContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectStmt) {
             listener.enterSelectStmt(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectStmt) {
             listener.exitSelectStmt(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStmt) {
            return visitor.visitSelectStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomSelectStatementContext extends antlr.ParserRuleContext {
    public _s?: SelectClauseContext;
    public _f?: FromClauseContext;
    public _w?: WhereClauseContext;
    public _g?: GroupByClauseContext;
    public _h?: HavingClauseContext;
    public _win?: Window_clauseContext;
    public _q?: QualifyClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public qualifyClause(): QualifyClauseContext | null {
        return this.getRuleContext(0, QualifyClauseContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public valuesClause(): ValuesClauseContext | null {
        return this.getRuleContext(0, ValuesClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_atomSelectStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAtomSelectStatement) {
             listener.enterAtomSelectStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAtomSelectStatement) {
             listener.exitAtomSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtomSelectStatement) {
            return visitor.visitAtomSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementContext extends antlr.ParserRuleContext {
    public _a?: AtomSelectStatementContext;
    public _set_?: SetOpSelectStatementContext;
    public _o?: OrderByClauseContext;
    public _c?: ClusterByClauseContext;
    public _d?: DistributeByClauseContext;
    public _sort?: SortByClauseContext;
    public _l?: LimitClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public atomSelectStatement(): AtomSelectStatementContext {
        return this.getRuleContext(0, AtomSelectStatementContext)!;
    }
    public setOpSelectStatement(): SetOpSelectStatementContext | null {
        return this.getRuleContext(0, SetOpSelectStatementContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public clusterByClause(): ClusterByClauseContext | null {
        return this.getRuleContext(0, ClusterByClauseContext);
    }
    public distributeByClause(): DistributeByClauseContext | null {
        return this.getRuleContext(0, DistributeByClauseContext);
    }
    public sortByClause(): SortByClauseContext | null {
        return this.getRuleContext(0, SortByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectStatement) {
             listener.enterSelectStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectStatement) {
             listener.exitSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetOpSelectStatementContext extends antlr.ParserRuleContext {
    public _u?: SetOperatorContext;
    public _b?: AtomSelectStatementContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public setOperator(): SetOperatorContext[];
    public setOperator(i: number): SetOperatorContext | null;
    public setOperator(i?: number): SetOperatorContext[] | SetOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SetOperatorContext);
        }

        return this.getRuleContext(i, SetOperatorContext);
    }
    public atomSelectStatement(): AtomSelectStatementContext[];
    public atomSelectStatement(i: number): AtomSelectStatementContext | null;
    public atomSelectStatement(i?: number): AtomSelectStatementContext[] | AtomSelectStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AtomSelectStatementContext);
        }

        return this.getRuleContext(i, AtomSelectStatementContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_setOpSelectStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSetOpSelectStatement) {
             listener.enterSetOpSelectStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSetOpSelectStatement) {
             listener.exitSetOpSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetOpSelectStatement) {
            return visitor.visitSetOpSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementWithCTEContext extends antlr.ParserRuleContext {
    public _w?: WithClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectStatementWithCTE;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectStatementWithCTE) {
             listener.enterSelectStatementWithCTE(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectStatementWithCTE) {
             listener.exitSelectStatementWithCTE(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatementWithCTE) {
            return visitor.visitSelectStatementWithCTE(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertClauseContext extends antlr.ParserRuleContext {
    public _targetCols?: ColumnNameListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INSERT, 0)!;
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OVERWRITE, 0);
    }
    public destination(): DestinationContext | null {
        return this.getRuleContext(0, DestinationContext);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTO, 0);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public columnNameList(): ColumnNameListContext | null {
        return this.getRuleContext(0, ColumnNameListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_insertClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterInsertClause) {
             listener.enterInsertClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitInsertClause) {
             listener.exitInsertClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertClause) {
            return visitor.visitInsertClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DestinationContext extends antlr.ParserRuleContext {
    public _local?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DIRECTORY, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public tableRowFormat(): TableRowFormatContext | null {
        return this.getRuleContext(0, TableRowFormatContext);
    }
    public tableFileFormat(): TableFileFormatContext | null {
        return this.getRuleContext(0, TableFileFormatContext);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCAL, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_destination;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDestination) {
             listener.enterDestination(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDestination) {
             listener.exitDestination(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDestination) {
            return visitor.visitDestination(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public _offset?: Token | null;
    public _num?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIMIT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LIMIT, 0)!;
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OFFSET, 0);
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.Number);
    	} else {
    		return this.getToken(HiveSqlParser.Number, i);
    	}
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_limitClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLimitClause) {
             listener.enterLimitClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLimitClause) {
             listener.exitLimitClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAssignmentClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.EQUAL, 0)!;
    }
    public precedencePlusExpressionOrDefault(): PrecedencePlusExpressionOrDefaultContext {
        return this.getRuleContext(0, PrecedencePlusExpressionOrDefaultContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_columnAssignmentClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterColumnAssignmentClause) {
             listener.enterColumnAssignmentClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitColumnAssignmentClause) {
             listener.exitColumnAssignmentClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnAssignmentClause) {
            return visitor.visitColumnAssignmentClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedencePlusExpressionOrDefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFAULT, 0);
    }
    public precedencePlusExpression(): PrecedencePlusExpressionContext | null {
        return this.getRuleContext(0, PrecedencePlusExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedencePlusExpressionOrDefault;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedencePlusExpressionOrDefault) {
             listener.enterPrecedencePlusExpressionOrDefault(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedencePlusExpressionOrDefault) {
             listener.exitPrecedencePlusExpressionOrDefault(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedencePlusExpressionOrDefault) {
            return visitor.visitPrecedencePlusExpressionOrDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetColumnsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SET, 0)!;
    }
    public columnAssignmentClause(): ColumnAssignmentClauseContext[];
    public columnAssignmentClause(i: number): ColumnAssignmentClauseContext | null;
    public columnAssignmentClause(i?: number): ColumnAssignmentClauseContext[] | ColumnAssignmentClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnAssignmentClauseContext);
        }

        return this.getRuleContext(i, ColumnAssignmentClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_setColumnsClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSetColumnsClause) {
             listener.enterSetColumnsClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSetColumnsClause) {
             listener.exitSetColumnsClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetColumnsClause) {
            return visitor.visitSetColumnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlTransactionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_START, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTION, 0);
    }
    public transactionMode(): TransactionModeContext[];
    public transactionMode(i: number): TransactionModeContext | null;
    public transactionMode(i?: number): TransactionModeContext[] | TransactionModeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransactionModeContext);
        }

        return this.getRuleContext(i, TransactionModeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMIT, 0);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WORK, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLLBACK, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public KW_AUTOCOMMIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AUTOCOMMIT, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FALSE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_sqlTransactionStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSqlTransactionStatement) {
             listener.enterSqlTransactionStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSqlTransactionStatement) {
             listener.exitSqlTransactionStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSqlTransactionStatement) {
            return visitor.visitSqlTransactionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ISOLATION, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LEVEL, 0);
    }
    public KW_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SNAPSHOT, 0);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_READ, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ONLY, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WRITE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_transactionMode;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTransactionMode) {
             listener.enterTransactionMode(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTransactionMode) {
             listener.exitTransactionMode(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionMode) {
            return visitor.visitTransactionMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClausesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public whenMatchedAndClause(): WhenMatchedAndClauseContext[];
    public whenMatchedAndClause(i: number): WhenMatchedAndClauseContext | null;
    public whenMatchedAndClause(i?: number): WhenMatchedAndClauseContext[] | WhenMatchedAndClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenMatchedAndClauseContext);
        }

        return this.getRuleContext(i, WhenMatchedAndClauseContext);
    }
    public whenMatchedThenClause(): WhenMatchedThenClauseContext[];
    public whenMatchedThenClause(i: number): WhenMatchedThenClauseContext | null;
    public whenMatchedThenClause(i?: number): WhenMatchedThenClauseContext[] | WhenMatchedThenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenMatchedThenClauseContext);
        }

        return this.getRuleContext(i, WhenMatchedThenClauseContext);
    }
    public whenNotMatchedClause(): WhenNotMatchedClauseContext | null {
        return this.getRuleContext(0, WhenNotMatchedClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_whenClauses;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWhenClauses) {
             listener.enterWhenClauses(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWhenClauses) {
             listener.exitWhenClauses(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenClauses) {
            return visitor.visitWhenClauses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenNotMatchedClauseContext extends antlr.ParserRuleContext {
    public _targetCols?: ColumnParenthesesListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WHEN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_NOT, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_THEN, 0)!;
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_INSERT, 0)!;
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_VALUES, 0)!;
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext {
        return this.getRuleContext(0, ExpressionsInParenthesisContext)!;
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AND, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public columnParenthesesList(): ColumnParenthesesListContext | null {
        return this.getRuleContext(0, ColumnParenthesesListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_whenNotMatchedClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWhenNotMatchedClause) {
             listener.enterWhenNotMatchedClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWhenNotMatchedClause) {
             listener.exitWhenNotMatchedClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenNotMatchedClause) {
            return visitor.visitWhenNotMatchedClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenMatchedAndClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MATCHED, 0)!;
    }
    public KW_AND(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AND, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_THEN, 0)!;
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UPDATE, 0);
    }
    public setColumnsClause(): SetColumnsClauseContext | null {
        return this.getRuleContext(0, SetColumnsClauseContext);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DELETE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_whenMatchedAndClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWhenMatchedAndClause) {
             listener.enterWhenMatchedAndClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWhenMatchedAndClause) {
             listener.exitWhenMatchedAndClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenMatchedAndClause) {
            return visitor.visitWhenMatchedAndClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenMatchedThenClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_THEN, 0)!;
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UPDATE, 0);
    }
    public setColumnsClause(): SetColumnsClauseContext | null {
        return this.getRuleContext(0, SetColumnsClauseContext);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DELETE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_whenMatchedThenClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWhenMatchedThenClause) {
             listener.enterWhenMatchedThenClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWhenMatchedThenClause) {
             listener.exitWhenMatchedThenClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenMatchedThenClause) {
            return visitor.visitWhenMatchedThenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompactionPoolContext extends antlr.ParserRuleContext {
    public _poolName?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_POOL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_POOL, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_compactionPool;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCompactionPool) {
             listener.enterCompactionPool(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCompactionPool) {
             listener.exitCompactionPool(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCompactionPool) {
            return visitor.visitCompactionPool(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompactionTypeContext extends antlr.ParserRuleContext {
    public _compactType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TYPE, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_compactionType;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCompactionType) {
             listener.enterCompactionType(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCompactionType) {
             listener.exitCompactionType(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCompactionType) {
            return visitor.visitCompactionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CompactionStatusContext extends antlr.ParserRuleContext {
    public _status?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STATUS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_STATUS, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_compactionStatus;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCompactionStatus) {
             listener.enterCompactionStatus(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCompactionStatus) {
             listener.exitCompactionStatus(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCompactionStatus) {
            return visitor.visitCompactionStatus(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementContext extends antlr.ParserRuleContext {
    public _tableNameTree?: ViewNameContext;
    public _mvRewriteFlag?: RewriteEnabledContext;
    public _mvRewriteFlag2?: RewriteDisabledContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public alterTableStatementSuffix(): AlterTableStatementSuffixContext | null {
        return this.getRuleContext(0, AlterTableStatementSuffixContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public alterViewStatementSuffix(): AlterViewStatementSuffixContext | null {
        return this.getRuleContext(0, AlterViewStatementSuffixContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MATERIALIZED, 0);
    }
    public db_schema(): Db_schemaContext | null {
        return this.getRuleContext(0, Db_schemaContext);
    }
    public alterDatabaseStatementSuffix(): AlterDatabaseStatementSuffixContext | null {
        return this.getRuleContext(0, AlterDatabaseStatementSuffixContext);
    }
    public KW_DATACONNECTOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATACONNECTOR, 0);
    }
    public alterDataConnectorStatementSuffix(): AlterDataConnectorStatementSuffixContext | null {
        return this.getRuleContext(0, AlterDataConnectorStatementSuffixContext);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INDEX, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ON, 0);
    }
    public tableOrPartition(): TableOrPartitionContext | null {
        return this.getRuleContext(0, TableOrPartitionContext);
    }
    public KW_REBUILD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REBUILD, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public rewriteEnabled(): RewriteEnabledContext | null {
        return this.getRuleContext(0, RewriteEnabledContext);
    }
    public rewriteDisabled(): RewriteDisabledContext | null {
        return this.getRuleContext(0, RewriteDisabledContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterStatement) {
             listener.enterAlterStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterStatement) {
             listener.exitAlterStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterStatement) {
            return visitor.visitAlterStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableStatementSuffixContext extends antlr.ParserRuleContext {
    public _exchangename?: TableNameContext;
    public _cName?: Id_Context;
    public _fk?: AlterForeignKeyWithNameContext;
    public _spec?: PartitionTransformSpecContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public tableNameCreate(): TableNameCreateContext | null {
        return this.getRuleContext(0, TableNameCreateContext);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RECOVER, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITIONS, 0);
    }
    public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext | null {
        return this.getRuleContext(0, AlterStatementSuffixDropPartitionsContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADD, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public locationPath(): LocationPathContext[];
    public locationPath(i: number): LocationPathContext | null;
    public locationPath(i?: number): LocationPathContext[] | LocationPathContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LocationPathContext);
        }

        return this.getRuleContext(i, LocationPathContext);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TOUCH, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ARCHIVE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TBLPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNSET, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public tableSkewed(): TableSkewedContext | null {
        return this.getRuleContext(0, TableSkewedContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SKEWED, 0);
    }
    public storedAsDirs(): StoredAsDirsContext | null {
        return this.getRuleContext(0, StoredAsDirsContext);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXCHANGE, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITION, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMN, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public columnNameType(): ColumnNameTypeContext | null {
        return this.getRuleContext(0, ColumnNameTypeContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DROP, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONSTRAINT, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public alterConstraintWithName(): AlterConstraintWithNameContext | null {
        return this.getRuleContext(0, AlterConstraintWithNameContext);
    }
    public alterForeignKeyWithName(): AlterForeignKeyWithNameContext | null {
        return this.getRuleContext(0, AlterForeignKeyWithNameContext);
    }
    public alterTblPartitionStatementSuffix(): AlterTblPartitionStatementSuffixContext | null {
        return this.getRuleContext(0, AlterTblPartitionStatementSuffixContext);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OWNER, 0);
    }
    public principalName(): PrincipalNameContext | null {
        return this.getRuleContext(0, PrincipalNameContext);
    }
    public KW_SPEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SPEC, 0);
    }
    public partitionTransformSpec(): PartitionTransformSpecContext | null {
        return this.getRuleContext(0, PartitionTransformSpecContext);
    }
    public alterStatementSuffixExecute(): AlterStatementSuffixExecuteContext | null {
        return this.getRuleContext(0, AlterStatementSuffixExecuteContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterTableStatementSuffix;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterTableStatementSuffix) {
             listener.enterAlterTableStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterTableStatementSuffix) {
             listener.exitAlterTableStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableStatementSuffix) {
            return visitor.visitAlterTableStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTblPartitionStatementSuffixContext extends antlr.ParserRuleContext {
    public _newLoc?: Token | null;
    public _serdeName?: Token | null;
    public _num?: Token | null;
    public _compactType?: Token | null;
    public _colName?: ColumnNameContext;
    public _comment?: Token | null;
    public _oldName?: ColumnNameContext;
    public _newName?: ColumnNameCreateContext;
    public _first?: Token | null;
    public _afterCol?: Id_Context;
    public _add?: Token | null;
    public _replace?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FILEFORMAT, 0);
    }
    public fileFormat(): FileFormatContext | null {
        return this.getRuleContext(0, FileFormatContext);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCATION, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONCATENATE, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNSET, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTO, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BUCKETS, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SKEWED, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public skewedLocationMap(): SkewedLocationMapContext[];
    public skewedLocationMap(i: number): SkewedLocationMapContext | null;
    public skewedLocationMap(i?: number): SkewedLocationMapContext[] | SkewedLocationMapContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewedLocationMapContext);
        }

        return this.getRuleContext(i, SkewedLocationMapContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CLUSTERED, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SORTED, 0);
    }
    public tableBuckets(): TableBucketsContext | null {
        return this.getRuleContext(0, TableBucketsContext);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPACT, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AND, 0);
    }
    public KW_WAIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WAIT, 0);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public compactionPool(): CompactionPoolContext | null {
        return this.getRuleContext(0, CompactionPoolContext);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OVERWRITE, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UPDATE, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STATISTICS, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FOR, 0);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMN, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CHANGE, 0);
    }
    public columnType(): ColumnTypeContext | null {
        return this.getRuleContext(0, ColumnTypeContext);
    }
    public columnNameCreate(): ColumnNameCreateContext | null {
        return this.getRuleContext(0, ColumnNameCreateContext);
    }
    public alterColumnConstraint(): AlterColumnConstraintContext | null {
        return this.getRuleContext(0, AlterColumnConstraintContext);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AFTER, 0);
    }
    public restrictOrCascade(): RestrictOrCascadeContext | null {
        return this.getRuleContext(0, RestrictOrCascadeContext);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FIRST, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMNS, 0);
    }
    public columnNameTypeList(): ColumnNameTypeListContext | null {
        return this.getRuleContext(0, ColumnNameTypeListContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADD, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLACE, 0);
    }
    public enableSpecification(): EnableSpecificationContext | null {
        return this.getRuleContext(0, EnableSpecificationContext);
    }
    public KW_OFFLINE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OFFLINE, 0);
    }
    public KW_NO_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NO_DROP, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterTblPartitionStatementSuffix;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterTblPartitionStatementSuffix) {
             listener.enterAlterTblPartitionStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterTblPartitionStatementSuffix) {
             listener.exitAlterTblPartitionStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTblPartitionStatementSuffix) {
            return visitor.visitAlterTblPartitionStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterViewStatementSuffixContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TBLPROPERTIES, 0);
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNSET, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public tableNameCreate(): TableNameCreateContext | null {
        return this.getRuleContext(0, TableNameCreateContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADD, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public locationPath(): LocationPathContext[];
    public locationPath(i: number): LocationPathContext | null;
    public locationPath(i?: number): LocationPathContext[] | LocationPathContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LocationPathContext);
        }

        return this.getRuleContext(i, LocationPathContext);
    }
    public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext | null {
        return this.getRuleContext(0, AlterStatementSuffixDropPartitionsContext);
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext | null {
        return this.getRuleContext(0, SelectStatementWithCTEContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterViewStatementSuffix;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterViewStatementSuffix) {
             listener.enterAlterViewStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterViewStatementSuffix) {
             listener.exitAlterViewStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterViewStatementSuffix) {
            return visitor.visitAlterViewStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDatabaseStatementSuffixContext extends antlr.ParserRuleContext {
    public _name?: DbSchemaNameContext;
    public _dbName?: DbSchemaNameContext;
    public _newLocation?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SET, 0)!;
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DBPROPERTIES, 0);
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OWNER, 0);
    }
    public principalAlterName(): PrincipalAlterNameContext | null {
        return this.getRuleContext(0, PrincipalAlterNameContext);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCATION, 0);
    }
    public KW_MANAGEDLOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGEDLOCATION, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterDatabaseStatementSuffix;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterDatabaseStatementSuffix) {
             listener.enterAlterDatabaseStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterDatabaseStatementSuffix) {
             listener.exitAlterDatabaseStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterDatabaseStatementSuffix) {
            return visitor.visitAlterDatabaseStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterDataConnectorStatementSuffixContext extends antlr.ParserRuleContext {
    public _name?: DbSchemaNameContext;
    public _dcName?: DbSchemaNameContext;
    public _newUri?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SET, 0)!;
    }
    public KW_DCPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DCPROPERTIES, 0);
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public dbSchemaName(): DbSchemaNameContext {
        return this.getRuleContext(0, DbSchemaNameContext)!;
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OWNER, 0);
    }
    public principalAlterName(): PrincipalAlterNameContext | null {
        return this.getRuleContext(0, PrincipalAlterNameContext);
    }
    public KW_URL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_URL, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterDataConnectorStatementSuffix;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterDataConnectorStatementSuffix) {
             listener.enterAlterDataConnectorStatementSuffix(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterDataConnectorStatementSuffix) {
             listener.exitAlterDataConnectorStatementSuffix(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterDataConnectorStatementSuffix) {
            return visitor.visitAlterDataConnectorStatementSuffix(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LocationPathContext extends antlr.ParserRuleContext {
    public _locn?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LOCATION, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_locationPath;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLocationPath) {
             listener.enterLocationPath(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLocationPath) {
             listener.exitLocationPath(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLocationPath) {
            return visitor.visitLocationPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixDropPartitionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_PARTITION(): antlr.TerminalNode[];
    public KW_PARTITION(i: number): antlr.TerminalNode | null;
    public KW_PARTITION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_PARTITION);
    	} else {
    		return this.getToken(HiveSqlParser.KW_PARTITION, i);
    	}
    }
    public partitionSelectorSpec(): PartitionSelectorSpecContext[];
    public partitionSelectorSpec(i: number): PartitionSelectorSpecContext | null;
    public partitionSelectorSpec(i?: number): PartitionSelectorSpecContext[] | PartitionSelectorSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSelectorSpecContext);
        }

        return this.getRuleContext(i, PartitionSelectorSpecContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IGNORE, 0);
    }
    public KW_PROTECTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PROTECTION, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PURGE, 0);
    }
    public replicationClause(): ReplicationClauseContext | null {
        return this.getRuleContext(0, ReplicationClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterStatementSuffixDropPartitions;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterStatementSuffixDropPartitions) {
             listener.enterAlterStatementSuffixDropPartitions(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterStatementSuffixDropPartitions) {
             listener.exitAlterStatementSuffixDropPartitions(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixDropPartitions) {
            return visitor.visitAlterStatementSuffixDropPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewedLocationMapContext extends antlr.ParserRuleContext {
    public _value?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.EQUAL, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public skewedColumnValuePair(): SkewedColumnValuePairContext | null {
        return this.getRuleContext(0, SkewedColumnValuePairContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_skewedLocationMap;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSkewedLocationMap) {
             listener.enterSkewedLocationMap(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSkewedLocationMap) {
             listener.exitSkewedLocationMap(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSkewedLocationMap) {
            return visitor.visitSkewedLocationMap(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementSuffixExecuteContext extends antlr.ParserRuleContext {
    public _rollbackParam?: Token | null;
    public _expireParam?: Token | null;
    public _snapshotParam?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXECUTE, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLLBACK, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public KW_EXPIRE_SNAPSHOTS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXPIRE_SNAPSHOTS, 0);
    }
    public KW_SET_CURRENT_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET_CURRENT_SNAPSHOT, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_alterStatementSuffixExecute;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAlterStatementSuffixExecute) {
             listener.enterAlterStatementSuffixExecute(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAlterStatementSuffixExecute) {
             listener.exitAlterStatementSuffixExecute(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterStatementSuffixExecute) {
            return visitor.visitAlterStatementSuffixExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: Token | null;
    public _outFmt?: Token | null;
    public _serdeCls?: Token | null;
    public _inDriver?: Token | null;
    public _outDriver?: Token | null;
    public _genericSpec?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDE, 0);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public KW_INPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPUTDRIVER, 0);
    }
    public KW_OUTPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTPUTDRIVER, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_fileFormat;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFileFormat) {
             listener.enterFileFormat(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFileFormat) {
             listener.exitFileFormat(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFileFormat) {
            return visitor.visitFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeTableOrFileContext extends antlr.ParserRuleContext {
    public _format?: Id_Context;
    public _uri?: Token | null;
    public _likeName?: TableNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LIKE, 0)!;
    }
    public KW_FILE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FILE, 0);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_likeTableOrFile;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLikeTableOrFile) {
             listener.enterLikeTableOrFile(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLikeTableOrFile) {
             listener.exitLikeTableOrFile(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLikeTableOrFile) {
            return visitor.visitLikeTableOrFile(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableStatementContext extends antlr.ParserRuleContext {
    public _temp?: Token | null;
    public _trans?: Token | null;
    public _ext?: Token | null;
    public _name?: TableNameCreateContext;
    public _mgd?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public likeTableOrFile(): LikeTableOrFileContext | null {
        return this.getRuleContext(0, LikeTableOrFileContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TRANSACTIONAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTIONAL, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXTERNAL, 0);
    }
    public createTablePartitionSpec(): CreateTablePartitionSpecContext | null {
        return this.getRuleContext(0, CreateTablePartitionSpecContext);
    }
    public tableRowFormat(): TableRowFormatContext | null {
        return this.getRuleContext(0, TableRowFormatContext);
    }
    public tableFileFormat(): TableFileFormatContext | null {
        return this.getRuleContext(0, TableFileFormatContext);
    }
    public locationPath(): LocationPathContext | null {
        return this.getRuleContext(0, LocationPathContext);
    }
    public tablePropertiesPrefixed(): TablePropertiesPrefixedContext | null {
        return this.getRuleContext(0, TablePropertiesPrefixedContext);
    }
    public tableLifecycle(): TableLifecycleContext | null {
        return this.getRuleContext(0, TableLifecycleContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public columnNameTypeOrConstraintList(): ColumnNameTypeOrConstraintListContext | null {
        return this.getRuleContext(0, ColumnNameTypeOrConstraintListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public tableComment(): TableCommentContext | null {
        return this.getRuleContext(0, TableCommentContext);
    }
    public tableBuckets(): TableBucketsContext | null {
        return this.getRuleContext(0, TableBucketsContext);
    }
    public tableSkewed(): TableSkewedContext | null {
        return this.getRuleContext(0, TableSkewedContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public selectStatementWithCTE(): SelectStatementWithCTEContext | null {
        return this.getRuleContext(0, SelectStatementWithCTEContext);
    }
    public KW_MANAGED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createTableStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateTableStatement) {
             listener.enterCreateTableStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateTableStatement) {
             listener.exitCreateTableStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableStatement) {
            return visitor.visitCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDataConnectorStatementContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public _dcType?: Token | null;
    public _url?: Token | null;
    public _comment?: Token | null;
    public _dcprops?: KeyValuePropertiesContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CREATE, 0)!;
    }
    public KW_DATACONNECTOR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DATACONNECTOR, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TYPE, 0);
    }
    public KW_URL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_URL, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_DCPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DCPROPERTIES, 0);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public keyValueProperties(): KeyValuePropertiesContext | null {
        return this.getRuleContext(0, KeyValuePropertiesContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_createDataConnectorStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCreateDataConnectorStatement) {
             listener.enterCreateDataConnectorStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCreateDataConnectorStatement) {
             listener.exitCreateDataConnectorStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDataConnectorStatement) {
            return visitor.visitCreateDataConnectorStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropDataConnectorStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DROP, 0)!;
    }
    public KW_DATACONNECTOR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DATACONNECTOR, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dropDataConnectorStatement;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDropDataConnectorStatement) {
             listener.enterDropDataConnectorStatement(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDropDataConnectorStatement) {
             listener.exitDropDataConnectorStatement(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropDataConnectorStatement) {
            return visitor.visitDropDataConnectorStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAllColumnsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STAR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.STAR, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableAllColumns;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableAllColumns) {
             listener.enterTableAllColumns(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableAllColumns) {
             listener.exitTableAllColumns(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableAllColumns) {
            return visitor.visitTableAllColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_expressionList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExpressionList) {
             listener.enterExpressionList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExpressionList) {
             listener.exitExpressionList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionList) {
            return visitor.visitExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_aliasList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAliasList) {
             listener.enterAliasList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAliasList) {
             listener.exitAliasList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAliasList) {
            return visitor.visitAliasList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FROM, 0)!;
    }
    public fromSource(): FromSourceContext {
        return this.getRuleContext(0, FromSourceContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_fromClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFromClause) {
             listener.enterFromClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFromClause) {
             listener.exitFromClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNIQUEJOIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNIQUEJOIN, 0);
    }
    public uniqueJoinSource(): UniqueJoinSourceContext[];
    public uniqueJoinSource(i: number): UniqueJoinSourceContext | null;
    public uniqueJoinSource(i?: number): UniqueJoinSourceContext[] | UniqueJoinSourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UniqueJoinSourceContext);
        }

        return this.getRuleContext(i, UniqueJoinSourceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public joinSource(): JoinSourceContext | null {
        return this.getRuleContext(0, JoinSourceContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_fromSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFromSource) {
             listener.enterFromSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFromSource) {
             listener.exitFromSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromSource) {
            return visitor.visitFromSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomjoinSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableSource(): TableSourceContext | null {
        return this.getRuleContext(0, TableSourceContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public virtualTableSource(): VirtualTableSourceContext | null {
        return this.getRuleContext(0, VirtualTableSourceContext);
    }
    public subQuerySource(): SubQuerySourceContext | null {
        return this.getRuleContext(0, SubQuerySourceContext);
    }
    public partitionedTableFunction(): PartitionedTableFunctionContext | null {
        return this.getRuleContext(0, PartitionedTableFunctionContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public joinSource(): JoinSourceContext | null {
        return this.getRuleContext(0, JoinSourceContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_atomjoinSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAtomjoinSource) {
             listener.enterAtomjoinSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAtomjoinSource) {
             listener.exitAtomjoinSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtomjoinSource) {
            return visitor.visitAtomjoinSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public atomjoinSource(): AtomjoinSourceContext {
        return this.getRuleContext(0, AtomjoinSourceContext)!;
    }
    public joinToken(): JoinTokenContext[];
    public joinToken(i: number): JoinTokenContext | null;
    public joinToken(i?: number): JoinTokenContext[] | JoinTokenContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinTokenContext);
        }

        return this.getRuleContext(i, JoinTokenContext);
    }
    public joinSourcePart(): JoinSourcePartContext[];
    public joinSourcePart(i: number): JoinSourcePartContext | null;
    public joinSourcePart(i?: number): JoinSourcePartContext[] | JoinSourcePartContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinSourcePartContext);
        }

        return this.getRuleContext(i, JoinSourcePartContext);
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_ON);
    	} else {
    		return this.getToken(HiveSqlParser.KW_ON, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_USING(): antlr.TerminalNode[];
    public KW_USING(i: number): antlr.TerminalNode | null;
    public KW_USING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_USING);
    	} else {
    		return this.getToken(HiveSqlParser.KW_USING, i);
    	}
    }
    public columnParenthesesList(): ColumnParenthesesListContext[];
    public columnParenthesesList(i: number): ColumnParenthesesListContext | null;
    public columnParenthesesList(i?: number): ColumnParenthesesListContext[] | ColumnParenthesesListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnParenthesesListContext);
        }

        return this.getRuleContext(i, ColumnParenthesesListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_joinSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterJoinSource) {
             listener.enterJoinSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitJoinSource) {
             listener.exitJoinSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinSource) {
            return visitor.visitJoinSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinSourcePartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableSource(): TableSourceContext | null {
        return this.getRuleContext(0, TableSourceContext);
    }
    public virtualTableSource(): VirtualTableSourceContext | null {
        return this.getRuleContext(0, VirtualTableSourceContext);
    }
    public subQuerySource(): SubQuerySourceContext | null {
        return this.getRuleContext(0, SubQuerySourceContext);
    }
    public partitionedTableFunction(): PartitionedTableFunctionContext | null {
        return this.getRuleContext(0, PartitionedTableFunctionContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_joinSourcePart;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterJoinSourcePart) {
             listener.enterJoinSourcePart(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitJoinSourcePart) {
             listener.exitJoinSourcePart(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinSourcePart) {
            return visitor.visitJoinSourcePart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UniqueJoinSourceContext extends antlr.ParserRuleContext {
    public _tabname?: TableOrViewContext;
    public _ts?: TableSampleContext;
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public expressionList(): ExpressionListContext {
        return this.getRuleContext(0, ExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public tableOrView(): TableOrViewContext {
        return this.getRuleContext(0, TableOrViewContext)!;
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PRESERVE, 0);
    }
    public tableSample(): TableSampleContext | null {
        return this.getRuleContext(0, TableSampleContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_uniqueJoinSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterUniqueJoinSource) {
             listener.enterUniqueJoinSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitUniqueJoinSource) {
             listener.exitUniqueJoinSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUniqueJoinSource) {
            return visitor.visitUniqueJoinSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTokenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.COMMA, 0);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_JOIN, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INNER, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CROSS, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LEFT, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RIGHT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FULL, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTER, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SEMI, 0);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ANTI, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_joinToken;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterJoinToken) {
             listener.enterJoinToken(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitJoinToken) {
             listener.exitJoinToken(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinToken) {
            return visitor.visitJoinToken(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LateralViewContext extends antlr.ParserRuleContext {
    public _alias?: TableAliasContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LATERAL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_LATERAL, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VIEW, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTER, 0);
    }
    public function_(): Function_Context | null {
        return this.getRuleContext(0, Function_Context);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public valuesClause(): ValuesClauseContext | null {
        return this.getRuleContext(0, ValuesClauseContext);
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_lateralView;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterLateralView) {
             listener.enterLateralView(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitLateralView) {
             listener.exitLateralView(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLateralView) {
            return visitor.visitLateralView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableAlias;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableAlias) {
             listener.enterTableAlias(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableAlias) {
             listener.exitTableAlias(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableAlias) {
            return visitor.visitTableAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSampleContext extends antlr.ParserRuleContext {
    public _numerator?: Token | null;
    public _denominator?: Token | null;
    public _expression?: ExpressionContext;
    public _expr: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLESAMPLE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BUCKET, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OF, 0);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public Number(): antlr.TerminalNode[];
    public Number(i: number): antlr.TerminalNode | null;
    public Number(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.Number);
    	} else {
    		return this.getToken(HiveSqlParser.Number, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ON, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public ByteLengthLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.ByteLengthLiteral, 0);
    }
    public KW_PERCENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PERCENT, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROWS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableSample;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableSample) {
             listener.enterTableSample(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableSample) {
             listener.exitTableSample(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSample) {
            return visitor.visitTableSample(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSourceContext extends antlr.ParserRuleContext {
    public _tabname?: TableOrViewContext;
    public _props?: TablePropertiesContext;
    public _ts?: TableSampleContext;
    public _asOf?: AsOfClauseContext;
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableOrView(): TableOrViewContext {
        return this.getRuleContext(0, TableOrViewContext)!;
    }
    public tableProperties(): TablePropertiesContext | null {
        return this.getRuleContext(0, TablePropertiesContext);
    }
    public tableSample(): TableSampleContext | null {
        return this.getRuleContext(0, TableSampleContext);
    }
    public asOfClause(): AsOfClauseContext | null {
        return this.getRuleContext(0, AsOfClauseContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableSource) {
             listener.enterTableSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableSource) {
             listener.exitTableSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSource) {
            return visitor.visitTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AsOfClauseContext extends antlr.ParserRuleContext {
    public _asOfTime?: ExpressionContext;
    public _asOfVersion?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode[];
    public KW_FOR(i: number): antlr.TerminalNode | null;
    public KW_FOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_FOR);
    	} else {
    		return this.getToken(HiveSqlParser.KW_FOR, i);
    	}
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OF, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_asOfClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAsOfClause) {
             listener.enterAsOfClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAsOfClause) {
             listener.exitAsOfClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAsOfClause) {
            return visitor.visitAsOfClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbSchemaNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dbSchemaName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDbSchemaName) {
             listener.enterDbSchemaName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDbSchemaName) {
             listener.exitDbSchemaName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDbSchemaName) {
            return visitor.visitDbSchemaName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbSchemaNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_dbSchemaNameCreate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDbSchemaNameCreate) {
             listener.enterDbSchemaNameCreate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDbSchemaNameCreate) {
             listener.exitDbSchemaNameCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDbSchemaNameCreate) {
            return visitor.visitDbSchemaNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableOrViewContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableOrView;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableOrView) {
             listener.enterTableOrView(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableOrView) {
             listener.exitTableOrView(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOrView) {
            return visitor.visitTableOrView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameContext extends antlr.ParserRuleContext {
    public _db?: Id_Context;
    public _tab?: Id_Context;
    public _meta?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameCreateContext extends antlr.ParserRuleContext {
    public _db?: Id_Context;
    public _tab?: Id_Context;
    public _meta?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableNameCreate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableNameCreate) {
             listener.enterTableNameCreate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableNameCreate) {
             listener.exitTableNameCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableNameCreate) {
            return visitor.visitTableNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameContext extends antlr.ParserRuleContext {
    public _db?: Id_Context;
    public _view?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewName) {
             listener.enterViewName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewName) {
             listener.exitViewName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewName) {
            return visitor.visitViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameCreateContext extends antlr.ParserRuleContext {
    public _db?: Id_Context;
    public _view?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_viewNameCreate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterViewNameCreate) {
             listener.enterViewNameCreate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitViewNameCreate) {
             listener.exitViewNameCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewNameCreate) {
            return visitor.visitViewNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubQuerySourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public queryStatementExpression(): QueryStatementExpressionContext {
        return this.getRuleContext(0, QueryStatementExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_subQuerySource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSubQuerySource) {
             listener.enterSubQuerySource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSubQuerySource) {
             listener.exitSubQuerySource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubQuerySource) {
            return visitor.visitSubQuerySource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitioningSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITION, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BY, 0);
    }
    public expressions(): ExpressionsContext | null {
        return this.getRuleContext(0, ExpressionsContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public distributeByClause(): DistributeByClauseContext | null {
        return this.getRuleContext(0, DistributeByClauseContext);
    }
    public sortByClause(): SortByClauseContext | null {
        return this.getRuleContext(0, SortByClauseContext);
    }
    public clusterByClause(): ClusterByClauseContext | null {
        return this.getRuleContext(0, ClusterByClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitioningSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitioningSpec) {
             listener.enterPartitioningSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitioningSpec) {
             listener.exitPartitioningSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitioningSpec) {
            return visitor.visitPartitioningSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionTableFunctionSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subQuerySource(): SubQuerySourceContext | null {
        return this.getRuleContext(0, SubQuerySourceContext);
    }
    public tableSource(): TableSourceContext | null {
        return this.getRuleContext(0, TableSourceContext);
    }
    public partitionedTableFunction(): PartitionedTableFunctionContext | null {
        return this.getRuleContext(0, PartitionedTableFunctionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionTableFunctionSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionTableFunctionSource) {
             listener.enterPartitionTableFunctionSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionTableFunctionSource) {
             listener.exitPartitionTableFunctionSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionTableFunctionSource) {
            return visitor.visitPartitionTableFunctionSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionedTableFunctionContext extends antlr.ParserRuleContext {
    public _n?: Id_Context;
    public _ptfsrc?: PartitionTableFunctionSourceContext;
    public _spec?: PartitioningSpecContext;
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ON, 0)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public partitionTableFunctionSource(): PartitionTableFunctionSourceContext {
        return this.getRuleContext(0, PartitionTableFunctionSourceContext)!;
    }
    public Identifier(): antlr.TerminalNode[];
    public Identifier(i: number): antlr.TerminalNode | null;
    public Identifier(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.Identifier);
    	} else {
    		return this.getToken(HiveSqlParser.Identifier, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public partitioningSpec(): PartitioningSpecContext | null {
        return this.getRuleContext(0, PartitioningSpecContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionedTableFunction;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionedTableFunction) {
             listener.enterPartitionedTableFunction(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionedTableFunction) {
             listener.exitPartitionedTableFunction(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionedTableFunction) {
            return visitor.visitPartitionedTableFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WHERE, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_whereClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_VALUES, 0)!;
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext[];
    public expressionsInParenthesis(i: number): ExpressionsInParenthesisContext | null;
    public expressionsInParenthesis(i?: number): ExpressionsInParenthesisContext[] | ExpressionsInParenthesisContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionsInParenthesisContext);
        }

        return this.getRuleContext(i, ExpressionsInParenthesisContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public firstExpressionsWithAlias(): FirstExpressionsWithAliasContext | null {
        return this.getRuleContext(0, FirstExpressionsWithAliasContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_valuesClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterValuesClause) {
             listener.enterValuesClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitValuesClause) {
             listener.exitValuesClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValuesClause) {
            return visitor.visitValuesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VirtualTableSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_TABLE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public valuesClause(): ValuesClauseContext {
        return this.getRuleContext(0, ValuesClauseContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_virtualTableSource;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterVirtualTableSource) {
             listener.enterVirtualTableSource(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitVirtualTableSource) {
             listener.exitVirtualTableSource(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVirtualTableSource) {
            return visitor.visitVirtualTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SELECT, 0);
    }
    public selectItem(): SelectItemContext[];
    public selectItem(i: number): SelectItemContext | null;
    public selectItem(i?: number): SelectItemContext[] | SelectItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectItemContext);
        }

        return this.getRuleContext(i, SelectItemContext);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSFORM, 0);
    }
    public selectTrfmClause(): SelectTrfmClauseContext | null {
        return this.getRuleContext(0, SelectTrfmClauseContext);
    }
    public QUERY_HINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.QUERY_HINT, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTINCT, 0);
    }
    public trfmClause(): TrfmClauseContext | null {
        return this.getRuleContext(0, TrfmClauseContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectClause) {
             listener.enterSelectClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectClause) {
             listener.exitSelectClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectClause) {
            return visitor.visitSelectClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectTrfmClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public selectExpressionList(): SelectExpressionListContext {
        return this.getRuleContext(0, SelectExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public recordWriter(): RecordWriterContext {
        return this.getRuleContext(0, RecordWriterContext)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_USING, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public recordReader(): RecordReaderContext {
        return this.getRuleContext(0, RecordReaderContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public aliasList(): AliasListContext | null {
        return this.getRuleContext(0, AliasListContext);
    }
    public columnNameTypeList(): ColumnNameTypeListContext | null {
        return this.getRuleContext(0, ColumnNameTypeListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectTrfmClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectTrfmClause) {
             listener.enterSelectTrfmClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectTrfmClause) {
             listener.exitSelectTrfmClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectTrfmClause) {
            return visitor.visitSelectTrfmClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableAllColumns(): TableAllColumnsContext | null {
        return this.getRuleContext(0, TableAllColumnsContext);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectItem;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectItem) {
             listener.enterSelectItem(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectItem) {
             listener.exitSelectItem(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectItem) {
            return visitor.visitSelectItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrfmClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectExpressionList(): SelectExpressionListContext {
        return this.getRuleContext(0, SelectExpressionListContext)!;
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public recordWriter(): RecordWriterContext {
        return this.getRuleContext(0, RecordWriterContext)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_USING, 0)!;
    }
    public StringLiteral(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.StringLiteral, 0)!;
    }
    public recordReader(): RecordReaderContext {
        return this.getRuleContext(0, RecordReaderContext)!;
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAP, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REDUCE, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public aliasList(): AliasListContext | null {
        return this.getRuleContext(0, AliasListContext);
    }
    public columnNameTypeList(): ColumnNameTypeListContext | null {
        return this.getRuleContext(0, ColumnNameTypeListContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_trfmClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTrfmClause) {
             listener.enterTrfmClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTrfmClause) {
             listener.exitTrfmClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTrfmClause) {
            return visitor.visitTrfmClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableAllColumns(): TableAllColumnsContext | null {
        return this.getRuleContext(0, TableAllColumnsContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectExpression) {
             listener.enterSelectExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectExpression) {
             listener.exitSelectExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectExpression) {
            return visitor.visitSelectExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectExpression(): SelectExpressionContext[];
    public selectExpression(i: number): SelectExpressionContext | null;
    public selectExpression(i?: number): SelectExpressionContext[] | SelectExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectExpressionContext);
        }

        return this.getRuleContext(i, SelectExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_selectExpressionList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSelectExpressionList) {
             listener.enterSelectExpressionList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSelectExpressionList) {
             listener.exitSelectExpressionList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectExpressionList) {
            return visitor.visitSelectExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WINDOW(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_WINDOW, 0)!;
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_AS(): antlr.TerminalNode[];
    public KW_AS(i: number): antlr.TerminalNode | null;
    public KW_AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_AS);
    	} else {
    		return this.getToken(HiveSqlParser.KW_AS, i);
    	}
    }
    public window_specification(): Window_specificationContext[];
    public window_specification(i: number): Window_specificationContext | null;
    public window_specification(i?: number): Window_specificationContext[] | Window_specificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_specificationContext);
        }

        return this.getRuleContext(i, Window_specificationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_window_clause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWindow_clause) {
             listener.enterWindow_clause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWindow_clause) {
             listener.exitWindow_clause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_clause) {
            return visitor.visitWindow_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public partitioningSpec(): PartitioningSpecContext | null {
        return this.getRuleContext(0, PartitioningSpecContext);
    }
    public window_frame(): Window_frameContext | null {
        return this.getRuleContext(0, Window_frameContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_window_specification;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWindow_specification) {
             listener.enterWindow_specification(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWindow_specification) {
             listener.exitWindow_specification(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_specification) {
            return visitor.visitWindow_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROWS, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RANGE, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BETWEEN, 0);
    }
    public window_frame_boundary(): Window_frame_boundaryContext[];
    public window_frame_boundary(i: number): Window_frame_boundaryContext | null;
    public window_frame_boundary(i?: number): Window_frame_boundaryContext[] | Window_frame_boundaryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_frame_boundaryContext);
        }

        return this.getRuleContext(i, Window_frame_boundaryContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AND, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PRECEDING, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROW, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_window_frame;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWindow_frame) {
             listener.enterWindow_frame(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWindow_frame) {
             listener.exitWindow_frame(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame) {
            return visitor.visitWindow_frame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_frame_boundaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNBOUNDED, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PRECEDING, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FOLLOWING, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROW, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_window_frame_boundary;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWindow_frame_boundary) {
             listener.enterWindow_frame_boundary(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWindow_frame_boundary) {
             listener.exitWindow_frame_boundary(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_frame_boundary) {
            return visitor.visitWindow_frame_boundary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_GROUP, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public rollupStandard(): RollupStandardContext | null {
        return this.getRuleContext(0, RollupStandardContext);
    }
    public rollupOldSyntax(): RollupOldSyntaxContext | null {
        return this.getRuleContext(0, RollupOldSyntaxContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_groupByClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterGroupByClause) {
             listener.enterGroupByClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitGroupByClause) {
             listener.exitGroupByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RollupStandardContext extends antlr.ParserRuleContext {
    public _rollup?: Token | null;
    public _cube?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CUBE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rollupStandard;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRollupStandard) {
             listener.enterRollupStandard(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRollupStandard) {
             listener.exitRollupStandard(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRollupStandard) {
            return visitor.visitRollupStandard(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RollupOldSyntaxContext extends antlr.ParserRuleContext {
    public _expr?: ExpressionsNotInParenthesisContext;
    public _rollup?: Token | null;
    public _cube?: Token | null;
    public _sets?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
        return this.getRuleContext(0, ExpressionsNotInParenthesisContext)!;
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CUBE, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SETS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public groupingSetExpression(): GroupingSetExpressionContext[];
    public groupingSetExpression(i: number): GroupingSetExpressionContext | null;
    public groupingSetExpression(i?: number): GroupingSetExpressionContext[] | GroupingSetExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetExpressionContext);
        }

        return this.getRuleContext(i, GroupingSetExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUPING, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rollupOldSyntax;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRollupOldSyntax) {
             listener.enterRollupOldSyntax(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRollupOldSyntax) {
             listener.exitRollupOldSyntax(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRollupOldSyntax) {
            return visitor.visitRollupOldSyntax(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_groupingSetExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterGroupingSetExpression) {
             listener.enterGroupingSetExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitGroupingSetExpression) {
             listener.exitGroupingSetExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingSetExpression) {
            return visitor.visitGroupingSetExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HAVING(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_HAVING, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_havingClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_QUALIFY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_QUALIFY, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_qualifyClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterQualifyClause) {
             listener.enterQualifyClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitQualifyClause) {
             listener.exitQualifyClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifyClause) {
            return visitor.visitQualifyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionOrDefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFAULT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_expressionOrDefault;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExpressionOrDefault) {
             listener.enterExpressionOrDefault(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExpressionOrDefault) {
             listener.exitExpressionOrDefault(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionOrDefault) {
            return visitor.visitExpressionOrDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FirstExpressionsWithAliasContext extends antlr.ParserRuleContext {
    public _first?: ExpressionContext;
    public _colAlias?: Id_Context;
    public _alias?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_AS(): antlr.TerminalNode[];
    public KW_AS(i: number): antlr.TerminalNode | null;
    public KW_AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_AS);
    	} else {
    		return this.getToken(HiveSqlParser.KW_AS, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_firstExpressionsWithAlias;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFirstExpressionsWithAlias) {
             listener.enterFirstExpressionsWithAlias(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFirstExpressionsWithAlias) {
             listener.exitFirstExpressionsWithAlias(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFirstExpressionsWithAlias) {
            return visitor.visitFirstExpressionsWithAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsInParenthesisContext);
    }
    public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsNotInParenthesisContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_expressions;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExpressions) {
             listener.enterExpressions(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExpressions) {
             listener.exitExpressions(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressions) {
            return visitor.visitExpressions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionsInParenthesisContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
        return this.getRuleContext(0, ExpressionsNotInParenthesisContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_expressionsInParenthesis;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExpressionsInParenthesis) {
             listener.enterExpressionsInParenthesis(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExpressionsInParenthesis) {
             listener.exitExpressionsInParenthesis(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionsInParenthesis) {
            return visitor.visitExpressionsInParenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionsNotInParenthesisContext extends antlr.ParserRuleContext {
    public _first?: ExpressionOrDefaultContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionOrDefault(): ExpressionOrDefaultContext[];
    public expressionOrDefault(i: number): ExpressionOrDefaultContext | null;
    public expressionOrDefault(i?: number): ExpressionOrDefaultContext[] | ExpressionOrDefaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionOrDefaultContext);
        }

        return this.getRuleContext(i, ExpressionOrDefaultContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_expressionsNotInParenthesis;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExpressionsNotInParenthesis) {
             listener.enterExpressionsNotInParenthesis(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExpressionsNotInParenthesis) {
             listener.exitExpressionsNotInParenthesis(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionsNotInParenthesis) {
            return visitor.visitExpressionsNotInParenthesis(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ORDER(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ORDER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public columnRefOrder(): ColumnRefOrderContext[];
    public columnRefOrder(i: number): ColumnRefOrderContext | null;
    public columnRefOrder(i?: number): ColumnRefOrderContext[] | ColumnRefOrderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnRefOrderContext);
        }

        return this.getRuleContext(i, ColumnRefOrderContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_orderByClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterOrderByClause) {
             listener.enterOrderByClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitOrderByClause) {
             listener.exitOrderByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderByClause) {
            return visitor.visitOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusterByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTER(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CLUSTER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public expressions(): ExpressionsContext {
        return this.getRuleContext(0, ExpressionsContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_clusterByClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterClusterByClause) {
             listener.enterClusterByClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitClusterByClause) {
             listener.exitClusterByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitClusterByClause) {
            return visitor.visitClusterByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DistributeByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DISTRIBUTE, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public expressions(): ExpressionsContext {
        return this.getRuleContext(0, ExpressionsContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_distributeByClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDistributeByClause) {
             listener.enterDistributeByClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDistributeByClause) {
             listener.exitDistributeByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDistributeByClause) {
            return visitor.visitDistributeByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SORT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_SORT, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_BY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public columnRefOrder(): ColumnRefOrderContext[];
    public columnRefOrder(i: number): ColumnRefOrderContext | null;
    public columnRefOrder(i?: number): ColumnRefOrderContext[] | ColumnRefOrderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnRefOrderContext);
        }

        return this.getRuleContext(i, ColumnRefOrderContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_sortByClause;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSortByClause) {
             listener.enterSortByClause(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSortByClause) {
             listener.exitSortByClause(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSortByClause) {
            return visitor.visitSortByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_Context extends antlr.ParserRuleContext {
    public _leading?: Token | null;
    public _trailing?: Token | null;
    public _trim_characters?: SelectExpressionContext;
    public _str?: SelectExpressionContext;
    public _star?: Token | null;
    public _dist?: Token | null;
    public _within?: Token | null;
    public _ordBy?: OrderByClauseContext;
    public _nt?: Null_treatmentContext;
    public _ws?: Window_specificationContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRIM, 0);
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.LPAREN, i);
    	}
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FROM, 0);
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RPAREN);
    	} else {
    		return this.getToken(HiveSqlParser.RPAREN, i);
    	}
    }
    public selectExpression(): SelectExpressionContext[];
    public selectExpression(i: number): SelectExpressionContext | null;
    public selectExpression(i?: number): SelectExpressionContext[] | SelectExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectExpressionContext);
        }

        return this.getRuleContext(i, SelectExpressionContext);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BOTH, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LEADING, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRAILING, 0);
    }
    public functionNameForInvoke(): FunctionNameForInvokeContext | null {
        return this.getRuleContext(0, FunctionNameForInvokeContext);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUP, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OVER, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.STAR, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITHIN, 0);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public window_specification(): Window_specificationContext | null {
        return this.getRuleContext(0, Window_specificationContext);
    }
    public null_treatment(): Null_treatmentContext | null {
        return this.getRuleContext(0, Null_treatmentContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTINCT, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_function_;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFunction_) {
             listener.enterFunction_(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFunction_) {
             listener.exitFunction_(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunction_) {
            return visitor.visitFunction_(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Null_treatmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULLS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_NULLS, 0)!;
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESPECT, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IGNORE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_null_treatment;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterNull_treatment) {
             listener.enterNull_treatment(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitNull_treatment) {
             listener.exitNull_treatment(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNull_treatment) {
            return visitor.visitNull_treatment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionIdentifier(): FunctionIdentifierContext {
        return this.getRuleContext(0, FunctionIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_functionNameCreate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFunctionNameCreate) {
             listener.enterFunctionNameCreate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFunctionNameCreate) {
             listener.exitFunctionNameCreate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameCreate) {
            return visitor.visitFunctionNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameForDDLContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionIdentifier(): FunctionIdentifierContext | null {
        return this.getRuleContext(0, FunctionIdentifierContext);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_functionNameForDDL;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFunctionNameForDDL) {
             listener.enterFunctionNameForDDL(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFunctionNameForDDL) {
             listener.exitFunctionNameForDDL(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameForDDL) {
            return visitor.visitFunctionNameForDDL(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameForInvokeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionIdentifier(): FunctionIdentifierContext | null {
        return this.getRuleContext(0, FunctionIdentifierContext);
    }
    public sql11ReservedKeywordsUsedAsFunctionName(): Sql11ReservedKeywordsUsedAsFunctionNameContext | null {
        return this.getRuleContext(0, Sql11ReservedKeywordsUsedAsFunctionNameContext);
    }
    public sysFuncNames(): SysFuncNamesContext | null {
        return this.getRuleContext(0, SysFuncNamesContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_functionNameForInvoke;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFunctionNameForInvoke) {
             listener.enterFunctionNameForInvoke(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFunctionNameForInvoke) {
             listener.exitFunctionNameForInvoke(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameForInvoke) {
            return visitor.visitFunctionNameForInvoke(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CastExpressionContext extends antlr.ParserRuleContext {
    public _toType?: PrimitiveTypeContext;
    public _fmt?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CAST(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_AS, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public primitiveType(): PrimitiveTypeContext {
        return this.getRuleContext(0, PrimitiveTypeContext)!;
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORMAT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_castExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCastExpression) {
             listener.enterCastExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCastExpression) {
             listener.exitCastExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCastExpression) {
            return visitor.visitCastExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CASE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CASE, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_END, 0)!;
    }
    public KW_WHEN(): antlr.TerminalNode[];
    public KW_WHEN(i: number): antlr.TerminalNode | null;
    public KW_WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_WHEN);
    	} else {
    		return this.getToken(HiveSqlParser.KW_WHEN, i);
    	}
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_THEN);
    	} else {
    		return this.getToken(HiveSqlParser.KW_THEN, i);
    	}
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ELSE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_caseExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterCaseExpression) {
             listener.enterCaseExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitCaseExpression) {
             listener.exitCaseExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCaseExpression) {
            return visitor.visitCaseExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CASE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_CASE, 0)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_END, 0)!;
    }
    public KW_WHEN(): antlr.TerminalNode[];
    public KW_WHEN(i: number): antlr.TerminalNode | null;
    public KW_WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_WHEN);
    	} else {
    		return this.getToken(HiveSqlParser.KW_WHEN, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_THEN);
    	} else {
    		return this.getToken(HiveSqlParser.KW_THEN, i);
    	}
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ELSE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_whenExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWhenExpression) {
             listener.enterWhenExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWhenExpression) {
             listener.exitWhenExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenExpression) {
            return visitor.visitWhenExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FloorExpressionContext extends antlr.ParserRuleContext {
    public _floorUnit?: TimeQualifiersContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FLOOR(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FLOOR, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public timeQualifiers(): TimeQualifiersContext | null {
        return this.getRuleContext(0, TimeQualifiersContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_floorExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFloorExpression) {
             listener.enterFloorExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFloorExpression) {
             listener.exitFloorExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFloorExpression) {
            return visitor.visitFloorExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtractExpressionContext extends antlr.ParserRuleContext {
    public _timeUnit?: TimeQualifiersContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXTRACT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_EXTRACT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FROM, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public timeQualifiers(): TimeQualifiersContext {
        return this.getRuleContext(0, TimeQualifiersContext)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_extractExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExtractExpression) {
             listener.enterExtractExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExtractExpression) {
             listener.exitExtractExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExtractExpression) {
            return visitor.visitExtractExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeQualifiersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public year(): YearContext | null {
        return this.getRuleContext(0, YearContext);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUARTER, 0);
    }
    public month(): MonthContext | null {
        return this.getRuleContext(0, MonthContext);
    }
    public week(): WeekContext | null {
        return this.getRuleContext(0, WeekContext);
    }
    public day(): DayContext | null {
        return this.getRuleContext(0, DayContext);
    }
    public hour(): HourContext | null {
        return this.getRuleContext(0, HourContext);
    }
    public minute(): MinuteContext | null {
        return this.getRuleContext(0, MinuteContext);
    }
    public second(): SecondContext | null {
        return this.getRuleContext(0, SecondContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_timeQualifiers;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTimeQualifiers) {
             listener.enterTimeQualifiers(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTimeQualifiers) {
             listener.exitTimeQualifiers(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTimeQualifiers) {
            return visitor.visitTimeQualifiers(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantContext extends antlr.ParserRuleContext {
    public _value?: IntervalValueContext;
    public _qualifiers?: IntervalQualifiersContext;
    public _csName?: Token | null;
    public _csLiteral?: Token | null;
    public _p?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalValue(): IntervalValueContext | null {
        return this.getRuleContext(0, IntervalValueContext);
    }
    public intervalQualifiers(): IntervalQualifiersContext | null {
        return this.getRuleContext(0, IntervalQualifiersContext);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATE, 0);
    }
    public StringLiteral(): antlr.TerminalNode[];
    public StringLiteral(i: number): antlr.TerminalNode | null;
    public StringLiteral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.StringLiteral);
    	} else {
    		return this.getToken(HiveSqlParser.StringLiteral, i);
    	}
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_TIMESTAMPLOCALTZ(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMPLOCALTZ, 0);
    }
    public IntegralLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.IntegralLiteral, 0);
    }
    public NumberLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.NumberLiteral, 0);
    }
    public CharSetName(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.CharSetName, 0);
    }
    public CharSetLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.CharSetLiteral, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FALSE, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NULL, 0);
    }
    public QUESTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.QUESTION, 0);
    }
    public Identifier(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Identifier, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_constant;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterConstant) {
             listener.enterConstant(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitConstant) {
             listener.exitConstant(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstant) {
            return visitor.visitConstant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_intervalValue;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterIntervalValue) {
             listener.enterIntervalValue(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitIntervalValue) {
             listener.exitIntervalValue(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalValue) {
            return visitor.visitIntervalValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalExpressionContext extends antlr.ParserRuleContext {
    public _value?: IntervalValueContext;
    public _qualifiers?: IntervalQualifiersContext;
    public _expr?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.RPAREN, 0);
    }
    public intervalValue(): IntervalValueContext | null {
        return this.getRuleContext(0, IntervalValueContext);
    }
    public intervalQualifiers(): IntervalQualifiersContext {
        return this.getRuleContext(0, IntervalQualifiersContext)!;
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTERVAL, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_intervalExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterIntervalExpression) {
             listener.enterIntervalExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitIntervalExpression) {
             listener.exitIntervalExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalExpression) {
            return visitor.visitIntervalExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalQualifiersContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public year(): YearContext | null {
        return this.getRuleContext(0, YearContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public month(): MonthContext | null {
        return this.getRuleContext(0, MonthContext);
    }
    public day(): DayContext | null {
        return this.getRuleContext(0, DayContext);
    }
    public second(): SecondContext | null {
        return this.getRuleContext(0, SecondContext);
    }
    public hour(): HourContext | null {
        return this.getRuleContext(0, HourContext);
    }
    public minute(): MinuteContext | null {
        return this.getRuleContext(0, MinuteContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_intervalQualifiers;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterIntervalQualifiers) {
             listener.enterIntervalQualifiers(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitIntervalQualifiers) {
             listener.exitIntervalQualifiers(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalQualifiers) {
            return visitor.visitIntervalQualifiers(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceAndExpression(): PrecedenceAndExpressionContext[];
    public precedenceAndExpression(i: number): PrecedenceAndExpressionContext | null;
    public precedenceAndExpression(i?: number): PrecedenceAndExpressionContext[] | PrecedenceAndExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceAndExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceAndExpressionContext);
    }
    public KW_OR(): antlr.TerminalNode[];
    public KW_OR(i: number): antlr.TerminalNode | null;
    public KW_OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_OR);
    	} else {
    		return this.getToken(HiveSqlParser.KW_OR, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_expression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public intervalExpression(): IntervalExpressionContext | null {
        return this.getRuleContext(0, IntervalExpressionContext);
    }
    public castExpression(): CastExpressionContext | null {
        return this.getRuleContext(0, CastExpressionContext);
    }
    public extractExpression(): ExtractExpressionContext | null {
        return this.getRuleContext(0, ExtractExpressionContext);
    }
    public floorExpression(): FloorExpressionContext | null {
        return this.getRuleContext(0, FloorExpressionContext);
    }
    public caseExpression(): CaseExpressionContext | null {
        return this.getRuleContext(0, CaseExpressionContext);
    }
    public whenExpression(): WhenExpressionContext | null {
        return this.getRuleContext(0, WhenExpressionContext);
    }
    public subQueryExpression(): SubQueryExpressionContext | null {
        return this.getRuleContext(0, SubQueryExpressionContext);
    }
    public function_(): Function_Context | null {
        return this.getRuleContext(0, Function_Context);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsInParenthesisContext);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_atomExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterAtomExpression) {
             listener.enterAtomExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitAtomExpression) {
             listener.exitAtomExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtomExpression) {
            return visitor.visitAtomExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceUnaryPrefixExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public atomExpression(): AtomExpressionContext {
        return this.getRuleContext(0, AtomExpressionContext)!;
    }
    public LSQUARE(): antlr.TerminalNode[];
    public LSQUARE(i: number): antlr.TerminalNode | null;
    public LSQUARE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.LSQUARE);
    	} else {
    		return this.getToken(HiveSqlParser.LSQUARE, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RSQUARE(): antlr.TerminalNode[];
    public RSQUARE(i: number): antlr.TerminalNode | null;
    public RSQUARE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.RSQUARE);
    	} else {
    		return this.getToken(HiveSqlParser.RSQUARE, i);
    	}
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public PLUS(): antlr.TerminalNode[];
    public PLUS(i: number): antlr.TerminalNode | null;
    public PLUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.PLUS);
    	} else {
    		return this.getToken(HiveSqlParser.PLUS, i);
    	}
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.MINUS);
    	} else {
    		return this.getToken(HiveSqlParser.MINUS, i);
    	}
    }
    public TILDE(): antlr.TerminalNode[];
    public TILDE(i: number): antlr.TerminalNode | null;
    public TILDE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.TILDE);
    	} else {
    		return this.getToken(HiveSqlParser.TILDE, i);
    	}
    }
    public BITWISENOT(): antlr.TerminalNode[];
    public BITWISENOT(i: number): antlr.TerminalNode | null;
    public BITWISENOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.BITWISENOT);
    	} else {
    		return this.getToken(HiveSqlParser.BITWISENOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceUnaryPrefixExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceUnaryPrefixExpression) {
             listener.enterPrecedenceUnaryPrefixExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceUnaryPrefixExpression) {
             listener.exitPrecedenceUnaryPrefixExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceUnaryPrefixExpression) {
            return visitor.visitPrecedenceUnaryPrefixExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceBitwiseXorExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceUnaryPrefixExpression(): PrecedenceUnaryPrefixExpressionContext[];
    public precedenceUnaryPrefixExpression(i: number): PrecedenceUnaryPrefixExpressionContext | null;
    public precedenceUnaryPrefixExpression(i?: number): PrecedenceUnaryPrefixExpressionContext[] | PrecedenceUnaryPrefixExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceUnaryPrefixExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceUnaryPrefixExpressionContext);
    }
    public BITWISEXOR(): antlr.TerminalNode[];
    public BITWISEXOR(i: number): antlr.TerminalNode | null;
    public BITWISEXOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.BITWISEXOR);
    	} else {
    		return this.getToken(HiveSqlParser.BITWISEXOR, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceBitwiseXorExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceBitwiseXorExpression) {
             listener.enterPrecedenceBitwiseXorExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceBitwiseXorExpression) {
             listener.exitPrecedenceBitwiseXorExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceBitwiseXorExpression) {
            return visitor.visitPrecedenceBitwiseXorExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceStarExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceBitwiseXorExpression(): PrecedenceBitwiseXorExpressionContext[];
    public precedenceBitwiseXorExpression(i: number): PrecedenceBitwiseXorExpressionContext | null;
    public precedenceBitwiseXorExpression(i?: number): PrecedenceBitwiseXorExpressionContext[] | PrecedenceBitwiseXorExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceBitwiseXorExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceBitwiseXorExpressionContext);
    }
    public STAR(): antlr.TerminalNode[];
    public STAR(i: number): antlr.TerminalNode | null;
    public STAR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.STAR);
    	} else {
    		return this.getToken(HiveSqlParser.STAR, i);
    	}
    }
    public DIVIDE(): antlr.TerminalNode[];
    public DIVIDE(i: number): antlr.TerminalNode | null;
    public DIVIDE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DIVIDE);
    	} else {
    		return this.getToken(HiveSqlParser.DIVIDE, i);
    	}
    }
    public MOD(): antlr.TerminalNode[];
    public MOD(i: number): antlr.TerminalNode | null;
    public MOD(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.MOD);
    	} else {
    		return this.getToken(HiveSqlParser.MOD, i);
    	}
    }
    public DIV(): antlr.TerminalNode[];
    public DIV(i: number): antlr.TerminalNode | null;
    public DIV(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DIV);
    	} else {
    		return this.getToken(HiveSqlParser.DIV, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceStarExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceStarExpression) {
             listener.enterPrecedenceStarExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceStarExpression) {
             listener.exitPrecedenceStarExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceStarExpression) {
            return visitor.visitPrecedenceStarExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedencePlusExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceStarExpression(): PrecedenceStarExpressionContext[];
    public precedenceStarExpression(i: number): PrecedenceStarExpressionContext | null;
    public precedenceStarExpression(i?: number): PrecedenceStarExpressionContext[] | PrecedenceStarExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceStarExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceStarExpressionContext);
    }
    public PLUS(): antlr.TerminalNode[];
    public PLUS(i: number): antlr.TerminalNode | null;
    public PLUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.PLUS);
    	} else {
    		return this.getToken(HiveSqlParser.PLUS, i);
    	}
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.MINUS);
    	} else {
    		return this.getToken(HiveSqlParser.MINUS, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedencePlusExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedencePlusExpression) {
             listener.enterPrecedencePlusExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedencePlusExpression) {
             listener.exitPrecedencePlusExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedencePlusExpression) {
            return visitor.visitPrecedencePlusExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceConcatenateExpressionContext extends antlr.ParserRuleContext {
    public _plus?: PrecedencePlusExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedencePlusExpression(): PrecedencePlusExpressionContext[];
    public precedencePlusExpression(i: number): PrecedencePlusExpressionContext | null;
    public precedencePlusExpression(i?: number): PrecedencePlusExpressionContext[] | PrecedencePlusExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedencePlusExpressionContext);
        }

        return this.getRuleContext(i, PrecedencePlusExpressionContext);
    }
    public CONCATENATE(): antlr.TerminalNode[];
    public CONCATENATE(i: number): antlr.TerminalNode | null;
    public CONCATENATE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.CONCATENATE);
    	} else {
    		return this.getToken(HiveSqlParser.CONCATENATE, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceConcatenateExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceConcatenateExpression) {
             listener.enterPrecedenceConcatenateExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceConcatenateExpression) {
             listener.exitPrecedenceConcatenateExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceConcatenateExpression) {
            return visitor.visitPrecedenceConcatenateExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceAmpersandExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceConcatenateExpression(): PrecedenceConcatenateExpressionContext[];
    public precedenceConcatenateExpression(i: number): PrecedenceConcatenateExpressionContext | null;
    public precedenceConcatenateExpression(i?: number): PrecedenceConcatenateExpressionContext[] | PrecedenceConcatenateExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceConcatenateExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceConcatenateExpressionContext);
    }
    public AMPERSAND(): antlr.TerminalNode[];
    public AMPERSAND(i: number): antlr.TerminalNode | null;
    public AMPERSAND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.AMPERSAND);
    	} else {
    		return this.getToken(HiveSqlParser.AMPERSAND, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceAmpersandExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceAmpersandExpression) {
             listener.enterPrecedenceAmpersandExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceAmpersandExpression) {
             listener.exitPrecedenceAmpersandExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceAmpersandExpression) {
            return visitor.visitPrecedenceAmpersandExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceBitwiseOrExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceAmpersandExpression(): PrecedenceAmpersandExpressionContext[];
    public precedenceAmpersandExpression(i: number): PrecedenceAmpersandExpressionContext | null;
    public precedenceAmpersandExpression(i?: number): PrecedenceAmpersandExpressionContext[] | PrecedenceAmpersandExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceAmpersandExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceAmpersandExpressionContext);
    }
    public BITWISEOR(): antlr.TerminalNode[];
    public BITWISEOR(i: number): antlr.TerminalNode | null;
    public BITWISEOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.BITWISEOR);
    	} else {
    		return this.getToken(HiveSqlParser.BITWISEOR, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceBitwiseOrExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceBitwiseOrExpression) {
             listener.enterPrecedenceBitwiseOrExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceBitwiseOrExpression) {
             listener.exitPrecedenceBitwiseOrExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceBitwiseOrExpression) {
            return visitor.visitPrecedenceBitwiseOrExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REGEXP, 0);
    }
    public LESSTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LESSTHANOREQUALTO, 0);
    }
    public LESSTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LESSTHAN, 0);
    }
    public GREATERTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.GREATERTHANOREQUALTO, 0);
    }
    public GREATERTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceSimilarOperator;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceSimilarOperator) {
             listener.enterPrecedenceSimilarOperator(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceSimilarOperator) {
             listener.exitPrecedenceSimilarOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarOperator) {
            return visitor.visitPrecedenceSimilarOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubQueryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public selectStatement(): SelectStatementContext {
        return this.getRuleContext(0, SelectStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_subQueryExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSubQueryExpression) {
             listener.enterSubQueryExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSubQueryExpression) {
             listener.exitSubQueryExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubQueryExpression) {
            return visitor.visitSubQueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionContext extends antlr.ParserRuleContext {
    public _a?: PrecedenceBitwiseOrExpressionContext;
    public _part?: PrecedenceSimilarExpressionPartContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext | null {
        return this.getRuleContext(0, PrecedenceBitwiseOrExpressionContext);
    }
    public precedenceSimilarExpressionPart(): PrecedenceSimilarExpressionPartContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionPartContext);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXISTS, 0);
    }
    public subQueryExpression(): SubQueryExpressionContext | null {
        return this.getRuleContext(0, SubQueryExpressionContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceSimilarExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceSimilarExpression) {
             listener.enterPrecedenceSimilarExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceSimilarExpression) {
             listener.exitPrecedenceSimilarExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpression) {
            return visitor.visitPrecedenceSimilarExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionPartContext extends antlr.ParserRuleContext {
    public _equalExpr?: PrecedenceBitwiseOrExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceSimilarOperator(): PrecedenceSimilarOperatorContext | null {
        return this.getRuleContext(0, PrecedenceSimilarOperatorContext);
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext | null {
        return this.getRuleContext(0, PrecedenceBitwiseOrExpressionContext);
    }
    public precedenceSimilarExpressionAtom(): PrecedenceSimilarExpressionAtomContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionAtomContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public precedenceSimilarExpressionPartNot(): PrecedenceSimilarExpressionPartNotContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionPartNotContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceSimilarExpressionPart;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceSimilarExpressionPart) {
             listener.enterPrecedenceSimilarExpressionPart(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceSimilarExpressionPart) {
             listener.exitPrecedenceSimilarExpressionPart(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionPart) {
            return visitor.visitPrecedenceSimilarExpressionPart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionAtomContext extends antlr.ParserRuleContext {
    public _min?: PrecedenceBitwiseOrExpressionContext;
    public _max?: PrecedenceBitwiseOrExpressionContext;
    public _expr?: ExpressionsInParenthesisContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IN, 0);
    }
    public precedenceSimilarExpressionIn(): PrecedenceSimilarExpressionInContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionInContext);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BETWEEN, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AND, 0);
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext[];
    public precedenceBitwiseOrExpression(i: number): PrecedenceBitwiseOrExpressionContext | null;
    public precedenceBitwiseOrExpression(i?: number): PrecedenceBitwiseOrExpressionContext[] | PrecedenceBitwiseOrExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceBitwiseOrExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceBitwiseOrExpressionContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ANY, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALL, 0);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsInParenthesisContext);
    }
    public subQuerySelectorOperator(): SubQuerySelectorOperatorContext | null {
        return this.getRuleContext(0, SubQuerySelectorOperatorContext);
    }
    public subQueryExpression(): SubQueryExpressionContext | null {
        return this.getRuleContext(0, SubQueryExpressionContext);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SOME, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceSimilarExpressionAtom;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceSimilarExpressionAtom) {
             listener.enterPrecedenceSimilarExpressionAtom(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceSimilarExpressionAtom) {
             listener.exitPrecedenceSimilarExpressionAtom(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionAtom) {
            return visitor.visitPrecedenceSimilarExpressionAtom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionInContext extends antlr.ParserRuleContext {
    public _expr?: ExpressionsInParenthesisContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subQueryExpression(): SubQueryExpressionContext | null {
        return this.getRuleContext(0, SubQueryExpressionContext);
    }
    public expressionsInParenthesis(): ExpressionsInParenthesisContext | null {
        return this.getRuleContext(0, ExpressionsInParenthesisContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceSimilarExpressionIn;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceSimilarExpressionIn) {
             listener.enterPrecedenceSimilarExpressionIn(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceSimilarExpressionIn) {
             listener.exitPrecedenceSimilarExpressionIn(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionIn) {
            return visitor.visitPrecedenceSimilarExpressionIn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceSimilarExpressionPartNotContext extends antlr.ParserRuleContext {
    public _notExpr?: PrecedenceBitwiseOrExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REGEXP, 0);
    }
    public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext | null {
        return this.getRuleContext(0, PrecedenceBitwiseOrExpressionContext);
    }
    public precedenceSimilarExpressionAtom(): PrecedenceSimilarExpressionAtomContext | null {
        return this.getRuleContext(0, PrecedenceSimilarExpressionAtomContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceSimilarExpressionPartNot;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceSimilarExpressionPartNot) {
             listener.enterPrecedenceSimilarExpressionPartNot(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceSimilarExpressionPartNot) {
             listener.exitPrecedenceSimilarExpressionPartNot(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceSimilarExpressionPartNot) {
            return visitor.visitPrecedenceSimilarExpressionPartNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceDistinctOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_IS, 0)!;
    }
    public KW_DISTINCT(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_DISTINCT, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_FROM, 0)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceDistinctOperator;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceDistinctOperator) {
             listener.enterPrecedenceDistinctOperator(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceDistinctOperator) {
             listener.exitPrecedenceDistinctOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceDistinctOperator) {
            return visitor.visitPrecedenceDistinctOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceEqualOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public EQUAL_NS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL_NS, 0);
    }
    public NOTEQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.NOTEQUAL, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IS, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTINCT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FROM, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceEqualOperator;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceEqualOperator) {
             listener.enterPrecedenceEqualOperator(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceEqualOperator) {
             listener.exitPrecedenceEqualOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceEqualOperator) {
            return visitor.visitPrecedenceEqualOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceEqualExpressionContext extends antlr.ParserRuleContext {
    public _precedenceEqualOperator?: PrecedenceEqualOperatorContext;
    public _equal: PrecedenceEqualOperatorContext[] = [];
    public _precedenceSimilarExpression?: PrecedenceSimilarExpressionContext;
    public _p: PrecedenceSimilarExpressionContext[] = [];
    public _precedenceDistinctOperator?: PrecedenceDistinctOperatorContext;
    public _dist: PrecedenceDistinctOperatorContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceSimilarExpression(): PrecedenceSimilarExpressionContext[];
    public precedenceSimilarExpression(i: number): PrecedenceSimilarExpressionContext | null;
    public precedenceSimilarExpression(i?: number): PrecedenceSimilarExpressionContext[] | PrecedenceSimilarExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceSimilarExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceSimilarExpressionContext);
    }
    public precedenceEqualOperator(): PrecedenceEqualOperatorContext[];
    public precedenceEqualOperator(i: number): PrecedenceEqualOperatorContext | null;
    public precedenceEqualOperator(i?: number): PrecedenceEqualOperatorContext[] | PrecedenceEqualOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceEqualOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceEqualOperatorContext);
    }
    public precedenceDistinctOperator(): PrecedenceDistinctOperatorContext[];
    public precedenceDistinctOperator(i: number): PrecedenceDistinctOperatorContext | null;
    public precedenceDistinctOperator(i?: number): PrecedenceDistinctOperatorContext[] | PrecedenceDistinctOperatorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceDistinctOperatorContext);
        }

        return this.getRuleContext(i, PrecedenceDistinctOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceEqualExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceEqualExpression) {
             listener.enterPrecedenceEqualExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceEqualExpression) {
             listener.exitPrecedenceEqualExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceEqualExpression) {
            return visitor.visitPrecedenceEqualExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IsConditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NULL, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FALSE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNKNOWN, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_isCondition;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterIsCondition) {
             listener.enterIsCondition(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitIsCondition) {
             listener.exitIsCondition(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIsCondition) {
            return visitor.visitIsCondition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceNotExpressionContext extends antlr.ParserRuleContext {
    public _a?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceEqualExpression(): PrecedenceEqualExpressionContext {
        return this.getRuleContext(0, PrecedenceEqualExpressionContext)!;
    }
    public KW_NOT(): antlr.TerminalNode[];
    public KW_NOT(i: number): antlr.TerminalNode | null;
    public KW_NOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_NOT);
    	} else {
    		return this.getToken(HiveSqlParser.KW_NOT, i);
    	}
    }
    public isCondition(): IsConditionContext | null {
        return this.getRuleContext(0, IsConditionContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceNotExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceNotExpression) {
             listener.enterPrecedenceNotExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceNotExpression) {
             listener.exitPrecedenceNotExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceNotExpression) {
            return visitor.visitPrecedenceNotExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrecedenceAndExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public precedenceNotExpression(): PrecedenceNotExpressionContext[];
    public precedenceNotExpression(i: number): PrecedenceNotExpressionContext | null;
    public precedenceNotExpression(i?: number): PrecedenceNotExpressionContext[] | PrecedenceNotExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrecedenceNotExpressionContext);
        }

        return this.getRuleContext(i, PrecedenceNotExpressionContext);
    }
    public KW_AND(): antlr.TerminalNode[];
    public KW_AND(i: number): antlr.TerminalNode | null;
    public KW_AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.KW_AND);
    	} else {
    		return this.getToken(HiveSqlParser.KW_AND, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_precedenceAndExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrecedenceAndExpression) {
             listener.enterPrecedenceAndExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrecedenceAndExpression) {
             listener.exitPrecedenceAndExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrecedenceAndExpression) {
            return visitor.visitPrecedenceAndExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableOrPartitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_tableOrPartition;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTableOrPartition) {
             listener.enterTableOrPartition(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTableOrPartition) {
             listener.exitTableOrPartition(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableOrPartition) {
            return visitor.visitTableOrPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_PARTITION, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public partitionVal(): PartitionValContext[];
    public partitionVal(i: number): PartitionValContext | null;
    public partitionVal(i?: number): PartitionValContext[] | PartitionValContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValContext);
        }

        return this.getRuleContext(i, PartitionValContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionSpec) {
             listener.enterPartitionSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionSpec) {
             listener.exitPartitionSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpec) {
            return visitor.visitPartitionSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionVal;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionVal) {
             listener.enterPartitionVal(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionVal) {
             listener.exitPartitionVal(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionVal) {
            return visitor.visitPartitionVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSelectorSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.LPAREN, 0)!;
    }
    public partitionSelectorVal(): PartitionSelectorValContext[];
    public partitionSelectorVal(i: number): PartitionSelectorValContext | null;
    public partitionSelectorVal(i?: number): PartitionSelectorValContext[] | PartitionSelectorValContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSelectorValContext);
        }

        return this.getRuleContext(i, PartitionSelectorValContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionSelectorSpec;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionSelectorSpec) {
             listener.enterPartitionSelectorSpec(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionSelectorSpec) {
             listener.exitPartitionSelectorSpec(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSelectorSpec) {
            return visitor.visitPartitionSelectorSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSelectorValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public constant(): ConstantContext {
        return this.getRuleContext(0, ConstantContext)!;
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public subQuerySelectorOperator(): SubQuerySelectorOperatorContext | null {
        return this.getRuleContext(0, SubQuerySelectorOperatorContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_partitionSelectorVal;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPartitionSelectorVal) {
             listener.enterPartitionSelectorVal(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPartitionSelectorVal) {
             listener.exitPartitionSelectorVal(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSelectorVal) {
            return visitor.visitPartitionSelectorVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubQuerySelectorOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public NOTEQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.NOTEQUAL, 0);
    }
    public LESSTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LESSTHANOREQUALTO, 0);
    }
    public LESSTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LESSTHAN, 0);
    }
    public GREATERTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.GREATERTHANOREQUALTO, 0);
    }
    public GREATERTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_subQuerySelectorOperator;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSubQuerySelectorOperator) {
             listener.enterSubQuerySelectorOperator(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSubQuerySelectorOperator) {
             listener.exitSubQuerySelectorOperator(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubQuerySelectorOperator) {
            return visitor.visitSubQuerySelectorOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SysFuncNamesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AND, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OR, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IF, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CASE, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WHEN, 0);
    }
    public KW_FLOOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FLOOR, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TINYINT, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SMALLINT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTEGER, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BIGINT, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FLOAT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REAL, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DOUBLE, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BOOLEAN, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STRING, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BINARY, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ARRAY, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAP, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STRUCT, 0);
    }
    public KW_UNIONTYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNIONTYPE, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public EQUAL_NS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL_NS, 0);
    }
    public NOTEQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.NOTEQUAL, 0);
    }
    public LESSTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LESSTHANOREQUALTO, 0);
    }
    public LESSTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.LESSTHAN, 0);
    }
    public GREATERTHANOREQUALTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.GREATERTHANOREQUALTO, 0);
    }
    public GREATERTHAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0);
    }
    public DIVIDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DIVIDE, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.MINUS, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.STAR, 0);
    }
    public MOD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.MOD, 0);
    }
    public DIV(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DIV, 0);
    }
    public AMPERSAND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.AMPERSAND, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.TILDE, 0);
    }
    public BITWISEOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.BITWISEOR, 0);
    }
    public BITWISEXOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.BITWISEXOR, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REGEXP, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IN, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BETWEEN, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_sysFuncNames;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSysFuncNames) {
             listener.enterSysFuncNames(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSysFuncNames) {
             listener.exitSysFuncNames(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSysFuncNames) {
            return visitor.visitSysFuncNames(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Id_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Identifier(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Identifier, 0);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_id_;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterId_) {
             listener.enterId_(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitId_) {
             listener.exitId_(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitId_) {
            return visitor.visitId_(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionIdentifierContext extends antlr.ParserRuleContext {
    public _fn?: Id_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_functionIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterFunctionIdentifier) {
             listener.enterFunctionIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitFunctionIdentifier) {
             listener.exitFunctionIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionIdentifier) {
            return visitor.visitFunctionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_principalIdentifier;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPrincipalIdentifier) {
             listener.enterPrincipalIdentifier(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPrincipalIdentifier) {
             listener.exitPrincipalIdentifier(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrincipalIdentifier) {
            return visitor.visitPrincipalIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ABORT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ABORT, 0);
    }
    public KW_ACTIVATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ACTIVATE, 0);
    }
    public KW_ACTIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ACTIVE, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADD, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADMIN, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AFTER, 0);
    }
    public KW_ALLOC_FRACTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALLOC_FRACTION, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ANALYZE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ARCHIVE, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ASC, 0);
    }
    public KW_AST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AST, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AT, 0);
    }
    public KW_AUTOCOMMIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AUTOCOMMIT, 0);
    }
    public KW_BATCH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BATCH, 0);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BEFORE, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BUCKET, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BUCKETS, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CACHE, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CASCADE, 0);
    }
    public KW_CBO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CBO, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CHANGE, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CHECK, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CLUSTER, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CLUSTERED, 0);
    }
    public KW_CLUSTERSTATUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CLUSTERSTATUS, 0);
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLLECTION, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMMENT, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPACT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COMPUTE, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONCATENATE, 0);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONTINUE, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COST, 0);
    }
    public KW_CRON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CRON, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATA, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATABASES, 0);
    }
    public KW_DATETIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATETIME, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DAYS, 0);
    }
    public KW_DAYOFWEEK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DAYOFWEEK, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_DCPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DCPROPERTIES, 0);
    }
    public KW_DEBUG(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEBUG, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFAULT, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFERRED, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFINED, 0);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DELIMITED, 0);
    }
    public KW_DEPENDENCY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEPENDENCY, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DESC, 0);
    }
    public KW_DETAIL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DETAIL, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DIRECTORIES, 0);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DIRECTORY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISABLE, 0);
    }
    public KW_DISABLED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISABLED, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTRIBUTED, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DO, 0);
    }
    public KW_DUMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DUMP, 0);
    }
    public KW_ELEM_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ELEM_TYPE, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ENABLE, 0);
    }
    public KW_ENABLED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ENABLED, 0);
    }
    public KW_ENFORCED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ENFORCED, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ESCAPED, 0);
    }
    public KW_EVERY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EVERY, 0);
    }
    public KW_EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXCLUSIVE, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXECUTE, 0);
    }
    public KW_EXECUTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXECUTED, 0);
    }
    public KW_EXPIRE_SNAPSHOTS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXPIRE_SNAPSHOTS, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXPORT, 0);
    }
    public KW_EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_EXPRESSION, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FIELDS, 0);
    }
    public KW_FILE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FILE, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FILEFORMAT, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FIRST, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORMAT, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORMATTED, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_HOLD_DDLTIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_HOLD_DDLTIME, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_HOURS, 0);
    }
    public KW_IDXPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IDXPROPERTIES, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IGNORE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INDEXES, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPATH, 0);
    }
    public KW_INPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPUTDRIVER, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ISOLATION, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ITEMS, 0);
    }
    public KW_JAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_JAR, 0);
    }
    public KW_JOINCOST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_JOINCOST, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KEY, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KEYS, 0);
    }
    public KW_KEY_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KEY_TYPE, 0);
    }
    public KW_KILL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KILL, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LAST, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LEVEL, 0);
    }
    public KW_LIFECYCLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIFECYCLE, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIMIT, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LINES, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOAD, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCK, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCKS, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOGICAL, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LONG, 0);
    }
    public KW_MANAGED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGED, 0);
    }
    public KW_MANAGEDLOCATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGEDLOCATION, 0);
    }
    public KW_MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGEMENT, 0);
    }
    public KW_MAPJOIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAPJOIN, 0);
    }
    public KW_MAPPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAPPING, 0);
    }
    public KW_MATCHED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MATCHED, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_METADATA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_METADATA, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MINUTES, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MONTHS, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MOVE, 0);
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MSCK, 0);
    }
    public KW_NORELY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NORELY, 0);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOSCAN, 0);
    }
    public KW_NOVALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOVALIDATE, 0);
    }
    public KW_NO_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NO_DROP, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NULLS, 0);
    }
    public KW_OFFLINE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OFFLINE, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OFFSET, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OPERATOR, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OPTION, 0);
    }
    public KW_OUTPUTDRIVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTPUTDRIVER, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OVERWRITE, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_OWNER, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITIONED, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITIONS, 0);
    }
    public KW_PATH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PATH, 0);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PLAN, 0);
    }
    public KW_PLANS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PLANS, 0);
    }
    public KW_PLUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PLUS, 0);
    }
    public KW_POOL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_POOL, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PRINCIPALS, 0);
    }
    public KW_PROTECTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PROTECTION, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PURGE, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUARTER, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUERY, 0);
    }
    public KW_QUERY_PARALLELISM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUERY_PARALLELISM, 0);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_READ, 0);
    }
    public KW_READONLY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_READONLY, 0);
    }
    public KW_REBUILD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REBUILD, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RECORDREADER, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RECORDWRITER, 0);
    }
    public KW_RELOAD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RELOAD, 0);
    }
    public KW_RELY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RELY, 0);
    }
    public KW_REMOTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REMOTE, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RENAME, 0);
    }
    public KW_REOPTIMIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REOPTIMIZATION, 0);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPAIR, 0);
    }
    public KW_REPL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPL, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLACE, 0);
    }
    public KW_REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLICATION, 0);
    }
    public KW_RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESOURCE, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESPECT, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESTRICT, 0);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REWRITE, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLE, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROLES, 0);
    }
    public KW_SCHEDULED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEDULED, 0);
    }
    public KW_SCHEDULING_POLICY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEDULING_POLICY, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEMAS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SECONDS, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SEMI, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SERVER, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SETS, 0);
    }
    public KW_SET_CURRENT_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET_CURRENT_SNAPSHOT, 0);
    }
    public KW_SHARED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SHARED, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SHOW, 0);
    }
    public KW_SHOW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SHOW_DATABASE, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SKEWED, 0);
    }
    public KW_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SNAPSHOT, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SORT, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SORTED, 0);
    }
    public KW_SPEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SPEC, 0);
    }
    public KW_SSL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SSL, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STATISTICS, 0);
    }
    public KW_STATUS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STATUS, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STORED, 0);
    }
    public KW_STREAMTABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STREAMTABLE, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STRING, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_STRUCT, 0);
    }
    public KW_SUMMARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SUMMARY, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLES, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TERMINATED, 0);
    }
    public KW_TIMESTAMPTZ(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMPTZ, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TINYINT, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TOUCH, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSACTIONAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTIONAL, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRIM, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TYPE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_UNDO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNDO, 0);
    }
    public KW_UNIONTYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNIONTYPE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNKNOWN, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNLOCK, 0);
    }
    public KW_UNMANAGED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNMANAGED, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNSET, 0);
    }
    public KW_UNSIGNED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNSIGNED, 0);
    }
    public KW_URI(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_URI, 0);
    }
    public KW_URL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_URL, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USE, 0);
    }
    public KW_UTC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UTC, 0);
    }
    public KW_UTCTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UTCTIMESTAMP, 0);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VALIDATE, 0);
    }
    public KW_VALUE_TYPE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VALUE_TYPE, 0);
    }
    public KW_VECTORIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VECTORIZATION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VIEWS, 0);
    }
    public KW_WAIT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WAIT, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WEEKS, 0);
    }
    public KW_WHILE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WHILE, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITHIN, 0);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WORK, 0);
    }
    public KW_WORKLOAD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WORKLOAD, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WRITE, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_YEARS, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ZONE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_nonReserved;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterNonReserved) {
             listener.enterNonReserved(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitNonReserved) {
             listener.exitNonReserved(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql11ReservedKeywordsUsedAsFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ARRAY, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BIGINT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BINARY, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BOOLEAN, 0);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DATE, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DOUBLE, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FLOAT, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUPING, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IF, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTEGER, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAP, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REAL, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SMALLINT, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMP, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_sql11ReservedKeywordsUsedAsFunctionName;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSql11ReservedKeywordsUsedAsFunctionName) {
             listener.enterSql11ReservedKeywordsUsedAsFunctionName(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSql11ReservedKeywordsUsedAsFunctionName) {
             listener.exitSql11ReservedKeywordsUsedAsFunctionName(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSql11ReservedKeywordsUsedAsFunctionName) {
            return visitor.visitSql11ReservedKeywordsUsedAsFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConfigPropertiesItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context | null {
        return this.getRuleContext(0, Id_Context);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_JOIN, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PARTITION, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAP, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REDUCE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USER, 0);
    }
    public KW_PERCENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PERCENT, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTERVAL, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROWS, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNION, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUP, 0);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MERGE, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NULL, 0);
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FETCH, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LOCAL, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DROP, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TABLE, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ON, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ROW, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUPING, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public KW_FORCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FORCE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_START, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INSERT, 0);
    }
    public KW_CONF(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CONF, 0);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_INTO, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNIQUE, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_COLUMN, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRANSFORM, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISTINCT, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IN, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REFERENCES, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ONLY, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_END, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FUNCTION, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UPDATE, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_DDL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DDL, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VALUES, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TIME, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IS, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FOR, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NOT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BINARY, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USING, 0);
    }
    public KW_READS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_READS, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_BETWEEN, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CURRENT, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_configPropertiesItem;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterConfigPropertiesItem) {
             listener.enterConfigPropertiesItem(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitConfigPropertiesItem) {
             listener.exitConfigPropertiesItem(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConfigPropertiesItem) {
            return visitor.visitConfigPropertiesItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourcePlanDdlStatementsContext extends antlr.ParserRuleContext {
    public _name?: Id_Context;
    public _likeName?: Id_Context;
    public _newName?: Id_Context;
    public _src?: Id_Context;
    public _dest?: Id_Context;
    public _rpName?: Id_Context;
    public _triggerName?: Id_Context;
    public _poolName?: PoolPathContext;
    public _mappingType?: MappingTypesContext;
    public _path?: PoolPathContext;
    public _order?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_CREATE, 0);
    }
    public KW_RESOURCE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RESOURCE, 0);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PLAN, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_LIKE, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public rpAssignList(): RpAssignListContext | null {
        return this.getRuleContext(0, RpAssignListContext);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALTER, 0);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_VALIDATE, 0);
    }
    public disable(): DisableContext | null {
        return this.getRuleContext(0, DisableContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SET, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNSET, 0);
    }
    public rpUnassign(): RpUnassignContext[];
    public rpUnassign(i: number): RpUnassignContext | null;
    public rpUnassign(i?: number): RpUnassignContext[] | RpUnassignContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RpUnassignContext);
        }

        return this.getRuleContext(i, RpUnassignContext);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public activate(): ActivateContext | null {
        return this.getRuleContext(0, ActivateContext);
    }
    public enable(): EnableContext | null {
        return this.getRuleContext(0, EnableContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DROP, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_WORKLOAD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WORKLOAD, 0);
    }
    public KW_MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MANAGEMENT, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLACE, 0);
    }
    public KW_ACTIVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ACTIVE, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TRIGGER, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.DOT, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WHEN, 0);
    }
    public triggerAtomExpression(): TriggerAtomExpressionContext | null {
        return this.getRuleContext(0, TriggerAtomExpressionContext);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DO, 0);
    }
    public triggerActionExpression(): TriggerActionExpressionContext | null {
        return this.getRuleContext(0, TriggerActionExpressionContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ADD, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_FROM, 0);
    }
    public KW_POOL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_POOL, 0);
    }
    public KW_UNMANAGED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_UNMANAGED, 0);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public poolAssignList(): PoolAssignListContext | null {
        return this.getRuleContext(0, PoolAssignListContext);
    }
    public KW_SCHEDULING_POLICY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEDULING_POLICY, 0);
    }
    public KW_MAPPING(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MAPPING, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_IN, 0);
    }
    public mappingTypes(): MappingTypesContext | null {
        return this.getRuleContext(0, MappingTypesContext);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ORDER, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_resourcePlanDdlStatements;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterResourcePlanDdlStatements) {
             listener.enterResourcePlanDdlStatements(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitResourcePlanDdlStatements) {
             listener.exitResourcePlanDdlStatements(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResourcePlanDdlStatements) {
            return visitor.visitResourcePlanDdlStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MappingTypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_USER, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_GROUP, 0);
    }
    public KW_APPLICATION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_APPLICATION, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_mappingTypes;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterMappingTypes) {
             listener.enterMappingTypes(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitMappingTypes) {
             listener.exitMappingTypes(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMappingTypes) {
            return visitor.visitMappingTypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpAssignContext extends antlr.ParserRuleContext {
    public _parallelism?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_QUERY_PARALLELISM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUERY_PARALLELISM, 0);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.EQUAL, 0)!;
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFAULT, 0);
    }
    public KW_POOL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_POOL, 0);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rpAssign;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRpAssign) {
             listener.enterRpAssign(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRpAssign) {
             listener.exitRpAssign(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRpAssign) {
            return visitor.visitRpAssign(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpAssignListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rpAssign(): RpAssignContext[];
    public rpAssign(i: number): RpAssignContext | null;
    public rpAssign(i?: number): RpAssignContext[] | RpAssignContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RpAssignContext);
        }

        return this.getRuleContext(i, RpAssignContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rpAssignList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRpAssignList) {
             listener.enterRpAssignList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRpAssignList) {
             listener.exitRpAssignList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRpAssignList) {
            return visitor.visitRpAssignList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RpUnassignContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_QUERY_PARALLELISM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUERY_PARALLELISM, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEFAULT, 0);
    }
    public KW_POOL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_POOL, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_rpUnassign;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterRpUnassign) {
             listener.enterRpUnassign(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitRpUnassign) {
             listener.exitRpUnassign(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRpUnassign) {
            return visitor.visitRpUnassign(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ActivateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ACTIVATE(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.KW_ACTIVATE, 0)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WITH, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_REPLACE, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_activate;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterActivate) {
             listener.enterActivate(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitActivate) {
             listener.exitActivate(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitActivate) {
            return visitor.visitActivate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ENABLE, 0);
    }
    public KW_ENABLED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ENABLED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_enable;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterEnable) {
             listener.enterEnable(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitEnable) {
             listener.exitEnable(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEnable) {
            return visitor.visitEnable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DisableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISABLE, 0);
    }
    public KW_DISABLED(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DISABLED, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_disable;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDisable) {
             listener.enterDisable(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDisable) {
             listener.exitDisable(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDisable) {
            return visitor.visitDisable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class YearContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_YEARS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_year;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterYear) {
             listener.enterYear(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitYear) {
             listener.exitYear(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitYear) {
            return visitor.visitYear(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MonthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MONTHS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_month;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterMonth) {
             listener.enterMonth(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitMonth) {
             listener.exitMonth(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMonth) {
            return visitor.visitMonth(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WeekContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_WEEKS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_week;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterWeek) {
             listener.enterWeek(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitWeek) {
             listener.exitWeek(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWeek) {
            return visitor.visitWeek(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DayContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DAYS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_day;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDay) {
             listener.enterDay(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDay) {
             listener.exitDay(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDay) {
            return visitor.visitDay(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HourContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_HOURS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_hour;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterHour) {
             listener.enterHour(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitHour) {
             listener.exitHour(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHour) {
            return visitor.visitHour(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MinuteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MINUTES, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_minute;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterMinute) {
             listener.enterMinute(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitMinute) {
             listener.exitMinute(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMinute) {
            return visitor.visitMinute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SecondContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SECONDS, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_second;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterSecond) {
             listener.enterSecond(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitSecond) {
             listener.exitSecond(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSecond) {
            return visitor.visitSecond(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecimalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_DECIMAL, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_NUMERIC, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_decimal;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterDecimal) {
             listener.enterDecimal(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitDecimal) {
             listener.exitDecimal(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecimal) {
            return visitor.visitDecimal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PoolPathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context[];
    public id_(i: number): Id_Context | null;
    public id_(i?: number): Id_Context[] | Id_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Id_Context);
        }

        return this.getRuleContext(i, Id_Context);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.DOT);
    	} else {
    		return this.getToken(HiveSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_poolPath;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPoolPath) {
             listener.enterPoolPath(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPoolPath) {
             listener.exitPoolPath(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPoolPath) {
            return visitor.visitPoolPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerAtomExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public id_(): Id_Context {
        return this.getRuleContext(0, Id_Context)!;
    }
    public GREATERTHAN(): antlr.TerminalNode {
        return this.getToken(HiveSqlParser.GREATERTHAN, 0)!;
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_triggerAtomExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTriggerAtomExpression) {
             listener.enterTriggerAtomExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTriggerAtomExpression) {
             listener.exitTriggerAtomExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerAtomExpression) {
            return visitor.visitTriggerAtomExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerActionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_KILL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_KILL, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_MOVE, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_TO, 0);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_triggerActionExpression;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterTriggerActionExpression) {
             listener.enterTriggerActionExpression(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitTriggerActionExpression) {
             listener.exitTriggerActionExpression(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerActionExpression) {
            return visitor.visitTriggerActionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PoolAssignContext extends antlr.ParserRuleContext {
    public _allocFraction?: Token | null;
    public _parallelism?: Token | null;
    public _policy?: Token | null;
    public _path?: PoolPathContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALLOC_FRACTION(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_ALLOC_FRACTION, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.EQUAL, 0);
    }
    public KW_QUERY_PARALLELISM(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_QUERY_PARALLELISM, 0);
    }
    public KW_SCHEDULING_POLICY(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_SCHEDULING_POLICY, 0);
    }
    public KW_PATH(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.KW_PATH, 0);
    }
    public Number(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.Number, 0);
    }
    public StringLiteral(): antlr.TerminalNode | null {
        return this.getToken(HiveSqlParser.StringLiteral, 0);
    }
    public poolPath(): PoolPathContext | null {
        return this.getRuleContext(0, PoolPathContext);
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_poolAssign;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPoolAssign) {
             listener.enterPoolAssign(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPoolAssign) {
             listener.exitPoolAssign(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPoolAssign) {
            return visitor.visitPoolAssign(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PoolAssignListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public poolAssign(): PoolAssignContext[];
    public poolAssign(i: number): PoolAssignContext | null;
    public poolAssign(i?: number): PoolAssignContext[] | PoolAssignContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PoolAssignContext);
        }

        return this.getRuleContext(i, PoolAssignContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(HiveSqlParser.COMMA);
    	} else {
    		return this.getToken(HiveSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return HiveSqlParser.RULE_poolAssignList;
    }
    public override enterRule(listener: HiveSqlParserListener): void {
        if(listener.enterPoolAssignList) {
             listener.enterPoolAssignList(this);
        }
    }
    public override exitRule(listener: HiveSqlParserListener): void {
        if(listener.exitPoolAssignList) {
             listener.exitPoolAssignList(this);
        }
    }
    public override accept<Result>(visitor: HiveSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPoolAssignList) {
            return visitor.visitPoolAssignList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
