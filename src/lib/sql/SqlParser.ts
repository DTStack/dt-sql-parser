// Generated from dt-sql-parser/src/grammar/sql/SqlParser.g4 by ANTLR 4.13.1

// @ts-nocheck

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { SqlParserListener } from "./SqlParserListener.js";
import { SqlParserVisitor } from "./SqlParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


import { SQLParserBase } from '../SQLParserBase';


export class SqlParser extends SQLParserBase {
    public static readonly SEMICOLON = 1;
    public static readonly LEFT_PAREN = 2;
    public static readonly RIGHT_PAREN = 3;
    public static readonly COMMA = 4;
    public static readonly DOT = 5;
    public static readonly LEFT_BRACKET = 6;
    public static readonly RIGHT_BRACKET = 7;
    public static readonly KW_ADD = 8;
    public static readonly KW_AFTER = 9;
    public static readonly KW_ALL = 10;
    public static readonly KW_ALTER = 11;
    public static readonly KW_ALWAYS = 12;
    public static readonly KW_ANALYZE = 13;
    public static readonly KW_AND = 14;
    public static readonly KW_ANTI = 15;
    public static readonly KW_ANY = 16;
    public static readonly KW_ANY_VALUE = 17;
    public static readonly KW_ARCHIVE = 18;
    public static readonly KW_ARRAY = 19;
    public static readonly KW_AS = 20;
    public static readonly KW_ASC = 21;
    public static readonly KW_AT = 22;
    public static readonly KW_AUTHORIZATION = 23;
    public static readonly KW_BETWEEN = 24;
    public static readonly KW_BIGINT = 25;
    public static readonly KW_BINARY = 26;
    public static readonly KW_BOOLEAN = 27;
    public static readonly KW_BOTH = 28;
    public static readonly KW_BUCKET = 29;
    public static readonly KW_BUCKETS = 30;
    public static readonly KW_BY = 31;
    public static readonly KW_BYTE = 32;
    public static readonly KW_CACHE = 33;
    public static readonly KW_CASCADE = 34;
    public static readonly KW_CASE = 35;
    public static readonly KW_CAST = 36;
    public static readonly KW_CATALOG = 37;
    public static readonly KW_CATALOGS = 38;
    public static readonly KW_CHANGE = 39;
    public static readonly KW_CHAR = 40;
    public static readonly KW_CHARACTER = 41;
    public static readonly KW_CHECK = 42;
    public static readonly KW_CLEAR = 43;
    public static readonly KW_CLUSTER = 44;
    public static readonly KW_CLUSTERED = 45;
    public static readonly KW_CODEGEN = 46;
    public static readonly KW_COLLATE = 47;
    public static readonly KW_COLLECTION = 48;
    public static readonly KW_COLUMN = 49;
    public static readonly KW_COLUMNS = 50;
    public static readonly KW_COMMENT = 51;
    public static readonly KW_COMMIT = 52;
    public static readonly KW_COMPACT = 53;
    public static readonly KW_COMPACTIONS = 54;
    public static readonly KW_COMPUTE = 55;
    public static readonly KW_CONCATENATE = 56;
    public static readonly KW_CONSTRAINT = 57;
    public static readonly KW_COST = 58;
    public static readonly KW_CREATE = 59;
    public static readonly KW_CROSS = 60;
    public static readonly KW_CUBE = 61;
    public static readonly KW_CURRENT = 62;
    public static readonly KW_CURRENT_DATE = 63;
    public static readonly KW_CURRENT_TIME = 64;
    public static readonly KW_CURRENT_TIMESTAMP = 65;
    public static readonly KW_CURRENT_USER = 66;
    public static readonly KW_DAY = 67;
    public static readonly KW_DAYS = 68;
    public static readonly KW_DAYOFYEAR = 69;
    public static readonly KW_DATA = 70;
    public static readonly KW_DATE = 71;
    public static readonly KW_DATABASE = 72;
    public static readonly KW_DATABASES = 73;
    public static readonly KW_DATEADD = 74;
    public static readonly KW_DATE_ADD = 75;
    public static readonly KW_DATEDIFF = 76;
    public static readonly KW_DATE_DIFF = 77;
    public static readonly KW_DBPROPERTIES = 78;
    public static readonly KW_DEC = 79;
    public static readonly KW_DECIMAL = 80;
    public static readonly KW_DECLARE = 81;
    public static readonly KW_DEFAULT = 82;
    public static readonly KW_DEFINED = 83;
    public static readonly KW_DELETE = 84;
    public static readonly KW_DELIMITED = 85;
    public static readonly KW_DESC = 86;
    public static readonly KW_DESCRIBE = 87;
    public static readonly KW_DFS = 88;
    public static readonly KW_DIRECTORIES = 89;
    public static readonly KW_DIRECTORY = 90;
    public static readonly KW_DISABLE = 91;
    public static readonly KW_DISTINCT = 92;
    public static readonly KW_DISTRIBUTE = 93;
    public static readonly KW_DIV = 94;
    public static readonly KW_DOUBLE = 95;
    public static readonly KW_DROP = 96;
    public static readonly KW_ELSE = 97;
    public static readonly KW_ENABLE = 98;
    public static readonly KW_END = 99;
    public static readonly KW_ESCAPE = 100;
    public static readonly KW_ESCAPED = 101;
    public static readonly KW_EXCEPT = 102;
    public static readonly KW_EXCHANGE = 103;
    public static readonly KW_EXCLUDE = 104;
    public static readonly KW_EXISTS = 105;
    public static readonly KW_EXPLAIN = 106;
    public static readonly KW_EXPORT = 107;
    public static readonly KW_EXTENDED = 108;
    public static readonly KW_EXTERNAL = 109;
    public static readonly KW_EXTRACT = 110;
    public static readonly KW_FALSE = 111;
    public static readonly KW_FETCH = 112;
    public static readonly KW_FIELDS = 113;
    public static readonly KW_FILTER = 114;
    public static readonly KW_FILEFORMAT = 115;
    public static readonly KW_FIRST = 116;
    public static readonly KW_FLOAT = 117;
    public static readonly KW_FOLLOWING = 118;
    public static readonly KW_FOR = 119;
    public static readonly KW_FOREIGN = 120;
    public static readonly KW_FORMAT = 121;
    public static readonly KW_FORMATTED = 122;
    public static readonly KW_FROM = 123;
    public static readonly KW_FULL = 124;
    public static readonly KW_FUNCTION = 125;
    public static readonly KW_FUNCTIONS = 126;
    public static readonly KW_GENERATED = 127;
    public static readonly KW_GLOBAL = 128;
    public static readonly KW_GRANT = 129;
    public static readonly KW_GROUP = 130;
    public static readonly KW_GROUPING = 131;
    public static readonly KW_HAVING = 132;
    public static readonly KW_BINARY_HEX = 133;
    public static readonly KW_HOUR = 134;
    public static readonly KW_HOURS = 135;
    public static readonly KW_IDENTIFIER = 136;
    public static readonly KW_IF = 137;
    public static readonly KW_IGNORE = 138;
    public static readonly KW_IMPORT = 139;
    public static readonly KW_IN = 140;
    public static readonly KW_INCLUDE = 141;
    public static readonly KW_INDEX = 142;
    public static readonly KW_INDEXES = 143;
    public static readonly KW_INNER = 144;
    public static readonly KW_INPATH = 145;
    public static readonly KW_INPUTFORMAT = 146;
    public static readonly KW_INSERT = 147;
    public static readonly KW_INTERSECT = 148;
    public static readonly KW_INTERVAL = 149;
    public static readonly KW_INT = 150;
    public static readonly KW_INTEGER = 151;
    public static readonly KW_INTO = 152;
    public static readonly KW_IS = 153;
    public static readonly KW_ITEMS = 154;
    public static readonly KW_JOIN = 155;
    public static readonly KW_KEYS = 156;
    public static readonly KW_LAST = 157;
    public static readonly KW_LATERAL = 158;
    public static readonly KW_LAZY = 159;
    public static readonly KW_LEADING = 160;
    public static readonly KW_LEFT = 161;
    public static readonly KW_LIFECYCLE = 162;
    public static readonly KW_LIKE = 163;
    public static readonly KW_ILIKE = 164;
    public static readonly KW_LIMIT = 165;
    public static readonly KW_LINES = 166;
    public static readonly KW_LIST = 167;
    public static readonly KW_LOAD = 168;
    public static readonly KW_LOCAL = 169;
    public static readonly KW_LOCATION = 170;
    public static readonly KW_LOCK = 171;
    public static readonly KW_LOCKS = 172;
    public static readonly KW_LOGICAL = 173;
    public static readonly KW_LONG = 174;
    public static readonly KW_MACRO = 175;
    public static readonly KW_MAP = 176;
    public static readonly KW_MATCHED = 177;
    public static readonly KW_MERGE = 178;
    public static readonly KW_MICROSECOND = 179;
    public static readonly KW_MICROSECONDS = 180;
    public static readonly KW_MILLISECOND = 181;
    public static readonly KW_MILLISECONDS = 182;
    public static readonly KW_MINUTE = 183;
    public static readonly KW_MINUTES = 184;
    public static readonly KW_MONTH = 185;
    public static readonly KW_MONTHS = 186;
    public static readonly KW_MSCK = 187;
    public static readonly KW_NAME = 188;
    public static readonly KW_NAMESPACE = 189;
    public static readonly KW_NAMESPACES = 190;
    public static readonly KW_NANOSECOND = 191;
    public static readonly KW_NANOSECONDS = 192;
    public static readonly KW_NATURAL = 193;
    public static readonly KW_NO = 194;
    public static readonly KW_NOSCAN = 195;
    public static readonly KW_NOT = 196;
    public static readonly KW_NULL = 197;
    public static readonly KW_NULLS = 198;
    public static readonly KW_NUMERIC = 199;
    public static readonly KW_OF = 200;
    public static readonly KW_OFFSET = 201;
    public static readonly KW_ON = 202;
    public static readonly KW_ONLY = 203;
    public static readonly KW_OPTIMIZE = 204;
    public static readonly KW_OPTION = 205;
    public static readonly KW_OPTIONS = 206;
    public static readonly KW_OR = 207;
    public static readonly KW_ORDER = 208;
    public static readonly KW_OUT = 209;
    public static readonly KW_OUTER = 210;
    public static readonly KW_OUTPUTFORMAT = 211;
    public static readonly KW_OVER = 212;
    public static readonly KW_OVERLAPS = 213;
    public static readonly KW_OVERLAY = 214;
    public static readonly KW_OVERWRITE = 215;
    public static readonly KW_PARTITION = 216;
    public static readonly KW_PARTITIONED = 217;
    public static readonly KW_PARTITIONS = 218;
    public static readonly KW_PERCENTILE_CONT = 219;
    public static readonly KW_PERCENTILE_DISC = 220;
    public static readonly KW_PERCENTLIT = 221;
    public static readonly KW_PIVOT = 222;
    public static readonly KW_PLACING = 223;
    public static readonly KW_POSITION = 224;
    public static readonly KW_PRECEDING = 225;
    public static readonly KW_PRIMARY = 226;
    public static readonly KW_PRINCIPALS = 227;
    public static readonly KW_PROPERTIES = 228;
    public static readonly KW_PURGE = 229;
    public static readonly KW_QUARTER = 230;
    public static readonly KW_QUERY = 231;
    public static readonly KW_RANGE = 232;
    public static readonly KW_REAL = 233;
    public static readonly KW_RECORDREADER = 234;
    public static readonly KW_RECORDWRITER = 235;
    public static readonly KW_RECOVER = 236;
    public static readonly KW_REDUCE = 237;
    public static readonly KW_REFERENCES = 238;
    public static readonly KW_REFRESH = 239;
    public static readonly KW_RENAME = 240;
    public static readonly KW_REPAIR = 241;
    public static readonly KW_REPEATABLE = 242;
    public static readonly KW_REPLACE = 243;
    public static readonly KW_RESET = 244;
    public static readonly KW_RESPECT = 245;
    public static readonly KW_RESTRICT = 246;
    public static readonly KW_REWRITE = 247;
    public static readonly KW_REVOKE = 248;
    public static readonly KW_RIGHT = 249;
    public static readonly KW_RLIKE = 250;
    public static readonly KW_REGEXP = 251;
    public static readonly KW_ROLE = 252;
    public static readonly KW_ROLES = 253;
    public static readonly KW_ROLLBACK = 254;
    public static readonly KW_ROLLUP = 255;
    public static readonly KW_ROW = 256;
    public static readonly KW_ROWS = 257;
    public static readonly KW_SECOND = 258;
    public static readonly KW_SECONDS = 259;
    public static readonly KW_SCHEMA = 260;
    public static readonly KW_SCHEMAS = 261;
    public static readonly KW_SELECT = 262;
    public static readonly KW_SEMI = 263;
    public static readonly KW_SEPARATED = 264;
    public static readonly KW_SERDE = 265;
    public static readonly KW_SERDEPROPERTIES = 266;
    public static readonly KW_SESSION_USER = 267;
    public static readonly KW_SET = 268;
    public static readonly KW_MINUS = 269;
    public static readonly KW_SETS = 270;
    public static readonly KW_SHORT = 271;
    public static readonly KW_SHOW = 272;
    public static readonly KW_SINGLE = 273;
    public static readonly KW_SKEWED = 274;
    public static readonly KW_SMALLINT = 275;
    public static readonly KW_SOME = 276;
    public static readonly KW_SORT = 277;
    public static readonly KW_SORTED = 278;
    public static readonly KW_SOURCE = 279;
    public static readonly KW_START = 280;
    public static readonly KW_STATISTICS = 281;
    public static readonly KW_STORED = 282;
    public static readonly KW_STRATIFY = 283;
    public static readonly KW_STRING = 284;
    public static readonly KW_STRUCT = 285;
    public static readonly KW_SUBSTR = 286;
    public static readonly KW_SUBSTRING = 287;
    public static readonly KW_SYNC = 288;
    public static readonly KW_SYSTEM = 289;
    public static readonly KW_SYSTEM_TIME = 290;
    public static readonly KW_SYSTEM_VERSION = 291;
    public static readonly KW_TABLE = 292;
    public static readonly KW_TABLES = 293;
    public static readonly KW_TABLESAMPLE = 294;
    public static readonly KW_TARGET = 295;
    public static readonly KW_TBLPROPERTIES = 296;
    public static readonly KW_TEMPORARY = 297;
    public static readonly KW_TERMINATED = 298;
    public static readonly KW_THEN = 299;
    public static readonly KW_TIME = 300;
    public static readonly KW_TIMEDIFF = 301;
    public static readonly KW_TIMESTAMP = 302;
    public static readonly KW_TIMESTAMP_LTZ = 303;
    public static readonly KW_TIMESTAMP_NTZ = 304;
    public static readonly KW_TIMESTAMPADD = 305;
    public static readonly KW_TIMESTAMPDIFF = 306;
    public static readonly KW_TINYINT = 307;
    public static readonly KW_TO = 308;
    public static readonly KW_TOUCH = 309;
    public static readonly KW_TRAILING = 310;
    public static readonly KW_TRANSACTION = 311;
    public static readonly KW_TRANSACTIONS = 312;
    public static readonly KW_TRANSFORM = 313;
    public static readonly KW_TRIM = 314;
    public static readonly KW_TRUE = 315;
    public static readonly KW_TRUNCATE = 316;
    public static readonly KW_TRY_CAST = 317;
    public static readonly KW_TYPE = 318;
    public static readonly KW_UNARCHIVE = 319;
    public static readonly KW_UNBOUNDED = 320;
    public static readonly KW_UNCACHE = 321;
    public static readonly KW_UNION = 322;
    public static readonly KW_UNIQUE = 323;
    public static readonly KW_UNKNOWN = 324;
    public static readonly KW_UNLOCK = 325;
    public static readonly KW_UNPIVOT = 326;
    public static readonly KW_UNSET = 327;
    public static readonly KW_UPDATE = 328;
    public static readonly KW_USE = 329;
    public static readonly KW_USER = 330;
    public static readonly KW_USING = 331;
    public static readonly KW_VALUES = 332;
    public static readonly KW_VARCHAR = 333;
    public static readonly KW_VAR = 334;
    public static readonly KW_VARIABLE = 335;
    public static readonly KW_VERSION = 336;
    public static readonly KW_VIEW = 337;
    public static readonly KW_VIEWS = 338;
    public static readonly KW_VOID = 339;
    public static readonly KW_WEEK = 340;
    public static readonly KW_WEEKS = 341;
    public static readonly KW_WHEN = 342;
    public static readonly KW_WHERE = 343;
    public static readonly KW_WINDOW = 344;
    public static readonly KW_WITH = 345;
    public static readonly KW_WITHIN = 346;
    public static readonly KW_YEAR = 347;
    public static readonly KW_YEARS = 348;
    public static readonly KW_ZONE = 349;
    public static readonly KW_ZORDER = 350;
    public static readonly EQ = 351;
    public static readonly NSEQ = 352;
    public static readonly NEQ = 353;
    public static readonly NEQJ = 354;
    public static readonly LT = 355;
    public static readonly LTE = 356;
    public static readonly GT = 357;
    public static readonly GTE = 358;
    public static readonly NOT = 359;
    public static readonly PLUS = 360;
    public static readonly MINUS = 361;
    public static readonly ASTERISK = 362;
    public static readonly SLASH = 363;
    public static readonly PERCENT = 364;
    public static readonly TILDE = 365;
    public static readonly AMPERSAND = 366;
    public static readonly PIPE = 367;
    public static readonly CONCAT_PIPE = 368;
    public static readonly HAT = 369;
    public static readonly COLON = 370;
    public static readonly ARROW = 371;
    public static readonly FAT_ARROW = 372;
    public static readonly HENT_START = 373;
    public static readonly HENT_END = 374;
    public static readonly QUESTION = 375;
    public static readonly STRING_LITERAL = 376;
    public static readonly DOUBLEQUOTED_STRING = 377;
    public static readonly BIGINT_LITERAL = 378;
    public static readonly SMALLINT_LITERAL = 379;
    public static readonly TINYINT_LITERAL = 380;
    public static readonly INTEGER_VALUE = 381;
    public static readonly EXPONENT_VALUE = 382;
    public static readonly DECIMAL_VALUE = 383;
    public static readonly FLOAT_LITERAL = 384;
    public static readonly DOUBLE_LITERAL = 385;
    public static readonly BIGDECIMAL_LITERAL = 386;
    public static readonly IDENTIFIER = 387;
    public static readonly BACKQUOTED_IDENTIFIER = 388;
    public static readonly SIMPLE_COMMENT = 389;
    public static readonly BRACKETED_COMMENT = 390;
    public static readonly WS = 391;
    public static readonly UNRECOGNIZED = 392;
    public static readonly RULE_program = 0;
    public static readonly RULE_singleStatement = 1;
    public static readonly RULE_statement = 2;
    public static readonly RULE_alterStatement = 3;
    public static readonly RULE_createStatement = 4;
    public static readonly RULE_dropStatement = 5;
    public static readonly RULE_dmlStatementNoWith = 6;
    public static readonly RULE_insertInto = 7;
    public static readonly RULE_showStatement = 8;
    public static readonly RULE_unsupportedCommands = 9;
    public static readonly RULE_bucketSpec = 10;
    public static readonly RULE_skewSpec = 11;
    public static readonly RULE_query = 12;
    public static readonly RULE_partitionSpecLocation = 13;
    public static readonly RULE_partitionSpec = 14;
    public static readonly RULE_partitionVal = 15;
    public static readonly RULE_namespace = 16;
    public static readonly RULE_describeFuncName = 17;
    public static readonly RULE_describeColName = 18;
    public static readonly RULE_ctes = 19;
    public static readonly RULE_namedQuery = 20;
    public static readonly RULE_tableProvider = 21;
    public static readonly RULE_createTableClauses = 22;
    public static readonly RULE_tableLifecycle = 23;
    public static readonly RULE_propertyList = 24;
    public static readonly RULE_property = 25;
    public static readonly RULE_propertyKey = 26;
    public static readonly RULE_propertyValue = 27;
    public static readonly RULE_expressionPropertyList = 28;
    public static readonly RULE_expressionProperty = 29;
    public static readonly RULE_constantList = 30;
    public static readonly RULE_nestedConstantList = 31;
    public static readonly RULE_createFileFormat = 32;
    public static readonly RULE_fileFormat = 33;
    public static readonly RULE_storageHandler = 34;
    public static readonly RULE_namespaceName = 35;
    public static readonly RULE_namespaceNameCreate = 36;
    public static readonly RULE_tableNameCreate = 37;
    public static readonly RULE_tableName = 38;
    public static readonly RULE_viewNameCreate = 39;
    public static readonly RULE_viewName = 40;
    public static readonly RULE_columnName = 41;
    public static readonly RULE_columnNameSeq = 42;
    public static readonly RULE_columnNameCreate = 43;
    public static readonly RULE_identifierReference = 44;
    public static readonly RULE_queryOrganization = 45;
    public static readonly RULE_queryTerm = 46;
    public static readonly RULE_queryPrimary = 47;
    public static readonly RULE_sortItem = 48;
    public static readonly RULE_fromStatementBody = 49;
    public static readonly RULE_querySpecification = 50;
    public static readonly RULE_transformClause = 51;
    public static readonly RULE_selectClause = 52;
    public static readonly RULE_setClause = 53;
    public static readonly RULE_matchedClause = 54;
    public static readonly RULE_notMatchedClause = 55;
    public static readonly RULE_notMatchedBySourceClause = 56;
    public static readonly RULE_notMatchedAction = 57;
    public static readonly RULE_assignmentList = 58;
    public static readonly RULE_assignment = 59;
    public static readonly RULE_whereClause = 60;
    public static readonly RULE_havingClause = 61;
    public static readonly RULE_hint = 62;
    public static readonly RULE_hintStatement = 63;
    public static readonly RULE_fromClause = 64;
    public static readonly RULE_temporalClause = 65;
    public static readonly RULE_aggregationClause = 66;
    public static readonly RULE_groupByClause = 67;
    public static readonly RULE_groupingAnalytics = 68;
    public static readonly RULE_groupingSet = 69;
    public static readonly RULE_pivotClause = 70;
    public static readonly RULE_pivotColumn = 71;
    public static readonly RULE_pivotValue = 72;
    public static readonly RULE_unpivotClause = 73;
    public static readonly RULE_unpivotSingleValueColumnClause = 74;
    public static readonly RULE_unpivotMultiValueColumnClause = 75;
    public static readonly RULE_unpivotColumnSet = 76;
    public static readonly RULE_unpivotColumnAndAlias = 77;
    public static readonly RULE_ifNotExists = 78;
    public static readonly RULE_ifExists = 79;
    public static readonly RULE_lateralView = 80;
    public static readonly RULE_setQuantifier = 81;
    public static readonly RULE_relation = 82;
    public static readonly RULE_joinRelation = 83;
    public static readonly RULE_joinType = 84;
    public static readonly RULE_joinCriteria = 85;
    public static readonly RULE_sample = 86;
    public static readonly RULE_sampleMethod = 87;
    public static readonly RULE_identifierList = 88;
    public static readonly RULE_identifierSeq = 89;
    public static readonly RULE_orderedIdentifierList = 90;
    public static readonly RULE_orderedIdentifier = 91;
    public static readonly RULE_identifierCommentList = 92;
    public static readonly RULE_identifierComment = 93;
    public static readonly RULE_relationPrimary = 94;
    public static readonly RULE_functionTableSubqueryArgument = 95;
    public static readonly RULE_tableArgumentPartitioning = 96;
    public static readonly RULE_functionTableNamedArgumentExpression = 97;
    public static readonly RULE_functionTableReferenceArgument = 98;
    public static readonly RULE_functionTableArgument = 99;
    public static readonly RULE_tableAlias = 100;
    public static readonly RULE_rowFormat = 101;
    public static readonly RULE_multipartIdentifierList = 102;
    public static readonly RULE_multipartIdentifier = 103;
    public static readonly RULE_multipartIdentifierPropertyList = 104;
    public static readonly RULE_multipartIdentifierProperty = 105;
    public static readonly RULE_tableIdentifier = 106;
    public static readonly RULE_viewIdentifier = 107;
    public static readonly RULE_namedExpression = 108;
    public static readonly RULE_namedExpressionSeq = 109;
    public static readonly RULE_partitionFieldList = 110;
    public static readonly RULE_partitionField = 111;
    public static readonly RULE_transform = 112;
    public static readonly RULE_transformArgument = 113;
    public static readonly RULE_expression = 114;
    public static readonly RULE_namedArgumentExpression = 115;
    public static readonly RULE_functionArgument = 116;
    public static readonly RULE_expressionSeq = 117;
    public static readonly RULE_booleanExpression = 118;
    public static readonly RULE_predicate = 119;
    public static readonly RULE_valueExpression = 120;
    public static readonly RULE_datetimeUnit = 121;
    public static readonly RULE_primaryExpression = 122;
    public static readonly RULE_literalType = 123;
    public static readonly RULE_constant = 124;
    public static readonly RULE_comparisonOperator = 125;
    public static readonly RULE_arithmeticOperator = 126;
    public static readonly RULE_predicateOperator = 127;
    public static readonly RULE_booleanValue = 128;
    public static readonly RULE_interval = 129;
    public static readonly RULE_errorCapturingMultiUnitsInterval = 130;
    public static readonly RULE_errorCapturingUnitToUnitInterval = 131;
    public static readonly RULE_multiUnitsInterval = 132;
    public static readonly RULE_unitToUnitInterval = 133;
    public static readonly RULE_intervalValue = 134;
    public static readonly RULE_unitInMultiUnits = 135;
    public static readonly RULE_unitInUnitToUnit = 136;
    public static readonly RULE_colPosition = 137;
    public static readonly RULE_type = 138;
    public static readonly RULE_dataType = 139;
    public static readonly RULE_qualifiedColTypeWithPositionSeqForAdd = 140;
    public static readonly RULE_qualifiedColTypeWithPositionForAdd = 141;
    public static readonly RULE_qualifiedColTypeWithPositionSeqForReplace = 142;
    public static readonly RULE_qualifiedColTypeWithPositionForReplace = 143;
    public static readonly RULE_colDefinitionDescriptorWithPosition = 144;
    public static readonly RULE_variableDefaultExpression = 145;
    public static readonly RULE_colTypeList = 146;
    public static readonly RULE_columnType = 147;
    public static readonly RULE_createOrReplaceTableColTypeList = 148;
    public static readonly RULE_createOrReplaceTableColType = 149;
    public static readonly RULE_colDefinitionOption = 150;
    public static readonly RULE_complexColType = 151;
    public static readonly RULE_whenClause = 152;
    public static readonly RULE_windowClause = 153;
    public static readonly RULE_windowSpec = 154;
    public static readonly RULE_windowFrame = 155;
    public static readonly RULE_frameBound = 156;
    public static readonly RULE_qualifiedNameList = 157;
    public static readonly RULE_functionName = 158;
    public static readonly RULE_functionNameCreate = 159;
    public static readonly RULE_qualifiedName = 160;
    public static readonly RULE_errorCapturingIdentifier = 161;
    public static readonly RULE_errorCapturingIdentifierExtra = 162;
    public static readonly RULE_identifier = 163;
    public static readonly RULE_strictIdentifier = 164;
    public static readonly RULE_number = 165;
    public static readonly RULE_alterColumnAction = 166;
    public static readonly RULE_stringLit = 167;
    public static readonly RULE_ansiNonReserved = 168;
    public static readonly RULE_strictNonReserved = 169;
    public static readonly RULE_nonReserved = 170;

    public static readonly literalNames = [
        null, "';'", "'('", "')'", "','", "'.'", "'['", "']'", "'ADD'", 
        "'AFTER'", "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", 
        "'ANTI'", "'ANY'", "'ANY_VALUE'", "'ARCHIVE'", "'ARRAY'", "'AS'", 
        "'ASC'", "'AT'", "'AUTHORIZATION'", "'BETWEEN'", "'BIGINT'", "'BINARY'", 
        "'BOOLEAN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", "'BYTE'", 
        "'CACHE'", "'CASCADE'", "'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", 
        "'CHANGE'", "'CHAR'", "'CHARACTER'", "'CHECK'", "'CLEAR'", "'CLUSTER'", 
        "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", "'COLLECTION'", "'COLUMN'", 
        "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", 
        "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'", "'CREATE'", 
        "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
        "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DAY'", "'DAYS'", "'DAYOFYEAR'", 
        "'DATA'", "'DATE'", "'DATABASE'", "'DATABASES'", "'DATEADD'", "'DATE_ADD'", 
        "'DATEDIFF'", "'DATE_DIFF'", "'DBPROPERTIES'", "'DEC'", "'DECIMAL'", 
        "'DECLARE'", "'DEFAULT'", "'DEFINED'", "'DELETE'", "'DELIMITED'", 
        "'DESC'", "'DESCRIBE'", "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", 
        "'DISABLE'", "'DISTINCT'", "'DISTRIBUTE'", "'DIV'", "'DOUBLE'", 
        "'DROP'", "'ELSE'", "'ENABLE'", "'END'", "'ESCAPE'", "'ESCAPED'", 
        "'EXCEPT'", "'EXCHANGE'", "'EXCLUDE'", "'EXISTS'", "'EXPLAIN'", 
        "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FALSE'", 
        "'FETCH'", "'FIELDS'", "'FILTER'", "'FILEFORMAT'", "'FIRST'", "'FLOAT'", 
        "'FOLLOWING'", "'FOR'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", 
        "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GENERATED'", 
        "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", "'X'", 
        "'HOUR'", "'HOURS'", "'IDENTIFIER'", "'IF'", "'IGNORE'", "'IMPORT'", 
        "'IN'", "'INCLUDE'", "'INDEX'", "'INDEXES'", "'INNER'", "'INPATH'", 
        "'INPUTFORMAT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INT'", 
        "'INTEGER'", "'INTO'", "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", "'LAST'", 
        "'LATERAL'", "'LAZY'", "'LEADING'", "'LEFT'", "'LIFECYCLE'", "'LIKE'", 
        "'ILIKE'", "'LIMIT'", "'LINES'", "'LIST'", "'LOAD'", "'LOCAL'", 
        "'LOCATION'", "'LOCK'", "'LOCKS'", "'LOGICAL'", "'LONG'", "'MACRO'", 
        "'MAP'", "'MATCHED'", "'MERGE'", "'MICROSECOND'", "'MICROSECONDS'", 
        "'MILLISECOND'", "'MILLISECONDS'", "'MINUTE'", "'MINUTES'", "'MONTH'", 
        "'MONTHS'", "'MSCK'", "'NAME'", "'NAMESPACE'", "'NAMESPACES'", "'NANOSECOND'", 
        "'NANOSECONDS'", "'NATURAL'", "'NO'", "'NOSCAN'", "'NOT'", "'NULL'", 
        "'NULLS'", "'NUMERIC'", "'OF'", "'OFFSET'", "'ON'", "'ONLY'", "'OPTIMIZE'", 
        "'OPTION'", "'OPTIONS'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", 
        "'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", 
        "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENTILE_CONT'", 
        "'PERCENTILE_DISC'", "'PERCENT'", "'PIVOT'", "'PLACING'", "'POSITION'", 
        "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'", "'PROPERTIES'", "'PURGE'", 
        "'QUARTER'", "'QUERY'", "'RANGE'", "'REAL'", "'RECORDREADER'", "'RECORDWRITER'", 
        "'RECOVER'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", "'RENAME'", 
        "'REPAIR'", "'REPEATABLE'", "'REPLACE'", "'RESET'", "'RESPECT'", 
        "'RESTRICT'", "'REWRITE'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'REGEXP'", 
        "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", 
        "'SECOND'", "'SECONDS'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SEMI'", 
        "'SEPARATED'", "'SERDE'", "'SERDEPROPERTIES'", "'SESSION_USER'", 
        "'SET'", "'MINUS'", "'SETS'", "'SHORT'", "'SHOW'", "'SINGLE'", "'SKEWED'", 
        "'SMALLINT'", "'SOME'", "'SORT'", "'SORTED'", "'SOURCE'", "'START'", 
        "'STATISTICS'", "'STORED'", "'STRATIFY'", "'STRING'", "'STRUCT'", 
        "'SUBSTR'", "'SUBSTRING'", "'SYNC'", "'SYSTEM'", "'SYSTEM_TIME'", 
        "'SYSTEM_VERSION'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TARGET'", 
        "'TBLPROPERTIES'", "'TEMPORARY'", "'TERMINATED'", "'THEN'", "'TIME'", 
        "'TIMEDIFF'", "'TIMESTAMP'", "'TIMESTAMP_LTZ'", "'TIMESTAMP_NTZ'", 
        "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TINYINT'", "'TO'", "'TOUCH'", 
        "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", 
        "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UNARCHIVE'", 
        "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", 
        "'UNLOCK'", "'UNPIVOT'", "'UNSET'", "'UPDATE'", "'USE'", "'USER'", 
        "'USING'", "'VALUES'", "'VARCHAR'", "'VAR'", "'VARIABLE'", "'VERSION'", 
        "'VIEW'", "'VIEWS'", "'VOID'", "'WEEK'", "'WEEKS'", "'WHEN'", "'WHERE'", 
        "'WINDOW'", "'WITH'", "'WITHIN'", "'YEAR'", "'YEARS'", "'ZONE'", 
        "'ZORDER'", null, "'<=>'", "'<>'", "'!='", "'<'", null, "'>'", null, 
        "'!'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'|'", "'||'", 
        "'^'", "':'", "'->'", "'=>'", "'/*+'", "'*/'", "'?'"
    ];

    public static readonly symbolicNames = [
        null, "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "DOT", 
        "LEFT_BRACKET", "RIGHT_BRACKET", "KW_ADD", "KW_AFTER", "KW_ALL", 
        "KW_ALTER", "KW_ALWAYS", "KW_ANALYZE", "KW_AND", "KW_ANTI", "KW_ANY", 
        "KW_ANY_VALUE", "KW_ARCHIVE", "KW_ARRAY", "KW_AS", "KW_ASC", "KW_AT", 
        "KW_AUTHORIZATION", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", "KW_BOOLEAN", 
        "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_BYTE", "KW_CACHE", 
        "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CATALOG", "KW_CATALOGS", 
        "KW_CHANGE", "KW_CHAR", "KW_CHARACTER", "KW_CHECK", "KW_CLEAR", 
        "KW_CLUSTER", "KW_CLUSTERED", "KW_CODEGEN", "KW_COLLATE", "KW_COLLECTION", 
        "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPACT", 
        "KW_COMPACTIONS", "KW_COMPUTE", "KW_CONCATENATE", "KW_CONSTRAINT", 
        "KW_COST", "KW_CREATE", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", 
        "KW_CURRENT_TIME", "KW_CURRENT_TIMESTAMP", "KW_CURRENT_USER", "KW_DAY", 
        "KW_DAYS", "KW_DAYOFYEAR", "KW_DATA", "KW_DATE", "KW_DATABASE", 
        "KW_DATABASES", "KW_DATEADD", "KW_DATE_ADD", "KW_DATEDIFF", "KW_DATE_DIFF", 
        "KW_DBPROPERTIES", "KW_DEC", "KW_DECIMAL", "KW_DECLARE", "KW_DEFAULT", 
        "KW_DEFINED", "KW_DELETE", "KW_DELIMITED", "KW_DESC", "KW_DESCRIBE", 
        "KW_DFS", "KW_DIRECTORIES", "KW_DIRECTORY", "KW_DISABLE", "KW_DISTINCT", 
        "KW_DISTRIBUTE", "KW_DIV", "KW_DOUBLE", "KW_DROP", "KW_ELSE", "KW_ENABLE", 
        "KW_END", "KW_ESCAPE", "KW_ESCAPED", "KW_EXCEPT", "KW_EXCHANGE", 
        "KW_EXCLUDE", "KW_EXISTS", "KW_EXPLAIN", "KW_EXPORT", "KW_EXTENDED", 
        "KW_EXTERNAL", "KW_EXTRACT", "KW_FALSE", "KW_FETCH", "KW_FIELDS", 
        "KW_FILTER", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", "KW_FOLLOWING", 
        "KW_FOR", "KW_FOREIGN", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", 
        "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS", "KW_GENERATED", "KW_GLOBAL", 
        "KW_GRANT", "KW_GROUP", "KW_GROUPING", "KW_HAVING", "KW_BINARY_HEX", 
        "KW_HOUR", "KW_HOURS", "KW_IDENTIFIER", "KW_IF", "KW_IGNORE", "KW_IMPORT", 
        "KW_IN", "KW_INCLUDE", "KW_INDEX", "KW_INDEXES", "KW_INNER", "KW_INPATH", 
        "KW_INPUTFORMAT", "KW_INSERT", "KW_INTERSECT", "KW_INTERVAL", "KW_INT", 
        "KW_INTEGER", "KW_INTO", "KW_IS", "KW_ITEMS", "KW_JOIN", "KW_KEYS", 
        "KW_LAST", "KW_LATERAL", "KW_LAZY", "KW_LEADING", "KW_LEFT", "KW_LIFECYCLE", 
        "KW_LIKE", "KW_ILIKE", "KW_LIMIT", "KW_LINES", "KW_LIST", "KW_LOAD", 
        "KW_LOCAL", "KW_LOCATION", "KW_LOCK", "KW_LOCKS", "KW_LOGICAL", 
        "KW_LONG", "KW_MACRO", "KW_MAP", "KW_MATCHED", "KW_MERGE", "KW_MICROSECOND", 
        "KW_MICROSECONDS", "KW_MILLISECOND", "KW_MILLISECONDS", "KW_MINUTE", 
        "KW_MINUTES", "KW_MONTH", "KW_MONTHS", "KW_MSCK", "KW_NAME", "KW_NAMESPACE", 
        "KW_NAMESPACES", "KW_NANOSECOND", "KW_NANOSECONDS", "KW_NATURAL", 
        "KW_NO", "KW_NOSCAN", "KW_NOT", "KW_NULL", "KW_NULLS", "KW_NUMERIC", 
        "KW_OF", "KW_OFFSET", "KW_ON", "KW_ONLY", "KW_OPTIMIZE", "KW_OPTION", 
        "KW_OPTIONS", "KW_OR", "KW_ORDER", "KW_OUT", "KW_OUTER", "KW_OUTPUTFORMAT", 
        "KW_OVER", "KW_OVERLAPS", "KW_OVERLAY", "KW_OVERWRITE", "KW_PARTITION", 
        "KW_PARTITIONED", "KW_PARTITIONS", "KW_PERCENTILE_CONT", "KW_PERCENTILE_DISC", 
        "KW_PERCENTLIT", "KW_PIVOT", "KW_PLACING", "KW_POSITION", "KW_PRECEDING", 
        "KW_PRIMARY", "KW_PRINCIPALS", "KW_PROPERTIES", "KW_PURGE", "KW_QUARTER", 
        "KW_QUERY", "KW_RANGE", "KW_REAL", "KW_RECORDREADER", "KW_RECORDWRITER", 
        "KW_RECOVER", "KW_REDUCE", "KW_REFERENCES", "KW_REFRESH", "KW_RENAME", 
        "KW_REPAIR", "KW_REPEATABLE", "KW_REPLACE", "KW_RESET", "KW_RESPECT", 
        "KW_RESTRICT", "KW_REWRITE", "KW_REVOKE", "KW_RIGHT", "KW_RLIKE", 
        "KW_REGEXP", "KW_ROLE", "KW_ROLES", "KW_ROLLBACK", "KW_ROLLUP", 
        "KW_ROW", "KW_ROWS", "KW_SECOND", "KW_SECONDS", "KW_SCHEMA", "KW_SCHEMAS", 
        "KW_SELECT", "KW_SEMI", "KW_SEPARATED", "KW_SERDE", "KW_SERDEPROPERTIES", 
        "KW_SESSION_USER", "KW_SET", "KW_MINUS", "KW_SETS", "KW_SHORT", 
        "KW_SHOW", "KW_SINGLE", "KW_SKEWED", "KW_SMALLINT", "KW_SOME", "KW_SORT", 
        "KW_SORTED", "KW_SOURCE", "KW_START", "KW_STATISTICS", "KW_STORED", 
        "KW_STRATIFY", "KW_STRING", "KW_STRUCT", "KW_SUBSTR", "KW_SUBSTRING", 
        "KW_SYNC", "KW_SYSTEM", "KW_SYSTEM_TIME", "KW_SYSTEM_VERSION", "KW_TABLE", 
        "KW_TABLES", "KW_TABLESAMPLE", "KW_TARGET", "KW_TBLPROPERTIES", 
        "KW_TEMPORARY", "KW_TERMINATED", "KW_THEN", "KW_TIME", "KW_TIMEDIFF", 
        "KW_TIMESTAMP", "KW_TIMESTAMP_LTZ", "KW_TIMESTAMP_NTZ", "KW_TIMESTAMPADD", 
        "KW_TIMESTAMPDIFF", "KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRAILING", 
        "KW_TRANSACTION", "KW_TRANSACTIONS", "KW_TRANSFORM", "KW_TRIM", 
        "KW_TRUE", "KW_TRUNCATE", "KW_TRY_CAST", "KW_TYPE", "KW_UNARCHIVE", 
        "KW_UNBOUNDED", "KW_UNCACHE", "KW_UNION", "KW_UNIQUE", "KW_UNKNOWN", 
        "KW_UNLOCK", "KW_UNPIVOT", "KW_UNSET", "KW_UPDATE", "KW_USE", "KW_USER", 
        "KW_USING", "KW_VALUES", "KW_VARCHAR", "KW_VAR", "KW_VARIABLE", 
        "KW_VERSION", "KW_VIEW", "KW_VIEWS", "KW_VOID", "KW_WEEK", "KW_WEEKS", 
        "KW_WHEN", "KW_WHERE", "KW_WINDOW", "KW_WITH", "KW_WITHIN", "KW_YEAR", 
        "KW_YEARS", "KW_ZONE", "KW_ZORDER", "EQ", "NSEQ", "NEQ", "NEQJ", 
        "LT", "LTE", "GT", "GTE", "NOT", "PLUS", "MINUS", "ASTERISK", "SLASH", 
        "PERCENT", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", "HAT", "COLON", 
        "ARROW", "FAT_ARROW", "HENT_START", "HENT_END", "QUESTION", "STRING_LITERAL", 
        "DOUBLEQUOTED_STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", "TINYINT_LITERAL", 
        "INTEGER_VALUE", "EXPONENT_VALUE", "DECIMAL_VALUE", "FLOAT_LITERAL", 
        "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
        "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED"
    ];
    public static readonly ruleNames = [
        "program", "singleStatement", "statement", "alterStatement", "createStatement", 
        "dropStatement", "dmlStatementNoWith", "insertInto", "showStatement", 
        "unsupportedCommands", "bucketSpec", "skewSpec", "query", "partitionSpecLocation", 
        "partitionSpec", "partitionVal", "namespace", "describeFuncName", 
        "describeColName", "ctes", "namedQuery", "tableProvider", "createTableClauses", 
        "tableLifecycle", "propertyList", "property", "propertyKey", "propertyValue", 
        "expressionPropertyList", "expressionProperty", "constantList", 
        "nestedConstantList", "createFileFormat", "fileFormat", "storageHandler", 
        "namespaceName", "namespaceNameCreate", "tableNameCreate", "tableName", 
        "viewNameCreate", "viewName", "columnName", "columnNameSeq", "columnNameCreate", 
        "identifierReference", "queryOrganization", "queryTerm", "queryPrimary", 
        "sortItem", "fromStatementBody", "querySpecification", "transformClause", 
        "selectClause", "setClause", "matchedClause", "notMatchedClause", 
        "notMatchedBySourceClause", "notMatchedAction", "assignmentList", 
        "assignment", "whereClause", "havingClause", "hint", "hintStatement", 
        "fromClause", "temporalClause", "aggregationClause", "groupByClause", 
        "groupingAnalytics", "groupingSet", "pivotClause", "pivotColumn", 
        "pivotValue", "unpivotClause", "unpivotSingleValueColumnClause", 
        "unpivotMultiValueColumnClause", "unpivotColumnSet", "unpivotColumnAndAlias", 
        "ifNotExists", "ifExists", "lateralView", "setQuantifier", "relation", 
        "joinRelation", "joinType", "joinCriteria", "sample", "sampleMethod", 
        "identifierList", "identifierSeq", "orderedIdentifierList", "orderedIdentifier", 
        "identifierCommentList", "identifierComment", "relationPrimary", 
        "functionTableSubqueryArgument", "tableArgumentPartitioning", "functionTableNamedArgumentExpression", 
        "functionTableReferenceArgument", "functionTableArgument", "tableAlias", 
        "rowFormat", "multipartIdentifierList", "multipartIdentifier", "multipartIdentifierPropertyList", 
        "multipartIdentifierProperty", "tableIdentifier", "viewIdentifier", 
        "namedExpression", "namedExpressionSeq", "partitionFieldList", "partitionField", 
        "transform", "transformArgument", "expression", "namedArgumentExpression", 
        "functionArgument", "expressionSeq", "booleanExpression", "predicate", 
        "valueExpression", "datetimeUnit", "primaryExpression", "literalType", 
        "constant", "comparisonOperator", "arithmeticOperator", "predicateOperator", 
        "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
        "errorCapturingUnitToUnitInterval", "multiUnitsInterval", "unitToUnitInterval", 
        "intervalValue", "unitInMultiUnits", "unitInUnitToUnit", "colPosition", 
        "type", "dataType", "qualifiedColTypeWithPositionSeqForAdd", "qualifiedColTypeWithPositionForAdd", 
        "qualifiedColTypeWithPositionSeqForReplace", "qualifiedColTypeWithPositionForReplace", 
        "colDefinitionDescriptorWithPosition", "variableDefaultExpression", 
        "colTypeList", "columnType", "createOrReplaceTableColTypeList", 
        "createOrReplaceTableColType", "colDefinitionOption", "complexColType", 
        "whenClause", "windowClause", "windowSpec", "windowFrame", "frameBound", 
        "qualifiedNameList", "functionName", "functionNameCreate", "qualifiedName", 
        "errorCapturingIdentifier", "errorCapturingIdentifierExtra", "identifier", 
        "strictIdentifier", "number", "alterColumnAction", "stringLit", 
        "ansiNonReserved", "strictNonReserved", "nonReserved",
    ];

    public get grammarFileName(): string { return "SqlParser.g4"; }
    public get literalNames(): (string | null)[] { return SqlParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return SqlParser.symbolicNames; }
    public get ruleNames(): string[] { return SqlParser.ruleNames; }
    public get serializedATN(): number[] { return SqlParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, SqlParser._ATN, SqlParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public program(): ProgramContext {
        let localContext = new ProgramContext(this.context, this.state);
        this.enterRule(localContext, 0, SqlParser.RULE_program);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 345;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 10500) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 67896321) !== 0) || ((((_la - 81)) & ~0x1F) === 0 && ((1 << (_la - 81)) & 100696297) !== 0) || ((((_la - 123)) & ~0x1F) === 0 && ((1 << (_la - 123)) & 16842817) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 1051155) !== 0) || _la === 204 || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & 2181171413) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 1048833) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & 536949281) !== 0)) {
                {
                {
                this.state = 342;
                this.singleStatement();
                }
                }
                this.state = 347;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 348;
            this.match(SqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleStatement(): SingleStatementContext {
        let localContext = new SingleStatementContext(this.context, this.state);
        this.enterRule(localContext, 2, SqlParser.RULE_singleStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 350;
            this.statement();
            this.state = 352;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1) {
                {
                this.state = 351;
                this.match(SqlParser.SEMICOLON);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 4, SqlParser.RULE_statement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 571;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 40, this.context) ) {
            case 1:
                localContext = new StatementDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 354;
                this.query();
                }
                break;
            case 2:
                localContext = new DmlStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 356;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 345) {
                    {
                    this.state = 355;
                    this.ctes();
                    }
                }

                this.state = 358;
                this.dmlStatementNoWith();
                }
                break;
            case 3:
                localContext = new UseNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 359;
                this.match(SqlParser.KW_USE);
                this.state = 361;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
                case 1:
                    {
                    this.state = 360;
                    this.namespace();
                    }
                    break;
                }
                this.state = 363;
                this.namespaceName();
                }
                break;
            case 4:
                localContext = new AlterContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 364;
                this.alterStatement();
                }
                break;
            case 5:
                localContext = new CreateContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 365;
                this.createStatement();
                }
                break;
            case 6:
                localContext = new DropContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 366;
                this.dropStatement();
                }
                break;
            case 7:
                localContext = new ShowContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 367;
                this.showStatement();
                }
                break;
            case 8:
                localContext = new TruncateTableContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 368;
                this.match(SqlParser.KW_TRUNCATE);
                this.state = 369;
                this.match(SqlParser.KW_TABLE);
                this.state = 370;
                this.tableName();
                this.state = 372;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 371;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 9:
                localContext = new AnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 374;
                this.match(SqlParser.KW_ANALYZE);
                this.state = 375;
                this.match(SqlParser.KW_TABLE);
                this.state = 376;
                this.tableName();
                this.state = 378;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 377;
                    this.partitionSpec();
                    }
                }

                this.state = 380;
                this.match(SqlParser.KW_COMPUTE);
                this.state = 381;
                this.match(SqlParser.KW_STATISTICS);
                this.state = 389;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 6, this.context) ) {
                case 1:
                    {
                    this.state = 382;
                    this.match(SqlParser.KW_NOSCAN);
                    }
                    break;
                case 2:
                    {
                    this.state = 383;
                    this.match(SqlParser.KW_FOR);
                    this.state = 384;
                    this.match(SqlParser.KW_COLUMNS);
                    this.state = 385;
                    this.columnNameSeq();
                    }
                    break;
                case 3:
                    {
                    this.state = 386;
                    this.match(SqlParser.KW_FOR);
                    this.state = 387;
                    this.match(SqlParser.KW_ALL);
                    this.state = 388;
                    this.match(SqlParser.KW_COLUMNS);
                    }
                    break;
                }
                }
                break;
            case 10:
                localContext = new AnalyzeTablesContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 391;
                this.match(SqlParser.KW_ANALYZE);
                this.state = 392;
                this.match(SqlParser.KW_TABLES);
                this.state = 395;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 123 || _la === 140) {
                    {
                    this.state = 393;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 394;
                    this.namespaceName();
                    }
                }

                this.state = 397;
                this.match(SqlParser.KW_COMPUTE);
                this.state = 398;
                this.match(SqlParser.KW_STATISTICS);
                this.state = 400;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 399;
                    this.match(SqlParser.KW_NOSCAN);
                    }
                }

                }
                break;
            case 11:
                localContext = new DeclareVariableContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 402;
                this.match(SqlParser.KW_DECLARE);
                this.state = 405;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
                case 1:
                    {
                    this.state = 403;
                    this.match(SqlParser.KW_OR);
                    this.state = 404;
                    this.match(SqlParser.KW_REPLACE);
                    }
                    break;
                }
                this.state = 408;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 10, this.context) ) {
                case 1:
                    {
                    this.state = 407;
                    this.match(SqlParser.KW_VARIABLE);
                    }
                    break;
                }
                this.state = 410;
                this.functionName();
                this.state = 412;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 11, this.context) ) {
                case 1:
                    {
                    this.state = 411;
                    this.dataType();
                    }
                    break;
                }
                this.state = 415;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82 || _la === 351) {
                    {
                    this.state = 414;
                    this.variableDefaultExpression();
                    }
                }

                }
                break;
            case 12:
                localContext = new ExplainStatementContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 417;
                this.match(SqlParser.KW_EXPLAIN);
                this.state = 419;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46 || _la === 58 || _la === 108 || _la === 122 || _la === 173) {
                    {
                    this.state = 418;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 46 || _la === 58 || _la === 108 || _la === 122 || _la === 173)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 421;
                this.statement();
                }
                break;
            case 13:
                localContext = new DescribeFunctionContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 422;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 423;
                this.match(SqlParser.KW_FUNCTION);
                this.state = 425;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 14, this.context) ) {
                case 1:
                    {
                    this.state = 424;
                    this.match(SqlParser.KW_EXTENDED);
                    }
                    break;
                }
                this.state = 427;
                this.describeFuncName();
                }
                break;
            case 14:
                localContext = new DescribeNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 428;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 429;
                this.match(SqlParser.KW_DATABASE);
                this.state = 431;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
                case 1:
                    {
                    this.state = 430;
                    this.match(SqlParser.KW_EXTENDED);
                    }
                    break;
                }
                this.state = 433;
                this.namespaceName();
                }
                break;
            case 15:
                localContext = new DescribeQueryContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 434;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 436;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 231) {
                    {
                    this.state = 435;
                    this.match(SqlParser.KW_QUERY);
                    }
                }

                this.state = 438;
                this.query();
                }
                break;
            case 16:
                localContext = new DescribeRelationContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 439;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 441;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 292) {
                    {
                    this.state = 440;
                    this.match(SqlParser.KW_TABLE);
                    }
                }

                this.state = 444;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 18, this.context) ) {
                case 1:
                    {
                    this.state = 443;
                    (localContext as DescribeRelationContext)._option = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 108 || _la === 122)) {
                        (localContext as DescribeRelationContext)._option = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 446;
                this.tableName();
                this.state = 448;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 19, this.context) ) {
                case 1:
                    {
                    this.state = 447;
                    this.partitionSpec();
                    }
                    break;
                }
                this.state = 451;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 20, this.context) ) {
                case 1:
                    {
                    this.state = 450;
                    this.describeColName();
                    }
                    break;
                }
                }
                break;
            case 17:
                localContext = new CommentNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 453;
                this.match(SqlParser.KW_COMMENT);
                this.state = 454;
                this.match(SqlParser.KW_ON);
                this.state = 460;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_DATABASE:
                case SqlParser.KW_NAMESPACE:
                case SqlParser.KW_SCHEMA:
                    {
                    {
                    this.state = 455;
                    this.namespace();
                    this.state = 456;
                    this.namespaceName();
                    }
                    }
                    break;
                case SqlParser.KW_TABLE:
                    {
                    {
                    this.state = 458;
                    this.match(SqlParser.KW_TABLE);
                    this.state = 459;
                    this.tableName();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 462;
                this.match(SqlParser.KW_IS);
                this.state = 465;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.STRING_LITERAL:
                case SqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 463;
                    this.stringLit();
                    }
                    break;
                case SqlParser.KW_NULL:
                    {
                    this.state = 464;
                    this.match(SqlParser.KW_NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 18:
                localContext = new RefreshTableContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 467;
                this.match(SqlParser.KW_REFRESH);
                this.state = 468;
                this.match(SqlParser.KW_TABLE);
                this.state = 469;
                this.tableName();
                }
                break;
            case 19:
                localContext = new RefreshFunctionContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 470;
                this.match(SqlParser.KW_REFRESH);
                this.state = 471;
                this.match(SqlParser.KW_FUNCTION);
                this.state = 472;
                this.functionName();
                }
                break;
            case 20:
                localContext = new RefreshResourceContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 473;
                this.match(SqlParser.KW_REFRESH);
                this.state = 481;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context) ) {
                case 1:
                    {
                    this.state = 474;
                    this.stringLit();
                    }
                    break;
                case 2:
                    {
                    this.state = 478;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 23, this.context);
                    while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1 + 1) {
                            {
                            {
                            this.state = 475;
                            this.matchWildcard();
                            }
                            }
                        }
                        this.state = 480;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 23, this.context);
                    }
                    }
                    break;
                }
                }
                break;
            case 21:
                localContext = new CacheTableContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 483;
                this.match(SqlParser.KW_CACHE);
                this.state = 485;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 159) {
                    {
                    this.state = 484;
                    this.match(SqlParser.KW_LAZY);
                    }
                }

                this.state = 487;
                this.match(SqlParser.KW_TABLE);
                this.state = 488;
                this.tableName();
                this.state = 491;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206) {
                    {
                    this.state = 489;
                    this.match(SqlParser.KW_OPTIONS);
                    this.state = 490;
                    (localContext as CacheTableContext)._options = this.propertyList();
                    }
                }

                this.state = 497;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 28, this.context) ) {
                case 1:
                    {
                    this.state = 494;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 20) {
                        {
                        this.state = 493;
                        this.match(SqlParser.KW_AS);
                        }
                    }

                    this.state = 496;
                    this.query();
                    }
                    break;
                }
                }
                break;
            case 22:
                localContext = new UnCacheTableContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 499;
                this.match(SqlParser.KW_UNCACHE);
                this.state = 500;
                this.match(SqlParser.KW_TABLE);
                this.state = 502;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 29, this.context) ) {
                case 1:
                    {
                    this.state = 501;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 504;
                this.tableName();
                }
                break;
            case 23:
                localContext = new ClearCacheContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 505;
                this.match(SqlParser.KW_CLEAR);
                this.state = 506;
                this.match(SqlParser.KW_CACHE);
                }
                break;
            case 24:
                localContext = new LoadDataContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 507;
                this.match(SqlParser.KW_LOAD);
                this.state = 508;
                this.match(SqlParser.KW_DATA);
                this.state = 510;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 169) {
                    {
                    this.state = 509;
                    this.match(SqlParser.KW_LOCAL);
                    }
                }

                this.state = 512;
                this.match(SqlParser.KW_INPATH);
                this.state = 513;
                (localContext as LoadDataContext)._path = this.stringLit();
                this.state = 515;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 215) {
                    {
                    this.state = 514;
                    this.match(SqlParser.KW_OVERWRITE);
                    }
                }

                this.state = 517;
                this.match(SqlParser.KW_INTO);
                this.state = 518;
                this.match(SqlParser.KW_TABLE);
                this.state = 519;
                this.tableName();
                this.state = 521;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 520;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 25:
                localContext = new RepairTableContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 524;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 187) {
                    {
                    this.state = 523;
                    this.match(SqlParser.KW_MSCK);
                    }
                }

                this.state = 526;
                this.match(SqlParser.KW_REPAIR);
                this.state = 527;
                this.match(SqlParser.KW_TABLE);
                this.state = 528;
                this.tableName();
                this.state = 531;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
                case 1:
                    {
                    this.state = 529;
                    (localContext as RepairTableContext)._option = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 8 || _la === 96 || _la === 288)) {
                        (localContext as RepairTableContext)._option = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 530;
                    this.match(SqlParser.KW_PARTITIONS);
                    }
                    break;
                }
                }
                break;
            case 26:
                localContext = new ManageResourceContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 533;
                (localContext as ManageResourceContext)._op = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 8 || _la === 167)) {
                    (localContext as ManageResourceContext)._op = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 534;
                this.identifier();
                this.state = 538;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 35, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 535;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 540;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 35, this.context);
                }
                }
                break;
            case 27:
                localContext = new SetAnyContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 541;
                this.match(SqlParser.KW_SET);
                this.state = 545;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 36, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 542;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 547;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 36, this.context);
                }
                }
                break;
            case 28:
                localContext = new ResetAnyContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 548;
                this.match(SqlParser.KW_RESET);
                this.state = 552;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 37, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 549;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 554;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 37, this.context);
                }
                }
                break;
            case 29:
                localContext = new OptimizeTableContext(localContext);
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 555;
                this.match(SqlParser.KW_OPTIMIZE);
                this.state = 556;
                this.tableName();
                this.state = 558;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 343) {
                    {
                    this.state = 557;
                    this.whereClause();
                    }
                }

                this.state = 560;
                this.match(SqlParser.KW_ZORDER);
                this.state = 561;
                this.match(SqlParser.KW_BY);
                this.state = 562;
                this.columnNameSeq();
                }
                break;
            case 30:
                localContext = new UnsupportHiveCommandsContext(localContext);
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 564;
                this.unsupportedCommands();
                this.state = 568;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 39, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 565;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 570;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 39, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatement(): AlterStatementContext {
        let localContext = new AlterStatementContext(this.context, this.state);
        this.enterRule(localContext, 6, SqlParser.RULE_alterStatement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 895;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 96, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 573;
                this.match(SqlParser.KW_ALTER);
                this.state = 574;
                this.namespace();
                this.state = 575;
                this.namespaceName();
                this.state = 576;
                this.match(SqlParser.KW_SET);
                this.state = 581;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_DBPROPERTIES:
                case SqlParser.KW_PROPERTIES:
                    {
                    {
                    this.state = 577;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 78 || _la === 228)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 578;
                    this.propertyList();
                    }
                    }
                    break;
                case SqlParser.KW_LOCATION:
                    {
                    this.state = 579;
                    this.match(SqlParser.KW_LOCATION);
                    this.state = 580;
                    this.stringLit();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 583;
                this.match(SqlParser.KW_ALTER);
                this.state = 584;
                this.match(SqlParser.KW_TABLE);
                this.state = 585;
                this.tableName();
                this.state = 586;
                this.match(SqlParser.KW_ADD);
                this.state = 587;
                _la = this.tokenStream.LA(1);
                if(!(_la === 49 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 589;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 588;
                    this.match(SqlParser.LEFT_PAREN);
                    }
                }

                this.state = 593;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 43, this.context) ) {
                case 1:
                    {
                    this.state = 591;
                    this.qualifiedColTypeWithPositionForAdd();
                    }
                    break;
                case 2:
                    {
                    this.state = 592;
                    this.qualifiedColTypeWithPositionSeqForAdd();
                    }
                    break;
                }
                this.state = 596;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3) {
                    {
                    this.state = 595;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 598;
                this.match(SqlParser.KW_ALTER);
                this.state = 599;
                this.match(SqlParser.KW_TABLE);
                this.state = 600;
                this.tableName();
                this.state = 601;
                this.match(SqlParser.KW_DROP);
                this.state = 602;
                _la = this.tokenStream.LA(1);
                if(!(_la === 49 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 604;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 45, this.context) ) {
                case 1:
                    {
                    this.state = 603;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 607;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 46, this.context) ) {
                case 1:
                    {
                    this.state = 606;
                    this.match(SqlParser.LEFT_PAREN);
                    }
                    break;
                }
                this.state = 611;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 47, this.context) ) {
                case 1:
                    {
                    this.state = 609;
                    this.columnName();
                    }
                    break;
                case 2:
                    {
                    this.state = 610;
                    this.columnNameSeq();
                    }
                    break;
                }
                this.state = 614;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3) {
                    {
                    this.state = 613;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 616;
                this.match(SqlParser.KW_ALTER);
                this.state = 621;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_TABLE:
                    {
                    this.state = 617;
                    this.match(SqlParser.KW_TABLE);
                    this.state = 618;
                    this.tableName();
                    }
                    break;
                case SqlParser.KW_VIEW:
                    {
                    this.state = 619;
                    this.match(SqlParser.KW_VIEW);
                    this.state = 620;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 623;
                this.match(SqlParser.KW_RENAME);
                this.state = 626;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 49) {
                    {
                    this.state = 624;
                    this.match(SqlParser.KW_COLUMN);
                    this.state = 625;
                    this.columnName();
                    }
                }

                this.state = 628;
                this.match(SqlParser.KW_TO);
                this.state = 631;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 51, this.context) ) {
                case 1:
                    {
                    this.state = 629;
                    this.columnNameCreate();
                    }
                    break;
                case 2:
                    {
                    this.state = 630;
                    this.multipartIdentifier();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 633;
                this.match(SqlParser.KW_ALTER);
                this.state = 638;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_TABLE:
                    {
                    this.state = 634;
                    this.match(SqlParser.KW_TABLE);
                    this.state = 635;
                    this.tableName();
                    }
                    break;
                case SqlParser.KW_VIEW:
                    {
                    this.state = 636;
                    this.match(SqlParser.KW_VIEW);
                    this.state = 637;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 640;
                _la = this.tokenStream.LA(1);
                if(!(_la === 268 || _la === 327)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 641;
                this.match(SqlParser.KW_TBLPROPERTIES);
                this.state = 643;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 642;
                    this.ifExists();
                    }
                }

                this.state = 645;
                this.propertyList();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 647;
                this.match(SqlParser.KW_ALTER);
                this.state = 648;
                this.match(SqlParser.KW_TABLE);
                this.state = 649;
                localContext._table = this.tableName();
                this.state = 650;
                _la = this.tokenStream.LA(1);
                if(!(_la === 11 || _la === 39)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 652;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
                case 1:
                    {
                    this.state = 651;
                    this.match(SqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 654;
                localContext._column = this.columnName();
                this.state = 656;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 55, this.context) ) {
                case 1:
                    {
                    this.state = 655;
                    this.alterColumnAction();
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 658;
                this.match(SqlParser.KW_ALTER);
                this.state = 659;
                this.match(SqlParser.KW_TABLE);
                this.state = 660;
                localContext._table = this.tableName();
                this.state = 662;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 661;
                    this.partitionSpec();
                    }
                }

                this.state = 670;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_CHANGE:
                    {
                    {
                    this.state = 664;
                    this.match(SqlParser.KW_CHANGE);
                    this.state = 666;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 57, this.context) ) {
                    case 1:
                        {
                        this.state = 665;
                        this.match(SqlParser.KW_COLUMN);
                        }
                        break;
                    }
                    }
                    }
                    break;
                case SqlParser.KW_REPLACE:
                    {
                    {
                    this.state = 668;
                    this.match(SqlParser.KW_REPLACE);
                    this.state = 669;
                    this.match(SqlParser.KW_COLUMNS);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 681;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 60, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 672;
                    localContext._colName = this.columnName();
                    this.state = 673;
                    this.columnType();
                    this.state = 675;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 9 || _la === 116) {
                        {
                        this.state = 674;
                        this.colPosition();
                        }
                    }

                    }
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 677;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 678;
                    this.qualifiedColTypeWithPositionSeqForReplace();
                    this.state = 679;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 683;
                this.match(SqlParser.KW_ALTER);
                this.state = 688;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_TABLE:
                    {
                    this.state = 684;
                    this.match(SqlParser.KW_TABLE);
                    this.state = 685;
                    this.tableName();
                    }
                    break;
                case SqlParser.KW_VIEW:
                    {
                    this.state = 686;
                    this.match(SqlParser.KW_VIEW);
                    this.state = 687;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 690;
                _la = this.tokenStream.LA(1);
                if(!(_la === 8 || _la === 96)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 693;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 62, this.context) ) {
                case 1:
                    {
                    this.state = 691;
                    this.ifNotExists();
                    }
                    break;
                case 2:
                    {
                    this.state = 692;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 701;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 64, this.context) ) {
                case 1:
                    {
                    this.state = 696;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 695;
                        this.partitionSpecLocation();
                        }
                        }
                        this.state = 698;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 216);
                    }
                    break;
                case 2:
                    {
                    this.state = 700;
                    this.partitionSpec();
                    }
                    break;
                }
                this.state = 707;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 703;
                    this.match(SqlParser.COMMA);
                    this.state = 704;
                    this.partitionSpec();
                    }
                    }
                    this.state = 709;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 711;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 710;
                    this.match(SqlParser.KW_PURGE);
                    }
                }

                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 713;
                this.match(SqlParser.KW_ALTER);
                this.state = 714;
                this.match(SqlParser.KW_VIEW);
                this.state = 715;
                this.viewName();
                this.state = 717;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20) {
                    {
                    this.state = 716;
                    this.match(SqlParser.KW_AS);
                    }
                }

                this.state = 719;
                this.query();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 721;
                this.match(SqlParser.KW_ALTER);
                this.state = 722;
                this.match(SqlParser.KW_TABLE);
                this.state = 723;
                this.tableName();
                this.state = 725;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 724;
                    this.partitionSpec();
                    }
                }

                this.state = 727;
                this.match(SqlParser.KW_CHANGE);
                this.state = 729;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 69, this.context) ) {
                case 1:
                    {
                    this.state = 728;
                    this.match(SqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 731;
                this.columnName();
                this.state = 732;
                this.columnType();
                this.state = 734;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 9 || _la === 116) {
                    {
                    this.state = 733;
                    this.colPosition();
                    }
                }

                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 736;
                this.match(SqlParser.KW_ALTER);
                this.state = 737;
                this.match(SqlParser.KW_TABLE);
                this.state = 738;
                this.tableName();
                this.state = 740;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 739;
                    this.partitionSpec();
                    }
                }

                this.state = 742;
                this.match(SqlParser.KW_REPLACE);
                this.state = 743;
                this.match(SqlParser.KW_COLUMNS);
                this.state = 744;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 745;
                this.qualifiedColTypeWithPositionSeqForReplace();
                this.state = 746;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 748;
                this.match(SqlParser.KW_ALTER);
                this.state = 749;
                this.match(SqlParser.KW_TABLE);
                this.state = 750;
                this.tableName();
                this.state = 752;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 751;
                    this.partitionSpec();
                    }
                }

                this.state = 754;
                this.match(SqlParser.KW_SET);
                this.state = 757;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 170) {
                    {
                    this.state = 755;
                    this.match(SqlParser.KW_LOCATION);
                    this.state = 756;
                    this.stringLit();
                    }
                }

                this.state = 760;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 265) {
                    {
                    this.state = 759;
                    this.match(SqlParser.KW_SERDE);
                    }
                }

                this.state = 763;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 376 || _la === 377) {
                    {
                    this.state = 762;
                    this.stringLit();
                    }
                }

                this.state = 766;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 76, this.context) ) {
                case 1:
                    {
                    this.state = 765;
                    this.match(SqlParser.KW_WITH);
                    }
                    break;
                }
                this.state = 769;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 266) {
                    {
                    this.state = 768;
                    this.match(SqlParser.KW_SERDEPROPERTIES);
                    }
                }

                this.state = 772;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 78, this.context) ) {
                case 1:
                    {
                    this.state = 771;
                    this.propertyList();
                    }
                    break;
                }
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 774;
                this.match(SqlParser.KW_ALTER);
                this.state = 775;
                this.match(SqlParser.KW_TABLE);
                this.state = 776;
                this.tableName();
                this.state = 777;
                this.partitionSpec();
                this.state = 778;
                this.match(SqlParser.KW_RENAME);
                this.state = 779;
                this.match(SqlParser.KW_TO);
                this.state = 780;
                this.partitionSpec();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 782;
                this.match(SqlParser.KW_ALTER);
                this.state = 787;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_TABLE:
                    {
                    this.state = 783;
                    this.match(SqlParser.KW_TABLE);
                    this.state = 784;
                    this.tableName();
                    }
                    break;
                case SqlParser.KW_VIEW:
                    {
                    this.state = 785;
                    this.match(SqlParser.KW_VIEW);
                    this.state = 786;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 789;
                this.match(SqlParser.KW_ADD);
                this.state = 791;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 790;
                    this.ifNotExists();
                    }
                }

                this.state = 793;
                this.partitionSpecLocation();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 795;
                this.match(SqlParser.KW_ALTER);
                this.state = 800;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_TABLE:
                    {
                    this.state = 796;
                    this.match(SqlParser.KW_TABLE);
                    this.state = 797;
                    this.tableName();
                    }
                    break;
                case SqlParser.KW_VIEW:
                    {
                    this.state = 798;
                    this.match(SqlParser.KW_VIEW);
                    this.state = 799;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 802;
                this.match(SqlParser.KW_DROP);
                this.state = 804;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 803;
                    this.ifExists();
                    }
                }

                this.state = 806;
                this.partitionSpec();
                this.state = 811;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 807;
                    this.match(SqlParser.COMMA);
                    this.state = 808;
                    this.partitionSpec();
                    }
                    }
                    this.state = 813;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 815;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 814;
                    this.match(SqlParser.KW_PURGE);
                    }
                }

                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 817;
                this.match(SqlParser.KW_ALTER);
                this.state = 818;
                this.match(SqlParser.KW_TABLE);
                this.state = 819;
                this.tableName();
                this.state = 820;
                this.match(SqlParser.KW_RECOVER);
                this.state = 821;
                this.match(SqlParser.KW_PARTITIONS);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 823;
                this.match(SqlParser.KW_ALTER);
                this.state = 824;
                this.match(SqlParser.KW_INDEX);
                this.state = 828;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 85, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 825;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 830;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 85, this.context);
                }
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 831;
                this.match(SqlParser.KW_ALTER);
                this.state = 832;
                this.match(SqlParser.KW_TABLE);
                this.state = 833;
                this.tableName();
                this.state = 834;
                _la = this.tokenStream.LA(1);
                if(!(_la === 45 || _la === 274 || _la === 309)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 836;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 86, this.context) ) {
                case 1:
                    {
                    this.state = 835;
                    this.match(SqlParser.KW_BY);
                    }
                    break;
                }
                this.state = 841;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 87, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 838;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 843;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 87, this.context);
                }
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 844;
                this.match(SqlParser.KW_ALTER);
                this.state = 845;
                this.match(SqlParser.KW_TABLE);
                this.state = 846;
                this.tableName();
                this.state = 847;
                _la = this.tokenStream.LA(1);
                if(!(_la === 196 || _la === 268)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 848;
                _la = this.tokenStream.LA(1);
                if(!(_la === 45 || ((((_la - 274)) & ~0x1F) === 0 && ((1 << (_la - 274)) & 273) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 850;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 88, this.context) ) {
                case 1:
                    {
                    this.state = 849;
                    this.match(SqlParser.KW_LOCATION);
                    }
                    break;
                }
                this.state = 853;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
                case 1:
                    {
                    this.state = 852;
                    this.match(SqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 856;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 90, this.context) ) {
                case 1:
                    {
                    this.state = 855;
                    this.match(SqlParser.KW_DIRECTORIES);
                    }
                    break;
                }
                this.state = 861;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 91, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 858;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 863;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 91, this.context);
                }
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 864;
                this.match(SqlParser.KW_ALTER);
                this.state = 865;
                this.match(SqlParser.KW_TABLE);
                this.state = 866;
                this.tableName();
                this.state = 867;
                _la = this.tokenStream.LA(1);
                if(!(_la === 18 || _la === 103 || _la === 319)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 868;
                this.match(SqlParser.KW_PARTITION);
                this.state = 872;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 92, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 869;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 874;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 92, this.context);
                }
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 875;
                this.match(SqlParser.KW_ALTER);
                this.state = 876;
                this.match(SqlParser.KW_TABLE);
                this.state = 877;
                this.tableName();
                this.state = 879;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 878;
                    this.partitionSpec();
                    }
                }

                this.state = 887;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_COMPACT:
                    {
                    this.state = 881;
                    this.match(SqlParser.KW_COMPACT);
                    }
                    break;
                case SqlParser.KW_CONCATENATE:
                    {
                    this.state = 882;
                    this.match(SqlParser.KW_CONCATENATE);
                    }
                    break;
                case SqlParser.KW_SET:
                    {
                    {
                    this.state = 883;
                    this.match(SqlParser.KW_SET);
                    this.state = 884;
                    this.match(SqlParser.KW_FILEFORMAT);
                    }
                    }
                    break;
                case SqlParser.KW_REPLACE:
                    {
                    {
                    this.state = 885;
                    this.match(SqlParser.KW_REPLACE);
                    this.state = 886;
                    this.match(SqlParser.KW_COLUMNS);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 892;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 95, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 889;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 894;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 95, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createStatement(): CreateStatementContext {
        let localContext = new CreateStatementContext(this.context, this.state);
        this.enterRule(localContext, 8, SqlParser.RULE_createStatement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1108;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 137, this.context) ) {
            case 1:
                localContext = new CreateNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 897;
                this.match(SqlParser.KW_CREATE);
                this.state = 898;
                this.namespace();
                this.state = 900;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 97, this.context) ) {
                case 1:
                    {
                    this.state = 899;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 902;
                this.namespaceNameCreate();
                this.state = 912;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 99, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        this.state = 910;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case SqlParser.KW_COMMENT:
                            {
                            {
                            this.state = 903;
                            this.match(SqlParser.KW_COMMENT);
                            this.state = 904;
                            (localContext as CreateNamespaceContext)._comment = this.stringLit();
                            }
                            }
                            break;
                        case SqlParser.KW_LOCATION:
                            {
                            {
                            this.state = 905;
                            this.match(SqlParser.KW_LOCATION);
                            this.state = 906;
                            this.stringLit();
                            }
                            }
                            break;
                        case SqlParser.KW_WITH:
                            {
                            {
                            this.state = 907;
                            this.match(SqlParser.KW_WITH);
                            this.state = 908;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 78 || _la === 228)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 909;
                            this.propertyList();
                            }
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                    }
                    this.state = 914;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 99, this.context);
                }
                }
                break;
            case 2:
                localContext = new CreateTableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 915;
                this.match(SqlParser.KW_CREATE);
                this.state = 917;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 916;
                    this.match(SqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 920;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 919;
                    this.match(SqlParser.KW_EXTERNAL);
                    }
                }

                this.state = 922;
                this.match(SqlParser.KW_TABLE);
                this.state = 924;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 102, this.context) ) {
                case 1:
                    {
                    this.state = 923;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 926;
                this.tableNameCreate();
                this.state = 931;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 103, this.context) ) {
                case 1:
                    {
                    this.state = 927;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 928;
                    this.createOrReplaceTableColTypeList();
                    this.state = 929;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 934;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 331) {
                    {
                    this.state = 933;
                    this.tableProvider();
                    }
                }

                this.state = 936;
                this.createTableClauses();
                this.state = 941;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 106, this.context) ) {
                case 1:
                    {
                    this.state = 938;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 20) {
                        {
                        this.state = 937;
                        this.match(SqlParser.KW_AS);
                        }
                    }

                    this.state = 940;
                    this.query();
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new ReplaceTableContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 945;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 59) {
                    {
                    this.state = 943;
                    this.match(SqlParser.KW_CREATE);
                    this.state = 944;
                    this.match(SqlParser.KW_OR);
                    }
                }

                this.state = 947;
                this.match(SqlParser.KW_REPLACE);
                this.state = 948;
                this.match(SqlParser.KW_TABLE);
                this.state = 949;
                this.tableNameCreate();
                this.state = 954;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 108, this.context) ) {
                case 1:
                    {
                    this.state = 950;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 951;
                    this.createOrReplaceTableColTypeList();
                    this.state = 952;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 957;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 331) {
                    {
                    this.state = 956;
                    this.tableProvider();
                    }
                }

                this.state = 959;
                this.createTableClauses();
                this.state = 964;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 111, this.context) ) {
                case 1:
                    {
                    this.state = 961;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 20) {
                        {
                        this.state = 960;
                        this.match(SqlParser.KW_AS);
                        }
                    }

                    this.state = 963;
                    this.query();
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new CreateTableLikeContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 966;
                this.match(SqlParser.KW_CREATE);
                this.state = 967;
                this.match(SqlParser.KW_TABLE);
                this.state = 969;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 112, this.context) ) {
                case 1:
                    {
                    this.state = 968;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 971;
                (localContext as CreateTableLikeContext)._target = this.tableNameCreate();
                this.state = 972;
                this.match(SqlParser.KW_LIKE);
                this.state = 973;
                (localContext as CreateTableLikeContext)._source = this.tableName();
                this.state = 984;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 162 || _la === 170 || _la === 256 || _la === 282 || _la === 296 || _la === 331) {
                    {
                    this.state = 982;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SqlParser.KW_USING:
                        {
                        this.state = 974;
                        this.tableProvider();
                        }
                        break;
                    case SqlParser.KW_ROW:
                        {
                        this.state = 975;
                        this.rowFormat();
                        }
                        break;
                    case SqlParser.KW_STORED:
                        {
                        this.state = 976;
                        this.createFileFormat();
                        }
                        break;
                    case SqlParser.KW_LOCATION:
                        {
                        {
                        this.state = 977;
                        this.match(SqlParser.KW_LOCATION);
                        this.state = 978;
                        this.stringLit();
                        }
                        }
                        break;
                    case SqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 979;
                        this.match(SqlParser.KW_TBLPROPERTIES);
                        this.state = 980;
                        (localContext as CreateTableLikeContext)._tableProps = this.propertyList();
                        }
                        }
                        break;
                    case SqlParser.KW_LIFECYCLE:
                        {
                        this.state = 981;
                        this.tableLifecycle();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 986;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 5:
                localContext = new CreateViewContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 987;
                this.match(SqlParser.KW_CREATE);
                this.state = 990;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 988;
                    this.match(SqlParser.KW_OR);
                    this.state = 989;
                    this.match(SqlParser.KW_REPLACE);
                    }
                }

                this.state = 996;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128 || _la === 297) {
                    {
                    this.state = 993;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 128) {
                        {
                        this.state = 992;
                        this.match(SqlParser.KW_GLOBAL);
                        }
                    }

                    this.state = 995;
                    this.match(SqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 998;
                this.match(SqlParser.KW_VIEW);
                this.state = 1000;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 118, this.context) ) {
                case 1:
                    {
                    this.state = 999;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 1002;
                this.viewNameCreate();
                this.state = 1004;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 1003;
                    this.identifierCommentList();
                    }
                }

                this.state = 1015;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 51 || _la === 217 || _la === 296) {
                    {
                    this.state = 1013;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SqlParser.KW_COMMENT:
                        {
                        {
                        this.state = 1006;
                        this.match(SqlParser.KW_COMMENT);
                        this.state = 1007;
                        (localContext as CreateViewContext)._comment = this.stringLit();
                        }
                        }
                        break;
                    case SqlParser.KW_PARTITIONED:
                        {
                        {
                        this.state = 1008;
                        this.match(SqlParser.KW_PARTITIONED);
                        this.state = 1009;
                        this.match(SqlParser.KW_ON);
                        this.state = 1010;
                        this.identifierList();
                        }
                        }
                        break;
                    case SqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 1011;
                        this.match(SqlParser.KW_TBLPROPERTIES);
                        this.state = 1012;
                        this.propertyList();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 1017;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1018;
                this.match(SqlParser.KW_AS);
                this.state = 1019;
                this.query();
                }
                break;
            case 6:
                localContext = new CreateTempViewUsingContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1021;
                this.match(SqlParser.KW_CREATE);
                this.state = 1024;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 1022;
                    this.match(SqlParser.KW_OR);
                    this.state = 1023;
                    this.match(SqlParser.KW_REPLACE);
                    }
                }

                this.state = 1027;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 1026;
                    this.match(SqlParser.KW_GLOBAL);
                    }
                }

                this.state = 1029;
                this.match(SqlParser.KW_TEMPORARY);
                this.state = 1030;
                this.match(SqlParser.KW_VIEW);
                this.state = 1031;
                this.viewNameCreate();
                this.state = 1036;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 1032;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 1033;
                    this.colTypeList();
                    this.state = 1034;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                }

                this.state = 1038;
                this.tableProvider();
                this.state = 1041;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206) {
                    {
                    this.state = 1039;
                    this.match(SqlParser.KW_OPTIONS);
                    this.state = 1040;
                    this.propertyList();
                    }
                }

                }
                break;
            case 7:
                localContext = new CreateFunctionContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1043;
                this.match(SqlParser.KW_CREATE);
                this.state = 1046;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 1044;
                    this.match(SqlParser.KW_OR);
                    this.state = 1045;
                    this.match(SqlParser.KW_REPLACE);
                    }
                }

                this.state = 1049;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 1048;
                    this.match(SqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 1051;
                this.match(SqlParser.KW_FUNCTION);
                this.state = 1053;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 128, this.context) ) {
                case 1:
                    {
                    this.state = 1052;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 1055;
                this.functionNameCreate();
                this.state = 1056;
                this.match(SqlParser.KW_AS);
                this.state = 1057;
                (localContext as CreateFunctionContext)._className = this.stringLit();
                this.state = 1071;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 331) {
                    {
                    this.state = 1058;
                    this.match(SqlParser.KW_USING);
                    {
                    this.state = 1059;
                    this.identifier();
                    this.state = 1060;
                    this.stringLit();
                    }
                    this.state = 1068;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1062;
                        this.match(SqlParser.COMMA);
                        {
                        this.state = 1063;
                        this.identifier();
                        this.state = 1064;
                        this.stringLit();
                        }
                        }
                        }
                        this.state = 1070;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 8:
                localContext = new CreateIndexContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1073;
                this.match(SqlParser.KW_CREATE);
                this.state = 1074;
                this.match(SqlParser.KW_INDEX);
                this.state = 1076;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 131, this.context) ) {
                case 1:
                    {
                    this.state = 1075;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 1078;
                this.identifier();
                this.state = 1079;
                this.match(SqlParser.KW_ON);
                this.state = 1081;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 292) {
                    {
                    this.state = 1080;
                    this.match(SqlParser.KW_TABLE);
                    }
                }

                this.state = 1083;
                this.tableName();
                this.state = 1086;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 331) {
                    {
                    this.state = 1084;
                    this.match(SqlParser.KW_USING);
                    this.state = 1085;
                    (localContext as CreateIndexContext)._indexType = this.identifier();
                    }
                }

                this.state = 1088;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 1089;
                this.multipartIdentifierPropertyList();
                this.state = 1090;
                this.match(SqlParser.RIGHT_PAREN);
                this.state = 1093;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206) {
                    {
                    this.state = 1091;
                    this.match(SqlParser.KW_OPTIONS);
                    this.state = 1092;
                    (localContext as CreateIndexContext)._options = this.propertyList();
                    }
                }

                }
                break;
            case 9:
                localContext = new CreateRoleContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1095;
                this.match(SqlParser.KW_CREATE);
                this.state = 1100;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_ROLE:
                    {
                    this.state = 1096;
                    this.match(SqlParser.KW_ROLE);
                    }
                    break;
                case SqlParser.KW_INDEX:
                    {
                    this.state = 1097;
                    this.match(SqlParser.KW_INDEX);
                    }
                    break;
                case SqlParser.KW_TEMPORARY:
                    {
                    {
                    this.state = 1098;
                    this.match(SqlParser.KW_TEMPORARY);
                    this.state = 1099;
                    this.match(SqlParser.KW_MACRO);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1105;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 136, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1102;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1107;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 136, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropStatement(): DropStatementContext {
        let localContext = new DropStatementContext(this.context, this.state);
        this.enterRule(localContext, 10, SqlParser.RULE_dropStatement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1177;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 151, this.context) ) {
            case 1:
                localContext = new DropNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1110;
                this.match(SqlParser.KW_DROP);
                this.state = 1111;
                this.namespace();
                this.state = 1113;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 138, this.context) ) {
                case 1:
                    {
                    this.state = 1112;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1115;
                this.namespaceName();
                this.state = 1117;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 246) {
                    {
                    this.state = 1116;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 34 || _la === 246)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                localContext = new DropTableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1119;
                this.match(SqlParser.KW_DROP);
                this.state = 1120;
                this.match(SqlParser.KW_TABLE);
                this.state = 1122;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 140, this.context) ) {
                case 1:
                    {
                    this.state = 1121;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1124;
                this.tableName();
                this.state = 1126;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 1125;
                    this.match(SqlParser.KW_PURGE);
                    }
                }

                }
                break;
            case 3:
                localContext = new DropViewContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1128;
                this.match(SqlParser.KW_DROP);
                this.state = 1129;
                this.match(SqlParser.KW_VIEW);
                this.state = 1131;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 142, this.context) ) {
                case 1:
                    {
                    this.state = 1130;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1133;
                this.viewName();
                }
                break;
            case 4:
                localContext = new DropFunctionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1134;
                this.match(SqlParser.KW_DROP);
                this.state = 1136;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 1135;
                    this.match(SqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 1138;
                this.match(SqlParser.KW_FUNCTION);
                this.state = 1140;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 144, this.context) ) {
                case 1:
                    {
                    this.state = 1139;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1142;
                this.functionName();
                }
                break;
            case 5:
                localContext = new DropVariableContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1143;
                this.match(SqlParser.KW_DROP);
                this.state = 1144;
                this.match(SqlParser.KW_TEMPORARY);
                this.state = 1145;
                this.match(SqlParser.KW_VARIABLE);
                this.state = 1147;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 145, this.context) ) {
                case 1:
                    {
                    this.state = 1146;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1152;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 146, this.context) ) {
                case 1:
                    {
                    this.state = 1149;
                    this.tableName();
                    }
                    break;
                case 2:
                    {
                    this.state = 1150;
                    this.viewName();
                    }
                    break;
                case 3:
                    {
                    this.state = 1151;
                    this.functionName();
                    }
                    break;
                }
                }
                break;
            case 6:
                localContext = new DropIndexContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1154;
                this.match(SqlParser.KW_DROP);
                this.state = 1155;
                this.match(SqlParser.KW_INDEX);
                this.state = 1157;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 147, this.context) ) {
                case 1:
                    {
                    this.state = 1156;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1159;
                this.identifier();
                this.state = 1160;
                this.match(SqlParser.KW_ON);
                this.state = 1162;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 292) {
                    {
                    this.state = 1161;
                    this.match(SqlParser.KW_TABLE);
                    }
                }

                this.state = 1164;
                this.tableName();
                }
                break;
            case 7:
                localContext = new DropRoleContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1166;
                this.match(SqlParser.KW_DROP);
                this.state = 1167;
                _la = this.tokenStream.LA(1);
                if(!(_la === 142 || _la === 252 || _la === 297)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1169;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 149, this.context) ) {
                case 1:
                    {
                    this.state = 1168;
                    this.match(SqlParser.KW_MACRO);
                    }
                    break;
                }
                this.state = 1174;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 150, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1171;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1176;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 150, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dmlStatementNoWith(): DmlStatementNoWithContext {
        let localContext = new DmlStatementNoWithContext(this.context, this.state);
        this.enterRule(localContext, 12, SqlParser.RULE_dmlStatementNoWith);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1237;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_INSERT:
                localContext = new InsertFromQueryContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1179;
                this.insertInto();
                this.state = 1180;
                this.query();
                }
                break;
            case SqlParser.KW_FROM:
                localContext = new MultipleInsertContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1182;
                this.fromClause();
                this.state = 1186;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 1183;
                        this.insertInto();
                        this.state = 1184;
                        this.fromStatementBody();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1188;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 152, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case SqlParser.KW_DELETE:
                localContext = new DeleteFromTableContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1190;
                this.match(SqlParser.KW_DELETE);
                this.state = 1191;
                this.match(SqlParser.KW_FROM);
                this.state = 1192;
                this.tableName();
                this.state = 1193;
                this.tableAlias();
                this.state = 1195;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 343) {
                    {
                    this.state = 1194;
                    this.whereClause();
                    }
                }

                }
                break;
            case SqlParser.KW_UPDATE:
                localContext = new UpdateTableContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1197;
                this.match(SqlParser.KW_UPDATE);
                this.state = 1198;
                this.tableName();
                this.state = 1199;
                this.tableAlias();
                this.state = 1200;
                this.setClause();
                this.state = 1202;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 343) {
                    {
                    this.state = 1201;
                    this.whereClause();
                    }
                }

                }
                break;
            case SqlParser.KW_MERGE:
                localContext = new MergeIntoTableContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1204;
                this.match(SqlParser.KW_MERGE);
                this.state = 1205;
                this.match(SqlParser.KW_INTO);
                this.state = 1206;
                (localContext as MergeIntoTableContext)._target = this.tableName();
                this.state = 1207;
                (localContext as MergeIntoTableContext)._targetAlias = this.tableAlias();
                this.state = 1208;
                this.match(SqlParser.KW_USING);
                this.state = 1214;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_ADD:
                case SqlParser.KW_AFTER:
                case SqlParser.KW_ALL:
                case SqlParser.KW_ALTER:
                case SqlParser.KW_ALWAYS:
                case SqlParser.KW_ANALYZE:
                case SqlParser.KW_AND:
                case SqlParser.KW_ANTI:
                case SqlParser.KW_ANY:
                case SqlParser.KW_ANY_VALUE:
                case SqlParser.KW_ARCHIVE:
                case SqlParser.KW_ARRAY:
                case SqlParser.KW_AS:
                case SqlParser.KW_ASC:
                case SqlParser.KW_AT:
                case SqlParser.KW_AUTHORIZATION:
                case SqlParser.KW_BETWEEN:
                case SqlParser.KW_BIGINT:
                case SqlParser.KW_BINARY:
                case SqlParser.KW_BOOLEAN:
                case SqlParser.KW_BOTH:
                case SqlParser.KW_BUCKET:
                case SqlParser.KW_BUCKETS:
                case SqlParser.KW_BY:
                case SqlParser.KW_BYTE:
                case SqlParser.KW_CACHE:
                case SqlParser.KW_CASCADE:
                case SqlParser.KW_CASE:
                case SqlParser.KW_CAST:
                case SqlParser.KW_CATALOG:
                case SqlParser.KW_CATALOGS:
                case SqlParser.KW_CHANGE:
                case SqlParser.KW_CHAR:
                case SqlParser.KW_CHARACTER:
                case SqlParser.KW_CHECK:
                case SqlParser.KW_CLEAR:
                case SqlParser.KW_CLUSTER:
                case SqlParser.KW_CLUSTERED:
                case SqlParser.KW_CODEGEN:
                case SqlParser.KW_COLLATE:
                case SqlParser.KW_COLLECTION:
                case SqlParser.KW_COLUMN:
                case SqlParser.KW_COLUMNS:
                case SqlParser.KW_COMMENT:
                case SqlParser.KW_COMMIT:
                case SqlParser.KW_COMPACT:
                case SqlParser.KW_COMPACTIONS:
                case SqlParser.KW_COMPUTE:
                case SqlParser.KW_CONCATENATE:
                case SqlParser.KW_CONSTRAINT:
                case SqlParser.KW_COST:
                case SqlParser.KW_CREATE:
                case SqlParser.KW_CROSS:
                case SqlParser.KW_CUBE:
                case SqlParser.KW_CURRENT:
                case SqlParser.KW_CURRENT_DATE:
                case SqlParser.KW_CURRENT_TIME:
                case SqlParser.KW_CURRENT_TIMESTAMP:
                case SqlParser.KW_CURRENT_USER:
                case SqlParser.KW_DAY:
                case SqlParser.KW_DAYS:
                case SqlParser.KW_DAYOFYEAR:
                case SqlParser.KW_DATA:
                case SqlParser.KW_DATE:
                case SqlParser.KW_DATABASE:
                case SqlParser.KW_DATABASES:
                case SqlParser.KW_DATEADD:
                case SqlParser.KW_DATE_ADD:
                case SqlParser.KW_DATEDIFF:
                case SqlParser.KW_DATE_DIFF:
                case SqlParser.KW_DBPROPERTIES:
                case SqlParser.KW_DEC:
                case SqlParser.KW_DECIMAL:
                case SqlParser.KW_DECLARE:
                case SqlParser.KW_DEFAULT:
                case SqlParser.KW_DEFINED:
                case SqlParser.KW_DELETE:
                case SqlParser.KW_DELIMITED:
                case SqlParser.KW_DESC:
                case SqlParser.KW_DESCRIBE:
                case SqlParser.KW_DFS:
                case SqlParser.KW_DIRECTORIES:
                case SqlParser.KW_DIRECTORY:
                case SqlParser.KW_DISABLE:
                case SqlParser.KW_DISTINCT:
                case SqlParser.KW_DISTRIBUTE:
                case SqlParser.KW_DIV:
                case SqlParser.KW_DOUBLE:
                case SqlParser.KW_DROP:
                case SqlParser.KW_ELSE:
                case SqlParser.KW_ENABLE:
                case SqlParser.KW_END:
                case SqlParser.KW_ESCAPE:
                case SqlParser.KW_ESCAPED:
                case SqlParser.KW_EXCEPT:
                case SqlParser.KW_EXCHANGE:
                case SqlParser.KW_EXCLUDE:
                case SqlParser.KW_EXISTS:
                case SqlParser.KW_EXPLAIN:
                case SqlParser.KW_EXPORT:
                case SqlParser.KW_EXTENDED:
                case SqlParser.KW_EXTERNAL:
                case SqlParser.KW_EXTRACT:
                case SqlParser.KW_FALSE:
                case SqlParser.KW_FETCH:
                case SqlParser.KW_FIELDS:
                case SqlParser.KW_FILTER:
                case SqlParser.KW_FILEFORMAT:
                case SqlParser.KW_FIRST:
                case SqlParser.KW_FLOAT:
                case SqlParser.KW_FOLLOWING:
                case SqlParser.KW_FOR:
                case SqlParser.KW_FOREIGN:
                case SqlParser.KW_FORMAT:
                case SqlParser.KW_FORMATTED:
                case SqlParser.KW_FULL:
                case SqlParser.KW_FUNCTION:
                case SqlParser.KW_FUNCTIONS:
                case SqlParser.KW_GENERATED:
                case SqlParser.KW_GLOBAL:
                case SqlParser.KW_GRANT:
                case SqlParser.KW_GROUP:
                case SqlParser.KW_GROUPING:
                case SqlParser.KW_HAVING:
                case SqlParser.KW_BINARY_HEX:
                case SqlParser.KW_HOUR:
                case SqlParser.KW_HOURS:
                case SqlParser.KW_IDENTIFIER:
                case SqlParser.KW_IF:
                case SqlParser.KW_IGNORE:
                case SqlParser.KW_IMPORT:
                case SqlParser.KW_IN:
                case SqlParser.KW_INCLUDE:
                case SqlParser.KW_INDEX:
                case SqlParser.KW_INDEXES:
                case SqlParser.KW_INNER:
                case SqlParser.KW_INPATH:
                case SqlParser.KW_INPUTFORMAT:
                case SqlParser.KW_INSERT:
                case SqlParser.KW_INTERSECT:
                case SqlParser.KW_INTERVAL:
                case SqlParser.KW_INT:
                case SqlParser.KW_INTEGER:
                case SqlParser.KW_INTO:
                case SqlParser.KW_IS:
                case SqlParser.KW_ITEMS:
                case SqlParser.KW_JOIN:
                case SqlParser.KW_KEYS:
                case SqlParser.KW_LAST:
                case SqlParser.KW_LATERAL:
                case SqlParser.KW_LAZY:
                case SqlParser.KW_LEADING:
                case SqlParser.KW_LEFT:
                case SqlParser.KW_LIFECYCLE:
                case SqlParser.KW_LIKE:
                case SqlParser.KW_ILIKE:
                case SqlParser.KW_LIMIT:
                case SqlParser.KW_LINES:
                case SqlParser.KW_LIST:
                case SqlParser.KW_LOAD:
                case SqlParser.KW_LOCAL:
                case SqlParser.KW_LOCATION:
                case SqlParser.KW_LOCK:
                case SqlParser.KW_LOCKS:
                case SqlParser.KW_LOGICAL:
                case SqlParser.KW_LONG:
                case SqlParser.KW_MACRO:
                case SqlParser.KW_MAP:
                case SqlParser.KW_MATCHED:
                case SqlParser.KW_MERGE:
                case SqlParser.KW_MICROSECOND:
                case SqlParser.KW_MICROSECONDS:
                case SqlParser.KW_MILLISECOND:
                case SqlParser.KW_MILLISECONDS:
                case SqlParser.KW_MINUTE:
                case SqlParser.KW_MINUTES:
                case SqlParser.KW_MONTH:
                case SqlParser.KW_MONTHS:
                case SqlParser.KW_MSCK:
                case SqlParser.KW_NAME:
                case SqlParser.KW_NAMESPACE:
                case SqlParser.KW_NAMESPACES:
                case SqlParser.KW_NANOSECOND:
                case SqlParser.KW_NANOSECONDS:
                case SqlParser.KW_NATURAL:
                case SqlParser.KW_NO:
                case SqlParser.KW_NOT:
                case SqlParser.KW_NULL:
                case SqlParser.KW_NULLS:
                case SqlParser.KW_NUMERIC:
                case SqlParser.KW_OF:
                case SqlParser.KW_OFFSET:
                case SqlParser.KW_ON:
                case SqlParser.KW_ONLY:
                case SqlParser.KW_OPTIMIZE:
                case SqlParser.KW_OPTION:
                case SqlParser.KW_OPTIONS:
                case SqlParser.KW_OR:
                case SqlParser.KW_ORDER:
                case SqlParser.KW_OUT:
                case SqlParser.KW_OUTER:
                case SqlParser.KW_OUTPUTFORMAT:
                case SqlParser.KW_OVER:
                case SqlParser.KW_OVERLAPS:
                case SqlParser.KW_OVERLAY:
                case SqlParser.KW_OVERWRITE:
                case SqlParser.KW_PARTITION:
                case SqlParser.KW_PARTITIONED:
                case SqlParser.KW_PARTITIONS:
                case SqlParser.KW_PERCENTILE_CONT:
                case SqlParser.KW_PERCENTILE_DISC:
                case SqlParser.KW_PERCENTLIT:
                case SqlParser.KW_PIVOT:
                case SqlParser.KW_PLACING:
                case SqlParser.KW_POSITION:
                case SqlParser.KW_PRECEDING:
                case SqlParser.KW_PRIMARY:
                case SqlParser.KW_PRINCIPALS:
                case SqlParser.KW_PROPERTIES:
                case SqlParser.KW_PURGE:
                case SqlParser.KW_QUARTER:
                case SqlParser.KW_QUERY:
                case SqlParser.KW_RANGE:
                case SqlParser.KW_REAL:
                case SqlParser.KW_RECORDREADER:
                case SqlParser.KW_RECORDWRITER:
                case SqlParser.KW_RECOVER:
                case SqlParser.KW_REDUCE:
                case SqlParser.KW_REFERENCES:
                case SqlParser.KW_REFRESH:
                case SqlParser.KW_RENAME:
                case SqlParser.KW_REPAIR:
                case SqlParser.KW_REPEATABLE:
                case SqlParser.KW_REPLACE:
                case SqlParser.KW_RESET:
                case SqlParser.KW_RESPECT:
                case SqlParser.KW_RESTRICT:
                case SqlParser.KW_REWRITE:
                case SqlParser.KW_REVOKE:
                case SqlParser.KW_RIGHT:
                case SqlParser.KW_RLIKE:
                case SqlParser.KW_REGEXP:
                case SqlParser.KW_ROLE:
                case SqlParser.KW_ROLES:
                case SqlParser.KW_ROLLBACK:
                case SqlParser.KW_ROLLUP:
                case SqlParser.KW_ROW:
                case SqlParser.KW_ROWS:
                case SqlParser.KW_SECOND:
                case SqlParser.KW_SECONDS:
                case SqlParser.KW_SCHEMA:
                case SqlParser.KW_SCHEMAS:
                case SqlParser.KW_SEMI:
                case SqlParser.KW_SEPARATED:
                case SqlParser.KW_SERDE:
                case SqlParser.KW_SERDEPROPERTIES:
                case SqlParser.KW_SESSION_USER:
                case SqlParser.KW_SET:
                case SqlParser.KW_MINUS:
                case SqlParser.KW_SETS:
                case SqlParser.KW_SHORT:
                case SqlParser.KW_SHOW:
                case SqlParser.KW_SINGLE:
                case SqlParser.KW_SKEWED:
                case SqlParser.KW_SMALLINT:
                case SqlParser.KW_SOME:
                case SqlParser.KW_SORT:
                case SqlParser.KW_SORTED:
                case SqlParser.KW_SOURCE:
                case SqlParser.KW_START:
                case SqlParser.KW_STATISTICS:
                case SqlParser.KW_STORED:
                case SqlParser.KW_STRATIFY:
                case SqlParser.KW_STRING:
                case SqlParser.KW_STRUCT:
                case SqlParser.KW_SUBSTR:
                case SqlParser.KW_SUBSTRING:
                case SqlParser.KW_SYNC:
                case SqlParser.KW_SYSTEM:
                case SqlParser.KW_SYSTEM_TIME:
                case SqlParser.KW_SYSTEM_VERSION:
                case SqlParser.KW_TABLES:
                case SqlParser.KW_TABLESAMPLE:
                case SqlParser.KW_TARGET:
                case SqlParser.KW_TBLPROPERTIES:
                case SqlParser.KW_TEMPORARY:
                case SqlParser.KW_TERMINATED:
                case SqlParser.KW_THEN:
                case SqlParser.KW_TIME:
                case SqlParser.KW_TIMEDIFF:
                case SqlParser.KW_TIMESTAMP:
                case SqlParser.KW_TIMESTAMP_LTZ:
                case SqlParser.KW_TIMESTAMP_NTZ:
                case SqlParser.KW_TIMESTAMPADD:
                case SqlParser.KW_TIMESTAMPDIFF:
                case SqlParser.KW_TINYINT:
                case SqlParser.KW_TO:
                case SqlParser.KW_TOUCH:
                case SqlParser.KW_TRAILING:
                case SqlParser.KW_TRANSACTION:
                case SqlParser.KW_TRANSACTIONS:
                case SqlParser.KW_TRANSFORM:
                case SqlParser.KW_TRIM:
                case SqlParser.KW_TRUE:
                case SqlParser.KW_TRUNCATE:
                case SqlParser.KW_TRY_CAST:
                case SqlParser.KW_TYPE:
                case SqlParser.KW_UNARCHIVE:
                case SqlParser.KW_UNBOUNDED:
                case SqlParser.KW_UNCACHE:
                case SqlParser.KW_UNION:
                case SqlParser.KW_UNIQUE:
                case SqlParser.KW_UNKNOWN:
                case SqlParser.KW_UNLOCK:
                case SqlParser.KW_UNPIVOT:
                case SqlParser.KW_UNSET:
                case SqlParser.KW_UPDATE:
                case SqlParser.KW_USE:
                case SqlParser.KW_USER:
                case SqlParser.KW_USING:
                case SqlParser.KW_VALUES:
                case SqlParser.KW_VARCHAR:
                case SqlParser.KW_VAR:
                case SqlParser.KW_VARIABLE:
                case SqlParser.KW_VERSION:
                case SqlParser.KW_VIEW:
                case SqlParser.KW_VIEWS:
                case SqlParser.KW_VOID:
                case SqlParser.KW_WEEK:
                case SqlParser.KW_WEEKS:
                case SqlParser.KW_WHEN:
                case SqlParser.KW_WHERE:
                case SqlParser.KW_WINDOW:
                case SqlParser.KW_WITH:
                case SqlParser.KW_WITHIN:
                case SqlParser.KW_YEAR:
                case SqlParser.KW_YEARS:
                case SqlParser.KW_ZONE:
                case SqlParser.KW_ZORDER:
                case SqlParser.DOUBLEQUOTED_STRING:
                case SqlParser.IDENTIFIER:
                case SqlParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 1209;
                    (localContext as MergeIntoTableContext)._source = this.identifierReference();
                    }
                    break;
                case SqlParser.LEFT_PAREN:
                    {
                    this.state = 1210;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 1211;
                    (localContext as MergeIntoTableContext)._sourceQuery = this.query();
                    this.state = 1212;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1216;
                (localContext as MergeIntoTableContext)._sourceAlias = this.tableAlias();
                this.state = 1217;
                this.match(SqlParser.KW_ON);
                this.state = 1218;
                (localContext as MergeIntoTableContext)._mergeCondition = this.booleanExpression(0);
                this.state = 1222;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 156, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1219;
                        this.matchedClause();
                        }
                        }
                    }
                    this.state = 1224;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 156, this.context);
                }
                this.state = 1228;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 157, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1225;
                        this.notMatchedClause();
                        }
                        }
                    }
                    this.state = 1230;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 157, this.context);
                }
                this.state = 1234;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 342) {
                    {
                    {
                    this.state = 1231;
                    this.notMatchedBySourceClause();
                    }
                    }
                    this.state = 1236;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertInto(): InsertIntoContext {
        let localContext = new InsertIntoContext(this.context, this.state);
        this.enterRule(localContext, 14, SqlParser.RULE_insertInto);
        let _la: number;
        try {
            this.state = 1310;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 175, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1239;
                this.match(SqlParser.KW_INSERT);
                this.state = 1240;
                this.match(SqlParser.KW_INTO);
                this.state = 1242;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 292) {
                    {
                    this.state = 1241;
                    this.match(SqlParser.KW_TABLE);
                    }
                }

                this.state = 1244;
                this.tableName();
                this.state = 1246;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1245;
                    this.partitionSpec();
                    }
                }

                this.state = 1249;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 1248;
                    this.ifNotExists();
                    }
                }

                this.state = 1257;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 163, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 1251;
                    this.match(SqlParser.KW_BY);
                    this.state = 1252;
                    this.match(SqlParser.KW_NAME);
                    }
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 1253;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 1254;
                    this.columnNameSeq();
                    this.state = 1255;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1259;
                this.match(SqlParser.KW_INSERT);
                this.state = 1260;
                this.match(SqlParser.KW_INTO);
                this.state = 1262;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 292) {
                    {
                    this.state = 1261;
                    this.match(SqlParser.KW_TABLE);
                    }
                }

                this.state = 1264;
                this.tableName();
                this.state = 1265;
                this.match(SqlParser.KW_REPLACE);
                this.state = 1266;
                this.whereClause();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1268;
                this.match(SqlParser.KW_INSERT);
                this.state = 1269;
                this.match(SqlParser.KW_OVERWRITE);
                this.state = 1271;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 292) {
                    {
                    this.state = 1270;
                    this.match(SqlParser.KW_TABLE);
                    }
                }

                this.state = 1273;
                this.tableName();
                this.state = 1278;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1274;
                    this.partitionSpec();
                    this.state = 1276;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 137) {
                        {
                        this.state = 1275;
                        this.ifNotExists();
                        }
                    }

                    }
                }

                this.state = 1286;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 168, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 1280;
                    this.match(SqlParser.KW_BY);
                    this.state = 1281;
                    this.match(SqlParser.KW_NAME);
                    }
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 1282;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 1283;
                    this.columnNameSeq();
                    this.state = 1284;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1288;
                this.match(SqlParser.KW_INSERT);
                this.state = 1289;
                this.match(SqlParser.KW_OVERWRITE);
                this.state = 1291;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 169) {
                    {
                    this.state = 1290;
                    this.match(SqlParser.KW_LOCAL);
                    }
                }

                this.state = 1293;
                this.match(SqlParser.KW_DIRECTORY);
                this.state = 1295;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 376 || _la === 377) {
                    {
                    this.state = 1294;
                    localContext._path = this.stringLit();
                    }
                }

                this.state = 1298;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 256) {
                    {
                    this.state = 1297;
                    this.rowFormat();
                    }
                }

                this.state = 1301;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 282) {
                    {
                    this.state = 1300;
                    this.createFileFormat();
                    }
                }

                this.state = 1304;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 331) {
                    {
                    this.state = 1303;
                    this.tableProvider();
                    }
                }

                this.state = 1308;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206) {
                    {
                    this.state = 1306;
                    this.match(SqlParser.KW_OPTIONS);
                    this.state = 1307;
                    localContext._options = this.propertyList();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStatement(): ShowStatementContext {
        let localContext = new ShowStatementContext(this.context, this.state);
        this.enterRule(localContext, 16, SqlParser.RULE_showStatement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1444;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 201, this.context) ) {
            case 1:
                localContext = new ShowNamespacesContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1312;
                this.match(SqlParser.KW_SHOW);
                this.state = 1313;
                _la = this.tokenStream.LA(1);
                if(!(_la === 73 || _la === 190 || _la === 261)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1316;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 176, this.context) ) {
                case 1:
                    {
                    this.state = 1314;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1315;
                    this.multipartIdentifier();
                    }
                    break;
                }
                this.state = 1322;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 376 || _la === 377) {
                    {
                    this.state = 1319;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 1318;
                        this.match(SqlParser.KW_LIKE);
                        }
                    }

                    this.state = 1321;
                    (localContext as ShowNamespacesContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 2:
                localContext = new ShowTablesContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1324;
                this.match(SqlParser.KW_SHOW);
                this.state = 1325;
                this.match(SqlParser.KW_TABLES);
                this.state = 1328;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 179, this.context) ) {
                case 1:
                    {
                    this.state = 1326;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1327;
                    this.namespaceName();
                    }
                    break;
                }
                this.state = 1334;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 376 || _la === 377) {
                    {
                    this.state = 1331;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 1330;
                        this.match(SqlParser.KW_LIKE);
                        }
                    }

                    this.state = 1333;
                    (localContext as ShowTablesContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 3:
                localContext = new ShowTableExtendedContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1336;
                this.match(SqlParser.KW_SHOW);
                this.state = 1337;
                this.match(SqlParser.KW_TABLE);
                this.state = 1338;
                this.match(SqlParser.KW_EXTENDED);
                this.state = 1341;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 123 || _la === 140) {
                    {
                    this.state = 1339;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1340;
                    (localContext as ShowTableExtendedContext)._ns = this.namespaceName();
                    }
                }

                this.state = 1343;
                this.match(SqlParser.KW_LIKE);
                this.state = 1344;
                (localContext as ShowTableExtendedContext)._pattern = this.stringLit();
                this.state = 1346;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1345;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 4:
                localContext = new ShowTblPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1348;
                this.match(SqlParser.KW_SHOW);
                this.state = 1349;
                this.match(SqlParser.KW_TBLPROPERTIES);
                this.state = 1350;
                (localContext as ShowTblPropertiesContext)._table = this.tableName();
                this.state = 1355;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 184, this.context) ) {
                case 1:
                    {
                    this.state = 1351;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 1352;
                    (localContext as ShowTblPropertiesContext)._key = this.propertyKey();
                    this.state = 1353;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            case 5:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1357;
                this.match(SqlParser.KW_SHOW);
                this.state = 1358;
                this.match(SqlParser.KW_COLUMNS);
                this.state = 1359;
                _la = this.tokenStream.LA(1);
                if(!(_la === 123 || _la === 140)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1360;
                (localContext as ShowColumnsContext)._table = this.tableName();
                this.state = 1363;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 185, this.context) ) {
                case 1:
                    {
                    this.state = 1361;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1362;
                    this.namespaceName();
                    }
                    break;
                }
                }
                break;
            case 6:
                localContext = new ShowViewsContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1365;
                this.match(SqlParser.KW_SHOW);
                this.state = 1366;
                this.match(SqlParser.KW_VIEWS);
                this.state = 1369;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 186, this.context) ) {
                case 1:
                    {
                    this.state = 1367;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1368;
                    this.namespaceName();
                    }
                    break;
                }
                this.state = 1375;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 376 || _la === 377) {
                    {
                    this.state = 1372;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 1371;
                        this.match(SqlParser.KW_LIKE);
                        }
                    }

                    this.state = 1374;
                    (localContext as ShowViewsContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 7:
                localContext = new ShowPartitionsContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1377;
                this.match(SqlParser.KW_SHOW);
                this.state = 1378;
                this.match(SqlParser.KW_PARTITIONS);
                this.state = 1379;
                this.tableName();
                this.state = 1381;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1380;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 8:
                localContext = new ShowFunctionsContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1383;
                this.match(SqlParser.KW_SHOW);
                this.state = 1385;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 10 || _la === 289 || _la === 330) {
                    {
                    this.state = 1384;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 10 || _la === 289 || _la === 330)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1387;
                this.match(SqlParser.KW_FUNCTIONS);
                this.state = 1390;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 191, this.context) ) {
                case 1:
                    {
                    this.state = 1388;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1389;
                    (localContext as ShowFunctionsContext)._ns = this.namespaceName();
                    }
                    break;
                }
                this.state = 1399;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 194, this.context) ) {
                case 1:
                    {
                    this.state = 1393;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 192, this.context) ) {
                    case 1:
                        {
                        this.state = 1392;
                        this.match(SqlParser.KW_LIKE);
                        }
                        break;
                    }
                    this.state = 1397;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 193, this.context) ) {
                    case 1:
                        {
                        this.state = 1395;
                        (localContext as ShowFunctionsContext)._legacy = this.multipartIdentifier();
                        }
                        break;
                    case 2:
                        {
                        this.state = 1396;
                        (localContext as ShowFunctionsContext)._pattern = this.stringLit();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 9:
                localContext = new ShowCreateTableContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1401;
                this.match(SqlParser.KW_SHOW);
                this.state = 1402;
                this.match(SqlParser.KW_CREATE);
                this.state = 1403;
                this.match(SqlParser.KW_TABLE);
                this.state = 1404;
                this.tableName();
                this.state = 1407;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20) {
                    {
                    this.state = 1405;
                    this.match(SqlParser.KW_AS);
                    this.state = 1406;
                    this.match(SqlParser.KW_SERDE);
                    }
                }

                }
                break;
            case 10:
                localContext = new ShowCurrentNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1409;
                this.match(SqlParser.KW_SHOW);
                this.state = 1410;
                this.match(SqlParser.KW_CURRENT);
                this.state = 1411;
                this.namespace();
                }
                break;
            case 11:
                localContext = new ShowCatalogsContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1412;
                this.match(SqlParser.KW_SHOW);
                this.state = 1413;
                this.match(SqlParser.KW_CATALOGS);
                this.state = 1418;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 376 || _la === 377) {
                    {
                    this.state = 1415;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 1414;
                        this.match(SqlParser.KW_LIKE);
                        }
                    }

                    this.state = 1417;
                    (localContext as ShowCatalogsContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 12:
                localContext = new ShowOtherContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1420;
                this.match(SqlParser.KW_SHOW);
                this.state = 1436;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_GRANT:
                    {
                    this.state = 1421;
                    this.match(SqlParser.KW_GRANT);
                    }
                    break;
                case SqlParser.KW_PRINCIPALS:
                    {
                    this.state = 1422;
                    this.match(SqlParser.KW_PRINCIPALS);
                    }
                    break;
                case SqlParser.KW_ROLES:
                    {
                    this.state = 1423;
                    this.match(SqlParser.KW_ROLES);
                    }
                    break;
                case SqlParser.KW_COMPACTIONS:
                    {
                    this.state = 1424;
                    this.match(SqlParser.KW_COMPACTIONS);
                    }
                    break;
                case SqlParser.KW_TRANSACTIONS:
                    {
                    this.state = 1425;
                    this.match(SqlParser.KW_TRANSACTIONS);
                    }
                    break;
                case SqlParser.KW_INDEXES:
                    {
                    this.state = 1426;
                    this.match(SqlParser.KW_INDEXES);
                    }
                    break;
                case SqlParser.KW_LOCKS:
                    {
                    this.state = 1427;
                    this.match(SqlParser.KW_LOCKS);
                    }
                    break;
                case SqlParser.KW_ROLE:
                    {
                    {
                    this.state = 1428;
                    this.match(SqlParser.KW_ROLE);
                    this.state = 1430;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 198, this.context) ) {
                    case 1:
                        {
                        this.state = 1429;
                        this.match(SqlParser.KW_GRANT);
                        }
                        break;
                    }
                    }
                    }
                    break;
                case SqlParser.KW_CURRENT:
                    {
                    {
                    this.state = 1432;
                    this.match(SqlParser.KW_CURRENT);
                    this.state = 1433;
                    this.match(SqlParser.KW_ROLES);
                    }
                    }
                    break;
                case SqlParser.KW_CREATE:
                    {
                    {
                    this.state = 1434;
                    this.match(SqlParser.KW_CREATE);
                    this.state = 1435;
                    this.match(SqlParser.KW_TABLE);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1441;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 200, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1438;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1443;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 200, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedCommands(): UnsupportedCommandsContext {
        let localContext = new UnsupportedCommandsContext(this.context, this.state);
        this.enterRule(localContext, 18, SqlParser.RULE_unsupportedCommands);
        let _la: number;
        try {
            this.state = 1459;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 203, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1446;
                _la = this.tokenStream.LA(1);
                if(!(_la === 129 || _la === 248)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1448;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 202, this.context) ) {
                case 1:
                    {
                    this.state = 1447;
                    this.match(SqlParser.KW_ROLE);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1450;
                _la = this.tokenStream.LA(1);
                if(!(_la === 107 || _la === 139 || _la === 171 || _la === 325)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1451;
                this.match(SqlParser.KW_TABLE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1452;
                _la = this.tokenStream.LA(1);
                if(!(_la === 171 || _la === 325)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1453;
                this.match(SqlParser.KW_DATABASE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1454;
                this.match(SqlParser.KW_START);
                this.state = 1455;
                this.match(SqlParser.KW_TRANSACTION);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1456;
                this.match(SqlParser.KW_COMMIT);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1457;
                this.match(SqlParser.KW_ROLLBACK);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1458;
                this.match(SqlParser.KW_DFS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bucketSpec(): BucketSpecContext {
        let localContext = new BucketSpecContext(this.context, this.state);
        this.enterRule(localContext, 20, SqlParser.RULE_bucketSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1461;
            this.match(SqlParser.KW_CLUSTERED);
            this.state = 1462;
            this.match(SqlParser.KW_BY);
            this.state = 1463;
            this.identifierList();
            this.state = 1467;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 278) {
                {
                this.state = 1464;
                this.match(SqlParser.KW_SORTED);
                this.state = 1465;
                this.match(SqlParser.KW_BY);
                this.state = 1466;
                this.orderedIdentifierList();
                }
            }

            this.state = 1469;
            this.match(SqlParser.KW_INTO);
            this.state = 1470;
            this.match(SqlParser.INTEGER_VALUE);
            this.state = 1471;
            this.match(SqlParser.KW_BUCKETS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewSpec(): SkewSpecContext {
        let localContext = new SkewSpecContext(this.context, this.state);
        this.enterRule(localContext, 22, SqlParser.RULE_skewSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1473;
            this.match(SqlParser.KW_SKEWED);
            this.state = 1474;
            this.match(SqlParser.KW_BY);
            this.state = 1475;
            this.identifierList();
            this.state = 1476;
            this.match(SqlParser.KW_ON);
            this.state = 1479;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 205, this.context) ) {
            case 1:
                {
                this.state = 1477;
                this.constantList();
                }
                break;
            case 2:
                {
                this.state = 1478;
                this.nestedConstantList();
                }
                break;
            }
            this.state = 1484;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 206, this.context) ) {
            case 1:
                {
                this.state = 1481;
                this.match(SqlParser.KW_STORED);
                this.state = 1482;
                this.match(SqlParser.KW_AS);
                this.state = 1483;
                this.match(SqlParser.KW_DIRECTORIES);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public query(): QueryContext {
        let localContext = new QueryContext(this.context, this.state);
        this.enterRule(localContext, 24, SqlParser.RULE_query);
        let _la: number;
        try {
            localContext = new QueryStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1487;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 345) {
                {
                this.state = 1486;
                this.ctes();
                }
            }

            this.state = 1489;
            this.queryTerm(0);
            this.state = 1490;
            this.queryOrganization();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpecLocation(): PartitionSpecLocationContext {
        let localContext = new PartitionSpecLocationContext(this.context, this.state);
        this.enterRule(localContext, 26, SqlParser.RULE_partitionSpecLocation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1492;
            this.partitionSpec();
            this.state = 1495;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 170) {
                {
                this.state = 1493;
                this.match(SqlParser.KW_LOCATION);
                this.state = 1494;
                this.stringLit();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpec(): PartitionSpecContext {
        let localContext = new PartitionSpecContext(this.context, this.state);
        this.enterRule(localContext, 28, SqlParser.RULE_partitionSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1497;
            this.match(SqlParser.KW_PARTITION);
            this.state = 1498;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 1499;
            this.partitionVal();
            this.state = 1504;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1500;
                this.match(SqlParser.COMMA);
                this.state = 1501;
                this.partitionVal();
                }
                }
                this.state = 1506;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1507;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionVal(): PartitionValContext {
        let localContext = new PartitionValContext(this.context, this.state);
        this.enterRule(localContext, 30, SqlParser.RULE_partitionVal);
        let _la: number;
        try {
            this.state = 1518;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 211, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1509;
                this.identifier();
                this.state = 1512;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 351) {
                    {
                    this.state = 1510;
                    this.match(SqlParser.EQ);
                    this.state = 1511;
                    this.constant();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1514;
                this.identifier();
                this.state = 1515;
                this.match(SqlParser.EQ);
                this.state = 1516;
                this.match(SqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namespace(): NamespaceContext {
        let localContext = new NamespaceContext(this.context, this.state);
        this.enterRule(localContext, 32, SqlParser.RULE_namespace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1520;
            _la = this.tokenStream.LA(1);
            if(!(_la === 72 || _la === 189 || _la === 260)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeFuncName(): DescribeFuncNameContext {
        let localContext = new DescribeFuncNameContext(this.context, this.state);
        this.enterRule(localContext, 34, SqlParser.RULE_describeFuncName);
        try {
            this.state = 1527;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 212, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1522;
                this.identifierReference();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1523;
                this.stringLit();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1524;
                this.comparisonOperator();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1525;
                this.arithmeticOperator();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1526;
                this.predicateOperator();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeColName(): DescribeColNameContext {
        let localContext = new DescribeColNameContext(this.context, this.state);
        this.enterRule(localContext, 36, SqlParser.RULE_describeColName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1529;
            localContext._identifier = this.identifier();
            localContext._nameParts.push(localContext._identifier);
            this.state = 1534;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 5) {
                {
                {
                this.state = 1530;
                this.match(SqlParser.DOT);
                this.state = 1531;
                localContext._identifier = this.identifier();
                localContext._nameParts.push(localContext._identifier);
                }
                }
                this.state = 1536;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ctes(): CtesContext {
        let localContext = new CtesContext(this.context, this.state);
        this.enterRule(localContext, 38, SqlParser.RULE_ctes);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1537;
            this.match(SqlParser.KW_WITH);
            this.state = 1538;
            this.namedQuery();
            this.state = 1543;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1539;
                this.match(SqlParser.COMMA);
                this.state = 1540;
                this.namedQuery();
                }
                }
                this.state = 1545;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 40, SqlParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1546;
            localContext._name = this.errorCapturingIdentifier();
            this.state = 1548;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 215, this.context) ) {
            case 1:
                {
                this.state = 1547;
                localContext._columnAliases = this.identifierList();
                }
                break;
            }
            this.state = 1551;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 20) {
                {
                this.state = 1550;
                this.match(SqlParser.KW_AS);
                }
            }

            this.state = 1553;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 1554;
            this.query();
            this.state = 1555;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableProvider(): TableProviderContext {
        let localContext = new TableProviderContext(this.context, this.state);
        this.enterRule(localContext, 42, SqlParser.RULE_tableProvider);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1557;
            this.match(SqlParser.KW_USING);
            this.state = 1558;
            this.multipartIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableClauses(): CreateTableClausesContext {
        let localContext = new CreateTableClausesContext(this.context, this.state);
        this.enterRule(localContext, 44, SqlParser.RULE_createTableClauses);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1578;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 218, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 1576;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SqlParser.KW_OPTIONS:
                        {
                        {
                        this.state = 1560;
                        this.match(SqlParser.KW_OPTIONS);
                        this.state = 1561;
                        localContext._options = this.expressionPropertyList();
                        }
                        }
                        break;
                    case SqlParser.KW_PARTITIONED:
                        {
                        {
                        this.state = 1562;
                        this.match(SqlParser.KW_PARTITIONED);
                        this.state = 1563;
                        this.match(SqlParser.KW_BY);
                        this.state = 1564;
                        localContext._partitioning = this.partitionFieldList();
                        }
                        }
                        break;
                    case SqlParser.KW_SKEWED:
                        {
                        this.state = 1565;
                        this.skewSpec();
                        }
                        break;
                    case SqlParser.KW_CLUSTERED:
                        {
                        this.state = 1566;
                        this.bucketSpec();
                        }
                        break;
                    case SqlParser.KW_ROW:
                        {
                        this.state = 1567;
                        this.rowFormat();
                        }
                        break;
                    case SqlParser.KW_STORED:
                        {
                        this.state = 1568;
                        this.createFileFormat();
                        }
                        break;
                    case SqlParser.KW_LOCATION:
                        {
                        {
                        this.state = 1569;
                        this.match(SqlParser.KW_LOCATION);
                        this.state = 1570;
                        this.stringLit();
                        }
                        }
                        break;
                    case SqlParser.KW_COMMENT:
                        {
                        {
                        this.state = 1571;
                        this.match(SqlParser.KW_COMMENT);
                        this.state = 1572;
                        localContext._comment = this.stringLit();
                        }
                        }
                        break;
                    case SqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 1573;
                        this.match(SqlParser.KW_TBLPROPERTIES);
                        this.state = 1574;
                        localContext._tableProps = this.propertyList();
                        }
                        }
                        break;
                    case SqlParser.KW_LIFECYCLE:
                        {
                        this.state = 1575;
                        this.tableLifecycle();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }
                this.state = 1580;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 218, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableLifecycle(): TableLifecycleContext {
        let localContext = new TableLifecycleContext(this.context, this.state);
        this.enterRule(localContext, 46, SqlParser.RULE_tableLifecycle);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1581;
            this.match(SqlParser.KW_LIFECYCLE);
            this.state = 1582;
            this.match(SqlParser.INTEGER_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyList(): PropertyListContext {
        let localContext = new PropertyListContext(this.context, this.state);
        this.enterRule(localContext, 48, SqlParser.RULE_propertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1584;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 1585;
            this.property();
            this.state = 1590;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1586;
                this.match(SqlParser.COMMA);
                this.state = 1587;
                this.property();
                }
                }
                this.state = 1592;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1593;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public property(): PropertyContext {
        let localContext = new PropertyContext(this.context, this.state);
        this.enterRule(localContext, 50, SqlParser.RULE_property);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1595;
            localContext._key = this.propertyKey();
            this.state = 1600;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 111 || _la === 315 || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & 1174405121) !== 0) || _la === 383) {
                {
                this.state = 1597;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 351) {
                    {
                    this.state = 1596;
                    this.match(SqlParser.EQ);
                    }
                }

                this.state = 1599;
                localContext._value = this.propertyValue();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyKey(): PropertyKeyContext {
        let localContext = new PropertyKeyContext(this.context, this.state);
        this.enterRule(localContext, 52, SqlParser.RULE_propertyKey);
        let _la: number;
        try {
            this.state = 1611;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 223, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1602;
                this.identifier();
                this.state = 1607;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 5) {
                    {
                    {
                    this.state = 1603;
                    this.match(SqlParser.DOT);
                    this.state = 1604;
                    this.identifier();
                    }
                    }
                    this.state = 1609;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1610;
                this.stringLit();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyValue(): PropertyValueContext {
        let localContext = new PropertyValueContext(this.context, this.state);
        this.enterRule(localContext, 54, SqlParser.RULE_propertyValue);
        try {
            this.state = 1617;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1613;
                this.match(SqlParser.INTEGER_VALUE);
                }
                break;
            case SqlParser.DECIMAL_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1614;
                this.match(SqlParser.DECIMAL_VALUE);
                }
                break;
            case SqlParser.KW_FALSE:
            case SqlParser.KW_TRUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1615;
                this.booleanValue();
                }
                break;
            case SqlParser.STRING_LITERAL:
            case SqlParser.DOUBLEQUOTED_STRING:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1616;
                this.stringLit();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionPropertyList(): ExpressionPropertyListContext {
        let localContext = new ExpressionPropertyListContext(this.context, this.state);
        this.enterRule(localContext, 56, SqlParser.RULE_expressionPropertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1619;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 1620;
            this.expressionProperty();
            this.state = 1625;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1621;
                this.match(SqlParser.COMMA);
                this.state = 1622;
                this.expressionProperty();
                }
                }
                this.state = 1627;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1628;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionProperty(): ExpressionPropertyContext {
        let localContext = new ExpressionPropertyContext(this.context, this.state);
        this.enterRule(localContext, 58, SqlParser.RULE_expressionProperty);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1630;
            localContext._key = this.propertyKey();
            this.state = 1635;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967231) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967279) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 1073678415) !== 0)) {
                {
                this.state = 1632;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 351) {
                    {
                    this.state = 1631;
                    this.match(SqlParser.EQ);
                    }
                }

                this.state = 1634;
                localContext._value = this.expression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constantList(): ConstantListContext {
        let localContext = new ConstantListContext(this.context, this.state);
        this.enterRule(localContext, 60, SqlParser.RULE_constantList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1637;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 1638;
            this.constant();
            this.state = 1643;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1639;
                this.match(SqlParser.COMMA);
                this.state = 1640;
                this.constant();
                }
                }
                this.state = 1645;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1646;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nestedConstantList(): NestedConstantListContext {
        let localContext = new NestedConstantListContext(this.context, this.state);
        this.enterRule(localContext, 62, SqlParser.RULE_nestedConstantList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1648;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 1649;
            this.constantList();
            this.state = 1654;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1650;
                this.match(SqlParser.COMMA);
                this.state = 1651;
                this.constantList();
                }
                }
                this.state = 1656;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1657;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFileFormat(): CreateFileFormatContext {
        let localContext = new CreateFileFormatContext(this.context, this.state);
        this.enterRule(localContext, 64, SqlParser.RULE_createFileFormat);
        try {
            this.state = 1665;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 230, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1659;
                this.match(SqlParser.KW_STORED);
                this.state = 1660;
                this.match(SqlParser.KW_AS);
                this.state = 1661;
                this.fileFormat();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1662;
                this.match(SqlParser.KW_STORED);
                this.state = 1663;
                this.match(SqlParser.KW_BY);
                this.state = 1664;
                this.storageHandler();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fileFormat(): FileFormatContext {
        let localContext = new FileFormatContext(this.context, this.state);
        this.enterRule(localContext, 66, SqlParser.RULE_fileFormat);
        try {
            this.state = 1673;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 231, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1667;
                this.match(SqlParser.KW_INPUTFORMAT);
                this.state = 1668;
                localContext._inFmt = this.stringLit();
                this.state = 1669;
                this.match(SqlParser.KW_OUTPUTFORMAT);
                this.state = 1670;
                localContext._outFmt = this.stringLit();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1672;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storageHandler(): StorageHandlerContext {
        let localContext = new StorageHandlerContext(this.context, this.state);
        this.enterRule(localContext, 68, SqlParser.RULE_storageHandler);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1675;
            this.stringLit();
            this.state = 1679;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 232, this.context) ) {
            case 1:
                {
                this.state = 1676;
                this.match(SqlParser.KW_WITH);
                this.state = 1677;
                this.match(SqlParser.KW_SERDEPROPERTIES);
                this.state = 1678;
                this.propertyList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namespaceName(): NamespaceNameContext {
        let localContext = new NamespaceNameContext(this.context, this.state);
        this.enterRule(localContext, 70, SqlParser.RULE_namespaceName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1681;
            this.identifierReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namespaceNameCreate(): NamespaceNameCreateContext {
        let localContext = new NamespaceNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 72, SqlParser.RULE_namespaceNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1683;
            this.identifierReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableNameCreate(): TableNameCreateContext {
        let localContext = new TableNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 74, SqlParser.RULE_tableNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1685;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableName(): TableNameContext {
        let localContext = new TableNameContext(this.context, this.state);
        this.enterRule(localContext, 76, SqlParser.RULE_tableName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1687;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewNameCreate(): ViewNameCreateContext {
        let localContext = new ViewNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 78, SqlParser.RULE_viewNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1689;
            this.viewIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewName(): ViewNameContext {
        let localContext = new ViewNameContext(this.context, this.state);
        this.enterRule(localContext, 80, SqlParser.RULE_viewName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1691;
            this.viewIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnName(): ColumnNameContext {
        let localContext = new ColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 82, SqlParser.RULE_columnName);
        try {
            this.state = 1695;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 233, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1693;
                this.multipartIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1694;
                if (!(this.shouldMatchEmpty())) {
                    throw this.createFailedPredicateException("this.shouldMatchEmpty()");
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameSeq(): ColumnNameSeqContext {
        let localContext = new ColumnNameSeqContext(this.context, this.state);
        this.enterRule(localContext, 84, SqlParser.RULE_columnNameSeq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1697;
            this.columnName();
            this.state = 1702;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1698;
                this.match(SqlParser.COMMA);
                this.state = 1699;
                this.columnName();
                }
                }
                this.state = 1704;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        let localContext = new ColumnNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 86, SqlParser.RULE_columnNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1705;
            this.errorCapturingIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierReference(): IdentifierReferenceContext {
        let localContext = new IdentifierReferenceContext(this.context, this.state);
        this.enterRule(localContext, 88, SqlParser.RULE_identifierReference);
        try {
            this.state = 1713;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 235, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1707;
                this.match(SqlParser.KW_IDENTIFIER);
                this.state = 1708;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 1709;
                this.expression();
                this.state = 1710;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1712;
                this.multipartIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryOrganization(): QueryOrganizationContext {
        let localContext = new QueryOrganizationContext(this.context, this.state);
        this.enterRule(localContext, 90, SqlParser.RULE_queryOrganization);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1725;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 237, this.context) ) {
            case 1:
                {
                this.state = 1715;
                this.match(SqlParser.KW_ORDER);
                this.state = 1716;
                this.match(SqlParser.KW_BY);
                this.state = 1717;
                localContext._sortItem = this.sortItem();
                localContext._order.push(localContext._sortItem);
                this.state = 1722;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 236, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1718;
                        this.match(SqlParser.COMMA);
                        this.state = 1719;
                        localContext._sortItem = this.sortItem();
                        localContext._order.push(localContext._sortItem);
                        }
                        }
                    }
                    this.state = 1724;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 236, this.context);
                }
                }
                break;
            }
            this.state = 1737;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 239, this.context) ) {
            case 1:
                {
                this.state = 1727;
                this.match(SqlParser.KW_CLUSTER);
                this.state = 1728;
                this.match(SqlParser.KW_BY);
                this.state = 1729;
                localContext._expression = this.expression();
                localContext._clusterBy.push(localContext._expression);
                this.state = 1734;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 238, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1730;
                        this.match(SqlParser.COMMA);
                        this.state = 1731;
                        localContext._expression = this.expression();
                        localContext._clusterBy.push(localContext._expression);
                        }
                        }
                    }
                    this.state = 1736;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 238, this.context);
                }
                }
                break;
            }
            this.state = 1749;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 241, this.context) ) {
            case 1:
                {
                this.state = 1739;
                this.match(SqlParser.KW_DISTRIBUTE);
                this.state = 1740;
                this.match(SqlParser.KW_BY);
                this.state = 1741;
                localContext._expression = this.expression();
                localContext._distributeBy.push(localContext._expression);
                this.state = 1746;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 240, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1742;
                        this.match(SqlParser.COMMA);
                        this.state = 1743;
                        localContext._expression = this.expression();
                        localContext._distributeBy.push(localContext._expression);
                        }
                        }
                    }
                    this.state = 1748;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 240, this.context);
                }
                }
                break;
            }
            this.state = 1761;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 243, this.context) ) {
            case 1:
                {
                this.state = 1751;
                this.match(SqlParser.KW_SORT);
                this.state = 1752;
                this.match(SqlParser.KW_BY);
                this.state = 1753;
                localContext._sortItem = this.sortItem();
                localContext._sort.push(localContext._sortItem);
                this.state = 1758;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 242, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1754;
                        this.match(SqlParser.COMMA);
                        this.state = 1755;
                        localContext._sortItem = this.sortItem();
                        localContext._sort.push(localContext._sortItem);
                        }
                        }
                    }
                    this.state = 1760;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 242, this.context);
                }
                }
                break;
            }
            this.state = 1764;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
            case 1:
                {
                this.state = 1763;
                this.windowClause();
                }
                break;
            }
            this.state = 1771;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 246, this.context) ) {
            case 1:
                {
                this.state = 1766;
                this.match(SqlParser.KW_LIMIT);
                this.state = 1769;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 245, this.context) ) {
                case 1:
                    {
                    this.state = 1767;
                    this.match(SqlParser.KW_ALL);
                    }
                    break;
                case 2:
                    {
                    this.state = 1768;
                    localContext._limit = this.expression();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 1775;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
            case 1:
                {
                this.state = 1773;
                this.match(SqlParser.KW_OFFSET);
                this.state = 1774;
                localContext._offset = this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public queryTerm(): QueryTermContext;
    public queryTerm(_p: number): QueryTermContext;
    public queryTerm(_p?: number): QueryTermContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new QueryTermContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 92;
        this.enterRecursionRule(localContext, 92, SqlParser.RULE_queryTerm, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 1778;
            this.queryPrimary();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1800;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 252, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1798;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 251, this.context) ) {
                    case 1:
                        {
                        localContext = new QueryTermContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_queryTerm);
                        this.state = 1780;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 1781;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 102 || _la === 148 || _la === 269 || _la === 322)) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1783;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 10 || _la === 92) {
                            {
                            this.state = 1782;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1785;
                        localContext._right = this.queryTerm(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new QueryTermContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_queryTerm);
                        this.state = 1786;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 1787;
                        localContext._operator = this.match(SqlParser.KW_INTERSECT);
                        this.state = 1789;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 10 || _la === 92) {
                            {
                            this.state = 1788;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1791;
                        localContext._right = this.queryTerm(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new QueryTermContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_queryTerm);
                        this.state = 1792;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 1793;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 102 || _la === 269 || _la === 322)) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1795;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 10 || _la === 92) {
                            {
                            this.state = 1794;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1797;
                        localContext._right = this.queryTerm(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 1802;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 252, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localContext = new QueryPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 94, SqlParser.RULE_queryPrimary);
        try {
            let alternative: number;
            this.state = 1827;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_MAP:
            case SqlParser.KW_REDUCE:
            case SqlParser.KW_SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1803;
                this.querySpecification();
                }
                break;
            case SqlParser.KW_FROM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1804;
                this.fromClause();
                this.state = 1806;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 1805;
                        this.fromStatementBody();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1808;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 253, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case SqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1810;
                this.match(SqlParser.KW_TABLE);
                this.state = 1811;
                this.tableName();
                }
                break;
            case SqlParser.KW_VALUES:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1812;
                this.match(SqlParser.KW_VALUES);
                this.state = 1813;
                this.expression();
                this.state = 1818;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 254, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1814;
                        this.match(SqlParser.COMMA);
                        this.state = 1815;
                        this.expression();
                        }
                        }
                    }
                    this.state = 1820;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 254, this.context);
                }
                this.state = 1821;
                this.tableAlias();
                }
                break;
            case SqlParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1823;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 1824;
                this.query();
                this.state = 1825;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortItem(): SortItemContext {
        let localContext = new SortItemContext(this.context, this.state);
        this.enterRule(localContext, 96, SqlParser.RULE_sortItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1831;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
            case 1:
                {
                this.state = 1829;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 1830;
                this.expression();
                }
                break;
            }
            this.state = 1834;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 257, this.context) ) {
            case 1:
                {
                this.state = 1833;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 21 || _la === 86)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 1838;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
            case 1:
                {
                this.state = 1836;
                this.match(SqlParser.KW_NULLS);
                this.state = 1837;
                localContext._nullOrder = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 116 || _la === 157)) {
                    localContext._nullOrder = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromStatementBody(): FromStatementBodyContext {
        let localContext = new FromStatementBodyContext(this.context, this.state);
        this.enterRule(localContext, 98, SqlParser.RULE_fromStatementBody);
        try {
            let alternative: number;
            this.state = 1867;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 265, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1840;
                this.transformClause();
                this.state = 1842;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 259, this.context) ) {
                case 1:
                    {
                    this.state = 1841;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 1844;
                this.queryOrganization();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1846;
                this.selectClause();
                this.state = 1850;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 260, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1847;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 1852;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 260, this.context);
                }
                this.state = 1854;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 261, this.context) ) {
                case 1:
                    {
                    this.state = 1853;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 1857;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 262, this.context) ) {
                case 1:
                    {
                    this.state = 1856;
                    this.aggregationClause();
                    }
                    break;
                }
                this.state = 1860;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 263, this.context) ) {
                case 1:
                    {
                    this.state = 1859;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 1863;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 264, this.context) ) {
                case 1:
                    {
                    this.state = 1862;
                    this.windowClause();
                    }
                    break;
                }
                this.state = 1865;
                this.queryOrganization();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecification(): QuerySpecificationContext {
        let localContext = new QuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 100, SqlParser.RULE_querySpecification);
        try {
            let alternative: number;
            this.state = 1913;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 278, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1869;
                this.transformClause();
                this.state = 1871;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 266, this.context) ) {
                case 1:
                    {
                    this.state = 1870;
                    this.fromClause();
                    }
                    break;
                }
                this.state = 1876;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 267, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1873;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 1878;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 267, this.context);
                }
                this.state = 1880;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 268, this.context) ) {
                case 1:
                    {
                    this.state = 1879;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 1883;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 269, this.context) ) {
                case 1:
                    {
                    this.state = 1882;
                    this.aggregationClause();
                    }
                    break;
                }
                this.state = 1886;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 270, this.context) ) {
                case 1:
                    {
                    this.state = 1885;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 1889;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 271, this.context) ) {
                case 1:
                    {
                    this.state = 1888;
                    this.windowClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1891;
                this.selectClause();
                this.state = 1893;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 272, this.context) ) {
                case 1:
                    {
                    this.state = 1892;
                    this.fromClause();
                    }
                    break;
                }
                this.state = 1898;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 273, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1895;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 1900;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 273, this.context);
                }
                this.state = 1902;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 274, this.context) ) {
                case 1:
                    {
                    this.state = 1901;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 1905;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 275, this.context) ) {
                case 1:
                    {
                    this.state = 1904;
                    this.aggregationClause();
                    }
                    break;
                }
                this.state = 1908;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 276, this.context) ) {
                case 1:
                    {
                    this.state = 1907;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 1911;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 277, this.context) ) {
                case 1:
                    {
                    this.state = 1910;
                    this.windowClause();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transformClause(): TransformClauseContext {
        let localContext = new TransformClauseContext(this.context, this.state);
        this.enterRule(localContext, 102, SqlParser.RULE_transformClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1934;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_SELECT:
                {
                this.state = 1915;
                this.match(SqlParser.KW_SELECT);
                this.state = 1916;
                localContext._kind = this.match(SqlParser.KW_TRANSFORM);
                this.state = 1917;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 1919;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 279, this.context) ) {
                case 1:
                    {
                    this.state = 1918;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 1921;
                this.expressionSeq();
                this.state = 1922;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case SqlParser.KW_MAP:
                {
                this.state = 1924;
                localContext._kind = this.match(SqlParser.KW_MAP);
                this.state = 1926;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 280, this.context) ) {
                case 1:
                    {
                    this.state = 1925;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 1928;
                this.expressionSeq();
                }
                break;
            case SqlParser.KW_REDUCE:
                {
                this.state = 1929;
                localContext._kind = this.match(SqlParser.KW_REDUCE);
                this.state = 1931;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 281, this.context) ) {
                case 1:
                    {
                    this.state = 1930;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 1933;
                this.expressionSeq();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1937;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 256) {
                {
                this.state = 1936;
                localContext._inRowFormat = this.rowFormat();
                }
            }

            this.state = 1941;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235) {
                {
                this.state = 1939;
                this.match(SqlParser.KW_RECORDWRITER);
                this.state = 1940;
                localContext._recordWriter = this.stringLit();
                }
            }

            this.state = 1943;
            this.match(SqlParser.KW_USING);
            this.state = 1944;
            localContext._script = this.stringLit();
            this.state = 1957;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 287, this.context) ) {
            case 1:
                {
                this.state = 1945;
                this.match(SqlParser.KW_AS);
                this.state = 1955;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 286, this.context) ) {
                case 1:
                    {
                    this.state = 1946;
                    this.identifierSeq();
                    }
                    break;
                case 2:
                    {
                    this.state = 1947;
                    this.colTypeList();
                    }
                    break;
                case 3:
                    {
                    {
                    this.state = 1948;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 1951;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 285, this.context) ) {
                    case 1:
                        {
                        this.state = 1949;
                        this.identifierSeq();
                        }
                        break;
                    case 2:
                        {
                        this.state = 1950;
                        this.colTypeList();
                        }
                        break;
                    }
                    this.state = 1953;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            }
            this.state = 1960;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 288, this.context) ) {
            case 1:
                {
                this.state = 1959;
                localContext._outRowFormat = this.rowFormat();
                }
                break;
            }
            this.state = 1964;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 289, this.context) ) {
            case 1:
                {
                this.state = 1962;
                this.match(SqlParser.KW_RECORDREADER);
                this.state = 1963;
                localContext._recordReader = this.stringLit();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectClause(): SelectClauseContext {
        let localContext = new SelectClauseContext(this.context, this.state);
        this.enterRule(localContext, 104, SqlParser.RULE_selectClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1966;
            this.match(SqlParser.KW_SELECT);
            this.state = 1970;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 290, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1967;
                    localContext._hint = this.hint();
                    localContext._hints.push(localContext._hint);
                    }
                    }
                }
                this.state = 1972;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 290, this.context);
            }
            this.state = 1974;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
            case 1:
                {
                this.state = 1973;
                this.setQuantifier();
                }
                break;
            }
            this.state = 1976;
            this.namedExpressionSeq();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setClause(): SetClauseContext {
        let localContext = new SetClauseContext(this.context, this.state);
        this.enterRule(localContext, 106, SqlParser.RULE_setClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1978;
            this.match(SqlParser.KW_SET);
            this.state = 1979;
            this.assignmentList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public matchedClause(): MatchedClauseContext {
        let localContext = new MatchedClauseContext(this.context, this.state);
        this.enterRule(localContext, 108, SqlParser.RULE_matchedClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1981;
            this.match(SqlParser.KW_WHEN);
            this.state = 1982;
            this.match(SqlParser.KW_MATCHED);
            this.state = 1985;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14) {
                {
                this.state = 1983;
                this.match(SqlParser.KW_AND);
                this.state = 1984;
                localContext._matchedCond = this.booleanExpression(0);
                }
            }

            this.state = 1987;
            this.match(SqlParser.KW_THEN);
            this.state = 1995;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_DELETE:
                {
                this.state = 1988;
                this.match(SqlParser.KW_DELETE);
                }
                break;
            case SqlParser.KW_UPDATE:
                {
                this.state = 1989;
                this.match(SqlParser.KW_UPDATE);
                this.state = 1990;
                this.match(SqlParser.KW_SET);
                this.state = 1993;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.ASTERISK:
                    {
                    this.state = 1991;
                    this.match(SqlParser.ASTERISK);
                    }
                    break;
                case SqlParser.KW_ADD:
                case SqlParser.KW_AFTER:
                case SqlParser.KW_ALL:
                case SqlParser.KW_ALTER:
                case SqlParser.KW_ALWAYS:
                case SqlParser.KW_ANALYZE:
                case SqlParser.KW_AND:
                case SqlParser.KW_ANTI:
                case SqlParser.KW_ANY:
                case SqlParser.KW_ANY_VALUE:
                case SqlParser.KW_ARCHIVE:
                case SqlParser.KW_ARRAY:
                case SqlParser.KW_AS:
                case SqlParser.KW_ASC:
                case SqlParser.KW_AT:
                case SqlParser.KW_AUTHORIZATION:
                case SqlParser.KW_BETWEEN:
                case SqlParser.KW_BIGINT:
                case SqlParser.KW_BINARY:
                case SqlParser.KW_BOOLEAN:
                case SqlParser.KW_BOTH:
                case SqlParser.KW_BUCKET:
                case SqlParser.KW_BUCKETS:
                case SqlParser.KW_BY:
                case SqlParser.KW_BYTE:
                case SqlParser.KW_CACHE:
                case SqlParser.KW_CASCADE:
                case SqlParser.KW_CASE:
                case SqlParser.KW_CAST:
                case SqlParser.KW_CATALOG:
                case SqlParser.KW_CATALOGS:
                case SqlParser.KW_CHANGE:
                case SqlParser.KW_CHAR:
                case SqlParser.KW_CHARACTER:
                case SqlParser.KW_CHECK:
                case SqlParser.KW_CLEAR:
                case SqlParser.KW_CLUSTER:
                case SqlParser.KW_CLUSTERED:
                case SqlParser.KW_CODEGEN:
                case SqlParser.KW_COLLATE:
                case SqlParser.KW_COLLECTION:
                case SqlParser.KW_COLUMN:
                case SqlParser.KW_COLUMNS:
                case SqlParser.KW_COMMENT:
                case SqlParser.KW_COMMIT:
                case SqlParser.KW_COMPACT:
                case SqlParser.KW_COMPACTIONS:
                case SqlParser.KW_COMPUTE:
                case SqlParser.KW_CONCATENATE:
                case SqlParser.KW_CONSTRAINT:
                case SqlParser.KW_COST:
                case SqlParser.KW_CREATE:
                case SqlParser.KW_CROSS:
                case SqlParser.KW_CUBE:
                case SqlParser.KW_CURRENT:
                case SqlParser.KW_CURRENT_DATE:
                case SqlParser.KW_CURRENT_TIME:
                case SqlParser.KW_CURRENT_TIMESTAMP:
                case SqlParser.KW_CURRENT_USER:
                case SqlParser.KW_DAY:
                case SqlParser.KW_DAYS:
                case SqlParser.KW_DAYOFYEAR:
                case SqlParser.KW_DATA:
                case SqlParser.KW_DATE:
                case SqlParser.KW_DATABASE:
                case SqlParser.KW_DATABASES:
                case SqlParser.KW_DATEADD:
                case SqlParser.KW_DATE_ADD:
                case SqlParser.KW_DATEDIFF:
                case SqlParser.KW_DATE_DIFF:
                case SqlParser.KW_DBPROPERTIES:
                case SqlParser.KW_DEC:
                case SqlParser.KW_DECIMAL:
                case SqlParser.KW_DECLARE:
                case SqlParser.KW_DEFAULT:
                case SqlParser.KW_DEFINED:
                case SqlParser.KW_DELETE:
                case SqlParser.KW_DELIMITED:
                case SqlParser.KW_DESC:
                case SqlParser.KW_DESCRIBE:
                case SqlParser.KW_DFS:
                case SqlParser.KW_DIRECTORIES:
                case SqlParser.KW_DIRECTORY:
                case SqlParser.KW_DISABLE:
                case SqlParser.KW_DISTINCT:
                case SqlParser.KW_DISTRIBUTE:
                case SqlParser.KW_DIV:
                case SqlParser.KW_DOUBLE:
                case SqlParser.KW_DROP:
                case SqlParser.KW_ELSE:
                case SqlParser.KW_ENABLE:
                case SqlParser.KW_END:
                case SqlParser.KW_ESCAPE:
                case SqlParser.KW_ESCAPED:
                case SqlParser.KW_EXCEPT:
                case SqlParser.KW_EXCHANGE:
                case SqlParser.KW_EXCLUDE:
                case SqlParser.KW_EXISTS:
                case SqlParser.KW_EXPLAIN:
                case SqlParser.KW_EXPORT:
                case SqlParser.KW_EXTENDED:
                case SqlParser.KW_EXTERNAL:
                case SqlParser.KW_EXTRACT:
                case SqlParser.KW_FALSE:
                case SqlParser.KW_FETCH:
                case SqlParser.KW_FIELDS:
                case SqlParser.KW_FILTER:
                case SqlParser.KW_FILEFORMAT:
                case SqlParser.KW_FIRST:
                case SqlParser.KW_FLOAT:
                case SqlParser.KW_FOLLOWING:
                case SqlParser.KW_FOR:
                case SqlParser.KW_FOREIGN:
                case SqlParser.KW_FORMAT:
                case SqlParser.KW_FORMATTED:
                case SqlParser.KW_FULL:
                case SqlParser.KW_FUNCTION:
                case SqlParser.KW_FUNCTIONS:
                case SqlParser.KW_GENERATED:
                case SqlParser.KW_GLOBAL:
                case SqlParser.KW_GRANT:
                case SqlParser.KW_GROUP:
                case SqlParser.KW_GROUPING:
                case SqlParser.KW_HAVING:
                case SqlParser.KW_BINARY_HEX:
                case SqlParser.KW_HOUR:
                case SqlParser.KW_HOURS:
                case SqlParser.KW_IDENTIFIER:
                case SqlParser.KW_IF:
                case SqlParser.KW_IGNORE:
                case SqlParser.KW_IMPORT:
                case SqlParser.KW_IN:
                case SqlParser.KW_INCLUDE:
                case SqlParser.KW_INDEX:
                case SqlParser.KW_INDEXES:
                case SqlParser.KW_INNER:
                case SqlParser.KW_INPATH:
                case SqlParser.KW_INPUTFORMAT:
                case SqlParser.KW_INSERT:
                case SqlParser.KW_INTERSECT:
                case SqlParser.KW_INTERVAL:
                case SqlParser.KW_INT:
                case SqlParser.KW_INTEGER:
                case SqlParser.KW_INTO:
                case SqlParser.KW_IS:
                case SqlParser.KW_ITEMS:
                case SqlParser.KW_JOIN:
                case SqlParser.KW_KEYS:
                case SqlParser.KW_LAST:
                case SqlParser.KW_LATERAL:
                case SqlParser.KW_LAZY:
                case SqlParser.KW_LEADING:
                case SqlParser.KW_LEFT:
                case SqlParser.KW_LIFECYCLE:
                case SqlParser.KW_LIKE:
                case SqlParser.KW_ILIKE:
                case SqlParser.KW_LIMIT:
                case SqlParser.KW_LINES:
                case SqlParser.KW_LIST:
                case SqlParser.KW_LOAD:
                case SqlParser.KW_LOCAL:
                case SqlParser.KW_LOCATION:
                case SqlParser.KW_LOCK:
                case SqlParser.KW_LOCKS:
                case SqlParser.KW_LOGICAL:
                case SqlParser.KW_LONG:
                case SqlParser.KW_MACRO:
                case SqlParser.KW_MAP:
                case SqlParser.KW_MATCHED:
                case SqlParser.KW_MERGE:
                case SqlParser.KW_MICROSECOND:
                case SqlParser.KW_MICROSECONDS:
                case SqlParser.KW_MILLISECOND:
                case SqlParser.KW_MILLISECONDS:
                case SqlParser.KW_MINUTE:
                case SqlParser.KW_MINUTES:
                case SqlParser.KW_MONTH:
                case SqlParser.KW_MONTHS:
                case SqlParser.KW_MSCK:
                case SqlParser.KW_NAME:
                case SqlParser.KW_NAMESPACE:
                case SqlParser.KW_NAMESPACES:
                case SqlParser.KW_NANOSECOND:
                case SqlParser.KW_NANOSECONDS:
                case SqlParser.KW_NATURAL:
                case SqlParser.KW_NO:
                case SqlParser.KW_NOT:
                case SqlParser.KW_NULL:
                case SqlParser.KW_NULLS:
                case SqlParser.KW_NUMERIC:
                case SqlParser.KW_OF:
                case SqlParser.KW_OFFSET:
                case SqlParser.KW_ON:
                case SqlParser.KW_ONLY:
                case SqlParser.KW_OPTIMIZE:
                case SqlParser.KW_OPTION:
                case SqlParser.KW_OPTIONS:
                case SqlParser.KW_OR:
                case SqlParser.KW_ORDER:
                case SqlParser.KW_OUT:
                case SqlParser.KW_OUTER:
                case SqlParser.KW_OUTPUTFORMAT:
                case SqlParser.KW_OVER:
                case SqlParser.KW_OVERLAPS:
                case SqlParser.KW_OVERLAY:
                case SqlParser.KW_OVERWRITE:
                case SqlParser.KW_PARTITION:
                case SqlParser.KW_PARTITIONED:
                case SqlParser.KW_PARTITIONS:
                case SqlParser.KW_PERCENTILE_CONT:
                case SqlParser.KW_PERCENTILE_DISC:
                case SqlParser.KW_PERCENTLIT:
                case SqlParser.KW_PIVOT:
                case SqlParser.KW_PLACING:
                case SqlParser.KW_POSITION:
                case SqlParser.KW_PRECEDING:
                case SqlParser.KW_PRIMARY:
                case SqlParser.KW_PRINCIPALS:
                case SqlParser.KW_PROPERTIES:
                case SqlParser.KW_PURGE:
                case SqlParser.KW_QUARTER:
                case SqlParser.KW_QUERY:
                case SqlParser.KW_RANGE:
                case SqlParser.KW_REAL:
                case SqlParser.KW_RECORDREADER:
                case SqlParser.KW_RECORDWRITER:
                case SqlParser.KW_RECOVER:
                case SqlParser.KW_REDUCE:
                case SqlParser.KW_REFERENCES:
                case SqlParser.KW_REFRESH:
                case SqlParser.KW_RENAME:
                case SqlParser.KW_REPAIR:
                case SqlParser.KW_REPEATABLE:
                case SqlParser.KW_REPLACE:
                case SqlParser.KW_RESET:
                case SqlParser.KW_RESPECT:
                case SqlParser.KW_RESTRICT:
                case SqlParser.KW_REWRITE:
                case SqlParser.KW_REVOKE:
                case SqlParser.KW_RIGHT:
                case SqlParser.KW_RLIKE:
                case SqlParser.KW_REGEXP:
                case SqlParser.KW_ROLE:
                case SqlParser.KW_ROLES:
                case SqlParser.KW_ROLLBACK:
                case SqlParser.KW_ROLLUP:
                case SqlParser.KW_ROW:
                case SqlParser.KW_ROWS:
                case SqlParser.KW_SECOND:
                case SqlParser.KW_SECONDS:
                case SqlParser.KW_SCHEMA:
                case SqlParser.KW_SCHEMAS:
                case SqlParser.KW_SEMI:
                case SqlParser.KW_SEPARATED:
                case SqlParser.KW_SERDE:
                case SqlParser.KW_SERDEPROPERTIES:
                case SqlParser.KW_SESSION_USER:
                case SqlParser.KW_SET:
                case SqlParser.KW_MINUS:
                case SqlParser.KW_SETS:
                case SqlParser.KW_SHORT:
                case SqlParser.KW_SHOW:
                case SqlParser.KW_SINGLE:
                case SqlParser.KW_SKEWED:
                case SqlParser.KW_SMALLINT:
                case SqlParser.KW_SOME:
                case SqlParser.KW_SORT:
                case SqlParser.KW_SORTED:
                case SqlParser.KW_SOURCE:
                case SqlParser.KW_START:
                case SqlParser.KW_STATISTICS:
                case SqlParser.KW_STORED:
                case SqlParser.KW_STRATIFY:
                case SqlParser.KW_STRING:
                case SqlParser.KW_STRUCT:
                case SqlParser.KW_SUBSTR:
                case SqlParser.KW_SUBSTRING:
                case SqlParser.KW_SYNC:
                case SqlParser.KW_SYSTEM:
                case SqlParser.KW_SYSTEM_TIME:
                case SqlParser.KW_SYSTEM_VERSION:
                case SqlParser.KW_TABLES:
                case SqlParser.KW_TABLESAMPLE:
                case SqlParser.KW_TARGET:
                case SqlParser.KW_TBLPROPERTIES:
                case SqlParser.KW_TEMPORARY:
                case SqlParser.KW_TERMINATED:
                case SqlParser.KW_THEN:
                case SqlParser.KW_TIME:
                case SqlParser.KW_TIMEDIFF:
                case SqlParser.KW_TIMESTAMP:
                case SqlParser.KW_TIMESTAMP_LTZ:
                case SqlParser.KW_TIMESTAMP_NTZ:
                case SqlParser.KW_TIMESTAMPADD:
                case SqlParser.KW_TIMESTAMPDIFF:
                case SqlParser.KW_TINYINT:
                case SqlParser.KW_TO:
                case SqlParser.KW_TOUCH:
                case SqlParser.KW_TRAILING:
                case SqlParser.KW_TRANSACTION:
                case SqlParser.KW_TRANSACTIONS:
                case SqlParser.KW_TRANSFORM:
                case SqlParser.KW_TRIM:
                case SqlParser.KW_TRUE:
                case SqlParser.KW_TRUNCATE:
                case SqlParser.KW_TRY_CAST:
                case SqlParser.KW_TYPE:
                case SqlParser.KW_UNARCHIVE:
                case SqlParser.KW_UNBOUNDED:
                case SqlParser.KW_UNCACHE:
                case SqlParser.KW_UNION:
                case SqlParser.KW_UNIQUE:
                case SqlParser.KW_UNKNOWN:
                case SqlParser.KW_UNLOCK:
                case SqlParser.KW_UNPIVOT:
                case SqlParser.KW_UNSET:
                case SqlParser.KW_UPDATE:
                case SqlParser.KW_USE:
                case SqlParser.KW_USER:
                case SqlParser.KW_USING:
                case SqlParser.KW_VALUES:
                case SqlParser.KW_VARCHAR:
                case SqlParser.KW_VAR:
                case SqlParser.KW_VARIABLE:
                case SqlParser.KW_VERSION:
                case SqlParser.KW_VIEW:
                case SqlParser.KW_VIEWS:
                case SqlParser.KW_VOID:
                case SqlParser.KW_WEEK:
                case SqlParser.KW_WEEKS:
                case SqlParser.KW_WHEN:
                case SqlParser.KW_WHERE:
                case SqlParser.KW_WINDOW:
                case SqlParser.KW_WITH:
                case SqlParser.KW_WITHIN:
                case SqlParser.KW_YEAR:
                case SqlParser.KW_YEARS:
                case SqlParser.KW_ZONE:
                case SqlParser.KW_ZORDER:
                case SqlParser.DOUBLEQUOTED_STRING:
                case SqlParser.IDENTIFIER:
                case SqlParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 1992;
                    this.assignmentList();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedClause(): NotMatchedClauseContext {
        let localContext = new NotMatchedClauseContext(this.context, this.state);
        this.enterRule(localContext, 110, SqlParser.RULE_notMatchedClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1997;
            this.match(SqlParser.KW_WHEN);
            this.state = 1998;
            this.match(SqlParser.KW_NOT);
            this.state = 1999;
            this.match(SqlParser.KW_MATCHED);
            this.state = 2002;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 31) {
                {
                this.state = 2000;
                this.match(SqlParser.KW_BY);
                this.state = 2001;
                this.match(SqlParser.KW_TARGET);
                }
            }

            this.state = 2006;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14) {
                {
                this.state = 2004;
                this.match(SqlParser.KW_AND);
                this.state = 2005;
                localContext._notMatchedCond = this.booleanExpression(0);
                }
            }

            this.state = 2008;
            this.match(SqlParser.KW_THEN);
            this.state = 2009;
            this.notMatchedAction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedBySourceClause(): NotMatchedBySourceClauseContext {
        let localContext = new NotMatchedBySourceClauseContext(this.context, this.state);
        this.enterRule(localContext, 112, SqlParser.RULE_notMatchedBySourceClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2011;
            this.match(SqlParser.KW_WHEN);
            this.state = 2012;
            this.match(SqlParser.KW_NOT);
            this.state = 2013;
            this.match(SqlParser.KW_MATCHED);
            this.state = 2014;
            this.match(SqlParser.KW_BY);
            this.state = 2015;
            this.match(SqlParser.KW_SOURCE);
            this.state = 2018;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14) {
                {
                this.state = 2016;
                this.match(SqlParser.KW_AND);
                this.state = 2017;
                localContext._notMatchedBySourceCond = this.booleanExpression(0);
                }
            }

            this.state = 2020;
            this.match(SqlParser.KW_THEN);
            this.state = 2025;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_DELETE:
                {
                this.state = 2021;
                this.match(SqlParser.KW_DELETE);
                }
                break;
            case SqlParser.KW_UPDATE:
                {
                this.state = 2022;
                this.match(SqlParser.KW_UPDATE);
                this.state = 2023;
                this.match(SqlParser.KW_SET);
                this.state = 2024;
                this.assignmentList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedAction(): NotMatchedActionContext {
        let localContext = new NotMatchedActionContext(this.context, this.state);
        this.enterRule(localContext, 114, SqlParser.RULE_notMatchedAction);
        let _la: number;
        try {
            this.state = 2045;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 300, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2027;
                this.match(SqlParser.KW_INSERT);
                this.state = 2028;
                this.match(SqlParser.ASTERISK);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2029;
                this.match(SqlParser.KW_INSERT);
                this.state = 2030;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2031;
                this.multipartIdentifierList();
                this.state = 2032;
                this.match(SqlParser.RIGHT_PAREN);
                this.state = 2033;
                this.match(SqlParser.KW_VALUES);
                this.state = 2034;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2035;
                this.expression();
                this.state = 2040;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2036;
                    this.match(SqlParser.COMMA);
                    this.state = 2037;
                    this.expression();
                    }
                    }
                    this.state = 2042;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2043;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentList(): AssignmentListContext {
        let localContext = new AssignmentListContext(this.context, this.state);
        this.enterRule(localContext, 116, SqlParser.RULE_assignmentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2047;
            this.assignment();
            this.state = 2052;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2048;
                this.match(SqlParser.COMMA);
                this.state = 2049;
                this.assignment();
                }
                }
                this.state = 2054;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignment(): AssignmentContext {
        let localContext = new AssignmentContext(this.context, this.state);
        this.enterRule(localContext, 118, SqlParser.RULE_assignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2055;
            localContext._key = this.multipartIdentifier();
            this.state = 2056;
            this.match(SqlParser.EQ);
            this.state = 2057;
            localContext._value = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 120, SqlParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2059;
            this.match(SqlParser.KW_WHERE);
            this.state = 2060;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 122, SqlParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2062;
            this.match(SqlParser.KW_HAVING);
            this.state = 2063;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hint(): HintContext {
        let localContext = new HintContext(this.context, this.state);
        this.enterRule(localContext, 124, SqlParser.RULE_hint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2065;
            this.match(SqlParser.HENT_START);
            this.state = 2066;
            localContext._hintStatement = this.hintStatement();
            localContext._hintStatements.push(localContext._hintStatement);
            this.state = 2073;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967056) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967231) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967279) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & 3073) !== 0)) {
                {
                {
                this.state = 2068;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 2067;
                    this.match(SqlParser.COMMA);
                    }
                }

                this.state = 2070;
                localContext._hintStatement = this.hintStatement();
                localContext._hintStatements.push(localContext._hintStatement);
                }
                }
                this.state = 2075;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2076;
            this.match(SqlParser.HENT_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintStatement(): HintStatementContext {
        let localContext = new HintStatementContext(this.context, this.state);
        this.enterRule(localContext, 126, SqlParser.RULE_hintStatement);
        let _la: number;
        try {
            this.state = 2091;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 305, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2078;
                localContext._hintName = this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2079;
                localContext._hintName = this.identifier();
                this.state = 2080;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2081;
                localContext._primaryExpression = this.primaryExpression(0);
                localContext._parameters.push(localContext._primaryExpression);
                this.state = 2086;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2082;
                    this.match(SqlParser.COMMA);
                    this.state = 2083;
                    localContext._primaryExpression = this.primaryExpression(0);
                    localContext._parameters.push(localContext._primaryExpression);
                    }
                    }
                    this.state = 2088;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2089;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 128, SqlParser.RULE_fromClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2093;
            this.match(SqlParser.KW_FROM);
            this.state = 2094;
            this.relation();
            this.state = 2099;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 306, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2095;
                    this.match(SqlParser.COMMA);
                    this.state = 2096;
                    this.relation();
                    }
                    }
                }
                this.state = 2101;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 306, this.context);
            }
            this.state = 2105;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 307, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2102;
                    this.lateralView();
                    }
                    }
                }
                this.state = 2107;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 307, this.context);
            }
            this.state = 2109;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 308, this.context) ) {
            case 1:
                {
                this.state = 2108;
                this.pivotClause();
                }
                break;
            }
            this.state = 2112;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 309, this.context) ) {
            case 1:
                {
                this.state = 2111;
                this.unpivotClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public temporalClause(): TemporalClauseContext {
        let localContext = new TemporalClauseContext(this.context, this.state);
        this.enterRule(localContext, 130, SqlParser.RULE_temporalClause);
        let _la: number;
        try {
            this.state = 2131;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 313, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2115;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 2114;
                    this.match(SqlParser.KW_FOR);
                    }
                }

                this.state = 2117;
                _la = this.tokenStream.LA(1);
                if(!(_la === 291 || _la === 336)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2118;
                this.match(SqlParser.KW_AS);
                this.state = 2119;
                this.match(SqlParser.KW_OF);
                this.state = 2122;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.INTEGER_VALUE:
                    {
                    this.state = 2120;
                    this.match(SqlParser.INTEGER_VALUE);
                    }
                    break;
                case SqlParser.STRING_LITERAL:
                case SqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 2121;
                    this.stringLit();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2125;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 2124;
                    this.match(SqlParser.KW_FOR);
                    }
                }

                this.state = 2127;
                _la = this.tokenStream.LA(1);
                if(!(_la === 290 || _la === 302)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2128;
                this.match(SqlParser.KW_AS);
                this.state = 2129;
                this.match(SqlParser.KW_OF);
                this.state = 2130;
                localContext._timestamp = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregationClause(): AggregationClauseContext {
        let localContext = new AggregationClauseContext(this.context, this.state);
        this.enterRule(localContext, 132, SqlParser.RULE_aggregationClause);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2172;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2133;
                this.match(SqlParser.KW_GROUP);
                this.state = 2134;
                this.match(SqlParser.KW_BY);
                this.state = 2135;
                localContext._groupByClause = this.groupByClause();
                localContext._groupingExpressionsWithGroupingAnalytics.push(localContext._groupByClause);
                this.state = 2140;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 314, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2136;
                        this.match(SqlParser.COMMA);
                        this.state = 2137;
                        localContext._groupByClause = this.groupByClause();
                        localContext._groupingExpressionsWithGroupingAnalytics.push(localContext._groupByClause);
                        }
                        }
                    }
                    this.state = 2142;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 314, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2143;
                this.match(SqlParser.KW_GROUP);
                this.state = 2144;
                this.match(SqlParser.KW_BY);
                this.state = 2145;
                localContext._expression = this.expression();
                localContext._groupingExpressions.push(localContext._expression);
                this.state = 2150;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 315, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2146;
                        this.match(SqlParser.COMMA);
                        this.state = 2147;
                        localContext._expression = this.expression();
                        localContext._groupingExpressions.push(localContext._expression);
                        }
                        }
                    }
                    this.state = 2152;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 315, this.context);
                }
                this.state = 2170;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 317, this.context) ) {
                case 1:
                    {
                    this.state = 2153;
                    this.match(SqlParser.KW_WITH);
                    this.state = 2154;
                    localContext._kind = this.match(SqlParser.KW_ROLLUP);
                    }
                    break;
                case 2:
                    {
                    this.state = 2155;
                    this.match(SqlParser.KW_WITH);
                    this.state = 2156;
                    localContext._kind = this.match(SqlParser.KW_CUBE);
                    }
                    break;
                case 3:
                    {
                    this.state = 2157;
                    localContext._kind = this.match(SqlParser.KW_GROUPING);
                    this.state = 2158;
                    this.match(SqlParser.KW_SETS);
                    this.state = 2159;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 2160;
                    this.groupingSet();
                    this.state = 2165;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2161;
                        this.match(SqlParser.COMMA);
                        this.state = 2162;
                        this.groupingSet();
                        }
                        }
                        this.state = 2167;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2168;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 134, SqlParser.RULE_groupByClause);
        try {
            this.state = 2177;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 319, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2174;
                this.columnName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2175;
                this.groupingAnalytics();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2176;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingAnalytics(): GroupingAnalyticsContext {
        let localContext = new GroupingAnalyticsContext(this.context, this.state);
        this.enterRule(localContext, 136, SqlParser.RULE_groupingAnalytics);
        let _la: number;
        try {
            this.state = 2210;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_CUBE:
            case SqlParser.KW_ROLLUP:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2179;
                _la = this.tokenStream.LA(1);
                if(!(_la === 61 || _la === 255)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2180;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2181;
                this.groupingSet();
                this.state = 2186;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2182;
                    this.match(SqlParser.COMMA);
                    this.state = 2183;
                    this.groupingSet();
                    }
                    }
                    this.state = 2188;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2189;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case SqlParser.KW_GROUPING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2191;
                this.match(SqlParser.KW_GROUPING);
                this.state = 2192;
                this.match(SqlParser.KW_SETS);
                this.state = 2193;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2196;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 321, this.context) ) {
                case 1:
                    {
                    this.state = 2194;
                    this.groupingAnalytics();
                    }
                    break;
                case 2:
                    {
                    this.state = 2195;
                    this.groupingSet();
                    }
                    break;
                }
                this.state = 2205;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2198;
                    this.match(SqlParser.COMMA);
                    this.state = 2201;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 322, this.context) ) {
                    case 1:
                        {
                        this.state = 2199;
                        this.groupingAnalytics();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2200;
                        this.groupingSet();
                        }
                        break;
                    }
                    }
                    }
                    this.state = 2207;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2208;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSet(): GroupingSetContext {
        let localContext = new GroupingSetContext(this.context, this.state);
        this.enterRule(localContext, 138, SqlParser.RULE_groupingSet);
        let _la: number;
        try {
            this.state = 2232;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 329, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2212;
                this.columnName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2213;
                this.expression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2214;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2229;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 328, this.context) ) {
                case 1:
                    {
                    this.state = 2217;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 325, this.context) ) {
                    case 1:
                        {
                        this.state = 2215;
                        this.columnName();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2216;
                        this.expression();
                        }
                        break;
                    }
                    this.state = 2226;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2219;
                        this.match(SqlParser.COMMA);
                        this.state = 2222;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 326, this.context) ) {
                        case 1:
                            {
                            this.state = 2220;
                            this.columnName();
                            }
                            break;
                        case 2:
                            {
                            this.state = 2221;
                            this.expression();
                            }
                            break;
                        }
                        }
                        }
                        this.state = 2228;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                }
                this.state = 2231;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotClause(): PivotClauseContext {
        let localContext = new PivotClauseContext(this.context, this.state);
        this.enterRule(localContext, 140, SqlParser.RULE_pivotClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2234;
            this.match(SqlParser.KW_PIVOT);
            this.state = 2235;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2236;
            localContext._aggregates = this.namedExpressionSeq();
            this.state = 2237;
            this.match(SqlParser.KW_FOR);
            this.state = 2238;
            this.pivotColumn();
            this.state = 2239;
            this.match(SqlParser.KW_IN);
            this.state = 2240;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2241;
            localContext._pivotValue = this.pivotValue();
            localContext._pivotValues.push(localContext._pivotValue);
            this.state = 2246;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2242;
                this.match(SqlParser.COMMA);
                this.state = 2243;
                localContext._pivotValue = this.pivotValue();
                localContext._pivotValues.push(localContext._pivotValue);
                }
                }
                this.state = 2248;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2249;
            this.match(SqlParser.RIGHT_PAREN);
            this.state = 2250;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotColumn(): PivotColumnContext {
        let localContext = new PivotColumnContext(this.context, this.state);
        this.enterRule(localContext, 142, SqlParser.RULE_pivotColumn);
        let _la: number;
        try {
            this.state = 2264;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_ADD:
            case SqlParser.KW_AFTER:
            case SqlParser.KW_ALL:
            case SqlParser.KW_ALTER:
            case SqlParser.KW_ALWAYS:
            case SqlParser.KW_ANALYZE:
            case SqlParser.KW_AND:
            case SqlParser.KW_ANTI:
            case SqlParser.KW_ANY:
            case SqlParser.KW_ANY_VALUE:
            case SqlParser.KW_ARCHIVE:
            case SqlParser.KW_ARRAY:
            case SqlParser.KW_AS:
            case SqlParser.KW_ASC:
            case SqlParser.KW_AT:
            case SqlParser.KW_AUTHORIZATION:
            case SqlParser.KW_BETWEEN:
            case SqlParser.KW_BIGINT:
            case SqlParser.KW_BINARY:
            case SqlParser.KW_BOOLEAN:
            case SqlParser.KW_BOTH:
            case SqlParser.KW_BUCKET:
            case SqlParser.KW_BUCKETS:
            case SqlParser.KW_BY:
            case SqlParser.KW_BYTE:
            case SqlParser.KW_CACHE:
            case SqlParser.KW_CASCADE:
            case SqlParser.KW_CASE:
            case SqlParser.KW_CAST:
            case SqlParser.KW_CATALOG:
            case SqlParser.KW_CATALOGS:
            case SqlParser.KW_CHANGE:
            case SqlParser.KW_CHAR:
            case SqlParser.KW_CHARACTER:
            case SqlParser.KW_CHECK:
            case SqlParser.KW_CLEAR:
            case SqlParser.KW_CLUSTER:
            case SqlParser.KW_CLUSTERED:
            case SqlParser.KW_CODEGEN:
            case SqlParser.KW_COLLATE:
            case SqlParser.KW_COLLECTION:
            case SqlParser.KW_COLUMN:
            case SqlParser.KW_COLUMNS:
            case SqlParser.KW_COMMENT:
            case SqlParser.KW_COMMIT:
            case SqlParser.KW_COMPACT:
            case SqlParser.KW_COMPACTIONS:
            case SqlParser.KW_COMPUTE:
            case SqlParser.KW_CONCATENATE:
            case SqlParser.KW_CONSTRAINT:
            case SqlParser.KW_COST:
            case SqlParser.KW_CREATE:
            case SqlParser.KW_CROSS:
            case SqlParser.KW_CUBE:
            case SqlParser.KW_CURRENT:
            case SqlParser.KW_CURRENT_DATE:
            case SqlParser.KW_CURRENT_TIME:
            case SqlParser.KW_CURRENT_TIMESTAMP:
            case SqlParser.KW_CURRENT_USER:
            case SqlParser.KW_DAY:
            case SqlParser.KW_DAYS:
            case SqlParser.KW_DAYOFYEAR:
            case SqlParser.KW_DATA:
            case SqlParser.KW_DATE:
            case SqlParser.KW_DATABASE:
            case SqlParser.KW_DATABASES:
            case SqlParser.KW_DATEADD:
            case SqlParser.KW_DATE_ADD:
            case SqlParser.KW_DATEDIFF:
            case SqlParser.KW_DATE_DIFF:
            case SqlParser.KW_DBPROPERTIES:
            case SqlParser.KW_DEC:
            case SqlParser.KW_DECIMAL:
            case SqlParser.KW_DECLARE:
            case SqlParser.KW_DEFAULT:
            case SqlParser.KW_DEFINED:
            case SqlParser.KW_DELETE:
            case SqlParser.KW_DELIMITED:
            case SqlParser.KW_DESC:
            case SqlParser.KW_DESCRIBE:
            case SqlParser.KW_DFS:
            case SqlParser.KW_DIRECTORIES:
            case SqlParser.KW_DIRECTORY:
            case SqlParser.KW_DISABLE:
            case SqlParser.KW_DISTINCT:
            case SqlParser.KW_DISTRIBUTE:
            case SqlParser.KW_DIV:
            case SqlParser.KW_DOUBLE:
            case SqlParser.KW_DROP:
            case SqlParser.KW_ELSE:
            case SqlParser.KW_ENABLE:
            case SqlParser.KW_END:
            case SqlParser.KW_ESCAPE:
            case SqlParser.KW_ESCAPED:
            case SqlParser.KW_EXCEPT:
            case SqlParser.KW_EXCHANGE:
            case SqlParser.KW_EXCLUDE:
            case SqlParser.KW_EXISTS:
            case SqlParser.KW_EXPLAIN:
            case SqlParser.KW_EXPORT:
            case SqlParser.KW_EXTENDED:
            case SqlParser.KW_EXTERNAL:
            case SqlParser.KW_EXTRACT:
            case SqlParser.KW_FALSE:
            case SqlParser.KW_FETCH:
            case SqlParser.KW_FIELDS:
            case SqlParser.KW_FILTER:
            case SqlParser.KW_FILEFORMAT:
            case SqlParser.KW_FIRST:
            case SqlParser.KW_FLOAT:
            case SqlParser.KW_FOLLOWING:
            case SqlParser.KW_FOR:
            case SqlParser.KW_FOREIGN:
            case SqlParser.KW_FORMAT:
            case SqlParser.KW_FORMATTED:
            case SqlParser.KW_FULL:
            case SqlParser.KW_FUNCTION:
            case SqlParser.KW_FUNCTIONS:
            case SqlParser.KW_GENERATED:
            case SqlParser.KW_GLOBAL:
            case SqlParser.KW_GRANT:
            case SqlParser.KW_GROUP:
            case SqlParser.KW_GROUPING:
            case SqlParser.KW_HAVING:
            case SqlParser.KW_BINARY_HEX:
            case SqlParser.KW_HOUR:
            case SqlParser.KW_HOURS:
            case SqlParser.KW_IDENTIFIER:
            case SqlParser.KW_IF:
            case SqlParser.KW_IGNORE:
            case SqlParser.KW_IMPORT:
            case SqlParser.KW_IN:
            case SqlParser.KW_INCLUDE:
            case SqlParser.KW_INDEX:
            case SqlParser.KW_INDEXES:
            case SqlParser.KW_INNER:
            case SqlParser.KW_INPATH:
            case SqlParser.KW_INPUTFORMAT:
            case SqlParser.KW_INSERT:
            case SqlParser.KW_INTERSECT:
            case SqlParser.KW_INTERVAL:
            case SqlParser.KW_INT:
            case SqlParser.KW_INTEGER:
            case SqlParser.KW_INTO:
            case SqlParser.KW_IS:
            case SqlParser.KW_ITEMS:
            case SqlParser.KW_JOIN:
            case SqlParser.KW_KEYS:
            case SqlParser.KW_LAST:
            case SqlParser.KW_LATERAL:
            case SqlParser.KW_LAZY:
            case SqlParser.KW_LEADING:
            case SqlParser.KW_LEFT:
            case SqlParser.KW_LIFECYCLE:
            case SqlParser.KW_LIKE:
            case SqlParser.KW_ILIKE:
            case SqlParser.KW_LIMIT:
            case SqlParser.KW_LINES:
            case SqlParser.KW_LIST:
            case SqlParser.KW_LOAD:
            case SqlParser.KW_LOCAL:
            case SqlParser.KW_LOCATION:
            case SqlParser.KW_LOCK:
            case SqlParser.KW_LOCKS:
            case SqlParser.KW_LOGICAL:
            case SqlParser.KW_LONG:
            case SqlParser.KW_MACRO:
            case SqlParser.KW_MAP:
            case SqlParser.KW_MATCHED:
            case SqlParser.KW_MERGE:
            case SqlParser.KW_MICROSECOND:
            case SqlParser.KW_MICROSECONDS:
            case SqlParser.KW_MILLISECOND:
            case SqlParser.KW_MILLISECONDS:
            case SqlParser.KW_MINUTE:
            case SqlParser.KW_MINUTES:
            case SqlParser.KW_MONTH:
            case SqlParser.KW_MONTHS:
            case SqlParser.KW_MSCK:
            case SqlParser.KW_NAME:
            case SqlParser.KW_NAMESPACE:
            case SqlParser.KW_NAMESPACES:
            case SqlParser.KW_NANOSECOND:
            case SqlParser.KW_NANOSECONDS:
            case SqlParser.KW_NATURAL:
            case SqlParser.KW_NO:
            case SqlParser.KW_NOT:
            case SqlParser.KW_NULL:
            case SqlParser.KW_NULLS:
            case SqlParser.KW_NUMERIC:
            case SqlParser.KW_OF:
            case SqlParser.KW_OFFSET:
            case SqlParser.KW_ON:
            case SqlParser.KW_ONLY:
            case SqlParser.KW_OPTIMIZE:
            case SqlParser.KW_OPTION:
            case SqlParser.KW_OPTIONS:
            case SqlParser.KW_OR:
            case SqlParser.KW_ORDER:
            case SqlParser.KW_OUT:
            case SqlParser.KW_OUTER:
            case SqlParser.KW_OUTPUTFORMAT:
            case SqlParser.KW_OVER:
            case SqlParser.KW_OVERLAPS:
            case SqlParser.KW_OVERLAY:
            case SqlParser.KW_OVERWRITE:
            case SqlParser.KW_PARTITION:
            case SqlParser.KW_PARTITIONED:
            case SqlParser.KW_PARTITIONS:
            case SqlParser.KW_PERCENTILE_CONT:
            case SqlParser.KW_PERCENTILE_DISC:
            case SqlParser.KW_PERCENTLIT:
            case SqlParser.KW_PIVOT:
            case SqlParser.KW_PLACING:
            case SqlParser.KW_POSITION:
            case SqlParser.KW_PRECEDING:
            case SqlParser.KW_PRIMARY:
            case SqlParser.KW_PRINCIPALS:
            case SqlParser.KW_PROPERTIES:
            case SqlParser.KW_PURGE:
            case SqlParser.KW_QUARTER:
            case SqlParser.KW_QUERY:
            case SqlParser.KW_RANGE:
            case SqlParser.KW_REAL:
            case SqlParser.KW_RECORDREADER:
            case SqlParser.KW_RECORDWRITER:
            case SqlParser.KW_RECOVER:
            case SqlParser.KW_REDUCE:
            case SqlParser.KW_REFERENCES:
            case SqlParser.KW_REFRESH:
            case SqlParser.KW_RENAME:
            case SqlParser.KW_REPAIR:
            case SqlParser.KW_REPEATABLE:
            case SqlParser.KW_REPLACE:
            case SqlParser.KW_RESET:
            case SqlParser.KW_RESPECT:
            case SqlParser.KW_RESTRICT:
            case SqlParser.KW_REWRITE:
            case SqlParser.KW_REVOKE:
            case SqlParser.KW_RIGHT:
            case SqlParser.KW_RLIKE:
            case SqlParser.KW_REGEXP:
            case SqlParser.KW_ROLE:
            case SqlParser.KW_ROLES:
            case SqlParser.KW_ROLLBACK:
            case SqlParser.KW_ROLLUP:
            case SqlParser.KW_ROW:
            case SqlParser.KW_ROWS:
            case SqlParser.KW_SECOND:
            case SqlParser.KW_SECONDS:
            case SqlParser.KW_SCHEMA:
            case SqlParser.KW_SCHEMAS:
            case SqlParser.KW_SEMI:
            case SqlParser.KW_SEPARATED:
            case SqlParser.KW_SERDE:
            case SqlParser.KW_SERDEPROPERTIES:
            case SqlParser.KW_SESSION_USER:
            case SqlParser.KW_SET:
            case SqlParser.KW_MINUS:
            case SqlParser.KW_SETS:
            case SqlParser.KW_SHORT:
            case SqlParser.KW_SHOW:
            case SqlParser.KW_SINGLE:
            case SqlParser.KW_SKEWED:
            case SqlParser.KW_SMALLINT:
            case SqlParser.KW_SOME:
            case SqlParser.KW_SORT:
            case SqlParser.KW_SORTED:
            case SqlParser.KW_SOURCE:
            case SqlParser.KW_START:
            case SqlParser.KW_STATISTICS:
            case SqlParser.KW_STORED:
            case SqlParser.KW_STRATIFY:
            case SqlParser.KW_STRING:
            case SqlParser.KW_STRUCT:
            case SqlParser.KW_SUBSTR:
            case SqlParser.KW_SUBSTRING:
            case SqlParser.KW_SYNC:
            case SqlParser.KW_SYSTEM:
            case SqlParser.KW_SYSTEM_TIME:
            case SqlParser.KW_SYSTEM_VERSION:
            case SqlParser.KW_TABLES:
            case SqlParser.KW_TABLESAMPLE:
            case SqlParser.KW_TARGET:
            case SqlParser.KW_TBLPROPERTIES:
            case SqlParser.KW_TEMPORARY:
            case SqlParser.KW_TERMINATED:
            case SqlParser.KW_THEN:
            case SqlParser.KW_TIME:
            case SqlParser.KW_TIMEDIFF:
            case SqlParser.KW_TIMESTAMP:
            case SqlParser.KW_TIMESTAMP_LTZ:
            case SqlParser.KW_TIMESTAMP_NTZ:
            case SqlParser.KW_TIMESTAMPADD:
            case SqlParser.KW_TIMESTAMPDIFF:
            case SqlParser.KW_TINYINT:
            case SqlParser.KW_TO:
            case SqlParser.KW_TOUCH:
            case SqlParser.KW_TRAILING:
            case SqlParser.KW_TRANSACTION:
            case SqlParser.KW_TRANSACTIONS:
            case SqlParser.KW_TRANSFORM:
            case SqlParser.KW_TRIM:
            case SqlParser.KW_TRUE:
            case SqlParser.KW_TRUNCATE:
            case SqlParser.KW_TRY_CAST:
            case SqlParser.KW_TYPE:
            case SqlParser.KW_UNARCHIVE:
            case SqlParser.KW_UNBOUNDED:
            case SqlParser.KW_UNCACHE:
            case SqlParser.KW_UNION:
            case SqlParser.KW_UNIQUE:
            case SqlParser.KW_UNKNOWN:
            case SqlParser.KW_UNLOCK:
            case SqlParser.KW_UNPIVOT:
            case SqlParser.KW_UNSET:
            case SqlParser.KW_UPDATE:
            case SqlParser.KW_USE:
            case SqlParser.KW_USER:
            case SqlParser.KW_USING:
            case SqlParser.KW_VALUES:
            case SqlParser.KW_VARCHAR:
            case SqlParser.KW_VAR:
            case SqlParser.KW_VARIABLE:
            case SqlParser.KW_VERSION:
            case SqlParser.KW_VIEW:
            case SqlParser.KW_VIEWS:
            case SqlParser.KW_VOID:
            case SqlParser.KW_WEEK:
            case SqlParser.KW_WEEKS:
            case SqlParser.KW_WHEN:
            case SqlParser.KW_WHERE:
            case SqlParser.KW_WINDOW:
            case SqlParser.KW_WITH:
            case SqlParser.KW_WITHIN:
            case SqlParser.KW_YEAR:
            case SqlParser.KW_YEARS:
            case SqlParser.KW_ZONE:
            case SqlParser.KW_ZORDER:
            case SqlParser.DOUBLEQUOTED_STRING:
            case SqlParser.IDENTIFIER:
            case SqlParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2252;
                localContext._identifier = this.identifier();
                localContext._identifiers.push(localContext._identifier);
                }
                break;
            case SqlParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2253;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2254;
                localContext._identifier = this.identifier();
                localContext._identifiers.push(localContext._identifier);
                this.state = 2259;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2255;
                    this.match(SqlParser.COMMA);
                    this.state = 2256;
                    localContext._identifier = this.identifier();
                    localContext._identifiers.push(localContext._identifier);
                    }
                    }
                    this.state = 2261;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2262;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotValue(): PivotValueContext {
        let localContext = new PivotValueContext(this.context, this.state);
        this.enterRule(localContext, 144, SqlParser.RULE_pivotValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2266;
            this.expression();
            this.state = 2271;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967231) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967279) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & 3073) !== 0)) {
                {
                this.state = 2268;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 333, this.context) ) {
                case 1:
                    {
                    this.state = 2267;
                    this.match(SqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2270;
                this.identifier();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotClause(): UnpivotClauseContext {
        let localContext = new UnpivotClauseContext(this.context, this.state);
        this.enterRule(localContext, 146, SqlParser.RULE_unpivotClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2273;
            this.match(SqlParser.KW_UNPIVOT);
            this.state = 2276;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 104 || _la === 141) {
                {
                this.state = 2274;
                _la = this.tokenStream.LA(1);
                if(!(_la === 104 || _la === 141)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2275;
                this.match(SqlParser.KW_NULLS);
                }
            }

            this.state = 2278;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2281;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_ADD:
            case SqlParser.KW_AFTER:
            case SqlParser.KW_ALL:
            case SqlParser.KW_ALTER:
            case SqlParser.KW_ALWAYS:
            case SqlParser.KW_ANALYZE:
            case SqlParser.KW_AND:
            case SqlParser.KW_ANTI:
            case SqlParser.KW_ANY:
            case SqlParser.KW_ANY_VALUE:
            case SqlParser.KW_ARCHIVE:
            case SqlParser.KW_ARRAY:
            case SqlParser.KW_AS:
            case SqlParser.KW_ASC:
            case SqlParser.KW_AT:
            case SqlParser.KW_AUTHORIZATION:
            case SqlParser.KW_BETWEEN:
            case SqlParser.KW_BIGINT:
            case SqlParser.KW_BINARY:
            case SqlParser.KW_BOOLEAN:
            case SqlParser.KW_BOTH:
            case SqlParser.KW_BUCKET:
            case SqlParser.KW_BUCKETS:
            case SqlParser.KW_BY:
            case SqlParser.KW_BYTE:
            case SqlParser.KW_CACHE:
            case SqlParser.KW_CASCADE:
            case SqlParser.KW_CASE:
            case SqlParser.KW_CAST:
            case SqlParser.KW_CATALOG:
            case SqlParser.KW_CATALOGS:
            case SqlParser.KW_CHANGE:
            case SqlParser.KW_CHAR:
            case SqlParser.KW_CHARACTER:
            case SqlParser.KW_CHECK:
            case SqlParser.KW_CLEAR:
            case SqlParser.KW_CLUSTER:
            case SqlParser.KW_CLUSTERED:
            case SqlParser.KW_CODEGEN:
            case SqlParser.KW_COLLATE:
            case SqlParser.KW_COLLECTION:
            case SqlParser.KW_COLUMN:
            case SqlParser.KW_COLUMNS:
            case SqlParser.KW_COMMENT:
            case SqlParser.KW_COMMIT:
            case SqlParser.KW_COMPACT:
            case SqlParser.KW_COMPACTIONS:
            case SqlParser.KW_COMPUTE:
            case SqlParser.KW_CONCATENATE:
            case SqlParser.KW_CONSTRAINT:
            case SqlParser.KW_COST:
            case SqlParser.KW_CREATE:
            case SqlParser.KW_CROSS:
            case SqlParser.KW_CUBE:
            case SqlParser.KW_CURRENT:
            case SqlParser.KW_CURRENT_DATE:
            case SqlParser.KW_CURRENT_TIME:
            case SqlParser.KW_CURRENT_TIMESTAMP:
            case SqlParser.KW_CURRENT_USER:
            case SqlParser.KW_DAY:
            case SqlParser.KW_DAYS:
            case SqlParser.KW_DAYOFYEAR:
            case SqlParser.KW_DATA:
            case SqlParser.KW_DATE:
            case SqlParser.KW_DATABASE:
            case SqlParser.KW_DATABASES:
            case SqlParser.KW_DATEADD:
            case SqlParser.KW_DATE_ADD:
            case SqlParser.KW_DATEDIFF:
            case SqlParser.KW_DATE_DIFF:
            case SqlParser.KW_DBPROPERTIES:
            case SqlParser.KW_DEC:
            case SqlParser.KW_DECIMAL:
            case SqlParser.KW_DECLARE:
            case SqlParser.KW_DEFAULT:
            case SqlParser.KW_DEFINED:
            case SqlParser.KW_DELETE:
            case SqlParser.KW_DELIMITED:
            case SqlParser.KW_DESC:
            case SqlParser.KW_DESCRIBE:
            case SqlParser.KW_DFS:
            case SqlParser.KW_DIRECTORIES:
            case SqlParser.KW_DIRECTORY:
            case SqlParser.KW_DISABLE:
            case SqlParser.KW_DISTINCT:
            case SqlParser.KW_DISTRIBUTE:
            case SqlParser.KW_DIV:
            case SqlParser.KW_DOUBLE:
            case SqlParser.KW_DROP:
            case SqlParser.KW_ELSE:
            case SqlParser.KW_ENABLE:
            case SqlParser.KW_END:
            case SqlParser.KW_ESCAPE:
            case SqlParser.KW_ESCAPED:
            case SqlParser.KW_EXCEPT:
            case SqlParser.KW_EXCHANGE:
            case SqlParser.KW_EXCLUDE:
            case SqlParser.KW_EXISTS:
            case SqlParser.KW_EXPLAIN:
            case SqlParser.KW_EXPORT:
            case SqlParser.KW_EXTENDED:
            case SqlParser.KW_EXTERNAL:
            case SqlParser.KW_EXTRACT:
            case SqlParser.KW_FALSE:
            case SqlParser.KW_FETCH:
            case SqlParser.KW_FIELDS:
            case SqlParser.KW_FILTER:
            case SqlParser.KW_FILEFORMAT:
            case SqlParser.KW_FIRST:
            case SqlParser.KW_FLOAT:
            case SqlParser.KW_FOLLOWING:
            case SqlParser.KW_FOR:
            case SqlParser.KW_FOREIGN:
            case SqlParser.KW_FORMAT:
            case SqlParser.KW_FORMATTED:
            case SqlParser.KW_FULL:
            case SqlParser.KW_FUNCTION:
            case SqlParser.KW_FUNCTIONS:
            case SqlParser.KW_GENERATED:
            case SqlParser.KW_GLOBAL:
            case SqlParser.KW_GRANT:
            case SqlParser.KW_GROUP:
            case SqlParser.KW_GROUPING:
            case SqlParser.KW_HAVING:
            case SqlParser.KW_BINARY_HEX:
            case SqlParser.KW_HOUR:
            case SqlParser.KW_HOURS:
            case SqlParser.KW_IDENTIFIER:
            case SqlParser.KW_IF:
            case SqlParser.KW_IGNORE:
            case SqlParser.KW_IMPORT:
            case SqlParser.KW_IN:
            case SqlParser.KW_INCLUDE:
            case SqlParser.KW_INDEX:
            case SqlParser.KW_INDEXES:
            case SqlParser.KW_INNER:
            case SqlParser.KW_INPATH:
            case SqlParser.KW_INPUTFORMAT:
            case SqlParser.KW_INSERT:
            case SqlParser.KW_INTERSECT:
            case SqlParser.KW_INTERVAL:
            case SqlParser.KW_INT:
            case SqlParser.KW_INTEGER:
            case SqlParser.KW_INTO:
            case SqlParser.KW_IS:
            case SqlParser.KW_ITEMS:
            case SqlParser.KW_JOIN:
            case SqlParser.KW_KEYS:
            case SqlParser.KW_LAST:
            case SqlParser.KW_LATERAL:
            case SqlParser.KW_LAZY:
            case SqlParser.KW_LEADING:
            case SqlParser.KW_LEFT:
            case SqlParser.KW_LIFECYCLE:
            case SqlParser.KW_LIKE:
            case SqlParser.KW_ILIKE:
            case SqlParser.KW_LIMIT:
            case SqlParser.KW_LINES:
            case SqlParser.KW_LIST:
            case SqlParser.KW_LOAD:
            case SqlParser.KW_LOCAL:
            case SqlParser.KW_LOCATION:
            case SqlParser.KW_LOCK:
            case SqlParser.KW_LOCKS:
            case SqlParser.KW_LOGICAL:
            case SqlParser.KW_LONG:
            case SqlParser.KW_MACRO:
            case SqlParser.KW_MAP:
            case SqlParser.KW_MATCHED:
            case SqlParser.KW_MERGE:
            case SqlParser.KW_MICROSECOND:
            case SqlParser.KW_MICROSECONDS:
            case SqlParser.KW_MILLISECOND:
            case SqlParser.KW_MILLISECONDS:
            case SqlParser.KW_MINUTE:
            case SqlParser.KW_MINUTES:
            case SqlParser.KW_MONTH:
            case SqlParser.KW_MONTHS:
            case SqlParser.KW_MSCK:
            case SqlParser.KW_NAME:
            case SqlParser.KW_NAMESPACE:
            case SqlParser.KW_NAMESPACES:
            case SqlParser.KW_NANOSECOND:
            case SqlParser.KW_NANOSECONDS:
            case SqlParser.KW_NATURAL:
            case SqlParser.KW_NO:
            case SqlParser.KW_NOT:
            case SqlParser.KW_NULL:
            case SqlParser.KW_NULLS:
            case SqlParser.KW_NUMERIC:
            case SqlParser.KW_OF:
            case SqlParser.KW_OFFSET:
            case SqlParser.KW_ON:
            case SqlParser.KW_ONLY:
            case SqlParser.KW_OPTIMIZE:
            case SqlParser.KW_OPTION:
            case SqlParser.KW_OPTIONS:
            case SqlParser.KW_OR:
            case SqlParser.KW_ORDER:
            case SqlParser.KW_OUT:
            case SqlParser.KW_OUTER:
            case SqlParser.KW_OUTPUTFORMAT:
            case SqlParser.KW_OVER:
            case SqlParser.KW_OVERLAPS:
            case SqlParser.KW_OVERLAY:
            case SqlParser.KW_OVERWRITE:
            case SqlParser.KW_PARTITION:
            case SqlParser.KW_PARTITIONED:
            case SqlParser.KW_PARTITIONS:
            case SqlParser.KW_PERCENTILE_CONT:
            case SqlParser.KW_PERCENTILE_DISC:
            case SqlParser.KW_PERCENTLIT:
            case SqlParser.KW_PIVOT:
            case SqlParser.KW_PLACING:
            case SqlParser.KW_POSITION:
            case SqlParser.KW_PRECEDING:
            case SqlParser.KW_PRIMARY:
            case SqlParser.KW_PRINCIPALS:
            case SqlParser.KW_PROPERTIES:
            case SqlParser.KW_PURGE:
            case SqlParser.KW_QUARTER:
            case SqlParser.KW_QUERY:
            case SqlParser.KW_RANGE:
            case SqlParser.KW_REAL:
            case SqlParser.KW_RECORDREADER:
            case SqlParser.KW_RECORDWRITER:
            case SqlParser.KW_RECOVER:
            case SqlParser.KW_REDUCE:
            case SqlParser.KW_REFERENCES:
            case SqlParser.KW_REFRESH:
            case SqlParser.KW_RENAME:
            case SqlParser.KW_REPAIR:
            case SqlParser.KW_REPEATABLE:
            case SqlParser.KW_REPLACE:
            case SqlParser.KW_RESET:
            case SqlParser.KW_RESPECT:
            case SqlParser.KW_RESTRICT:
            case SqlParser.KW_REWRITE:
            case SqlParser.KW_REVOKE:
            case SqlParser.KW_RIGHT:
            case SqlParser.KW_RLIKE:
            case SqlParser.KW_REGEXP:
            case SqlParser.KW_ROLE:
            case SqlParser.KW_ROLES:
            case SqlParser.KW_ROLLBACK:
            case SqlParser.KW_ROLLUP:
            case SqlParser.KW_ROW:
            case SqlParser.KW_ROWS:
            case SqlParser.KW_SECOND:
            case SqlParser.KW_SECONDS:
            case SqlParser.KW_SCHEMA:
            case SqlParser.KW_SCHEMAS:
            case SqlParser.KW_SEMI:
            case SqlParser.KW_SEPARATED:
            case SqlParser.KW_SERDE:
            case SqlParser.KW_SERDEPROPERTIES:
            case SqlParser.KW_SESSION_USER:
            case SqlParser.KW_SET:
            case SqlParser.KW_MINUS:
            case SqlParser.KW_SETS:
            case SqlParser.KW_SHORT:
            case SqlParser.KW_SHOW:
            case SqlParser.KW_SINGLE:
            case SqlParser.KW_SKEWED:
            case SqlParser.KW_SMALLINT:
            case SqlParser.KW_SOME:
            case SqlParser.KW_SORT:
            case SqlParser.KW_SORTED:
            case SqlParser.KW_SOURCE:
            case SqlParser.KW_START:
            case SqlParser.KW_STATISTICS:
            case SqlParser.KW_STORED:
            case SqlParser.KW_STRATIFY:
            case SqlParser.KW_STRING:
            case SqlParser.KW_STRUCT:
            case SqlParser.KW_SUBSTR:
            case SqlParser.KW_SUBSTRING:
            case SqlParser.KW_SYNC:
            case SqlParser.KW_SYSTEM:
            case SqlParser.KW_SYSTEM_TIME:
            case SqlParser.KW_SYSTEM_VERSION:
            case SqlParser.KW_TABLES:
            case SqlParser.KW_TABLESAMPLE:
            case SqlParser.KW_TARGET:
            case SqlParser.KW_TBLPROPERTIES:
            case SqlParser.KW_TEMPORARY:
            case SqlParser.KW_TERMINATED:
            case SqlParser.KW_THEN:
            case SqlParser.KW_TIME:
            case SqlParser.KW_TIMEDIFF:
            case SqlParser.KW_TIMESTAMP:
            case SqlParser.KW_TIMESTAMP_LTZ:
            case SqlParser.KW_TIMESTAMP_NTZ:
            case SqlParser.KW_TIMESTAMPADD:
            case SqlParser.KW_TIMESTAMPDIFF:
            case SqlParser.KW_TINYINT:
            case SqlParser.KW_TO:
            case SqlParser.KW_TOUCH:
            case SqlParser.KW_TRAILING:
            case SqlParser.KW_TRANSACTION:
            case SqlParser.KW_TRANSACTIONS:
            case SqlParser.KW_TRANSFORM:
            case SqlParser.KW_TRIM:
            case SqlParser.KW_TRUE:
            case SqlParser.KW_TRUNCATE:
            case SqlParser.KW_TRY_CAST:
            case SqlParser.KW_TYPE:
            case SqlParser.KW_UNARCHIVE:
            case SqlParser.KW_UNBOUNDED:
            case SqlParser.KW_UNCACHE:
            case SqlParser.KW_UNION:
            case SqlParser.KW_UNIQUE:
            case SqlParser.KW_UNKNOWN:
            case SqlParser.KW_UNLOCK:
            case SqlParser.KW_UNPIVOT:
            case SqlParser.KW_UNSET:
            case SqlParser.KW_UPDATE:
            case SqlParser.KW_USE:
            case SqlParser.KW_USER:
            case SqlParser.KW_USING:
            case SqlParser.KW_VALUES:
            case SqlParser.KW_VARCHAR:
            case SqlParser.KW_VAR:
            case SqlParser.KW_VARIABLE:
            case SqlParser.KW_VERSION:
            case SqlParser.KW_VIEW:
            case SqlParser.KW_VIEWS:
            case SqlParser.KW_VOID:
            case SqlParser.KW_WEEK:
            case SqlParser.KW_WEEKS:
            case SqlParser.KW_WHEN:
            case SqlParser.KW_WHERE:
            case SqlParser.KW_WINDOW:
            case SqlParser.KW_WITH:
            case SqlParser.KW_WITHIN:
            case SqlParser.KW_YEAR:
            case SqlParser.KW_YEARS:
            case SqlParser.KW_ZONE:
            case SqlParser.KW_ZORDER:
            case SqlParser.DOUBLEQUOTED_STRING:
            case SqlParser.IDENTIFIER:
            case SqlParser.BACKQUOTED_IDENTIFIER:
                {
                this.state = 2279;
                this.unpivotSingleValueColumnClause();
                }
                break;
            case SqlParser.LEFT_PAREN:
                {
                this.state = 2280;
                this.unpivotMultiValueColumnClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2283;
            this.match(SqlParser.RIGHT_PAREN);
            this.state = 2288;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 338, this.context) ) {
            case 1:
                {
                this.state = 2285;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 337, this.context) ) {
                case 1:
                    {
                    this.state = 2284;
                    this.match(SqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2287;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotSingleValueColumnClause(): UnpivotSingleValueColumnClauseContext {
        let localContext = new UnpivotSingleValueColumnClauseContext(this.context, this.state);
        this.enterRule(localContext, 148, SqlParser.RULE_unpivotSingleValueColumnClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2290;
            this.identifier();
            this.state = 2291;
            this.match(SqlParser.KW_FOR);
            this.state = 2292;
            this.identifier();
            this.state = 2293;
            this.match(SqlParser.KW_IN);
            this.state = 2294;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2295;
            localContext._unpivotColumnAndAlias = this.unpivotColumnAndAlias();
            localContext._unpivotColumns.push(localContext._unpivotColumnAndAlias);
            this.state = 2300;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2296;
                this.match(SqlParser.COMMA);
                this.state = 2297;
                localContext._unpivotColumnAndAlias = this.unpivotColumnAndAlias();
                localContext._unpivotColumns.push(localContext._unpivotColumnAndAlias);
                }
                }
                this.state = 2302;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2303;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotMultiValueColumnClause(): UnpivotMultiValueColumnClauseContext {
        let localContext = new UnpivotMultiValueColumnClauseContext(this.context, this.state);
        this.enterRule(localContext, 150, SqlParser.RULE_unpivotMultiValueColumnClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2305;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2306;
            localContext._identifier = this.identifier();
            localContext._unpivotValueColumns.push(localContext._identifier);
            this.state = 2311;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2307;
                this.match(SqlParser.COMMA);
                this.state = 2308;
                localContext._identifier = this.identifier();
                localContext._unpivotValueColumns.push(localContext._identifier);
                }
                }
                this.state = 2313;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2314;
            this.match(SqlParser.RIGHT_PAREN);
            this.state = 2315;
            this.match(SqlParser.KW_FOR);
            this.state = 2316;
            this.identifier();
            this.state = 2317;
            this.match(SqlParser.KW_IN);
            this.state = 2318;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2319;
            localContext._unpivotColumnSet = this.unpivotColumnSet();
            localContext._unpivotColumnSets.push(localContext._unpivotColumnSet);
            this.state = 2324;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2320;
                this.match(SqlParser.COMMA);
                this.state = 2321;
                localContext._unpivotColumnSet = this.unpivotColumnSet();
                localContext._unpivotColumnSets.push(localContext._unpivotColumnSet);
                }
                }
                this.state = 2326;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2327;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotColumnSet(): UnpivotColumnSetContext {
        let localContext = new UnpivotColumnSetContext(this.context, this.state);
        this.enterRule(localContext, 152, SqlParser.RULE_unpivotColumnSet);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2329;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2330;
            localContext._multipartIdentifier = this.multipartIdentifier();
            localContext._unpivotColumns.push(localContext._multipartIdentifier);
            this.state = 2335;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2331;
                this.match(SqlParser.COMMA);
                this.state = 2332;
                localContext._multipartIdentifier = this.multipartIdentifier();
                localContext._unpivotColumns.push(localContext._multipartIdentifier);
                }
                }
                this.state = 2337;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2338;
            this.match(SqlParser.RIGHT_PAREN);
            this.state = 2343;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967231) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967279) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & 3073) !== 0)) {
                {
                this.state = 2340;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 343, this.context) ) {
                case 1:
                    {
                    this.state = 2339;
                    this.match(SqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2342;
                this.identifier();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotColumnAndAlias(): UnpivotColumnAndAliasContext {
        let localContext = new UnpivotColumnAndAliasContext(this.context, this.state);
        this.enterRule(localContext, 154, SqlParser.RULE_unpivotColumnAndAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2345;
            this.multipartIdentifier();
            this.state = 2350;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967231) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967279) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & 3073) !== 0)) {
                {
                this.state = 2347;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 345, this.context) ) {
                case 1:
                    {
                    this.state = 2346;
                    this.match(SqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2349;
                this.identifier();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifNotExists(): IfNotExistsContext {
        let localContext = new IfNotExistsContext(this.context, this.state);
        this.enterRule(localContext, 156, SqlParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2352;
            this.match(SqlParser.KW_IF);
            this.state = 2353;
            this.match(SqlParser.KW_NOT);
            this.state = 2354;
            this.match(SqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExists(): IfExistsContext {
        let localContext = new IfExistsContext(this.context, this.state);
        this.enterRule(localContext, 158, SqlParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2356;
            this.match(SqlParser.KW_IF);
            this.state = 2357;
            this.match(SqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lateralView(): LateralViewContext {
        let localContext = new LateralViewContext(this.context, this.state);
        this.enterRule(localContext, 160, SqlParser.RULE_lateralView);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2359;
            this.match(SqlParser.KW_LATERAL);
            this.state = 2360;
            this.match(SqlParser.KW_VIEW);
            this.state = 2362;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 347, this.context) ) {
            case 1:
                {
                this.state = 2361;
                this.match(SqlParser.KW_OUTER);
                }
                break;
            }
            this.state = 2364;
            this.viewName();
            this.state = 2365;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2374;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967231) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967279) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 1073678415) !== 0)) {
                {
                this.state = 2366;
                this.expression();
                this.state = 2371;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2367;
                    this.match(SqlParser.COMMA);
                    this.state = 2368;
                    this.expression();
                    }
                    }
                    this.state = 2373;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2376;
            this.match(SqlParser.RIGHT_PAREN);
            this.state = 2377;
            this.tableAlias();
            this.state = 2389;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 352, this.context) ) {
            case 1:
                {
                this.state = 2379;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 350, this.context) ) {
                case 1:
                    {
                    this.state = 2378;
                    this.match(SqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2381;
                localContext._identifier = this.identifier();
                localContext._colName.push(localContext._identifier);
                this.state = 2386;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 351, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2382;
                        this.match(SqlParser.COMMA);
                        this.state = 2383;
                        localContext._identifier = this.identifier();
                        localContext._colName.push(localContext._identifier);
                        }
                        }
                    }
                    this.state = 2388;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 351, this.context);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setQuantifier(): SetQuantifierContext {
        let localContext = new SetQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 162, SqlParser.RULE_setQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2391;
            _la = this.tokenStream.LA(1);
            if(!(_la === 10 || _la === 92)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation(): RelationContext {
        let localContext = new RelationContext(this.context, this.state);
        this.enterRule(localContext, 164, SqlParser.RULE_relation);
        try {
            let alternative: number;
            this.state = 2406;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 356, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2393;
                this.tableName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2395;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 353, this.context) ) {
                case 1:
                    {
                    this.state = 2394;
                    this.match(SqlParser.KW_LATERAL);
                    }
                    break;
                }
                this.state = 2397;
                this.relationPrimary();
                this.state = 2403;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 355, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        this.state = 2401;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case SqlParser.KW_ANTI:
                        case SqlParser.KW_CROSS:
                        case SqlParser.KW_FULL:
                        case SqlParser.KW_INNER:
                        case SqlParser.KW_JOIN:
                        case SqlParser.KW_LEFT:
                        case SqlParser.KW_NATURAL:
                        case SqlParser.KW_RIGHT:
                        case SqlParser.KW_SEMI:
                            {
                            this.state = 2398;
                            this.joinRelation();
                            }
                            break;
                        case SqlParser.KW_PIVOT:
                            {
                            this.state = 2399;
                            this.pivotClause();
                            }
                            break;
                        case SqlParser.KW_UNPIVOT:
                            {
                            this.state = 2400;
                            this.unpivotClause();
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                    }
                    this.state = 2405;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 355, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinRelation(): JoinRelationContext {
        let localContext = new JoinRelationContext(this.context, this.state);
        this.enterRule(localContext, 166, SqlParser.RULE_joinRelation);
        try {
            this.state = 2425;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_ANTI:
            case SqlParser.KW_CROSS:
            case SqlParser.KW_FULL:
            case SqlParser.KW_INNER:
            case SqlParser.KW_JOIN:
            case SqlParser.KW_LEFT:
            case SqlParser.KW_RIGHT:
            case SqlParser.KW_SEMI:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 2408;
                this.joinType();
                }
                this.state = 2409;
                this.match(SqlParser.KW_JOIN);
                this.state = 2411;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 357, this.context) ) {
                case 1:
                    {
                    this.state = 2410;
                    this.match(SqlParser.KW_LATERAL);
                    }
                    break;
                }
                this.state = 2413;
                localContext._right = this.relationPrimary();
                this.state = 2415;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 358, this.context) ) {
                case 1:
                    {
                    this.state = 2414;
                    this.joinCriteria();
                    }
                    break;
                }
                }
                break;
            case SqlParser.KW_NATURAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2417;
                this.match(SqlParser.KW_NATURAL);
                this.state = 2418;
                this.joinType();
                this.state = 2419;
                this.match(SqlParser.KW_JOIN);
                this.state = 2421;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 359, this.context) ) {
                case 1:
                    {
                    this.state = 2420;
                    this.match(SqlParser.KW_LATERAL);
                    }
                    break;
                }
                this.state = 2423;
                localContext._right = this.relationPrimary();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinType(): JoinTypeContext {
        let localContext = new JoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 168, SqlParser.RULE_joinType);
        let _la: number;
        try {
            this.state = 2443;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 365, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2428;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 2427;
                    this.match(SqlParser.KW_INNER);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2430;
                this.match(SqlParser.KW_CROSS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2431;
                this.match(SqlParser.KW_LEFT);
                this.state = 2433;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 210) {
                    {
                    this.state = 2432;
                    this.match(SqlParser.KW_OUTER);
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2436;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 161) {
                    {
                    this.state = 2435;
                    this.match(SqlParser.KW_LEFT);
                    }
                }

                this.state = 2438;
                _la = this.tokenStream.LA(1);
                if(!(_la === 15 || _la === 263)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2439;
                _la = this.tokenStream.LA(1);
                if(!(_la === 124 || _la === 249)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2441;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 210) {
                    {
                    this.state = 2440;
                    this.match(SqlParser.KW_OUTER);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCriteria(): JoinCriteriaContext {
        let localContext = new JoinCriteriaContext(this.context, this.state);
        this.enterRule(localContext, 170, SqlParser.RULE_joinCriteria);
        try {
            this.state = 2449;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_ON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2445;
                this.match(SqlParser.KW_ON);
                this.state = 2446;
                this.booleanExpression(0);
                }
                break;
            case SqlParser.KW_USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2447;
                this.match(SqlParser.KW_USING);
                this.state = 2448;
                this.identifierList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sample(): SampleContext {
        let localContext = new SampleContext(this.context, this.state);
        this.enterRule(localContext, 172, SqlParser.RULE_sample);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2451;
            this.match(SqlParser.KW_TABLESAMPLE);
            this.state = 2452;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2454;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967231) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967279) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 1073678415) !== 0)) {
                {
                this.state = 2453;
                this.sampleMethod();
                }
            }

            this.state = 2456;
            this.match(SqlParser.RIGHT_PAREN);
            this.state = 2461;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 368, this.context) ) {
            case 1:
                {
                this.state = 2457;
                this.match(SqlParser.KW_REPEATABLE);
                this.state = 2458;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2459;
                localContext._seed = this.match(SqlParser.INTEGER_VALUE);
                this.state = 2460;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleMethod(): SampleMethodContext {
        let localContext = new SampleMethodContext(this.context, this.state);
        this.enterRule(localContext, 174, SqlParser.RULE_sampleMethod);
        let _la: number;
        try {
            this.state = 2487;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 372, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2464;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 2463;
                    localContext._negativeSign = this.match(SqlParser.MINUS);
                    }
                }

                this.state = 2466;
                localContext._percentage = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 381 || _la === 383)) {
                    localContext._percentage = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2467;
                this.match(SqlParser.KW_PERCENTLIT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2468;
                this.expression();
                this.state = 2469;
                this.match(SqlParser.KW_ROWS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2471;
                localContext._sampleType = this.match(SqlParser.KW_BUCKET);
                this.state = 2472;
                localContext._numerator = this.match(SqlParser.INTEGER_VALUE);
                this.state = 2473;
                this.match(SqlParser.KW_OUT);
                this.state = 2474;
                this.match(SqlParser.KW_OF);
                this.state = 2475;
                localContext._denominator = this.match(SqlParser.INTEGER_VALUE);
                this.state = 2484;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 202) {
                    {
                    this.state = 2476;
                    this.match(SqlParser.KW_ON);
                    this.state = 2482;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 370, this.context) ) {
                    case 1:
                        {
                        this.state = 2477;
                        this.identifier();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2478;
                        this.qualifiedName();
                        this.state = 2479;
                        this.match(SqlParser.LEFT_PAREN);
                        this.state = 2480;
                        this.match(SqlParser.RIGHT_PAREN);
                        }
                        break;
                    }
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2486;
                localContext._bytes = this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierList(): IdentifierListContext {
        let localContext = new IdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 176, SqlParser.RULE_identifierList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2489;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2490;
            this.identifierSeq();
            this.state = 2491;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierSeq(): IdentifierSeqContext {
        let localContext = new IdentifierSeqContext(this.context, this.state);
        this.enterRule(localContext, 178, SqlParser.RULE_identifierSeq);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2493;
            localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
            localContext._ident.push(localContext._errorCapturingIdentifier);
            this.state = 2498;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 373, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2494;
                    this.match(SqlParser.COMMA);
                    this.state = 2495;
                    localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                    localContext._ident.push(localContext._errorCapturingIdentifier);
                    }
                    }
                }
                this.state = 2500;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 373, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderedIdentifierList(): OrderedIdentifierListContext {
        let localContext = new OrderedIdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 180, SqlParser.RULE_orderedIdentifierList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2501;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2502;
            this.orderedIdentifier();
            this.state = 2507;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2503;
                this.match(SqlParser.COMMA);
                this.state = 2504;
                this.orderedIdentifier();
                }
                }
                this.state = 2509;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2510;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderedIdentifier(): OrderedIdentifierContext {
        let localContext = new OrderedIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 182, SqlParser.RULE_orderedIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2512;
            localContext._ident = this.errorCapturingIdentifier();
            this.state = 2514;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 21 || _la === 86) {
                {
                this.state = 2513;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 21 || _la === 86)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierCommentList(): IdentifierCommentListContext {
        let localContext = new IdentifierCommentListContext(this.context, this.state);
        this.enterRule(localContext, 184, SqlParser.RULE_identifierCommentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2516;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2517;
            this.identifierComment();
            this.state = 2522;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2518;
                this.match(SqlParser.COMMA);
                this.state = 2519;
                this.identifierComment();
                }
                }
                this.state = 2524;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2525;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierComment(): IdentifierCommentContext {
        let localContext = new IdentifierCommentContext(this.context, this.state);
        this.enterRule(localContext, 186, SqlParser.RULE_identifierComment);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2527;
            this.columnNameCreate();
            this.state = 2530;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 2528;
                this.match(SqlParser.KW_COMMENT);
                this.state = 2529;
                localContext._comment = this.stringLit();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationPrimary(): RelationPrimaryContext {
        let localContext = new RelationPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 188, SqlParser.RULE_relationPrimary);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2587;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 386, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2535;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
                case 1:
                    {
                    this.state = 2532;
                    this.tableName();
                    }
                    break;
                case 2:
                    {
                    this.state = 2533;
                    this.viewName();
                    }
                    break;
                case 3:
                    {
                    this.state = 2534;
                    this.identifierReference();
                    }
                    break;
                }
                this.state = 2538;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 379, this.context) ) {
                case 1:
                    {
                    this.state = 2537;
                    this.temporalClause();
                    }
                    break;
                }
                this.state = 2541;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 380, this.context) ) {
                case 1:
                    {
                    this.state = 2540;
                    this.sample();
                    }
                    break;
                }
                this.state = 2543;
                this.tableAlias();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2545;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2546;
                this.query();
                this.state = 2547;
                this.match(SqlParser.RIGHT_PAREN);
                this.state = 2549;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 381, this.context) ) {
                case 1:
                    {
                    this.state = 2548;
                    this.sample();
                    }
                    break;
                }
                this.state = 2551;
                this.tableAlias();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2553;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2554;
                this.relation();
                this.state = 2555;
                this.match(SqlParser.RIGHT_PAREN);
                this.state = 2557;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 382, this.context) ) {
                case 1:
                    {
                    this.state = 2556;
                    this.sample();
                    }
                    break;
                }
                this.state = 2559;
                this.tableAlias();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2561;
                this.match(SqlParser.KW_VALUES);
                this.state = 2562;
                this.expression();
                this.state = 2567;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 383, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2563;
                        this.match(SqlParser.COMMA);
                        this.state = 2564;
                        this.expression();
                        }
                        }
                    }
                    this.state = 2569;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 383, this.context);
                }
                this.state = 2570;
                this.tableAlias();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2572;
                this.functionName();
                this.state = 2573;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2582;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967231) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 1073678415) !== 0)) {
                    {
                    this.state = 2574;
                    this.functionTableArgument();
                    this.state = 2579;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2575;
                        this.match(SqlParser.COMMA);
                        this.state = 2576;
                        this.functionTableArgument();
                        }
                        }
                        this.state = 2581;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2584;
                this.match(SqlParser.RIGHT_PAREN);
                this.state = 2585;
                this.tableAlias();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext {
        let localContext = new FunctionTableSubqueryArgumentContext(this.context, this.state);
        this.enterRule(localContext, 190, SqlParser.RULE_functionTableSubqueryArgument);
        let _la: number;
        try {
            this.state = 2608;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 390, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2589;
                this.match(SqlParser.KW_TABLE);
                this.state = 2590;
                this.tableName();
                this.state = 2592;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 216 || _la === 345) {
                    {
                    this.state = 2591;
                    this.tableArgumentPartitioning();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2594;
                this.match(SqlParser.KW_TABLE);
                this.state = 2595;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2596;
                this.tableName();
                this.state = 2597;
                this.match(SqlParser.RIGHT_PAREN);
                this.state = 2599;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 216 || _la === 345) {
                    {
                    this.state = 2598;
                    this.tableArgumentPartitioning();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2601;
                this.match(SqlParser.KW_TABLE);
                this.state = 2602;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2603;
                this.query();
                this.state = 2604;
                this.match(SqlParser.RIGHT_PAREN);
                this.state = 2606;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 216 || _la === 345) {
                    {
                    this.state = 2605;
                    this.tableArgumentPartitioning();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgumentPartitioning(): TableArgumentPartitioningContext {
        let localContext = new TableArgumentPartitioningContext(this.context, this.state);
        this.enterRule(localContext, 192, SqlParser.RULE_tableArgumentPartitioning);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2629;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_WITH:
                {
                {
                this.state = 2610;
                this.match(SqlParser.KW_WITH);
                this.state = 2611;
                this.match(SqlParser.KW_SINGLE);
                this.state = 2612;
                this.match(SqlParser.KW_PARTITION);
                }
                }
                break;
            case SqlParser.KW_DISTRIBUTE:
            case SqlParser.KW_PARTITION:
                {
                {
                this.state = 2613;
                _la = this.tokenStream.LA(1);
                if(!(_la === 93 || _la === 216)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2614;
                this.match(SqlParser.KW_BY);
                this.state = 2627;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 392, this.context) ) {
                case 1:
                    {
                    {
                    {
                    this.state = 2615;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 2616;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    this.state = 2621;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2617;
                        this.match(SqlParser.COMMA);
                        this.state = 2618;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        }
                        }
                        this.state = 2623;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2624;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 2626;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    }
                    break;
                }
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2647;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 208 || _la === 277) {
                {
                this.state = 2631;
                _la = this.tokenStream.LA(1);
                if(!(_la === 208 || _la === 277)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2632;
                this.match(SqlParser.KW_BY);
                {
                this.state = 2645;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 395, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 2633;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 2634;
                    this.sortItem();
                    this.state = 2639;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2635;
                        this.match(SqlParser.COMMA);
                        this.state = 2636;
                        this.sortItem();
                        }
                        }
                        this.state = 2641;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2642;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 2644;
                    this.sortItem();
                    }
                    break;
                }
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableNamedArgumentExpression(): FunctionTableNamedArgumentExpressionContext {
        let localContext = new FunctionTableNamedArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 194, SqlParser.RULE_functionTableNamedArgumentExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2649;
            localContext._key = this.identifier();
            this.state = 2650;
            this.match(SqlParser.FAT_ARROW);
            this.state = 2651;
            localContext._table = this.functionTableSubqueryArgument();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableReferenceArgument(): FunctionTableReferenceArgumentContext {
        let localContext = new FunctionTableReferenceArgumentContext(this.context, this.state);
        this.enterRule(localContext, 196, SqlParser.RULE_functionTableReferenceArgument);
        try {
            this.state = 2655;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2653;
                this.functionTableSubqueryArgument();
                }
                break;
            case SqlParser.KW_ADD:
            case SqlParser.KW_AFTER:
            case SqlParser.KW_ALL:
            case SqlParser.KW_ALTER:
            case SqlParser.KW_ALWAYS:
            case SqlParser.KW_ANALYZE:
            case SqlParser.KW_AND:
            case SqlParser.KW_ANTI:
            case SqlParser.KW_ANY:
            case SqlParser.KW_ANY_VALUE:
            case SqlParser.KW_ARCHIVE:
            case SqlParser.KW_ARRAY:
            case SqlParser.KW_AS:
            case SqlParser.KW_ASC:
            case SqlParser.KW_AT:
            case SqlParser.KW_AUTHORIZATION:
            case SqlParser.KW_BETWEEN:
            case SqlParser.KW_BIGINT:
            case SqlParser.KW_BINARY:
            case SqlParser.KW_BOOLEAN:
            case SqlParser.KW_BOTH:
            case SqlParser.KW_BUCKET:
            case SqlParser.KW_BUCKETS:
            case SqlParser.KW_BY:
            case SqlParser.KW_BYTE:
            case SqlParser.KW_CACHE:
            case SqlParser.KW_CASCADE:
            case SqlParser.KW_CASE:
            case SqlParser.KW_CAST:
            case SqlParser.KW_CATALOG:
            case SqlParser.KW_CATALOGS:
            case SqlParser.KW_CHANGE:
            case SqlParser.KW_CHAR:
            case SqlParser.KW_CHARACTER:
            case SqlParser.KW_CHECK:
            case SqlParser.KW_CLEAR:
            case SqlParser.KW_CLUSTER:
            case SqlParser.KW_CLUSTERED:
            case SqlParser.KW_CODEGEN:
            case SqlParser.KW_COLLATE:
            case SqlParser.KW_COLLECTION:
            case SqlParser.KW_COLUMN:
            case SqlParser.KW_COLUMNS:
            case SqlParser.KW_COMMENT:
            case SqlParser.KW_COMMIT:
            case SqlParser.KW_COMPACT:
            case SqlParser.KW_COMPACTIONS:
            case SqlParser.KW_COMPUTE:
            case SqlParser.KW_CONCATENATE:
            case SqlParser.KW_CONSTRAINT:
            case SqlParser.KW_COST:
            case SqlParser.KW_CREATE:
            case SqlParser.KW_CROSS:
            case SqlParser.KW_CUBE:
            case SqlParser.KW_CURRENT:
            case SqlParser.KW_CURRENT_DATE:
            case SqlParser.KW_CURRENT_TIME:
            case SqlParser.KW_CURRENT_TIMESTAMP:
            case SqlParser.KW_CURRENT_USER:
            case SqlParser.KW_DAY:
            case SqlParser.KW_DAYS:
            case SqlParser.KW_DAYOFYEAR:
            case SqlParser.KW_DATA:
            case SqlParser.KW_DATE:
            case SqlParser.KW_DATABASE:
            case SqlParser.KW_DATABASES:
            case SqlParser.KW_DATEADD:
            case SqlParser.KW_DATE_ADD:
            case SqlParser.KW_DATEDIFF:
            case SqlParser.KW_DATE_DIFF:
            case SqlParser.KW_DBPROPERTIES:
            case SqlParser.KW_DEC:
            case SqlParser.KW_DECIMAL:
            case SqlParser.KW_DECLARE:
            case SqlParser.KW_DEFAULT:
            case SqlParser.KW_DEFINED:
            case SqlParser.KW_DELETE:
            case SqlParser.KW_DELIMITED:
            case SqlParser.KW_DESC:
            case SqlParser.KW_DESCRIBE:
            case SqlParser.KW_DFS:
            case SqlParser.KW_DIRECTORIES:
            case SqlParser.KW_DIRECTORY:
            case SqlParser.KW_DISABLE:
            case SqlParser.KW_DISTINCT:
            case SqlParser.KW_DISTRIBUTE:
            case SqlParser.KW_DIV:
            case SqlParser.KW_DOUBLE:
            case SqlParser.KW_DROP:
            case SqlParser.KW_ELSE:
            case SqlParser.KW_ENABLE:
            case SqlParser.KW_END:
            case SqlParser.KW_ESCAPE:
            case SqlParser.KW_ESCAPED:
            case SqlParser.KW_EXCEPT:
            case SqlParser.KW_EXCHANGE:
            case SqlParser.KW_EXCLUDE:
            case SqlParser.KW_EXISTS:
            case SqlParser.KW_EXPLAIN:
            case SqlParser.KW_EXPORT:
            case SqlParser.KW_EXTENDED:
            case SqlParser.KW_EXTERNAL:
            case SqlParser.KW_EXTRACT:
            case SqlParser.KW_FALSE:
            case SqlParser.KW_FETCH:
            case SqlParser.KW_FIELDS:
            case SqlParser.KW_FILTER:
            case SqlParser.KW_FILEFORMAT:
            case SqlParser.KW_FIRST:
            case SqlParser.KW_FLOAT:
            case SqlParser.KW_FOLLOWING:
            case SqlParser.KW_FOR:
            case SqlParser.KW_FOREIGN:
            case SqlParser.KW_FORMAT:
            case SqlParser.KW_FORMATTED:
            case SqlParser.KW_FULL:
            case SqlParser.KW_FUNCTION:
            case SqlParser.KW_FUNCTIONS:
            case SqlParser.KW_GENERATED:
            case SqlParser.KW_GLOBAL:
            case SqlParser.KW_GRANT:
            case SqlParser.KW_GROUP:
            case SqlParser.KW_GROUPING:
            case SqlParser.KW_HAVING:
            case SqlParser.KW_BINARY_HEX:
            case SqlParser.KW_HOUR:
            case SqlParser.KW_HOURS:
            case SqlParser.KW_IDENTIFIER:
            case SqlParser.KW_IF:
            case SqlParser.KW_IGNORE:
            case SqlParser.KW_IMPORT:
            case SqlParser.KW_IN:
            case SqlParser.KW_INCLUDE:
            case SqlParser.KW_INDEX:
            case SqlParser.KW_INDEXES:
            case SqlParser.KW_INNER:
            case SqlParser.KW_INPATH:
            case SqlParser.KW_INPUTFORMAT:
            case SqlParser.KW_INSERT:
            case SqlParser.KW_INTERSECT:
            case SqlParser.KW_INTERVAL:
            case SqlParser.KW_INT:
            case SqlParser.KW_INTEGER:
            case SqlParser.KW_INTO:
            case SqlParser.KW_IS:
            case SqlParser.KW_ITEMS:
            case SqlParser.KW_JOIN:
            case SqlParser.KW_KEYS:
            case SqlParser.KW_LAST:
            case SqlParser.KW_LATERAL:
            case SqlParser.KW_LAZY:
            case SqlParser.KW_LEADING:
            case SqlParser.KW_LEFT:
            case SqlParser.KW_LIFECYCLE:
            case SqlParser.KW_LIKE:
            case SqlParser.KW_ILIKE:
            case SqlParser.KW_LIMIT:
            case SqlParser.KW_LINES:
            case SqlParser.KW_LIST:
            case SqlParser.KW_LOAD:
            case SqlParser.KW_LOCAL:
            case SqlParser.KW_LOCATION:
            case SqlParser.KW_LOCK:
            case SqlParser.KW_LOCKS:
            case SqlParser.KW_LOGICAL:
            case SqlParser.KW_LONG:
            case SqlParser.KW_MACRO:
            case SqlParser.KW_MAP:
            case SqlParser.KW_MATCHED:
            case SqlParser.KW_MERGE:
            case SqlParser.KW_MICROSECOND:
            case SqlParser.KW_MICROSECONDS:
            case SqlParser.KW_MILLISECOND:
            case SqlParser.KW_MILLISECONDS:
            case SqlParser.KW_MINUTE:
            case SqlParser.KW_MINUTES:
            case SqlParser.KW_MONTH:
            case SqlParser.KW_MONTHS:
            case SqlParser.KW_MSCK:
            case SqlParser.KW_NAME:
            case SqlParser.KW_NAMESPACE:
            case SqlParser.KW_NAMESPACES:
            case SqlParser.KW_NANOSECOND:
            case SqlParser.KW_NANOSECONDS:
            case SqlParser.KW_NATURAL:
            case SqlParser.KW_NO:
            case SqlParser.KW_NOT:
            case SqlParser.KW_NULL:
            case SqlParser.KW_NULLS:
            case SqlParser.KW_NUMERIC:
            case SqlParser.KW_OF:
            case SqlParser.KW_OFFSET:
            case SqlParser.KW_ON:
            case SqlParser.KW_ONLY:
            case SqlParser.KW_OPTIMIZE:
            case SqlParser.KW_OPTION:
            case SqlParser.KW_OPTIONS:
            case SqlParser.KW_OR:
            case SqlParser.KW_ORDER:
            case SqlParser.KW_OUT:
            case SqlParser.KW_OUTER:
            case SqlParser.KW_OUTPUTFORMAT:
            case SqlParser.KW_OVER:
            case SqlParser.KW_OVERLAPS:
            case SqlParser.KW_OVERLAY:
            case SqlParser.KW_OVERWRITE:
            case SqlParser.KW_PARTITION:
            case SqlParser.KW_PARTITIONED:
            case SqlParser.KW_PARTITIONS:
            case SqlParser.KW_PERCENTILE_CONT:
            case SqlParser.KW_PERCENTILE_DISC:
            case SqlParser.KW_PERCENTLIT:
            case SqlParser.KW_PIVOT:
            case SqlParser.KW_PLACING:
            case SqlParser.KW_POSITION:
            case SqlParser.KW_PRECEDING:
            case SqlParser.KW_PRIMARY:
            case SqlParser.KW_PRINCIPALS:
            case SqlParser.KW_PROPERTIES:
            case SqlParser.KW_PURGE:
            case SqlParser.KW_QUARTER:
            case SqlParser.KW_QUERY:
            case SqlParser.KW_RANGE:
            case SqlParser.KW_REAL:
            case SqlParser.KW_RECORDREADER:
            case SqlParser.KW_RECORDWRITER:
            case SqlParser.KW_RECOVER:
            case SqlParser.KW_REDUCE:
            case SqlParser.KW_REFERENCES:
            case SqlParser.KW_REFRESH:
            case SqlParser.KW_RENAME:
            case SqlParser.KW_REPAIR:
            case SqlParser.KW_REPEATABLE:
            case SqlParser.KW_REPLACE:
            case SqlParser.KW_RESET:
            case SqlParser.KW_RESPECT:
            case SqlParser.KW_RESTRICT:
            case SqlParser.KW_REWRITE:
            case SqlParser.KW_REVOKE:
            case SqlParser.KW_RIGHT:
            case SqlParser.KW_RLIKE:
            case SqlParser.KW_REGEXP:
            case SqlParser.KW_ROLE:
            case SqlParser.KW_ROLES:
            case SqlParser.KW_ROLLBACK:
            case SqlParser.KW_ROLLUP:
            case SqlParser.KW_ROW:
            case SqlParser.KW_ROWS:
            case SqlParser.KW_SECOND:
            case SqlParser.KW_SECONDS:
            case SqlParser.KW_SCHEMA:
            case SqlParser.KW_SCHEMAS:
            case SqlParser.KW_SEMI:
            case SqlParser.KW_SEPARATED:
            case SqlParser.KW_SERDE:
            case SqlParser.KW_SERDEPROPERTIES:
            case SqlParser.KW_SESSION_USER:
            case SqlParser.KW_SET:
            case SqlParser.KW_MINUS:
            case SqlParser.KW_SETS:
            case SqlParser.KW_SHORT:
            case SqlParser.KW_SHOW:
            case SqlParser.KW_SINGLE:
            case SqlParser.KW_SKEWED:
            case SqlParser.KW_SMALLINT:
            case SqlParser.KW_SOME:
            case SqlParser.KW_SORT:
            case SqlParser.KW_SORTED:
            case SqlParser.KW_SOURCE:
            case SqlParser.KW_START:
            case SqlParser.KW_STATISTICS:
            case SqlParser.KW_STORED:
            case SqlParser.KW_STRATIFY:
            case SqlParser.KW_STRING:
            case SqlParser.KW_STRUCT:
            case SqlParser.KW_SUBSTR:
            case SqlParser.KW_SUBSTRING:
            case SqlParser.KW_SYNC:
            case SqlParser.KW_SYSTEM:
            case SqlParser.KW_SYSTEM_TIME:
            case SqlParser.KW_SYSTEM_VERSION:
            case SqlParser.KW_TABLES:
            case SqlParser.KW_TABLESAMPLE:
            case SqlParser.KW_TARGET:
            case SqlParser.KW_TBLPROPERTIES:
            case SqlParser.KW_TEMPORARY:
            case SqlParser.KW_TERMINATED:
            case SqlParser.KW_THEN:
            case SqlParser.KW_TIME:
            case SqlParser.KW_TIMEDIFF:
            case SqlParser.KW_TIMESTAMP:
            case SqlParser.KW_TIMESTAMP_LTZ:
            case SqlParser.KW_TIMESTAMP_NTZ:
            case SqlParser.KW_TIMESTAMPADD:
            case SqlParser.KW_TIMESTAMPDIFF:
            case SqlParser.KW_TINYINT:
            case SqlParser.KW_TO:
            case SqlParser.KW_TOUCH:
            case SqlParser.KW_TRAILING:
            case SqlParser.KW_TRANSACTION:
            case SqlParser.KW_TRANSACTIONS:
            case SqlParser.KW_TRANSFORM:
            case SqlParser.KW_TRIM:
            case SqlParser.KW_TRUE:
            case SqlParser.KW_TRUNCATE:
            case SqlParser.KW_TRY_CAST:
            case SqlParser.KW_TYPE:
            case SqlParser.KW_UNARCHIVE:
            case SqlParser.KW_UNBOUNDED:
            case SqlParser.KW_UNCACHE:
            case SqlParser.KW_UNION:
            case SqlParser.KW_UNIQUE:
            case SqlParser.KW_UNKNOWN:
            case SqlParser.KW_UNLOCK:
            case SqlParser.KW_UNPIVOT:
            case SqlParser.KW_UNSET:
            case SqlParser.KW_UPDATE:
            case SqlParser.KW_USE:
            case SqlParser.KW_USER:
            case SqlParser.KW_USING:
            case SqlParser.KW_VALUES:
            case SqlParser.KW_VARCHAR:
            case SqlParser.KW_VAR:
            case SqlParser.KW_VARIABLE:
            case SqlParser.KW_VERSION:
            case SqlParser.KW_VIEW:
            case SqlParser.KW_VIEWS:
            case SqlParser.KW_VOID:
            case SqlParser.KW_WEEK:
            case SqlParser.KW_WEEKS:
            case SqlParser.KW_WHEN:
            case SqlParser.KW_WHERE:
            case SqlParser.KW_WINDOW:
            case SqlParser.KW_WITH:
            case SqlParser.KW_WITHIN:
            case SqlParser.KW_YEAR:
            case SqlParser.KW_YEARS:
            case SqlParser.KW_ZONE:
            case SqlParser.KW_ZORDER:
            case SqlParser.DOUBLEQUOTED_STRING:
            case SqlParser.IDENTIFIER:
            case SqlParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2654;
                this.functionTableNamedArgumentExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableArgument(): FunctionTableArgumentContext {
        let localContext = new FunctionTableArgumentContext(this.context, this.state);
        this.enterRule(localContext, 198, SqlParser.RULE_functionTableArgument);
        try {
            this.state = 2659;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 398, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2657;
                this.functionTableReferenceArgument();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2658;
                this.functionArgument();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAlias(): TableAliasContext {
        let localContext = new TableAliasContext(this.context, this.state);
        this.enterRule(localContext, 200, SqlParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2668;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 401, this.context) ) {
            case 1:
                {
                this.state = 2662;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 399, this.context) ) {
                case 1:
                    {
                    this.state = 2661;
                    this.match(SqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2664;
                localContext._alias = this.strictIdentifier();
                this.state = 2666;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 400, this.context) ) {
                case 1:
                    {
                    this.state = 2665;
                    this.identifierList();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormat(): RowFormatContext {
        let localContext = new RowFormatContext(this.context, this.state);
        this.enterRule(localContext, 202, SqlParser.RULE_rowFormat);
        try {
            this.state = 2719;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 409, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2670;
                this.match(SqlParser.KW_ROW);
                this.state = 2671;
                this.match(SqlParser.KW_FORMAT);
                this.state = 2672;
                this.match(SqlParser.KW_SERDE);
                this.state = 2673;
                localContext._name = this.stringLit();
                this.state = 2677;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 402, this.context) ) {
                case 1:
                    {
                    this.state = 2674;
                    this.match(SqlParser.KW_WITH);
                    this.state = 2675;
                    this.match(SqlParser.KW_SERDEPROPERTIES);
                    this.state = 2676;
                    localContext._props = this.propertyList();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2679;
                this.match(SqlParser.KW_ROW);
                this.state = 2680;
                this.match(SqlParser.KW_FORMAT);
                this.state = 2681;
                this.match(SqlParser.KW_DELIMITED);
                this.state = 2691;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 404, this.context) ) {
                case 1:
                    {
                    this.state = 2682;
                    this.match(SqlParser.KW_FIELDS);
                    this.state = 2683;
                    this.match(SqlParser.KW_TERMINATED);
                    this.state = 2684;
                    this.match(SqlParser.KW_BY);
                    this.state = 2685;
                    localContext._fieldsTerminatedBy = this.stringLit();
                    this.state = 2689;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 403, this.context) ) {
                    case 1:
                        {
                        this.state = 2686;
                        this.match(SqlParser.KW_ESCAPED);
                        this.state = 2687;
                        this.match(SqlParser.KW_BY);
                        this.state = 2688;
                        localContext._escapedBy = this.stringLit();
                        }
                        break;
                    }
                    }
                    break;
                }
                this.state = 2698;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 405, this.context) ) {
                case 1:
                    {
                    this.state = 2693;
                    this.match(SqlParser.KW_COLLECTION);
                    this.state = 2694;
                    this.match(SqlParser.KW_ITEMS);
                    this.state = 2695;
                    this.match(SqlParser.KW_TERMINATED);
                    this.state = 2696;
                    this.match(SqlParser.KW_BY);
                    this.state = 2697;
                    localContext._collectionItemsTerminatedBy = this.stringLit();
                    }
                    break;
                }
                this.state = 2705;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 406, this.context) ) {
                case 1:
                    {
                    this.state = 2700;
                    this.match(SqlParser.KW_MAP);
                    this.state = 2701;
                    this.match(SqlParser.KW_KEYS);
                    this.state = 2702;
                    this.match(SqlParser.KW_TERMINATED);
                    this.state = 2703;
                    this.match(SqlParser.KW_BY);
                    this.state = 2704;
                    localContext._keysTerminatedBy = this.stringLit();
                    }
                    break;
                }
                this.state = 2711;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 407, this.context) ) {
                case 1:
                    {
                    this.state = 2707;
                    this.match(SqlParser.KW_LINES);
                    this.state = 2708;
                    this.match(SqlParser.KW_TERMINATED);
                    this.state = 2709;
                    this.match(SqlParser.KW_BY);
                    this.state = 2710;
                    localContext._linesSeparatedBy = this.stringLit();
                    }
                    break;
                }
                this.state = 2717;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 408, this.context) ) {
                case 1:
                    {
                    this.state = 2713;
                    this.match(SqlParser.KW_NULL);
                    this.state = 2714;
                    this.match(SqlParser.KW_DEFINED);
                    this.state = 2715;
                    this.match(SqlParser.KW_AS);
                    this.state = 2716;
                    localContext._nullDefinedAs = this.stringLit();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierList(): MultipartIdentifierListContext {
        let localContext = new MultipartIdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 204, SqlParser.RULE_multipartIdentifierList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2721;
            this.multipartIdentifier();
            this.state = 2726;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2722;
                this.match(SqlParser.COMMA);
                this.state = 2723;
                this.multipartIdentifier();
                }
                }
                this.state = 2728;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        let localContext = new MultipartIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 206, SqlParser.RULE_multipartIdentifier);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2729;
            localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
            localContext._parts.push(localContext._errorCapturingIdentifier);
            this.state = 2734;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 411, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2730;
                    this.match(SqlParser.DOT);
                    this.state = 2731;
                    localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                    localContext._parts.push(localContext._errorCapturingIdentifier);
                    }
                    }
                }
                this.state = 2736;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 411, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierPropertyList(): MultipartIdentifierPropertyListContext {
        let localContext = new MultipartIdentifierPropertyListContext(this.context, this.state);
        this.enterRule(localContext, 208, SqlParser.RULE_multipartIdentifierPropertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2737;
            this.multipartIdentifierProperty();
            this.state = 2742;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2738;
                this.match(SqlParser.COMMA);
                this.state = 2739;
                this.multipartIdentifierProperty();
                }
                }
                this.state = 2744;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierProperty(): MultipartIdentifierPropertyContext {
        let localContext = new MultipartIdentifierPropertyContext(this.context, this.state);
        this.enterRule(localContext, 210, SqlParser.RULE_multipartIdentifierProperty);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2745;
            this.multipartIdentifier();
            this.state = 2748;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 206) {
                {
                this.state = 2746;
                this.match(SqlParser.KW_OPTIONS);
                this.state = 2747;
                localContext._options = this.propertyList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIdentifier(): TableIdentifierContext {
        let localContext = new TableIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 212, SqlParser.RULE_tableIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2753;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 414, this.context) ) {
            case 1:
                {
                this.state = 2750;
                localContext._db = this.errorCapturingIdentifier();
                this.state = 2751;
                this.match(SqlParser.DOT);
                }
                break;
            }
            this.state = 2755;
            localContext._table = this.errorCapturingIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewIdentifier(): ViewIdentifierContext {
        let localContext = new ViewIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 214, SqlParser.RULE_viewIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2760;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 415, this.context) ) {
            case 1:
                {
                this.state = 2757;
                localContext._db = this.errorCapturingIdentifier();
                this.state = 2758;
                this.match(SqlParser.DOT);
                }
                break;
            }
            this.state = 2762;
            localContext._view = this.errorCapturingIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedExpression(): NamedExpressionContext {
        let localContext = new NamedExpressionContext(this.context, this.state);
        this.enterRule(localContext, 216, SqlParser.RULE_namedExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2766;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 416, this.context) ) {
            case 1:
                {
                this.state = 2764;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 2765;
                this.expression();
                }
                break;
            }
            this.state = 2775;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 419, this.context) ) {
            case 1:
                {
                this.state = 2769;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 417, this.context) ) {
                case 1:
                    {
                    this.state = 2768;
                    this.match(SqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2773;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_ADD:
                case SqlParser.KW_AFTER:
                case SqlParser.KW_ALL:
                case SqlParser.KW_ALTER:
                case SqlParser.KW_ALWAYS:
                case SqlParser.KW_ANALYZE:
                case SqlParser.KW_AND:
                case SqlParser.KW_ANTI:
                case SqlParser.KW_ANY:
                case SqlParser.KW_ANY_VALUE:
                case SqlParser.KW_ARCHIVE:
                case SqlParser.KW_ARRAY:
                case SqlParser.KW_AS:
                case SqlParser.KW_ASC:
                case SqlParser.KW_AT:
                case SqlParser.KW_AUTHORIZATION:
                case SqlParser.KW_BETWEEN:
                case SqlParser.KW_BIGINT:
                case SqlParser.KW_BINARY:
                case SqlParser.KW_BOOLEAN:
                case SqlParser.KW_BOTH:
                case SqlParser.KW_BUCKET:
                case SqlParser.KW_BUCKETS:
                case SqlParser.KW_BY:
                case SqlParser.KW_BYTE:
                case SqlParser.KW_CACHE:
                case SqlParser.KW_CASCADE:
                case SqlParser.KW_CASE:
                case SqlParser.KW_CAST:
                case SqlParser.KW_CATALOG:
                case SqlParser.KW_CATALOGS:
                case SqlParser.KW_CHANGE:
                case SqlParser.KW_CHAR:
                case SqlParser.KW_CHARACTER:
                case SqlParser.KW_CHECK:
                case SqlParser.KW_CLEAR:
                case SqlParser.KW_CLUSTER:
                case SqlParser.KW_CLUSTERED:
                case SqlParser.KW_CODEGEN:
                case SqlParser.KW_COLLATE:
                case SqlParser.KW_COLLECTION:
                case SqlParser.KW_COLUMN:
                case SqlParser.KW_COLUMNS:
                case SqlParser.KW_COMMENT:
                case SqlParser.KW_COMMIT:
                case SqlParser.KW_COMPACT:
                case SqlParser.KW_COMPACTIONS:
                case SqlParser.KW_COMPUTE:
                case SqlParser.KW_CONCATENATE:
                case SqlParser.KW_CONSTRAINT:
                case SqlParser.KW_COST:
                case SqlParser.KW_CREATE:
                case SqlParser.KW_CROSS:
                case SqlParser.KW_CUBE:
                case SqlParser.KW_CURRENT:
                case SqlParser.KW_CURRENT_DATE:
                case SqlParser.KW_CURRENT_TIME:
                case SqlParser.KW_CURRENT_TIMESTAMP:
                case SqlParser.KW_CURRENT_USER:
                case SqlParser.KW_DAY:
                case SqlParser.KW_DAYS:
                case SqlParser.KW_DAYOFYEAR:
                case SqlParser.KW_DATA:
                case SqlParser.KW_DATE:
                case SqlParser.KW_DATABASE:
                case SqlParser.KW_DATABASES:
                case SqlParser.KW_DATEADD:
                case SqlParser.KW_DATE_ADD:
                case SqlParser.KW_DATEDIFF:
                case SqlParser.KW_DATE_DIFF:
                case SqlParser.KW_DBPROPERTIES:
                case SqlParser.KW_DEC:
                case SqlParser.KW_DECIMAL:
                case SqlParser.KW_DECLARE:
                case SqlParser.KW_DEFAULT:
                case SqlParser.KW_DEFINED:
                case SqlParser.KW_DELETE:
                case SqlParser.KW_DELIMITED:
                case SqlParser.KW_DESC:
                case SqlParser.KW_DESCRIBE:
                case SqlParser.KW_DFS:
                case SqlParser.KW_DIRECTORIES:
                case SqlParser.KW_DIRECTORY:
                case SqlParser.KW_DISABLE:
                case SqlParser.KW_DISTINCT:
                case SqlParser.KW_DISTRIBUTE:
                case SqlParser.KW_DIV:
                case SqlParser.KW_DOUBLE:
                case SqlParser.KW_DROP:
                case SqlParser.KW_ELSE:
                case SqlParser.KW_ENABLE:
                case SqlParser.KW_END:
                case SqlParser.KW_ESCAPE:
                case SqlParser.KW_ESCAPED:
                case SqlParser.KW_EXCEPT:
                case SqlParser.KW_EXCHANGE:
                case SqlParser.KW_EXCLUDE:
                case SqlParser.KW_EXISTS:
                case SqlParser.KW_EXPLAIN:
                case SqlParser.KW_EXPORT:
                case SqlParser.KW_EXTENDED:
                case SqlParser.KW_EXTERNAL:
                case SqlParser.KW_EXTRACT:
                case SqlParser.KW_FALSE:
                case SqlParser.KW_FETCH:
                case SqlParser.KW_FIELDS:
                case SqlParser.KW_FILTER:
                case SqlParser.KW_FILEFORMAT:
                case SqlParser.KW_FIRST:
                case SqlParser.KW_FLOAT:
                case SqlParser.KW_FOLLOWING:
                case SqlParser.KW_FOR:
                case SqlParser.KW_FOREIGN:
                case SqlParser.KW_FORMAT:
                case SqlParser.KW_FORMATTED:
                case SqlParser.KW_FULL:
                case SqlParser.KW_FUNCTION:
                case SqlParser.KW_FUNCTIONS:
                case SqlParser.KW_GENERATED:
                case SqlParser.KW_GLOBAL:
                case SqlParser.KW_GRANT:
                case SqlParser.KW_GROUP:
                case SqlParser.KW_GROUPING:
                case SqlParser.KW_HAVING:
                case SqlParser.KW_BINARY_HEX:
                case SqlParser.KW_HOUR:
                case SqlParser.KW_HOURS:
                case SqlParser.KW_IDENTIFIER:
                case SqlParser.KW_IF:
                case SqlParser.KW_IGNORE:
                case SqlParser.KW_IMPORT:
                case SqlParser.KW_IN:
                case SqlParser.KW_INCLUDE:
                case SqlParser.KW_INDEX:
                case SqlParser.KW_INDEXES:
                case SqlParser.KW_INNER:
                case SqlParser.KW_INPATH:
                case SqlParser.KW_INPUTFORMAT:
                case SqlParser.KW_INSERT:
                case SqlParser.KW_INTERSECT:
                case SqlParser.KW_INTERVAL:
                case SqlParser.KW_INT:
                case SqlParser.KW_INTEGER:
                case SqlParser.KW_INTO:
                case SqlParser.KW_IS:
                case SqlParser.KW_ITEMS:
                case SqlParser.KW_JOIN:
                case SqlParser.KW_KEYS:
                case SqlParser.KW_LAST:
                case SqlParser.KW_LATERAL:
                case SqlParser.KW_LAZY:
                case SqlParser.KW_LEADING:
                case SqlParser.KW_LEFT:
                case SqlParser.KW_LIFECYCLE:
                case SqlParser.KW_LIKE:
                case SqlParser.KW_ILIKE:
                case SqlParser.KW_LIMIT:
                case SqlParser.KW_LINES:
                case SqlParser.KW_LIST:
                case SqlParser.KW_LOAD:
                case SqlParser.KW_LOCAL:
                case SqlParser.KW_LOCATION:
                case SqlParser.KW_LOCK:
                case SqlParser.KW_LOCKS:
                case SqlParser.KW_LOGICAL:
                case SqlParser.KW_LONG:
                case SqlParser.KW_MACRO:
                case SqlParser.KW_MAP:
                case SqlParser.KW_MATCHED:
                case SqlParser.KW_MERGE:
                case SqlParser.KW_MICROSECOND:
                case SqlParser.KW_MICROSECONDS:
                case SqlParser.KW_MILLISECOND:
                case SqlParser.KW_MILLISECONDS:
                case SqlParser.KW_MINUTE:
                case SqlParser.KW_MINUTES:
                case SqlParser.KW_MONTH:
                case SqlParser.KW_MONTHS:
                case SqlParser.KW_MSCK:
                case SqlParser.KW_NAME:
                case SqlParser.KW_NAMESPACE:
                case SqlParser.KW_NAMESPACES:
                case SqlParser.KW_NANOSECOND:
                case SqlParser.KW_NANOSECONDS:
                case SqlParser.KW_NATURAL:
                case SqlParser.KW_NO:
                case SqlParser.KW_NOT:
                case SqlParser.KW_NULL:
                case SqlParser.KW_NULLS:
                case SqlParser.KW_NUMERIC:
                case SqlParser.KW_OF:
                case SqlParser.KW_OFFSET:
                case SqlParser.KW_ON:
                case SqlParser.KW_ONLY:
                case SqlParser.KW_OPTIMIZE:
                case SqlParser.KW_OPTION:
                case SqlParser.KW_OPTIONS:
                case SqlParser.KW_OR:
                case SqlParser.KW_ORDER:
                case SqlParser.KW_OUT:
                case SqlParser.KW_OUTER:
                case SqlParser.KW_OUTPUTFORMAT:
                case SqlParser.KW_OVER:
                case SqlParser.KW_OVERLAPS:
                case SqlParser.KW_OVERLAY:
                case SqlParser.KW_OVERWRITE:
                case SqlParser.KW_PARTITION:
                case SqlParser.KW_PARTITIONED:
                case SqlParser.KW_PARTITIONS:
                case SqlParser.KW_PERCENTILE_CONT:
                case SqlParser.KW_PERCENTILE_DISC:
                case SqlParser.KW_PERCENTLIT:
                case SqlParser.KW_PIVOT:
                case SqlParser.KW_PLACING:
                case SqlParser.KW_POSITION:
                case SqlParser.KW_PRECEDING:
                case SqlParser.KW_PRIMARY:
                case SqlParser.KW_PRINCIPALS:
                case SqlParser.KW_PROPERTIES:
                case SqlParser.KW_PURGE:
                case SqlParser.KW_QUARTER:
                case SqlParser.KW_QUERY:
                case SqlParser.KW_RANGE:
                case SqlParser.KW_REAL:
                case SqlParser.KW_RECORDREADER:
                case SqlParser.KW_RECORDWRITER:
                case SqlParser.KW_RECOVER:
                case SqlParser.KW_REDUCE:
                case SqlParser.KW_REFERENCES:
                case SqlParser.KW_REFRESH:
                case SqlParser.KW_RENAME:
                case SqlParser.KW_REPAIR:
                case SqlParser.KW_REPEATABLE:
                case SqlParser.KW_REPLACE:
                case SqlParser.KW_RESET:
                case SqlParser.KW_RESPECT:
                case SqlParser.KW_RESTRICT:
                case SqlParser.KW_REWRITE:
                case SqlParser.KW_REVOKE:
                case SqlParser.KW_RIGHT:
                case SqlParser.KW_RLIKE:
                case SqlParser.KW_REGEXP:
                case SqlParser.KW_ROLE:
                case SqlParser.KW_ROLES:
                case SqlParser.KW_ROLLBACK:
                case SqlParser.KW_ROLLUP:
                case SqlParser.KW_ROW:
                case SqlParser.KW_ROWS:
                case SqlParser.KW_SECOND:
                case SqlParser.KW_SECONDS:
                case SqlParser.KW_SCHEMA:
                case SqlParser.KW_SCHEMAS:
                case SqlParser.KW_SEMI:
                case SqlParser.KW_SEPARATED:
                case SqlParser.KW_SERDE:
                case SqlParser.KW_SERDEPROPERTIES:
                case SqlParser.KW_SESSION_USER:
                case SqlParser.KW_SET:
                case SqlParser.KW_MINUS:
                case SqlParser.KW_SETS:
                case SqlParser.KW_SHORT:
                case SqlParser.KW_SHOW:
                case SqlParser.KW_SINGLE:
                case SqlParser.KW_SKEWED:
                case SqlParser.KW_SMALLINT:
                case SqlParser.KW_SOME:
                case SqlParser.KW_SORT:
                case SqlParser.KW_SORTED:
                case SqlParser.KW_SOURCE:
                case SqlParser.KW_START:
                case SqlParser.KW_STATISTICS:
                case SqlParser.KW_STORED:
                case SqlParser.KW_STRATIFY:
                case SqlParser.KW_STRING:
                case SqlParser.KW_STRUCT:
                case SqlParser.KW_SUBSTR:
                case SqlParser.KW_SUBSTRING:
                case SqlParser.KW_SYNC:
                case SqlParser.KW_SYSTEM:
                case SqlParser.KW_SYSTEM_TIME:
                case SqlParser.KW_SYSTEM_VERSION:
                case SqlParser.KW_TABLES:
                case SqlParser.KW_TABLESAMPLE:
                case SqlParser.KW_TARGET:
                case SqlParser.KW_TBLPROPERTIES:
                case SqlParser.KW_TEMPORARY:
                case SqlParser.KW_TERMINATED:
                case SqlParser.KW_THEN:
                case SqlParser.KW_TIME:
                case SqlParser.KW_TIMEDIFF:
                case SqlParser.KW_TIMESTAMP:
                case SqlParser.KW_TIMESTAMP_LTZ:
                case SqlParser.KW_TIMESTAMP_NTZ:
                case SqlParser.KW_TIMESTAMPADD:
                case SqlParser.KW_TIMESTAMPDIFF:
                case SqlParser.KW_TINYINT:
                case SqlParser.KW_TO:
                case SqlParser.KW_TOUCH:
                case SqlParser.KW_TRAILING:
                case SqlParser.KW_TRANSACTION:
                case SqlParser.KW_TRANSACTIONS:
                case SqlParser.KW_TRANSFORM:
                case SqlParser.KW_TRIM:
                case SqlParser.KW_TRUE:
                case SqlParser.KW_TRUNCATE:
                case SqlParser.KW_TRY_CAST:
                case SqlParser.KW_TYPE:
                case SqlParser.KW_UNARCHIVE:
                case SqlParser.KW_UNBOUNDED:
                case SqlParser.KW_UNCACHE:
                case SqlParser.KW_UNION:
                case SqlParser.KW_UNIQUE:
                case SqlParser.KW_UNKNOWN:
                case SqlParser.KW_UNLOCK:
                case SqlParser.KW_UNPIVOT:
                case SqlParser.KW_UNSET:
                case SqlParser.KW_UPDATE:
                case SqlParser.KW_USE:
                case SqlParser.KW_USER:
                case SqlParser.KW_USING:
                case SqlParser.KW_VALUES:
                case SqlParser.KW_VARCHAR:
                case SqlParser.KW_VAR:
                case SqlParser.KW_VARIABLE:
                case SqlParser.KW_VERSION:
                case SqlParser.KW_VIEW:
                case SqlParser.KW_VIEWS:
                case SqlParser.KW_VOID:
                case SqlParser.KW_WEEK:
                case SqlParser.KW_WEEKS:
                case SqlParser.KW_WHEN:
                case SqlParser.KW_WHERE:
                case SqlParser.KW_WINDOW:
                case SqlParser.KW_WITH:
                case SqlParser.KW_WITHIN:
                case SqlParser.KW_YEAR:
                case SqlParser.KW_YEARS:
                case SqlParser.KW_ZONE:
                case SqlParser.KW_ZORDER:
                case SqlParser.DOUBLEQUOTED_STRING:
                case SqlParser.IDENTIFIER:
                case SqlParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 2771;
                    localContext._name = this.errorCapturingIdentifier();
                    }
                    break;
                case SqlParser.LEFT_PAREN:
                    {
                    this.state = 2772;
                    this.identifierList();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        let localContext = new NamedExpressionSeqContext(this.context, this.state);
        this.enterRule(localContext, 218, SqlParser.RULE_namedExpressionSeq);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2777;
            this.namedExpression();
            this.state = 2782;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 420, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2778;
                    this.match(SqlParser.COMMA);
                    this.state = 2779;
                    this.namedExpression();
                    }
                    }
                }
                this.state = 2784;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 420, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionFieldList(): PartitionFieldListContext {
        let localContext = new PartitionFieldListContext(this.context, this.state);
        this.enterRule(localContext, 220, SqlParser.RULE_partitionFieldList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2785;
            this.match(SqlParser.LEFT_PAREN);
            this.state = 2786;
            localContext._partitionField = this.partitionField();
            localContext._fields.push(localContext._partitionField);
            this.state = 2791;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2787;
                this.match(SqlParser.COMMA);
                this.state = 2788;
                localContext._partitionField = this.partitionField();
                localContext._fields.push(localContext._partitionField);
                }
                }
                this.state = 2793;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2794;
            this.match(SqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionField(): PartitionFieldContext {
        let localContext = new PartitionFieldContext(this.context, this.state);
        this.enterRule(localContext, 222, SqlParser.RULE_partitionField);
        try {
            this.state = 2798;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 422, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2796;
                this.transform();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2797;
                this.columnType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transform(): TransformContext {
        let localContext = new TransformContext(this.context, this.state);
        this.enterRule(localContext, 224, SqlParser.RULE_transform);
        let _la: number;
        try {
            this.state = 2813;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 424, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2800;
                this.qualifiedName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2801;
                localContext._transformName = this.identifier();
                this.state = 2802;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2803;
                this.transformArgument();
                this.state = 2808;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2804;
                    this.match(SqlParser.COMMA);
                    this.state = 2805;
                    this.transformArgument();
                    }
                    }
                    this.state = 2810;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2811;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transformArgument(): TransformArgumentContext {
        let localContext = new TransformArgumentContext(this.context, this.state);
        this.enterRule(localContext, 226, SqlParser.RULE_transformArgument);
        try {
            this.state = 2817;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 425, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2815;
                this.qualifiedName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2816;
                this.constant();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 228, SqlParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2819;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedArgumentExpression(): NamedArgumentExpressionContext {
        let localContext = new NamedArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 230, SqlParser.RULE_namedArgumentExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2821;
            localContext._key = this.identifier();
            this.state = 2822;
            this.match(SqlParser.FAT_ARROW);
            this.state = 2823;
            localContext._value = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionArgument(): FunctionArgumentContext {
        let localContext = new FunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 232, SqlParser.RULE_functionArgument);
        try {
            this.state = 2827;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 426, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2825;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2826;
                this.namedArgumentExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionSeq(): ExpressionSeqContext {
        let localContext = new ExpressionSeqContext(this.context, this.state);
        this.enterRule(localContext, 234, SqlParser.RULE_expressionSeq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2829;
            this.expression();
            this.state = 2834;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2830;
                this.match(SqlParser.COMMA);
                this.state = 2831;
                this.expression();
                }
                }
                this.state = 2836;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 236;
        this.enterRecursionRule(localContext, 236, SqlParser.RULE_booleanExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2849;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 429, this.context) ) {
            case 1:
                {
                this.state = 2838;
                _la = this.tokenStream.LA(1);
                if(!(_la === 196 || _la === 359)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2839;
                this.booleanExpression(5);
                }
                break;
            case 2:
                {
                this.state = 2840;
                this.match(SqlParser.KW_EXISTS);
                this.state = 2841;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2842;
                this.query();
                this.state = 2843;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                {
                this.state = 2845;
                this.valueExpression(0);
                this.state = 2847;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 428, this.context) ) {
                case 1:
                    {
                    this.state = 2846;
                    this.predicate();
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2859;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 431, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2857;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 430, this.context) ) {
                    case 1:
                        {
                        localContext = new BooleanExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_booleanExpression);
                        this.state = 2851;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2852;
                        localContext._operator = this.match(SqlParser.KW_AND);
                        this.state = 2853;
                        localContext._right = this.booleanExpression(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new BooleanExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_booleanExpression);
                        this.state = 2854;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2855;
                        localContext._operator = this.match(SqlParser.KW_OR);
                        this.state = 2856;
                        localContext._right = this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 2861;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 431, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate(): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state);
        this.enterRule(localContext, 238, SqlParser.RULE_predicate);
        let _la: number;
        try {
            this.state = 2944;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 445, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2863;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 2862;
                    this.match(SqlParser.KW_NOT);
                    }
                }

                this.state = 2865;
                localContext._kind = this.match(SqlParser.KW_BETWEEN);
                this.state = 2866;
                localContext._lower = this.valueExpression(0);
                this.state = 2867;
                this.match(SqlParser.KW_AND);
                this.state = 2868;
                localContext._upper = this.valueExpression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2871;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 2870;
                    this.match(SqlParser.KW_NOT);
                    }
                }

                this.state = 2873;
                localContext._kind = this.match(SqlParser.KW_IN);
                this.state = 2874;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2875;
                this.expression();
                this.state = 2880;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2876;
                    this.match(SqlParser.COMMA);
                    this.state = 2877;
                    this.expression();
                    }
                    }
                    this.state = 2882;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2883;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2886;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 2885;
                    this.match(SqlParser.KW_NOT);
                    }
                }

                this.state = 2888;
                localContext._kind = this.match(SqlParser.KW_IN);
                this.state = 2889;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2890;
                this.query();
                this.state = 2891;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2894;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 2893;
                    this.match(SqlParser.KW_NOT);
                    }
                }

                this.state = 2896;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 250 || _la === 251)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2897;
                localContext._pattern = this.valueExpression(0);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2899;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 2898;
                    this.match(SqlParser.KW_NOT);
                    }
                }

                this.state = 2901;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 164)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2902;
                localContext._quantifier = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 16 || _la === 276)) {
                    localContext._quantifier = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2916;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 439, this.context) ) {
                case 1:
                    {
                    this.state = 2903;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 2904;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 2905;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 2906;
                    this.expression();
                    this.state = 2911;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2907;
                        this.match(SqlParser.COMMA);
                        this.state = 2908;
                        this.expression();
                        }
                        }
                        this.state = 2913;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2914;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2919;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 2918;
                    this.match(SqlParser.KW_NOT);
                    }
                }

                this.state = 2921;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 164)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2922;
                localContext._pattern = this.valueExpression(0);
                this.state = 2925;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 441, this.context) ) {
                case 1:
                    {
                    this.state = 2923;
                    this.match(SqlParser.KW_ESCAPE);
                    this.state = 2924;
                    localContext._escapeChar = this.stringLit();
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2927;
                this.match(SqlParser.KW_IS);
                this.state = 2929;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 2928;
                    this.match(SqlParser.KW_NOT);
                    }
                }

                this.state = 2931;
                localContext._kind = this.match(SqlParser.KW_NULL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2932;
                this.match(SqlParser.KW_IS);
                this.state = 2934;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 2933;
                    this.match(SqlParser.KW_NOT);
                    }
                }

                this.state = 2936;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 111 || _la === 315 || _la === 324)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2937;
                this.match(SqlParser.KW_IS);
                this.state = 2939;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 2938;
                    this.match(SqlParser.KW_NOT);
                    }
                }

                this.state = 2941;
                localContext._kind = this.match(SqlParser.KW_DISTINCT);
                this.state = 2942;
                this.match(SqlParser.KW_FROM);
                this.state = 2943;
                localContext._right = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 240;
        this.enterRecursionRule(localContext, 240, SqlParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2950;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 446, this.context) ) {
            case 1:
                {
                this.state = 2947;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                this.state = 2948;
                localContext._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 35) !== 0))) {
                    localContext._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2949;
                this.valueExpression(7);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2973;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 448, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2971;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 447, this.context) ) {
                    case 1:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_valueExpression);
                        this.state = 2952;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 2953;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 94 || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 7) !== 0))) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2954;
                        localContext._right = this.valueExpression(7);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_valueExpression);
                        this.state = 2955;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 2956;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 259) !== 0))) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2957;
                        localContext._right = this.valueExpression(6);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_valueExpression);
                        this.state = 2958;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 2959;
                        localContext._operator = this.match(SqlParser.AMPERSAND);
                        this.state = 2960;
                        localContext._right = this.valueExpression(5);
                        }
                        break;
                    case 4:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_valueExpression);
                        this.state = 2961;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 2962;
                        localContext._operator = this.match(SqlParser.HAT);
                        this.state = 2963;
                        localContext._right = this.valueExpression(4);
                        }
                        break;
                    case 5:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_valueExpression);
                        this.state = 2964;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2965;
                        localContext._operator = this.match(SqlParser.PIPE);
                        this.state = 2966;
                        localContext._right = this.valueExpression(3);
                        }
                        break;
                    case 6:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_valueExpression);
                        this.state = 2967;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2968;
                        this.comparisonOperator();
                        this.state = 2969;
                        localContext._right = this.valueExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 2975;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 448, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public datetimeUnit(): DatetimeUnitContext {
        let localContext = new DatetimeUnitContext(this.context, this.state);
        this.enterRule(localContext, 242, SqlParser.RULE_datetimeUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2976;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 69 || _la === 134 || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & 85) !== 0) || _la === 230 || _la === 258 || _la === 340 || _la === 347)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 244;
        this.enterRecursionRule(localContext, 244, SqlParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3227;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 474, this.context) ) {
            case 1:
                {
                this.state = 2979;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 63)) & ~0x1F) === 0 && ((1 << (_la - 63)) & 13) !== 0) || _la === 267 || _la === 330)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                {
                this.state = 2980;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 74 || _la === 75 || _la === 305)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2981;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2984;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_DAY:
                case SqlParser.KW_DAYOFYEAR:
                case SqlParser.KW_HOUR:
                case SqlParser.KW_MICROSECOND:
                case SqlParser.KW_MILLISECOND:
                case SqlParser.KW_MINUTE:
                case SqlParser.KW_MONTH:
                case SqlParser.KW_QUARTER:
                case SqlParser.KW_SECOND:
                case SqlParser.KW_WEEK:
                case SqlParser.KW_YEAR:
                    {
                    this.state = 2982;
                    localContext._unit = this.datetimeUnit();
                    }
                    break;
                case SqlParser.STRING_LITERAL:
                case SqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 2983;
                    localContext._invalidUnit = this.stringLit();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2986;
                this.match(SqlParser.COMMA);
                this.state = 2987;
                localContext._unitsAmount = this.valueExpression(0);
                this.state = 2988;
                this.match(SqlParser.COMMA);
                this.state = 2989;
                localContext._timestamp = this.valueExpression(0);
                this.state = 2990;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                {
                this.state = 2992;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 76 || _la === 77 || _la === 301 || _la === 306)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2993;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 2996;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_DAY:
                case SqlParser.KW_DAYOFYEAR:
                case SqlParser.KW_HOUR:
                case SqlParser.KW_MICROSECOND:
                case SqlParser.KW_MILLISECOND:
                case SqlParser.KW_MINUTE:
                case SqlParser.KW_MONTH:
                case SqlParser.KW_QUARTER:
                case SqlParser.KW_SECOND:
                case SqlParser.KW_WEEK:
                case SqlParser.KW_YEAR:
                    {
                    this.state = 2994;
                    localContext._unit = this.datetimeUnit();
                    }
                    break;
                case SqlParser.STRING_LITERAL:
                case SqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 2995;
                    localContext._invalidUnit = this.stringLit();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2998;
                this.match(SqlParser.COMMA);
                this.state = 2999;
                localContext._startTimestamp = this.valueExpression(0);
                this.state = 3000;
                this.match(SqlParser.COMMA);
                this.state = 3001;
                localContext._endTimestamp = this.valueExpression(0);
                this.state = 3002;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 4:
                {
                this.state = 3004;
                this.match(SqlParser.KW_CASE);
                this.state = 3006;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3005;
                    this.whenClause();
                    }
                    }
                    this.state = 3008;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 342);
                this.state = 3012;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 3010;
                    this.match(SqlParser.KW_ELSE);
                    this.state = 3011;
                    localContext._elseExpression = this.expression();
                    }
                }

                this.state = 3014;
                this.match(SqlParser.KW_END);
                }
                break;
            case 5:
                {
                this.state = 3016;
                this.match(SqlParser.KW_CASE);
                this.state = 3017;
                this.expression();
                this.state = 3019;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3018;
                    this.whenClause();
                    }
                    }
                    this.state = 3021;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 342);
                this.state = 3025;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 3023;
                    this.match(SqlParser.KW_ELSE);
                    this.state = 3024;
                    localContext._elseExpression = this.expression();
                    }
                }

                this.state = 3027;
                this.match(SqlParser.KW_END);
                }
                break;
            case 6:
                {
                this.state = 3029;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 36 || _la === 317)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3030;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3031;
                this.expression();
                this.state = 3032;
                this.match(SqlParser.KW_AS);
                this.state = 3033;
                this.dataType();
                this.state = 3034;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 7:
                {
                this.state = 3036;
                this.match(SqlParser.KW_STRUCT);
                this.state = 3037;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3046;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 456, this.context) ) {
                case 1:
                    {
                    this.state = 3038;
                    this.namedExpression();
                    this.state = 3043;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3039;
                        this.match(SqlParser.COMMA);
                        this.state = 3040;
                        this.namedExpression();
                        }
                        }
                        this.state = 3045;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                }
                this.state = 3048;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 8:
                {
                this.state = 3049;
                this.match(SqlParser.KW_FIRST);
                this.state = 3050;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3051;
                this.expression();
                this.state = 3054;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 3052;
                    this.match(SqlParser.KW_IGNORE);
                    this.state = 3053;
                    this.match(SqlParser.KW_NULLS);
                    }
                }

                this.state = 3056;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 9:
                {
                this.state = 3058;
                this.match(SqlParser.KW_ANY_VALUE);
                this.state = 3059;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3060;
                this.expression();
                this.state = 3063;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 3061;
                    this.match(SqlParser.KW_IGNORE);
                    this.state = 3062;
                    this.match(SqlParser.KW_NULLS);
                    }
                }

                this.state = 3065;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 10:
                {
                this.state = 3067;
                this.match(SqlParser.KW_LAST);
                this.state = 3068;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3069;
                this.expression();
                this.state = 3072;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 3070;
                    this.match(SqlParser.KW_IGNORE);
                    this.state = 3071;
                    this.match(SqlParser.KW_NULLS);
                    }
                }

                this.state = 3074;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 11:
                {
                this.state = 3076;
                this.match(SqlParser.KW_POSITION);
                this.state = 3077;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3078;
                localContext._substr = this.valueExpression(0);
                this.state = 3079;
                this.match(SqlParser.KW_IN);
                this.state = 3080;
                localContext._str = this.valueExpression(0);
                this.state = 3081;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 12:
                {
                this.state = 3083;
                this.constant();
                }
                break;
            case 13:
                {
                this.state = 3084;
                this.match(SqlParser.ASTERISK);
                }
                break;
            case 14:
                {
                this.state = 3085;
                this.qualifiedName();
                this.state = 3086;
                this.match(SqlParser.DOT);
                this.state = 3087;
                this.match(SqlParser.ASTERISK);
                }
                break;
            case 15:
                {
                this.state = 3089;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3090;
                this.namedExpression();
                this.state = 3093;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3091;
                    this.match(SqlParser.COMMA);
                    this.state = 3092;
                    this.namedExpression();
                    }
                    }
                    this.state = 3095;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 4);
                this.state = 3097;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 16:
                {
                this.state = 3099;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3100;
                this.query();
                this.state = 3101;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 17:
                {
                this.state = 3103;
                this.match(SqlParser.KW_IDENTIFIER);
                this.state = 3104;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3105;
                this.expression();
                this.state = 3106;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 18:
                {
                this.state = 3108;
                this.functionName();
                this.state = 3109;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3121;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967231) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967279) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 1073678415) !== 0)) {
                    {
                    this.state = 3111;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 461, this.context) ) {
                    case 1:
                        {
                        this.state = 3110;
                        this.setQuantifier();
                        }
                        break;
                    }
                    this.state = 3113;
                    this.functionArgument();
                    this.state = 3118;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3114;
                        this.match(SqlParser.COMMA);
                        this.state = 3115;
                        this.functionArgument();
                        }
                        }
                        this.state = 3120;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 3123;
                this.match(SqlParser.RIGHT_PAREN);
                this.state = 3130;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 464, this.context) ) {
                case 1:
                    {
                    this.state = 3124;
                    this.match(SqlParser.KW_FILTER);
                    this.state = 3125;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 3126;
                    this.match(SqlParser.KW_WHERE);
                    this.state = 3127;
                    localContext._where = this.booleanExpression(0);
                    this.state = 3128;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3134;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 465, this.context) ) {
                case 1:
                    {
                    this.state = 3132;
                    localContext._nullsOption = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 138 || _la === 245)) {
                        localContext._nullsOption = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3133;
                    this.match(SqlParser.KW_NULLS);
                    }
                    break;
                }
                this.state = 3138;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 466, this.context) ) {
                case 1:
                    {
                    this.state = 3136;
                    this.match(SqlParser.KW_OVER);
                    this.state = 3137;
                    this.windowSpec();
                    }
                    break;
                }
                }
                break;
            case 19:
                {
                this.state = 3140;
                this.identifier();
                this.state = 3141;
                this.match(SqlParser.ARROW);
                this.state = 3142;
                this.expression();
                }
                break;
            case 20:
                {
                this.state = 3144;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3145;
                this.identifier();
                this.state = 3148;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3146;
                    this.match(SqlParser.COMMA);
                    this.state = 3147;
                    this.identifier();
                    }
                    }
                    this.state = 3150;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 4);
                this.state = 3152;
                this.match(SqlParser.RIGHT_PAREN);
                this.state = 3153;
                this.match(SqlParser.ARROW);
                this.state = 3154;
                this.expression();
                }
                break;
            case 21:
                {
                this.state = 3156;
                this.identifier();
                }
                break;
            case 22:
                {
                this.state = 3157;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3158;
                this.expression();
                this.state = 3159;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 23:
                {
                this.state = 3161;
                this.match(SqlParser.KW_EXTRACT);
                this.state = 3162;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3163;
                localContext._field = this.identifier();
                this.state = 3164;
                this.match(SqlParser.KW_FROM);
                this.state = 3165;
                localContext._source = this.valueExpression(0);
                this.state = 3166;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 24:
                {
                this.state = 3168;
                _la = this.tokenStream.LA(1);
                if(!(_la === 286 || _la === 287)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3169;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3170;
                localContext._str = this.valueExpression(0);
                this.state = 3171;
                _la = this.tokenStream.LA(1);
                if(!(_la === 4 || _la === 123)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3172;
                localContext._pos = this.valueExpression(0);
                this.state = 3175;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4 || _la === 119) {
                    {
                    this.state = 3173;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 4 || _la === 119)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3174;
                    localContext._len = this.valueExpression(0);
                    }
                }

                this.state = 3177;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 25:
                {
                this.state = 3179;
                this.match(SqlParser.KW_TRIM);
                this.state = 3180;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3182;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 469, this.context) ) {
                case 1:
                    {
                    this.state = 3181;
                    localContext._trimOption = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 28 || _la === 160 || _la === 310)) {
                        localContext._trimOption = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 3185;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967231) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967279) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 536839207) !== 0)) {
                    {
                    this.state = 3184;
                    localContext._trimStr = this.valueExpression(0);
                    }
                }

                this.state = 3187;
                this.match(SqlParser.KW_FROM);
                this.state = 3188;
                localContext._srcStr = this.valueExpression(0);
                this.state = 3189;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 26:
                {
                this.state = 3191;
                this.match(SqlParser.KW_OVERLAY);
                this.state = 3192;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3193;
                localContext._input = this.valueExpression(0);
                this.state = 3194;
                this.match(SqlParser.KW_PLACING);
                this.state = 3195;
                localContext._replace = this.valueExpression(0);
                this.state = 3196;
                this.match(SqlParser.KW_FROM);
                this.state = 3197;
                localContext._position = this.valueExpression(0);
                this.state = 3200;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 3198;
                    this.match(SqlParser.KW_FOR);
                    this.state = 3199;
                    localContext._length = this.valueExpression(0);
                    }
                }

                this.state = 3202;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 27:
                {
                this.state = 3204;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 219 || _la === 220)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3205;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3206;
                localContext._percentage = this.valueExpression(0);
                this.state = 3207;
                this.match(SqlParser.RIGHT_PAREN);
                this.state = 3208;
                this.match(SqlParser.KW_WITHIN);
                this.state = 3209;
                this.match(SqlParser.KW_GROUP);
                this.state = 3210;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3211;
                this.match(SqlParser.KW_ORDER);
                this.state = 3212;
                this.match(SqlParser.KW_BY);
                this.state = 3213;
                this.sortItem();
                this.state = 3214;
                this.match(SqlParser.RIGHT_PAREN);
                this.state = 3221;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 472, this.context) ) {
                case 1:
                    {
                    this.state = 3215;
                    this.match(SqlParser.KW_FILTER);
                    this.state = 3216;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 3217;
                    this.match(SqlParser.KW_WHERE);
                    this.state = 3218;
                    localContext._where = this.booleanExpression(0);
                    this.state = 3219;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3225;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 473, this.context) ) {
                case 1:
                    {
                    this.state = 3223;
                    this.match(SqlParser.KW_OVER);
                    this.state = 3224;
                    this.windowSpec();
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3239;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 476, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3237;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 475, this.context) ) {
                    case 1:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        localContext._value = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_primaryExpression);
                        this.state = 3229;
                        if (!(this.precpred(this.context, 9))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 9)");
                        }
                        this.state = 3230;
                        this.match(SqlParser.LEFT_BRACKET);
                        this.state = 3231;
                        localContext._index = this.valueExpression(0);
                        this.state = 3232;
                        this.match(SqlParser.RIGHT_BRACKET);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        localContext._base = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SqlParser.RULE_primaryExpression);
                        this.state = 3234;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 3235;
                        this.match(SqlParser.DOT);
                        this.state = 3236;
                        localContext._fieldName = this.identifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 3241;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 476, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public literalType(): LiteralTypeContext {
        let localContext = new LiteralTypeContext(this.context, this.state);
        this.enterRule(localContext, 246, SqlParser.RULE_literalType);
        try {
            this.state = 3249;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 477, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3242;
                this.match(SqlParser.KW_DATE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3243;
                this.match(SqlParser.KW_TIMESTAMP);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3244;
                this.match(SqlParser.KW_TIMESTAMP_LTZ);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3245;
                this.match(SqlParser.KW_TIMESTAMP_NTZ);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3246;
                this.match(SqlParser.KW_INTERVAL);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3247;
                this.match(SqlParser.KW_BINARY_HEX);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3248;
                localContext._unsupportedType = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constant(): ConstantContext {
        let localContext = new ConstantContext(this.context, this.state);
        this.enterRule(localContext, 248, SqlParser.RULE_constant);
        try {
            let alternative: number;
            this.state = 3266;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 479, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3251;
                this.match(SqlParser.KW_NULL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3252;
                this.match(SqlParser.QUESTION);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3253;
                this.match(SqlParser.COLON);
                this.state = 3254;
                this.identifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3255;
                this.interval();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3256;
                this.literalType();
                this.state = 3257;
                this.stringLit();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3259;
                this.number_();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3260;
                this.booleanValue();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3262;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 3261;
                        this.stringLit();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 3264;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 478, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 250, SqlParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3268;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & 255) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arithmeticOperator(): ArithmeticOperatorContext {
        let localContext = new ArithmeticOperatorContext(this.context, this.state);
        this.enterRule(localContext, 252, SqlParser.RULE_arithmeticOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3270;
            _la = this.tokenStream.LA(1);
            if(!(_la === 94 || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 1023) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public predicateOperator(): PredicateOperatorContext {
        let localContext = new PredicateOperatorContext(this.context, this.state);
        this.enterRule(localContext, 254, SqlParser.RULE_predicateOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3272;
            _la = this.tokenStream.LA(1);
            if(!(_la === 14 || _la === 140 || _la === 196 || _la === 207)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValue(): BooleanValueContext {
        let localContext = new BooleanValueContext(this.context, this.state);
        this.enterRule(localContext, 256, SqlParser.RULE_booleanValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3274;
            _la = this.tokenStream.LA(1);
            if(!(_la === 111 || _la === 315)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 258, SqlParser.RULE_interval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3276;
            this.match(SqlParser.KW_INTERVAL);
            this.state = 3279;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 480, this.context) ) {
            case 1:
                {
                this.state = 3277;
                this.errorCapturingMultiUnitsInterval();
                }
                break;
            case 2:
                {
                this.state = 3278;
                this.errorCapturingUnitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext {
        let localContext = new ErrorCapturingMultiUnitsIntervalContext(this.context, this.state);
        this.enterRule(localContext, 260, SqlParser.RULE_errorCapturingMultiUnitsInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3281;
            localContext._body = this.multiUnitsInterval();
            this.state = 3283;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 481, this.context) ) {
            case 1:
                {
                this.state = 3282;
                this.unitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext {
        let localContext = new ErrorCapturingUnitToUnitIntervalContext(this.context, this.state);
        this.enterRule(localContext, 262, SqlParser.RULE_errorCapturingUnitToUnitInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3285;
            localContext._body = this.unitToUnitInterval();
            this.state = 3288;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 482, this.context) ) {
            case 1:
                {
                this.state = 3286;
                localContext._error1 = this.multiUnitsInterval();
                }
                break;
            case 2:
                {
                this.state = 3287;
                localContext._error2 = this.unitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext {
        let localContext = new MultiUnitsIntervalContext(this.context, this.state);
        this.enterRule(localContext, 264, SqlParser.RULE_multiUnitsInterval);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3293;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 3290;
                    this.intervalValue();
                    this.state = 3291;
                    localContext._unitInMultiUnits = this.unitInMultiUnits();
                    localContext._unit.push(localContext._unitInMultiUnits);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3295;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 483, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext {
        let localContext = new UnitToUnitIntervalContext(this.context, this.state);
        this.enterRule(localContext, 266, SqlParser.RULE_unitToUnitInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3297;
            localContext._value = this.intervalValue();
            this.state = 3298;
            this.unitInUnitToUnit();
            this.state = 3299;
            this.match(SqlParser.KW_TO);
            this.state = 3300;
            this.unitInUnitToUnit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalValue(): IntervalValueContext {
        let localContext = new IntervalValueContext(this.context, this.state);
        this.enterRule(localContext, 268, SqlParser.RULE_intervalValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3303;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 360 || _la === 361) {
                {
                this.state = 3302;
                _la = this.tokenStream.LA(1);
                if(!(_la === 360 || _la === 361)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3308;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.INTEGER_VALUE:
                {
                this.state = 3305;
                this.match(SqlParser.INTEGER_VALUE);
                }
                break;
            case SqlParser.DECIMAL_VALUE:
                {
                this.state = 3306;
                this.match(SqlParser.DECIMAL_VALUE);
                }
                break;
            case SqlParser.STRING_LITERAL:
            case SqlParser.DOUBLEQUOTED_STRING:
                {
                this.state = 3307;
                this.stringLit();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitInMultiUnits(): UnitInMultiUnitsContext {
        let localContext = new UnitInMultiUnitsContext(this.context, this.state);
        this.enterRule(localContext, 270, SqlParser.RULE_unitInMultiUnits);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3310;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 68 || _la === 134 || _la === 135 || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & 12543) !== 0) || _la === 258 || _la === 259 || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 387) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitInUnitToUnit(): UnitInUnitToUnitContext {
        let localContext = new UnitInUnitToUnitContext(this.context, this.state);
        this.enterRule(localContext, 272, SqlParser.RULE_unitInUnitToUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3312;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 134 || _la === 183 || _la === 185 || _la === 258 || _la === 347)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colPosition(): ColPositionContext {
        let localContext = new ColPositionContext(this.context, this.state);
        this.enterRule(localContext, 274, SqlParser.RULE_colPosition);
        try {
            this.state = 3317;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_FIRST:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3314;
                localContext._position = this.match(SqlParser.KW_FIRST);
                }
                break;
            case SqlParser.KW_AFTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3315;
                localContext._position = this.match(SqlParser.KW_AFTER);
                this.state = 3316;
                localContext._afterCol = this.errorCapturingIdentifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_(): TypeContext {
        let localContext = new TypeContext(this.context, this.state);
        this.enterRule(localContext, 276, SqlParser.RULE_type);
        try {
            this.state = 3349;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 487, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3319;
                this.match(SqlParser.KW_BOOLEAN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3320;
                this.match(SqlParser.KW_TINYINT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3321;
                this.match(SqlParser.KW_BYTE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3322;
                this.match(SqlParser.KW_SMALLINT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3323;
                this.match(SqlParser.KW_SHORT);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3324;
                this.match(SqlParser.KW_INT);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3325;
                this.match(SqlParser.KW_INTEGER);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3326;
                this.match(SqlParser.KW_BIGINT);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3327;
                this.match(SqlParser.KW_LONG);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3328;
                this.match(SqlParser.KW_FLOAT);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3329;
                this.match(SqlParser.KW_REAL);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3330;
                this.match(SqlParser.KW_DOUBLE);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3331;
                this.match(SqlParser.KW_DATE);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3332;
                this.match(SqlParser.KW_TIMESTAMP);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3333;
                this.match(SqlParser.KW_TIMESTAMP_NTZ);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3334;
                this.match(SqlParser.KW_TIMESTAMP_LTZ);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3335;
                this.match(SqlParser.KW_STRING);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 3336;
                this.match(SqlParser.KW_CHARACTER);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 3337;
                this.match(SqlParser.KW_CHAR);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 3338;
                this.match(SqlParser.KW_VARCHAR);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 3339;
                this.match(SqlParser.KW_BINARY);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 3340;
                this.match(SqlParser.KW_DECIMAL);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 3341;
                this.match(SqlParser.KW_DEC);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 3342;
                this.match(SqlParser.KW_NUMERIC);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 3343;
                this.match(SqlParser.KW_VOID);
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 3344;
                this.match(SqlParser.KW_INTERVAL);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 3345;
                this.match(SqlParser.KW_ARRAY);
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 3346;
                this.match(SqlParser.KW_STRUCT);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 3347;
                this.match(SqlParser.KW_MAP);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 3348;
                localContext._unsupportedType = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataType(): DataTypeContext {
        let localContext = new DataTypeContext(this.context, this.state);
        this.enterRule(localContext, 278, SqlParser.RULE_dataType);
        let _la: number;
        try {
            this.state = 3404;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 495, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3351;
                localContext._complex = this.match(SqlParser.KW_ARRAY);
                this.state = 3352;
                this.match(SqlParser.LT);
                this.state = 3353;
                this.dataType();
                this.state = 3354;
                this.match(SqlParser.GT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3356;
                localContext._complex = this.match(SqlParser.KW_MAP);
                this.state = 3357;
                this.match(SqlParser.LT);
                this.state = 3358;
                this.dataType();
                this.state = 3359;
                this.match(SqlParser.COMMA);
                this.state = 3360;
                this.dataType();
                this.state = 3361;
                this.match(SqlParser.GT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3363;
                localContext._complex = this.match(SqlParser.KW_STRUCT);
                this.state = 3377;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.LT:
                    {
                    this.state = 3364;
                    this.match(SqlParser.LT);
                    this.state = 3373;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967231) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967279) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & 3073) !== 0)) {
                        {
                        this.state = 3365;
                        this.complexColType();
                        this.state = 3370;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 3366;
                            this.match(SqlParser.COMMA);
                            this.state = 3367;
                            this.complexColType();
                            }
                            }
                            this.state = 3372;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 3375;
                    this.match(SqlParser.GT);
                    }
                    break;
                case SqlParser.NEQ:
                    {
                    this.state = 3376;
                    this.match(SqlParser.NEQ);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3379;
                this.match(SqlParser.KW_INTERVAL);
                this.state = 3380;
                _la = this.tokenStream.LA(1);
                if(!(_la === 185 || _la === 347)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3383;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 491, this.context) ) {
                case 1:
                    {
                    this.state = 3381;
                    this.match(SqlParser.KW_TO);
                    this.state = 3382;
                    this.match(SqlParser.KW_MONTH);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3385;
                this.match(SqlParser.KW_INTERVAL);
                this.state = 3386;
                _la = this.tokenStream.LA(1);
                if(!(_la === 67 || _la === 134 || _la === 183 || _la === 258)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3389;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 492, this.context) ) {
                case 1:
                    {
                    this.state = 3387;
                    this.match(SqlParser.KW_TO);
                    this.state = 3388;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 134 || _la === 183 || _la === 258)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3391;
                this.type_();
                this.state = 3402;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 494, this.context) ) {
                case 1:
                    {
                    this.state = 3392;
                    this.match(SqlParser.LEFT_PAREN);
                    this.state = 3393;
                    this.match(SqlParser.INTEGER_VALUE);
                    this.state = 3398;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3394;
                        this.match(SqlParser.COMMA);
                        this.state = 3395;
                        this.match(SqlParser.INTEGER_VALUE);
                        }
                        }
                        this.state = 3400;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3401;
                    this.match(SqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionSeqForAdd(): QualifiedColTypeWithPositionSeqForAddContext {
        let localContext = new QualifiedColTypeWithPositionSeqForAddContext(this.context, this.state);
        this.enterRule(localContext, 280, SqlParser.RULE_qualifiedColTypeWithPositionSeqForAdd);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3406;
            this.qualifiedColTypeWithPositionForAdd();
            this.state = 3411;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3407;
                this.match(SqlParser.COMMA);
                this.state = 3408;
                this.qualifiedColTypeWithPositionForAdd();
                }
                }
                this.state = 3413;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionForAdd(): QualifiedColTypeWithPositionForAddContext {
        let localContext = new QualifiedColTypeWithPositionForAddContext(this.context, this.state);
        this.enterRule(localContext, 282, SqlParser.RULE_qualifiedColTypeWithPositionForAdd);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3414;
            localContext._name = this.columnNameCreate();
            this.state = 3415;
            this.dataType();
            this.state = 3419;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 497, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3416;
                    this.colDefinitionDescriptorWithPosition();
                    }
                    }
                }
                this.state = 3421;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 497, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionSeqForReplace(): QualifiedColTypeWithPositionSeqForReplaceContext {
        let localContext = new QualifiedColTypeWithPositionSeqForReplaceContext(this.context, this.state);
        this.enterRule(localContext, 284, SqlParser.RULE_qualifiedColTypeWithPositionSeqForReplace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3422;
            this.qualifiedColTypeWithPositionForReplace();
            this.state = 3427;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3423;
                this.match(SqlParser.COMMA);
                this.state = 3424;
                this.qualifiedColTypeWithPositionForReplace();
                }
                }
                this.state = 3429;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionForReplace(): QualifiedColTypeWithPositionForReplaceContext {
        let localContext = new QualifiedColTypeWithPositionForReplaceContext(this.context, this.state);
        this.enterRule(localContext, 286, SqlParser.RULE_qualifiedColTypeWithPositionForReplace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3430;
            localContext._name = this.columnName();
            this.state = 3431;
            this.dataType();
            this.state = 3435;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 9 || _la === 51 || _la === 82 || _la === 116 || _la === 196) {
                {
                {
                this.state = 3432;
                this.colDefinitionDescriptorWithPosition();
                }
                }
                this.state = 3437;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext {
        let localContext = new ColDefinitionDescriptorWithPositionContext(this.context, this.state);
        this.enterRule(localContext, 288, SqlParser.RULE_colDefinitionDescriptorWithPosition);
        try {
            this.state = 3445;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3438;
                this.match(SqlParser.KW_NOT);
                this.state = 3439;
                this.match(SqlParser.KW_NULL);
                }
                break;
            case SqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3440;
                this.match(SqlParser.KW_DEFAULT);
                this.state = 3441;
                this.expression();
                }
                break;
            case SqlParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3442;
                this.match(SqlParser.KW_COMMENT);
                this.state = 3443;
                localContext._comment = this.stringLit();
                }
                break;
            case SqlParser.KW_AFTER:
            case SqlParser.KW_FIRST:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3444;
                this.colPosition();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDefaultExpression(): VariableDefaultExpressionContext {
        let localContext = new VariableDefaultExpressionContext(this.context, this.state);
        this.enterRule(localContext, 290, SqlParser.RULE_variableDefaultExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3447;
            _la = this.tokenStream.LA(1);
            if(!(_la === 82 || _la === 351)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3448;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colTypeList(): ColTypeListContext {
        let localContext = new ColTypeListContext(this.context, this.state);
        this.enterRule(localContext, 292, SqlParser.RULE_colTypeList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3450;
            this.columnType();
            this.state = 3455;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 501, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3451;
                    this.match(SqlParser.COMMA);
                    this.state = 3452;
                    this.columnType();
                    }
                    }
                }
                this.state = 3457;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 501, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnType(): ColumnTypeContext {
        let localContext = new ColumnTypeContext(this.context, this.state);
        this.enterRule(localContext, 294, SqlParser.RULE_columnType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3458;
            localContext._colName = this.errorCapturingIdentifier();
            this.state = 3459;
            this.dataType();
            this.state = 3462;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 502, this.context) ) {
            case 1:
                {
                this.state = 3460;
                this.match(SqlParser.KW_NOT);
                this.state = 3461;
                this.match(SqlParser.KW_NULL);
                }
                break;
            }
            this.state = 3466;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 503, this.context) ) {
            case 1:
                {
                this.state = 3464;
                this.match(SqlParser.KW_COMMENT);
                this.state = 3465;
                localContext._comment = this.stringLit();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext {
        let localContext = new CreateOrReplaceTableColTypeListContext(this.context, this.state);
        this.enterRule(localContext, 296, SqlParser.RULE_createOrReplaceTableColTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3468;
            this.createOrReplaceTableColType();
            this.state = 3473;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3469;
                this.match(SqlParser.COMMA);
                this.state = 3470;
                this.createOrReplaceTableColType();
                }
                }
                this.state = 3475;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createOrReplaceTableColType(): CreateOrReplaceTableColTypeContext {
        let localContext = new CreateOrReplaceTableColTypeContext(this.context, this.state);
        this.enterRule(localContext, 298, SqlParser.RULE_createOrReplaceTableColType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3476;
            localContext._colName = this.columnNameCreate();
            this.state = 3477;
            localContext._colType = this.dataType();
            this.state = 3481;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 51 || _la === 82 || _la === 127 || _la === 196) {
                {
                {
                this.state = 3478;
                this.colDefinitionOption();
                }
                }
                this.state = 3483;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colDefinitionOption(): ColDefinitionOptionContext {
        let localContext = new ColDefinitionOptionContext(this.context, this.state);
        this.enterRule(localContext, 300, SqlParser.RULE_colDefinitionOption);
        try {
            this.state = 3497;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3484;
                this.match(SqlParser.KW_NOT);
                this.state = 3485;
                this.match(SqlParser.KW_NULL);
                }
                break;
            case SqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3486;
                this.match(SqlParser.KW_DEFAULT);
                this.state = 3487;
                this.expression();
                }
                break;
            case SqlParser.KW_GENERATED:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3488;
                this.match(SqlParser.KW_GENERATED);
                this.state = 3489;
                this.match(SqlParser.KW_ALWAYS);
                this.state = 3490;
                this.match(SqlParser.KW_AS);
                this.state = 3491;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3492;
                this.expression();
                this.state = 3493;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case SqlParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3495;
                this.match(SqlParser.KW_COMMENT);
                this.state = 3496;
                localContext._comment = this.stringLit();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public complexColType(): ComplexColTypeContext {
        let localContext = new ComplexColTypeContext(this.context, this.state);
        this.enterRule(localContext, 302, SqlParser.RULE_complexColType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3499;
            this.identifier();
            this.state = 3501;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 370) {
                {
                this.state = 3500;
                this.match(SqlParser.COLON);
                }
            }

            this.state = 3503;
            this.dataType();
            this.state = 3506;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 196) {
                {
                this.state = 3504;
                this.match(SqlParser.KW_NOT);
                this.state = 3505;
                this.match(SqlParser.KW_NULL);
                }
            }

            this.state = 3510;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 3508;
                this.match(SqlParser.KW_COMMENT);
                this.state = 3509;
                localContext._comment = this.stringLit();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClause(): WhenClauseContext {
        let localContext = new WhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 304, SqlParser.RULE_whenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3512;
            this.match(SqlParser.KW_WHEN);
            this.state = 3513;
            localContext._condition = this.expression();
            this.state = 3514;
            this.match(SqlParser.KW_THEN);
            this.state = 3515;
            localContext._result = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowClause(): WindowClauseContext {
        let localContext = new WindowClauseContext(this.context, this.state);
        this.enterRule(localContext, 306, SqlParser.RULE_windowClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3517;
            this.match(SqlParser.KW_WINDOW);
            this.state = 3518;
            localContext._name = this.errorCapturingIdentifier();
            this.state = 3519;
            this.match(SqlParser.KW_AS);
            this.state = 3520;
            this.windowSpec();
            this.state = 3528;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 510, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3521;
                    this.match(SqlParser.COMMA);
                    this.state = 3522;
                    localContext._name = this.errorCapturingIdentifier();
                    this.state = 3523;
                    this.match(SqlParser.KW_AS);
                    this.state = 3524;
                    this.windowSpec();
                    }
                    }
                }
                this.state = 3530;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 510, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpec(): WindowSpecContext {
        let localContext = new WindowSpecContext(this.context, this.state);
        this.enterRule(localContext, 308, SqlParser.RULE_windowSpec);
        let _la: number;
        try {
            this.state = 3577;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 518, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3531;
                localContext._name = this.errorCapturingIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3532;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3533;
                localContext._name = this.errorCapturingIdentifier();
                this.state = 3534;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3536;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3571;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SqlParser.KW_CLUSTER:
                    {
                    this.state = 3537;
                    this.match(SqlParser.KW_CLUSTER);
                    this.state = 3538;
                    this.match(SqlParser.KW_BY);
                    this.state = 3539;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    this.state = 3544;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3540;
                        this.match(SqlParser.COMMA);
                        this.state = 3541;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        }
                        }
                        this.state = 3546;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case SqlParser.RIGHT_PAREN:
                case SqlParser.KW_DISTRIBUTE:
                case SqlParser.KW_ORDER:
                case SqlParser.KW_PARTITION:
                case SqlParser.KW_RANGE:
                case SqlParser.KW_ROWS:
                case SqlParser.KW_SORT:
                    {
                    this.state = 3557;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 93 || _la === 216) {
                        {
                        this.state = 3547;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 93 || _la === 216)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3548;
                        this.match(SqlParser.KW_BY);
                        this.state = 3549;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        this.state = 3554;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 3550;
                            this.match(SqlParser.COMMA);
                            this.state = 3551;
                            localContext._expression = this.expression();
                            localContext._partition.push(localContext._expression);
                            }
                            }
                            this.state = 3556;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 3569;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 208 || _la === 277) {
                        {
                        this.state = 3559;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 208 || _la === 277)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3560;
                        this.match(SqlParser.KW_BY);
                        this.state = 3561;
                        this.sortItem();
                        this.state = 3566;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 3562;
                            this.match(SqlParser.COMMA);
                            this.state = 3563;
                            this.sortItem();
                            }
                            }
                            this.state = 3568;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3574;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232 || _la === 257) {
                    {
                    this.state = 3573;
                    this.windowFrame();
                    }
                }

                this.state = 3576;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrame(): WindowFrameContext {
        let localContext = new WindowFrameContext(this.context, this.state);
        this.enterRule(localContext, 310, SqlParser.RULE_windowFrame);
        let _la: number;
        try {
            this.state = 3587;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 519, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3579;
                localContext._frameType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 232 || _la === 257)) {
                    localContext._frameType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3580;
                localContext._start_ = this.frameBound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3581;
                localContext._frameType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 232 || _la === 257)) {
                    localContext._frameType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3582;
                this.match(SqlParser.KW_BETWEEN);
                this.state = 3583;
                localContext._start_ = this.frameBound();
                this.state = 3584;
                this.match(SqlParser.KW_AND);
                this.state = 3585;
                localContext._end = this.frameBound();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBound(): FrameBoundContext {
        let localContext = new FrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 312, SqlParser.RULE_frameBound);
        let _la: number;
        try {
            this.state = 3596;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 520, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3589;
                this.match(SqlParser.KW_UNBOUNDED);
                this.state = 3590;
                localContext._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 225)) {
                    localContext._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3591;
                localContext._boundType = this.match(SqlParser.KW_CURRENT);
                this.state = 3592;
                this.match(SqlParser.KW_ROW);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3593;
                this.expression();
                this.state = 3594;
                localContext._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 225)) {
                    localContext._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedNameList(): QualifiedNameListContext {
        let localContext = new QualifiedNameListContext(this.context, this.state);
        this.enterRule(localContext, 314, SqlParser.RULE_qualifiedNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3598;
            this.qualifiedName();
            this.state = 3603;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3599;
                this.match(SqlParser.COMMA);
                this.state = 3600;
                this.qualifiedName();
                }
                }
                this.state = 3605;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionName(): FunctionNameContext {
        let localContext = new FunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 316, SqlParser.RULE_functionName);
        try {
            this.state = 3615;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 522, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3606;
                this.match(SqlParser.KW_IDENTIFIER);
                this.state = 3607;
                this.match(SqlParser.LEFT_PAREN);
                this.state = 3608;
                this.expression();
                this.state = 3609;
                this.match(SqlParser.RIGHT_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3611;
                this.qualifiedName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3612;
                this.match(SqlParser.KW_FILTER);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3613;
                this.match(SqlParser.KW_LEFT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3614;
                this.match(SqlParser.KW_RIGHT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        let localContext = new FunctionNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 318, SqlParser.RULE_functionNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3617;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 320, SqlParser.RULE_qualifiedName);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3619;
            this.identifier();
            this.state = 3624;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 523, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3620;
                    this.match(SqlParser.DOT);
                    this.state = 3621;
                    this.identifier();
                    }
                    }
                }
                this.state = 3626;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 523, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        let localContext = new ErrorCapturingIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 322, SqlParser.RULE_errorCapturingIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3627;
            this.identifier();
            this.state = 3628;
            this.errorCapturingIdentifierExtra();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
        let localContext = new ErrorCapturingIdentifierExtraContext(this.context, this.state);
        this.enterRule(localContext, 324, SqlParser.RULE_errorCapturingIdentifierExtra);
        try {
            let alternative: number;
            this.state = 3637;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 525, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3632;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 3630;
                        this.match(SqlParser.MINUS);
                        this.state = 3631;
                        this.identifier();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 3634;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 524, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 326, SqlParser.RULE_identifier);
        try {
            this.state = 3641;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 526, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3639;
                this.strictIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3640;
                this.strictNonReserved();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public strictIdentifier(): StrictIdentifierContext {
        let localContext = new StrictIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 328, SqlParser.RULE_strictIdentifier);
        try {
            this.state = 3648;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 527, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3643;
                this.match(SqlParser.IDENTIFIER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3644;
                this.match(SqlParser.BACKQUOTED_IDENTIFIER);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3645;
                this.match(SqlParser.DOUBLEQUOTED_STRING);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3646;
                this.ansiNonReserved();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3647;
                this.nonReserved();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 330, SqlParser.RULE_number);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3651;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 361) {
                {
                this.state = 3650;
                this.match(SqlParser.MINUS);
                }
            }

            this.state = 3653;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & 511) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterColumnAction(): AlterColumnActionContext {
        let localContext = new AlterColumnActionContext(this.context, this.state);
        this.enterRule(localContext, 332, SqlParser.RULE_alterColumnAction);
        let _la: number;
        try {
            this.state = 3668;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 529, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3655;
                this.match(SqlParser.KW_TYPE);
                this.state = 3656;
                this.dataType();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 3657;
                this.match(SqlParser.KW_COMMENT);
                this.state = 3658;
                localContext._comment = this.stringLit();
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3659;
                this.colPosition();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3660;
                localContext._setOrDrop = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 96 || _la === 268)) {
                    localContext._setOrDrop = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3661;
                this.match(SqlParser.KW_NOT);
                this.state = 3662;
                this.match(SqlParser.KW_NULL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3663;
                this.match(SqlParser.KW_SET);
                this.state = 3664;
                this.match(SqlParser.KW_DEFAULT);
                this.state = 3665;
                this.expression();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3666;
                localContext._dropDefault = this.match(SqlParser.KW_DROP);
                this.state = 3667;
                this.match(SqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringLit(): StringLitContext {
        let localContext = new StringLitContext(this.context, this.state);
        this.enterRule(localContext, 334, SqlParser.RULE_stringLit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3670;
            _la = this.tokenStream.LA(1);
            if(!(_la === 376 || _la === 377)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ansiNonReserved(): AnsiNonReservedContext {
        let localContext = new AnsiNonReservedContext(this.context, this.state);
        this.enterRule(localContext, 336, SqlParser.RULE_ansiNonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3672;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4017011456) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 1711111143) !== 0) || ((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & 3187671039) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 1328796669) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 3316086655) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 805306367) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4020201927) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294442751) !== 0) || ((((_la - 263)) & ~0x1F) === 0 && ((1 << (_la - 263)) & 3758088175) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 3355402191) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 15892455) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public strictNonReserved(): StrictNonReservedContext {
        let localContext = new StrictNonReservedContext(this.context, this.state);
        this.enterRule(localContext, 338, SqlParser.RULE_strictNonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3674;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 60 || _la === 102 || _la === 124 || ((((_la - 144)) & ~0x1F) === 0 && ((1 << (_la - 144)) & 149521) !== 0) || _la === 193 || _la === 202 || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 1064961) !== 0) || _la === 322 || _la === 331)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 340, SqlParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3676;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294934272) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4026531839) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3892314047) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3085893631) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967293) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294966261) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4261412863) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294958911) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967279) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147481595) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 41:
            return this.columnName_sempred(localContext as ColumnNameContext, predIndex);
        case 46:
            return this.queryTerm_sempred(localContext as QueryTermContext, predIndex);
        case 118:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 120:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 122:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        }
        return true;
    }
    private columnName_sempred(localContext: ColumnNameContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.shouldMatchEmpty();
        }
        return true;
    }
    private queryTerm_sempred(localContext: QueryTermContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 1:
            return this.precpred(this.context, 3);
        case 2:
            return this.precpred(this.context, 2);
        case 3:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 4:
            return this.precpred(this.context, 2);
        case 5:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 6:
            return this.precpred(this.context, 6);
        case 7:
            return this.precpred(this.context, 5);
        case 8:
            return this.precpred(this.context, 4);
        case 9:
            return this.precpred(this.context, 3);
        case 10:
            return this.precpred(this.context, 2);
        case 11:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 12:
            return this.precpred(this.context, 9);
        case 13:
            return this.precpred(this.context, 7);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,392,3679,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,1,0,5,0,344,8,0,10,0,12,0,347,9,0,1,0,1,0,1,1,1,1,3,
        1,353,8,1,1,2,1,2,3,2,357,8,2,1,2,1,2,1,2,3,2,362,8,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,373,8,2,1,2,1,2,1,2,1,2,3,2,379,8,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,390,8,2,1,2,1,2,1,2,1,
        2,3,2,396,8,2,1,2,1,2,1,2,3,2,401,8,2,1,2,1,2,1,2,3,2,406,8,2,1,
        2,3,2,409,8,2,1,2,1,2,3,2,413,8,2,1,2,3,2,416,8,2,1,2,1,2,3,2,420,
        8,2,1,2,1,2,1,2,1,2,3,2,426,8,2,1,2,1,2,1,2,1,2,3,2,432,8,2,1,2,
        1,2,1,2,3,2,437,8,2,1,2,1,2,1,2,3,2,442,8,2,1,2,3,2,445,8,2,1,2,
        1,2,3,2,449,8,2,1,2,3,2,452,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        461,8,2,1,2,1,2,1,2,3,2,466,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,5,2,477,8,2,10,2,12,2,480,9,2,3,2,482,8,2,1,2,1,2,3,2,486,8,
        2,1,2,1,2,1,2,1,2,3,2,492,8,2,1,2,3,2,495,8,2,1,2,3,2,498,8,2,1,
        2,1,2,1,2,3,2,503,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,511,8,2,1,2,1,
        2,1,2,3,2,516,8,2,1,2,1,2,1,2,1,2,3,2,522,8,2,1,2,3,2,525,8,2,1,
        2,1,2,1,2,1,2,1,2,3,2,532,8,2,1,2,1,2,1,2,5,2,537,8,2,10,2,12,2,
        540,9,2,1,2,1,2,5,2,544,8,2,10,2,12,2,547,9,2,1,2,1,2,5,2,551,8,
        2,10,2,12,2,554,9,2,1,2,1,2,1,2,3,2,559,8,2,1,2,1,2,1,2,1,2,1,2,
        1,2,5,2,567,8,2,10,2,12,2,570,9,2,3,2,572,8,2,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,3,3,582,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,590,8,3,1,
        3,1,3,3,3,594,8,3,1,3,3,3,597,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,605,
        8,3,1,3,3,3,608,8,3,1,3,1,3,3,3,612,8,3,1,3,3,3,615,8,3,1,3,1,3,
        1,3,1,3,1,3,3,3,622,8,3,1,3,1,3,1,3,3,3,627,8,3,1,3,1,3,1,3,3,3,
        632,8,3,1,3,1,3,1,3,1,3,1,3,3,3,639,8,3,1,3,1,3,1,3,3,3,644,8,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,653,8,3,1,3,1,3,3,3,657,8,3,1,3,
        1,3,1,3,1,3,3,3,663,8,3,1,3,1,3,3,3,667,8,3,1,3,1,3,3,3,671,8,3,
        1,3,1,3,1,3,3,3,676,8,3,1,3,1,3,1,3,1,3,3,3,682,8,3,1,3,1,3,1,3,
        1,3,1,3,3,3,689,8,3,1,3,1,3,1,3,3,3,694,8,3,1,3,4,3,697,8,3,11,3,
        12,3,698,1,3,3,3,702,8,3,1,3,1,3,5,3,706,8,3,10,3,12,3,709,9,3,1,
        3,3,3,712,8,3,1,3,1,3,1,3,1,3,3,3,718,8,3,1,3,1,3,1,3,1,3,1,3,1,
        3,3,3,726,8,3,1,3,1,3,3,3,730,8,3,1,3,1,3,1,3,3,3,735,8,3,1,3,1,
        3,1,3,1,3,3,3,741,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,
        3,753,8,3,1,3,1,3,1,3,3,3,758,8,3,1,3,3,3,761,8,3,1,3,3,3,764,8,
        3,1,3,3,3,767,8,3,1,3,3,3,770,8,3,1,3,3,3,773,8,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,788,8,3,1,3,1,3,3,3,792,
        8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,801,8,3,1,3,1,3,3,3,805,8,3,
        1,3,1,3,1,3,5,3,810,8,3,10,3,12,3,813,9,3,1,3,3,3,816,8,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,827,8,3,10,3,12,3,830,9,3,1,3,
        1,3,1,3,1,3,1,3,3,3,837,8,3,1,3,5,3,840,8,3,10,3,12,3,843,9,3,1,
        3,1,3,1,3,1,3,1,3,1,3,3,3,851,8,3,1,3,3,3,854,8,3,1,3,3,3,857,8,
        3,1,3,5,3,860,8,3,10,3,12,3,863,9,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,
        871,8,3,10,3,12,3,874,9,3,1,3,1,3,1,3,1,3,3,3,880,8,3,1,3,1,3,1,
        3,1,3,1,3,1,3,3,3,888,8,3,1,3,5,3,891,8,3,10,3,12,3,894,9,3,3,3,
        896,8,3,1,4,1,4,1,4,3,4,901,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        5,4,911,8,4,10,4,12,4,914,9,4,1,4,1,4,3,4,918,8,4,1,4,3,4,921,8,
        4,1,4,1,4,3,4,925,8,4,1,4,1,4,1,4,1,4,1,4,3,4,932,8,4,1,4,3,4,935,
        8,4,1,4,1,4,3,4,939,8,4,1,4,3,4,942,8,4,1,4,1,4,3,4,946,8,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,3,4,955,8,4,1,4,3,4,958,8,4,1,4,1,4,3,4,
        962,8,4,1,4,3,4,965,8,4,1,4,1,4,1,4,3,4,970,8,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,983,8,4,10,4,12,4,986,9,4,1,4,1,
        4,1,4,3,4,991,8,4,1,4,3,4,994,8,4,1,4,3,4,997,8,4,1,4,1,4,3,4,1001,
        8,4,1,4,1,4,3,4,1005,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,1014,8,
        4,10,4,12,4,1017,9,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,1025,8,4,1,4,3,
        4,1028,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,1037,8,4,1,4,1,4,1,4,
        3,4,1042,8,4,1,4,1,4,1,4,3,4,1047,8,4,1,4,3,4,1050,8,4,1,4,1,4,3,
        4,1054,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,1067,
        8,4,10,4,12,4,1070,9,4,3,4,1072,8,4,1,4,1,4,1,4,3,4,1077,8,4,1,4,
        1,4,1,4,3,4,1082,8,4,1,4,1,4,1,4,3,4,1087,8,4,1,4,1,4,1,4,1,4,1,
        4,3,4,1094,8,4,1,4,1,4,1,4,1,4,1,4,3,4,1101,8,4,1,4,5,4,1104,8,4,
        10,4,12,4,1107,9,4,3,4,1109,8,4,1,5,1,5,1,5,3,5,1114,8,5,1,5,1,5,
        3,5,1118,8,5,1,5,1,5,1,5,3,5,1123,8,5,1,5,1,5,3,5,1127,8,5,1,5,1,
        5,1,5,3,5,1132,8,5,1,5,1,5,1,5,3,5,1137,8,5,1,5,1,5,3,5,1141,8,5,
        1,5,1,5,1,5,1,5,1,5,3,5,1148,8,5,1,5,1,5,1,5,3,5,1153,8,5,1,5,1,
        5,1,5,3,5,1158,8,5,1,5,1,5,1,5,3,5,1163,8,5,1,5,1,5,1,5,1,5,1,5,
        3,5,1170,8,5,1,5,5,5,1173,8,5,10,5,12,5,1176,9,5,3,5,1178,8,5,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,4,6,1187,8,6,11,6,12,6,1188,1,6,1,6,1,
        6,1,6,1,6,3,6,1196,8,6,1,6,1,6,1,6,1,6,1,6,3,6,1203,8,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1215,8,6,1,6,1,6,1,6,1,6,5,6,
        1221,8,6,10,6,12,6,1224,9,6,1,6,5,6,1227,8,6,10,6,12,6,1230,9,6,
        1,6,5,6,1233,8,6,10,6,12,6,1236,9,6,3,6,1238,8,6,1,7,1,7,1,7,3,7,
        1243,8,7,1,7,1,7,3,7,1247,8,7,1,7,3,7,1250,8,7,1,7,1,7,1,7,1,7,1,
        7,1,7,3,7,1258,8,7,1,7,1,7,1,7,3,7,1263,8,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,3,7,1272,8,7,1,7,1,7,1,7,3,7,1277,8,7,3,7,1279,8,7,1,7,1,
        7,1,7,1,7,1,7,1,7,3,7,1287,8,7,1,7,1,7,1,7,3,7,1292,8,7,1,7,1,7,
        3,7,1296,8,7,1,7,3,7,1299,8,7,1,7,3,7,1302,8,7,1,7,3,7,1305,8,7,
        1,7,1,7,3,7,1309,8,7,3,7,1311,8,7,1,8,1,8,1,8,1,8,3,8,1317,8,8,1,
        8,3,8,1320,8,8,1,8,3,8,1323,8,8,1,8,1,8,1,8,1,8,3,8,1329,8,8,1,8,
        3,8,1332,8,8,1,8,3,8,1335,8,8,1,8,1,8,1,8,1,8,1,8,3,8,1342,8,8,1,
        8,1,8,1,8,3,8,1347,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1356,8,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,1364,8,8,1,8,1,8,1,8,1,8,3,8,1370,8,
        8,1,8,3,8,1373,8,8,1,8,3,8,1376,8,8,1,8,1,8,1,8,1,8,3,8,1382,8,8,
        1,8,1,8,3,8,1386,8,8,1,8,1,8,1,8,3,8,1391,8,8,1,8,3,8,1394,8,8,1,
        8,1,8,3,8,1398,8,8,3,8,1400,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1408,
        8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1416,8,8,1,8,3,8,1419,8,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1431,8,8,1,8,1,8,1,8,1,8,3,
        8,1437,8,8,1,8,5,8,1440,8,8,10,8,12,8,1443,9,8,3,8,1445,8,8,1,9,
        1,9,3,9,1449,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,1460,8,
        9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,1468,8,10,1,10,1,10,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,1480,8,11,1,11,1,11,1,11,3,
        11,1485,8,11,1,12,3,12,1488,8,12,1,12,1,12,1,12,1,13,1,13,1,13,3,
        13,1496,8,13,1,14,1,14,1,14,1,14,1,14,5,14,1503,8,14,10,14,12,14,
        1506,9,14,1,14,1,14,1,15,1,15,1,15,3,15,1513,8,15,1,15,1,15,1,15,
        1,15,3,15,1519,8,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,3,17,1528,
        8,17,1,18,1,18,1,18,5,18,1533,8,18,10,18,12,18,1536,9,18,1,19,1,
        19,1,19,1,19,5,19,1542,8,19,10,19,12,19,1545,9,19,1,20,1,20,3,20,
        1549,8,20,1,20,3,20,1552,8,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,5,22,1577,8,22,10,22,12,22,1580,9,22,1,23,1,23,1,
        23,1,24,1,24,1,24,1,24,5,24,1589,8,24,10,24,12,24,1592,9,24,1,24,
        1,24,1,25,1,25,3,25,1598,8,25,1,25,3,25,1601,8,25,1,26,1,26,1,26,
        5,26,1606,8,26,10,26,12,26,1609,9,26,1,26,3,26,1612,8,26,1,27,1,
        27,1,27,1,27,3,27,1618,8,27,1,28,1,28,1,28,1,28,5,28,1624,8,28,10,
        28,12,28,1627,9,28,1,28,1,28,1,29,1,29,3,29,1633,8,29,1,29,3,29,
        1636,8,29,1,30,1,30,1,30,1,30,5,30,1642,8,30,10,30,12,30,1645,9,
        30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,1653,8,31,10,31,12,31,1656,
        9,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1666,8,32,1,33,
        1,33,1,33,1,33,1,33,1,33,3,33,1674,8,33,1,34,1,34,1,34,1,34,3,34,
        1680,8,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,
        1,40,1,41,1,41,3,41,1696,8,41,1,42,1,42,1,42,5,42,1701,8,42,10,42,
        12,42,1704,9,42,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1714,
        8,44,1,45,1,45,1,45,1,45,1,45,5,45,1721,8,45,10,45,12,45,1724,9,
        45,3,45,1726,8,45,1,45,1,45,1,45,1,45,1,45,5,45,1733,8,45,10,45,
        12,45,1736,9,45,3,45,1738,8,45,1,45,1,45,1,45,1,45,1,45,5,45,1745,
        8,45,10,45,12,45,1748,9,45,3,45,1750,8,45,1,45,1,45,1,45,1,45,1,
        45,5,45,1757,8,45,10,45,12,45,1760,9,45,3,45,1762,8,45,1,45,3,45,
        1765,8,45,1,45,1,45,1,45,3,45,1770,8,45,3,45,1772,8,45,1,45,1,45,
        3,45,1776,8,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1784,8,46,1,46,
        1,46,1,46,1,46,3,46,1790,8,46,1,46,1,46,1,46,1,46,3,46,1796,8,46,
        1,46,5,46,1799,8,46,10,46,12,46,1802,9,46,1,47,1,47,1,47,4,47,1807,
        8,47,11,47,12,47,1808,1,47,1,47,1,47,1,47,1,47,1,47,5,47,1817,8,
        47,10,47,12,47,1820,9,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1828,
        8,47,1,48,1,48,3,48,1832,8,48,1,48,3,48,1835,8,48,1,48,1,48,3,48,
        1839,8,48,1,49,1,49,3,49,1843,8,49,1,49,1,49,1,49,1,49,5,49,1849,
        8,49,10,49,12,49,1852,9,49,1,49,3,49,1855,8,49,1,49,3,49,1858,8,
        49,1,49,3,49,1861,8,49,1,49,3,49,1864,8,49,1,49,1,49,3,49,1868,8,
        49,1,50,1,50,3,50,1872,8,50,1,50,5,50,1875,8,50,10,50,12,50,1878,
        9,50,1,50,3,50,1881,8,50,1,50,3,50,1884,8,50,1,50,3,50,1887,8,50,
        1,50,3,50,1890,8,50,1,50,1,50,3,50,1894,8,50,1,50,5,50,1897,8,50,
        10,50,12,50,1900,9,50,1,50,3,50,1903,8,50,1,50,3,50,1906,8,50,1,
        50,3,50,1909,8,50,1,50,3,50,1912,8,50,3,50,1914,8,50,1,51,1,51,1,
        51,1,51,3,51,1920,8,51,1,51,1,51,1,51,1,51,1,51,3,51,1927,8,51,1,
        51,1,51,1,51,3,51,1932,8,51,1,51,3,51,1935,8,51,1,51,3,51,1938,8,
        51,1,51,1,51,3,51,1942,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
        51,3,51,1952,8,51,1,51,1,51,3,51,1956,8,51,3,51,1958,8,51,1,51,3,
        51,1961,8,51,1,51,1,51,3,51,1965,8,51,1,52,1,52,5,52,1969,8,52,10,
        52,12,52,1972,9,52,1,52,3,52,1975,8,52,1,52,1,52,1,53,1,53,1,53,
        1,54,1,54,1,54,1,54,3,54,1986,8,54,1,54,1,54,1,54,1,54,1,54,1,54,
        3,54,1994,8,54,3,54,1996,8,54,1,55,1,55,1,55,1,55,1,55,3,55,2003,
        8,55,1,55,1,55,3,55,2007,8,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,3,56,2019,8,56,1,56,1,56,1,56,1,56,1,56,3,56,2026,
        8,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,
        2039,8,57,10,57,12,57,2042,9,57,1,57,1,57,3,57,2046,8,57,1,58,1,
        58,1,58,5,58,2051,8,58,10,58,12,58,2054,9,58,1,59,1,59,1,59,1,59,
        1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,3,62,2069,8,62,1,62,
        5,62,2072,8,62,10,62,12,62,2075,9,62,1,62,1,62,1,63,1,63,1,63,1,
        63,1,63,1,63,5,63,2085,8,63,10,63,12,63,2088,9,63,1,63,1,63,3,63,
        2092,8,63,1,64,1,64,1,64,1,64,5,64,2098,8,64,10,64,12,64,2101,9,
        64,1,64,5,64,2104,8,64,10,64,12,64,2107,9,64,1,64,3,64,2110,8,64,
        1,64,3,64,2113,8,64,1,65,3,65,2116,8,65,1,65,1,65,1,65,1,65,1,65,
        3,65,2123,8,65,1,65,3,65,2126,8,65,1,65,1,65,1,65,1,65,3,65,2132,
        8,65,1,66,1,66,1,66,1,66,1,66,5,66,2139,8,66,10,66,12,66,2142,9,
        66,1,66,1,66,1,66,1,66,1,66,5,66,2149,8,66,10,66,12,66,2152,9,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,5,66,2164,8,66,
        10,66,12,66,2167,9,66,1,66,1,66,3,66,2171,8,66,3,66,2173,8,66,1,
        67,1,67,1,67,3,67,2178,8,67,1,68,1,68,1,68,1,68,1,68,5,68,2185,8,
        68,10,68,12,68,2188,9,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,
        2197,8,68,1,68,1,68,1,68,3,68,2202,8,68,5,68,2204,8,68,10,68,12,
        68,2207,9,68,1,68,1,68,3,68,2211,8,68,1,69,1,69,1,69,1,69,1,69,3,
        69,2218,8,69,1,69,1,69,1,69,3,69,2223,8,69,5,69,2225,8,69,10,69,
        12,69,2228,9,69,3,69,2230,8,69,1,69,3,69,2233,8,69,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,5,70,2245,8,70,10,70,12,70,2248,
        9,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,5,71,2258,8,71,10,71,
        12,71,2261,9,71,1,71,1,71,3,71,2265,8,71,1,72,1,72,3,72,2269,8,72,
        1,72,3,72,2272,8,72,1,73,1,73,1,73,3,73,2277,8,73,1,73,1,73,1,73,
        3,73,2282,8,73,1,73,1,73,3,73,2286,8,73,1,73,3,73,2289,8,73,1,74,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,5,74,2299,8,74,10,74,12,74,2302,
        9,74,1,74,1,74,1,75,1,75,1,75,1,75,5,75,2310,8,75,10,75,12,75,2313,
        9,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,5,75,2323,8,75,10,75,
        12,75,2326,9,75,1,75,1,75,1,76,1,76,1,76,1,76,5,76,2334,8,76,10,
        76,12,76,2337,9,76,1,76,1,76,3,76,2341,8,76,1,76,3,76,2344,8,76,
        1,77,1,77,3,77,2348,8,77,1,77,3,77,2351,8,77,1,78,1,78,1,78,1,78,
        1,79,1,79,1,79,1,80,1,80,1,80,3,80,2363,8,80,1,80,1,80,1,80,1,80,
        1,80,5,80,2370,8,80,10,80,12,80,2373,9,80,3,80,2375,8,80,1,80,1,
        80,1,80,3,80,2380,8,80,1,80,1,80,1,80,5,80,2385,8,80,10,80,12,80,
        2388,9,80,3,80,2390,8,80,1,81,1,81,1,82,1,82,3,82,2396,8,82,1,82,
        1,82,1,82,1,82,5,82,2402,8,82,10,82,12,82,2405,9,82,3,82,2407,8,
        82,1,83,1,83,1,83,3,83,2412,8,83,1,83,1,83,3,83,2416,8,83,1,83,1,
        83,1,83,1,83,3,83,2422,8,83,1,83,1,83,3,83,2426,8,83,1,84,3,84,2429,
        8,84,1,84,1,84,1,84,3,84,2434,8,84,1,84,3,84,2437,8,84,1,84,1,84,
        1,84,3,84,2442,8,84,3,84,2444,8,84,1,85,1,85,1,85,1,85,3,85,2450,
        8,85,1,86,1,86,1,86,3,86,2455,8,86,1,86,1,86,1,86,1,86,1,86,3,86,
        2462,8,86,1,87,3,87,2465,8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2483,8,87,3,87,
        2485,8,87,1,87,3,87,2488,8,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,
        5,89,2497,8,89,10,89,12,89,2500,9,89,1,90,1,90,1,90,1,90,5,90,2506,
        8,90,10,90,12,90,2509,9,90,1,90,1,90,1,91,1,91,3,91,2515,8,91,1,
        92,1,92,1,92,1,92,5,92,2521,8,92,10,92,12,92,2524,9,92,1,92,1,92,
        1,93,1,93,1,93,3,93,2531,8,93,1,94,1,94,1,94,3,94,2536,8,94,1,94,
        3,94,2539,8,94,1,94,3,94,2542,8,94,1,94,1,94,1,94,1,94,1,94,1,94,
        3,94,2550,8,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2558,8,94,1,94,
        1,94,1,94,1,94,1,94,1,94,5,94,2566,8,94,10,94,12,94,2569,9,94,1,
        94,1,94,1,94,1,94,1,94,1,94,1,94,5,94,2578,8,94,10,94,12,94,2581,
        9,94,3,94,2583,8,94,1,94,1,94,1,94,3,94,2588,8,94,1,95,1,95,1,95,
        3,95,2593,8,95,1,95,1,95,1,95,1,95,1,95,3,95,2600,8,95,1,95,1,95,
        1,95,1,95,1,95,3,95,2607,8,95,3,95,2609,8,95,1,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,5,96,2620,8,96,10,96,12,96,2623,9,96,1,
        96,1,96,1,96,3,96,2628,8,96,3,96,2630,8,96,1,96,1,96,1,96,1,96,1,
        96,1,96,5,96,2638,8,96,10,96,12,96,2641,9,96,1,96,1,96,1,96,3,96,
        2646,8,96,3,96,2648,8,96,1,97,1,97,1,97,1,97,1,98,1,98,3,98,2656,
        8,98,1,99,1,99,3,99,2660,8,99,1,100,3,100,2663,8,100,1,100,1,100,
        3,100,2667,8,100,3,100,2669,8,100,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,3,101,2678,8,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,3,101,2690,8,101,3,101,2692,8,101,1,101,
        1,101,1,101,1,101,1,101,3,101,2699,8,101,1,101,1,101,1,101,1,101,
        1,101,3,101,2706,8,101,1,101,1,101,1,101,1,101,3,101,2712,8,101,
        1,101,1,101,1,101,1,101,3,101,2718,8,101,3,101,2720,8,101,1,102,
        1,102,1,102,5,102,2725,8,102,10,102,12,102,2728,9,102,1,103,1,103,
        1,103,5,103,2733,8,103,10,103,12,103,2736,9,103,1,104,1,104,1,104,
        5,104,2741,8,104,10,104,12,104,2744,9,104,1,105,1,105,1,105,3,105,
        2749,8,105,1,106,1,106,1,106,3,106,2754,8,106,1,106,1,106,1,107,
        1,107,1,107,3,107,2761,8,107,1,107,1,107,1,108,1,108,3,108,2767,
        8,108,1,108,3,108,2770,8,108,1,108,1,108,3,108,2774,8,108,3,108,
        2776,8,108,1,109,1,109,1,109,5,109,2781,8,109,10,109,12,109,2784,
        9,109,1,110,1,110,1,110,1,110,5,110,2790,8,110,10,110,12,110,2793,
        9,110,1,110,1,110,1,111,1,111,3,111,2799,8,111,1,112,1,112,1,112,
        1,112,1,112,1,112,5,112,2807,8,112,10,112,12,112,2810,9,112,1,112,
        1,112,3,112,2814,8,112,1,113,1,113,3,113,2818,8,113,1,114,1,114,
        1,115,1,115,1,115,1,115,1,116,1,116,3,116,2828,8,116,1,117,1,117,
        1,117,5,117,2833,8,117,10,117,12,117,2836,9,117,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,2848,8,118,3,118,
        2850,8,118,1,118,1,118,1,118,1,118,1,118,1,118,5,118,2858,8,118,
        10,118,12,118,2861,9,118,1,119,3,119,2864,8,119,1,119,1,119,1,119,
        1,119,1,119,1,119,3,119,2872,8,119,1,119,1,119,1,119,1,119,1,119,
        5,119,2879,8,119,10,119,12,119,2882,9,119,1,119,1,119,1,119,3,119,
        2887,8,119,1,119,1,119,1,119,1,119,1,119,1,119,3,119,2895,8,119,
        1,119,1,119,1,119,3,119,2900,8,119,1,119,1,119,1,119,1,119,1,119,
        1,119,1,119,1,119,5,119,2910,8,119,10,119,12,119,2913,9,119,1,119,
        1,119,3,119,2917,8,119,1,119,3,119,2920,8,119,1,119,1,119,1,119,
        1,119,3,119,2926,8,119,1,119,1,119,3,119,2930,8,119,1,119,1,119,
        1,119,3,119,2935,8,119,1,119,1,119,1,119,3,119,2940,8,119,1,119,
        1,119,1,119,3,119,2945,8,119,1,120,1,120,1,120,1,120,3,120,2951,
        8,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
        1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,5,120,2972,
        8,120,10,120,12,120,2975,9,120,1,121,1,121,1,122,1,122,1,122,1,122,
        1,122,1,122,3,122,2985,8,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,3,122,2997,8,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,4,122,3007,8,122,11,122,12,122,3008,1,122,
        1,122,3,122,3013,8,122,1,122,1,122,1,122,1,122,1,122,4,122,3020,
        8,122,11,122,12,122,3021,1,122,1,122,3,122,3026,8,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,5,122,3042,8,122,10,122,12,122,3045,9,122,3,122,3047,8,122,
        1,122,1,122,1,122,1,122,1,122,1,122,3,122,3055,8,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,3,122,3064,8,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,3,122,3073,8,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,4,122,3094,8,122,11,122,12,122,3095,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,3,122,3112,8,122,1,122,1,122,1,122,5,122,3117,8,122,
        10,122,12,122,3120,9,122,3,122,3122,8,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,3,122,3131,8,122,1,122,1,122,3,122,3135,8,122,
        1,122,1,122,3,122,3139,8,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,4,122,3149,8,122,11,122,12,122,3150,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,3176,
        8,122,1,122,1,122,1,122,1,122,1,122,3,122,3183,8,122,1,122,3,122,
        3186,8,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,3,122,3201,8,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,3,122,3222,8,122,1,122,1,122,3,122,3226,
        8,122,3,122,3228,8,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,5,122,3238,8,122,10,122,12,122,3241,9,122,1,123,1,123,1,123,
        1,123,1,123,1,123,1,123,3,123,3250,8,123,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,1,124,1,124,4,124,3263,8,124,11,124,
        12,124,3264,3,124,3267,8,124,1,125,1,125,1,126,1,126,1,127,1,127,
        1,128,1,128,1,129,1,129,1,129,3,129,3280,8,129,1,130,1,130,3,130,
        3284,8,130,1,131,1,131,1,131,3,131,3289,8,131,1,132,1,132,1,132,
        4,132,3294,8,132,11,132,12,132,3295,1,133,1,133,1,133,1,133,1,133,
        1,134,3,134,3304,8,134,1,134,1,134,1,134,3,134,3309,8,134,1,135,
        1,135,1,136,1,136,1,137,1,137,1,137,3,137,3318,8,137,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,1,138,3,138,3350,8,138,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,5,139,3369,8,139,10,139,12,139,3372,9,139,
        3,139,3374,8,139,1,139,1,139,3,139,3378,8,139,1,139,1,139,1,139,
        1,139,3,139,3384,8,139,1,139,1,139,1,139,1,139,3,139,3390,8,139,
        1,139,1,139,1,139,1,139,1,139,5,139,3397,8,139,10,139,12,139,3400,
        9,139,1,139,3,139,3403,8,139,3,139,3405,8,139,1,140,1,140,1,140,
        5,140,3410,8,140,10,140,12,140,3413,9,140,1,141,1,141,1,141,5,141,
        3418,8,141,10,141,12,141,3421,9,141,1,142,1,142,1,142,5,142,3426,
        8,142,10,142,12,142,3429,9,142,1,143,1,143,1,143,5,143,3434,8,143,
        10,143,12,143,3437,9,143,1,144,1,144,1,144,1,144,1,144,1,144,1,144,
        3,144,3446,8,144,1,145,1,145,1,145,1,146,1,146,1,146,5,146,3454,
        8,146,10,146,12,146,3457,9,146,1,147,1,147,1,147,1,147,3,147,3463,
        8,147,1,147,1,147,3,147,3467,8,147,1,148,1,148,1,148,5,148,3472,
        8,148,10,148,12,148,3475,9,148,1,149,1,149,1,149,5,149,3480,8,149,
        10,149,12,149,3483,9,149,1,150,1,150,1,150,1,150,1,150,1,150,1,150,
        1,150,1,150,1,150,1,150,1,150,1,150,3,150,3498,8,150,1,151,1,151,
        3,151,3502,8,151,1,151,1,151,1,151,3,151,3507,8,151,1,151,1,151,
        3,151,3511,8,151,1,152,1,152,1,152,1,152,1,152,1,153,1,153,1,153,
        1,153,1,153,1,153,1,153,1,153,1,153,5,153,3527,8,153,10,153,12,153,
        3530,9,153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,5,154,3543,8,154,10,154,12,154,3546,9,154,1,154,1,154,
        1,154,1,154,1,154,5,154,3553,8,154,10,154,12,154,3556,9,154,3,154,
        3558,8,154,1,154,1,154,1,154,1,154,1,154,5,154,3565,8,154,10,154,
        12,154,3568,9,154,3,154,3570,8,154,3,154,3572,8,154,1,154,3,154,
        3575,8,154,1,154,3,154,3578,8,154,1,155,1,155,1,155,1,155,1,155,
        1,155,1,155,1,155,3,155,3588,8,155,1,156,1,156,1,156,1,156,1,156,
        1,156,1,156,3,156,3597,8,156,1,157,1,157,1,157,5,157,3602,8,157,
        10,157,12,157,3605,9,157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,3,158,3616,8,158,1,159,1,159,1,160,1,160,1,160,5,160,
        3623,8,160,10,160,12,160,3626,9,160,1,161,1,161,1,161,1,162,1,162,
        4,162,3633,8,162,11,162,12,162,3634,1,162,3,162,3638,8,162,1,163,
        1,163,3,163,3642,8,163,1,164,1,164,1,164,1,164,1,164,3,164,3649,
        8,164,1,165,3,165,3652,8,165,1,165,1,165,1,166,1,166,1,166,1,166,
        1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,3669,
        8,166,1,167,1,167,1,168,1,168,1,169,1,169,1,170,1,170,1,170,13,478,
        538,545,552,568,828,841,861,872,892,1105,1174,1441,4,92,236,240,
        244,171,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
        250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
        282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
        314,316,318,320,322,324,326,328,330,332,334,336,338,340,0,75,2,0,
        123,123,140,140,5,0,46,46,58,58,108,108,122,122,173,173,1,0,86,87,
        2,0,108,108,122,122,3,0,8,8,96,96,288,288,2,0,8,8,167,167,2,0,78,
        78,228,228,1,0,49,50,2,0,268,268,327,327,2,0,11,11,39,39,2,0,8,8,
        96,96,3,0,45,45,274,274,309,309,2,0,196,196,268,268,4,0,45,45,274,
        274,278,278,282,282,3,0,18,18,103,103,319,319,2,0,34,34,246,246,
        3,0,142,142,252,252,297,297,3,0,73,73,190,190,261,261,3,0,10,10,
        289,289,330,330,2,0,129,129,248,248,4,0,107,107,139,139,171,171,
        325,325,2,0,171,171,325,325,3,0,72,72,189,189,260,260,4,0,102,102,
        148,148,269,269,322,322,3,0,102,102,269,269,322,322,2,0,21,21,86,
        86,2,0,116,116,157,157,2,0,291,291,336,336,2,0,290,290,302,302,2,
        0,61,61,255,255,2,0,104,104,141,141,2,0,10,10,92,92,2,0,15,15,263,
        263,2,0,124,124,249,249,2,0,381,381,383,383,2,0,93,93,216,216,2,
        0,208,208,277,277,2,0,196,196,359,359,1,0,250,251,1,0,163,164,3,
        0,10,10,16,16,276,276,3,0,111,111,315,315,324,324,2,0,360,361,365,
        365,2,0,94,94,362,364,2,0,360,361,368,368,11,0,67,67,69,69,134,134,
        179,179,181,181,183,183,185,185,230,230,258,258,340,340,347,347,
        4,0,63,63,65,66,267,267,330,330,2,0,74,75,305,305,3,0,76,77,301,
        301,306,306,2,0,36,36,317,317,2,0,138,138,245,245,1,0,286,287,2,
        0,4,4,123,123,2,0,4,4,119,119,3,0,28,28,160,160,310,310,1,0,219,
        220,1,0,351,358,2,0,94,94,360,369,4,0,14,14,140,140,196,196,207,
        207,2,0,111,111,315,315,1,0,360,361,7,0,67,68,134,135,179,186,191,
        192,258,259,340,341,347,348,6,0,67,67,134,134,183,183,185,185,258,
        258,347,347,2,0,185,185,347,347,4,0,67,67,134,134,183,183,258,258,
        3,0,134,134,183,183,258,258,2,0,82,82,351,351,2,0,232,232,257,257,
        2,0,118,118,225,225,1,0,378,386,2,0,96,96,268,268,1,0,376,377,52,
        0,8,9,11,13,15,15,17,19,21,22,24,27,29,34,37,41,43,46,48,48,50,56,
        58,58,61,62,67,91,93,96,98,98,101,101,103,110,113,113,115,118,121,
        122,125,128,131,131,133,139,141,143,145,147,149,151,154,154,156,
        157,159,159,163,192,194,194,198,200,204,206,209,209,211,212,214,
        218,221,225,227,237,239,248,250,261,263,266,268,275,277,291,293,
        298,301,307,309,309,311,321,325,329,332,341,344,344,347,350,16,0,
        15,15,60,60,102,102,124,124,144,144,148,148,155,155,158,158,161,
        161,193,193,202,202,249,249,263,263,269,269,322,322,331,331,19,0,
        8,14,16,59,61,101,103,122,125,143,145,147,149,154,156,157,159,160,
        162,192,194,194,196,201,203,248,250,261,264,268,270,291,293,321,
        323,330,332,350,4271,0,345,1,0,0,0,2,350,1,0,0,0,4,571,1,0,0,0,6,
        895,1,0,0,0,8,1108,1,0,0,0,10,1177,1,0,0,0,12,1237,1,0,0,0,14,1310,
        1,0,0,0,16,1444,1,0,0,0,18,1459,1,0,0,0,20,1461,1,0,0,0,22,1473,
        1,0,0,0,24,1487,1,0,0,0,26,1492,1,0,0,0,28,1497,1,0,0,0,30,1518,
        1,0,0,0,32,1520,1,0,0,0,34,1527,1,0,0,0,36,1529,1,0,0,0,38,1537,
        1,0,0,0,40,1546,1,0,0,0,42,1557,1,0,0,0,44,1578,1,0,0,0,46,1581,
        1,0,0,0,48,1584,1,0,0,0,50,1595,1,0,0,0,52,1611,1,0,0,0,54,1617,
        1,0,0,0,56,1619,1,0,0,0,58,1630,1,0,0,0,60,1637,1,0,0,0,62,1648,
        1,0,0,0,64,1665,1,0,0,0,66,1673,1,0,0,0,68,1675,1,0,0,0,70,1681,
        1,0,0,0,72,1683,1,0,0,0,74,1685,1,0,0,0,76,1687,1,0,0,0,78,1689,
        1,0,0,0,80,1691,1,0,0,0,82,1695,1,0,0,0,84,1697,1,0,0,0,86,1705,
        1,0,0,0,88,1713,1,0,0,0,90,1725,1,0,0,0,92,1777,1,0,0,0,94,1827,
        1,0,0,0,96,1831,1,0,0,0,98,1867,1,0,0,0,100,1913,1,0,0,0,102,1934,
        1,0,0,0,104,1966,1,0,0,0,106,1978,1,0,0,0,108,1981,1,0,0,0,110,1997,
        1,0,0,0,112,2011,1,0,0,0,114,2045,1,0,0,0,116,2047,1,0,0,0,118,2055,
        1,0,0,0,120,2059,1,0,0,0,122,2062,1,0,0,0,124,2065,1,0,0,0,126,2091,
        1,0,0,0,128,2093,1,0,0,0,130,2131,1,0,0,0,132,2172,1,0,0,0,134,2177,
        1,0,0,0,136,2210,1,0,0,0,138,2232,1,0,0,0,140,2234,1,0,0,0,142,2264,
        1,0,0,0,144,2266,1,0,0,0,146,2273,1,0,0,0,148,2290,1,0,0,0,150,2305,
        1,0,0,0,152,2329,1,0,0,0,154,2345,1,0,0,0,156,2352,1,0,0,0,158,2356,
        1,0,0,0,160,2359,1,0,0,0,162,2391,1,0,0,0,164,2406,1,0,0,0,166,2425,
        1,0,0,0,168,2443,1,0,0,0,170,2449,1,0,0,0,172,2451,1,0,0,0,174,2487,
        1,0,0,0,176,2489,1,0,0,0,178,2493,1,0,0,0,180,2501,1,0,0,0,182,2512,
        1,0,0,0,184,2516,1,0,0,0,186,2527,1,0,0,0,188,2587,1,0,0,0,190,2608,
        1,0,0,0,192,2629,1,0,0,0,194,2649,1,0,0,0,196,2655,1,0,0,0,198,2659,
        1,0,0,0,200,2668,1,0,0,0,202,2719,1,0,0,0,204,2721,1,0,0,0,206,2729,
        1,0,0,0,208,2737,1,0,0,0,210,2745,1,0,0,0,212,2753,1,0,0,0,214,2760,
        1,0,0,0,216,2766,1,0,0,0,218,2777,1,0,0,0,220,2785,1,0,0,0,222,2798,
        1,0,0,0,224,2813,1,0,0,0,226,2817,1,0,0,0,228,2819,1,0,0,0,230,2821,
        1,0,0,0,232,2827,1,0,0,0,234,2829,1,0,0,0,236,2849,1,0,0,0,238,2944,
        1,0,0,0,240,2950,1,0,0,0,242,2976,1,0,0,0,244,3227,1,0,0,0,246,3249,
        1,0,0,0,248,3266,1,0,0,0,250,3268,1,0,0,0,252,3270,1,0,0,0,254,3272,
        1,0,0,0,256,3274,1,0,0,0,258,3276,1,0,0,0,260,3281,1,0,0,0,262,3285,
        1,0,0,0,264,3293,1,0,0,0,266,3297,1,0,0,0,268,3303,1,0,0,0,270,3310,
        1,0,0,0,272,3312,1,0,0,0,274,3317,1,0,0,0,276,3349,1,0,0,0,278,3404,
        1,0,0,0,280,3406,1,0,0,0,282,3414,1,0,0,0,284,3422,1,0,0,0,286,3430,
        1,0,0,0,288,3445,1,0,0,0,290,3447,1,0,0,0,292,3450,1,0,0,0,294,3458,
        1,0,0,0,296,3468,1,0,0,0,298,3476,1,0,0,0,300,3497,1,0,0,0,302,3499,
        1,0,0,0,304,3512,1,0,0,0,306,3517,1,0,0,0,308,3577,1,0,0,0,310,3587,
        1,0,0,0,312,3596,1,0,0,0,314,3598,1,0,0,0,316,3615,1,0,0,0,318,3617,
        1,0,0,0,320,3619,1,0,0,0,322,3627,1,0,0,0,324,3637,1,0,0,0,326,3641,
        1,0,0,0,328,3648,1,0,0,0,330,3651,1,0,0,0,332,3668,1,0,0,0,334,3670,
        1,0,0,0,336,3672,1,0,0,0,338,3674,1,0,0,0,340,3676,1,0,0,0,342,344,
        3,2,1,0,343,342,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,
        1,0,0,0,346,348,1,0,0,0,347,345,1,0,0,0,348,349,5,0,0,1,349,1,1,
        0,0,0,350,352,3,4,2,0,351,353,5,1,0,0,352,351,1,0,0,0,352,353,1,
        0,0,0,353,3,1,0,0,0,354,572,3,24,12,0,355,357,3,38,19,0,356,355,
        1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,572,3,12,6,0,359,361,
        5,329,0,0,360,362,3,32,16,0,361,360,1,0,0,0,361,362,1,0,0,0,362,
        363,1,0,0,0,363,572,3,70,35,0,364,572,3,6,3,0,365,572,3,8,4,0,366,
        572,3,10,5,0,367,572,3,16,8,0,368,369,5,316,0,0,369,370,5,292,0,
        0,370,372,3,76,38,0,371,373,3,28,14,0,372,371,1,0,0,0,372,373,1,
        0,0,0,373,572,1,0,0,0,374,375,5,13,0,0,375,376,5,292,0,0,376,378,
        3,76,38,0,377,379,3,28,14,0,378,377,1,0,0,0,378,379,1,0,0,0,379,
        380,1,0,0,0,380,381,5,55,0,0,381,389,5,281,0,0,382,390,5,195,0,0,
        383,384,5,119,0,0,384,385,5,50,0,0,385,390,3,84,42,0,386,387,5,119,
        0,0,387,388,5,10,0,0,388,390,5,50,0,0,389,382,1,0,0,0,389,383,1,
        0,0,0,389,386,1,0,0,0,389,390,1,0,0,0,390,572,1,0,0,0,391,392,5,
        13,0,0,392,395,5,293,0,0,393,394,7,0,0,0,394,396,3,70,35,0,395,393,
        1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,398,5,55,0,0,398,400,
        5,281,0,0,399,401,5,195,0,0,400,399,1,0,0,0,400,401,1,0,0,0,401,
        572,1,0,0,0,402,405,5,81,0,0,403,404,5,207,0,0,404,406,5,243,0,0,
        405,403,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,409,5,335,0,
        0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,412,3,316,
        158,0,411,413,3,278,139,0,412,411,1,0,0,0,412,413,1,0,0,0,413,415,
        1,0,0,0,414,416,3,290,145,0,415,414,1,0,0,0,415,416,1,0,0,0,416,
        572,1,0,0,0,417,419,5,106,0,0,418,420,7,1,0,0,419,418,1,0,0,0,419,
        420,1,0,0,0,420,421,1,0,0,0,421,572,3,4,2,0,422,423,7,2,0,0,423,
        425,5,125,0,0,424,426,5,108,0,0,425,424,1,0,0,0,425,426,1,0,0,0,
        426,427,1,0,0,0,427,572,3,34,17,0,428,429,7,2,0,0,429,431,5,72,0,
        0,430,432,5,108,0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,
        0,0,433,572,3,70,35,0,434,436,7,2,0,0,435,437,5,231,0,0,436,435,
        1,0,0,0,436,437,1,0,0,0,437,438,1,0,0,0,438,572,3,24,12,0,439,441,
        7,2,0,0,440,442,5,292,0,0,441,440,1,0,0,0,441,442,1,0,0,0,442,444,
        1,0,0,0,443,445,7,3,0,0,444,443,1,0,0,0,444,445,1,0,0,0,445,446,
        1,0,0,0,446,448,3,76,38,0,447,449,3,28,14,0,448,447,1,0,0,0,448,
        449,1,0,0,0,449,451,1,0,0,0,450,452,3,36,18,0,451,450,1,0,0,0,451,
        452,1,0,0,0,452,572,1,0,0,0,453,454,5,51,0,0,454,460,5,202,0,0,455,
        456,3,32,16,0,456,457,3,70,35,0,457,461,1,0,0,0,458,459,5,292,0,
        0,459,461,3,76,38,0,460,455,1,0,0,0,460,458,1,0,0,0,461,462,1,0,
        0,0,462,465,5,153,0,0,463,466,3,334,167,0,464,466,5,197,0,0,465,
        463,1,0,0,0,465,464,1,0,0,0,466,572,1,0,0,0,467,468,5,239,0,0,468,
        469,5,292,0,0,469,572,3,76,38,0,470,471,5,239,0,0,471,472,5,125,
        0,0,472,572,3,316,158,0,473,481,5,239,0,0,474,482,3,334,167,0,475,
        477,9,0,0,0,476,475,1,0,0,0,477,480,1,0,0,0,478,479,1,0,0,0,478,
        476,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,481,474,1,0,0,0,481,
        478,1,0,0,0,482,572,1,0,0,0,483,485,5,33,0,0,484,486,5,159,0,0,485,
        484,1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,488,5,292,0,0,488,
        491,3,76,38,0,489,490,5,206,0,0,490,492,3,48,24,0,491,489,1,0,0,
        0,491,492,1,0,0,0,492,497,1,0,0,0,493,495,5,20,0,0,494,493,1,0,0,
        0,494,495,1,0,0,0,495,496,1,0,0,0,496,498,3,24,12,0,497,494,1,0,
        0,0,497,498,1,0,0,0,498,572,1,0,0,0,499,500,5,321,0,0,500,502,5,
        292,0,0,501,503,3,158,79,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,
        1,0,0,0,504,572,3,76,38,0,505,506,5,43,0,0,506,572,5,33,0,0,507,
        508,5,168,0,0,508,510,5,70,0,0,509,511,5,169,0,0,510,509,1,0,0,0,
        510,511,1,0,0,0,511,512,1,0,0,0,512,513,5,145,0,0,513,515,3,334,
        167,0,514,516,5,215,0,0,515,514,1,0,0,0,515,516,1,0,0,0,516,517,
        1,0,0,0,517,518,5,152,0,0,518,519,5,292,0,0,519,521,3,76,38,0,520,
        522,3,28,14,0,521,520,1,0,0,0,521,522,1,0,0,0,522,572,1,0,0,0,523,
        525,5,187,0,0,524,523,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,
        527,5,241,0,0,527,528,5,292,0,0,528,531,3,76,38,0,529,530,7,4,0,
        0,530,532,5,218,0,0,531,529,1,0,0,0,531,532,1,0,0,0,532,572,1,0,
        0,0,533,534,7,5,0,0,534,538,3,326,163,0,535,537,9,0,0,0,536,535,
        1,0,0,0,537,540,1,0,0,0,538,539,1,0,0,0,538,536,1,0,0,0,539,572,
        1,0,0,0,540,538,1,0,0,0,541,545,5,268,0,0,542,544,9,0,0,0,543,542,
        1,0,0,0,544,547,1,0,0,0,545,546,1,0,0,0,545,543,1,0,0,0,546,572,
        1,0,0,0,547,545,1,0,0,0,548,552,5,244,0,0,549,551,9,0,0,0,550,549,
        1,0,0,0,551,554,1,0,0,0,552,553,1,0,0,0,552,550,1,0,0,0,553,572,
        1,0,0,0,554,552,1,0,0,0,555,556,5,204,0,0,556,558,3,76,38,0,557,
        559,3,120,60,0,558,557,1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,
        561,5,350,0,0,561,562,5,31,0,0,562,563,3,84,42,0,563,572,1,0,0,0,
        564,568,3,18,9,0,565,567,9,0,0,0,566,565,1,0,0,0,567,570,1,0,0,0,
        568,569,1,0,0,0,568,566,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,
        571,354,1,0,0,0,571,356,1,0,0,0,571,359,1,0,0,0,571,364,1,0,0,0,
        571,365,1,0,0,0,571,366,1,0,0,0,571,367,1,0,0,0,571,368,1,0,0,0,
        571,374,1,0,0,0,571,391,1,0,0,0,571,402,1,0,0,0,571,417,1,0,0,0,
        571,422,1,0,0,0,571,428,1,0,0,0,571,434,1,0,0,0,571,439,1,0,0,0,
        571,453,1,0,0,0,571,467,1,0,0,0,571,470,1,0,0,0,571,473,1,0,0,0,
        571,483,1,0,0,0,571,499,1,0,0,0,571,505,1,0,0,0,571,507,1,0,0,0,
        571,524,1,0,0,0,571,533,1,0,0,0,571,541,1,0,0,0,571,548,1,0,0,0,
        571,555,1,0,0,0,571,564,1,0,0,0,572,5,1,0,0,0,573,574,5,11,0,0,574,
        575,3,32,16,0,575,576,3,70,35,0,576,581,5,268,0,0,577,578,7,6,0,
        0,578,582,3,48,24,0,579,580,5,170,0,0,580,582,3,334,167,0,581,577,
        1,0,0,0,581,579,1,0,0,0,582,896,1,0,0,0,583,584,5,11,0,0,584,585,
        5,292,0,0,585,586,3,76,38,0,586,587,5,8,0,0,587,589,7,7,0,0,588,
        590,5,2,0,0,589,588,1,0,0,0,589,590,1,0,0,0,590,593,1,0,0,0,591,
        594,3,282,141,0,592,594,3,280,140,0,593,591,1,0,0,0,593,592,1,0,
        0,0,594,596,1,0,0,0,595,597,5,3,0,0,596,595,1,0,0,0,596,597,1,0,
        0,0,597,896,1,0,0,0,598,599,5,11,0,0,599,600,5,292,0,0,600,601,3,
        76,38,0,601,602,5,96,0,0,602,604,7,7,0,0,603,605,3,158,79,0,604,
        603,1,0,0,0,604,605,1,0,0,0,605,607,1,0,0,0,606,608,5,2,0,0,607,
        606,1,0,0,0,607,608,1,0,0,0,608,611,1,0,0,0,609,612,3,82,41,0,610,
        612,3,84,42,0,611,609,1,0,0,0,611,610,1,0,0,0,612,614,1,0,0,0,613,
        615,5,3,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,896,1,0,0,0,616,
        621,5,11,0,0,617,618,5,292,0,0,618,622,3,76,38,0,619,620,5,337,0,
        0,620,622,3,80,40,0,621,617,1,0,0,0,621,619,1,0,0,0,622,623,1,0,
        0,0,623,626,5,240,0,0,624,625,5,49,0,0,625,627,3,82,41,0,626,624,
        1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,628,631,5,308,0,0,629,632,
        3,86,43,0,630,632,3,206,103,0,631,629,1,0,0,0,631,630,1,0,0,0,632,
        896,1,0,0,0,633,638,5,11,0,0,634,635,5,292,0,0,635,639,3,76,38,0,
        636,637,5,337,0,0,637,639,3,80,40,0,638,634,1,0,0,0,638,636,1,0,
        0,0,639,640,1,0,0,0,640,641,7,8,0,0,641,643,5,296,0,0,642,644,3,
        158,79,0,643,642,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,646,
        3,48,24,0,646,896,1,0,0,0,647,648,5,11,0,0,648,649,5,292,0,0,649,
        650,3,76,38,0,650,652,7,9,0,0,651,653,5,49,0,0,652,651,1,0,0,0,652,
        653,1,0,0,0,653,654,1,0,0,0,654,656,3,82,41,0,655,657,3,332,166,
        0,656,655,1,0,0,0,656,657,1,0,0,0,657,896,1,0,0,0,658,659,5,11,0,
        0,659,660,5,292,0,0,660,662,3,76,38,0,661,663,3,28,14,0,662,661,
        1,0,0,0,662,663,1,0,0,0,663,670,1,0,0,0,664,666,5,39,0,0,665,667,
        5,49,0,0,666,665,1,0,0,0,666,667,1,0,0,0,667,671,1,0,0,0,668,669,
        5,243,0,0,669,671,5,50,0,0,670,664,1,0,0,0,670,668,1,0,0,0,671,681,
        1,0,0,0,672,673,3,82,41,0,673,675,3,294,147,0,674,676,3,274,137,
        0,675,674,1,0,0,0,675,676,1,0,0,0,676,682,1,0,0,0,677,678,5,2,0,
        0,678,679,3,284,142,0,679,680,5,3,0,0,680,682,1,0,0,0,681,672,1,
        0,0,0,681,677,1,0,0,0,682,896,1,0,0,0,683,688,5,11,0,0,684,685,5,
        292,0,0,685,689,3,76,38,0,686,687,5,337,0,0,687,689,3,80,40,0,688,
        684,1,0,0,0,688,686,1,0,0,0,689,690,1,0,0,0,690,693,7,10,0,0,691,
        694,3,156,78,0,692,694,3,158,79,0,693,691,1,0,0,0,693,692,1,0,0,
        0,693,694,1,0,0,0,694,701,1,0,0,0,695,697,3,26,13,0,696,695,1,0,
        0,0,697,698,1,0,0,0,698,696,1,0,0,0,698,699,1,0,0,0,699,702,1,0,
        0,0,700,702,3,28,14,0,701,696,1,0,0,0,701,700,1,0,0,0,702,707,1,
        0,0,0,703,704,5,4,0,0,704,706,3,28,14,0,705,703,1,0,0,0,706,709,
        1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,0,708,711,1,0,0,0,709,707,
        1,0,0,0,710,712,5,229,0,0,711,710,1,0,0,0,711,712,1,0,0,0,712,896,
        1,0,0,0,713,714,5,11,0,0,714,715,5,337,0,0,715,717,3,80,40,0,716,
        718,5,20,0,0,717,716,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,
        720,3,24,12,0,720,896,1,0,0,0,721,722,5,11,0,0,722,723,5,292,0,0,
        723,725,3,76,38,0,724,726,3,28,14,0,725,724,1,0,0,0,725,726,1,0,
        0,0,726,727,1,0,0,0,727,729,5,39,0,0,728,730,5,49,0,0,729,728,1,
        0,0,0,729,730,1,0,0,0,730,731,1,0,0,0,731,732,3,82,41,0,732,734,
        3,294,147,0,733,735,3,274,137,0,734,733,1,0,0,0,734,735,1,0,0,0,
        735,896,1,0,0,0,736,737,5,11,0,0,737,738,5,292,0,0,738,740,3,76,
        38,0,739,741,3,28,14,0,740,739,1,0,0,0,740,741,1,0,0,0,741,742,1,
        0,0,0,742,743,5,243,0,0,743,744,5,50,0,0,744,745,5,2,0,0,745,746,
        3,284,142,0,746,747,5,3,0,0,747,896,1,0,0,0,748,749,5,11,0,0,749,
        750,5,292,0,0,750,752,3,76,38,0,751,753,3,28,14,0,752,751,1,0,0,
        0,752,753,1,0,0,0,753,754,1,0,0,0,754,757,5,268,0,0,755,756,5,170,
        0,0,756,758,3,334,167,0,757,755,1,0,0,0,757,758,1,0,0,0,758,760,
        1,0,0,0,759,761,5,265,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,763,
        1,0,0,0,762,764,3,334,167,0,763,762,1,0,0,0,763,764,1,0,0,0,764,
        766,1,0,0,0,765,767,5,345,0,0,766,765,1,0,0,0,766,767,1,0,0,0,767,
        769,1,0,0,0,768,770,5,266,0,0,769,768,1,0,0,0,769,770,1,0,0,0,770,
        772,1,0,0,0,771,773,3,48,24,0,772,771,1,0,0,0,772,773,1,0,0,0,773,
        896,1,0,0,0,774,775,5,11,0,0,775,776,5,292,0,0,776,777,3,76,38,0,
        777,778,3,28,14,0,778,779,5,240,0,0,779,780,5,308,0,0,780,781,3,
        28,14,0,781,896,1,0,0,0,782,787,5,11,0,0,783,784,5,292,0,0,784,788,
        3,76,38,0,785,786,5,337,0,0,786,788,3,80,40,0,787,783,1,0,0,0,787,
        785,1,0,0,0,788,789,1,0,0,0,789,791,5,8,0,0,790,792,3,156,78,0,791,
        790,1,0,0,0,791,792,1,0,0,0,792,793,1,0,0,0,793,794,3,26,13,0,794,
        896,1,0,0,0,795,800,5,11,0,0,796,797,5,292,0,0,797,801,3,76,38,0,
        798,799,5,337,0,0,799,801,3,80,40,0,800,796,1,0,0,0,800,798,1,0,
        0,0,801,802,1,0,0,0,802,804,5,96,0,0,803,805,3,158,79,0,804,803,
        1,0,0,0,804,805,1,0,0,0,805,806,1,0,0,0,806,811,3,28,14,0,807,808,
        5,4,0,0,808,810,3,28,14,0,809,807,1,0,0,0,810,813,1,0,0,0,811,809,
        1,0,0,0,811,812,1,0,0,0,812,815,1,0,0,0,813,811,1,0,0,0,814,816,
        5,229,0,0,815,814,1,0,0,0,815,816,1,0,0,0,816,896,1,0,0,0,817,818,
        5,11,0,0,818,819,5,292,0,0,819,820,3,76,38,0,820,821,5,236,0,0,821,
        822,5,218,0,0,822,896,1,0,0,0,823,824,5,11,0,0,824,828,5,142,0,0,
        825,827,9,0,0,0,826,825,1,0,0,0,827,830,1,0,0,0,828,829,1,0,0,0,
        828,826,1,0,0,0,829,896,1,0,0,0,830,828,1,0,0,0,831,832,5,11,0,0,
        832,833,5,292,0,0,833,834,3,76,38,0,834,836,7,11,0,0,835,837,5,31,
        0,0,836,835,1,0,0,0,836,837,1,0,0,0,837,841,1,0,0,0,838,840,9,0,
        0,0,839,838,1,0,0,0,840,843,1,0,0,0,841,842,1,0,0,0,841,839,1,0,
        0,0,842,896,1,0,0,0,843,841,1,0,0,0,844,845,5,11,0,0,845,846,5,292,
        0,0,846,847,3,76,38,0,847,848,7,12,0,0,848,850,7,13,0,0,849,851,
        5,170,0,0,850,849,1,0,0,0,850,851,1,0,0,0,851,853,1,0,0,0,852,854,
        5,20,0,0,853,852,1,0,0,0,853,854,1,0,0,0,854,856,1,0,0,0,855,857,
        5,89,0,0,856,855,1,0,0,0,856,857,1,0,0,0,857,861,1,0,0,0,858,860,
        9,0,0,0,859,858,1,0,0,0,860,863,1,0,0,0,861,862,1,0,0,0,861,859,
        1,0,0,0,862,896,1,0,0,0,863,861,1,0,0,0,864,865,5,11,0,0,865,866,
        5,292,0,0,866,867,3,76,38,0,867,868,7,14,0,0,868,872,5,216,0,0,869,
        871,9,0,0,0,870,869,1,0,0,0,871,874,1,0,0,0,872,873,1,0,0,0,872,
        870,1,0,0,0,873,896,1,0,0,0,874,872,1,0,0,0,875,876,5,11,0,0,876,
        877,5,292,0,0,877,879,3,76,38,0,878,880,3,28,14,0,879,878,1,0,0,
        0,879,880,1,0,0,0,880,887,1,0,0,0,881,888,5,53,0,0,882,888,5,56,
        0,0,883,884,5,268,0,0,884,888,5,115,0,0,885,886,5,243,0,0,886,888,
        5,50,0,0,887,881,1,0,0,0,887,882,1,0,0,0,887,883,1,0,0,0,887,885,
        1,0,0,0,888,892,1,0,0,0,889,891,9,0,0,0,890,889,1,0,0,0,891,894,
        1,0,0,0,892,893,1,0,0,0,892,890,1,0,0,0,893,896,1,0,0,0,894,892,
        1,0,0,0,895,573,1,0,0,0,895,583,1,0,0,0,895,598,1,0,0,0,895,616,
        1,0,0,0,895,633,1,0,0,0,895,647,1,0,0,0,895,658,1,0,0,0,895,683,
        1,0,0,0,895,713,1,0,0,0,895,721,1,0,0,0,895,736,1,0,0,0,895,748,
        1,0,0,0,895,774,1,0,0,0,895,782,1,0,0,0,895,795,1,0,0,0,895,817,
        1,0,0,0,895,823,1,0,0,0,895,831,1,0,0,0,895,844,1,0,0,0,895,864,
        1,0,0,0,895,875,1,0,0,0,896,7,1,0,0,0,897,898,5,59,0,0,898,900,3,
        32,16,0,899,901,3,156,78,0,900,899,1,0,0,0,900,901,1,0,0,0,901,902,
        1,0,0,0,902,912,3,72,36,0,903,904,5,51,0,0,904,911,3,334,167,0,905,
        906,5,170,0,0,906,911,3,334,167,0,907,908,5,345,0,0,908,909,7,6,
        0,0,909,911,3,48,24,0,910,903,1,0,0,0,910,905,1,0,0,0,910,907,1,
        0,0,0,911,914,1,0,0,0,912,910,1,0,0,0,912,913,1,0,0,0,913,1109,1,
        0,0,0,914,912,1,0,0,0,915,917,5,59,0,0,916,918,5,297,0,0,917,916,
        1,0,0,0,917,918,1,0,0,0,918,920,1,0,0,0,919,921,5,109,0,0,920,919,
        1,0,0,0,920,921,1,0,0,0,921,922,1,0,0,0,922,924,5,292,0,0,923,925,
        3,156,78,0,924,923,1,0,0,0,924,925,1,0,0,0,925,926,1,0,0,0,926,931,
        3,74,37,0,927,928,5,2,0,0,928,929,3,296,148,0,929,930,5,3,0,0,930,
        932,1,0,0,0,931,927,1,0,0,0,931,932,1,0,0,0,932,934,1,0,0,0,933,
        935,3,42,21,0,934,933,1,0,0,0,934,935,1,0,0,0,935,936,1,0,0,0,936,
        941,3,44,22,0,937,939,5,20,0,0,938,937,1,0,0,0,938,939,1,0,0,0,939,
        940,1,0,0,0,940,942,3,24,12,0,941,938,1,0,0,0,941,942,1,0,0,0,942,
        1109,1,0,0,0,943,944,5,59,0,0,944,946,5,207,0,0,945,943,1,0,0,0,
        945,946,1,0,0,0,946,947,1,0,0,0,947,948,5,243,0,0,948,949,5,292,
        0,0,949,954,3,74,37,0,950,951,5,2,0,0,951,952,3,296,148,0,952,953,
        5,3,0,0,953,955,1,0,0,0,954,950,1,0,0,0,954,955,1,0,0,0,955,957,
        1,0,0,0,956,958,3,42,21,0,957,956,1,0,0,0,957,958,1,0,0,0,958,959,
        1,0,0,0,959,964,3,44,22,0,960,962,5,20,0,0,961,960,1,0,0,0,961,962,
        1,0,0,0,962,963,1,0,0,0,963,965,3,24,12,0,964,961,1,0,0,0,964,965,
        1,0,0,0,965,1109,1,0,0,0,966,967,5,59,0,0,967,969,5,292,0,0,968,
        970,3,156,78,0,969,968,1,0,0,0,969,970,1,0,0,0,970,971,1,0,0,0,971,
        972,3,74,37,0,972,973,5,163,0,0,973,984,3,76,38,0,974,983,3,42,21,
        0,975,983,3,202,101,0,976,983,3,64,32,0,977,978,5,170,0,0,978,983,
        3,334,167,0,979,980,5,296,0,0,980,983,3,48,24,0,981,983,3,46,23,
        0,982,974,1,0,0,0,982,975,1,0,0,0,982,976,1,0,0,0,982,977,1,0,0,
        0,982,979,1,0,0,0,982,981,1,0,0,0,983,986,1,0,0,0,984,982,1,0,0,
        0,984,985,1,0,0,0,985,1109,1,0,0,0,986,984,1,0,0,0,987,990,5,59,
        0,0,988,989,5,207,0,0,989,991,5,243,0,0,990,988,1,0,0,0,990,991,
        1,0,0,0,991,996,1,0,0,0,992,994,5,128,0,0,993,992,1,0,0,0,993,994,
        1,0,0,0,994,995,1,0,0,0,995,997,5,297,0,0,996,993,1,0,0,0,996,997,
        1,0,0,0,997,998,1,0,0,0,998,1000,5,337,0,0,999,1001,3,156,78,0,1000,
        999,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,1004,3,78,39,
        0,1003,1005,3,184,92,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,
        1015,1,0,0,0,1006,1007,5,51,0,0,1007,1014,3,334,167,0,1008,1009,
        5,217,0,0,1009,1010,5,202,0,0,1010,1014,3,176,88,0,1011,1012,5,296,
        0,0,1012,1014,3,48,24,0,1013,1006,1,0,0,0,1013,1008,1,0,0,0,1013,
        1011,1,0,0,0,1014,1017,1,0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,
        0,1016,1018,1,0,0,0,1017,1015,1,0,0,0,1018,1019,5,20,0,0,1019,1020,
        3,24,12,0,1020,1109,1,0,0,0,1021,1024,5,59,0,0,1022,1023,5,207,0,
        0,1023,1025,5,243,0,0,1024,1022,1,0,0,0,1024,1025,1,0,0,0,1025,1027,
        1,0,0,0,1026,1028,5,128,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,
        1028,1029,1,0,0,0,1029,1030,5,297,0,0,1030,1031,5,337,0,0,1031,1036,
        3,78,39,0,1032,1033,5,2,0,0,1033,1034,3,292,146,0,1034,1035,5,3,
        0,0,1035,1037,1,0,0,0,1036,1032,1,0,0,0,1036,1037,1,0,0,0,1037,1038,
        1,0,0,0,1038,1041,3,42,21,0,1039,1040,5,206,0,0,1040,1042,3,48,24,
        0,1041,1039,1,0,0,0,1041,1042,1,0,0,0,1042,1109,1,0,0,0,1043,1046,
        5,59,0,0,1044,1045,5,207,0,0,1045,1047,5,243,0,0,1046,1044,1,0,0,
        0,1046,1047,1,0,0,0,1047,1049,1,0,0,0,1048,1050,5,297,0,0,1049,1048,
        1,0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,0,0,1051,1053,5,125,0,0,
        1052,1054,3,156,78,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,1055,
        1,0,0,0,1055,1056,3,318,159,0,1056,1057,5,20,0,0,1057,1071,3,334,
        167,0,1058,1059,5,331,0,0,1059,1060,3,326,163,0,1060,1061,3,334,
        167,0,1061,1068,1,0,0,0,1062,1063,5,4,0,0,1063,1064,3,326,163,0,
        1064,1065,3,334,167,0,1065,1067,1,0,0,0,1066,1062,1,0,0,0,1067,1070,
        1,0,0,0,1068,1066,1,0,0,0,1068,1069,1,0,0,0,1069,1072,1,0,0,0,1070,
        1068,1,0,0,0,1071,1058,1,0,0,0,1071,1072,1,0,0,0,1072,1109,1,0,0,
        0,1073,1074,5,59,0,0,1074,1076,5,142,0,0,1075,1077,3,156,78,0,1076,
        1075,1,0,0,0,1076,1077,1,0,0,0,1077,1078,1,0,0,0,1078,1079,3,326,
        163,0,1079,1081,5,202,0,0,1080,1082,5,292,0,0,1081,1080,1,0,0,0,
        1081,1082,1,0,0,0,1082,1083,1,0,0,0,1083,1086,3,76,38,0,1084,1085,
        5,331,0,0,1085,1087,3,326,163,0,1086,1084,1,0,0,0,1086,1087,1,0,
        0,0,1087,1088,1,0,0,0,1088,1089,5,2,0,0,1089,1090,3,208,104,0,1090,
        1093,5,3,0,0,1091,1092,5,206,0,0,1092,1094,3,48,24,0,1093,1091,1,
        0,0,0,1093,1094,1,0,0,0,1094,1109,1,0,0,0,1095,1100,5,59,0,0,1096,
        1101,5,252,0,0,1097,1101,5,142,0,0,1098,1099,5,297,0,0,1099,1101,
        5,175,0,0,1100,1096,1,0,0,0,1100,1097,1,0,0,0,1100,1098,1,0,0,0,
        1101,1105,1,0,0,0,1102,1104,9,0,0,0,1103,1102,1,0,0,0,1104,1107,
        1,0,0,0,1105,1106,1,0,0,0,1105,1103,1,0,0,0,1106,1109,1,0,0,0,1107,
        1105,1,0,0,0,1108,897,1,0,0,0,1108,915,1,0,0,0,1108,945,1,0,0,0,
        1108,966,1,0,0,0,1108,987,1,0,0,0,1108,1021,1,0,0,0,1108,1043,1,
        0,0,0,1108,1073,1,0,0,0,1108,1095,1,0,0,0,1109,9,1,0,0,0,1110,1111,
        5,96,0,0,1111,1113,3,32,16,0,1112,1114,3,158,79,0,1113,1112,1,0,
        0,0,1113,1114,1,0,0,0,1114,1115,1,0,0,0,1115,1117,3,70,35,0,1116,
        1118,7,15,0,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1178,1,0,
        0,0,1119,1120,5,96,0,0,1120,1122,5,292,0,0,1121,1123,3,158,79,0,
        1122,1121,1,0,0,0,1122,1123,1,0,0,0,1123,1124,1,0,0,0,1124,1126,
        3,76,38,0,1125,1127,5,229,0,0,1126,1125,1,0,0,0,1126,1127,1,0,0,
        0,1127,1178,1,0,0,0,1128,1129,5,96,0,0,1129,1131,5,337,0,0,1130,
        1132,3,158,79,0,1131,1130,1,0,0,0,1131,1132,1,0,0,0,1132,1133,1,
        0,0,0,1133,1178,3,80,40,0,1134,1136,5,96,0,0,1135,1137,5,297,0,0,
        1136,1135,1,0,0,0,1136,1137,1,0,0,0,1137,1138,1,0,0,0,1138,1140,
        5,125,0,0,1139,1141,3,158,79,0,1140,1139,1,0,0,0,1140,1141,1,0,0,
        0,1141,1142,1,0,0,0,1142,1178,3,316,158,0,1143,1144,5,96,0,0,1144,
        1145,5,297,0,0,1145,1147,5,335,0,0,1146,1148,3,158,79,0,1147,1146,
        1,0,0,0,1147,1148,1,0,0,0,1148,1152,1,0,0,0,1149,1153,3,76,38,0,
        1150,1153,3,80,40,0,1151,1153,3,316,158,0,1152,1149,1,0,0,0,1152,
        1150,1,0,0,0,1152,1151,1,0,0,0,1153,1178,1,0,0,0,1154,1155,5,96,
        0,0,1155,1157,5,142,0,0,1156,1158,3,158,79,0,1157,1156,1,0,0,0,1157,
        1158,1,0,0,0,1158,1159,1,0,0,0,1159,1160,3,326,163,0,1160,1162,5,
        202,0,0,1161,1163,5,292,0,0,1162,1161,1,0,0,0,1162,1163,1,0,0,0,
        1163,1164,1,0,0,0,1164,1165,3,76,38,0,1165,1178,1,0,0,0,1166,1167,
        5,96,0,0,1167,1169,7,16,0,0,1168,1170,5,175,0,0,1169,1168,1,0,0,
        0,1169,1170,1,0,0,0,1170,1174,1,0,0,0,1171,1173,9,0,0,0,1172,1171,
        1,0,0,0,1173,1176,1,0,0,0,1174,1175,1,0,0,0,1174,1172,1,0,0,0,1175,
        1178,1,0,0,0,1176,1174,1,0,0,0,1177,1110,1,0,0,0,1177,1119,1,0,0,
        0,1177,1128,1,0,0,0,1177,1134,1,0,0,0,1177,1143,1,0,0,0,1177,1154,
        1,0,0,0,1177,1166,1,0,0,0,1178,11,1,0,0,0,1179,1180,3,14,7,0,1180,
        1181,3,24,12,0,1181,1238,1,0,0,0,1182,1186,3,128,64,0,1183,1184,
        3,14,7,0,1184,1185,3,98,49,0,1185,1187,1,0,0,0,1186,1183,1,0,0,0,
        1187,1188,1,0,0,0,1188,1186,1,0,0,0,1188,1189,1,0,0,0,1189,1238,
        1,0,0,0,1190,1191,5,84,0,0,1191,1192,5,123,0,0,1192,1193,3,76,38,
        0,1193,1195,3,200,100,0,1194,1196,3,120,60,0,1195,1194,1,0,0,0,1195,
        1196,1,0,0,0,1196,1238,1,0,0,0,1197,1198,5,328,0,0,1198,1199,3,76,
        38,0,1199,1200,3,200,100,0,1200,1202,3,106,53,0,1201,1203,3,120,
        60,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,1238,1,0,0,0,1204,
        1205,5,178,0,0,1205,1206,5,152,0,0,1206,1207,3,76,38,0,1207,1208,
        3,200,100,0,1208,1214,5,331,0,0,1209,1215,3,88,44,0,1210,1211,5,
        2,0,0,1211,1212,3,24,12,0,1212,1213,5,3,0,0,1213,1215,1,0,0,0,1214,
        1209,1,0,0,0,1214,1210,1,0,0,0,1215,1216,1,0,0,0,1216,1217,3,200,
        100,0,1217,1218,5,202,0,0,1218,1222,3,236,118,0,1219,1221,3,108,
        54,0,1220,1219,1,0,0,0,1221,1224,1,0,0,0,1222,1220,1,0,0,0,1222,
        1223,1,0,0,0,1223,1228,1,0,0,0,1224,1222,1,0,0,0,1225,1227,3,110,
        55,0,1226,1225,1,0,0,0,1227,1230,1,0,0,0,1228,1226,1,0,0,0,1228,
        1229,1,0,0,0,1229,1234,1,0,0,0,1230,1228,1,0,0,0,1231,1233,3,112,
        56,0,1232,1231,1,0,0,0,1233,1236,1,0,0,0,1234,1232,1,0,0,0,1234,
        1235,1,0,0,0,1235,1238,1,0,0,0,1236,1234,1,0,0,0,1237,1179,1,0,0,
        0,1237,1182,1,0,0,0,1237,1190,1,0,0,0,1237,1197,1,0,0,0,1237,1204,
        1,0,0,0,1238,13,1,0,0,0,1239,1240,5,147,0,0,1240,1242,5,152,0,0,
        1241,1243,5,292,0,0,1242,1241,1,0,0,0,1242,1243,1,0,0,0,1243,1244,
        1,0,0,0,1244,1246,3,76,38,0,1245,1247,3,28,14,0,1246,1245,1,0,0,
        0,1246,1247,1,0,0,0,1247,1249,1,0,0,0,1248,1250,3,156,78,0,1249,
        1248,1,0,0,0,1249,1250,1,0,0,0,1250,1257,1,0,0,0,1251,1252,5,31,
        0,0,1252,1258,5,188,0,0,1253,1254,5,2,0,0,1254,1255,3,84,42,0,1255,
        1256,5,3,0,0,1256,1258,1,0,0,0,1257,1251,1,0,0,0,1257,1253,1,0,0,
        0,1257,1258,1,0,0,0,1258,1311,1,0,0,0,1259,1260,5,147,0,0,1260,1262,
        5,152,0,0,1261,1263,5,292,0,0,1262,1261,1,0,0,0,1262,1263,1,0,0,
        0,1263,1264,1,0,0,0,1264,1265,3,76,38,0,1265,1266,5,243,0,0,1266,
        1267,3,120,60,0,1267,1311,1,0,0,0,1268,1269,5,147,0,0,1269,1271,
        5,215,0,0,1270,1272,5,292,0,0,1271,1270,1,0,0,0,1271,1272,1,0,0,
        0,1272,1273,1,0,0,0,1273,1278,3,76,38,0,1274,1276,3,28,14,0,1275,
        1277,3,156,78,0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1279,1,
        0,0,0,1278,1274,1,0,0,0,1278,1279,1,0,0,0,1279,1286,1,0,0,0,1280,
        1281,5,31,0,0,1281,1287,5,188,0,0,1282,1283,5,2,0,0,1283,1284,3,
        84,42,0,1284,1285,5,3,0,0,1285,1287,1,0,0,0,1286,1280,1,0,0,0,1286,
        1282,1,0,0,0,1286,1287,1,0,0,0,1287,1311,1,0,0,0,1288,1289,5,147,
        0,0,1289,1291,5,215,0,0,1290,1292,5,169,0,0,1291,1290,1,0,0,0,1291,
        1292,1,0,0,0,1292,1293,1,0,0,0,1293,1295,5,90,0,0,1294,1296,3,334,
        167,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1298,1,0,0,0,1297,
        1299,3,202,101,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,1301,1,
        0,0,0,1300,1302,3,64,32,0,1301,1300,1,0,0,0,1301,1302,1,0,0,0,1302,
        1304,1,0,0,0,1303,1305,3,42,21,0,1304,1303,1,0,0,0,1304,1305,1,0,
        0,0,1305,1308,1,0,0,0,1306,1307,5,206,0,0,1307,1309,3,48,24,0,1308,
        1306,1,0,0,0,1308,1309,1,0,0,0,1309,1311,1,0,0,0,1310,1239,1,0,0,
        0,1310,1259,1,0,0,0,1310,1268,1,0,0,0,1310,1288,1,0,0,0,1311,15,
        1,0,0,0,1312,1313,5,272,0,0,1313,1316,7,17,0,0,1314,1315,7,0,0,0,
        1315,1317,3,206,103,0,1316,1314,1,0,0,0,1316,1317,1,0,0,0,1317,1322,
        1,0,0,0,1318,1320,5,163,0,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,
        1320,1321,1,0,0,0,1321,1323,3,334,167,0,1322,1319,1,0,0,0,1322,1323,
        1,0,0,0,1323,1445,1,0,0,0,1324,1325,5,272,0,0,1325,1328,5,293,0,
        0,1326,1327,7,0,0,0,1327,1329,3,70,35,0,1328,1326,1,0,0,0,1328,1329,
        1,0,0,0,1329,1334,1,0,0,0,1330,1332,5,163,0,0,1331,1330,1,0,0,0,
        1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,1335,3,334,167,0,1334,1331,
        1,0,0,0,1334,1335,1,0,0,0,1335,1445,1,0,0,0,1336,1337,5,272,0,0,
        1337,1338,5,292,0,0,1338,1341,5,108,0,0,1339,1340,7,0,0,0,1340,1342,
        3,70,35,0,1341,1339,1,0,0,0,1341,1342,1,0,0,0,1342,1343,1,0,0,0,
        1343,1344,5,163,0,0,1344,1346,3,334,167,0,1345,1347,3,28,14,0,1346,
        1345,1,0,0,0,1346,1347,1,0,0,0,1347,1445,1,0,0,0,1348,1349,5,272,
        0,0,1349,1350,5,296,0,0,1350,1355,3,76,38,0,1351,1352,5,2,0,0,1352,
        1353,3,52,26,0,1353,1354,5,3,0,0,1354,1356,1,0,0,0,1355,1351,1,0,
        0,0,1355,1356,1,0,0,0,1356,1445,1,0,0,0,1357,1358,5,272,0,0,1358,
        1359,5,50,0,0,1359,1360,7,0,0,0,1360,1363,3,76,38,0,1361,1362,7,
        0,0,0,1362,1364,3,70,35,0,1363,1361,1,0,0,0,1363,1364,1,0,0,0,1364,
        1445,1,0,0,0,1365,1366,5,272,0,0,1366,1369,5,338,0,0,1367,1368,7,
        0,0,0,1368,1370,3,70,35,0,1369,1367,1,0,0,0,1369,1370,1,0,0,0,1370,
        1375,1,0,0,0,1371,1373,5,163,0,0,1372,1371,1,0,0,0,1372,1373,1,0,
        0,0,1373,1374,1,0,0,0,1374,1376,3,334,167,0,1375,1372,1,0,0,0,1375,
        1376,1,0,0,0,1376,1445,1,0,0,0,1377,1378,5,272,0,0,1378,1379,5,218,
        0,0,1379,1381,3,76,38,0,1380,1382,3,28,14,0,1381,1380,1,0,0,0,1381,
        1382,1,0,0,0,1382,1445,1,0,0,0,1383,1385,5,272,0,0,1384,1386,7,18,
        0,0,1385,1384,1,0,0,0,1385,1386,1,0,0,0,1386,1387,1,0,0,0,1387,1390,
        5,126,0,0,1388,1389,7,0,0,0,1389,1391,3,70,35,0,1390,1388,1,0,0,
        0,1390,1391,1,0,0,0,1391,1399,1,0,0,0,1392,1394,5,163,0,0,1393,1392,
        1,0,0,0,1393,1394,1,0,0,0,1394,1397,1,0,0,0,1395,1398,3,206,103,
        0,1396,1398,3,334,167,0,1397,1395,1,0,0,0,1397,1396,1,0,0,0,1398,
        1400,1,0,0,0,1399,1393,1,0,0,0,1399,1400,1,0,0,0,1400,1445,1,0,0,
        0,1401,1402,5,272,0,0,1402,1403,5,59,0,0,1403,1404,5,292,0,0,1404,
        1407,3,76,38,0,1405,1406,5,20,0,0,1406,1408,5,265,0,0,1407,1405,
        1,0,0,0,1407,1408,1,0,0,0,1408,1445,1,0,0,0,1409,1410,5,272,0,0,
        1410,1411,5,62,0,0,1411,1445,3,32,16,0,1412,1413,5,272,0,0,1413,
        1418,5,38,0,0,1414,1416,5,163,0,0,1415,1414,1,0,0,0,1415,1416,1,
        0,0,0,1416,1417,1,0,0,0,1417,1419,3,334,167,0,1418,1415,1,0,0,0,
        1418,1419,1,0,0,0,1419,1445,1,0,0,0,1420,1436,5,272,0,0,1421,1437,
        5,129,0,0,1422,1437,5,227,0,0,1423,1437,5,253,0,0,1424,1437,5,54,
        0,0,1425,1437,5,312,0,0,1426,1437,5,143,0,0,1427,1437,5,172,0,0,
        1428,1430,5,252,0,0,1429,1431,5,129,0,0,1430,1429,1,0,0,0,1430,1431,
        1,0,0,0,1431,1437,1,0,0,0,1432,1433,5,62,0,0,1433,1437,5,253,0,0,
        1434,1435,5,59,0,0,1435,1437,5,292,0,0,1436,1421,1,0,0,0,1436,1422,
        1,0,0,0,1436,1423,1,0,0,0,1436,1424,1,0,0,0,1436,1425,1,0,0,0,1436,
        1426,1,0,0,0,1436,1427,1,0,0,0,1436,1428,1,0,0,0,1436,1432,1,0,0,
        0,1436,1434,1,0,0,0,1437,1441,1,0,0,0,1438,1440,9,0,0,0,1439,1438,
        1,0,0,0,1440,1443,1,0,0,0,1441,1442,1,0,0,0,1441,1439,1,0,0,0,1442,
        1445,1,0,0,0,1443,1441,1,0,0,0,1444,1312,1,0,0,0,1444,1324,1,0,0,
        0,1444,1336,1,0,0,0,1444,1348,1,0,0,0,1444,1357,1,0,0,0,1444,1365,
        1,0,0,0,1444,1377,1,0,0,0,1444,1383,1,0,0,0,1444,1401,1,0,0,0,1444,
        1409,1,0,0,0,1444,1412,1,0,0,0,1444,1420,1,0,0,0,1445,17,1,0,0,0,
        1446,1448,7,19,0,0,1447,1449,5,252,0,0,1448,1447,1,0,0,0,1448,1449,
        1,0,0,0,1449,1460,1,0,0,0,1450,1451,7,20,0,0,1451,1460,5,292,0,0,
        1452,1453,7,21,0,0,1453,1460,5,72,0,0,1454,1455,5,280,0,0,1455,1460,
        5,311,0,0,1456,1460,5,52,0,0,1457,1460,5,254,0,0,1458,1460,5,88,
        0,0,1459,1446,1,0,0,0,1459,1450,1,0,0,0,1459,1452,1,0,0,0,1459,1454,
        1,0,0,0,1459,1456,1,0,0,0,1459,1457,1,0,0,0,1459,1458,1,0,0,0,1460,
        19,1,0,0,0,1461,1462,5,45,0,0,1462,1463,5,31,0,0,1463,1467,3,176,
        88,0,1464,1465,5,278,0,0,1465,1466,5,31,0,0,1466,1468,3,180,90,0,
        1467,1464,1,0,0,0,1467,1468,1,0,0,0,1468,1469,1,0,0,0,1469,1470,
        5,152,0,0,1470,1471,5,381,0,0,1471,1472,5,30,0,0,1472,21,1,0,0,0,
        1473,1474,5,274,0,0,1474,1475,5,31,0,0,1475,1476,3,176,88,0,1476,
        1479,5,202,0,0,1477,1480,3,60,30,0,1478,1480,3,62,31,0,1479,1477,
        1,0,0,0,1479,1478,1,0,0,0,1480,1484,1,0,0,0,1481,1482,5,282,0,0,
        1482,1483,5,20,0,0,1483,1485,5,89,0,0,1484,1481,1,0,0,0,1484,1485,
        1,0,0,0,1485,23,1,0,0,0,1486,1488,3,38,19,0,1487,1486,1,0,0,0,1487,
        1488,1,0,0,0,1488,1489,1,0,0,0,1489,1490,3,92,46,0,1490,1491,3,90,
        45,0,1491,25,1,0,0,0,1492,1495,3,28,14,0,1493,1494,5,170,0,0,1494,
        1496,3,334,167,0,1495,1493,1,0,0,0,1495,1496,1,0,0,0,1496,27,1,0,
        0,0,1497,1498,5,216,0,0,1498,1499,5,2,0,0,1499,1504,3,30,15,0,1500,
        1501,5,4,0,0,1501,1503,3,30,15,0,1502,1500,1,0,0,0,1503,1506,1,0,
        0,0,1504,1502,1,0,0,0,1504,1505,1,0,0,0,1505,1507,1,0,0,0,1506,1504,
        1,0,0,0,1507,1508,5,3,0,0,1508,29,1,0,0,0,1509,1512,3,326,163,0,
        1510,1511,5,351,0,0,1511,1513,3,248,124,0,1512,1510,1,0,0,0,1512,
        1513,1,0,0,0,1513,1519,1,0,0,0,1514,1515,3,326,163,0,1515,1516,5,
        351,0,0,1516,1517,5,82,0,0,1517,1519,1,0,0,0,1518,1509,1,0,0,0,1518,
        1514,1,0,0,0,1519,31,1,0,0,0,1520,1521,7,22,0,0,1521,33,1,0,0,0,
        1522,1528,3,88,44,0,1523,1528,3,334,167,0,1524,1528,3,250,125,0,
        1525,1528,3,252,126,0,1526,1528,3,254,127,0,1527,1522,1,0,0,0,1527,
        1523,1,0,0,0,1527,1524,1,0,0,0,1527,1525,1,0,0,0,1527,1526,1,0,0,
        0,1528,35,1,0,0,0,1529,1534,3,326,163,0,1530,1531,5,5,0,0,1531,1533,
        3,326,163,0,1532,1530,1,0,0,0,1533,1536,1,0,0,0,1534,1532,1,0,0,
        0,1534,1535,1,0,0,0,1535,37,1,0,0,0,1536,1534,1,0,0,0,1537,1538,
        5,345,0,0,1538,1543,3,40,20,0,1539,1540,5,4,0,0,1540,1542,3,40,20,
        0,1541,1539,1,0,0,0,1542,1545,1,0,0,0,1543,1541,1,0,0,0,1543,1544,
        1,0,0,0,1544,39,1,0,0,0,1545,1543,1,0,0,0,1546,1548,3,322,161,0,
        1547,1549,3,176,88,0,1548,1547,1,0,0,0,1548,1549,1,0,0,0,1549,1551,
        1,0,0,0,1550,1552,5,20,0,0,1551,1550,1,0,0,0,1551,1552,1,0,0,0,1552,
        1553,1,0,0,0,1553,1554,5,2,0,0,1554,1555,3,24,12,0,1555,1556,5,3,
        0,0,1556,41,1,0,0,0,1557,1558,5,331,0,0,1558,1559,3,206,103,0,1559,
        43,1,0,0,0,1560,1561,5,206,0,0,1561,1577,3,56,28,0,1562,1563,5,217,
        0,0,1563,1564,5,31,0,0,1564,1577,3,220,110,0,1565,1577,3,22,11,0,
        1566,1577,3,20,10,0,1567,1577,3,202,101,0,1568,1577,3,64,32,0,1569,
        1570,5,170,0,0,1570,1577,3,334,167,0,1571,1572,5,51,0,0,1572,1577,
        3,334,167,0,1573,1574,5,296,0,0,1574,1577,3,48,24,0,1575,1577,3,
        46,23,0,1576,1560,1,0,0,0,1576,1562,1,0,0,0,1576,1565,1,0,0,0,1576,
        1566,1,0,0,0,1576,1567,1,0,0,0,1576,1568,1,0,0,0,1576,1569,1,0,0,
        0,1576,1571,1,0,0,0,1576,1573,1,0,0,0,1576,1575,1,0,0,0,1577,1580,
        1,0,0,0,1578,1576,1,0,0,0,1578,1579,1,0,0,0,1579,45,1,0,0,0,1580,
        1578,1,0,0,0,1581,1582,5,162,0,0,1582,1583,5,381,0,0,1583,47,1,0,
        0,0,1584,1585,5,2,0,0,1585,1590,3,50,25,0,1586,1587,5,4,0,0,1587,
        1589,3,50,25,0,1588,1586,1,0,0,0,1589,1592,1,0,0,0,1590,1588,1,0,
        0,0,1590,1591,1,0,0,0,1591,1593,1,0,0,0,1592,1590,1,0,0,0,1593,1594,
        5,3,0,0,1594,49,1,0,0,0,1595,1600,3,52,26,0,1596,1598,5,351,0,0,
        1597,1596,1,0,0,0,1597,1598,1,0,0,0,1598,1599,1,0,0,0,1599,1601,
        3,54,27,0,1600,1597,1,0,0,0,1600,1601,1,0,0,0,1601,51,1,0,0,0,1602,
        1607,3,326,163,0,1603,1604,5,5,0,0,1604,1606,3,326,163,0,1605,1603,
        1,0,0,0,1606,1609,1,0,0,0,1607,1605,1,0,0,0,1607,1608,1,0,0,0,1608,
        1612,1,0,0,0,1609,1607,1,0,0,0,1610,1612,3,334,167,0,1611,1602,1,
        0,0,0,1611,1610,1,0,0,0,1612,53,1,0,0,0,1613,1618,5,381,0,0,1614,
        1618,5,383,0,0,1615,1618,3,256,128,0,1616,1618,3,334,167,0,1617,
        1613,1,0,0,0,1617,1614,1,0,0,0,1617,1615,1,0,0,0,1617,1616,1,0,0,
        0,1618,55,1,0,0,0,1619,1620,5,2,0,0,1620,1625,3,58,29,0,1621,1622,
        5,4,0,0,1622,1624,3,58,29,0,1623,1621,1,0,0,0,1624,1627,1,0,0,0,
        1625,1623,1,0,0,0,1625,1626,1,0,0,0,1626,1628,1,0,0,0,1627,1625,
        1,0,0,0,1628,1629,5,3,0,0,1629,57,1,0,0,0,1630,1635,3,52,26,0,1631,
        1633,5,351,0,0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,1634,1,0,
        0,0,1634,1636,3,228,114,0,1635,1632,1,0,0,0,1635,1636,1,0,0,0,1636,
        59,1,0,0,0,1637,1638,5,2,0,0,1638,1643,3,248,124,0,1639,1640,5,4,
        0,0,1640,1642,3,248,124,0,1641,1639,1,0,0,0,1642,1645,1,0,0,0,1643,
        1641,1,0,0,0,1643,1644,1,0,0,0,1644,1646,1,0,0,0,1645,1643,1,0,0,
        0,1646,1647,5,3,0,0,1647,61,1,0,0,0,1648,1649,5,2,0,0,1649,1654,
        3,60,30,0,1650,1651,5,4,0,0,1651,1653,3,60,30,0,1652,1650,1,0,0,
        0,1653,1656,1,0,0,0,1654,1652,1,0,0,0,1654,1655,1,0,0,0,1655,1657,
        1,0,0,0,1656,1654,1,0,0,0,1657,1658,5,3,0,0,1658,63,1,0,0,0,1659,
        1660,5,282,0,0,1660,1661,5,20,0,0,1661,1666,3,66,33,0,1662,1663,
        5,282,0,0,1663,1664,5,31,0,0,1664,1666,3,68,34,0,1665,1659,1,0,0,
        0,1665,1662,1,0,0,0,1666,65,1,0,0,0,1667,1668,5,146,0,0,1668,1669,
        3,334,167,0,1669,1670,5,211,0,0,1670,1671,3,334,167,0,1671,1674,
        1,0,0,0,1672,1674,3,326,163,0,1673,1667,1,0,0,0,1673,1672,1,0,0,
        0,1674,67,1,0,0,0,1675,1679,3,334,167,0,1676,1677,5,345,0,0,1677,
        1678,5,266,0,0,1678,1680,3,48,24,0,1679,1676,1,0,0,0,1679,1680,1,
        0,0,0,1680,69,1,0,0,0,1681,1682,3,88,44,0,1682,71,1,0,0,0,1683,1684,
        3,88,44,0,1684,73,1,0,0,0,1685,1686,3,212,106,0,1686,75,1,0,0,0,
        1687,1688,3,212,106,0,1688,77,1,0,0,0,1689,1690,3,214,107,0,1690,
        79,1,0,0,0,1691,1692,3,214,107,0,1692,81,1,0,0,0,1693,1696,3,206,
        103,0,1694,1696,4,41,0,0,1695,1693,1,0,0,0,1695,1694,1,0,0,0,1696,
        83,1,0,0,0,1697,1702,3,82,41,0,1698,1699,5,4,0,0,1699,1701,3,82,
        41,0,1700,1698,1,0,0,0,1701,1704,1,0,0,0,1702,1700,1,0,0,0,1702,
        1703,1,0,0,0,1703,85,1,0,0,0,1704,1702,1,0,0,0,1705,1706,3,322,161,
        0,1706,87,1,0,0,0,1707,1708,5,136,0,0,1708,1709,5,2,0,0,1709,1710,
        3,228,114,0,1710,1711,5,3,0,0,1711,1714,1,0,0,0,1712,1714,3,206,
        103,0,1713,1707,1,0,0,0,1713,1712,1,0,0,0,1714,89,1,0,0,0,1715,1716,
        5,208,0,0,1716,1717,5,31,0,0,1717,1722,3,96,48,0,1718,1719,5,4,0,
        0,1719,1721,3,96,48,0,1720,1718,1,0,0,0,1721,1724,1,0,0,0,1722,1720,
        1,0,0,0,1722,1723,1,0,0,0,1723,1726,1,0,0,0,1724,1722,1,0,0,0,1725,
        1715,1,0,0,0,1725,1726,1,0,0,0,1726,1737,1,0,0,0,1727,1728,5,44,
        0,0,1728,1729,5,31,0,0,1729,1734,3,228,114,0,1730,1731,5,4,0,0,1731,
        1733,3,228,114,0,1732,1730,1,0,0,0,1733,1736,1,0,0,0,1734,1732,1,
        0,0,0,1734,1735,1,0,0,0,1735,1738,1,0,0,0,1736,1734,1,0,0,0,1737,
        1727,1,0,0,0,1737,1738,1,0,0,0,1738,1749,1,0,0,0,1739,1740,5,93,
        0,0,1740,1741,5,31,0,0,1741,1746,3,228,114,0,1742,1743,5,4,0,0,1743,
        1745,3,228,114,0,1744,1742,1,0,0,0,1745,1748,1,0,0,0,1746,1744,1,
        0,0,0,1746,1747,1,0,0,0,1747,1750,1,0,0,0,1748,1746,1,0,0,0,1749,
        1739,1,0,0,0,1749,1750,1,0,0,0,1750,1761,1,0,0,0,1751,1752,5,277,
        0,0,1752,1753,5,31,0,0,1753,1758,3,96,48,0,1754,1755,5,4,0,0,1755,
        1757,3,96,48,0,1756,1754,1,0,0,0,1757,1760,1,0,0,0,1758,1756,1,0,
        0,0,1758,1759,1,0,0,0,1759,1762,1,0,0,0,1760,1758,1,0,0,0,1761,1751,
        1,0,0,0,1761,1762,1,0,0,0,1762,1764,1,0,0,0,1763,1765,3,306,153,
        0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,1765,1771,1,0,0,0,1766,1769,
        5,165,0,0,1767,1770,5,10,0,0,1768,1770,3,228,114,0,1769,1767,1,0,
        0,0,1769,1768,1,0,0,0,1770,1772,1,0,0,0,1771,1766,1,0,0,0,1771,1772,
        1,0,0,0,1772,1775,1,0,0,0,1773,1774,5,201,0,0,1774,1776,3,228,114,
        0,1775,1773,1,0,0,0,1775,1776,1,0,0,0,1776,91,1,0,0,0,1777,1778,
        6,46,-1,0,1778,1779,3,94,47,0,1779,1800,1,0,0,0,1780,1781,10,3,0,
        0,1781,1783,7,23,0,0,1782,1784,3,162,81,0,1783,1782,1,0,0,0,1783,
        1784,1,0,0,0,1784,1785,1,0,0,0,1785,1799,3,92,46,4,1786,1787,10,
        2,0,0,1787,1789,5,148,0,0,1788,1790,3,162,81,0,1789,1788,1,0,0,0,
        1789,1790,1,0,0,0,1790,1791,1,0,0,0,1791,1799,3,92,46,3,1792,1793,
        10,1,0,0,1793,1795,7,24,0,0,1794,1796,3,162,81,0,1795,1794,1,0,0,
        0,1795,1796,1,0,0,0,1796,1797,1,0,0,0,1797,1799,3,92,46,2,1798,1780,
        1,0,0,0,1798,1786,1,0,0,0,1798,1792,1,0,0,0,1799,1802,1,0,0,0,1800,
        1798,1,0,0,0,1800,1801,1,0,0,0,1801,93,1,0,0,0,1802,1800,1,0,0,0,
        1803,1828,3,100,50,0,1804,1806,3,128,64,0,1805,1807,3,98,49,0,1806,
        1805,1,0,0,0,1807,1808,1,0,0,0,1808,1806,1,0,0,0,1808,1809,1,0,0,
        0,1809,1828,1,0,0,0,1810,1811,5,292,0,0,1811,1828,3,76,38,0,1812,
        1813,5,332,0,0,1813,1818,3,228,114,0,1814,1815,5,4,0,0,1815,1817,
        3,228,114,0,1816,1814,1,0,0,0,1817,1820,1,0,0,0,1818,1816,1,0,0,
        0,1818,1819,1,0,0,0,1819,1821,1,0,0,0,1820,1818,1,0,0,0,1821,1822,
        3,200,100,0,1822,1828,1,0,0,0,1823,1824,5,2,0,0,1824,1825,3,24,12,
        0,1825,1826,5,3,0,0,1826,1828,1,0,0,0,1827,1803,1,0,0,0,1827,1804,
        1,0,0,0,1827,1810,1,0,0,0,1827,1812,1,0,0,0,1827,1823,1,0,0,0,1828,
        95,1,0,0,0,1829,1832,3,82,41,0,1830,1832,3,228,114,0,1831,1829,1,
        0,0,0,1831,1830,1,0,0,0,1832,1834,1,0,0,0,1833,1835,7,25,0,0,1834,
        1833,1,0,0,0,1834,1835,1,0,0,0,1835,1838,1,0,0,0,1836,1837,5,198,
        0,0,1837,1839,7,26,0,0,1838,1836,1,0,0,0,1838,1839,1,0,0,0,1839,
        97,1,0,0,0,1840,1842,3,102,51,0,1841,1843,3,120,60,0,1842,1841,1,
        0,0,0,1842,1843,1,0,0,0,1843,1844,1,0,0,0,1844,1845,3,90,45,0,1845,
        1868,1,0,0,0,1846,1850,3,104,52,0,1847,1849,3,160,80,0,1848,1847,
        1,0,0,0,1849,1852,1,0,0,0,1850,1848,1,0,0,0,1850,1851,1,0,0,0,1851,
        1854,1,0,0,0,1852,1850,1,0,0,0,1853,1855,3,120,60,0,1854,1853,1,
        0,0,0,1854,1855,1,0,0,0,1855,1857,1,0,0,0,1856,1858,3,132,66,0,1857,
        1856,1,0,0,0,1857,1858,1,0,0,0,1858,1860,1,0,0,0,1859,1861,3,122,
        61,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1863,1,0,0,0,1862,
        1864,3,306,153,0,1863,1862,1,0,0,0,1863,1864,1,0,0,0,1864,1865,1,
        0,0,0,1865,1866,3,90,45,0,1866,1868,1,0,0,0,1867,1840,1,0,0,0,1867,
        1846,1,0,0,0,1868,99,1,0,0,0,1869,1871,3,102,51,0,1870,1872,3,128,
        64,0,1871,1870,1,0,0,0,1871,1872,1,0,0,0,1872,1876,1,0,0,0,1873,
        1875,3,160,80,0,1874,1873,1,0,0,0,1875,1878,1,0,0,0,1876,1874,1,
        0,0,0,1876,1877,1,0,0,0,1877,1880,1,0,0,0,1878,1876,1,0,0,0,1879,
        1881,3,120,60,0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,1881,1883,1,
        0,0,0,1882,1884,3,132,66,0,1883,1882,1,0,0,0,1883,1884,1,0,0,0,1884,
        1886,1,0,0,0,1885,1887,3,122,61,0,1886,1885,1,0,0,0,1886,1887,1,
        0,0,0,1887,1889,1,0,0,0,1888,1890,3,306,153,0,1889,1888,1,0,0,0,
        1889,1890,1,0,0,0,1890,1914,1,0,0,0,1891,1893,3,104,52,0,1892,1894,
        3,128,64,0,1893,1892,1,0,0,0,1893,1894,1,0,0,0,1894,1898,1,0,0,0,
        1895,1897,3,160,80,0,1896,1895,1,0,0,0,1897,1900,1,0,0,0,1898,1896,
        1,0,0,0,1898,1899,1,0,0,0,1899,1902,1,0,0,0,1900,1898,1,0,0,0,1901,
        1903,3,120,60,0,1902,1901,1,0,0,0,1902,1903,1,0,0,0,1903,1905,1,
        0,0,0,1904,1906,3,132,66,0,1905,1904,1,0,0,0,1905,1906,1,0,0,0,1906,
        1908,1,0,0,0,1907,1909,3,122,61,0,1908,1907,1,0,0,0,1908,1909,1,
        0,0,0,1909,1911,1,0,0,0,1910,1912,3,306,153,0,1911,1910,1,0,0,0,
        1911,1912,1,0,0,0,1912,1914,1,0,0,0,1913,1869,1,0,0,0,1913,1891,
        1,0,0,0,1914,101,1,0,0,0,1915,1916,5,262,0,0,1916,1917,5,313,0,0,
        1917,1919,5,2,0,0,1918,1920,3,162,81,0,1919,1918,1,0,0,0,1919,1920,
        1,0,0,0,1920,1921,1,0,0,0,1921,1922,3,234,117,0,1922,1923,5,3,0,
        0,1923,1935,1,0,0,0,1924,1926,5,176,0,0,1925,1927,3,162,81,0,1926,
        1925,1,0,0,0,1926,1927,1,0,0,0,1927,1928,1,0,0,0,1928,1935,3,234,
        117,0,1929,1931,5,237,0,0,1930,1932,3,162,81,0,1931,1930,1,0,0,0,
        1931,1932,1,0,0,0,1932,1933,1,0,0,0,1933,1935,3,234,117,0,1934,1915,
        1,0,0,0,1934,1924,1,0,0,0,1934,1929,1,0,0,0,1935,1937,1,0,0,0,1936,
        1938,3,202,101,0,1937,1936,1,0,0,0,1937,1938,1,0,0,0,1938,1941,1,
        0,0,0,1939,1940,5,235,0,0,1940,1942,3,334,167,0,1941,1939,1,0,0,
        0,1941,1942,1,0,0,0,1942,1943,1,0,0,0,1943,1944,5,331,0,0,1944,1957,
        3,334,167,0,1945,1955,5,20,0,0,1946,1956,3,178,89,0,1947,1956,3,
        292,146,0,1948,1951,5,2,0,0,1949,1952,3,178,89,0,1950,1952,3,292,
        146,0,1951,1949,1,0,0,0,1951,1950,1,0,0,0,1952,1953,1,0,0,0,1953,
        1954,5,3,0,0,1954,1956,1,0,0,0,1955,1946,1,0,0,0,1955,1947,1,0,0,
        0,1955,1948,1,0,0,0,1956,1958,1,0,0,0,1957,1945,1,0,0,0,1957,1958,
        1,0,0,0,1958,1960,1,0,0,0,1959,1961,3,202,101,0,1960,1959,1,0,0,
        0,1960,1961,1,0,0,0,1961,1964,1,0,0,0,1962,1963,5,234,0,0,1963,1965,
        3,334,167,0,1964,1962,1,0,0,0,1964,1965,1,0,0,0,1965,103,1,0,0,0,
        1966,1970,5,262,0,0,1967,1969,3,124,62,0,1968,1967,1,0,0,0,1969,
        1972,1,0,0,0,1970,1968,1,0,0,0,1970,1971,1,0,0,0,1971,1974,1,0,0,
        0,1972,1970,1,0,0,0,1973,1975,3,162,81,0,1974,1973,1,0,0,0,1974,
        1975,1,0,0,0,1975,1976,1,0,0,0,1976,1977,3,218,109,0,1977,105,1,
        0,0,0,1978,1979,5,268,0,0,1979,1980,3,116,58,0,1980,107,1,0,0,0,
        1981,1982,5,342,0,0,1982,1985,5,177,0,0,1983,1984,5,14,0,0,1984,
        1986,3,236,118,0,1985,1983,1,0,0,0,1985,1986,1,0,0,0,1986,1987,1,
        0,0,0,1987,1995,5,299,0,0,1988,1996,5,84,0,0,1989,1990,5,328,0,0,
        1990,1993,5,268,0,0,1991,1994,5,362,0,0,1992,1994,3,116,58,0,1993,
        1991,1,0,0,0,1993,1992,1,0,0,0,1994,1996,1,0,0,0,1995,1988,1,0,0,
        0,1995,1989,1,0,0,0,1996,109,1,0,0,0,1997,1998,5,342,0,0,1998,1999,
        5,196,0,0,1999,2002,5,177,0,0,2000,2001,5,31,0,0,2001,2003,5,295,
        0,0,2002,2000,1,0,0,0,2002,2003,1,0,0,0,2003,2006,1,0,0,0,2004,2005,
        5,14,0,0,2005,2007,3,236,118,0,2006,2004,1,0,0,0,2006,2007,1,0,0,
        0,2007,2008,1,0,0,0,2008,2009,5,299,0,0,2009,2010,3,114,57,0,2010,
        111,1,0,0,0,2011,2012,5,342,0,0,2012,2013,5,196,0,0,2013,2014,5,
        177,0,0,2014,2015,5,31,0,0,2015,2018,5,279,0,0,2016,2017,5,14,0,
        0,2017,2019,3,236,118,0,2018,2016,1,0,0,0,2018,2019,1,0,0,0,2019,
        2020,1,0,0,0,2020,2025,5,299,0,0,2021,2026,5,84,0,0,2022,2023,5,
        328,0,0,2023,2024,5,268,0,0,2024,2026,3,116,58,0,2025,2021,1,0,0,
        0,2025,2022,1,0,0,0,2026,113,1,0,0,0,2027,2028,5,147,0,0,2028,2046,
        5,362,0,0,2029,2030,5,147,0,0,2030,2031,5,2,0,0,2031,2032,3,204,
        102,0,2032,2033,5,3,0,0,2033,2034,5,332,0,0,2034,2035,5,2,0,0,2035,
        2040,3,228,114,0,2036,2037,5,4,0,0,2037,2039,3,228,114,0,2038,2036,
        1,0,0,0,2039,2042,1,0,0,0,2040,2038,1,0,0,0,2040,2041,1,0,0,0,2041,
        2043,1,0,0,0,2042,2040,1,0,0,0,2043,2044,5,3,0,0,2044,2046,1,0,0,
        0,2045,2027,1,0,0,0,2045,2029,1,0,0,0,2046,115,1,0,0,0,2047,2052,
        3,118,59,0,2048,2049,5,4,0,0,2049,2051,3,118,59,0,2050,2048,1,0,
        0,0,2051,2054,1,0,0,0,2052,2050,1,0,0,0,2052,2053,1,0,0,0,2053,117,
        1,0,0,0,2054,2052,1,0,0,0,2055,2056,3,206,103,0,2056,2057,5,351,
        0,0,2057,2058,3,228,114,0,2058,119,1,0,0,0,2059,2060,5,343,0,0,2060,
        2061,3,236,118,0,2061,121,1,0,0,0,2062,2063,5,132,0,0,2063,2064,
        3,236,118,0,2064,123,1,0,0,0,2065,2066,5,373,0,0,2066,2073,3,126,
        63,0,2067,2069,5,4,0,0,2068,2067,1,0,0,0,2068,2069,1,0,0,0,2069,
        2070,1,0,0,0,2070,2072,3,126,63,0,2071,2068,1,0,0,0,2072,2075,1,
        0,0,0,2073,2071,1,0,0,0,2073,2074,1,0,0,0,2074,2076,1,0,0,0,2075,
        2073,1,0,0,0,2076,2077,5,374,0,0,2077,125,1,0,0,0,2078,2092,3,326,
        163,0,2079,2080,3,326,163,0,2080,2081,5,2,0,0,2081,2086,3,244,122,
        0,2082,2083,5,4,0,0,2083,2085,3,244,122,0,2084,2082,1,0,0,0,2085,
        2088,1,0,0,0,2086,2084,1,0,0,0,2086,2087,1,0,0,0,2087,2089,1,0,0,
        0,2088,2086,1,0,0,0,2089,2090,5,3,0,0,2090,2092,1,0,0,0,2091,2078,
        1,0,0,0,2091,2079,1,0,0,0,2092,127,1,0,0,0,2093,2094,5,123,0,0,2094,
        2099,3,164,82,0,2095,2096,5,4,0,0,2096,2098,3,164,82,0,2097,2095,
        1,0,0,0,2098,2101,1,0,0,0,2099,2097,1,0,0,0,2099,2100,1,0,0,0,2100,
        2105,1,0,0,0,2101,2099,1,0,0,0,2102,2104,3,160,80,0,2103,2102,1,
        0,0,0,2104,2107,1,0,0,0,2105,2103,1,0,0,0,2105,2106,1,0,0,0,2106,
        2109,1,0,0,0,2107,2105,1,0,0,0,2108,2110,3,140,70,0,2109,2108,1,
        0,0,0,2109,2110,1,0,0,0,2110,2112,1,0,0,0,2111,2113,3,146,73,0,2112,
        2111,1,0,0,0,2112,2113,1,0,0,0,2113,129,1,0,0,0,2114,2116,5,119,
        0,0,2115,2114,1,0,0,0,2115,2116,1,0,0,0,2116,2117,1,0,0,0,2117,2118,
        7,27,0,0,2118,2119,5,20,0,0,2119,2122,5,200,0,0,2120,2123,5,381,
        0,0,2121,2123,3,334,167,0,2122,2120,1,0,0,0,2122,2121,1,0,0,0,2123,
        2132,1,0,0,0,2124,2126,5,119,0,0,2125,2124,1,0,0,0,2125,2126,1,0,
        0,0,2126,2127,1,0,0,0,2127,2128,7,28,0,0,2128,2129,5,20,0,0,2129,
        2130,5,200,0,0,2130,2132,3,240,120,0,2131,2115,1,0,0,0,2131,2125,
        1,0,0,0,2132,131,1,0,0,0,2133,2134,5,130,0,0,2134,2135,5,31,0,0,
        2135,2140,3,134,67,0,2136,2137,5,4,0,0,2137,2139,3,134,67,0,2138,
        2136,1,0,0,0,2139,2142,1,0,0,0,2140,2138,1,0,0,0,2140,2141,1,0,0,
        0,2141,2173,1,0,0,0,2142,2140,1,0,0,0,2143,2144,5,130,0,0,2144,2145,
        5,31,0,0,2145,2150,3,228,114,0,2146,2147,5,4,0,0,2147,2149,3,228,
        114,0,2148,2146,1,0,0,0,2149,2152,1,0,0,0,2150,2148,1,0,0,0,2150,
        2151,1,0,0,0,2151,2170,1,0,0,0,2152,2150,1,0,0,0,2153,2154,5,345,
        0,0,2154,2171,5,255,0,0,2155,2156,5,345,0,0,2156,2171,5,61,0,0,2157,
        2158,5,131,0,0,2158,2159,5,270,0,0,2159,2160,5,2,0,0,2160,2165,3,
        138,69,0,2161,2162,5,4,0,0,2162,2164,3,138,69,0,2163,2161,1,0,0,
        0,2164,2167,1,0,0,0,2165,2163,1,0,0,0,2165,2166,1,0,0,0,2166,2168,
        1,0,0,0,2167,2165,1,0,0,0,2168,2169,5,3,0,0,2169,2171,1,0,0,0,2170,
        2153,1,0,0,0,2170,2155,1,0,0,0,2170,2157,1,0,0,0,2170,2171,1,0,0,
        0,2171,2173,1,0,0,0,2172,2133,1,0,0,0,2172,2143,1,0,0,0,2173,133,
        1,0,0,0,2174,2178,3,82,41,0,2175,2178,3,136,68,0,2176,2178,3,228,
        114,0,2177,2174,1,0,0,0,2177,2175,1,0,0,0,2177,2176,1,0,0,0,2178,
        135,1,0,0,0,2179,2180,7,29,0,0,2180,2181,5,2,0,0,2181,2186,3,138,
        69,0,2182,2183,5,4,0,0,2183,2185,3,138,69,0,2184,2182,1,0,0,0,2185,
        2188,1,0,0,0,2186,2184,1,0,0,0,2186,2187,1,0,0,0,2187,2189,1,0,0,
        0,2188,2186,1,0,0,0,2189,2190,5,3,0,0,2190,2211,1,0,0,0,2191,2192,
        5,131,0,0,2192,2193,5,270,0,0,2193,2196,5,2,0,0,2194,2197,3,136,
        68,0,2195,2197,3,138,69,0,2196,2194,1,0,0,0,2196,2195,1,0,0,0,2197,
        2205,1,0,0,0,2198,2201,5,4,0,0,2199,2202,3,136,68,0,2200,2202,3,
        138,69,0,2201,2199,1,0,0,0,2201,2200,1,0,0,0,2202,2204,1,0,0,0,2203,
        2198,1,0,0,0,2204,2207,1,0,0,0,2205,2203,1,0,0,0,2205,2206,1,0,0,
        0,2206,2208,1,0,0,0,2207,2205,1,0,0,0,2208,2209,5,3,0,0,2209,2211,
        1,0,0,0,2210,2179,1,0,0,0,2210,2191,1,0,0,0,2211,137,1,0,0,0,2212,
        2233,3,82,41,0,2213,2233,3,228,114,0,2214,2229,5,2,0,0,2215,2218,
        3,82,41,0,2216,2218,3,228,114,0,2217,2215,1,0,0,0,2217,2216,1,0,
        0,0,2218,2226,1,0,0,0,2219,2222,5,4,0,0,2220,2223,3,82,41,0,2221,
        2223,3,228,114,0,2222,2220,1,0,0,0,2222,2221,1,0,0,0,2223,2225,1,
        0,0,0,2224,2219,1,0,0,0,2225,2228,1,0,0,0,2226,2224,1,0,0,0,2226,
        2227,1,0,0,0,2227,2230,1,0,0,0,2228,2226,1,0,0,0,2229,2217,1,0,0,
        0,2229,2230,1,0,0,0,2230,2231,1,0,0,0,2231,2233,5,3,0,0,2232,2212,
        1,0,0,0,2232,2213,1,0,0,0,2232,2214,1,0,0,0,2233,139,1,0,0,0,2234,
        2235,5,222,0,0,2235,2236,5,2,0,0,2236,2237,3,218,109,0,2237,2238,
        5,119,0,0,2238,2239,3,142,71,0,2239,2240,5,140,0,0,2240,2241,5,2,
        0,0,2241,2246,3,144,72,0,2242,2243,5,4,0,0,2243,2245,3,144,72,0,
        2244,2242,1,0,0,0,2245,2248,1,0,0,0,2246,2244,1,0,0,0,2246,2247,
        1,0,0,0,2247,2249,1,0,0,0,2248,2246,1,0,0,0,2249,2250,5,3,0,0,2250,
        2251,5,3,0,0,2251,141,1,0,0,0,2252,2265,3,326,163,0,2253,2254,5,
        2,0,0,2254,2259,3,326,163,0,2255,2256,5,4,0,0,2256,2258,3,326,163,
        0,2257,2255,1,0,0,0,2258,2261,1,0,0,0,2259,2257,1,0,0,0,2259,2260,
        1,0,0,0,2260,2262,1,0,0,0,2261,2259,1,0,0,0,2262,2263,5,3,0,0,2263,
        2265,1,0,0,0,2264,2252,1,0,0,0,2264,2253,1,0,0,0,2265,143,1,0,0,
        0,2266,2271,3,228,114,0,2267,2269,5,20,0,0,2268,2267,1,0,0,0,2268,
        2269,1,0,0,0,2269,2270,1,0,0,0,2270,2272,3,326,163,0,2271,2268,1,
        0,0,0,2271,2272,1,0,0,0,2272,145,1,0,0,0,2273,2276,5,326,0,0,2274,
        2275,7,30,0,0,2275,2277,5,198,0,0,2276,2274,1,0,0,0,2276,2277,1,
        0,0,0,2277,2278,1,0,0,0,2278,2281,5,2,0,0,2279,2282,3,148,74,0,2280,
        2282,3,150,75,0,2281,2279,1,0,0,0,2281,2280,1,0,0,0,2282,2283,1,
        0,0,0,2283,2288,5,3,0,0,2284,2286,5,20,0,0,2285,2284,1,0,0,0,2285,
        2286,1,0,0,0,2286,2287,1,0,0,0,2287,2289,3,326,163,0,2288,2285,1,
        0,0,0,2288,2289,1,0,0,0,2289,147,1,0,0,0,2290,2291,3,326,163,0,2291,
        2292,5,119,0,0,2292,2293,3,326,163,0,2293,2294,5,140,0,0,2294,2295,
        5,2,0,0,2295,2300,3,154,77,0,2296,2297,5,4,0,0,2297,2299,3,154,77,
        0,2298,2296,1,0,0,0,2299,2302,1,0,0,0,2300,2298,1,0,0,0,2300,2301,
        1,0,0,0,2301,2303,1,0,0,0,2302,2300,1,0,0,0,2303,2304,5,3,0,0,2304,
        149,1,0,0,0,2305,2306,5,2,0,0,2306,2311,3,326,163,0,2307,2308,5,
        4,0,0,2308,2310,3,326,163,0,2309,2307,1,0,0,0,2310,2313,1,0,0,0,
        2311,2309,1,0,0,0,2311,2312,1,0,0,0,2312,2314,1,0,0,0,2313,2311,
        1,0,0,0,2314,2315,5,3,0,0,2315,2316,5,119,0,0,2316,2317,3,326,163,
        0,2317,2318,5,140,0,0,2318,2319,5,2,0,0,2319,2324,3,152,76,0,2320,
        2321,5,4,0,0,2321,2323,3,152,76,0,2322,2320,1,0,0,0,2323,2326,1,
        0,0,0,2324,2322,1,0,0,0,2324,2325,1,0,0,0,2325,2327,1,0,0,0,2326,
        2324,1,0,0,0,2327,2328,5,3,0,0,2328,151,1,0,0,0,2329,2330,5,2,0,
        0,2330,2335,3,206,103,0,2331,2332,5,4,0,0,2332,2334,3,206,103,0,
        2333,2331,1,0,0,0,2334,2337,1,0,0,0,2335,2333,1,0,0,0,2335,2336,
        1,0,0,0,2336,2338,1,0,0,0,2337,2335,1,0,0,0,2338,2343,5,3,0,0,2339,
        2341,5,20,0,0,2340,2339,1,0,0,0,2340,2341,1,0,0,0,2341,2342,1,0,
        0,0,2342,2344,3,326,163,0,2343,2340,1,0,0,0,2343,2344,1,0,0,0,2344,
        153,1,0,0,0,2345,2350,3,206,103,0,2346,2348,5,20,0,0,2347,2346,1,
        0,0,0,2347,2348,1,0,0,0,2348,2349,1,0,0,0,2349,2351,3,326,163,0,
        2350,2347,1,0,0,0,2350,2351,1,0,0,0,2351,155,1,0,0,0,2352,2353,5,
        137,0,0,2353,2354,5,196,0,0,2354,2355,5,105,0,0,2355,157,1,0,0,0,
        2356,2357,5,137,0,0,2357,2358,5,105,0,0,2358,159,1,0,0,0,2359,2360,
        5,158,0,0,2360,2362,5,337,0,0,2361,2363,5,210,0,0,2362,2361,1,0,
        0,0,2362,2363,1,0,0,0,2363,2364,1,0,0,0,2364,2365,3,80,40,0,2365,
        2374,5,2,0,0,2366,2371,3,228,114,0,2367,2368,5,4,0,0,2368,2370,3,
        228,114,0,2369,2367,1,0,0,0,2370,2373,1,0,0,0,2371,2369,1,0,0,0,
        2371,2372,1,0,0,0,2372,2375,1,0,0,0,2373,2371,1,0,0,0,2374,2366,
        1,0,0,0,2374,2375,1,0,0,0,2375,2376,1,0,0,0,2376,2377,5,3,0,0,2377,
        2389,3,200,100,0,2378,2380,5,20,0,0,2379,2378,1,0,0,0,2379,2380,
        1,0,0,0,2380,2381,1,0,0,0,2381,2386,3,326,163,0,2382,2383,5,4,0,
        0,2383,2385,3,326,163,0,2384,2382,1,0,0,0,2385,2388,1,0,0,0,2386,
        2384,1,0,0,0,2386,2387,1,0,0,0,2387,2390,1,0,0,0,2388,2386,1,0,0,
        0,2389,2379,1,0,0,0,2389,2390,1,0,0,0,2390,161,1,0,0,0,2391,2392,
        7,31,0,0,2392,163,1,0,0,0,2393,2407,3,76,38,0,2394,2396,5,158,0,
        0,2395,2394,1,0,0,0,2395,2396,1,0,0,0,2396,2397,1,0,0,0,2397,2403,
        3,188,94,0,2398,2402,3,166,83,0,2399,2402,3,140,70,0,2400,2402,3,
        146,73,0,2401,2398,1,0,0,0,2401,2399,1,0,0,0,2401,2400,1,0,0,0,2402,
        2405,1,0,0,0,2403,2401,1,0,0,0,2403,2404,1,0,0,0,2404,2407,1,0,0,
        0,2405,2403,1,0,0,0,2406,2393,1,0,0,0,2406,2395,1,0,0,0,2407,165,
        1,0,0,0,2408,2409,3,168,84,0,2409,2411,5,155,0,0,2410,2412,5,158,
        0,0,2411,2410,1,0,0,0,2411,2412,1,0,0,0,2412,2413,1,0,0,0,2413,2415,
        3,188,94,0,2414,2416,3,170,85,0,2415,2414,1,0,0,0,2415,2416,1,0,
        0,0,2416,2426,1,0,0,0,2417,2418,5,193,0,0,2418,2419,3,168,84,0,2419,
        2421,5,155,0,0,2420,2422,5,158,0,0,2421,2420,1,0,0,0,2421,2422,1,
        0,0,0,2422,2423,1,0,0,0,2423,2424,3,188,94,0,2424,2426,1,0,0,0,2425,
        2408,1,0,0,0,2425,2417,1,0,0,0,2426,167,1,0,0,0,2427,2429,5,144,
        0,0,2428,2427,1,0,0,0,2428,2429,1,0,0,0,2429,2444,1,0,0,0,2430,2444,
        5,60,0,0,2431,2433,5,161,0,0,2432,2434,5,210,0,0,2433,2432,1,0,0,
        0,2433,2434,1,0,0,0,2434,2444,1,0,0,0,2435,2437,5,161,0,0,2436,2435,
        1,0,0,0,2436,2437,1,0,0,0,2437,2438,1,0,0,0,2438,2444,7,32,0,0,2439,
        2441,7,33,0,0,2440,2442,5,210,0,0,2441,2440,1,0,0,0,2441,2442,1,
        0,0,0,2442,2444,1,0,0,0,2443,2428,1,0,0,0,2443,2430,1,0,0,0,2443,
        2431,1,0,0,0,2443,2436,1,0,0,0,2443,2439,1,0,0,0,2444,169,1,0,0,
        0,2445,2446,5,202,0,0,2446,2450,3,236,118,0,2447,2448,5,331,0,0,
        2448,2450,3,176,88,0,2449,2445,1,0,0,0,2449,2447,1,0,0,0,2450,171,
        1,0,0,0,2451,2452,5,294,0,0,2452,2454,5,2,0,0,2453,2455,3,174,87,
        0,2454,2453,1,0,0,0,2454,2455,1,0,0,0,2455,2456,1,0,0,0,2456,2461,
        5,3,0,0,2457,2458,5,242,0,0,2458,2459,5,2,0,0,2459,2460,5,381,0,
        0,2460,2462,5,3,0,0,2461,2457,1,0,0,0,2461,2462,1,0,0,0,2462,173,
        1,0,0,0,2463,2465,5,361,0,0,2464,2463,1,0,0,0,2464,2465,1,0,0,0,
        2465,2466,1,0,0,0,2466,2467,7,34,0,0,2467,2488,5,221,0,0,2468,2469,
        3,228,114,0,2469,2470,5,257,0,0,2470,2488,1,0,0,0,2471,2472,5,29,
        0,0,2472,2473,5,381,0,0,2473,2474,5,209,0,0,2474,2475,5,200,0,0,
        2475,2484,5,381,0,0,2476,2482,5,202,0,0,2477,2483,3,326,163,0,2478,
        2479,3,320,160,0,2479,2480,5,2,0,0,2480,2481,5,3,0,0,2481,2483,1,
        0,0,0,2482,2477,1,0,0,0,2482,2478,1,0,0,0,2483,2485,1,0,0,0,2484,
        2476,1,0,0,0,2484,2485,1,0,0,0,2485,2488,1,0,0,0,2486,2488,3,228,
        114,0,2487,2464,1,0,0,0,2487,2468,1,0,0,0,2487,2471,1,0,0,0,2487,
        2486,1,0,0,0,2488,175,1,0,0,0,2489,2490,5,2,0,0,2490,2491,3,178,
        89,0,2491,2492,5,3,0,0,2492,177,1,0,0,0,2493,2498,3,322,161,0,2494,
        2495,5,4,0,0,2495,2497,3,322,161,0,2496,2494,1,0,0,0,2497,2500,1,
        0,0,0,2498,2496,1,0,0,0,2498,2499,1,0,0,0,2499,179,1,0,0,0,2500,
        2498,1,0,0,0,2501,2502,5,2,0,0,2502,2507,3,182,91,0,2503,2504,5,
        4,0,0,2504,2506,3,182,91,0,2505,2503,1,0,0,0,2506,2509,1,0,0,0,2507,
        2505,1,0,0,0,2507,2508,1,0,0,0,2508,2510,1,0,0,0,2509,2507,1,0,0,
        0,2510,2511,5,3,0,0,2511,181,1,0,0,0,2512,2514,3,322,161,0,2513,
        2515,7,25,0,0,2514,2513,1,0,0,0,2514,2515,1,0,0,0,2515,183,1,0,0,
        0,2516,2517,5,2,0,0,2517,2522,3,186,93,0,2518,2519,5,4,0,0,2519,
        2521,3,186,93,0,2520,2518,1,0,0,0,2521,2524,1,0,0,0,2522,2520,1,
        0,0,0,2522,2523,1,0,0,0,2523,2525,1,0,0,0,2524,2522,1,0,0,0,2525,
        2526,5,3,0,0,2526,185,1,0,0,0,2527,2530,3,86,43,0,2528,2529,5,51,
        0,0,2529,2531,3,334,167,0,2530,2528,1,0,0,0,2530,2531,1,0,0,0,2531,
        187,1,0,0,0,2532,2536,3,76,38,0,2533,2536,3,80,40,0,2534,2536,3,
        88,44,0,2535,2532,1,0,0,0,2535,2533,1,0,0,0,2535,2534,1,0,0,0,2536,
        2538,1,0,0,0,2537,2539,3,130,65,0,2538,2537,1,0,0,0,2538,2539,1,
        0,0,0,2539,2541,1,0,0,0,2540,2542,3,172,86,0,2541,2540,1,0,0,0,2541,
        2542,1,0,0,0,2542,2543,1,0,0,0,2543,2544,3,200,100,0,2544,2588,1,
        0,0,0,2545,2546,5,2,0,0,2546,2547,3,24,12,0,2547,2549,5,3,0,0,2548,
        2550,3,172,86,0,2549,2548,1,0,0,0,2549,2550,1,0,0,0,2550,2551,1,
        0,0,0,2551,2552,3,200,100,0,2552,2588,1,0,0,0,2553,2554,5,2,0,0,
        2554,2555,3,164,82,0,2555,2557,5,3,0,0,2556,2558,3,172,86,0,2557,
        2556,1,0,0,0,2557,2558,1,0,0,0,2558,2559,1,0,0,0,2559,2560,3,200,
        100,0,2560,2588,1,0,0,0,2561,2562,5,332,0,0,2562,2567,3,228,114,
        0,2563,2564,5,4,0,0,2564,2566,3,228,114,0,2565,2563,1,0,0,0,2566,
        2569,1,0,0,0,2567,2565,1,0,0,0,2567,2568,1,0,0,0,2568,2570,1,0,0,
        0,2569,2567,1,0,0,0,2570,2571,3,200,100,0,2571,2588,1,0,0,0,2572,
        2573,3,316,158,0,2573,2582,5,2,0,0,2574,2579,3,198,99,0,2575,2576,
        5,4,0,0,2576,2578,3,198,99,0,2577,2575,1,0,0,0,2578,2581,1,0,0,0,
        2579,2577,1,0,0,0,2579,2580,1,0,0,0,2580,2583,1,0,0,0,2581,2579,
        1,0,0,0,2582,2574,1,0,0,0,2582,2583,1,0,0,0,2583,2584,1,0,0,0,2584,
        2585,5,3,0,0,2585,2586,3,200,100,0,2586,2588,1,0,0,0,2587,2535,1,
        0,0,0,2587,2545,1,0,0,0,2587,2553,1,0,0,0,2587,2561,1,0,0,0,2587,
        2572,1,0,0,0,2588,189,1,0,0,0,2589,2590,5,292,0,0,2590,2592,3,76,
        38,0,2591,2593,3,192,96,0,2592,2591,1,0,0,0,2592,2593,1,0,0,0,2593,
        2609,1,0,0,0,2594,2595,5,292,0,0,2595,2596,5,2,0,0,2596,2597,3,76,
        38,0,2597,2599,5,3,0,0,2598,2600,3,192,96,0,2599,2598,1,0,0,0,2599,
        2600,1,0,0,0,2600,2609,1,0,0,0,2601,2602,5,292,0,0,2602,2603,5,2,
        0,0,2603,2604,3,24,12,0,2604,2606,5,3,0,0,2605,2607,3,192,96,0,2606,
        2605,1,0,0,0,2606,2607,1,0,0,0,2607,2609,1,0,0,0,2608,2589,1,0,0,
        0,2608,2594,1,0,0,0,2608,2601,1,0,0,0,2609,191,1,0,0,0,2610,2611,
        5,345,0,0,2611,2612,5,273,0,0,2612,2630,5,216,0,0,2613,2614,7,35,
        0,0,2614,2627,5,31,0,0,2615,2616,5,2,0,0,2616,2621,3,228,114,0,2617,
        2618,5,4,0,0,2618,2620,3,228,114,0,2619,2617,1,0,0,0,2620,2623,1,
        0,0,0,2621,2619,1,0,0,0,2621,2622,1,0,0,0,2622,2624,1,0,0,0,2623,
        2621,1,0,0,0,2624,2625,5,3,0,0,2625,2628,1,0,0,0,2626,2628,3,228,
        114,0,2627,2615,1,0,0,0,2627,2626,1,0,0,0,2628,2630,1,0,0,0,2629,
        2610,1,0,0,0,2629,2613,1,0,0,0,2630,2647,1,0,0,0,2631,2632,7,36,
        0,0,2632,2645,5,31,0,0,2633,2634,5,2,0,0,2634,2639,3,96,48,0,2635,
        2636,5,4,0,0,2636,2638,3,96,48,0,2637,2635,1,0,0,0,2638,2641,1,0,
        0,0,2639,2637,1,0,0,0,2639,2640,1,0,0,0,2640,2642,1,0,0,0,2641,2639,
        1,0,0,0,2642,2643,5,3,0,0,2643,2646,1,0,0,0,2644,2646,3,96,48,0,
        2645,2633,1,0,0,0,2645,2644,1,0,0,0,2646,2648,1,0,0,0,2647,2631,
        1,0,0,0,2647,2648,1,0,0,0,2648,193,1,0,0,0,2649,2650,3,326,163,0,
        2650,2651,5,372,0,0,2651,2652,3,190,95,0,2652,195,1,0,0,0,2653,2656,
        3,190,95,0,2654,2656,3,194,97,0,2655,2653,1,0,0,0,2655,2654,1,0,
        0,0,2656,197,1,0,0,0,2657,2660,3,196,98,0,2658,2660,3,232,116,0,
        2659,2657,1,0,0,0,2659,2658,1,0,0,0,2660,199,1,0,0,0,2661,2663,5,
        20,0,0,2662,2661,1,0,0,0,2662,2663,1,0,0,0,2663,2664,1,0,0,0,2664,
        2666,3,328,164,0,2665,2667,3,176,88,0,2666,2665,1,0,0,0,2666,2667,
        1,0,0,0,2667,2669,1,0,0,0,2668,2662,1,0,0,0,2668,2669,1,0,0,0,2669,
        201,1,0,0,0,2670,2671,5,256,0,0,2671,2672,5,121,0,0,2672,2673,5,
        265,0,0,2673,2677,3,334,167,0,2674,2675,5,345,0,0,2675,2676,5,266,
        0,0,2676,2678,3,48,24,0,2677,2674,1,0,0,0,2677,2678,1,0,0,0,2678,
        2720,1,0,0,0,2679,2680,5,256,0,0,2680,2681,5,121,0,0,2681,2691,5,
        85,0,0,2682,2683,5,113,0,0,2683,2684,5,298,0,0,2684,2685,5,31,0,
        0,2685,2689,3,334,167,0,2686,2687,5,101,0,0,2687,2688,5,31,0,0,2688,
        2690,3,334,167,0,2689,2686,1,0,0,0,2689,2690,1,0,0,0,2690,2692,1,
        0,0,0,2691,2682,1,0,0,0,2691,2692,1,0,0,0,2692,2698,1,0,0,0,2693,
        2694,5,48,0,0,2694,2695,5,154,0,0,2695,2696,5,298,0,0,2696,2697,
        5,31,0,0,2697,2699,3,334,167,0,2698,2693,1,0,0,0,2698,2699,1,0,0,
        0,2699,2705,1,0,0,0,2700,2701,5,176,0,0,2701,2702,5,156,0,0,2702,
        2703,5,298,0,0,2703,2704,5,31,0,0,2704,2706,3,334,167,0,2705,2700,
        1,0,0,0,2705,2706,1,0,0,0,2706,2711,1,0,0,0,2707,2708,5,166,0,0,
        2708,2709,5,298,0,0,2709,2710,5,31,0,0,2710,2712,3,334,167,0,2711,
        2707,1,0,0,0,2711,2712,1,0,0,0,2712,2717,1,0,0,0,2713,2714,5,197,
        0,0,2714,2715,5,83,0,0,2715,2716,5,20,0,0,2716,2718,3,334,167,0,
        2717,2713,1,0,0,0,2717,2718,1,0,0,0,2718,2720,1,0,0,0,2719,2670,
        1,0,0,0,2719,2679,1,0,0,0,2720,203,1,0,0,0,2721,2726,3,206,103,0,
        2722,2723,5,4,0,0,2723,2725,3,206,103,0,2724,2722,1,0,0,0,2725,2728,
        1,0,0,0,2726,2724,1,0,0,0,2726,2727,1,0,0,0,2727,205,1,0,0,0,2728,
        2726,1,0,0,0,2729,2734,3,322,161,0,2730,2731,5,5,0,0,2731,2733,3,
        322,161,0,2732,2730,1,0,0,0,2733,2736,1,0,0,0,2734,2732,1,0,0,0,
        2734,2735,1,0,0,0,2735,207,1,0,0,0,2736,2734,1,0,0,0,2737,2742,3,
        210,105,0,2738,2739,5,4,0,0,2739,2741,3,210,105,0,2740,2738,1,0,
        0,0,2741,2744,1,0,0,0,2742,2740,1,0,0,0,2742,2743,1,0,0,0,2743,209,
        1,0,0,0,2744,2742,1,0,0,0,2745,2748,3,206,103,0,2746,2747,5,206,
        0,0,2747,2749,3,48,24,0,2748,2746,1,0,0,0,2748,2749,1,0,0,0,2749,
        211,1,0,0,0,2750,2751,3,322,161,0,2751,2752,5,5,0,0,2752,2754,1,
        0,0,0,2753,2750,1,0,0,0,2753,2754,1,0,0,0,2754,2755,1,0,0,0,2755,
        2756,3,322,161,0,2756,213,1,0,0,0,2757,2758,3,322,161,0,2758,2759,
        5,5,0,0,2759,2761,1,0,0,0,2760,2757,1,0,0,0,2760,2761,1,0,0,0,2761,
        2762,1,0,0,0,2762,2763,3,322,161,0,2763,215,1,0,0,0,2764,2767,3,
        82,41,0,2765,2767,3,228,114,0,2766,2764,1,0,0,0,2766,2765,1,0,0,
        0,2767,2775,1,0,0,0,2768,2770,5,20,0,0,2769,2768,1,0,0,0,2769,2770,
        1,0,0,0,2770,2773,1,0,0,0,2771,2774,3,322,161,0,2772,2774,3,176,
        88,0,2773,2771,1,0,0,0,2773,2772,1,0,0,0,2774,2776,1,0,0,0,2775,
        2769,1,0,0,0,2775,2776,1,0,0,0,2776,217,1,0,0,0,2777,2782,3,216,
        108,0,2778,2779,5,4,0,0,2779,2781,3,216,108,0,2780,2778,1,0,0,0,
        2781,2784,1,0,0,0,2782,2780,1,0,0,0,2782,2783,1,0,0,0,2783,219,1,
        0,0,0,2784,2782,1,0,0,0,2785,2786,5,2,0,0,2786,2791,3,222,111,0,
        2787,2788,5,4,0,0,2788,2790,3,222,111,0,2789,2787,1,0,0,0,2790,2793,
        1,0,0,0,2791,2789,1,0,0,0,2791,2792,1,0,0,0,2792,2794,1,0,0,0,2793,
        2791,1,0,0,0,2794,2795,5,3,0,0,2795,221,1,0,0,0,2796,2799,3,224,
        112,0,2797,2799,3,294,147,0,2798,2796,1,0,0,0,2798,2797,1,0,0,0,
        2799,223,1,0,0,0,2800,2814,3,320,160,0,2801,2802,3,326,163,0,2802,
        2803,5,2,0,0,2803,2808,3,226,113,0,2804,2805,5,4,0,0,2805,2807,3,
        226,113,0,2806,2804,1,0,0,0,2807,2810,1,0,0,0,2808,2806,1,0,0,0,
        2808,2809,1,0,0,0,2809,2811,1,0,0,0,2810,2808,1,0,0,0,2811,2812,
        5,3,0,0,2812,2814,1,0,0,0,2813,2800,1,0,0,0,2813,2801,1,0,0,0,2814,
        225,1,0,0,0,2815,2818,3,320,160,0,2816,2818,3,248,124,0,2817,2815,
        1,0,0,0,2817,2816,1,0,0,0,2818,227,1,0,0,0,2819,2820,3,236,118,0,
        2820,229,1,0,0,0,2821,2822,3,326,163,0,2822,2823,5,372,0,0,2823,
        2824,3,228,114,0,2824,231,1,0,0,0,2825,2828,3,228,114,0,2826,2828,
        3,230,115,0,2827,2825,1,0,0,0,2827,2826,1,0,0,0,2828,233,1,0,0,0,
        2829,2834,3,228,114,0,2830,2831,5,4,0,0,2831,2833,3,228,114,0,2832,
        2830,1,0,0,0,2833,2836,1,0,0,0,2834,2832,1,0,0,0,2834,2835,1,0,0,
        0,2835,235,1,0,0,0,2836,2834,1,0,0,0,2837,2838,6,118,-1,0,2838,2839,
        7,37,0,0,2839,2850,3,236,118,5,2840,2841,5,105,0,0,2841,2842,5,2,
        0,0,2842,2843,3,24,12,0,2843,2844,5,3,0,0,2844,2850,1,0,0,0,2845,
        2847,3,240,120,0,2846,2848,3,238,119,0,2847,2846,1,0,0,0,2847,2848,
        1,0,0,0,2848,2850,1,0,0,0,2849,2837,1,0,0,0,2849,2840,1,0,0,0,2849,
        2845,1,0,0,0,2850,2859,1,0,0,0,2851,2852,10,2,0,0,2852,2853,5,14,
        0,0,2853,2858,3,236,118,3,2854,2855,10,1,0,0,2855,2856,5,207,0,0,
        2856,2858,3,236,118,2,2857,2851,1,0,0,0,2857,2854,1,0,0,0,2858,2861,
        1,0,0,0,2859,2857,1,0,0,0,2859,2860,1,0,0,0,2860,237,1,0,0,0,2861,
        2859,1,0,0,0,2862,2864,5,196,0,0,2863,2862,1,0,0,0,2863,2864,1,0,
        0,0,2864,2865,1,0,0,0,2865,2866,5,24,0,0,2866,2867,3,240,120,0,2867,
        2868,5,14,0,0,2868,2869,3,240,120,0,2869,2945,1,0,0,0,2870,2872,
        5,196,0,0,2871,2870,1,0,0,0,2871,2872,1,0,0,0,2872,2873,1,0,0,0,
        2873,2874,5,140,0,0,2874,2875,5,2,0,0,2875,2880,3,228,114,0,2876,
        2877,5,4,0,0,2877,2879,3,228,114,0,2878,2876,1,0,0,0,2879,2882,1,
        0,0,0,2880,2878,1,0,0,0,2880,2881,1,0,0,0,2881,2883,1,0,0,0,2882,
        2880,1,0,0,0,2883,2884,5,3,0,0,2884,2945,1,0,0,0,2885,2887,5,196,
        0,0,2886,2885,1,0,0,0,2886,2887,1,0,0,0,2887,2888,1,0,0,0,2888,2889,
        5,140,0,0,2889,2890,5,2,0,0,2890,2891,3,24,12,0,2891,2892,5,3,0,
        0,2892,2945,1,0,0,0,2893,2895,5,196,0,0,2894,2893,1,0,0,0,2894,2895,
        1,0,0,0,2895,2896,1,0,0,0,2896,2897,7,38,0,0,2897,2945,3,240,120,
        0,2898,2900,5,196,0,0,2899,2898,1,0,0,0,2899,2900,1,0,0,0,2900,2901,
        1,0,0,0,2901,2902,7,39,0,0,2902,2916,7,40,0,0,2903,2904,5,2,0,0,
        2904,2917,5,3,0,0,2905,2906,5,2,0,0,2906,2911,3,228,114,0,2907,2908,
        5,4,0,0,2908,2910,3,228,114,0,2909,2907,1,0,0,0,2910,2913,1,0,0,
        0,2911,2909,1,0,0,0,2911,2912,1,0,0,0,2912,2914,1,0,0,0,2913,2911,
        1,0,0,0,2914,2915,5,3,0,0,2915,2917,1,0,0,0,2916,2903,1,0,0,0,2916,
        2905,1,0,0,0,2917,2945,1,0,0,0,2918,2920,5,196,0,0,2919,2918,1,0,
        0,0,2919,2920,1,0,0,0,2920,2921,1,0,0,0,2921,2922,7,39,0,0,2922,
        2925,3,240,120,0,2923,2924,5,100,0,0,2924,2926,3,334,167,0,2925,
        2923,1,0,0,0,2925,2926,1,0,0,0,2926,2945,1,0,0,0,2927,2929,5,153,
        0,0,2928,2930,5,196,0,0,2929,2928,1,0,0,0,2929,2930,1,0,0,0,2930,
        2931,1,0,0,0,2931,2945,5,197,0,0,2932,2934,5,153,0,0,2933,2935,5,
        196,0,0,2934,2933,1,0,0,0,2934,2935,1,0,0,0,2935,2936,1,0,0,0,2936,
        2945,7,41,0,0,2937,2939,5,153,0,0,2938,2940,5,196,0,0,2939,2938,
        1,0,0,0,2939,2940,1,0,0,0,2940,2941,1,0,0,0,2941,2942,5,92,0,0,2942,
        2943,5,123,0,0,2943,2945,3,240,120,0,2944,2863,1,0,0,0,2944,2871,
        1,0,0,0,2944,2886,1,0,0,0,2944,2894,1,0,0,0,2944,2899,1,0,0,0,2944,
        2919,1,0,0,0,2944,2927,1,0,0,0,2944,2932,1,0,0,0,2944,2937,1,0,0,
        0,2945,239,1,0,0,0,2946,2947,6,120,-1,0,2947,2951,3,244,122,0,2948,
        2949,7,42,0,0,2949,2951,3,240,120,7,2950,2946,1,0,0,0,2950,2948,
        1,0,0,0,2951,2973,1,0,0,0,2952,2953,10,6,0,0,2953,2954,7,43,0,0,
        2954,2972,3,240,120,7,2955,2956,10,5,0,0,2956,2957,7,44,0,0,2957,
        2972,3,240,120,6,2958,2959,10,4,0,0,2959,2960,5,366,0,0,2960,2972,
        3,240,120,5,2961,2962,10,3,0,0,2962,2963,5,369,0,0,2963,2972,3,240,
        120,4,2964,2965,10,2,0,0,2965,2966,5,367,0,0,2966,2972,3,240,120,
        3,2967,2968,10,1,0,0,2968,2969,3,250,125,0,2969,2970,3,240,120,2,
        2970,2972,1,0,0,0,2971,2952,1,0,0,0,2971,2955,1,0,0,0,2971,2958,
        1,0,0,0,2971,2961,1,0,0,0,2971,2964,1,0,0,0,2971,2967,1,0,0,0,2972,
        2975,1,0,0,0,2973,2971,1,0,0,0,2973,2974,1,0,0,0,2974,241,1,0,0,
        0,2975,2973,1,0,0,0,2976,2977,7,45,0,0,2977,243,1,0,0,0,2978,2979,
        6,122,-1,0,2979,3228,7,46,0,0,2980,2981,7,47,0,0,2981,2984,5,2,0,
        0,2982,2985,3,242,121,0,2983,2985,3,334,167,0,2984,2982,1,0,0,0,
        2984,2983,1,0,0,0,2985,2986,1,0,0,0,2986,2987,5,4,0,0,2987,2988,
        3,240,120,0,2988,2989,5,4,0,0,2989,2990,3,240,120,0,2990,2991,5,
        3,0,0,2991,3228,1,0,0,0,2992,2993,7,48,0,0,2993,2996,5,2,0,0,2994,
        2997,3,242,121,0,2995,2997,3,334,167,0,2996,2994,1,0,0,0,2996,2995,
        1,0,0,0,2997,2998,1,0,0,0,2998,2999,5,4,0,0,2999,3000,3,240,120,
        0,3000,3001,5,4,0,0,3001,3002,3,240,120,0,3002,3003,5,3,0,0,3003,
        3228,1,0,0,0,3004,3006,5,35,0,0,3005,3007,3,304,152,0,3006,3005,
        1,0,0,0,3007,3008,1,0,0,0,3008,3006,1,0,0,0,3008,3009,1,0,0,0,3009,
        3012,1,0,0,0,3010,3011,5,97,0,0,3011,3013,3,228,114,0,3012,3010,
        1,0,0,0,3012,3013,1,0,0,0,3013,3014,1,0,0,0,3014,3015,5,99,0,0,3015,
        3228,1,0,0,0,3016,3017,5,35,0,0,3017,3019,3,228,114,0,3018,3020,
        3,304,152,0,3019,3018,1,0,0,0,3020,3021,1,0,0,0,3021,3019,1,0,0,
        0,3021,3022,1,0,0,0,3022,3025,1,0,0,0,3023,3024,5,97,0,0,3024,3026,
        3,228,114,0,3025,3023,1,0,0,0,3025,3026,1,0,0,0,3026,3027,1,0,0,
        0,3027,3028,5,99,0,0,3028,3228,1,0,0,0,3029,3030,7,49,0,0,3030,3031,
        5,2,0,0,3031,3032,3,228,114,0,3032,3033,5,20,0,0,3033,3034,3,278,
        139,0,3034,3035,5,3,0,0,3035,3228,1,0,0,0,3036,3037,5,285,0,0,3037,
        3046,5,2,0,0,3038,3043,3,216,108,0,3039,3040,5,4,0,0,3040,3042,3,
        216,108,0,3041,3039,1,0,0,0,3042,3045,1,0,0,0,3043,3041,1,0,0,0,
        3043,3044,1,0,0,0,3044,3047,1,0,0,0,3045,3043,1,0,0,0,3046,3038,
        1,0,0,0,3046,3047,1,0,0,0,3047,3048,1,0,0,0,3048,3228,5,3,0,0,3049,
        3050,5,116,0,0,3050,3051,5,2,0,0,3051,3054,3,228,114,0,3052,3053,
        5,138,0,0,3053,3055,5,198,0,0,3054,3052,1,0,0,0,3054,3055,1,0,0,
        0,3055,3056,1,0,0,0,3056,3057,5,3,0,0,3057,3228,1,0,0,0,3058,3059,
        5,17,0,0,3059,3060,5,2,0,0,3060,3063,3,228,114,0,3061,3062,5,138,
        0,0,3062,3064,5,198,0,0,3063,3061,1,0,0,0,3063,3064,1,0,0,0,3064,
        3065,1,0,0,0,3065,3066,5,3,0,0,3066,3228,1,0,0,0,3067,3068,5,157,
        0,0,3068,3069,5,2,0,0,3069,3072,3,228,114,0,3070,3071,5,138,0,0,
        3071,3073,5,198,0,0,3072,3070,1,0,0,0,3072,3073,1,0,0,0,3073,3074,
        1,0,0,0,3074,3075,5,3,0,0,3075,3228,1,0,0,0,3076,3077,5,224,0,0,
        3077,3078,5,2,0,0,3078,3079,3,240,120,0,3079,3080,5,140,0,0,3080,
        3081,3,240,120,0,3081,3082,5,3,0,0,3082,3228,1,0,0,0,3083,3228,3,
        248,124,0,3084,3228,5,362,0,0,3085,3086,3,320,160,0,3086,3087,5,
        5,0,0,3087,3088,5,362,0,0,3088,3228,1,0,0,0,3089,3090,5,2,0,0,3090,
        3093,3,216,108,0,3091,3092,5,4,0,0,3092,3094,3,216,108,0,3093,3091,
        1,0,0,0,3094,3095,1,0,0,0,3095,3093,1,0,0,0,3095,3096,1,0,0,0,3096,
        3097,1,0,0,0,3097,3098,5,3,0,0,3098,3228,1,0,0,0,3099,3100,5,2,0,
        0,3100,3101,3,24,12,0,3101,3102,5,3,0,0,3102,3228,1,0,0,0,3103,3104,
        5,136,0,0,3104,3105,5,2,0,0,3105,3106,3,228,114,0,3106,3107,5,3,
        0,0,3107,3228,1,0,0,0,3108,3109,3,316,158,0,3109,3121,5,2,0,0,3110,
        3112,3,162,81,0,3111,3110,1,0,0,0,3111,3112,1,0,0,0,3112,3113,1,
        0,0,0,3113,3118,3,232,116,0,3114,3115,5,4,0,0,3115,3117,3,232,116,
        0,3116,3114,1,0,0,0,3117,3120,1,0,0,0,3118,3116,1,0,0,0,3118,3119,
        1,0,0,0,3119,3122,1,0,0,0,3120,3118,1,0,0,0,3121,3111,1,0,0,0,3121,
        3122,1,0,0,0,3122,3123,1,0,0,0,3123,3130,5,3,0,0,3124,3125,5,114,
        0,0,3125,3126,5,2,0,0,3126,3127,5,343,0,0,3127,3128,3,236,118,0,
        3128,3129,5,3,0,0,3129,3131,1,0,0,0,3130,3124,1,0,0,0,3130,3131,
        1,0,0,0,3131,3134,1,0,0,0,3132,3133,7,50,0,0,3133,3135,5,198,0,0,
        3134,3132,1,0,0,0,3134,3135,1,0,0,0,3135,3138,1,0,0,0,3136,3137,
        5,212,0,0,3137,3139,3,308,154,0,3138,3136,1,0,0,0,3138,3139,1,0,
        0,0,3139,3228,1,0,0,0,3140,3141,3,326,163,0,3141,3142,5,371,0,0,
        3142,3143,3,228,114,0,3143,3228,1,0,0,0,3144,3145,5,2,0,0,3145,3148,
        3,326,163,0,3146,3147,5,4,0,0,3147,3149,3,326,163,0,3148,3146,1,
        0,0,0,3149,3150,1,0,0,0,3150,3148,1,0,0,0,3150,3151,1,0,0,0,3151,
        3152,1,0,0,0,3152,3153,5,3,0,0,3153,3154,5,371,0,0,3154,3155,3,228,
        114,0,3155,3228,1,0,0,0,3156,3228,3,326,163,0,3157,3158,5,2,0,0,
        3158,3159,3,228,114,0,3159,3160,5,3,0,0,3160,3228,1,0,0,0,3161,3162,
        5,110,0,0,3162,3163,5,2,0,0,3163,3164,3,326,163,0,3164,3165,5,123,
        0,0,3165,3166,3,240,120,0,3166,3167,5,3,0,0,3167,3228,1,0,0,0,3168,
        3169,7,51,0,0,3169,3170,5,2,0,0,3170,3171,3,240,120,0,3171,3172,
        7,52,0,0,3172,3175,3,240,120,0,3173,3174,7,53,0,0,3174,3176,3,240,
        120,0,3175,3173,1,0,0,0,3175,3176,1,0,0,0,3176,3177,1,0,0,0,3177,
        3178,5,3,0,0,3178,3228,1,0,0,0,3179,3180,5,314,0,0,3180,3182,5,2,
        0,0,3181,3183,7,54,0,0,3182,3181,1,0,0,0,3182,3183,1,0,0,0,3183,
        3185,1,0,0,0,3184,3186,3,240,120,0,3185,3184,1,0,0,0,3185,3186,1,
        0,0,0,3186,3187,1,0,0,0,3187,3188,5,123,0,0,3188,3189,3,240,120,
        0,3189,3190,5,3,0,0,3190,3228,1,0,0,0,3191,3192,5,214,0,0,3192,3193,
        5,2,0,0,3193,3194,3,240,120,0,3194,3195,5,223,0,0,3195,3196,3,240,
        120,0,3196,3197,5,123,0,0,3197,3200,3,240,120,0,3198,3199,5,119,
        0,0,3199,3201,3,240,120,0,3200,3198,1,0,0,0,3200,3201,1,0,0,0,3201,
        3202,1,0,0,0,3202,3203,5,3,0,0,3203,3228,1,0,0,0,3204,3205,7,55,
        0,0,3205,3206,5,2,0,0,3206,3207,3,240,120,0,3207,3208,5,3,0,0,3208,
        3209,5,346,0,0,3209,3210,5,130,0,0,3210,3211,5,2,0,0,3211,3212,5,
        208,0,0,3212,3213,5,31,0,0,3213,3214,3,96,48,0,3214,3221,5,3,0,0,
        3215,3216,5,114,0,0,3216,3217,5,2,0,0,3217,3218,5,343,0,0,3218,3219,
        3,236,118,0,3219,3220,5,3,0,0,3220,3222,1,0,0,0,3221,3215,1,0,0,
        0,3221,3222,1,0,0,0,3222,3225,1,0,0,0,3223,3224,5,212,0,0,3224,3226,
        3,308,154,0,3225,3223,1,0,0,0,3225,3226,1,0,0,0,3226,3228,1,0,0,
        0,3227,2978,1,0,0,0,3227,2980,1,0,0,0,3227,2992,1,0,0,0,3227,3004,
        1,0,0,0,3227,3016,1,0,0,0,3227,3029,1,0,0,0,3227,3036,1,0,0,0,3227,
        3049,1,0,0,0,3227,3058,1,0,0,0,3227,3067,1,0,0,0,3227,3076,1,0,0,
        0,3227,3083,1,0,0,0,3227,3084,1,0,0,0,3227,3085,1,0,0,0,3227,3089,
        1,0,0,0,3227,3099,1,0,0,0,3227,3103,1,0,0,0,3227,3108,1,0,0,0,3227,
        3140,1,0,0,0,3227,3144,1,0,0,0,3227,3156,1,0,0,0,3227,3157,1,0,0,
        0,3227,3161,1,0,0,0,3227,3168,1,0,0,0,3227,3179,1,0,0,0,3227,3191,
        1,0,0,0,3227,3204,1,0,0,0,3228,3239,1,0,0,0,3229,3230,10,9,0,0,3230,
        3231,5,6,0,0,3231,3232,3,240,120,0,3232,3233,5,7,0,0,3233,3238,1,
        0,0,0,3234,3235,10,7,0,0,3235,3236,5,5,0,0,3236,3238,3,326,163,0,
        3237,3229,1,0,0,0,3237,3234,1,0,0,0,3238,3241,1,0,0,0,3239,3237,
        1,0,0,0,3239,3240,1,0,0,0,3240,245,1,0,0,0,3241,3239,1,0,0,0,3242,
        3250,5,71,0,0,3243,3250,5,302,0,0,3244,3250,5,303,0,0,3245,3250,
        5,304,0,0,3246,3250,5,149,0,0,3247,3250,5,133,0,0,3248,3250,3,326,
        163,0,3249,3242,1,0,0,0,3249,3243,1,0,0,0,3249,3244,1,0,0,0,3249,
        3245,1,0,0,0,3249,3246,1,0,0,0,3249,3247,1,0,0,0,3249,3248,1,0,0,
        0,3250,247,1,0,0,0,3251,3267,5,197,0,0,3252,3267,5,375,0,0,3253,
        3254,5,370,0,0,3254,3267,3,326,163,0,3255,3267,3,258,129,0,3256,
        3257,3,246,123,0,3257,3258,3,334,167,0,3258,3267,1,0,0,0,3259,3267,
        3,330,165,0,3260,3267,3,256,128,0,3261,3263,3,334,167,0,3262,3261,
        1,0,0,0,3263,3264,1,0,0,0,3264,3262,1,0,0,0,3264,3265,1,0,0,0,3265,
        3267,1,0,0,0,3266,3251,1,0,0,0,3266,3252,1,0,0,0,3266,3253,1,0,0,
        0,3266,3255,1,0,0,0,3266,3256,1,0,0,0,3266,3259,1,0,0,0,3266,3260,
        1,0,0,0,3266,3262,1,0,0,0,3267,249,1,0,0,0,3268,3269,7,56,0,0,3269,
        251,1,0,0,0,3270,3271,7,57,0,0,3271,253,1,0,0,0,3272,3273,7,58,0,
        0,3273,255,1,0,0,0,3274,3275,7,59,0,0,3275,257,1,0,0,0,3276,3279,
        5,149,0,0,3277,3280,3,260,130,0,3278,3280,3,262,131,0,3279,3277,
        1,0,0,0,3279,3278,1,0,0,0,3280,259,1,0,0,0,3281,3283,3,264,132,0,
        3282,3284,3,266,133,0,3283,3282,1,0,0,0,3283,3284,1,0,0,0,3284,261,
        1,0,0,0,3285,3288,3,266,133,0,3286,3289,3,264,132,0,3287,3289,3,
        266,133,0,3288,3286,1,0,0,0,3288,3287,1,0,0,0,3288,3289,1,0,0,0,
        3289,263,1,0,0,0,3290,3291,3,268,134,0,3291,3292,3,270,135,0,3292,
        3294,1,0,0,0,3293,3290,1,0,0,0,3294,3295,1,0,0,0,3295,3293,1,0,0,
        0,3295,3296,1,0,0,0,3296,265,1,0,0,0,3297,3298,3,268,134,0,3298,
        3299,3,272,136,0,3299,3300,5,308,0,0,3300,3301,3,272,136,0,3301,
        267,1,0,0,0,3302,3304,7,60,0,0,3303,3302,1,0,0,0,3303,3304,1,0,0,
        0,3304,3308,1,0,0,0,3305,3309,5,381,0,0,3306,3309,5,383,0,0,3307,
        3309,3,334,167,0,3308,3305,1,0,0,0,3308,3306,1,0,0,0,3308,3307,1,
        0,0,0,3309,269,1,0,0,0,3310,3311,7,61,0,0,3311,271,1,0,0,0,3312,
        3313,7,62,0,0,3313,273,1,0,0,0,3314,3318,5,116,0,0,3315,3316,5,9,
        0,0,3316,3318,3,322,161,0,3317,3314,1,0,0,0,3317,3315,1,0,0,0,3318,
        275,1,0,0,0,3319,3350,5,27,0,0,3320,3350,5,307,0,0,3321,3350,5,32,
        0,0,3322,3350,5,275,0,0,3323,3350,5,271,0,0,3324,3350,5,150,0,0,
        3325,3350,5,151,0,0,3326,3350,5,25,0,0,3327,3350,5,174,0,0,3328,
        3350,5,117,0,0,3329,3350,5,233,0,0,3330,3350,5,95,0,0,3331,3350,
        5,71,0,0,3332,3350,5,302,0,0,3333,3350,5,304,0,0,3334,3350,5,303,
        0,0,3335,3350,5,284,0,0,3336,3350,5,41,0,0,3337,3350,5,40,0,0,3338,
        3350,5,333,0,0,3339,3350,5,26,0,0,3340,3350,5,80,0,0,3341,3350,5,
        79,0,0,3342,3350,5,199,0,0,3343,3350,5,339,0,0,3344,3350,5,149,0,
        0,3345,3350,5,19,0,0,3346,3350,5,285,0,0,3347,3350,5,176,0,0,3348,
        3350,3,326,163,0,3349,3319,1,0,0,0,3349,3320,1,0,0,0,3349,3321,1,
        0,0,0,3349,3322,1,0,0,0,3349,3323,1,0,0,0,3349,3324,1,0,0,0,3349,
        3325,1,0,0,0,3349,3326,1,0,0,0,3349,3327,1,0,0,0,3349,3328,1,0,0,
        0,3349,3329,1,0,0,0,3349,3330,1,0,0,0,3349,3331,1,0,0,0,3349,3332,
        1,0,0,0,3349,3333,1,0,0,0,3349,3334,1,0,0,0,3349,3335,1,0,0,0,3349,
        3336,1,0,0,0,3349,3337,1,0,0,0,3349,3338,1,0,0,0,3349,3339,1,0,0,
        0,3349,3340,1,0,0,0,3349,3341,1,0,0,0,3349,3342,1,0,0,0,3349,3343,
        1,0,0,0,3349,3344,1,0,0,0,3349,3345,1,0,0,0,3349,3346,1,0,0,0,3349,
        3347,1,0,0,0,3349,3348,1,0,0,0,3350,277,1,0,0,0,3351,3352,5,19,0,
        0,3352,3353,5,355,0,0,3353,3354,3,278,139,0,3354,3355,5,357,0,0,
        3355,3405,1,0,0,0,3356,3357,5,176,0,0,3357,3358,5,355,0,0,3358,3359,
        3,278,139,0,3359,3360,5,4,0,0,3360,3361,3,278,139,0,3361,3362,5,
        357,0,0,3362,3405,1,0,0,0,3363,3377,5,285,0,0,3364,3373,5,355,0,
        0,3365,3370,3,302,151,0,3366,3367,5,4,0,0,3367,3369,3,302,151,0,
        3368,3366,1,0,0,0,3369,3372,1,0,0,0,3370,3368,1,0,0,0,3370,3371,
        1,0,0,0,3371,3374,1,0,0,0,3372,3370,1,0,0,0,3373,3365,1,0,0,0,3373,
        3374,1,0,0,0,3374,3375,1,0,0,0,3375,3378,5,357,0,0,3376,3378,5,353,
        0,0,3377,3364,1,0,0,0,3377,3376,1,0,0,0,3378,3405,1,0,0,0,3379,3380,
        5,149,0,0,3380,3383,7,63,0,0,3381,3382,5,308,0,0,3382,3384,5,185,
        0,0,3383,3381,1,0,0,0,3383,3384,1,0,0,0,3384,3405,1,0,0,0,3385,3386,
        5,149,0,0,3386,3389,7,64,0,0,3387,3388,5,308,0,0,3388,3390,7,65,
        0,0,3389,3387,1,0,0,0,3389,3390,1,0,0,0,3390,3405,1,0,0,0,3391,3402,
        3,276,138,0,3392,3393,5,2,0,0,3393,3398,5,381,0,0,3394,3395,5,4,
        0,0,3395,3397,5,381,0,0,3396,3394,1,0,0,0,3397,3400,1,0,0,0,3398,
        3396,1,0,0,0,3398,3399,1,0,0,0,3399,3401,1,0,0,0,3400,3398,1,0,0,
        0,3401,3403,5,3,0,0,3402,3392,1,0,0,0,3402,3403,1,0,0,0,3403,3405,
        1,0,0,0,3404,3351,1,0,0,0,3404,3356,1,0,0,0,3404,3363,1,0,0,0,3404,
        3379,1,0,0,0,3404,3385,1,0,0,0,3404,3391,1,0,0,0,3405,279,1,0,0,
        0,3406,3411,3,282,141,0,3407,3408,5,4,0,0,3408,3410,3,282,141,0,
        3409,3407,1,0,0,0,3410,3413,1,0,0,0,3411,3409,1,0,0,0,3411,3412,
        1,0,0,0,3412,281,1,0,0,0,3413,3411,1,0,0,0,3414,3415,3,86,43,0,3415,
        3419,3,278,139,0,3416,3418,3,288,144,0,3417,3416,1,0,0,0,3418,3421,
        1,0,0,0,3419,3417,1,0,0,0,3419,3420,1,0,0,0,3420,283,1,0,0,0,3421,
        3419,1,0,0,0,3422,3427,3,286,143,0,3423,3424,5,4,0,0,3424,3426,3,
        286,143,0,3425,3423,1,0,0,0,3426,3429,1,0,0,0,3427,3425,1,0,0,0,
        3427,3428,1,0,0,0,3428,285,1,0,0,0,3429,3427,1,0,0,0,3430,3431,3,
        82,41,0,3431,3435,3,278,139,0,3432,3434,3,288,144,0,3433,3432,1,
        0,0,0,3434,3437,1,0,0,0,3435,3433,1,0,0,0,3435,3436,1,0,0,0,3436,
        287,1,0,0,0,3437,3435,1,0,0,0,3438,3439,5,196,0,0,3439,3446,5,197,
        0,0,3440,3441,5,82,0,0,3441,3446,3,228,114,0,3442,3443,5,51,0,0,
        3443,3446,3,334,167,0,3444,3446,3,274,137,0,3445,3438,1,0,0,0,3445,
        3440,1,0,0,0,3445,3442,1,0,0,0,3445,3444,1,0,0,0,3446,289,1,0,0,
        0,3447,3448,7,66,0,0,3448,3449,3,228,114,0,3449,291,1,0,0,0,3450,
        3455,3,294,147,0,3451,3452,5,4,0,0,3452,3454,3,294,147,0,3453,3451,
        1,0,0,0,3454,3457,1,0,0,0,3455,3453,1,0,0,0,3455,3456,1,0,0,0,3456,
        293,1,0,0,0,3457,3455,1,0,0,0,3458,3459,3,322,161,0,3459,3462,3,
        278,139,0,3460,3461,5,196,0,0,3461,3463,5,197,0,0,3462,3460,1,0,
        0,0,3462,3463,1,0,0,0,3463,3466,1,0,0,0,3464,3465,5,51,0,0,3465,
        3467,3,334,167,0,3466,3464,1,0,0,0,3466,3467,1,0,0,0,3467,295,1,
        0,0,0,3468,3473,3,298,149,0,3469,3470,5,4,0,0,3470,3472,3,298,149,
        0,3471,3469,1,0,0,0,3472,3475,1,0,0,0,3473,3471,1,0,0,0,3473,3474,
        1,0,0,0,3474,297,1,0,0,0,3475,3473,1,0,0,0,3476,3477,3,86,43,0,3477,
        3481,3,278,139,0,3478,3480,3,300,150,0,3479,3478,1,0,0,0,3480,3483,
        1,0,0,0,3481,3479,1,0,0,0,3481,3482,1,0,0,0,3482,299,1,0,0,0,3483,
        3481,1,0,0,0,3484,3485,5,196,0,0,3485,3498,5,197,0,0,3486,3487,5,
        82,0,0,3487,3498,3,228,114,0,3488,3489,5,127,0,0,3489,3490,5,12,
        0,0,3490,3491,5,20,0,0,3491,3492,5,2,0,0,3492,3493,3,228,114,0,3493,
        3494,5,3,0,0,3494,3498,1,0,0,0,3495,3496,5,51,0,0,3496,3498,3,334,
        167,0,3497,3484,1,0,0,0,3497,3486,1,0,0,0,3497,3488,1,0,0,0,3497,
        3495,1,0,0,0,3498,301,1,0,0,0,3499,3501,3,326,163,0,3500,3502,5,
        370,0,0,3501,3500,1,0,0,0,3501,3502,1,0,0,0,3502,3503,1,0,0,0,3503,
        3506,3,278,139,0,3504,3505,5,196,0,0,3505,3507,5,197,0,0,3506,3504,
        1,0,0,0,3506,3507,1,0,0,0,3507,3510,1,0,0,0,3508,3509,5,51,0,0,3509,
        3511,3,334,167,0,3510,3508,1,0,0,0,3510,3511,1,0,0,0,3511,303,1,
        0,0,0,3512,3513,5,342,0,0,3513,3514,3,228,114,0,3514,3515,5,299,
        0,0,3515,3516,3,228,114,0,3516,305,1,0,0,0,3517,3518,5,344,0,0,3518,
        3519,3,322,161,0,3519,3520,5,20,0,0,3520,3528,3,308,154,0,3521,3522,
        5,4,0,0,3522,3523,3,322,161,0,3523,3524,5,20,0,0,3524,3525,3,308,
        154,0,3525,3527,1,0,0,0,3526,3521,1,0,0,0,3527,3530,1,0,0,0,3528,
        3526,1,0,0,0,3528,3529,1,0,0,0,3529,307,1,0,0,0,3530,3528,1,0,0,
        0,3531,3578,3,322,161,0,3532,3533,5,2,0,0,3533,3534,3,322,161,0,
        3534,3535,5,3,0,0,3535,3578,1,0,0,0,3536,3571,5,2,0,0,3537,3538,
        5,44,0,0,3538,3539,5,31,0,0,3539,3544,3,228,114,0,3540,3541,5,4,
        0,0,3541,3543,3,228,114,0,3542,3540,1,0,0,0,3543,3546,1,0,0,0,3544,
        3542,1,0,0,0,3544,3545,1,0,0,0,3545,3572,1,0,0,0,3546,3544,1,0,0,
        0,3547,3548,7,35,0,0,3548,3549,5,31,0,0,3549,3554,3,228,114,0,3550,
        3551,5,4,0,0,3551,3553,3,228,114,0,3552,3550,1,0,0,0,3553,3556,1,
        0,0,0,3554,3552,1,0,0,0,3554,3555,1,0,0,0,3555,3558,1,0,0,0,3556,
        3554,1,0,0,0,3557,3547,1,0,0,0,3557,3558,1,0,0,0,3558,3569,1,0,0,
        0,3559,3560,7,36,0,0,3560,3561,5,31,0,0,3561,3566,3,96,48,0,3562,
        3563,5,4,0,0,3563,3565,3,96,48,0,3564,3562,1,0,0,0,3565,3568,1,0,
        0,0,3566,3564,1,0,0,0,3566,3567,1,0,0,0,3567,3570,1,0,0,0,3568,3566,
        1,0,0,0,3569,3559,1,0,0,0,3569,3570,1,0,0,0,3570,3572,1,0,0,0,3571,
        3537,1,0,0,0,3571,3557,1,0,0,0,3572,3574,1,0,0,0,3573,3575,3,310,
        155,0,3574,3573,1,0,0,0,3574,3575,1,0,0,0,3575,3576,1,0,0,0,3576,
        3578,5,3,0,0,3577,3531,1,0,0,0,3577,3532,1,0,0,0,3577,3536,1,0,0,
        0,3578,309,1,0,0,0,3579,3580,7,67,0,0,3580,3588,3,312,156,0,3581,
        3582,7,67,0,0,3582,3583,5,24,0,0,3583,3584,3,312,156,0,3584,3585,
        5,14,0,0,3585,3586,3,312,156,0,3586,3588,1,0,0,0,3587,3579,1,0,0,
        0,3587,3581,1,0,0,0,3588,311,1,0,0,0,3589,3590,5,320,0,0,3590,3597,
        7,68,0,0,3591,3592,5,62,0,0,3592,3597,5,256,0,0,3593,3594,3,228,
        114,0,3594,3595,7,68,0,0,3595,3597,1,0,0,0,3596,3589,1,0,0,0,3596,
        3591,1,0,0,0,3596,3593,1,0,0,0,3597,313,1,0,0,0,3598,3603,3,320,
        160,0,3599,3600,5,4,0,0,3600,3602,3,320,160,0,3601,3599,1,0,0,0,
        3602,3605,1,0,0,0,3603,3601,1,0,0,0,3603,3604,1,0,0,0,3604,315,1,
        0,0,0,3605,3603,1,0,0,0,3606,3607,5,136,0,0,3607,3608,5,2,0,0,3608,
        3609,3,228,114,0,3609,3610,5,3,0,0,3610,3616,1,0,0,0,3611,3616,3,
        320,160,0,3612,3616,5,114,0,0,3613,3616,5,161,0,0,3614,3616,5,249,
        0,0,3615,3606,1,0,0,0,3615,3611,1,0,0,0,3615,3612,1,0,0,0,3615,3613,
        1,0,0,0,3615,3614,1,0,0,0,3616,317,1,0,0,0,3617,3618,3,320,160,0,
        3618,319,1,0,0,0,3619,3624,3,326,163,0,3620,3621,5,5,0,0,3621,3623,
        3,326,163,0,3622,3620,1,0,0,0,3623,3626,1,0,0,0,3624,3622,1,0,0,
        0,3624,3625,1,0,0,0,3625,321,1,0,0,0,3626,3624,1,0,0,0,3627,3628,
        3,326,163,0,3628,3629,3,324,162,0,3629,323,1,0,0,0,3630,3631,5,361,
        0,0,3631,3633,3,326,163,0,3632,3630,1,0,0,0,3633,3634,1,0,0,0,3634,
        3632,1,0,0,0,3634,3635,1,0,0,0,3635,3638,1,0,0,0,3636,3638,1,0,0,
        0,3637,3632,1,0,0,0,3637,3636,1,0,0,0,3638,325,1,0,0,0,3639,3642,
        3,328,164,0,3640,3642,3,338,169,0,3641,3639,1,0,0,0,3641,3640,1,
        0,0,0,3642,327,1,0,0,0,3643,3649,5,387,0,0,3644,3649,5,388,0,0,3645,
        3649,5,377,0,0,3646,3649,3,336,168,0,3647,3649,3,340,170,0,3648,
        3643,1,0,0,0,3648,3644,1,0,0,0,3648,3645,1,0,0,0,3648,3646,1,0,0,
        0,3648,3647,1,0,0,0,3649,329,1,0,0,0,3650,3652,5,361,0,0,3651,3650,
        1,0,0,0,3651,3652,1,0,0,0,3652,3653,1,0,0,0,3653,3654,7,69,0,0,3654,
        331,1,0,0,0,3655,3656,5,318,0,0,3656,3669,3,278,139,0,3657,3658,
        5,51,0,0,3658,3669,3,334,167,0,3659,3669,3,274,137,0,3660,3661,7,
        70,0,0,3661,3662,5,196,0,0,3662,3669,5,197,0,0,3663,3664,5,268,0,
        0,3664,3665,5,82,0,0,3665,3669,3,228,114,0,3666,3667,5,96,0,0,3667,
        3669,5,82,0,0,3668,3655,1,0,0,0,3668,3657,1,0,0,0,3668,3659,1,0,
        0,0,3668,3660,1,0,0,0,3668,3663,1,0,0,0,3668,3666,1,0,0,0,3669,333,
        1,0,0,0,3670,3671,7,71,0,0,3671,335,1,0,0,0,3672,3673,7,72,0,0,3673,
        337,1,0,0,0,3674,3675,7,73,0,0,3675,339,1,0,0,0,3676,3677,7,74,0,
        0,3677,341,1,0,0,0,530,345,352,356,361,372,378,389,395,400,405,408,
        412,415,419,425,431,436,441,444,448,451,460,465,478,481,485,491,
        494,497,502,510,515,521,524,531,538,545,552,558,568,571,581,589,
        593,596,604,607,611,614,621,626,631,638,643,652,656,662,666,670,
        675,681,688,693,698,701,707,711,717,725,729,734,740,752,757,760,
        763,766,769,772,787,791,800,804,811,815,828,836,841,850,853,856,
        861,872,879,887,892,895,900,910,912,917,920,924,931,934,938,941,
        945,954,957,961,964,969,982,984,990,993,996,1000,1004,1013,1015,
        1024,1027,1036,1041,1046,1049,1053,1068,1071,1076,1081,1086,1093,
        1100,1105,1108,1113,1117,1122,1126,1131,1136,1140,1147,1152,1157,
        1162,1169,1174,1177,1188,1195,1202,1214,1222,1228,1234,1237,1242,
        1246,1249,1257,1262,1271,1276,1278,1286,1291,1295,1298,1301,1304,
        1308,1310,1316,1319,1322,1328,1331,1334,1341,1346,1355,1363,1369,
        1372,1375,1381,1385,1390,1393,1397,1399,1407,1415,1418,1430,1436,
        1441,1444,1448,1459,1467,1479,1484,1487,1495,1504,1512,1518,1527,
        1534,1543,1548,1551,1576,1578,1590,1597,1600,1607,1611,1617,1625,
        1632,1635,1643,1654,1665,1673,1679,1695,1702,1713,1722,1725,1734,
        1737,1746,1749,1758,1761,1764,1769,1771,1775,1783,1789,1795,1798,
        1800,1808,1818,1827,1831,1834,1838,1842,1850,1854,1857,1860,1863,
        1867,1871,1876,1880,1883,1886,1889,1893,1898,1902,1905,1908,1911,
        1913,1919,1926,1931,1934,1937,1941,1951,1955,1957,1960,1964,1970,
        1974,1985,1993,1995,2002,2006,2018,2025,2040,2045,2052,2068,2073,
        2086,2091,2099,2105,2109,2112,2115,2122,2125,2131,2140,2150,2165,
        2170,2172,2177,2186,2196,2201,2205,2210,2217,2222,2226,2229,2232,
        2246,2259,2264,2268,2271,2276,2281,2285,2288,2300,2311,2324,2335,
        2340,2343,2347,2350,2362,2371,2374,2379,2386,2389,2395,2401,2403,
        2406,2411,2415,2421,2425,2428,2433,2436,2441,2443,2449,2454,2461,
        2464,2482,2484,2487,2498,2507,2514,2522,2530,2535,2538,2541,2549,
        2557,2567,2579,2582,2587,2592,2599,2606,2608,2621,2627,2629,2639,
        2645,2647,2655,2659,2662,2666,2668,2677,2689,2691,2698,2705,2711,
        2717,2719,2726,2734,2742,2748,2753,2760,2766,2769,2773,2775,2782,
        2791,2798,2808,2813,2817,2827,2834,2847,2849,2857,2859,2863,2871,
        2880,2886,2894,2899,2911,2916,2919,2925,2929,2934,2939,2944,2950,
        2971,2973,2984,2996,3008,3012,3021,3025,3043,3046,3054,3063,3072,
        3095,3111,3118,3121,3130,3134,3138,3150,3175,3182,3185,3200,3221,
        3225,3227,3237,3239,3249,3264,3266,3279,3283,3288,3295,3303,3308,
        3317,3349,3370,3373,3377,3383,3389,3398,3402,3404,3411,3419,3427,
        3435,3445,3455,3462,3466,3473,3481,3497,3501,3506,3510,3528,3544,
        3554,3557,3566,3569,3571,3574,3577,3587,3596,3603,3615,3624,3634,
        3637,3641,3648,3651,3668
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!SqlParser.__ATN) {
            SqlParser.__ATN = new antlr.ATNDeserializer().deserialize(SqlParser._serializedATN);
        }

        return SqlParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(SqlParser.literalNames, SqlParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return SqlParser.vocabulary;
    }

    private static readonly decisionsToDFA = SqlParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ProgramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(SqlParser.EOF, 0)!;
    }
    public singleStatement(): SingleStatementContext[];
    public singleStatement(i: number): SingleStatementContext | null;
    public singleStatement(i?: number): SingleStatementContext[] | SingleStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SingleStatementContext);
        }

        return this.getRuleContext(i, SingleStatementContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_program;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterProgram) {
             listener.enterProgram(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitProgram) {
             listener.exitProgram(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitProgram) {
            return visitor.visitProgram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.SEMICOLON, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_singleStatement;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterSingleStatement) {
             listener.enterSingleStatement(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitSingleStatement) {
             listener.exitSingleStatement(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitSingleStatement) {
            return visitor.visitSingleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_statement;
    }
    public override copyFrom(ctx: StatementContext): void {
        super.copyFrom(ctx);
    }
}
export class DropContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public dropStatement(): DropStatementContext {
        return this.getRuleContext(0, DropStatementContext)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDrop) {
             listener.enterDrop(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDrop) {
             listener.exitDrop(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDrop) {
            return visitor.visitDrop(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_COMMENT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_ON, 0)!;
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_IS, 0)!;
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULL, 0);
    }
    public namespace(): NamespaceContext | null {
        return this.getRuleContext(0, NamespaceContext);
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCommentNamespace) {
             listener.enterCommentNamespace(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCommentNamespace) {
             listener.exitCommentNamespace(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommentNamespace) {
            return visitor.visitCommentNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetAnyContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_RESET(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_RESET, 0)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterResetAny) {
             listener.enterResetAny(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitResetAny) {
             listener.exitResetAny(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitResetAny) {
            return visitor.visitResetAny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DmlStatementContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public dmlStatementNoWith(): DmlStatementNoWithContext {
        return this.getRuleContext(0, DmlStatementNoWithContext)!;
    }
    public ctes(): CtesContext | null {
        return this.getRuleContext(0, CtesContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDmlStatement) {
             listener.enterDmlStatement(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDmlStatement) {
             listener.exitDmlStatement(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDmlStatement) {
            return visitor.visitDmlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public showStatement(): ShowStatementContext {
        return this.getRuleContext(0, ShowStatementContext)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShow) {
             listener.enterShow(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShow) {
             listener.exitShow(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShow) {
            return visitor.visitShow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeclareVariableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DECLARE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_DECLARE, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPLACE, 0);
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VARIABLE, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public variableDefaultExpression(): VariableDefaultExpressionContext | null {
        return this.getRuleContext(0, VariableDefaultExpressionContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDeclareVariable) {
             listener.enterDeclareVariable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDeclareVariable) {
             listener.exitDeclareVariable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeclareVariable) {
            return visitor.visitDeclareVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeRelationContext extends StatementContext {
    public _option?: Token | null;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESCRIBE, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public describeColName(): DescribeColNameContext | null {
        return this.getRuleContext(0, DescribeColNameContext);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXTENDED, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FORMATTED, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDescribeRelation) {
             listener.enterDescribeRelation(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDescribeRelation) {
             listener.exitDescribeRelation(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeRelation) {
            return visitor.visitDescribeRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LoadDataContext extends StatementContext {
    public _path?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_LOAD, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_DATA, 0)!;
    }
    public KW_INPATH(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_INPATH, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_INTO, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCAL, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OVERWRITE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterLoadData) {
             listener.enterLoadData(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitLoadData) {
             listener.exitLoadData(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoadData) {
            return visitor.visitLoadData(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_FUNCTION, 0)!;
    }
    public describeFuncName(): DescribeFuncNameContext {
        return this.getRuleContext(0, DescribeFuncNameContext)!;
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESCRIBE, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXTENDED, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDescribeFunction) {
             listener.enterDescribeFunction(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDescribeFunction) {
             listener.exitDescribeFunction(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeFunction) {
            return visitor.visitDescribeFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ClearCacheContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CLEAR(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CLEAR, 0)!;
    }
    public KW_CACHE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CACHE, 0)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterClearCache) {
             listener.enterClearCache(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitClearCache) {
             listener.exitClearCache(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitClearCache) {
            return visitor.visitClearCache(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnsupportHiveCommandsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public unsupportedCommands(): UnsupportedCommandsContext {
        return this.getRuleContext(0, UnsupportedCommandsContext)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUnsupportHiveCommands) {
             listener.enterUnsupportHiveCommands(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUnsupportHiveCommands) {
             listener.exitUnsupportHiveCommands(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnsupportHiveCommands) {
            return visitor.visitUnsupportHiveCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatementDefaultContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterStatementDefault) {
             listener.enterStatementDefault(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitStatementDefault) {
             listener.exitStatementDefault(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitStatementDefault) {
            return visitor.visitStatementDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RepairTableContext extends StatementContext {
    public _option?: Token | null;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REPAIR(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_REPAIR, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MSCK, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PARTITIONS, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DROP, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SYNC, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterRepairTable) {
             listener.enterRepairTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitRepairTable) {
             listener.exitRepairTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitRepairTable) {
            return visitor.visitRepairTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OptimizeTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_OPTIMIZE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_OPTIMIZE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_ZORDER(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_ZORDER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_BY, 0)!;
    }
    public columnNameSeq(): ColumnNameSeqContext {
        return this.getRuleContext(0, ColumnNameSeqContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterOptimizeTable) {
             listener.enterOptimizeTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitOptimizeTable) {
             listener.exitOptimizeTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptimizeTable) {
            return visitor.visitOptimizeTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshResourceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_REFRESH, 0)!;
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterRefreshResource) {
             listener.enterRefreshResource(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitRefreshResource) {
             listener.exitRefreshResource(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshResource) {
            return visitor.visitRefreshResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public createStatement(): CreateStatementContext {
        return this.getRuleContext(0, CreateStatementContext)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreate) {
             listener.enterCreate(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreate) {
             listener.exitCreate(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreate) {
            return visitor.visitCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TruncateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TRUNCATE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TRUNCATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterTruncateTable) {
             listener.enterTruncateTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitTruncateTable) {
             listener.exitTruncateTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateTable) {
            return visitor.visitTruncateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeQueryContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESCRIBE, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_QUERY, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDescribeQuery) {
             listener.enterDescribeQuery(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDescribeQuery) {
             listener.exitDescribeQuery(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeQuery) {
            return visitor.visitDescribeQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_DATABASE, 0)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESCRIBE, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXTENDED, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDescribeNamespace) {
             listener.enterDescribeNamespace(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDescribeNamespace) {
             listener.exitDescribeNamespace(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeNamespace) {
            return visitor.visitDescribeNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public alterStatement(): AlterStatementContext {
        return this.getRuleContext(0, AlterStatementContext)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterAlter) {
             listener.enterAlter(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitAlter) {
             listener.exitAlter(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter) {
            return visitor.visitAlter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeTablesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ANALYZE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_ANALYZE, 0)!;
    }
    public KW_TABLES(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLES, 0)!;
    }
    public KW_COMPUTE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_COMPUTE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_STATISTICS, 0)!;
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NOSCAN, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IN, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterAnalyzeTables) {
             listener.enterAnalyzeTables(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitAnalyzeTables) {
             listener.exitAnalyzeTables(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeTables) {
            return visitor.visitAnalyzeTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_REFRESH, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_FUNCTION, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterRefreshFunction) {
             listener.enterRefreshFunction(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitRefreshFunction) {
             listener.exitRefreshFunction(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshFunction) {
            return visitor.visitRefreshFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_REFRESH, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterRefreshTable) {
             listener.enterRefreshTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitRefreshTable) {
             listener.exitRefreshTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshTable) {
            return visitor.visitRefreshTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetAnyContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SET, 0)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterSetAny) {
             listener.enterSetAny(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitSetAny) {
             listener.exitSetAny(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetAny) {
            return visitor.visitSetAny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UseNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_USE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_USE, 0)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public namespace(): NamespaceContext | null {
        return this.getRuleContext(0, NamespaceContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUseNamespace) {
             listener.enterUseNamespace(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUseNamespace) {
             listener.exitUseNamespace(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUseNamespace) {
            return visitor.visitUseNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ManageResourceContext extends StatementContext {
    public _op?: Token | null;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ADD, 0);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIST, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterManageResource) {
             listener.enterManageResource(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitManageResource) {
             listener.exitManageResource(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitManageResource) {
            return visitor.visitManageResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainStatementContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_EXPLAIN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_EXPLAIN, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOGICAL, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FORMATTED, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXTENDED, 0);
    }
    public KW_CODEGEN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CODEGEN, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COST, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterExplainStatement) {
             listener.enterExplainStatement(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitExplainStatement) {
             listener.exitExplainStatement(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainStatement) {
            return visitor.visitExplainStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ANALYZE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_ANALYZE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_COMPUTE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_COMPUTE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_STATISTICS, 0)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NOSCAN, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FOR, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COLUMNS, 0);
    }
    public columnNameSeq(): ColumnNameSeqContext | null {
        return this.getRuleContext(0, ColumnNameSeqContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ALL, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterAnalyze) {
             listener.enterAnalyze(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitAnalyze) {
             listener.exitAnalyze(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyze) {
            return visitor.visitAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnCacheTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_UNCACHE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_UNCACHE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUnCacheTable) {
             listener.enterUnCacheTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUnCacheTable) {
             listener.exitUnCacheTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnCacheTable) {
            return visitor.visitUnCacheTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CacheTableContext extends StatementContext {
    public _options?: PropertyListContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CACHE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CACHE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_LAZY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LAZY, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OPTIONS, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCacheTable) {
             listener.enterCacheTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCacheTable) {
             listener.exitCacheTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCacheTable) {
            return visitor.visitCacheTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementContext extends antlr.ParserRuleContext {
    public _table?: TableNameContext;
    public _column?: ColumnNameContext;
    public _colName?: ColumnNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode[];
    public KW_ALTER(i: number): antlr.TerminalNode | null;
    public KW_ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_ALTER);
    	} else {
    		return this.getToken(SqlParser.KW_ALTER, i);
    	}
    }
    public namespace(): NamespaceContext | null {
        return this.getRuleContext(0, NamespaceContext);
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SET, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCATION, 0);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PROPERTIES, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ADD, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COLUMN, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COLUMNS, 0);
    }
    public qualifiedColTypeWithPositionForAdd(): QualifiedColTypeWithPositionForAddContext | null {
        return this.getRuleContext(0, QualifiedColTypeWithPositionForAddContext);
    }
    public qualifiedColTypeWithPositionSeqForAdd(): QualifiedColTypeWithPositionSeqForAddContext | null {
        return this.getRuleContext(0, QualifiedColTypeWithPositionSeqForAddContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DROP, 0);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public columnNameSeq(): ColumnNameSeqContext | null {
        return this.getRuleContext(0, ColumnNameSeqContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TO, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public columnNameCreate(): ColumnNameCreateContext | null {
        return this.getRuleContext(0, ColumnNameCreateContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNSET, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CHANGE, 0);
    }
    public alterColumnAction(): AlterColumnActionContext | null {
        return this.getRuleContext(0, AlterColumnActionContext);
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPLACE, 0);
    }
    public columnType(): ColumnTypeContext | null {
        return this.getRuleContext(0, ColumnTypeContext);
    }
    public qualifiedColTypeWithPositionSeqForReplace(): QualifiedColTypeWithPositionSeqForReplaceContext | null {
        return this.getRuleContext(0, QualifiedColTypeWithPositionSeqForReplaceContext);
    }
    public colPosition(): ColPositionContext | null {
        return this.getRuleContext(0, ColPositionContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PURGE, 0);
    }
    public partitionSpecLocation(): PartitionSpecLocationContext[];
    public partitionSpecLocation(i: number): PartitionSpecLocationContext | null;
    public partitionSpecLocation(i?: number): PartitionSpecLocationContext[] | PartitionSpecLocationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecLocationContext);
        }

        return this.getRuleContext(i, PartitionSpecLocationContext);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SERDE, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SERDEPROPERTIES, 0);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RECOVER, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PARTITIONS, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INDEX, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CLUSTERED, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SKEWED, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TOUCH, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BY, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NOT, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SORTED, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STORED, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DIRECTORIES, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PARTITION, 0);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXCHANGE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ARCHIVE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNARCHIVE, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMPACT, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CONCATENATE, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FILEFORMAT, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_alterStatement;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterAlterStatement) {
             listener.enterAlterStatement(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitAlterStatement) {
             listener.exitAlterStatement(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterStatement) {
            return visitor.visitAlterStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_createStatement;
    }
    public override copyFrom(ctx: CreateStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateNamespaceContext extends CreateStatementContext {
    public _comment?: StringLitContext;
    public constructor(ctx: CreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CREATE, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public namespaceNameCreate(): NamespaceNameCreateContext {
        return this.getRuleContext(0, NamespaceNameCreateContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_COMMENT(): antlr.TerminalNode[];
    public KW_COMMENT(i: number): antlr.TerminalNode | null;
    public KW_COMMENT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_COMMENT);
    	} else {
    		return this.getToken(SqlParser.KW_COMMENT, i);
    	}
    }
    public KW_LOCATION(): antlr.TerminalNode[];
    public KW_LOCATION(i: number): antlr.TerminalNode | null;
    public KW_LOCATION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_LOCATION);
    	} else {
    		return this.getToken(SqlParser.KW_LOCATION, i);
    	}
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_WITH(): antlr.TerminalNode[];
    public KW_WITH(i: number): antlr.TerminalNode | null;
    public KW_WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_WITH);
    	} else {
    		return this.getToken(SqlParser.KW_WITH, i);
    	}
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode[];
    public KW_DBPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_DBPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_DBPROPERTIES);
    	} else {
    		return this.getToken(SqlParser.KW_DBPROPERTIES, i);
    	}
    }
    public KW_PROPERTIES(): antlr.TerminalNode[];
    public KW_PROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_PROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_PROPERTIES);
    	} else {
    		return this.getToken(SqlParser.KW_PROPERTIES, i);
    	}
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreateNamespace) {
             listener.enterCreateNamespace(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreateNamespace) {
             listener.exitCreateNamespace(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateNamespace) {
            return visitor.visitCreateNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableContext extends CreateStatementContext {
    public constructor(ctx: CreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public createTableClauses(): CreateTableClausesContext {
        return this.getRuleContext(0, CreateTableClausesContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TEMPORARY, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXTERNAL, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext | null {
        return this.getRuleContext(0, CreateOrReplaceTableColTypeListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public tableProvider(): TableProviderContext | null {
        return this.getRuleContext(0, TableProviderContext);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreateTable) {
             listener.enterCreateTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreateTable) {
             listener.exitCreateTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReplaceTableContext extends CreateStatementContext {
    public constructor(ctx: CreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_REPLACE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public createTableClauses(): CreateTableClausesContext {
        return this.getRuleContext(0, CreateTableClausesContext)!;
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CREATE, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OR, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext | null {
        return this.getRuleContext(0, CreateOrReplaceTableColTypeListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public tableProvider(): TableProviderContext | null {
        return this.getRuleContext(0, TableProviderContext);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterReplaceTable) {
             listener.enterReplaceTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitReplaceTable) {
             listener.exitReplaceTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceTable) {
            return visitor.visitReplaceTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTempViewUsingContext extends CreateStatementContext {
    public constructor(ctx: CreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CREATE, 0)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TEMPORARY, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_VIEW, 0)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public tableProvider(): TableProviderContext {
        return this.getRuleContext(0, TableProviderContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPLACE, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GLOBAL, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public colTypeList(): ColTypeListContext | null {
        return this.getRuleContext(0, ColTypeListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreateTempViewUsing) {
             listener.enterCreateTempViewUsing(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreateTempViewUsing) {
             listener.exitCreateTempViewUsing(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTempViewUsing) {
            return visitor.visitCreateTempViewUsing(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableLikeContext extends CreateStatementContext {
    public _target?: TableNameCreateContext;
    public _source?: TableNameContext;
    public _tableProps?: PropertyListContext;
    public constructor(ctx: CreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_LIKE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public tableProvider(): TableProviderContext[];
    public tableProvider(i: number): TableProviderContext | null;
    public tableProvider(i?: number): TableProviderContext[] | TableProviderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableProviderContext);
        }

        return this.getRuleContext(i, TableProviderContext);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext[];
    public createFileFormat(i: number): CreateFileFormatContext | null;
    public createFileFormat(i?: number): CreateFileFormatContext[] | CreateFileFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateFileFormatContext);
        }

        return this.getRuleContext(i, CreateFileFormatContext);
    }
    public tableLifecycle(): TableLifecycleContext[];
    public tableLifecycle(i: number): TableLifecycleContext | null;
    public tableLifecycle(i?: number): TableLifecycleContext[] | TableLifecycleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableLifecycleContext);
        }

        return this.getRuleContext(i, TableLifecycleContext);
    }
    public KW_LOCATION(): antlr.TerminalNode[];
    public KW_LOCATION(i: number): antlr.TerminalNode | null;
    public KW_LOCATION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_LOCATION);
    	} else {
    		return this.getToken(SqlParser.KW_LOCATION, i);
    	}
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreateTableLike) {
             listener.enterCreateTableLike(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreateTableLike) {
             listener.exitCreateTableLike(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableLike) {
            return visitor.visitCreateTableLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateFunctionContext extends CreateStatementContext {
    public _className?: StringLitContext;
    public constructor(ctx: CreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CREATE, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_FUNCTION, 0)!;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        return this.getRuleContext(0, FunctionNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_AS, 0)!;
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPLACE, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_USING, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreateFunction) {
             listener.enterCreateFunction(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreateFunction) {
             listener.exitCreateFunction(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFunction) {
            return visitor.visitCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateRoleContext extends CreateStatementContext {
    public constructor(ctx: CreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CREATE, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INDEX, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TEMPORARY, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MACRO, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreateRole) {
             listener.enterCreateRole(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreateRole) {
             listener.exitCreateRole(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRole) {
            return visitor.visitCreateRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateViewContext extends CreateStatementContext {
    public _comment?: StringLitContext;
    public constructor(ctx: CreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CREATE, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_VIEW, 0)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPLACE, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public identifierCommentList(): IdentifierCommentListContext | null {
        return this.getRuleContext(0, IdentifierCommentListContext);
    }
    public KW_COMMENT(): antlr.TerminalNode[];
    public KW_COMMENT(i: number): antlr.TerminalNode | null;
    public KW_COMMENT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_COMMENT);
    	} else {
    		return this.getToken(SqlParser.KW_COMMENT, i);
    	}
    }
    public KW_PARTITIONED(): antlr.TerminalNode[];
    public KW_PARTITIONED(i: number): antlr.TerminalNode | null;
    public KW_PARTITIONED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_PARTITIONED);
    	} else {
    		return this.getToken(SqlParser.KW_PARTITIONED, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_ON);
    	} else {
    		return this.getToken(SqlParser.KW_ON, i);
    	}
    }
    public identifierList(): IdentifierListContext[];
    public identifierList(i: number): IdentifierListContext | null;
    public identifierList(i?: number): IdentifierListContext[] | IdentifierListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierListContext);
        }

        return this.getRuleContext(i, IdentifierListContext);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GLOBAL, 0);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateIndexContext extends CreateStatementContext {
    public _indexType?: IdentifierContext;
    public _options?: PropertyListContext;
    public constructor(ctx: CreateStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CREATE, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_INDEX, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public multipartIdentifierPropertyList(): MultipartIdentifierPropertyListContext {
        return this.getRuleContext(0, MultipartIdentifierPropertyListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLE, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_USING, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreateIndex) {
             listener.enterCreateIndex(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreateIndex) {
             listener.exitCreateIndex(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndex) {
            return visitor.visitCreateIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_dropStatement;
    }
    public override copyFrom(ctx: DropStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class DropRoleContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_DROP, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INDEX, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TEMPORARY, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MACRO, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDropRole) {
             listener.enterDropRole(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDropRole) {
             listener.exitDropRole(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropRole) {
            return visitor.visitDropRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropNamespaceContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_DROP, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RESTRICT, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CASCADE, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDropNamespace) {
             listener.enterDropNamespace(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDropNamespace) {
             listener.exitDropNamespace(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropNamespace) {
            return visitor.visitDropNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropFunctionContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_DROP, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_FUNCTION, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TEMPORARY, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDropFunction) {
             listener.enterDropFunction(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDropFunction) {
             listener.exitDropFunction(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropViewContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_DROP, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDropView) {
             listener.enterDropView(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDropView) {
             listener.exitDropView(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_DROP, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PURGE, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDropTable) {
             listener.enterDropTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDropTable) {
             listener.exitDropTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropVariableContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_DROP, 0)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TEMPORARY, 0)!;
    }
    public KW_VARIABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_VARIABLE, 0)!;
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDropVariable) {
             listener.enterDropVariable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDropVariable) {
             listener.exitDropVariable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropVariable) {
            return visitor.visitDropVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropIndexContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_DROP, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_INDEX, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLE, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDropIndex) {
             listener.enterDropIndex(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDropIndex) {
             listener.exitDropIndex(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndex) {
            return visitor.visitDropIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DmlStatementNoWithContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_dmlStatementNoWith;
    }
    public override copyFrom(ctx: DmlStatementNoWithContext): void {
        super.copyFrom(ctx);
    }
}
export class DeleteFromTableContext extends DmlStatementNoWithContext {
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DELETE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_DELETE, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_FROM, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDeleteFromTable) {
             listener.enterDeleteFromTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDeleteFromTable) {
             listener.exitDeleteFromTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteFromTable) {
            return visitor.visitDeleteFromTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MultipleInsertContext extends DmlStatementNoWithContext {
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public insertInto(): InsertIntoContext[];
    public insertInto(i: number): InsertIntoContext | null;
    public insertInto(i?: number): InsertIntoContext[] | InsertIntoContext | null {
        if (i === undefined) {
            return this.getRuleContexts(InsertIntoContext);
        }

        return this.getRuleContext(i, InsertIntoContext);
    }
    public fromStatementBody(): FromStatementBodyContext[];
    public fromStatementBody(i: number): FromStatementBodyContext | null;
    public fromStatementBody(i?: number): FromStatementBodyContext[] | FromStatementBodyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FromStatementBodyContext);
        }

        return this.getRuleContext(i, FromStatementBodyContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterMultipleInsert) {
             listener.enterMultipleInsert(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitMultipleInsert) {
             listener.exitMultipleInsert(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipleInsert) {
            return visitor.visitMultipleInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UpdateTableContext extends DmlStatementNoWithContext {
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_UPDATE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public setClause(): SetClauseContext {
        return this.getRuleContext(0, SetClauseContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUpdateTable) {
             listener.enterUpdateTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUpdateTable) {
             listener.exitUpdateTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateTable) {
            return visitor.visitUpdateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InsertFromQueryContext extends DmlStatementNoWithContext {
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public insertInto(): InsertIntoContext {
        return this.getRuleContext(0, InsertIntoContext)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterInsertFromQuery) {
             listener.enterInsertFromQuery(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitInsertFromQuery) {
             listener.exitInsertFromQuery(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertFromQuery) {
            return visitor.visitInsertFromQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeIntoTableContext extends DmlStatementNoWithContext {
    public _target?: TableNameContext;
    public _targetAlias?: TableAliasContext;
    public _source?: IdentifierReferenceContext;
    public _sourceQuery?: QueryContext;
    public _sourceAlias?: TableAliasContext;
    public _mergeCondition?: BooleanExpressionContext;
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_MERGE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_MERGE, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_INTO, 0)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_USING, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public tableAlias(): TableAliasContext[];
    public tableAlias(i: number): TableAliasContext | null;
    public tableAlias(i?: number): TableAliasContext[] | TableAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableAliasContext);
        }

        return this.getRuleContext(i, TableAliasContext);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public identifierReference(): IdentifierReferenceContext | null {
        return this.getRuleContext(0, IdentifierReferenceContext);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public matchedClause(): MatchedClauseContext[];
    public matchedClause(i: number): MatchedClauseContext | null;
    public matchedClause(i?: number): MatchedClauseContext[] | MatchedClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MatchedClauseContext);
        }

        return this.getRuleContext(i, MatchedClauseContext);
    }
    public notMatchedClause(): NotMatchedClauseContext[];
    public notMatchedClause(i: number): NotMatchedClauseContext | null;
    public notMatchedClause(i?: number): NotMatchedClauseContext[] | NotMatchedClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NotMatchedClauseContext);
        }

        return this.getRuleContext(i, NotMatchedClauseContext);
    }
    public notMatchedBySourceClause(): NotMatchedBySourceClauseContext[];
    public notMatchedBySourceClause(i: number): NotMatchedBySourceClauseContext | null;
    public notMatchedBySourceClause(i?: number): NotMatchedBySourceClauseContext[] | NotMatchedBySourceClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NotMatchedBySourceClauseContext);
        }

        return this.getRuleContext(i, NotMatchedBySourceClauseContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterMergeIntoTable) {
             listener.enterMergeIntoTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitMergeIntoTable) {
             listener.exitMergeIntoTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitMergeIntoTable) {
            return visitor.visitMergeIntoTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertIntoContext extends antlr.ParserRuleContext {
    public _path?: StringLitContext;
    public _options?: PropertyListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_INSERT, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INTO, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BY, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NAME, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public columnNameSeq(): ColumnNameSeqContext | null {
        return this.getRuleContext(0, ColumnNameSeqContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPLACE, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OVERWRITE, 0);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DIRECTORY, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCAL, 0);
    }
    public rowFormat(): RowFormatContext | null {
        return this.getRuleContext(0, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext | null {
        return this.getRuleContext(0, CreateFileFormatContext);
    }
    public tableProvider(): TableProviderContext | null {
        return this.getRuleContext(0, TableProviderContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OPTIONS, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_insertInto;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterInsertInto) {
             listener.enterInsertInto(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitInsertInto) {
             listener.exitInsertInto(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertInto) {
            return visitor.visitInsertInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_showStatement;
    }
    public override copyFrom(ctx: ShowStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ShowTblPropertiesContext extends ShowStatementContext {
    public _table?: TableNameContext;
    public _key?: PropertyKeyContext;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SHOW, 0)!;
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TBLPROPERTIES, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public propertyKey(): PropertyKeyContext | null {
        return this.getRuleContext(0, PropertyKeyContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShowTblProperties) {
             listener.enterShowTblProperties(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShowTblProperties) {
             listener.exitShowTblProperties(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowTblProperties) {
            return visitor.visitShowTblProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCatalogsContext extends ShowStatementContext {
    public _pattern?: StringLitContext;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SHOW, 0)!;
    }
    public KW_CATALOGS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CATALOGS, 0)!;
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShowCatalogs) {
             listener.enterShowCatalogs(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShowCatalogs) {
             listener.exitShowCatalogs(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCatalogs) {
            return visitor.visitShowCatalogs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCurrentNamespaceContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SHOW, 0)!;
    }
    public KW_CURRENT(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CURRENT, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShowCurrentNamespace) {
             listener.enterShowCurrentNamespace(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShowCurrentNamespace) {
             listener.exitShowCurrentNamespace(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCurrentNamespace) {
            return visitor.visitShowCurrentNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowViewsContext extends ShowStatementContext {
    public _pattern?: StringLitContext;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SHOW, 0)!;
    }
    public KW_VIEWS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_VIEWS, 0)!;
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IN, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShowViews) {
             listener.enterShowViews(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShowViews) {
             listener.exitShowViews(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowViews) {
            return visitor.visitShowViews(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowPartitionsContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SHOW, 0)!;
    }
    public KW_PARTITIONS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_PARTITIONS, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShowPartitions) {
             listener.enterShowPartitions(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShowPartitions) {
             listener.exitShowPartitions(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowPartitions) {
            return visitor.visitShowPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowFunctionsContext extends ShowStatementContext {
    public _ns?: NamespaceNameContext;
    public _legacy?: MultipartIdentifierContext;
    public _pattern?: StringLitContext;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SHOW, 0)!;
    }
    public KW_FUNCTIONS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_FUNCTIONS, 0)!;
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_USER, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SYSTEM, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ALL, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IN, 0);
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIKE, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShowFunctions) {
             listener.enterShowFunctions(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShowFunctions) {
             listener.exitShowFunctions(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowFunctions) {
            return visitor.visitShowFunctions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesContext extends ShowStatementContext {
    public _pattern?: StringLitContext;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SHOW, 0)!;
    }
    public KW_TABLES(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLES, 0)!;
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IN, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShowTables) {
             listener.enterShowTables(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShowTables) {
             listener.exitShowTables(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowTables) {
            return visitor.visitShowTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateTableContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SHOW, 0)!;
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SERDE, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShowCreateTable) {
             listener.enterShowCreateTable(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShowCreateTable) {
             listener.exitShowCreateTable(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTable) {
            return visitor.visitShowCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowNamespacesContext extends ShowStatementContext {
    public _pattern?: StringLitContext;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SHOW, 0)!;
    }
    public KW_NAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NAMESPACES, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATABASES, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SCHEMAS, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IN, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShowNamespaces) {
             listener.enterShowNamespaces(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShowNamespaces) {
             listener.exitShowNamespaces(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowNamespaces) {
            return visitor.visitShowNamespaces(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTableExtendedContext extends ShowStatementContext {
    public _ns?: NamespaceNameContext;
    public _pattern?: StringLitContext;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SHOW, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public KW_EXTENDED(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_EXTENDED, 0)!;
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_LIKE, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IN, 0);
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShowTableExtended) {
             listener.enterShowTableExtended(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShowTableExtended) {
             listener.exitShowTableExtended(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowTableExtended) {
            return visitor.visitShowTableExtended(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnsContext extends ShowStatementContext {
    public _table?: TableNameContext;
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SHOW, 0)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_COLUMNS, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode[];
    public KW_FROM(i: number): antlr.TerminalNode | null;
    public KW_FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_FROM);
    	} else {
    		return this.getToken(SqlParser.KW_FROM, i);
    	}
    }
    public KW_IN(): antlr.TerminalNode[];
    public KW_IN(i: number): antlr.TerminalNode | null;
    public KW_IN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_IN);
    	} else {
    		return this.getToken(SqlParser.KW_IN, i);
    	}
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShowColumns) {
             listener.enterShowColumns(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShowColumns) {
             listener.exitShowColumns(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowColumns) {
            return visitor.visitShowColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowOtherContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SHOW, 0)!;
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GRANT, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PRINCIPALS, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLES, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMPACTIONS, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INDEXES, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCKS, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CURRENT, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CREATE, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLE, 0);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterShowOther) {
             listener.enterShowOther(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitShowOther) {
             listener.exitShowOther(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowOther) {
            return visitor.visitShowOther(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedCommandsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GRANT, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REVOKE, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLE, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLE, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXPORT, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IMPORT, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCK, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNLOCK, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATABASE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_START, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRANSACTION, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMMIT, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLLBACK, 0);
    }
    public KW_DFS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DFS, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_unsupportedCommands;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUnsupportedCommands) {
             listener.enterUnsupportedCommands(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUnsupportedCommands) {
             listener.exitUnsupportedCommands(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnsupportedCommands) {
            return visitor.visitUnsupportedCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BucketSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTERED(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_CLUSTERED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_BY);
    	} else {
    		return this.getToken(SqlParser.KW_BY, i);
    	}
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_INTO, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(SqlParser.INTEGER_VALUE, 0)!;
    }
    public KW_BUCKETS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_BUCKETS, 0)!;
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SORTED, 0);
    }
    public orderedIdentifierList(): OrderedIdentifierListContext | null {
        return this.getRuleContext(0, OrderedIdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_bucketSpec;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterBucketSpec) {
             listener.enterBucketSpec(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitBucketSpec) {
             listener.exitBucketSpec(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitBucketSpec) {
            return visitor.visitBucketSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SKEWED(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SKEWED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_BY, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_ON, 0)!;
    }
    public constantList(): ConstantListContext | null {
        return this.getRuleContext(0, ConstantListContext);
    }
    public nestedConstantList(): NestedConstantListContext | null {
        return this.getRuleContext(0, NestedConstantListContext);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STORED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DIRECTORIES, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_skewSpec;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterSkewSpec) {
             listener.enterSkewSpec(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitSkewSpec) {
             listener.exitSkewSpec(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitSkewSpec) {
            return visitor.visitSkewSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_query;
    }
    public override copyFrom(ctx: QueryContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryStatementContext extends QueryContext {
    public constructor(ctx: QueryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryTerm(): QueryTermContext {
        return this.getRuleContext(0, QueryTermContext)!;
    }
    public queryOrganization(): QueryOrganizationContext {
        return this.getRuleContext(0, QueryOrganizationContext)!;
    }
    public ctes(): CtesContext | null {
        return this.getRuleContext(0, CtesContext);
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterQueryStatement) {
             listener.enterQueryStatement(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitQueryStatement) {
             listener.exitQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryStatement) {
            return visitor.visitQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecLocationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionSpec(): PartitionSpecContext {
        return this.getRuleContext(0, PartitionSpecContext)!;
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCATION, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_partitionSpecLocation;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPartitionSpecLocation) {
             listener.enterPartitionSpecLocation(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPartitionSpecLocation) {
             listener.exitPartitionSpecLocation(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpecLocation) {
            return visitor.visitPartitionSpecLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_PARTITION, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public partitionVal(): PartitionValContext[];
    public partitionVal(i: number): PartitionValContext | null;
    public partitionVal(i?: number): PartitionValContext[] | PartitionValContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValContext);
        }

        return this.getRuleContext(i, PartitionValContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_partitionSpec;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPartitionSpec) {
             listener.enterPartitionSpec(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPartitionSpec) {
             listener.exitPartitionSpec(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpec) {
            return visitor.visitPartitionSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.EQ, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_partitionVal;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPartitionVal) {
             listener.enterPartitionVal(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPartitionVal) {
             listener.exitPartitionVal(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionVal) {
            return visitor.visitPartitionVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NAMESPACE, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATABASE, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_namespace;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNamespace) {
             listener.enterNamespace(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNamespace) {
             listener.exitNamespace(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamespace) {
            return visitor.visitNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeFuncNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext | null {
        return this.getRuleContext(0, IdentifierReferenceContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public comparisonOperator(): ComparisonOperatorContext | null {
        return this.getRuleContext(0, ComparisonOperatorContext);
    }
    public arithmeticOperator(): ArithmeticOperatorContext | null {
        return this.getRuleContext(0, ArithmeticOperatorContext);
    }
    public predicateOperator(): PredicateOperatorContext | null {
        return this.getRuleContext(0, PredicateOperatorContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_describeFuncName;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDescribeFuncName) {
             listener.enterDescribeFuncName(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDescribeFuncName) {
             listener.exitDescribeFuncName(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeFuncName) {
            return visitor.visitDescribeFuncName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeColNameContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _nameParts: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.DOT);
    	} else {
    		return this.getToken(SqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_describeColName;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDescribeColName) {
             listener.enterDescribeColName(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDescribeColName) {
             listener.exitDescribeColName(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeColName) {
            return visitor.visitDescribeColName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CtesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_WITH, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_ctes;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCtes) {
             listener.enterCtes(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCtes) {
             listener.exitCtes(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCtes) {
            return visitor.visitCtes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public _columnAliases?: IdentifierListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_namedQuery;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNamedQuery) {
             listener.enterNamedQuery(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNamedQuery) {
             listener.exitNamedQuery(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableProviderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_USING, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_tableProvider;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterTableProvider) {
             listener.enterTableProvider(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitTableProvider) {
             listener.exitTableProvider(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableProvider) {
            return visitor.visitTableProvider(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableClausesContext extends antlr.ParserRuleContext {
    public _options?: ExpressionPropertyListContext;
    public _partitioning?: PartitionFieldListContext;
    public _comment?: StringLitContext;
    public _tableProps?: PropertyListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public skewSpec(): SkewSpecContext[];
    public skewSpec(i: number): SkewSpecContext | null;
    public skewSpec(i?: number): SkewSpecContext[] | SkewSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewSpecContext);
        }

        return this.getRuleContext(i, SkewSpecContext);
    }
    public bucketSpec(): BucketSpecContext[];
    public bucketSpec(i: number): BucketSpecContext | null;
    public bucketSpec(i?: number): BucketSpecContext[] | BucketSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BucketSpecContext);
        }

        return this.getRuleContext(i, BucketSpecContext);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext[];
    public createFileFormat(i: number): CreateFileFormatContext | null;
    public createFileFormat(i?: number): CreateFileFormatContext[] | CreateFileFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateFileFormatContext);
        }

        return this.getRuleContext(i, CreateFileFormatContext);
    }
    public tableLifecycle(): TableLifecycleContext[];
    public tableLifecycle(i: number): TableLifecycleContext | null;
    public tableLifecycle(i?: number): TableLifecycleContext[] | TableLifecycleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableLifecycleContext);
        }

        return this.getRuleContext(i, TableLifecycleContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode[];
    public KW_OPTIONS(i: number): antlr.TerminalNode | null;
    public KW_OPTIONS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_OPTIONS);
    	} else {
    		return this.getToken(SqlParser.KW_OPTIONS, i);
    	}
    }
    public KW_PARTITIONED(): antlr.TerminalNode[];
    public KW_PARTITIONED(i: number): antlr.TerminalNode | null;
    public KW_PARTITIONED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_PARTITIONED);
    	} else {
    		return this.getToken(SqlParser.KW_PARTITIONED, i);
    	}
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_BY);
    	} else {
    		return this.getToken(SqlParser.KW_BY, i);
    	}
    }
    public KW_LOCATION(): antlr.TerminalNode[];
    public KW_LOCATION(i: number): antlr.TerminalNode | null;
    public KW_LOCATION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_LOCATION);
    	} else {
    		return this.getToken(SqlParser.KW_LOCATION, i);
    	}
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_COMMENT(): antlr.TerminalNode[];
    public KW_COMMENT(i: number): antlr.TerminalNode | null;
    public KW_COMMENT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_COMMENT);
    	} else {
    		return this.getToken(SqlParser.KW_COMMENT, i);
    	}
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public expressionPropertyList(): ExpressionPropertyListContext[];
    public expressionPropertyList(i: number): ExpressionPropertyListContext | null;
    public expressionPropertyList(i?: number): ExpressionPropertyListContext[] | ExpressionPropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionPropertyListContext);
        }

        return this.getRuleContext(i, ExpressionPropertyListContext);
    }
    public partitionFieldList(): PartitionFieldListContext[];
    public partitionFieldList(i: number): PartitionFieldListContext | null;
    public partitionFieldList(i?: number): PartitionFieldListContext[] | PartitionFieldListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionFieldListContext);
        }

        return this.getRuleContext(i, PartitionFieldListContext);
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_createTableClauses;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreateTableClauses) {
             listener.enterCreateTableClauses(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreateTableClauses) {
             listener.exitCreateTableClauses(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableClauses) {
            return visitor.visitCreateTableClauses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableLifecycleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIFECYCLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_LIFECYCLE, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(SqlParser.INTEGER_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_tableLifecycle;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterTableLifecycle) {
             listener.enterTableLifecycle(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitTableLifecycle) {
             listener.exitTableLifecycle(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableLifecycle) {
            return visitor.visitTableLifecycle(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public property(): PropertyContext[];
    public property(i: number): PropertyContext | null;
    public property(i?: number): PropertyContext[] | PropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyContext);
        }

        return this.getRuleContext(i, PropertyContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_propertyList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPropertyList) {
             listener.enterPropertyList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPropertyList) {
             listener.exitPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyList) {
            return visitor.visitPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyContext extends antlr.ParserRuleContext {
    public _key?: PropertyKeyContext;
    public _value?: PropertyValueContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyKey(): PropertyKeyContext {
        return this.getRuleContext(0, PropertyKeyContext)!;
    }
    public propertyValue(): PropertyValueContext | null {
        return this.getRuleContext(0, PropertyValueContext);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.EQ, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_property;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterProperty) {
             listener.enterProperty(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitProperty) {
             listener.exitProperty(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitProperty) {
            return visitor.visitProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.DOT);
    	} else {
    		return this.getToken(SqlParser.DOT, i);
    	}
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_propertyKey;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPropertyKey) {
             listener.enterPropertyKey(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPropertyKey) {
             listener.exitPropertyKey(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyKey) {
            return visitor.visitPropertyKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.INTEGER_VALUE, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.DECIMAL_VALUE, 0);
    }
    public booleanValue(): BooleanValueContext | null {
        return this.getRuleContext(0, BooleanValueContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_propertyValue;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPropertyValue) {
             listener.enterPropertyValue(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPropertyValue) {
             listener.exitPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyValue) {
            return visitor.visitPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionPropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public expressionProperty(): ExpressionPropertyContext[];
    public expressionProperty(i: number): ExpressionPropertyContext | null;
    public expressionProperty(i?: number): ExpressionPropertyContext[] | ExpressionPropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionPropertyContext);
        }

        return this.getRuleContext(i, ExpressionPropertyContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_expressionPropertyList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterExpressionPropertyList) {
             listener.enterExpressionPropertyList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitExpressionPropertyList) {
             listener.exitExpressionPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionPropertyList) {
            return visitor.visitExpressionPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionPropertyContext extends antlr.ParserRuleContext {
    public _key?: PropertyKeyContext;
    public _value?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyKey(): PropertyKeyContext {
        return this.getRuleContext(0, PropertyKeyContext)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.EQ, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_expressionProperty;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterExpressionProperty) {
             listener.enterExpressionProperty(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitExpressionProperty) {
             listener.exitExpressionProperty(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionProperty) {
            return visitor.visitExpressionProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_constantList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterConstantList) {
             listener.enterConstantList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitConstantList) {
             listener.exitConstantList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstantList) {
            return visitor.visitConstantList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NestedConstantListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public constantList(): ConstantListContext[];
    public constantList(i: number): ConstantListContext | null;
    public constantList(i?: number): ConstantListContext[] | ConstantListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantListContext);
        }

        return this.getRuleContext(i, ConstantListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_nestedConstantList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNestedConstantList) {
             listener.enterNestedConstantList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNestedConstantList) {
             listener.exitNestedConstantList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNestedConstantList) {
            return visitor.visitNestedConstantList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFileFormatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORED(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_STORED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public fileFormat(): FileFormatContext | null {
        return this.getRuleContext(0, FileFormatContext);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BY, 0);
    }
    public storageHandler(): StorageHandlerContext | null {
        return this.getRuleContext(0, StorageHandlerContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_createFileFormat;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreateFileFormat) {
             listener.enterCreateFileFormat(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreateFileFormat) {
             listener.exitCreateFileFormat(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFileFormat) {
            return visitor.visitCreateFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: StringLitContext;
    public _outFmt?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OUTPUTFORMAT, 0);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_fileFormat;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterFileFormat) {
             listener.enterFileFormat(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitFileFormat) {
             listener.exitFileFormat(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitFileFormat) {
            return visitor.visitFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StorageHandlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SERDEPROPERTIES, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_storageHandler;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterStorageHandler) {
             listener.enterStorageHandler(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitStorageHandler) {
             listener.exitStorageHandler(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitStorageHandler) {
            return visitor.visitStorageHandler(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamespaceNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext {
        return this.getRuleContext(0, IdentifierReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_namespaceName;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNamespaceName) {
             listener.enterNamespaceName(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNamespaceName) {
             listener.exitNamespaceName(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamespaceName) {
            return visitor.visitNamespaceName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamespaceNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext {
        return this.getRuleContext(0, IdentifierReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_namespaceNameCreate;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNamespaceNameCreate) {
             listener.enterNamespaceNameCreate(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNamespaceNameCreate) {
             listener.exitNamespaceNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamespaceNameCreate) {
            return visitor.visitNamespaceNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_tableNameCreate;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterTableNameCreate) {
             listener.enterTableNameCreate(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitTableNameCreate) {
             listener.exitTableNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableNameCreate) {
            return visitor.visitTableNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_tableName;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_viewNameCreate;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterViewNameCreate) {
             listener.enterViewNameCreate(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitViewNameCreate) {
             listener.exitViewNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewNameCreate) {
            return visitor.visitViewNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_viewName;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterViewName) {
             listener.enterViewName(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitViewName) {
             listener.exitViewName(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewName) {
            return visitor.visitViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_columnName;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_columnNameSeq;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterColumnNameSeq) {
             listener.enterColumnNameSeq(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitColumnNameSeq) {
             listener.exitColumnNameSeq(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameSeq) {
            return visitor.visitColumnNameSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_columnNameCreate;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterColumnNameCreate) {
             listener.enterColumnNameCreate(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitColumnNameCreate) {
             listener.exitColumnNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCreate) {
            return visitor.visitColumnNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IDENTIFIER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_identifierReference;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterIdentifierReference) {
             listener.enterIdentifierReference(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitIdentifierReference) {
             listener.exitIdentifierReference(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierReference) {
            return visitor.visitIdentifierReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryOrganizationContext extends antlr.ParserRuleContext {
    public _sortItem?: SortItemContext;
    public _order: SortItemContext[] = [];
    public _expression?: ExpressionContext;
    public _clusterBy: ExpressionContext[] = [];
    public _distributeBy: ExpressionContext[] = [];
    public _sort: SortItemContext[] = [];
    public _limit?: ExpressionContext;
    public _offset?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_BY);
    	} else {
    		return this.getToken(SqlParser.KW_BY, i);
    	}
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CLUSTER, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SORT, 0);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIMIT, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OFFSET, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ALL, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_queryOrganization;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterQueryOrganization) {
             listener.enterQueryOrganization(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitQueryOrganization) {
             listener.exitQueryOrganization(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryOrganization) {
            return visitor.visitQueryOrganization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryTermContext extends antlr.ParserRuleContext {
    public _left?: QueryTermContext;
    public _operator?: Token | null;
    public _right?: QueryTermContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryPrimary(): QueryPrimaryContext | null {
        return this.getRuleContext(0, QueryPrimaryContext);
    }
    public queryTerm(): QueryTermContext[];
    public queryTerm(i: number): QueryTermContext | null;
    public queryTerm(i?: number): QueryTermContext[] | QueryTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryTermContext);
        }

        return this.getRuleContext(i, QueryTermContext);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INTERSECT, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNION, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXCEPT, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MINUS, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_queryTerm;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterQueryTerm) {
             listener.enterQueryTerm(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitQueryTerm) {
             listener.exitQueryTerm(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryTerm) {
            return visitor.visitQueryTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public querySpecification(): QuerySpecificationContext | null {
        return this.getRuleContext(0, QuerySpecificationContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public fromStatementBody(): FromStatementBodyContext[];
    public fromStatementBody(i: number): FromStatementBodyContext | null;
    public fromStatementBody(i?: number): FromStatementBodyContext[] | FromStatementBodyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FromStatementBodyContext);
        }

        return this.getRuleContext(i, FromStatementBodyContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VALUES, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_queryPrimary;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterQueryPrimary) {
             listener.enterQueryPrimary(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitQueryPrimary) {
             listener.exitQueryPrimary(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryPrimary) {
            return visitor.visitQueryPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortItemContext extends antlr.ParserRuleContext {
    public _ordering?: Token | null;
    public _nullOrder?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULLS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESC, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LAST, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FIRST, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_sortItem;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterSortItem) {
             listener.enterSortItem(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitSortItem) {
             listener.exitSortItem(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitSortItem) {
            return visitor.visitSortItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromStatementBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transformClause(): TransformClauseContext | null {
        return this.getRuleContext(0, TransformClauseContext);
    }
    public queryOrganization(): QueryOrganizationContext {
        return this.getRuleContext(0, QueryOrganizationContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public aggregationClause(): AggregationClauseContext | null {
        return this.getRuleContext(0, AggregationClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_fromStatementBody;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterFromStatementBody) {
             listener.enterFromStatementBody(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitFromStatementBody) {
             listener.exitFromStatementBody(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromStatementBody) {
            return visitor.visitFromStatementBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transformClause(): TransformClauseContext | null {
        return this.getRuleContext(0, TransformClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public aggregationClause(): AggregationClauseContext | null {
        return this.getRuleContext(0, AggregationClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_querySpecification;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterQuerySpecification) {
             listener.enterQuerySpecification(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitQuerySpecification) {
             listener.exitQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuerySpecification) {
            return visitor.visitQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformClauseContext extends antlr.ParserRuleContext {
    public _kind?: Token | null;
    public _inRowFormat?: RowFormatContext;
    public _recordWriter?: StringLitContext;
    public _script?: StringLitContext;
    public _outRowFormat?: RowFormatContext;
    public _recordReader?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_USING, 0)!;
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SELECT, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SqlParser.LEFT_PAREN, i);
    	}
    }
    public expressionSeq(): ExpressionSeqContext | null {
        return this.getRuleContext(0, ExpressionSeqContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SqlParser.RIGHT_PAREN, i);
    	}
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRANSFORM, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MAP, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REDUCE, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RECORDWRITER, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RECORDREADER, 0);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public identifierSeq(): IdentifierSeqContext | null {
        return this.getRuleContext(0, IdentifierSeqContext);
    }
    public colTypeList(): ColTypeListContext | null {
        return this.getRuleContext(0, ColTypeListContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_transformClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterTransformClause) {
             listener.enterTransformClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitTransformClause) {
             listener.exitTransformClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransformClause) {
            return visitor.visitTransformClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectClauseContext extends antlr.ParserRuleContext {
    public _hint?: HintContext;
    public _hints: HintContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SELECT, 0)!;
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        return this.getRuleContext(0, NamedExpressionSeqContext)!;
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public hint(): HintContext[];
    public hint(i: number): HintContext | null;
    public hint(i?: number): HintContext[] | HintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintContext);
        }

        return this.getRuleContext(i, HintContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_selectClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterSelectClause) {
             listener.enterSelectClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitSelectClause) {
             listener.exitSelectClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectClause) {
            return visitor.visitSelectClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SET, 0)!;
    }
    public assignmentList(): AssignmentListContext {
        return this.getRuleContext(0, AssignmentListContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_setClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterSetClause) {
             listener.enterSetClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitSetClause) {
             listener.exitSetClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetClause) {
            return visitor.visitSetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MatchedClauseContext extends antlr.ParserRuleContext {
    public _matchedCond?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_THEN, 0)!;
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DELETE, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UPDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SET, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AND, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.ASTERISK, 0);
    }
    public assignmentList(): AssignmentListContext | null {
        return this.getRuleContext(0, AssignmentListContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_matchedClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterMatchedClause) {
             listener.enterMatchedClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitMatchedClause) {
             listener.exitMatchedClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitMatchedClause) {
            return visitor.visitMatchedClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedClauseContext extends antlr.ParserRuleContext {
    public _notMatchedCond?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_WHEN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_NOT, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_THEN, 0)!;
    }
    public notMatchedAction(): NotMatchedActionContext {
        return this.getRuleContext(0, NotMatchedActionContext)!;
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BY, 0);
    }
    public KW_TARGET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TARGET, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AND, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_notMatchedClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNotMatchedClause) {
             listener.enterNotMatchedClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNotMatchedClause) {
             listener.exitNotMatchedClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedClause) {
            return visitor.visitNotMatchedClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedBySourceClauseContext extends antlr.ParserRuleContext {
    public _notMatchedBySourceCond?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_WHEN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_NOT, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_MATCHED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_BY, 0)!;
    }
    public KW_SOURCE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_SOURCE, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_THEN, 0)!;
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DELETE, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UPDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SET, 0);
    }
    public assignmentList(): AssignmentListContext | null {
        return this.getRuleContext(0, AssignmentListContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AND, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_notMatchedBySourceClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNotMatchedBySourceClause) {
             listener.enterNotMatchedBySourceClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNotMatchedBySourceClause) {
             listener.exitNotMatchedBySourceClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedBySourceClause) {
            return visitor.visitNotMatchedBySourceClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_INSERT, 0)!;
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.ASTERISK, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SqlParser.LEFT_PAREN, i);
    	}
    }
    public multipartIdentifierList(): MultipartIdentifierListContext | null {
        return this.getRuleContext(0, MultipartIdentifierListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SqlParser.RIGHT_PAREN, i);
    	}
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VALUES, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_notMatchedAction;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNotMatchedAction) {
             listener.enterNotMatchedAction(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNotMatchedAction) {
             listener.exitNotMatchedAction(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedAction) {
            return visitor.visitNotMatchedAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignment(): AssignmentContext[];
    public assignment(i: number): AssignmentContext | null;
    public assignment(i?: number): AssignmentContext[] | AssignmentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AssignmentContext);
        }

        return this.getRuleContext(i, AssignmentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_assignmentList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterAssignmentList) {
             listener.enterAssignmentList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitAssignmentList) {
             listener.exitAssignmentList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentList) {
            return visitor.visitAssignmentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentContext extends antlr.ParserRuleContext {
    public _key?: MultipartIdentifierContext;
    public _value?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SqlParser.EQ, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_assignment;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterAssignment) {
             listener.enterAssignment(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitAssignment) {
             listener.exitAssignment(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssignment) {
            return visitor.visitAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_WHERE, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_whereClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HAVING(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_HAVING, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_havingClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintContext extends antlr.ParserRuleContext {
    public _hintStatement?: HintStatementContext;
    public _hintStatements: HintStatementContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HENT_START(): antlr.TerminalNode {
        return this.getToken(SqlParser.HENT_START, 0)!;
    }
    public HENT_END(): antlr.TerminalNode {
        return this.getToken(SqlParser.HENT_END, 0)!;
    }
    public hintStatement(): HintStatementContext[];
    public hintStatement(i: number): HintStatementContext | null;
    public hintStatement(i?: number): HintStatementContext[] | HintStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintStatementContext);
        }

        return this.getRuleContext(i, HintStatementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_hint;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterHint) {
             listener.enterHint(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitHint) {
             listener.exitHint(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitHint) {
            return visitor.visitHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintStatementContext extends antlr.ParserRuleContext {
    public _hintName?: IdentifierContext;
    public _primaryExpression?: PrimaryExpressionContext;
    public _parameters: PrimaryExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public primaryExpression(): PrimaryExpressionContext[];
    public primaryExpression(i: number): PrimaryExpressionContext | null;
    public primaryExpression(i?: number): PrimaryExpressionContext[] | PrimaryExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryExpressionContext);
        }

        return this.getRuleContext(i, PrimaryExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_hintStatement;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterHintStatement) {
             listener.enterHintStatement(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitHintStatement) {
             listener.exitHintStatement(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitHintStatement) {
            return visitor.visitHintStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_FROM, 0)!;
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public pivotClause(): PivotClauseContext | null {
        return this.getRuleContext(0, PivotClauseContext);
    }
    public unpivotClause(): UnpivotClauseContext | null {
        return this.getRuleContext(0, UnpivotClauseContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_fromClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterFromClause) {
             listener.enterFromClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitFromClause) {
             listener.exitFromClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TemporalClauseContext extends antlr.ParserRuleContext {
    public _timestamp?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_AS, 0)!;
    }
    public KW_OF(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_OF, 0)!;
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VERSION, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.INTEGER_VALUE, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FOR, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_temporalClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterTemporalClause) {
             listener.enterTemporalClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitTemporalClause) {
             listener.exitTemporalClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitTemporalClause) {
            return visitor.visitTemporalClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregationClauseContext extends antlr.ParserRuleContext {
    public _groupByClause?: GroupByClauseContext;
    public _groupingExpressionsWithGroupingAnalytics: GroupByClauseContext[] = [];
    public _expression?: ExpressionContext;
    public _groupingExpressions: ExpressionContext[] = [];
    public _kind?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_GROUP, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_BY, 0)!;
    }
    public groupByClause(): GroupByClauseContext[];
    public groupByClause(i: number): GroupByClauseContext | null;
    public groupByClause(i?: number): GroupByClauseContext[] | GroupByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupByClauseContext);
        }

        return this.getRuleContext(i, GroupByClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WITH, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SETS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CUBE, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GROUPING, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_aggregationClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterAggregationClause) {
             listener.enterAggregationClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitAggregationClause) {
             listener.exitAggregationClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggregationClause) {
            return visitor.visitAggregationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public groupingAnalytics(): GroupingAnalyticsContext | null {
        return this.getRuleContext(0, GroupingAnalyticsContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_groupByClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterGroupByClause) {
             listener.enterGroupByClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitGroupByClause) {
             listener.exitGroupByClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingAnalyticsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CUBE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GROUPING, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SETS, 0);
    }
    public groupingAnalytics(): GroupingAnalyticsContext[];
    public groupingAnalytics(i: number): GroupingAnalyticsContext | null;
    public groupingAnalytics(i?: number): GroupingAnalyticsContext[] | GroupingAnalyticsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingAnalyticsContext);
        }

        return this.getRuleContext(i, GroupingAnalyticsContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_groupingAnalytics;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterGroupingAnalytics) {
             listener.enterGroupingAnalytics(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitGroupingAnalytics) {
             listener.exitGroupingAnalytics(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingAnalytics) {
            return visitor.visitGroupingAnalytics(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_groupingSet;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterGroupingSet) {
             listener.enterGroupingSet(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitGroupingSet) {
             listener.exitGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingSet) {
            return visitor.visitGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotClauseContext extends antlr.ParserRuleContext {
    public _aggregates?: NamedExpressionSeqContext;
    public _pivotValue?: PivotValueContext;
    public _pivotValues: PivotValueContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PIVOT(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_PIVOT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SqlParser.LEFT_PAREN, i);
    	}
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_FOR, 0)!;
    }
    public pivotColumn(): PivotColumnContext {
        return this.getRuleContext(0, PivotColumnContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_IN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SqlParser.RIGHT_PAREN, i);
    	}
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        return this.getRuleContext(0, NamedExpressionSeqContext)!;
    }
    public pivotValue(): PivotValueContext[];
    public pivotValue(i: number): PivotValueContext | null;
    public pivotValue(i?: number): PivotValueContext[] | PivotValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PivotValueContext);
        }

        return this.getRuleContext(i, PivotValueContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_pivotClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPivotClause) {
             listener.enterPivotClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPivotClause) {
             listener.exitPivotClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPivotClause) {
            return visitor.visitPivotClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotColumnContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _identifiers: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_pivotColumn;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPivotColumn) {
             listener.enterPivotColumn(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPivotColumn) {
             listener.exitPivotColumn(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPivotColumn) {
            return visitor.visitPivotColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_pivotValue;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPivotValue) {
             listener.enterPivotValue(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPivotValue) {
             listener.exitPivotValue(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPivotValue) {
            return visitor.visitPivotValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNPIVOT(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_UNPIVOT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public unpivotSingleValueColumnClause(): UnpivotSingleValueColumnClauseContext | null {
        return this.getRuleContext(0, UnpivotSingleValueColumnClauseContext);
    }
    public unpivotMultiValueColumnClause(): UnpivotMultiValueColumnClauseContext | null {
        return this.getRuleContext(0, UnpivotMultiValueColumnClauseContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULLS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INCLUDE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXCLUDE, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_unpivotClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUnpivotClause) {
             listener.enterUnpivotClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUnpivotClause) {
             listener.exitUnpivotClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotClause) {
            return visitor.visitUnpivotClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotSingleValueColumnClauseContext extends antlr.ParserRuleContext {
    public _unpivotColumnAndAlias?: UnpivotColumnAndAliasContext;
    public _unpivotColumns: UnpivotColumnAndAliasContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_FOR, 0)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_IN, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public unpivotColumnAndAlias(): UnpivotColumnAndAliasContext[];
    public unpivotColumnAndAlias(i: number): UnpivotColumnAndAliasContext | null;
    public unpivotColumnAndAlias(i?: number): UnpivotColumnAndAliasContext[] | UnpivotColumnAndAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnpivotColumnAndAliasContext);
        }

        return this.getRuleContext(i, UnpivotColumnAndAliasContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_unpivotSingleValueColumnClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUnpivotSingleValueColumnClause) {
             listener.enterUnpivotSingleValueColumnClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUnpivotSingleValueColumnClause) {
             listener.exitUnpivotSingleValueColumnClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotSingleValueColumnClause) {
            return visitor.visitUnpivotSingleValueColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotMultiValueColumnClauseContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _unpivotValueColumns: IdentifierContext[] = [];
    public _unpivotColumnSet?: UnpivotColumnSetContext;
    public _unpivotColumnSets: UnpivotColumnSetContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SqlParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SqlParser.RIGHT_PAREN, i);
    	}
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_FOR, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_IN, 0)!;
    }
    public unpivotColumnSet(): UnpivotColumnSetContext[];
    public unpivotColumnSet(i: number): UnpivotColumnSetContext | null;
    public unpivotColumnSet(i?: number): UnpivotColumnSetContext[] | UnpivotColumnSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnpivotColumnSetContext);
        }

        return this.getRuleContext(i, UnpivotColumnSetContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_unpivotMultiValueColumnClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUnpivotMultiValueColumnClause) {
             listener.enterUnpivotMultiValueColumnClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUnpivotMultiValueColumnClause) {
             listener.exitUnpivotMultiValueColumnClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotMultiValueColumnClause) {
            return visitor.visitUnpivotMultiValueColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotColumnSetContext extends antlr.ParserRuleContext {
    public _multipartIdentifier?: MultipartIdentifierContext;
    public _unpivotColumns: MultipartIdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext[];
    public multipartIdentifier(i: number): MultipartIdentifierContext | null;
    public multipartIdentifier(i?: number): MultipartIdentifierContext[] | MultipartIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierContext);
        }

        return this.getRuleContext(i, MultipartIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_unpivotColumnSet;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUnpivotColumnSet) {
             listener.enterUnpivotColumnSet(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUnpivotColumnSet) {
             listener.exitUnpivotColumnSet(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotColumnSet) {
            return visitor.visitUnpivotColumnSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotColumnAndAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_unpivotColumnAndAlias;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUnpivotColumnAndAlias) {
             listener.enterUnpivotColumnAndAlias(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUnpivotColumnAndAlias) {
             listener.exitUnpivotColumnAndAlias(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotColumnAndAlias) {
            return visitor.visitUnpivotColumnAndAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfNotExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_IF, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_NOT, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_ifNotExists;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterIfNotExists) {
             listener.enterIfNotExists(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitIfNotExists) {
             listener.exitIfNotExists(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_IF, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_ifExists;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterIfExists) {
             listener.enterIfExists(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitIfExists) {
             listener.exitIfExists(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LateralViewContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _colName: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LATERAL(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_LATERAL, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OUTER, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_lateralView;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterLateralView) {
             listener.enterLateralView(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitLateralView) {
             listener.exitLateralView(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitLateralView) {
            return visitor.visitLateralView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DISTINCT, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_setQuantifier;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterSetQuantifier) {
             listener.enterSetQuantifier(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitSetQuantifier) {
             listener.exitSetQuantifier(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public relationPrimary(): RelationPrimaryContext | null {
        return this.getRuleContext(0, RelationPrimaryContext);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LATERAL, 0);
    }
    public joinRelation(): JoinRelationContext[];
    public joinRelation(i: number): JoinRelationContext | null;
    public joinRelation(i?: number): JoinRelationContext[] | JoinRelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinRelationContext);
        }

        return this.getRuleContext(i, JoinRelationContext);
    }
    public pivotClause(): PivotClauseContext[];
    public pivotClause(i: number): PivotClauseContext | null;
    public pivotClause(i?: number): PivotClauseContext[] | PivotClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PivotClauseContext);
        }

        return this.getRuleContext(i, PivotClauseContext);
    }
    public unpivotClause(): UnpivotClauseContext[];
    public unpivotClause(i: number): UnpivotClauseContext | null;
    public unpivotClause(i?: number): UnpivotClauseContext[] | UnpivotClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnpivotClauseContext);
        }

        return this.getRuleContext(i, UnpivotClauseContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_relation;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterRelation) {
             listener.enterRelation(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitRelation) {
             listener.exitRelation(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelation) {
            return visitor.visitRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinRelationContext extends antlr.ParserRuleContext {
    public _right?: RelationPrimaryContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_JOIN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_JOIN, 0)!;
    }
    public relationPrimary(): RelationPrimaryContext {
        return this.getRuleContext(0, RelationPrimaryContext)!;
    }
    public joinType(): JoinTypeContext | null {
        return this.getRuleContext(0, JoinTypeContext);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LATERAL, 0);
    }
    public joinCriteria(): JoinCriteriaContext | null {
        return this.getRuleContext(0, JoinCriteriaContext);
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NATURAL, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_joinRelation;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterJoinRelation) {
             listener.enterJoinRelation(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitJoinRelation) {
             listener.exitJoinRelation(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinRelation) {
            return visitor.visitJoinRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INNER, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CROSS, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LEFT, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OUTER, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SEMI, 0);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ANTI, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RIGHT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FULL, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_joinType;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterJoinType) {
             listener.enterJoinType(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitJoinType) {
             listener.exitJoinType(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinType) {
            return visitor.visitJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinCriteriaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ON, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_USING, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_joinCriteria;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterJoinCriteria) {
             listener.enterJoinCriteria(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitJoinCriteria) {
             listener.exitJoinCriteria(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinCriteria) {
            return visitor.visitJoinCriteria(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleContext extends antlr.ParserRuleContext {
    public _seed?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLESAMPLE, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SqlParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SqlParser.RIGHT_PAREN, i);
    	}
    }
    public sampleMethod(): SampleMethodContext | null {
        return this.getRuleContext(0, SampleMethodContext);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPEATABLE, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.INTEGER_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_sample;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterSample) {
             listener.enterSample(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitSample) {
             listener.exitSample(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitSample) {
            return visitor.visitSample(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleMethodContext extends antlr.ParserRuleContext {
    public _negativeSign?: Token | null;
    public _percentage?: Token | null;
    public _sampleType?: Token | null;
    public _numerator?: Token | null;
    public _denominator?: Token | null;
    public _bytes?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PERCENTLIT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PERCENTLIT, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(SqlParser.INTEGER_VALUE, i);
    	}
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.DECIMAL_VALUE, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.MINUS, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROWS, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OUT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OF, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BUCKET, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ON, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_sampleMethod;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterSampleMethod) {
             listener.enterSampleMethod(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitSampleMethod) {
             listener.exitSampleMethod(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitSampleMethod) {
            return visitor.visitSampleMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public identifierSeq(): IdentifierSeqContext {
        return this.getRuleContext(0, IdentifierSeqContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_identifierList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterIdentifierList) {
             listener.enterIdentifierList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitIdentifierList) {
             listener.exitIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierList) {
            return visitor.visitIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierSeqContext extends antlr.ParserRuleContext {
    public _errorCapturingIdentifier?: ErrorCapturingIdentifierContext;
    public _ident: ErrorCapturingIdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_identifierSeq;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterIdentifierSeq) {
             listener.enterIdentifierSeq(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitIdentifierSeq) {
             listener.exitIdentifierSeq(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierSeq) {
            return visitor.visitIdentifierSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderedIdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public orderedIdentifier(): OrderedIdentifierContext[];
    public orderedIdentifier(i: number): OrderedIdentifierContext | null;
    public orderedIdentifier(i?: number): OrderedIdentifierContext[] | OrderedIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderedIdentifierContext);
        }

        return this.getRuleContext(i, OrderedIdentifierContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_orderedIdentifierList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterOrderedIdentifierList) {
             listener.enterOrderedIdentifierList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitOrderedIdentifierList) {
             listener.exitOrderedIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderedIdentifierList) {
            return visitor.visitOrderedIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderedIdentifierContext extends antlr.ParserRuleContext {
    public _ident?: ErrorCapturingIdentifierContext;
    public _ordering?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESC, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_orderedIdentifier;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterOrderedIdentifier) {
             listener.enterOrderedIdentifier(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitOrderedIdentifier) {
             listener.exitOrderedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderedIdentifier) {
            return visitor.visitOrderedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierCommentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public identifierComment(): IdentifierCommentContext[];
    public identifierComment(i: number): IdentifierCommentContext | null;
    public identifierComment(i?: number): IdentifierCommentContext[] | IdentifierCommentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierCommentContext);
        }

        return this.getRuleContext(i, IdentifierCommentContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_identifierCommentList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterIdentifierCommentList) {
             listener.enterIdentifierCommentList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitIdentifierCommentList) {
             listener.exitIdentifierCommentList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierCommentList) {
            return visitor.visitIdentifierCommentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierCommentContext extends antlr.ParserRuleContext {
    public _comment?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMMENT, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_identifierComment;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterIdentifierComment) {
             listener.enterIdentifierComment(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitIdentifierComment) {
             listener.exitIdentifierComment(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierComment) {
            return visitor.visitIdentifierComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public identifierReference(): IdentifierReferenceContext | null {
        return this.getRuleContext(0, IdentifierReferenceContext);
    }
    public temporalClause(): TemporalClauseContext | null {
        return this.getRuleContext(0, TemporalClauseContext);
    }
    public sample(): SampleContext | null {
        return this.getRuleContext(0, SampleContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public relation(): RelationContext | null {
        return this.getRuleContext(0, RelationContext);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VALUES, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public functionTableArgument(): FunctionTableArgumentContext[];
    public functionTableArgument(i: number): FunctionTableArgumentContext | null;
    public functionTableArgument(i?: number): FunctionTableArgumentContext[] | FunctionTableArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionTableArgumentContext);
        }

        return this.getRuleContext(i, FunctionTableArgumentContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_relationPrimary;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterRelationPrimary) {
             listener.enterRelationPrimary(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitRelationPrimary) {
             listener.exitRelationPrimary(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelationPrimary) {
            return visitor.visitRelationPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableSubqueryArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public tableArgumentPartitioning(): TableArgumentPartitioningContext | null {
        return this.getRuleContext(0, TableArgumentPartitioningContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_functionTableSubqueryArgument;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterFunctionTableSubqueryArgument) {
             listener.enterFunctionTableSubqueryArgument(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitFunctionTableSubqueryArgument) {
             listener.exitFunctionTableSubqueryArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableSubqueryArgument) {
            return visitor.visitFunctionTableSubqueryArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentPartitioningContext extends antlr.ParserRuleContext {
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_BY);
    	} else {
    		return this.getToken(SqlParser.KW_BY, i);
    	}
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WITH, 0);
    }
    public KW_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SINGLE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PARTITION, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ORDER, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SORT, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DISTRIBUTE, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SqlParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SqlParser.RIGHT_PAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_tableArgumentPartitioning;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterTableArgumentPartitioning) {
             listener.enterTableArgumentPartitioning(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitTableArgumentPartitioning) {
             listener.exitTableArgumentPartitioning(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentPartitioning) {
            return visitor.visitTableArgumentPartitioning(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableNamedArgumentExpressionContext extends antlr.ParserRuleContext {
    public _key?: IdentifierContext;
    public _table?: FunctionTableSubqueryArgumentContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAT_ARROW(): antlr.TerminalNode {
        return this.getToken(SqlParser.FAT_ARROW, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext {
        return this.getRuleContext(0, FunctionTableSubqueryArgumentContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_functionTableNamedArgumentExpression;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterFunctionTableNamedArgumentExpression) {
             listener.enterFunctionTableNamedArgumentExpression(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitFunctionTableNamedArgumentExpression) {
             listener.exitFunctionTableNamedArgumentExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableNamedArgumentExpression) {
            return visitor.visitFunctionTableNamedArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableReferenceArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext | null {
        return this.getRuleContext(0, FunctionTableSubqueryArgumentContext);
    }
    public functionTableNamedArgumentExpression(): FunctionTableNamedArgumentExpressionContext | null {
        return this.getRuleContext(0, FunctionTableNamedArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_functionTableReferenceArgument;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterFunctionTableReferenceArgument) {
             listener.enterFunctionTableReferenceArgument(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitFunctionTableReferenceArgument) {
             listener.exitFunctionTableReferenceArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableReferenceArgument) {
            return visitor.visitFunctionTableReferenceArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionTableReferenceArgument(): FunctionTableReferenceArgumentContext | null {
        return this.getRuleContext(0, FunctionTableReferenceArgumentContext);
    }
    public functionArgument(): FunctionArgumentContext | null {
        return this.getRuleContext(0, FunctionArgumentContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_functionTableArgument;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterFunctionTableArgument) {
             listener.enterFunctionTableArgument(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitFunctionTableArgument) {
             listener.exitFunctionTableArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableArgument) {
            return visitor.visitFunctionTableArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasContext extends antlr.ParserRuleContext {
    public _alias?: StrictIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public strictIdentifier(): StrictIdentifierContext | null {
        return this.getRuleContext(0, StrictIdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_tableAlias;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterTableAlias) {
             listener.enterTableAlias(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitTableAlias) {
             listener.exitTableAlias(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableAlias) {
            return visitor.visitTableAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatContext extends antlr.ParserRuleContext {
    public _name?: StringLitContext;
    public _props?: PropertyListContext;
    public _fieldsTerminatedBy?: StringLitContext;
    public _escapedBy?: StringLitContext;
    public _collectionItemsTerminatedBy?: StringLitContext;
    public _keysTerminatedBy?: StringLitContext;
    public _linesSeparatedBy?: StringLitContext;
    public _nullDefinedAs?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_FORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SERDE, 0);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SERDEPROPERTIES, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DELIMITED, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FIELDS, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode[];
    public KW_TERMINATED(i: number): antlr.TerminalNode | null;
    public KW_TERMINATED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_TERMINATED);
    	} else {
    		return this.getToken(SqlParser.KW_TERMINATED, i);
    	}
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_BY);
    	} else {
    		return this.getToken(SqlParser.KW_BY, i);
    	}
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COLLECTION, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ITEMS, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MAP, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_KEYS, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LINES, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULL, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEFINED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ESCAPED, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_rowFormat;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterRowFormat) {
             listener.enterRowFormat(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitRowFormat) {
             listener.exitRowFormat(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowFormat) {
            return visitor.visitRowFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext[];
    public multipartIdentifier(i: number): MultipartIdentifierContext | null;
    public multipartIdentifier(i?: number): MultipartIdentifierContext[] | MultipartIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierContext);
        }

        return this.getRuleContext(i, MultipartIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_multipartIdentifierList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterMultipartIdentifierList) {
             listener.enterMultipartIdentifierList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitMultipartIdentifierList) {
             listener.exitMultipartIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierList) {
            return visitor.visitMultipartIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierContext extends antlr.ParserRuleContext {
    public _errorCapturingIdentifier?: ErrorCapturingIdentifierContext;
    public _parts: ErrorCapturingIdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.DOT);
    	} else {
    		return this.getToken(SqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_multipartIdentifier;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterMultipartIdentifier) {
             listener.enterMultipartIdentifier(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitMultipartIdentifier) {
             listener.exitMultipartIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifier) {
            return visitor.visitMultipartIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierPropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifierProperty(): MultipartIdentifierPropertyContext[];
    public multipartIdentifierProperty(i: number): MultipartIdentifierPropertyContext | null;
    public multipartIdentifierProperty(i?: number): MultipartIdentifierPropertyContext[] | MultipartIdentifierPropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierPropertyContext);
        }

        return this.getRuleContext(i, MultipartIdentifierPropertyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_multipartIdentifierPropertyList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterMultipartIdentifierPropertyList) {
             listener.enterMultipartIdentifierPropertyList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitMultipartIdentifierPropertyList) {
             listener.exitMultipartIdentifierPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierPropertyList) {
            return visitor.visitMultipartIdentifierPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierPropertyContext extends antlr.ParserRuleContext {
    public _options?: PropertyListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_multipartIdentifierProperty;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterMultipartIdentifierProperty) {
             listener.enterMultipartIdentifierProperty(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitMultipartIdentifierProperty) {
             listener.exitMultipartIdentifierProperty(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierProperty) {
            return visitor.visitMultipartIdentifierProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIdentifierContext extends antlr.ParserRuleContext {
    public _db?: ErrorCapturingIdentifierContext;
    public _table?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_tableIdentifier;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterTableIdentifier) {
             listener.enterTableIdentifier(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitTableIdentifier) {
             listener.exitTableIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableIdentifier) {
            return visitor.visitTableIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewIdentifierContext extends antlr.ParserRuleContext {
    public _db?: ErrorCapturingIdentifierContext;
    public _view?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_viewIdentifier;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterViewIdentifier) {
             listener.enterViewIdentifier(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitViewIdentifier) {
             listener.exitViewIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewIdentifier) {
            return visitor.visitViewIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedExpressionContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_namedExpression;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNamedExpression) {
             listener.enterNamedExpression(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNamedExpression) {
             listener.exitNamedExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedExpression) {
            return visitor.visitNamedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedExpressionSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public namedExpression(): NamedExpressionContext[];
    public namedExpression(i: number): NamedExpressionContext | null;
    public namedExpression(i?: number): NamedExpressionContext[] | NamedExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedExpressionContext);
        }

        return this.getRuleContext(i, NamedExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_namedExpressionSeq;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNamedExpressionSeq) {
             listener.enterNamedExpressionSeq(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNamedExpressionSeq) {
             listener.exitNamedExpressionSeq(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedExpressionSeq) {
            return visitor.visitNamedExpressionSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionFieldListContext extends antlr.ParserRuleContext {
    public _partitionField?: PartitionFieldContext;
    public _fields: PartitionFieldContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SqlParser.RIGHT_PAREN, 0)!;
    }
    public partitionField(): PartitionFieldContext[];
    public partitionField(i: number): PartitionFieldContext | null;
    public partitionField(i?: number): PartitionFieldContext[] | PartitionFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionFieldContext);
        }

        return this.getRuleContext(i, PartitionFieldContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_partitionFieldList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPartitionFieldList) {
             listener.enterPartitionFieldList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPartitionFieldList) {
             listener.exitPartitionFieldList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionFieldList) {
            return visitor.visitPartitionFieldList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transform(): TransformContext | null {
        return this.getRuleContext(0, TransformContext);
    }
    public columnType(): ColumnTypeContext | null {
        return this.getRuleContext(0, ColumnTypeContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_partitionField;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPartitionField) {
             listener.enterPartitionField(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPartitionField) {
             listener.exitPartitionField(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionField) {
            return visitor.visitPartitionField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformContext extends antlr.ParserRuleContext {
    public _transformName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public transformArgument(): TransformArgumentContext[];
    public transformArgument(i: number): TransformArgumentContext | null;
    public transformArgument(i?: number): TransformArgumentContext[] | TransformArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransformArgumentContext);
        }

        return this.getRuleContext(i, TransformArgumentContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_transform;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterTransform) {
             listener.enterTransform(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitTransform) {
             listener.exitTransform(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransform) {
            return visitor.visitTransform(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_transformArgument;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterTransformArgument) {
             listener.enterTransformArgument(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitTransformArgument) {
             listener.exitTransformArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransformArgument) {
            return visitor.visitTransformArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_expression;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedArgumentExpressionContext extends antlr.ParserRuleContext {
    public _key?: IdentifierContext;
    public _value?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAT_ARROW(): antlr.TerminalNode {
        return this.getToken(SqlParser.FAT_ARROW, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_namedArgumentExpression;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNamedArgumentExpression) {
             listener.enterNamedArgumentExpression(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNamedArgumentExpression) {
             listener.exitNamedArgumentExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedArgumentExpression) {
            return visitor.visitNamedArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public namedArgumentExpression(): NamedArgumentExpressionContext | null {
        return this.getRuleContext(0, NamedArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_functionArgument;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterFunctionArgument) {
             listener.enterFunctionArgument(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitFunctionArgument) {
             listener.exitFunctionArgument(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionArgument) {
            return visitor.visitFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_expressionSeq;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterExpressionSeq) {
             listener.enterExpressionSeq(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitExpressionSeq) {
             listener.exitExpressionSeq(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionSeq) {
            return visitor.visitExpressionSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public _left?: BooleanExpressionContext;
    public _operator?: Token | null;
    public _right?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NOT, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.NOT, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXISTS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(0, PredicateContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AND, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OR, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_booleanExpression;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterBooleanExpression) {
             listener.enterBooleanExpression(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitBooleanExpression) {
             listener.exitBooleanExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanExpression) {
            return visitor.visitBooleanExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public _kind?: Token | null;
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public _pattern?: ValueExpressionContext;
    public _quantifier?: Token | null;
    public _escapeChar?: StringLitContext;
    public _right?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AND, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BETWEEN, 0);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NOT, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REGEXP, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ILIKE, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ANY, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SOME, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ALL, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ESCAPE, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IS, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULL, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FALSE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNKNOWN, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FROM, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_predicate;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPredicate) {
             listener.enterPredicate(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPredicate) {
             listener.exitPredicate(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPredicate) {
            return visitor.visitPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.MINUS, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.PLUS, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.TILDE, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.PERCENT, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DIV, 0);
    }
    public CONCAT_PIPE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.CONCAT_PIPE, 0);
    }
    public AMPERSAND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.AMPERSAND, 0);
    }
    public HAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.HAT, 0);
    }
    public PIPE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.PIPE, 0);
    }
    public comparisonOperator(): ComparisonOperatorContext | null {
        return this.getRuleContext(0, ComparisonOperatorContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_valueExpression;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterValueExpression) {
             listener.enterValueExpression(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitValueExpression) {
             listener.exitValueExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitValueExpression) {
            return visitor.visitValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_YEAR, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_QUARTER, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MONTH, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WEEK, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DAY, 0);
    }
    public KW_DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DAYOFYEAR, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MINUTE, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SECOND, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MILLISECOND, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MICROSECOND, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_datetimeUnit;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDatetimeUnit) {
             listener.enterDatetimeUnit(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDatetimeUnit) {
             listener.exitDatetimeUnit(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatetimeUnit) {
            return visitor.visitDatetimeUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public _value?: PrimaryExpressionContext;
    public _base?: PrimaryExpressionContext;
    public _name?: Token | null;
    public _unit?: DatetimeUnitContext;
    public _invalidUnit?: StringLitContext;
    public _unitsAmount?: ValueExpressionContext;
    public _timestamp?: ValueExpressionContext;
    public _startTimestamp?: ValueExpressionContext;
    public _endTimestamp?: ValueExpressionContext;
    public _elseExpression?: ExpressionContext;
    public _substr?: ValueExpressionContext;
    public _str?: ValueExpressionContext;
    public _where?: BooleanExpressionContext;
    public _nullsOption?: Token | null;
    public _field?: IdentifierContext;
    public _source?: ValueExpressionContext;
    public _pos?: ValueExpressionContext;
    public _len?: ValueExpressionContext;
    public _trimOption?: Token | null;
    public _trimStr?: ValueExpressionContext;
    public _srcStr?: ValueExpressionContext;
    public _input?: ValueExpressionContext;
    public _replace?: ValueExpressionContext;
    public _position?: ValueExpressionContext;
    public _length?: ValueExpressionContext;
    public _percentage?: ValueExpressionContext;
    public _index?: ValueExpressionContext;
    public _fieldName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CURRENT_USER, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_USER, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SESSION_USER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SqlParser.LEFT_PAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SqlParser.RIGHT_PAREN, i);
    	}
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMPADD, 0);
    }
    public KW_DATEADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATEADD, 0);
    }
    public KW_DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATE_ADD, 0);
    }
    public datetimeUnit(): DatetimeUnitContext | null {
        return this.getRuleContext(0, DatetimeUnitContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATEDIFF, 0);
    }
    public KW_DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATE_DIFF, 0);
    }
    public KW_TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMEDIFF, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CASE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_END, 0);
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ELSE, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CAST, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRY_CAST, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STRUCT, 0);
    }
    public namedExpression(): NamedExpressionContext[];
    public namedExpression(i: number): NamedExpressionContext | null;
    public namedExpression(i?: number): NamedExpressionContext[] | NamedExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedExpressionContext);
        }

        return this.getRuleContext(i, NamedExpressionContext);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FIRST, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IGNORE, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULLS, 0);
    }
    public KW_ANY_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ANY_VALUE, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LAST, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_POSITION, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IN, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.ASTERISK, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.DOT, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IDENTIFIER, 0);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public functionArgument(): FunctionArgumentContext[];
    public functionArgument(i: number): FunctionArgumentContext | null;
    public functionArgument(i?: number): FunctionArgumentContext[] | FunctionArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionArgumentContext);
        }

        return this.getRuleContext(i, FunctionArgumentContext);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FILTER, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WHERE, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OVER, 0);
    }
    public windowSpec(): WindowSpecContext | null {
        return this.getRuleContext(0, WindowSpecContext);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RESPECT, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.ARROW, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXTRACT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FROM, 0);
    }
    public KW_SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SUBSTR, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SUBSTRING, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FOR, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRIM, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BOTH, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LEADING, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRAILING, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OVERLAY, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PLACING, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WITHIN, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GROUP, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BY, 0);
    }
    public sortItem(): SortItemContext | null {
        return this.getRuleContext(0, SortItemContext);
    }
    public KW_PERCENTILE_CONT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PERCENTILE_CONT, 0);
    }
    public KW_PERCENTILE_DISC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PERCENTILE_DISC, 0);
    }
    public LEFT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_BRACKET, 0);
    }
    public RIGHT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_BRACKET, 0);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_primaryExpression;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPrimaryExpression) {
             listener.enterPrimaryExpression(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPrimaryExpression) {
             listener.exitPrimaryExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryExpression) {
            return visitor.visitPrimaryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralTypeContext extends antlr.ParserRuleContext {
    public _unsupportedType?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATE, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INTERVAL, 0);
    }
    public KW_BINARY_HEX(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BINARY_HEX, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_literalType;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterLiteralType) {
             listener.enterLiteralType(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitLiteralType) {
             listener.exitLiteralType(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitLiteralType) {
            return visitor.visitLiteralType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULL, 0);
    }
    public QUESTION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.QUESTION, 0);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.COLON, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public literalType(): LiteralTypeContext | null {
        return this.getRuleContext(0, LiteralTypeContext);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public booleanValue(): BooleanValueContext | null {
        return this.getRuleContext(0, BooleanValueContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_constant;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterConstant) {
             listener.enterConstant(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitConstant) {
             listener.exitConstant(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstant) {
            return visitor.visitConstant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.EQ, 0);
    }
    public NEQ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.NEQ, 0);
    }
    public NEQJ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.NEQJ, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LT, 0);
    }
    public LTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LTE, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.GT, 0);
    }
    public GTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.GTE, 0);
    }
    public NSEQ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.NSEQ, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArithmeticOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.MINUS, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.PERCENT, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DIV, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.TILDE, 0);
    }
    public AMPERSAND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.AMPERSAND, 0);
    }
    public PIPE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.PIPE, 0);
    }
    public CONCAT_PIPE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.CONCAT_PIPE, 0);
    }
    public HAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.HAT, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_arithmeticOperator;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterArithmeticOperator) {
             listener.enterArithmeticOperator(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitArithmeticOperator) {
             listener.exitArithmeticOperator(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticOperator) {
            return visitor.visitArithmeticOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OR, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AND, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IN, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_predicateOperator;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterPredicateOperator) {
             listener.enterPredicateOperator(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitPredicateOperator) {
             listener.exitPredicateOperator(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitPredicateOperator) {
            return visitor.visitPredicateOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FALSE, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_booleanValue;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterBooleanValue) {
             listener.enterBooleanValue(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitBooleanValue) {
             listener.exitBooleanValue(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanValue) {
            return visitor.visitBooleanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTERVAL(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_INTERVAL, 0)!;
    }
    public errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext | null {
        return this.getRuleContext(0, ErrorCapturingMultiUnitsIntervalContext);
    }
    public errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext | null {
        return this.getRuleContext(0, ErrorCapturingUnitToUnitIntervalContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_interval;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterInterval) {
             listener.enterInterval(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitInterval) {
             listener.exitInterval(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingMultiUnitsIntervalContext extends antlr.ParserRuleContext {
    public _body?: MultiUnitsIntervalContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext {
        return this.getRuleContext(0, MultiUnitsIntervalContext)!;
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext | null {
        return this.getRuleContext(0, UnitToUnitIntervalContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_errorCapturingMultiUnitsInterval;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterErrorCapturingMultiUnitsInterval) {
             listener.enterErrorCapturingMultiUnitsInterval(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitErrorCapturingMultiUnitsInterval) {
             listener.exitErrorCapturingMultiUnitsInterval(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingMultiUnitsInterval) {
            return visitor.visitErrorCapturingMultiUnitsInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingUnitToUnitIntervalContext extends antlr.ParserRuleContext {
    public _body?: UnitToUnitIntervalContext;
    public _error1?: MultiUnitsIntervalContext;
    public _error2?: UnitToUnitIntervalContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext[];
    public unitToUnitInterval(i: number): UnitToUnitIntervalContext | null;
    public unitToUnitInterval(i?: number): UnitToUnitIntervalContext[] | UnitToUnitIntervalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitToUnitIntervalContext);
        }

        return this.getRuleContext(i, UnitToUnitIntervalContext);
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext | null {
        return this.getRuleContext(0, MultiUnitsIntervalContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_errorCapturingUnitToUnitInterval;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterErrorCapturingUnitToUnitInterval) {
             listener.enterErrorCapturingUnitToUnitInterval(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitErrorCapturingUnitToUnitInterval) {
             listener.exitErrorCapturingUnitToUnitInterval(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingUnitToUnitInterval) {
            return visitor.visitErrorCapturingUnitToUnitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultiUnitsIntervalContext extends antlr.ParserRuleContext {
    public _unitInMultiUnits?: UnitInMultiUnitsContext;
    public _unit: UnitInMultiUnitsContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalValue(): IntervalValueContext[];
    public intervalValue(i: number): IntervalValueContext | null;
    public intervalValue(i?: number): IntervalValueContext[] | IntervalValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalValueContext);
        }

        return this.getRuleContext(i, IntervalValueContext);
    }
    public unitInMultiUnits(): UnitInMultiUnitsContext[];
    public unitInMultiUnits(i: number): UnitInMultiUnitsContext | null;
    public unitInMultiUnits(i?: number): UnitInMultiUnitsContext[] | UnitInMultiUnitsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitInMultiUnitsContext);
        }

        return this.getRuleContext(i, UnitInMultiUnitsContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_multiUnitsInterval;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterMultiUnitsInterval) {
             listener.enterMultiUnitsInterval(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitMultiUnitsInterval) {
             listener.exitMultiUnitsInterval(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultiUnitsInterval) {
            return visitor.visitMultiUnitsInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitToUnitIntervalContext extends antlr.ParserRuleContext {
    public _value?: IntervalValueContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unitInUnitToUnit(): UnitInUnitToUnitContext[];
    public unitInUnitToUnit(i: number): UnitInUnitToUnitContext | null;
    public unitInUnitToUnit(i?: number): UnitInUnitToUnitContext[] | UnitInUnitToUnitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitInUnitToUnitContext);
        }

        return this.getRuleContext(i, UnitInUnitToUnitContext);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_TO, 0)!;
    }
    public intervalValue(): IntervalValueContext {
        return this.getRuleContext(0, IntervalValueContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_unitToUnitInterval;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUnitToUnitInterval) {
             listener.enterUnitToUnitInterval(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUnitToUnitInterval) {
             listener.exitUnitToUnitInterval(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnitToUnitInterval) {
            return visitor.visitUnitToUnitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.INTEGER_VALUE, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.DECIMAL_VALUE, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_intervalValue;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterIntervalValue) {
             listener.enterIntervalValue(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitIntervalValue) {
             listener.exitIntervalValue(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalValue) {
            return visitor.visitIntervalValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitInMultiUnitsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NANOSECOND, 0);
    }
    public KW_NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NANOSECONDS, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MICROSECOND, 0);
    }
    public KW_MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MICROSECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MILLISECOND, 0);
    }
    public KW_MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MILLISECONDS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SECONDS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MINUTES, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_HOURS, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DAYS, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WEEKS, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MONTHS, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_YEARS, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_unitInMultiUnits;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUnitInMultiUnits) {
             listener.enterUnitInMultiUnits(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUnitInMultiUnits) {
             listener.exitUnitInMultiUnits(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnitInMultiUnits) {
            return visitor.visitUnitInMultiUnits(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitInUnitToUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SECOND, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MINUTE, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_HOUR, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DAY, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MONTH, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_YEAR, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_unitInUnitToUnit;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterUnitInUnitToUnit) {
             listener.enterUnitInUnitToUnit(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitUnitInUnitToUnit) {
             listener.exitUnitInUnitToUnit(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnitInUnitToUnit) {
            return visitor.visitUnitInUnitToUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColPositionContext extends antlr.ParserRuleContext {
    public _position?: Token | null;
    public _afterCol?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FIRST, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AFTER, 0);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_colPosition;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterColPosition) {
             listener.enterColPosition(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitColPosition) {
             listener.exitColPosition(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitColPosition) {
            return visitor.visitColPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeContext extends antlr.ParserRuleContext {
    public _unsupportedType?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BOOLEAN, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TINYINT, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BYTE, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SMALLINT, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SHORT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INTEGER, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BIGINT, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LONG, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FLOAT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REAL, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DOUBLE, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATE, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STRING, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CHARACTER, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CHAR, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VARCHAR, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BINARY, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DECIMAL, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEC, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NUMERIC, 0);
    }
    public KW_VOID(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VOID, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INTERVAL, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ARRAY, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STRUCT, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MAP, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_type;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterType) {
             listener.enterType(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitType) {
             listener.exitType(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitType) {
            return visitor.visitType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeContext extends antlr.ParserRuleContext {
    public _complex?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LT, 0);
    }
    public dataType(): DataTypeContext[];
    public dataType(i: number): DataTypeContext | null;
    public dataType(i?: number): DataTypeContext[] | DataTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeContext);
        }

        return this.getRuleContext(i, DataTypeContext);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.GT, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ARRAY, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MAP, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STRUCT, 0);
    }
    public NEQ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.NEQ, 0);
    }
    public complexColType(): ComplexColTypeContext[];
    public complexColType(i: number): ComplexColTypeContext | null;
    public complexColType(i?: number): ComplexColTypeContext[] | ComplexColTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ComplexColTypeContext);
        }

        return this.getRuleContext(i, ComplexColTypeContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INTERVAL, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_YEAR, 0);
    }
    public KW_MONTH(): antlr.TerminalNode[];
    public KW_MONTH(i: number): antlr.TerminalNode | null;
    public KW_MONTH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_MONTH);
    	} else {
    		return this.getToken(SqlParser.KW_MONTH, i);
    	}
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TO, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode[];
    public KW_HOUR(i: number): antlr.TerminalNode | null;
    public KW_HOUR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_HOUR);
    	} else {
    		return this.getToken(SqlParser.KW_HOUR, i);
    	}
    }
    public KW_MINUTE(): antlr.TerminalNode[];
    public KW_MINUTE(i: number): antlr.TerminalNode | null;
    public KW_MINUTE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_MINUTE);
    	} else {
    		return this.getToken(SqlParser.KW_MINUTE, i);
    	}
    }
    public KW_SECOND(): antlr.TerminalNode[];
    public KW_SECOND(i: number): antlr.TerminalNode | null;
    public KW_SECOND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_SECOND);
    	} else {
    		return this.getToken(SqlParser.KW_SECOND, i);
    	}
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(SqlParser.INTEGER_VALUE, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_dataType;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterDataType) {
             listener.enterDataType(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitDataType) {
             listener.exitDataType(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitDataType) {
            return visitor.visitDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionSeqForAddContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedColTypeWithPositionForAdd(): QualifiedColTypeWithPositionForAddContext[];
    public qualifiedColTypeWithPositionForAdd(i: number): QualifiedColTypeWithPositionForAddContext | null;
    public qualifiedColTypeWithPositionForAdd(i?: number): QualifiedColTypeWithPositionForAddContext[] | QualifiedColTypeWithPositionForAddContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedColTypeWithPositionForAddContext);
        }

        return this.getRuleContext(i, QualifiedColTypeWithPositionForAddContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_qualifiedColTypeWithPositionSeqForAdd;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionSeqForAdd) {
             listener.enterQualifiedColTypeWithPositionSeqForAdd(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionSeqForAdd) {
             listener.exitQualifiedColTypeWithPositionSeqForAdd(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionSeqForAdd) {
            return visitor.visitQualifiedColTypeWithPositionSeqForAdd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionForAddContext extends antlr.ParserRuleContext {
    public _name?: ColumnNameCreateContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext[];
    public colDefinitionDescriptorWithPosition(i: number): ColDefinitionDescriptorWithPositionContext | null;
    public colDefinitionDescriptorWithPosition(i?: number): ColDefinitionDescriptorWithPositionContext[] | ColDefinitionDescriptorWithPositionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColDefinitionDescriptorWithPositionContext);
        }

        return this.getRuleContext(i, ColDefinitionDescriptorWithPositionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_qualifiedColTypeWithPositionForAdd;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionForAdd) {
             listener.enterQualifiedColTypeWithPositionForAdd(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionForAdd) {
             listener.exitQualifiedColTypeWithPositionForAdd(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionForAdd) {
            return visitor.visitQualifiedColTypeWithPositionForAdd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionSeqForReplaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedColTypeWithPositionForReplace(): QualifiedColTypeWithPositionForReplaceContext[];
    public qualifiedColTypeWithPositionForReplace(i: number): QualifiedColTypeWithPositionForReplaceContext | null;
    public qualifiedColTypeWithPositionForReplace(i?: number): QualifiedColTypeWithPositionForReplaceContext[] | QualifiedColTypeWithPositionForReplaceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedColTypeWithPositionForReplaceContext);
        }

        return this.getRuleContext(i, QualifiedColTypeWithPositionForReplaceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_qualifiedColTypeWithPositionSeqForReplace;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionSeqForReplace) {
             listener.enterQualifiedColTypeWithPositionSeqForReplace(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionSeqForReplace) {
             listener.exitQualifiedColTypeWithPositionSeqForReplace(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionSeqForReplace) {
            return visitor.visitQualifiedColTypeWithPositionSeqForReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionForReplaceContext extends antlr.ParserRuleContext {
    public _name?: ColumnNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext[];
    public colDefinitionDescriptorWithPosition(i: number): ColDefinitionDescriptorWithPositionContext | null;
    public colDefinitionDescriptorWithPosition(i?: number): ColDefinitionDescriptorWithPositionContext[] | ColDefinitionDescriptorWithPositionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColDefinitionDescriptorWithPositionContext);
        }

        return this.getRuleContext(i, ColDefinitionDescriptorWithPositionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_qualifiedColTypeWithPositionForReplace;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionForReplace) {
             listener.enterQualifiedColTypeWithPositionForReplace(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionForReplace) {
             listener.exitQualifiedColTypeWithPositionForReplace(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionForReplace) {
            return visitor.visitQualifiedColTypeWithPositionForReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColDefinitionDescriptorWithPositionContext extends antlr.ParserRuleContext {
    public _comment?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEFAULT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMMENT, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public colPosition(): ColPositionContext | null {
        return this.getRuleContext(0, ColPositionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_colDefinitionDescriptorWithPosition;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterColDefinitionDescriptorWithPosition) {
             listener.enterColDefinitionDescriptorWithPosition(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitColDefinitionDescriptorWithPosition) {
             listener.exitColDefinitionDescriptorWithPosition(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitColDefinitionDescriptorWithPosition) {
            return visitor.visitColDefinitionDescriptorWithPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDefaultExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEFAULT, 0);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.EQ, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_variableDefaultExpression;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterVariableDefaultExpression) {
             listener.enterVariableDefaultExpression(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitVariableDefaultExpression) {
             listener.exitVariableDefaultExpression(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableDefaultExpression) {
            return visitor.visitVariableDefaultExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnType(): ColumnTypeContext[];
    public columnType(i: number): ColumnTypeContext | null;
    public columnType(i?: number): ColumnTypeContext[] | ColumnTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeContext);
        }

        return this.getRuleContext(i, ColumnTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_colTypeList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterColTypeList) {
             listener.enterColTypeList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitColTypeList) {
             listener.exitColTypeList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitColTypeList) {
            return visitor.visitColTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnTypeContext extends antlr.ParserRuleContext {
    public _colName?: ErrorCapturingIdentifierContext;
    public _comment?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULL, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMMENT, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_columnType;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterColumnType) {
             listener.enterColumnType(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitColumnType) {
             listener.exitColumnType(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnType) {
            return visitor.visitColumnType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateOrReplaceTableColTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createOrReplaceTableColType(): CreateOrReplaceTableColTypeContext[];
    public createOrReplaceTableColType(i: number): CreateOrReplaceTableColTypeContext | null;
    public createOrReplaceTableColType(i?: number): CreateOrReplaceTableColTypeContext[] | CreateOrReplaceTableColTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateOrReplaceTableColTypeContext);
        }

        return this.getRuleContext(i, CreateOrReplaceTableColTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_createOrReplaceTableColTypeList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreateOrReplaceTableColTypeList) {
             listener.enterCreateOrReplaceTableColTypeList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreateOrReplaceTableColTypeList) {
             listener.exitCreateOrReplaceTableColTypeList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateOrReplaceTableColTypeList) {
            return visitor.visitCreateOrReplaceTableColTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateOrReplaceTableColTypeContext extends antlr.ParserRuleContext {
    public _colName?: ColumnNameCreateContext;
    public _colType?: DataTypeContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public colDefinitionOption(): ColDefinitionOptionContext[];
    public colDefinitionOption(i: number): ColDefinitionOptionContext | null;
    public colDefinitionOption(i?: number): ColDefinitionOptionContext[] | ColDefinitionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColDefinitionOptionContext);
        }

        return this.getRuleContext(i, ColDefinitionOptionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_createOrReplaceTableColType;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterCreateOrReplaceTableColType) {
             listener.enterCreateOrReplaceTableColType(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitCreateOrReplaceTableColType) {
             listener.exitCreateOrReplaceTableColType(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateOrReplaceTableColType) {
            return visitor.visitCreateOrReplaceTableColType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColDefinitionOptionContext extends antlr.ParserRuleContext {
    public _comment?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEFAULT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GENERATED, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ALWAYS, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMMENT, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_colDefinitionOption;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterColDefinitionOption) {
             listener.enterColDefinitionOption(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitColDefinitionOption) {
             listener.exitColDefinitionOption(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitColDefinitionOption) {
            return visitor.visitColDefinitionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComplexColTypeContext extends antlr.ParserRuleContext {
    public _comment?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.COLON, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULL, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMMENT, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_complexColType;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterComplexColType) {
             listener.enterComplexColType(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitComplexColType) {
             listener.exitComplexColType(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitComplexColType) {
            return visitor.visitComplexColType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClauseContext extends antlr.ParserRuleContext {
    public _condition?: ExpressionContext;
    public _result?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_WHEN, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_THEN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_whenClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterWhenClause) {
             listener.enterWhenClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitWhenClause) {
             listener.exitWhenClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WINDOW(): antlr.TerminalNode {
        return this.getToken(SqlParser.KW_WINDOW, 0)!;
    }
    public KW_AS(): antlr.TerminalNode[];
    public KW_AS(i: number): antlr.TerminalNode | null;
    public KW_AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_AS);
    	} else {
    		return this.getToken(SqlParser.KW_AS, i);
    	}
    }
    public windowSpec(): WindowSpecContext[];
    public windowSpec(i: number): WindowSpecContext | null;
    public windowSpec(i?: number): WindowSpecContext[] | WindowSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowSpecContext);
        }

        return this.getRuleContext(i, WindowSpecContext);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_windowClause;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterWindowClause) {
             listener.enterWindowClause(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitWindowClause) {
             listener.exitWindowClause(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CLUSTER, 0);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.KW_BY);
    	} else {
    		return this.getToken(SqlParser.KW_BY, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public windowFrame(): WindowFrameContext | null {
        return this.getRuleContext(0, WindowFrameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PARTITION, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ORDER, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SORT, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_windowSpec;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterWindowSpec) {
             listener.enterWindowSpec(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitWindowSpec) {
             listener.exitWindowSpec(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowSpec) {
            return visitor.visitWindowSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameContext extends antlr.ParserRuleContext {
    public _frameType?: Token | null;
    public _start_?: FrameBoundContext;
    public _end?: FrameBoundContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public frameBound(): FrameBoundContext[];
    public frameBound(i: number): FrameBoundContext | null;
    public frameBound(i?: number): FrameBoundContext[] | FrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameBoundContext);
        }

        return this.getRuleContext(i, FrameBoundContext);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RANGE, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROWS, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BETWEEN, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AND, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_windowFrame;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterWindowFrame) {
             listener.enterWindowFrame(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitWindowFrame) {
             listener.exitWindowFrame(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrame) {
            return visitor.visitWindowFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBoundContext extends antlr.ParserRuleContext {
    public _boundType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNBOUNDED, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PRECEDING, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FOLLOWING, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROW, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CURRENT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_frameBound;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterFrameBound) {
             listener.enterFrameBound(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitFrameBound) {
             listener.exitFrameBound(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrameBound) {
            return visitor.visitFrameBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.COMMA);
    	} else {
    		return this.getToken(SqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_qualifiedNameList;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterQualifiedNameList) {
             listener.enterQualifiedNameList(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitQualifiedNameList) {
             listener.exitQualifiedNameList(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedNameList) {
            return visitor.visitQualifiedNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IDENTIFIER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.LEFT_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.RIGHT_PAREN, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FILTER, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LEFT, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RIGHT, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_functionName;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterFunctionName) {
             listener.enterFunctionName(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitFunctionName) {
             listener.exitFunctionName(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_functionNameCreate;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterFunctionNameCreate) {
             listener.enterFunctionNameCreate(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitFunctionNameCreate) {
             listener.exitFunctionNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameCreate) {
            return visitor.visitFunctionNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.DOT);
    	} else {
    		return this.getToken(SqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_qualifiedName;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterQualifiedName) {
             listener.enterQualifiedName(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitQualifiedName) {
             listener.exitQualifiedName(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierExtraContext)!;
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_errorCapturingIdentifier;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterErrorCapturingIdentifier) {
             listener.enterErrorCapturingIdentifier(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitErrorCapturingIdentifier) {
             listener.exitErrorCapturingIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingIdentifier) {
            return visitor.visitErrorCapturingIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingIdentifierExtraContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SqlParser.MINUS);
    	} else {
    		return this.getToken(SqlParser.MINUS, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_errorCapturingIdentifierExtra;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterErrorCapturingIdentifierExtra) {
             listener.enterErrorCapturingIdentifierExtra(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitErrorCapturingIdentifierExtra) {
             listener.exitErrorCapturingIdentifierExtra(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingIdentifierExtra) {
            return visitor.visitErrorCapturingIdentifierExtra(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public strictIdentifier(): StrictIdentifierContext | null {
        return this.getRuleContext(0, StrictIdentifierContext);
    }
    public strictNonReserved(): StrictNonReservedContext | null {
        return this.getRuleContext(0, StrictNonReservedContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_identifier;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterIdentifier) {
             listener.enterIdentifier(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitIdentifier) {
             listener.exitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StrictIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.IDENTIFIER, 0);
    }
    public BACKQUOTED_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.BACKQUOTED_IDENTIFIER, 0);
    }
    public DOUBLEQUOTED_STRING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.DOUBLEQUOTED_STRING, 0);
    }
    public ansiNonReserved(): AnsiNonReservedContext | null {
        return this.getRuleContext(0, AnsiNonReservedContext);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_strictIdentifier;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterStrictIdentifier) {
             listener.enterStrictIdentifier(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitStrictIdentifier) {
             listener.exitStrictIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitStrictIdentifier) {
            return visitor.visitStrictIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPONENT_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.EXPONENT_VALUE, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.DECIMAL_VALUE, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.INTEGER_VALUE, 0);
    }
    public BIGINT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.BIGINT_LITERAL, 0);
    }
    public SMALLINT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.SMALLINT_LITERAL, 0);
    }
    public TINYINT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.TINYINT_LITERAL, 0);
    }
    public DOUBLE_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.DOUBLE_LITERAL, 0);
    }
    public FLOAT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.FLOAT_LITERAL, 0);
    }
    public BIGDECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.BIGDECIMAL_LITERAL, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_number;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNumber) {
             listener.enterNumber(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNumber) {
             listener.exitNumber(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNumber) {
            return visitor.visitNumber(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterColumnActionContext extends antlr.ParserRuleContext {
    public _comment?: StringLitContext;
    public _setOrDrop?: Token | null;
    public _dropDefault?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TYPE, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMMENT, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public colPosition(): ColPositionContext | null {
        return this.getRuleContext(0, ColPositionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULL, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SET, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DROP, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEFAULT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_alterColumnAction;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterAlterColumnAction) {
             listener.enterAlterColumnAction(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitAlterColumnAction) {
             listener.exitAlterColumnAction(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterColumnAction) {
            return visitor.visitAlterColumnAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringLitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.STRING_LITERAL, 0);
    }
    public DOUBLEQUOTED_STRING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.DOUBLEQUOTED_STRING, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_stringLit;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterStringLit) {
             listener.enterStringLit(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitStringLit) {
             listener.exitStringLit(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitStringLit) {
            return visitor.visitStringLit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnsiNonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ADD, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AFTER, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ALTER, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ALWAYS, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ANALYZE, 0);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ANTI, 0);
    }
    public KW_ANY_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ANY_VALUE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ARCHIVE, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ARRAY, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ASC, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AT, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BETWEEN, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BIGINT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BINARY, 0);
    }
    public KW_BINARY_HEX(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BINARY_HEX, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BOOLEAN, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BUCKET, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BUCKETS, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BY, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BYTE, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CACHE, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CASCADE, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CATALOG, 0);
    }
    public KW_CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CATALOGS, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CHANGE, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CHAR, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CHARACTER, 0);
    }
    public KW_CLEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CLEAR, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CLUSTER, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CLUSTERED, 0);
    }
    public KW_CODEGEN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CODEGEN, 0);
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COLLECTION, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMMENT, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMMIT, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMPACT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMPUTE, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CONCATENATE, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COST, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CUBE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CURRENT, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATA, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATABASE, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATABASES, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATE, 0);
    }
    public KW_DATEADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATEADD, 0);
    }
    public KW_DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATE_ADD, 0);
    }
    public KW_DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATEDIFF, 0);
    }
    public KW_DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATE_DIFF, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DAYS, 0);
    }
    public KW_DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DAYOFYEAR, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DECIMAL, 0);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DECLARE, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEFAULT, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEFINED, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DELETE, 0);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DELIMITED, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESCRIBE, 0);
    }
    public KW_DFS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DFS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DIRECTORIES, 0);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DIRECTORY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DISABLE, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DIV, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DOUBLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DROP, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ENABLE, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ESCAPED, 0);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXCHANGE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXCLUDE, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXISTS, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXPORT, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXTENDED, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXTERNAL, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXTRACT, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FIELDS, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FILEFORMAT, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FIRST, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FLOAT, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FOLLOWING, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FORMAT, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FORMATTED, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FUNCTION, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FUNCTIONS, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GENERATED, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GLOBAL, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GROUPING, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_HOURS, 0);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IDENTIFIER, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IF, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IGNORE, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IMPORT, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INCLUDE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INDEXES, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INPATH, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INSERT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INTEGER, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INTERVAL, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ITEMS, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_KEYS, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LAST, 0);
    }
    public KW_LAZY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LAZY, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ILIKE, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIMIT, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LINES, 0);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIST, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOAD, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCAL, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCK, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCKS, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOGICAL, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LONG, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MACRO, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MAP, 0);
    }
    public KW_MATCHED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MATCHED, 0);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MERGE, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MICROSECOND, 0);
    }
    public KW_MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MICROSECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MILLISECOND, 0);
    }
    public KW_MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MILLISECONDS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MINUTES, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MONTHS, 0);
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MSCK, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NAME, 0);
    }
    public KW_NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NAMESPACE, 0);
    }
    public KW_NAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NAMESPACES, 0);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NANOSECOND, 0);
    }
    public KW_NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NANOSECONDS, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NO, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULLS, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NUMERIC, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OF, 0);
    }
    public KW_OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OPTIMIZE, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OPTION, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OPTIONS, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OUT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OVER, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OVERLAY, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OVERWRITE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PARTITION, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PARTITIONED, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PARTITIONS, 0);
    }
    public KW_PERCENTLIT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PERCENTLIT, 0);
    }
    public KW_PIVOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PIVOT, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PLACING, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_POSITION, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PRECEDING, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PRINCIPALS, 0);
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PROPERTIES, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PURGE, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_QUARTER, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_QUERY, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RANGE, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REAL, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RECORDREADER, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RECORDWRITER, 0);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RECOVER, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REDUCE, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REFRESH, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RENAME, 0);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPAIR, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPEATABLE, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPLACE, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RESET, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RESPECT, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RESTRICT, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REVOKE, 0);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REWRITE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REGEXP, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLE, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLES, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLLUP, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROWS, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SCHEMAS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SECONDS, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SEMI, 0);
    }
    public KW_SEPARATED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SEPARATED, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SERDEPROPERTIES, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SET, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MINUS, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SETS, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SHORT, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SHOW, 0);
    }
    public KW_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SINGLE, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SKEWED, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SMALLINT, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SORT, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SORTED, 0);
    }
    public KW_SOURCE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SOURCE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_START, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STATISTICS, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STORED, 0);
    }
    public KW_STRATIFY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STRATIFY, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STRING, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STRUCT, 0);
    }
    public KW_SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SUBSTR, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SUBSTRING, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SYNC, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SYSTEM, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLES, 0);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLESAMPLE, 0);
    }
    public KW_TARGET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TARGET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TEMPORARY, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TERMINATED, 0);
    }
    public KW_TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMEDIFF, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMPADD, 0);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TINYINT, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TOUCH, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRANSFORM, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRIM, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRUE, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRUNCATE, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRY_CAST, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TYPE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNARCHIVE, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNBOUNDED, 0);
    }
    public KW_UNCACHE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNCACHE, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNLOCK, 0);
    }
    public KW_UNPIVOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNPIVOT, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNSET, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UPDATE, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_USE, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VALUES, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VARCHAR, 0);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VAR, 0);
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VARIABLE, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VIEWS, 0);
    }
    public KW_VOID(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VOID, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WEEKS, 0);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WINDOW, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_YEARS, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ZONE, 0);
    }
    public KW_ZORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ZORDER, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_ansiNonReserved;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterAnsiNonReserved) {
             listener.enterAnsiNonReserved(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitAnsiNonReserved) {
             listener.exitAnsiNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnsiNonReserved) {
            return visitor.visitAnsiNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StrictNonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ANTI, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CROSS, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXCEPT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FULL, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INNER, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INTERSECT, 0);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_JOIN, 0);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LATERAL, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LEFT, 0);
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NATURAL, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ON, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RIGHT, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SEMI, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MINUS, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNION, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_USING, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_strictNonReserved;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterStrictNonReserved) {
             listener.enterStrictNonReserved(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitStrictNonReserved) {
             listener.exitStrictNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitStrictNonReserved) {
            return visitor.visitStrictNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ADD, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AFTER, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ALL, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ALTER, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ALWAYS, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ANALYZE, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AND, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ANY, 0);
    }
    public KW_ANY_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ANY_VALUE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ARCHIVE, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ARRAY, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ASC, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AT, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BETWEEN, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BIGINT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BINARY, 0);
    }
    public KW_BINARY_HEX(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BINARY_HEX, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BOOLEAN, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BOTH, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BUCKET, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BUCKETS, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BY, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_BYTE, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CACHE, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CASCADE, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CASE, 0);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CAST, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CATALOG, 0);
    }
    public KW_CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CATALOGS, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CHANGE, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CHAR, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CHARACTER, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CHECK, 0);
    }
    public KW_CLEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CLEAR, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CLUSTER, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CLUSTERED, 0);
    }
    public KW_CODEGEN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CODEGEN, 0);
    }
    public KW_COLLATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COLLATE, 0);
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COLLECTION, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COLUMN, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMMENT, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMMIT, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMPACT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COMPUTE, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CONCATENATE, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CONSTRAINT, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_COST, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CREATE, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CUBE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CURRENT, 0);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CURRENT_TIME, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_CURRENT_USER, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATA, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATABASE, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATABASES, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATE, 0);
    }
    public KW_DATEADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATEADD, 0);
    }
    public KW_DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATE_ADD, 0);
    }
    public KW_DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATEDIFF, 0);
    }
    public KW_DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DATE_DIFF, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DAYS, 0);
    }
    public KW_DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DAYOFYEAR, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DECIMAL, 0);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DECLARE, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEFAULT, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DEFINED, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DELETE, 0);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DELIMITED, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DESCRIBE, 0);
    }
    public KW_DFS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DFS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DIRECTORIES, 0);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DIRECTORY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DISABLE, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DISTINCT, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DIV, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DOUBLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_DROP, 0);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ELSE, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ENABLE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_END, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ESCAPE, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ESCAPED, 0);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXCHANGE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXCLUDE, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXISTS, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXPORT, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXTENDED, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXTERNAL, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_EXTRACT, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FALSE, 0);
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FETCH, 0);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FILTER, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FIELDS, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FILEFORMAT, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FIRST, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FLOAT, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FOLLOWING, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FOR, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FOREIGN, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FORMAT, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FORMATTED, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FUNCTION, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_FUNCTIONS, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GENERATED, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GLOBAL, 0);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GRANT, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GROUP, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_GROUPING, 0);
    }
    public KW_HAVING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_HAVING, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_HOURS, 0);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IDENTIFIER, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IF, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IGNORE, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IMPORT, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IN, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INCLUDE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INDEXES, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INPATH, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INSERT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INTEGER, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INTERVAL, 0);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_INTO, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_IS, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ITEMS, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_KEYS, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LAST, 0);
    }
    public KW_LAZY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LAZY, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LEADING, 0);
    }
    public KW_LIFECYCLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIFECYCLE, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIKE, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LONG, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ILIKE, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIMIT, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LINES, 0);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LIST, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOAD, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCAL, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCK, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOCKS, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_LOGICAL, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MACRO, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MAP, 0);
    }
    public KW_MATCHED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MATCHED, 0);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MERGE, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MICROSECOND, 0);
    }
    public KW_MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MICROSECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MILLISECOND, 0);
    }
    public KW_MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MILLISECONDS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MINUTES, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MONTHS, 0);
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_MSCK, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NAME, 0);
    }
    public KW_NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NAMESPACE, 0);
    }
    public KW_NAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NAMESPACES, 0);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NANOSECOND, 0);
    }
    public KW_NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NANOSECONDS, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NO, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULL, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NULLS, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_NUMERIC, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OF, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OFFSET, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ONLY, 0);
    }
    public KW_OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OPTIMIZE, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OPTION, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OPTIONS, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OR, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ORDER, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OUT, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OUTER, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OVER, 0);
    }
    public KW_OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OVERLAPS, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OVERLAY, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_OVERWRITE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PARTITION, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PARTITIONED, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PARTITIONS, 0);
    }
    public KW_PERCENTILE_CONT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PERCENTILE_CONT, 0);
    }
    public KW_PERCENTILE_DISC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PERCENTILE_DISC, 0);
    }
    public KW_PERCENTLIT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PERCENTLIT, 0);
    }
    public KW_PIVOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PIVOT, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PLACING, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_POSITION, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PRECEDING, 0);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PRIMARY, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PRINCIPALS, 0);
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PROPERTIES, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_PURGE, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_QUARTER, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_QUERY, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RANGE, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REAL, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RECORDREADER, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RECORDWRITER, 0);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RECOVER, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REDUCE, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REFERENCES, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REFRESH, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RENAME, 0);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPAIR, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPEATABLE, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REPLACE, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RESET, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RESPECT, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RESTRICT, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REVOKE, 0);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REWRITE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_REGEXP, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLE, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLES, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROLLUP, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ROWS, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SCHEMAS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SECONDS, 0);
    }
    public KW_SEPARATED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SEPARATED, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SERDEPROPERTIES, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SESSION_USER, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SET, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SETS, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SHORT, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SHOW, 0);
    }
    public KW_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SINGLE, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SKEWED, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SMALLINT, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SOME, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SORT, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SORTED, 0);
    }
    public KW_SOURCE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SOURCE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_START, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STATISTICS, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STORED, 0);
    }
    public KW_STRATIFY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STRATIFY, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STRING, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_STRUCT, 0);
    }
    public KW_SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SUBSTR, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SUBSTRING, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SYNC, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SYSTEM, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLES, 0);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TABLESAMPLE, 0);
    }
    public KW_TARGET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TARGET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TEMPORARY, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TERMINATED, 0);
    }
    public KW_THEN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_THEN, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIME, 0);
    }
    public KW_TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMEDIFF, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMPADD, 0);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TINYINT, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TO, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TOUCH, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRAILING, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRANSFORM, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRIM, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRUE, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRUNCATE, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TRY_CAST, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_TYPE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNARCHIVE, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNBOUNDED, 0);
    }
    public KW_UNCACHE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNCACHE, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNIQUE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNKNOWN, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNLOCK, 0);
    }
    public KW_UNPIVOT(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNPIVOT, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UNSET, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_UPDATE, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_USE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_USER, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VALUES, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VARCHAR, 0);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VAR, 0);
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VARIABLE, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VIEWS, 0);
    }
    public KW_VOID(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_VOID, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WEEKS, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WHEN, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WHERE, 0);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WINDOW, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WITH, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_WITHIN, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_YEARS, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ZONE, 0);
    }
    public KW_ZORDER(): antlr.TerminalNode | null {
        return this.getToken(SqlParser.KW_ZORDER, 0);
    }
    public override get ruleIndex(): number {
        return SqlParser.RULE_nonReserved;
    }
    public override enterRule(listener: SqlParserListener): void {
        if(listener.enterNonReserved) {
             listener.enterNonReserved(this);
        }
    }
    public override exitRule(listener: SqlParserListener): void {
        if(listener.exitNonReserved) {
             listener.exitNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
