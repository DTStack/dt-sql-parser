// Generated from /Users/shuangxu/Documents/workspace/dt-sql-parser/src/grammar/impala/ImpalaSqlParser.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ImpalaSqlParserLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "','", "')'", "'{'", "'}'", "'|'", "':'", "'-- +SHUFFLE'", 
		"'-- +NOSHUFFLE -- +CLUSTERED'", "'/* +SHUFFLE */'", "'/* +NOSHUFFLE */'", 
		"'/* +CLUSTERED */'", "'[SHUFFLE]'", "'[NOSHUFFLE]'", "'.'", "'?'", "'->'", 
		"'['", "']'", "'<'", "'>'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ImpalaSqlParserLexer._LITERAL_NAMES, ImpalaSqlParserLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ImpalaSqlParserLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ImpalaSqlParserLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "ImpalaSqlParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return ImpalaSqlParserLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ImpalaSqlParserLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ImpalaSqlParserLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ImpalaSqlParserLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17\xB9\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x02\x02" +
		"\x02\x17\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02" +
		"\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02" +
		"\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02" +
		"\x16+\x02\x17\x03\x02\x02\x02\xB8\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
		"\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
		"\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02" +
		"\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02" +
		"\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02" +
		"\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02" +
		"\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02" +
		"+\x03\x02\x02\x02\x03-\x03\x02\x02\x02\x05/\x03\x02\x02\x02\x071\x03\x02" +
		"\x02\x02\t3\x03\x02\x02\x02\v5\x03\x02\x02\x02\r7\x03\x02\x02\x02\x0F" +
		"9\x03\x02\x02\x02\x11;\x03\x02\x02\x02\x13G\x03\x02\x02\x02\x15c\x03\x02" +
		"\x02\x02\x17r\x03\x02\x02\x02\x19\x83\x03\x02\x02\x02\x1B\x94\x03\x02" +
		"\x02\x02\x1D\x9E\x03\x02\x02\x02\x1F\xAA\x03\x02\x02\x02!\xAC\x03\x02" +
		"\x02\x02#\xAE\x03\x02\x02\x02%\xB1\x03\x02\x02\x02\'\xB3\x03\x02\x02\x02" +
		")\xB5\x03\x02\x02\x02+\xB7\x03\x02\x02\x02-.\x07*\x02\x02.\x04\x03\x02" +
		"\x02\x02/0\x07.\x02\x020\x06\x03\x02\x02\x0212\x07+\x02\x022\b\x03\x02" +
		"\x02\x0234\x07}\x02\x024\n\x03\x02\x02\x0256\x07\x7F\x02\x026\f\x03\x02" +
		"\x02\x0278\x07~\x02\x028\x0E\x03\x02\x02\x029:\x07<\x02\x02:\x10\x03\x02" +
		"\x02\x02;<\x07/\x02\x02<=\x07/\x02\x02=>\x07\"\x02\x02>?\x07-\x02\x02" +
		"?@\x07U\x02\x02@A\x07J\x02\x02AB\x07W\x02\x02BC\x07H\x02\x02CD\x07H\x02" +
		"\x02DE\x07N\x02\x02EF\x07G\x02\x02F\x12\x03\x02\x02\x02GH\x07/\x02\x02" +
		"HI\x07/\x02\x02IJ\x07\"\x02\x02JK\x07-\x02\x02KL\x07P\x02\x02LM\x07Q\x02" +
		"\x02MN\x07U\x02\x02NO\x07J\x02\x02OP\x07W\x02\x02PQ\x07H\x02\x02QR\x07" +
		"H\x02\x02RS\x07N\x02\x02ST\x07G\x02\x02TU\x07\"\x02\x02UV\x07/\x02\x02" +
		"VW\x07/\x02\x02WX\x07\"\x02\x02XY\x07-\x02\x02YZ\x07E\x02\x02Z[\x07N\x02" +
		"\x02[\\\x07W\x02\x02\\]\x07U\x02\x02]^\x07V\x02\x02^_\x07G\x02\x02_`\x07" +
		"T\x02\x02`a\x07G\x02\x02ab\x07F\x02\x02b\x14\x03\x02\x02\x02cd\x071\x02" +
		"\x02de\x07,\x02\x02ef\x07\"\x02\x02fg\x07-\x02\x02gh\x07U\x02\x02hi\x07" +
		"J\x02\x02ij\x07W\x02\x02jk\x07H\x02\x02kl\x07H\x02\x02lm\x07N\x02\x02" +
		"mn\x07G\x02\x02no\x07\"\x02\x02op\x07,\x02\x02pq\x071\x02\x02q\x16\x03" +
		"\x02\x02\x02rs\x071\x02\x02st\x07,\x02\x02tu\x07\"\x02\x02uv\x07-\x02" +
		"\x02vw\x07P\x02\x02wx\x07Q\x02\x02xy\x07U\x02\x02yz\x07J\x02\x02z{\x07" +
		"W\x02\x02{|\x07H\x02\x02|}\x07H\x02\x02}~\x07N\x02\x02~\x7F\x07G\x02\x02" +
		"\x7F\x80\x07\"\x02\x02\x80\x81\x07,\x02\x02\x81\x82\x071\x02\x02\x82\x18" +
		"\x03\x02\x02\x02\x83\x84\x071\x02\x02\x84\x85\x07,\x02\x02\x85\x86\x07" +
		"\"\x02\x02\x86\x87\x07-\x02\x02\x87\x88\x07E\x02\x02\x88\x89\x07N\x02" +
		"\x02\x89\x8A\x07W\x02\x02\x8A\x8B\x07U\x02\x02\x8B\x8C\x07V\x02\x02\x8C" +
		"\x8D\x07G\x02\x02\x8D\x8E\x07T\x02\x02\x8E\x8F\x07G\x02\x02\x8F\x90\x07" +
		"F\x02\x02\x90\x91\x07\"\x02\x02\x91\x92\x07,\x02\x02\x92\x93\x071\x02" +
		"\x02\x93\x1A\x03\x02\x02\x02\x94\x95\x07]\x02\x02\x95\x96\x07U\x02\x02" +
		"\x96\x97\x07J\x02\x02\x97\x98\x07W\x02\x02\x98\x99\x07H\x02\x02\x99\x9A" +
		"\x07H\x02\x02\x9A\x9B\x07N\x02\x02\x9B\x9C\x07G\x02\x02\x9C\x9D\x07_\x02" +
		"\x02\x9D\x1C\x03\x02\x02\x02\x9E\x9F\x07]\x02\x02\x9F\xA0\x07P\x02\x02" +
		"\xA0\xA1\x07Q\x02\x02\xA1\xA2\x07U\x02\x02\xA2\xA3\x07J\x02\x02\xA3\xA4" +
		"\x07W\x02\x02\xA4\xA5\x07H\x02\x02\xA5\xA6\x07H\x02\x02\xA6\xA7\x07N\x02" +
		"\x02\xA7\xA8\x07G\x02\x02\xA8\xA9\x07_\x02\x02\xA9\x1E\x03\x02\x02\x02" +
		"\xAA\xAB\x070\x02\x02\xAB \x03\x02\x02\x02\xAC\xAD\x07A\x02\x02\xAD\"" +
		"\x03\x02\x02\x02\xAE\xAF\x07/\x02\x02\xAF\xB0\x07@\x02\x02\xB0$\x03\x02" +
		"\x02\x02\xB1\xB2\x07]\x02\x02\xB2&\x03\x02\x02\x02\xB3\xB4\x07_\x02\x02" +
		"\xB4(\x03\x02\x02\x02\xB5\xB6\x07>\x02\x02\xB6*\x03\x02\x02\x02\xB7\xB8" +
		"\x07@\x02\x02\xB8,\x03\x02\x02\x02\x03\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ImpalaSqlParserLexer.__ATN) {
			ImpalaSqlParserLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ImpalaSqlParserLexer._serializedATN));
		}

		return ImpalaSqlParserLexer.__ATN;
	}

}

