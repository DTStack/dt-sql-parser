// Generated from dt-sql-parser/src/grammar/spark/SparkSqlParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { SparkSqlParserListener } from "./SparkSqlParserListener.js";
import { SparkSqlParserVisitor } from "./SparkSqlParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class SparkSqlParser extends antlr.Parser {
    public static readonly SEMICOLON = 1;
    public static readonly LEFT_PAREN = 2;
    public static readonly RIGHT_PAREN = 3;
    public static readonly COMMA = 4;
    public static readonly DOT = 5;
    public static readonly LEFT_BRACKET = 6;
    public static readonly RIGHT_BRACKET = 7;
    public static readonly KW_ADD = 8;
    public static readonly KW_AFTER = 9;
    public static readonly KW_ALL = 10;
    public static readonly KW_ALTER = 11;
    public static readonly KW_ALWAYS = 12;
    public static readonly KW_ANALYZE = 13;
    public static readonly KW_AND = 14;
    public static readonly KW_ANTI = 15;
    public static readonly KW_ANY = 16;
    public static readonly KW_ANY_VALUE = 17;
    public static readonly KW_ARCHIVE = 18;
    public static readonly KW_ARRAY = 19;
    public static readonly KW_AS = 20;
    public static readonly KW_ASC = 21;
    public static readonly KW_AT = 22;
    public static readonly KW_AUTHORIZATION = 23;
    public static readonly KW_BETWEEN = 24;
    public static readonly KW_BIGINT = 25;
    public static readonly KW_BINARY = 26;
    public static readonly KW_BOOLEAN = 27;
    public static readonly KW_BOTH = 28;
    public static readonly KW_BUCKET = 29;
    public static readonly KW_BUCKETS = 30;
    public static readonly KW_BY = 31;
    public static readonly KW_BYTE = 32;
    public static readonly KW_CACHE = 33;
    public static readonly KW_CASCADE = 34;
    public static readonly KW_CASE = 35;
    public static readonly KW_CAST = 36;
    public static readonly KW_CATALOG = 37;
    public static readonly KW_CATALOGS = 38;
    public static readonly KW_CHANGE = 39;
    public static readonly KW_CHAR = 40;
    public static readonly KW_CHARACTER = 41;
    public static readonly KW_CHECK = 42;
    public static readonly KW_CLEAR = 43;
    public static readonly KW_CLUSTER = 44;
    public static readonly KW_CLUSTERED = 45;
    public static readonly KW_CODEGEN = 46;
    public static readonly KW_COLLATE = 47;
    public static readonly KW_COLLECTION = 48;
    public static readonly KW_COLUMN = 49;
    public static readonly KW_COLUMNS = 50;
    public static readonly KW_COMMENT = 51;
    public static readonly KW_COMMIT = 52;
    public static readonly KW_COMPACT = 53;
    public static readonly KW_COMPACTIONS = 54;
    public static readonly KW_COMPUTE = 55;
    public static readonly KW_CONCATENATE = 56;
    public static readonly KW_CONSTRAINT = 57;
    public static readonly KW_COST = 58;
    public static readonly KW_CREATE = 59;
    public static readonly KW_CROSS = 60;
    public static readonly KW_CUBE = 61;
    public static readonly KW_CURRENT = 62;
    public static readonly KW_CURRENT_DATE = 63;
    public static readonly KW_CURRENT_TIME = 64;
    public static readonly KW_CURRENT_TIMESTAMP = 65;
    public static readonly KW_CURRENT_USER = 66;
    public static readonly KW_DAY = 67;
    public static readonly KW_DAYS = 68;
    public static readonly KW_DAYOFYEAR = 69;
    public static readonly KW_DATA = 70;
    public static readonly KW_DATE = 71;
    public static readonly KW_DATABASE = 72;
    public static readonly KW_DATABASES = 73;
    public static readonly KW_DATEADD = 74;
    public static readonly KW_DATE_ADD = 75;
    public static readonly KW_DATEDIFF = 76;
    public static readonly KW_DATE_DIFF = 77;
    public static readonly KW_DBPROPERTIES = 78;
    public static readonly KW_DEC = 79;
    public static readonly KW_DECIMAL = 80;
    public static readonly KW_DECLARE = 81;
    public static readonly KW_DEFAULT = 82;
    public static readonly KW_DEFINED = 83;
    public static readonly KW_DELETE = 84;
    public static readonly KW_DELIMITED = 85;
    public static readonly KW_DESC = 86;
    public static readonly KW_DESCRIBE = 87;
    public static readonly KW_DFS = 88;
    public static readonly KW_DIRECTORIES = 89;
    public static readonly KW_DIRECTORY = 90;
    public static readonly KW_DISABLE = 91;
    public static readonly KW_DISTINCT = 92;
    public static readonly KW_DISTRIBUTE = 93;
    public static readonly KW_DIV = 94;
    public static readonly KW_DOUBLE = 95;
    public static readonly KW_DROP = 96;
    public static readonly KW_ELSE = 97;
    public static readonly KW_ENABLE = 98;
    public static readonly KW_END = 99;
    public static readonly KW_ESCAPE = 100;
    public static readonly KW_ESCAPED = 101;
    public static readonly KW_EXCEPT = 102;
    public static readonly KW_EXCHANGE = 103;
    public static readonly KW_EXCLUDE = 104;
    public static readonly KW_EXISTS = 105;
    public static readonly KW_EXPLAIN = 106;
    public static readonly KW_EXPORT = 107;
    public static readonly KW_EXTENDED = 108;
    public static readonly KW_EXTERNAL = 109;
    public static readonly KW_EXTRACT = 110;
    public static readonly KW_FALSE = 111;
    public static readonly KW_FETCH = 112;
    public static readonly KW_FIELDS = 113;
    public static readonly KW_FILTER = 114;
    public static readonly KW_FILEFORMAT = 115;
    public static readonly KW_FIRST = 116;
    public static readonly KW_FLOAT = 117;
    public static readonly KW_FOLLOWING = 118;
    public static readonly KW_FOR = 119;
    public static readonly KW_FOREIGN = 120;
    public static readonly KW_FORMAT = 121;
    public static readonly KW_FORMATTED = 122;
    public static readonly KW_FROM = 123;
    public static readonly KW_FULL = 124;
    public static readonly KW_FUNCTION = 125;
    public static readonly KW_FUNCTIONS = 126;
    public static readonly KW_GENERATED = 127;
    public static readonly KW_GLOBAL = 128;
    public static readonly KW_GRANT = 129;
    public static readonly KW_GROUP = 130;
    public static readonly KW_GROUPING = 131;
    public static readonly KW_HAVING = 132;
    public static readonly KW_BINARY_HEX = 133;
    public static readonly KW_HOUR = 134;
    public static readonly KW_HOURS = 135;
    public static readonly KW_IDENTIFIER = 136;
    public static readonly KW_IF = 137;
    public static readonly KW_IGNORE = 138;
    public static readonly KW_IMPORT = 139;
    public static readonly KW_IN = 140;
    public static readonly KW_INCLUDE = 141;
    public static readonly KW_INDEX = 142;
    public static readonly KW_INDEXES = 143;
    public static readonly KW_INNER = 144;
    public static readonly KW_INPATH = 145;
    public static readonly KW_INPUTFORMAT = 146;
    public static readonly KW_INSERT = 147;
    public static readonly KW_INTERSECT = 148;
    public static readonly KW_INTERVAL = 149;
    public static readonly KW_INT = 150;
    public static readonly KW_INTEGER = 151;
    public static readonly KW_INTO = 152;
    public static readonly KW_IS = 153;
    public static readonly KW_ITEMS = 154;
    public static readonly KW_JOIN = 155;
    public static readonly KW_KEYS = 156;
    public static readonly KW_LAST = 157;
    public static readonly KW_LATERAL = 158;
    public static readonly KW_LAZY = 159;
    public static readonly KW_LEADING = 160;
    public static readonly KW_LEFT = 161;
    public static readonly KW_LIKE = 162;
    public static readonly KW_ILIKE = 163;
    public static readonly KW_LIMIT = 164;
    public static readonly KW_LINES = 165;
    public static readonly KW_LIST = 166;
    public static readonly KW_LOAD = 167;
    public static readonly KW_LOCAL = 168;
    public static readonly KW_LOCATION = 169;
    public static readonly KW_LOCK = 170;
    public static readonly KW_LOCKS = 171;
    public static readonly KW_LOGICAL = 172;
    public static readonly KW_LONG = 173;
    public static readonly KW_MACRO = 174;
    public static readonly KW_MATERIALIZED = 175;
    public static readonly KW_MAP = 176;
    public static readonly KW_MATCHED = 177;
    public static readonly KW_MERGE = 178;
    public static readonly KW_MICROSECOND = 179;
    public static readonly KW_MICROSECONDS = 180;
    public static readonly KW_MILLISECOND = 181;
    public static readonly KW_MILLISECONDS = 182;
    public static readonly KW_MINUTE = 183;
    public static readonly KW_MINUTES = 184;
    public static readonly KW_MONTH = 185;
    public static readonly KW_MONTHS = 186;
    public static readonly KW_MSCK = 187;
    public static readonly KW_NAME = 188;
    public static readonly KW_NAMESPACE = 189;
    public static readonly KW_NAMESPACES = 190;
    public static readonly KW_NANOSECOND = 191;
    public static readonly KW_NANOSECONDS = 192;
    public static readonly KW_NATURAL = 193;
    public static readonly KW_NO = 194;
    public static readonly KW_NOSCAN = 195;
    public static readonly KW_NOT = 196;
    public static readonly KW_NULL = 197;
    public static readonly KW_NULLS = 198;
    public static readonly KW_NUMERIC = 199;
    public static readonly KW_OF = 200;
    public static readonly KW_OFFSET = 201;
    public static readonly KW_ON = 202;
    public static readonly KW_ONLY = 203;
    public static readonly KW_OPTIMIZE = 204;
    public static readonly KW_OPTION = 205;
    public static readonly KW_OPTIONS = 206;
    public static readonly KW_OR = 207;
    public static readonly KW_ORDER = 208;
    public static readonly KW_OUT = 209;
    public static readonly KW_OUTER = 210;
    public static readonly KW_OUTPUTFORMAT = 211;
    public static readonly KW_OVER = 212;
    public static readonly KW_OVERLAPS = 213;
    public static readonly KW_OVERLAY = 214;
    public static readonly KW_OVERWRITE = 215;
    public static readonly KW_PARTITION = 216;
    public static readonly KW_PARTITIONED = 217;
    public static readonly KW_PARTITIONS = 218;
    public static readonly KW_PERCENTILE_CONT = 219;
    public static readonly KW_PERCENTILE_DISC = 220;
    public static readonly KW_PERCENTLIT = 221;
    public static readonly KW_PIVOT = 222;
    public static readonly KW_PLACING = 223;
    public static readonly KW_POSITION = 224;
    public static readonly KW_PRECEDING = 225;
    public static readonly KW_PRIMARY = 226;
    public static readonly KW_PRINCIPALS = 227;
    public static readonly KW_PROPERTIES = 228;
    public static readonly KW_PURGE = 229;
    public static readonly KW_QUARTER = 230;
    public static readonly KW_QUERY = 231;
    public static readonly KW_RANGE = 232;
    public static readonly KW_REAL = 233;
    public static readonly KW_RECORDREADER = 234;
    public static readonly KW_RECORDWRITER = 235;
    public static readonly KW_RECOVER = 236;
    public static readonly KW_REDUCE = 237;
    public static readonly KW_REFERENCES = 238;
    public static readonly KW_REFRESH = 239;
    public static readonly KW_RENAME = 240;
    public static readonly KW_REPAIR = 241;
    public static readonly KW_REPEATABLE = 242;
    public static readonly KW_REPLACE = 243;
    public static readonly KW_RESET = 244;
    public static readonly KW_RESPECT = 245;
    public static readonly KW_RESTRICT = 246;
    public static readonly KW_REWRITE = 247;
    public static readonly KW_REVOKE = 248;
    public static readonly KW_RIGHT = 249;
    public static readonly KW_RLIKE = 250;
    public static readonly KW_REGEXP = 251;
    public static readonly KW_ROLE = 252;
    public static readonly KW_ROLES = 253;
    public static readonly KW_ROLLBACK = 254;
    public static readonly KW_ROLLUP = 255;
    public static readonly KW_ROW = 256;
    public static readonly KW_ROWS = 257;
    public static readonly KW_SECOND = 258;
    public static readonly KW_SECONDS = 259;
    public static readonly KW_SCHEMA = 260;
    public static readonly KW_SCHEMAS = 261;
    public static readonly KW_SELECT = 262;
    public static readonly KW_SEMI = 263;
    public static readonly KW_SEPARATED = 264;
    public static readonly KW_SERDE = 265;
    public static readonly KW_SERDEPROPERTIES = 266;
    public static readonly KW_SESSION_USER = 267;
    public static readonly KW_SET = 268;
    public static readonly KW_MINUS = 269;
    public static readonly KW_SETS = 270;
    public static readonly KW_SHORT = 271;
    public static readonly KW_SHOW = 272;
    public static readonly KW_SINGLE = 273;
    public static readonly KW_SKEWED = 274;
    public static readonly KW_SMALLINT = 275;
    public static readonly KW_SOME = 276;
    public static readonly KW_SORT = 277;
    public static readonly KW_SORTED = 278;
    public static readonly KW_SOURCE = 279;
    public static readonly KW_START = 280;
    public static readonly KW_STATISTICS = 281;
    public static readonly KW_STORED = 282;
    public static readonly KW_STRATIFY = 283;
    public static readonly KW_STRING = 284;
    public static readonly KW_STRUCT = 285;
    public static readonly KW_SUBSTR = 286;
    public static readonly KW_SUBSTRING = 287;
    public static readonly KW_SYNC = 288;
    public static readonly KW_SYSTEM = 289;
    public static readonly KW_SYSTEM_TIME = 290;
    public static readonly KW_SYSTEM_VERSION = 291;
    public static readonly KW_TABLE = 292;
    public static readonly KW_TABLES = 293;
    public static readonly KW_TABLESAMPLE = 294;
    public static readonly KW_TARGET = 295;
    public static readonly KW_TBLPROPERTIES = 296;
    public static readonly KW_TEMPORARY = 297;
    public static readonly KW_TERMINATED = 298;
    public static readonly KW_THEN = 299;
    public static readonly KW_TIME = 300;
    public static readonly KW_TIMEDIFF = 301;
    public static readonly KW_TIMESTAMP = 302;
    public static readonly KW_TIMESTAMP_LTZ = 303;
    public static readonly KW_TIMESTAMP_NTZ = 304;
    public static readonly KW_TIMESTAMPADD = 305;
    public static readonly KW_TIMESTAMPDIFF = 306;
    public static readonly KW_TINYINT = 307;
    public static readonly KW_TO = 308;
    public static readonly KW_TOUCH = 309;
    public static readonly KW_TRAILING = 310;
    public static readonly KW_TRANSACTION = 311;
    public static readonly KW_TRANSACTIONS = 312;
    public static readonly KW_TRANSFORM = 313;
    public static readonly KW_TRIM = 314;
    public static readonly KW_TRUE = 315;
    public static readonly KW_TRUNCATE = 316;
    public static readonly KW_TRY_CAST = 317;
    public static readonly KW_TYPE = 318;
    public static readonly KW_UNARCHIVE = 319;
    public static readonly KW_UNBOUNDED = 320;
    public static readonly KW_UNCACHE = 321;
    public static readonly KW_UNION = 322;
    public static readonly KW_UNIQUE = 323;
    public static readonly KW_UNKNOWN = 324;
    public static readonly KW_UNLOCK = 325;
    public static readonly KW_UNPIVOT = 326;
    public static readonly KW_UNSET = 327;
    public static readonly KW_UPDATE = 328;
    public static readonly KW_USE = 329;
    public static readonly KW_USER = 330;
    public static readonly KW_USING = 331;
    public static readonly KW_VALUES = 332;
    public static readonly KW_VARCHAR = 333;
    public static readonly KW_VAR = 334;
    public static readonly KW_VARIABLE = 335;
    public static readonly KW_VERSION = 336;
    public static readonly KW_VIEW = 337;
    public static readonly KW_VIEWS = 338;
    public static readonly KW_VOID = 339;
    public static readonly KW_WEEK = 340;
    public static readonly KW_WEEKS = 341;
    public static readonly KW_WHEN = 342;
    public static readonly KW_WHERE = 343;
    public static readonly KW_WINDOW = 344;
    public static readonly KW_WITH = 345;
    public static readonly KW_WITHIN = 346;
    public static readonly KW_YEAR = 347;
    public static readonly KW_YEARS = 348;
    public static readonly KW_ZONE = 349;
    public static readonly KW_ZORDER = 350;
    public static readonly EQ = 351;
    public static readonly NSEQ = 352;
    public static readonly NEQ = 353;
    public static readonly NEQJ = 354;
    public static readonly LT = 355;
    public static readonly LTE = 356;
    public static readonly GT = 357;
    public static readonly GTE = 358;
    public static readonly NOT = 359;
    public static readonly PLUS = 360;
    public static readonly MINUS = 361;
    public static readonly ASTERISK = 362;
    public static readonly SLASH = 363;
    public static readonly PERCENT = 364;
    public static readonly TILDE = 365;
    public static readonly AMPERSAND = 366;
    public static readonly PIPE = 367;
    public static readonly CONCAT_PIPE = 368;
    public static readonly HAT = 369;
    public static readonly COLON = 370;
    public static readonly ARROW = 371;
    public static readonly FAT_ARROW = 372;
    public static readonly HENT_START = 373;
    public static readonly HENT_END = 374;
    public static readonly QUESTION = 375;
    public static readonly STRING_LITERAL = 376;
    public static readonly DOUBLEQUOTED_STRING = 377;
    public static readonly BIGINT_LITERAL = 378;
    public static readonly SMALLINT_LITERAL = 379;
    public static readonly TINYINT_LITERAL = 380;
    public static readonly INTEGER_VALUE = 381;
    public static readonly EXPONENT_VALUE = 382;
    public static readonly DECIMAL_VALUE = 383;
    public static readonly FLOAT_LITERAL = 384;
    public static readonly DOUBLE_LITERAL = 385;
    public static readonly BIGDECIMAL_LITERAL = 386;
    public static readonly IDENTIFIER = 387;
    public static readonly BACKQUOTED_IDENTIFIER = 388;
    public static readonly SIMPLE_COMMENT = 389;
    public static readonly BRACKETED_COMMENT = 390;
    public static readonly WS = 391;
    public static readonly UNRECOGNIZED = 392;
    public static readonly RULE_program = 0;
    public static readonly RULE_singleStatement = 1;
    public static readonly RULE_statement = 2;
    public static readonly RULE_timezone = 3;
    public static readonly RULE_configKey = 4;
    public static readonly RULE_configValue = 5;
    public static readonly RULE_unsupportedHiveNativeCommands = 6;
    public static readonly RULE_createTableHeader = 7;
    public static readonly RULE_replaceTableHeader = 8;
    public static readonly RULE_bucketSpec = 9;
    public static readonly RULE_skewSpec = 10;
    public static readonly RULE_locationSpec = 11;
    public static readonly RULE_commentSpec = 12;
    public static readonly RULE_query = 13;
    public static readonly RULE_insertInto = 14;
    public static readonly RULE_partitionSpecLocation = 15;
    public static readonly RULE_partitionSpec = 16;
    public static readonly RULE_partitionVal = 17;
    public static readonly RULE_dbSchema = 18;
    public static readonly RULE_dbSchemas = 19;
    public static readonly RULE_describeFuncName = 20;
    public static readonly RULE_describeColName = 21;
    public static readonly RULE_ctes = 22;
    public static readonly RULE_namedQuery = 23;
    public static readonly RULE_tableProvider = 24;
    public static readonly RULE_createTableClauses = 25;
    public static readonly RULE_propertyList = 26;
    public static readonly RULE_property = 27;
    public static readonly RULE_propertyKey = 28;
    public static readonly RULE_propertyValue = 29;
    public static readonly RULE_expressionPropertyList = 30;
    public static readonly RULE_expressionProperty = 31;
    public static readonly RULE_constantList = 32;
    public static readonly RULE_nestedConstantList = 33;
    public static readonly RULE_createFileFormat = 34;
    public static readonly RULE_fileFormat = 35;
    public static readonly RULE_storageHandler = 36;
    public static readonly RULE_resource = 37;
    public static readonly RULE_dmlStatementNoWith = 38;
    public static readonly RULE_dbSchemaName = 39;
    public static readonly RULE_dbSchemaNameCreate = 40;
    public static readonly RULE_tableNameCreate = 41;
    public static readonly RULE_tableName = 42;
    public static readonly RULE_viewNameCreate = 43;
    public static readonly RULE_viewName = 44;
    public static readonly RULE_columnName = 45;
    public static readonly RULE_columnNameSeq = 46;
    public static readonly RULE_columnNameCreate = 47;
    public static readonly RULE_identifierReference = 48;
    public static readonly RULE_queryOrganization = 49;
    public static readonly RULE_multiInsertQueryBody = 50;
    public static readonly RULE_queryTerm = 51;
    public static readonly RULE_queryPrimary = 52;
    public static readonly RULE_sortItem = 53;
    public static readonly RULE_fromStatement = 54;
    public static readonly RULE_fromStatementBody = 55;
    public static readonly RULE_querySpecification = 56;
    public static readonly RULE_transformClause = 57;
    public static readonly RULE_selectClause = 58;
    public static readonly RULE_setClause = 59;
    public static readonly RULE_matchedClause = 60;
    public static readonly RULE_notMatchedClause = 61;
    public static readonly RULE_notMatchedBySourceClause = 62;
    public static readonly RULE_matchedAction = 63;
    public static readonly RULE_notMatchedAction = 64;
    public static readonly RULE_notMatchedBySourceAction = 65;
    public static readonly RULE_assignmentList = 66;
    public static readonly RULE_assignment = 67;
    public static readonly RULE_whereClause = 68;
    public static readonly RULE_havingClause = 69;
    public static readonly RULE_hint = 70;
    public static readonly RULE_hintStatement = 71;
    public static readonly RULE_fromClause = 72;
    public static readonly RULE_functionKind = 73;
    public static readonly RULE_temporalClause = 74;
    public static readonly RULE_aggregationClause = 75;
    public static readonly RULE_groupByClause = 76;
    public static readonly RULE_groupingAnalytics = 77;
    public static readonly RULE_groupingElement = 78;
    public static readonly RULE_groupingSet = 79;
    public static readonly RULE_pivotClause = 80;
    public static readonly RULE_pivotColumn = 81;
    public static readonly RULE_pivotValue = 82;
    public static readonly RULE_unpivotClause = 83;
    public static readonly RULE_unpivotNullClause = 84;
    public static readonly RULE_unpivotOperator = 85;
    public static readonly RULE_unpivotSingleValueColumnClause = 86;
    public static readonly RULE_unpivotMultiValueColumnClause = 87;
    public static readonly RULE_unpivotColumnSet = 88;
    public static readonly RULE_unpivotValueColumn = 89;
    public static readonly RULE_unpivotNameColumn = 90;
    public static readonly RULE_unpivotColumnAndAlias = 91;
    public static readonly RULE_unpivotColumn = 92;
    public static readonly RULE_unpivotAlias = 93;
    public static readonly RULE_ifNotExists = 94;
    public static readonly RULE_ifExists = 95;
    public static readonly RULE_lateralView = 96;
    public static readonly RULE_setQuantifier = 97;
    public static readonly RULE_relation = 98;
    public static readonly RULE_relationExtension = 99;
    public static readonly RULE_joinRelation = 100;
    public static readonly RULE_joinType = 101;
    public static readonly RULE_joinCriteria = 102;
    public static readonly RULE_sample = 103;
    public static readonly RULE_sampleMethod = 104;
    public static readonly RULE_identifierList = 105;
    public static readonly RULE_identifierSeq = 106;
    public static readonly RULE_orderedIdentifierList = 107;
    public static readonly RULE_orderedIdentifier = 108;
    public static readonly RULE_identifierCommentList = 109;
    public static readonly RULE_identifierComment = 110;
    public static readonly RULE_relationPrimary = 111;
    public static readonly RULE_inlineTable = 112;
    public static readonly RULE_functionTableSubqueryArgument = 113;
    public static readonly RULE_tableArgumentPartitioning = 114;
    public static readonly RULE_functionTableNamedArgumentExpression = 115;
    public static readonly RULE_functionTableReferenceArgument = 116;
    public static readonly RULE_functionTableArgument = 117;
    public static readonly RULE_functionTable = 118;
    public static readonly RULE_tableAlias = 119;
    public static readonly RULE_rowFormat = 120;
    public static readonly RULE_multipartIdentifierList = 121;
    public static readonly RULE_multipartIdentifier = 122;
    public static readonly RULE_multipartIdentifierPropertyList = 123;
    public static readonly RULE_multipartIdentifierProperty = 124;
    public static readonly RULE_tableIdentifier = 125;
    public static readonly RULE_viewIdentifier = 126;
    public static readonly RULE_namedExpression = 127;
    public static readonly RULE_namedExpressionSeq = 128;
    public static readonly RULE_partitionFieldList = 129;
    public static readonly RULE_partitionField = 130;
    public static readonly RULE_transform = 131;
    public static readonly RULE_transformArgument = 132;
    public static readonly RULE_expression = 133;
    public static readonly RULE_namedArgumentExpression = 134;
    public static readonly RULE_functionArgument = 135;
    public static readonly RULE_expressionSeq = 136;
    public static readonly RULE_booleanExpression = 137;
    public static readonly RULE_predicate = 138;
    public static readonly RULE_valueExpression = 139;
    public static readonly RULE_datetimeUnit = 140;
    public static readonly RULE_primaryExpression = 141;
    public static readonly RULE_literalType = 142;
    public static readonly RULE_constant = 143;
    public static readonly RULE_comparisonOperator = 144;
    public static readonly RULE_arithmeticOperator = 145;
    public static readonly RULE_predicateOperator = 146;
    public static readonly RULE_booleanValue = 147;
    public static readonly RULE_interval = 148;
    public static readonly RULE_errorCapturingMultiUnitsInterval = 149;
    public static readonly RULE_multiUnitsInterval = 150;
    public static readonly RULE_errorCapturingUnitToUnitInterval = 151;
    public static readonly RULE_unitToUnitInterval = 152;
    public static readonly RULE_intervalValue = 153;
    public static readonly RULE_unitInMultiUnits = 154;
    public static readonly RULE_unitInUnitToUnit = 155;
    public static readonly RULE_colPosition = 156;
    public static readonly RULE_type = 157;
    public static readonly RULE_dataType = 158;
    public static readonly RULE_qualifiedColTypeWithPositionSeqForAdd = 159;
    public static readonly RULE_qualifiedColTypeWithPositionForAdd = 160;
    public static readonly RULE_qualifiedColTypeWithPositionSeqForReplace = 161;
    public static readonly RULE_qualifiedColTypeWithPositionForReplace = 162;
    public static readonly RULE_colDefinitionDescriptorWithPosition = 163;
    public static readonly RULE_defaultExpression = 164;
    public static readonly RULE_variableDefaultExpression = 165;
    public static readonly RULE_colTypeList = 166;
    public static readonly RULE_colType = 167;
    public static readonly RULE_createOrReplaceTableColTypeList = 168;
    public static readonly RULE_createOrReplaceTableColType = 169;
    public static readonly RULE_colDefinitionOption = 170;
    public static readonly RULE_generationExpression = 171;
    public static readonly RULE_complexColTypeList = 172;
    public static readonly RULE_complexColType = 173;
    public static readonly RULE_whenClause = 174;
    public static readonly RULE_windowClause = 175;
    public static readonly RULE_zorderClause = 176;
    public static readonly RULE_namedWindow = 177;
    public static readonly RULE_windowSpec = 178;
    public static readonly RULE_windowFrame = 179;
    public static readonly RULE_frameBound = 180;
    public static readonly RULE_qualifiedNameList = 181;
    public static readonly RULE_functionName = 182;
    public static readonly RULE_functionNameCreate = 183;
    public static readonly RULE_qualifiedName = 184;
    public static readonly RULE_errorCapturingIdentifier = 185;
    public static readonly RULE_errorCapturingIdentifierExtra = 186;
    public static readonly RULE_identifier = 187;
    public static readonly RULE_strictIdentifier = 188;
    public static readonly RULE_quotedIdentifier = 189;
    public static readonly RULE_backQuotedIdentifier = 190;
    public static readonly RULE_number = 191;
    public static readonly RULE_alterColumnAction = 192;
    public static readonly RULE_stringLit = 193;
    public static readonly RULE_comment = 194;
    public static readonly RULE_version = 195;
    public static readonly RULE_ansiNonReserved = 196;
    public static readonly RULE_strictNonReserved = 197;
    public static readonly RULE_nonReserved = 198;

    public static readonly literalNames = [
        null, "';'", "'('", "')'", "','", "'.'", "'['", "']'", "'ADD'", 
        "'AFTER'", "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", 
        "'ANTI'", "'ANY'", "'ANY_VALUE'", "'ARCHIVE'", "'ARRAY'", "'AS'", 
        "'ASC'", "'AT'", "'AUTHORIZATION'", "'BETWEEN'", "'BIGINT'", "'BINARY'", 
        "'BOOLEAN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", "'BYTE'", 
        "'CACHE'", "'CASCADE'", "'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", 
        "'CHANGE'", "'CHAR'", "'CHARACTER'", "'CHECK'", "'CLEAR'", "'CLUSTER'", 
        "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", "'COLLECTION'", "'COLUMN'", 
        "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", 
        "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'", "'CREATE'", 
        "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
        "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DAY'", "'DAYS'", "'DAYOFYEAR'", 
        "'DATA'", "'DATE'", "'DATABASE'", "'DATABASES'", "'DATEADD'", "'DATE_ADD'", 
        "'DATEDIFF'", "'DATE_DIFF'", "'DBPROPERTIES'", "'DEC'", "'DECIMAL'", 
        "'DECLARE'", "'DEFAULT'", "'DEFINED'", "'DELETE'", "'DELIMITED'", 
        "'DESC'", "'DESCRIBE'", "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", 
        "'DISABLE'", "'DISTINCT'", "'DISTRIBUTE'", "'DIV'", "'DOUBLE'", 
        "'DROP'", "'ELSE'", "'ENABLE'", "'END'", "'ESCAPE'", "'ESCAPED'", 
        "'EXCEPT'", "'EXCHANGE'", "'EXCLUDE'", "'EXISTS'", "'EXPLAIN'", 
        "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FALSE'", 
        "'FETCH'", "'FIELDS'", "'FILTER'", "'FILEFORMAT'", "'FIRST'", "'FLOAT'", 
        "'FOLLOWING'", "'FOR'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", 
        "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GENERATED'", 
        "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", "'X'", 
        "'HOUR'", "'HOURS'", "'IDENTIFIER'", "'IF'", "'IGNORE'", "'IMPORT'", 
        "'IN'", "'INCLUDE'", "'INDEX'", "'INDEXES'", "'INNER'", "'INPATH'", 
        "'INPUTFORMAT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INT'", 
        "'INTEGER'", "'INTO'", "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", "'LAST'", 
        "'LATERAL'", "'LAZY'", "'LEADING'", "'LEFT'", "'LIKE'", "'ILIKE'", 
        "'LIMIT'", "'LINES'", "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", 
        "'LOCK'", "'LOCKS'", "'LOGICAL'", "'LONG'", "'MACRO'", "'MATERIALIZED'", 
        "'MAP'", "'MATCHED'", "'MERGE'", "'MICROSECOND'", "'MICROSECONDS'", 
        "'MILLISECOND'", "'MILLISECONDS'", "'MINUTE'", "'MINUTES'", "'MONTH'", 
        "'MONTHS'", "'MSCK'", "'NAME'", "'NAMESPACE'", "'NAMESPACES'", "'NANOSECOND'", 
        "'NANOSECONDS'", "'NATURAL'", "'NO'", "'NOSCAN'", "'NOT'", "'NULL'", 
        "'NULLS'", "'NUMERIC'", "'OF'", "'OFFSET'", "'ON'", "'ONLY'", "'OPTIMIZE'", 
        "'OPTION'", "'OPTIONS'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", 
        "'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", 
        "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENTILE_CONT'", 
        "'PERCENTILE_DISC'", "'PERCENT'", "'PIVOT'", "'PLACING'", "'POSITION'", 
        "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'", "'PROPERTIES'", "'PURGE'", 
        "'QUARTER'", "'QUERY'", "'RANGE'", "'REAL'", "'RECORDREADER'", "'RECORDWRITER'", 
        "'RECOVER'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", "'RENAME'", 
        "'REPAIR'", "'REPEATABLE'", "'REPLACE'", "'RESET'", "'RESPECT'", 
        "'RESTRICT'", "'REWRITE'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'REGEXP'", 
        "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", 
        "'SECOND'", "'SECONDS'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SEMI'", 
        "'SEPARATED'", "'SERDE'", "'SERDEPROPERTIES'", "'SESSION_USER'", 
        "'SET'", "'MINUS'", "'SETS'", "'SHORT'", "'SHOW'", "'SINGLE'", "'SKEWED'", 
        "'SMALLINT'", "'SOME'", "'SORT'", "'SORTED'", "'SOURCE'", "'START'", 
        "'STATISTICS'", "'STORED'", "'STRATIFY'", "'STRING'", "'STRUCT'", 
        "'SUBSTR'", "'SUBSTRING'", "'SYNC'", "'SYSTEM'", "'SYSTEM_TIME'", 
        "'SYSTEM_VERSION'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TARGET'", 
        "'TBLPROPERTIES'", "'TEMPORARY'", "'TERMINATED'", "'THEN'", "'TIME'", 
        "'TIMEDIFF'", "'TIMESTAMP'", "'TIMESTAMP_LTZ'", "'TIMESTAMP_NTZ'", 
        "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TINYINT'", "'TO'", "'TOUCH'", 
        "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", 
        "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UNARCHIVE'", 
        "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", 
        "'UNLOCK'", "'UNPIVOT'", "'UNSET'", "'UPDATE'", "'USE'", "'USER'", 
        "'USING'", "'VALUES'", "'VARCHAR'", "'VAR'", "'VARIABLE'", "'VERSION'", 
        "'VIEW'", "'VIEWS'", "'VOID'", "'WEEK'", "'WEEKS'", "'WHEN'", "'WHERE'", 
        "'WINDOW'", "'WITH'", "'WITHIN'", "'YEAR'", "'YEARS'", "'ZONE'", 
        "'ZORDER'", null, "'<=>'", "'<>'", "'!='", "'<'", null, "'>'", null, 
        "'!'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'|'", "'||'", 
        "'^'", "':'", "'->'", "'=>'", "'/*+'", "'*/'", "'?'"
    ];

    public static readonly symbolicNames = [
        null, "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "DOT", 
        "LEFT_BRACKET", "RIGHT_BRACKET", "KW_ADD", "KW_AFTER", "KW_ALL", 
        "KW_ALTER", "KW_ALWAYS", "KW_ANALYZE", "KW_AND", "KW_ANTI", "KW_ANY", 
        "KW_ANY_VALUE", "KW_ARCHIVE", "KW_ARRAY", "KW_AS", "KW_ASC", "KW_AT", 
        "KW_AUTHORIZATION", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", "KW_BOOLEAN", 
        "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_BYTE", "KW_CACHE", 
        "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CATALOG", "KW_CATALOGS", 
        "KW_CHANGE", "KW_CHAR", "KW_CHARACTER", "KW_CHECK", "KW_CLEAR", 
        "KW_CLUSTER", "KW_CLUSTERED", "KW_CODEGEN", "KW_COLLATE", "KW_COLLECTION", 
        "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPACT", 
        "KW_COMPACTIONS", "KW_COMPUTE", "KW_CONCATENATE", "KW_CONSTRAINT", 
        "KW_COST", "KW_CREATE", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", 
        "KW_CURRENT_TIME", "KW_CURRENT_TIMESTAMP", "KW_CURRENT_USER", "KW_DAY", 
        "KW_DAYS", "KW_DAYOFYEAR", "KW_DATA", "KW_DATE", "KW_DATABASE", 
        "KW_DATABASES", "KW_DATEADD", "KW_DATE_ADD", "KW_DATEDIFF", "KW_DATE_DIFF", 
        "KW_DBPROPERTIES", "KW_DEC", "KW_DECIMAL", "KW_DECLARE", "KW_DEFAULT", 
        "KW_DEFINED", "KW_DELETE", "KW_DELIMITED", "KW_DESC", "KW_DESCRIBE", 
        "KW_DFS", "KW_DIRECTORIES", "KW_DIRECTORY", "KW_DISABLE", "KW_DISTINCT", 
        "KW_DISTRIBUTE", "KW_DIV", "KW_DOUBLE", "KW_DROP", "KW_ELSE", "KW_ENABLE", 
        "KW_END", "KW_ESCAPE", "KW_ESCAPED", "KW_EXCEPT", "KW_EXCHANGE", 
        "KW_EXCLUDE", "KW_EXISTS", "KW_EXPLAIN", "KW_EXPORT", "KW_EXTENDED", 
        "KW_EXTERNAL", "KW_EXTRACT", "KW_FALSE", "KW_FETCH", "KW_FIELDS", 
        "KW_FILTER", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", "KW_FOLLOWING", 
        "KW_FOR", "KW_FOREIGN", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", 
        "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS", "KW_GENERATED", "KW_GLOBAL", 
        "KW_GRANT", "KW_GROUP", "KW_GROUPING", "KW_HAVING", "KW_BINARY_HEX", 
        "KW_HOUR", "KW_HOURS", "KW_IDENTIFIER", "KW_IF", "KW_IGNORE", "KW_IMPORT", 
        "KW_IN", "KW_INCLUDE", "KW_INDEX", "KW_INDEXES", "KW_INNER", "KW_INPATH", 
        "KW_INPUTFORMAT", "KW_INSERT", "KW_INTERSECT", "KW_INTERVAL", "KW_INT", 
        "KW_INTEGER", "KW_INTO", "KW_IS", "KW_ITEMS", "KW_JOIN", "KW_KEYS", 
        "KW_LAST", "KW_LATERAL", "KW_LAZY", "KW_LEADING", "KW_LEFT", "KW_LIKE", 
        "KW_ILIKE", "KW_LIMIT", "KW_LINES", "KW_LIST", "KW_LOAD", "KW_LOCAL", 
        "KW_LOCATION", "KW_LOCK", "KW_LOCKS", "KW_LOGICAL", "KW_LONG", "KW_MACRO", 
        "KW_MATERIALIZED", "KW_MAP", "KW_MATCHED", "KW_MERGE", "KW_MICROSECOND", 
        "KW_MICROSECONDS", "KW_MILLISECOND", "KW_MILLISECONDS", "KW_MINUTE", 
        "KW_MINUTES", "KW_MONTH", "KW_MONTHS", "KW_MSCK", "KW_NAME", "KW_NAMESPACE", 
        "KW_NAMESPACES", "KW_NANOSECOND", "KW_NANOSECONDS", "KW_NATURAL", 
        "KW_NO", "KW_NOSCAN", "KW_NOT", "KW_NULL", "KW_NULLS", "KW_NUMERIC", 
        "KW_OF", "KW_OFFSET", "KW_ON", "KW_ONLY", "KW_OPTIMIZE", "KW_OPTION", 
        "KW_OPTIONS", "KW_OR", "KW_ORDER", "KW_OUT", "KW_OUTER", "KW_OUTPUTFORMAT", 
        "KW_OVER", "KW_OVERLAPS", "KW_OVERLAY", "KW_OVERWRITE", "KW_PARTITION", 
        "KW_PARTITIONED", "KW_PARTITIONS", "KW_PERCENTILE_CONT", "KW_PERCENTILE_DISC", 
        "KW_PERCENTLIT", "KW_PIVOT", "KW_PLACING", "KW_POSITION", "KW_PRECEDING", 
        "KW_PRIMARY", "KW_PRINCIPALS", "KW_PROPERTIES", "KW_PURGE", "KW_QUARTER", 
        "KW_QUERY", "KW_RANGE", "KW_REAL", "KW_RECORDREADER", "KW_RECORDWRITER", 
        "KW_RECOVER", "KW_REDUCE", "KW_REFERENCES", "KW_REFRESH", "KW_RENAME", 
        "KW_REPAIR", "KW_REPEATABLE", "KW_REPLACE", "KW_RESET", "KW_RESPECT", 
        "KW_RESTRICT", "KW_REWRITE", "KW_REVOKE", "KW_RIGHT", "KW_RLIKE", 
        "KW_REGEXP", "KW_ROLE", "KW_ROLES", "KW_ROLLBACK", "KW_ROLLUP", 
        "KW_ROW", "KW_ROWS", "KW_SECOND", "KW_SECONDS", "KW_SCHEMA", "KW_SCHEMAS", 
        "KW_SELECT", "KW_SEMI", "KW_SEPARATED", "KW_SERDE", "KW_SERDEPROPERTIES", 
        "KW_SESSION_USER", "KW_SET", "KW_MINUS", "KW_SETS", "KW_SHORT", 
        "KW_SHOW", "KW_SINGLE", "KW_SKEWED", "KW_SMALLINT", "KW_SOME", "KW_SORT", 
        "KW_SORTED", "KW_SOURCE", "KW_START", "KW_STATISTICS", "KW_STORED", 
        "KW_STRATIFY", "KW_STRING", "KW_STRUCT", "KW_SUBSTR", "KW_SUBSTRING", 
        "KW_SYNC", "KW_SYSTEM", "KW_SYSTEM_TIME", "KW_SYSTEM_VERSION", "KW_TABLE", 
        "KW_TABLES", "KW_TABLESAMPLE", "KW_TARGET", "KW_TBLPROPERTIES", 
        "KW_TEMPORARY", "KW_TERMINATED", "KW_THEN", "KW_TIME", "KW_TIMEDIFF", 
        "KW_TIMESTAMP", "KW_TIMESTAMP_LTZ", "KW_TIMESTAMP_NTZ", "KW_TIMESTAMPADD", 
        "KW_TIMESTAMPDIFF", "KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRAILING", 
        "KW_TRANSACTION", "KW_TRANSACTIONS", "KW_TRANSFORM", "KW_TRIM", 
        "KW_TRUE", "KW_TRUNCATE", "KW_TRY_CAST", "KW_TYPE", "KW_UNARCHIVE", 
        "KW_UNBOUNDED", "KW_UNCACHE", "KW_UNION", "KW_UNIQUE", "KW_UNKNOWN", 
        "KW_UNLOCK", "KW_UNPIVOT", "KW_UNSET", "KW_UPDATE", "KW_USE", "KW_USER", 
        "KW_USING", "KW_VALUES", "KW_VARCHAR", "KW_VAR", "KW_VARIABLE", 
        "KW_VERSION", "KW_VIEW", "KW_VIEWS", "KW_VOID", "KW_WEEK", "KW_WEEKS", 
        "KW_WHEN", "KW_WHERE", "KW_WINDOW", "KW_WITH", "KW_WITHIN", "KW_YEAR", 
        "KW_YEARS", "KW_ZONE", "KW_ZORDER", "EQ", "NSEQ", "NEQ", "NEQJ", 
        "LT", "LTE", "GT", "GTE", "NOT", "PLUS", "MINUS", "ASTERISK", "SLASH", 
        "PERCENT", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", "HAT", "COLON", 
        "ARROW", "FAT_ARROW", "HENT_START", "HENT_END", "QUESTION", "STRING_LITERAL", 
        "DOUBLEQUOTED_STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", "TINYINT_LITERAL", 
        "INTEGER_VALUE", "EXPONENT_VALUE", "DECIMAL_VALUE", "FLOAT_LITERAL", 
        "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
        "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED"
    ];
    public static readonly ruleNames = [
        "program", "singleStatement", "statement", "timezone", "configKey", 
        "configValue", "unsupportedHiveNativeCommands", "createTableHeader", 
        "replaceTableHeader", "bucketSpec", "skewSpec", "locationSpec", 
        "commentSpec", "query", "insertInto", "partitionSpecLocation", "partitionSpec", 
        "partitionVal", "dbSchema", "dbSchemas", "describeFuncName", "describeColName", 
        "ctes", "namedQuery", "tableProvider", "createTableClauses", "propertyList", 
        "property", "propertyKey", "propertyValue", "expressionPropertyList", 
        "expressionProperty", "constantList", "nestedConstantList", "createFileFormat", 
        "fileFormat", "storageHandler", "resource", "dmlStatementNoWith", 
        "dbSchemaName", "dbSchemaNameCreate", "tableNameCreate", "tableName", 
        "viewNameCreate", "viewName", "columnName", "columnNameSeq", "columnNameCreate", 
        "identifierReference", "queryOrganization", "multiInsertQueryBody", 
        "queryTerm", "queryPrimary", "sortItem", "fromStatement", "fromStatementBody", 
        "querySpecification", "transformClause", "selectClause", "setClause", 
        "matchedClause", "notMatchedClause", "notMatchedBySourceClause", 
        "matchedAction", "notMatchedAction", "notMatchedBySourceAction", 
        "assignmentList", "assignment", "whereClause", "havingClause", "hint", 
        "hintStatement", "fromClause", "functionKind", "temporalClause", 
        "aggregationClause", "groupByClause", "groupingAnalytics", "groupingElement", 
        "groupingSet", "pivotClause", "pivotColumn", "pivotValue", "unpivotClause", 
        "unpivotNullClause", "unpivotOperator", "unpivotSingleValueColumnClause", 
        "unpivotMultiValueColumnClause", "unpivotColumnSet", "unpivotValueColumn", 
        "unpivotNameColumn", "unpivotColumnAndAlias", "unpivotColumn", "unpivotAlias", 
        "ifNotExists", "ifExists", "lateralView", "setQuantifier", "relation", 
        "relationExtension", "joinRelation", "joinType", "joinCriteria", 
        "sample", "sampleMethod", "identifierList", "identifierSeq", "orderedIdentifierList", 
        "orderedIdentifier", "identifierCommentList", "identifierComment", 
        "relationPrimary", "inlineTable", "functionTableSubqueryArgument", 
        "tableArgumentPartitioning", "functionTableNamedArgumentExpression", 
        "functionTableReferenceArgument", "functionTableArgument", "functionTable", 
        "tableAlias", "rowFormat", "multipartIdentifierList", "multipartIdentifier", 
        "multipartIdentifierPropertyList", "multipartIdentifierProperty", 
        "tableIdentifier", "viewIdentifier", "namedExpression", "namedExpressionSeq", 
        "partitionFieldList", "partitionField", "transform", "transformArgument", 
        "expression", "namedArgumentExpression", "functionArgument", "expressionSeq", 
        "booleanExpression", "predicate", "valueExpression", "datetimeUnit", 
        "primaryExpression", "literalType", "constant", "comparisonOperator", 
        "arithmeticOperator", "predicateOperator", "booleanValue", "interval", 
        "errorCapturingMultiUnitsInterval", "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
        "unitToUnitInterval", "intervalValue", "unitInMultiUnits", "unitInUnitToUnit", 
        "colPosition", "type", "dataType", "qualifiedColTypeWithPositionSeqForAdd", 
        "qualifiedColTypeWithPositionForAdd", "qualifiedColTypeWithPositionSeqForReplace", 
        "qualifiedColTypeWithPositionForReplace", "colDefinitionDescriptorWithPosition", 
        "defaultExpression", "variableDefaultExpression", "colTypeList", 
        "colType", "createOrReplaceTableColTypeList", "createOrReplaceTableColType", 
        "colDefinitionOption", "generationExpression", "complexColTypeList", 
        "complexColType", "whenClause", "windowClause", "zorderClause", 
        "namedWindow", "windowSpec", "windowFrame", "frameBound", "qualifiedNameList", 
        "functionName", "functionNameCreate", "qualifiedName", "errorCapturingIdentifier", 
        "errorCapturingIdentifierExtra", "identifier", "strictIdentifier", 
        "quotedIdentifier", "backQuotedIdentifier", "number", "alterColumnAction", 
        "stringLit", "comment", "version", "ansiNonReserved", "strictNonReserved", 
        "nonReserved",
    ];

    public get grammarFileName(): string { return "SparkSqlParser.g4"; }
    public get literalNames(): (string | null)[] { return SparkSqlParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return SparkSqlParser.symbolicNames; }
    public get ruleNames(): string[] { return SparkSqlParser.ruleNames; }
    public get serializedATN(): number[] { return SparkSqlParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, SparkSqlParser._ATN, SparkSqlParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public program(): ProgramContext {
        let localContext = new ProgramContext(this.context, this.state);
        this.enterRule(localContext, 0, SparkSqlParser.RULE_program);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 401;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 10500) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 67896321) !== 0) || ((((_la - 81)) & ~0x1F) === 0 && ((1 << (_la - 81)) & 100696297) !== 0) || ((((_la - 123)) & ~0x1F) === 0 && ((1 << (_la - 123)) & 16842817) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 2102291) !== 0) || _la === 204 || ((((_la - 237)) & ~0x1F) === 0 && ((1 << (_la - 237)) & 2181171413) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 1048833) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & 536949281) !== 0)) {
                {
                {
                this.state = 398;
                this.singleStatement();
                }
                }
                this.state = 403;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 404;
            this.match(SparkSqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleStatement(): SingleStatementContext {
        let localContext = new SingleStatementContext(this.context, this.state);
        this.enterRule(localContext, 2, SparkSqlParser.RULE_singleStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 406;
            this.statement();
            this.state = 408;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1) {
                {
                this.state = 407;
                this.match(SparkSqlParser.SEMICOLON);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 4, SparkSqlParser.RULE_statement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1335;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 143, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 410;
                this.query();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 412;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 345) {
                    {
                    this.state = 411;
                    this.ctes();
                    }
                }

                this.state = 414;
                this.dmlStatementNoWith();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 415;
                this.match(SparkSqlParser.KW_USE);
                this.state = 416;
                this.dbSchemaName();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 417;
                this.match(SparkSqlParser.KW_USE);
                this.state = 418;
                this.dbSchema();
                this.state = 419;
                this.dbSchemaName();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 421;
                this.match(SparkSqlParser.KW_SET);
                this.state = 422;
                this.match(SparkSqlParser.KW_CATALOG);
                this.state = 425;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
                case 1:
                    {
                    this.state = 423;
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 424;
                    this.stringLit();
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 427;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 428;
                this.dbSchema();
                this.state = 430;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 4, this.context) ) {
                case 1:
                    {
                    this.state = 429;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 432;
                this.dbSchemaNameCreate();
                this.state = 440;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 6, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        this.state = 438;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case SparkSqlParser.KW_COMMENT:
                            {
                            this.state = 433;
                            this.commentSpec();
                            }
                            break;
                        case SparkSqlParser.KW_LOCATION:
                            {
                            this.state = 434;
                            this.locationSpec();
                            }
                            break;
                        case SparkSqlParser.KW_WITH:
                            {
                            {
                            this.state = 435;
                            this.match(SparkSqlParser.KW_WITH);
                            this.state = 436;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 78 || _la === 228)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 437;
                            this.propertyList();
                            }
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                    }
                    this.state = 442;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 6, this.context);
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 443;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 444;
                this.dbSchema();
                this.state = 445;
                this.dbSchemaName();
                this.state = 446;
                this.match(SparkSqlParser.KW_SET);
                this.state = 447;
                _la = this.tokenStream.LA(1);
                if(!(_la === 78 || _la === 228)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 448;
                this.propertyList();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 450;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 451;
                this.dbSchema();
                this.state = 452;
                this.dbSchemaName();
                this.state = 453;
                this.match(SparkSqlParser.KW_SET);
                this.state = 454;
                this.locationSpec();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 456;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 457;
                this.dbSchema();
                this.state = 459;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context) ) {
                case 1:
                    {
                    this.state = 458;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 461;
                this.dbSchemaName();
                this.state = 463;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 246) {
                    {
                    this.state = 462;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 34 || _la === 246)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 465;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 466;
                this.dbSchemas();
                this.state = 469;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
                case 1:
                    {
                    this.state = 467;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 468;
                    this.multipartIdentifier();
                    }
                    break;
                }
                this.state = 475;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 162 || _la === 376 || _la === 377) {
                    {
                    this.state = 472;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 162) {
                        {
                        this.state = 471;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 474;
                    localContext._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 477;
                this.createTableHeader();
                this.state = 482;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 12, this.context) ) {
                case 1:
                    {
                    this.state = 478;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 479;
                    this.createOrReplaceTableColTypeList();
                    this.state = 480;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 485;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 331) {
                    {
                    this.state = 484;
                    this.tableProvider();
                    }
                }

                this.state = 487;
                this.createTableClauses();
                this.state = 492;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
                case 1:
                    {
                    this.state = 489;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 20) {
                        {
                        this.state = 488;
                        this.match(SparkSqlParser.KW_AS);
                        }
                    }

                    this.state = 491;
                    this.query();
                    }
                    break;
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 494;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 495;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 497;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 16, this.context) ) {
                case 1:
                    {
                    this.state = 496;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 499;
                localContext._target = this.tableNameCreate();
                this.state = 500;
                this.match(SparkSqlParser.KW_LIKE);
                this.state = 501;
                localContext._source = this.tableName();
                this.state = 510;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 169 || _la === 256 || _la === 282 || _la === 296 || _la === 331) {
                    {
                    this.state = 508;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSqlParser.KW_USING:
                        {
                        this.state = 502;
                        this.tableProvider();
                        }
                        break;
                    case SparkSqlParser.KW_ROW:
                        {
                        this.state = 503;
                        this.rowFormat();
                        }
                        break;
                    case SparkSqlParser.KW_STORED:
                        {
                        this.state = 504;
                        this.createFileFormat();
                        }
                        break;
                    case SparkSqlParser.KW_LOCATION:
                        {
                        this.state = 505;
                        this.locationSpec();
                        }
                        break;
                    case SparkSqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 506;
                        this.match(SparkSqlParser.KW_TBLPROPERTIES);
                        this.state = 507;
                        localContext._tableProps = this.propertyList();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 512;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 513;
                this.replaceTableHeader();
                this.state = 518;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 19, this.context) ) {
                case 1:
                    {
                    this.state = 514;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 515;
                    this.createOrReplaceTableColTypeList();
                    this.state = 516;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 521;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 331) {
                    {
                    this.state = 520;
                    this.tableProvider();
                    }
                }

                this.state = 523;
                this.createTableClauses();
                this.state = 528;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 22, this.context) ) {
                case 1:
                    {
                    this.state = 525;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 20) {
                        {
                        this.state = 524;
                        this.match(SparkSqlParser.KW_AS);
                        }
                    }

                    this.state = 527;
                    this.query();
                    }
                    break;
                }
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 530;
                this.match(SparkSqlParser.KW_ANALYZE);
                this.state = 531;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 532;
                this.tableName();
                this.state = 534;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 533;
                    this.partitionSpec();
                    }
                }

                this.state = 536;
                this.match(SparkSqlParser.KW_COMPUTE);
                this.state = 537;
                this.match(SparkSqlParser.KW_STATISTICS);
                this.state = 545;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context) ) {
                case 1:
                    {
                    this.state = 538;
                    this.match(SparkSqlParser.KW_NOSCAN);
                    }
                    break;
                case 2:
                    {
                    this.state = 539;
                    this.match(SparkSqlParser.KW_FOR);
                    this.state = 540;
                    this.match(SparkSqlParser.KW_COLUMNS);
                    this.state = 541;
                    this.columnNameSeq();
                    }
                    break;
                case 3:
                    {
                    this.state = 542;
                    this.match(SparkSqlParser.KW_FOR);
                    this.state = 543;
                    this.match(SparkSqlParser.KW_ALL);
                    this.state = 544;
                    this.match(SparkSqlParser.KW_COLUMNS);
                    }
                    break;
                }
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 547;
                this.match(SparkSqlParser.KW_ANALYZE);
                this.state = 548;
                this.match(SparkSqlParser.KW_TABLES);
                this.state = 551;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 123 || _la === 140) {
                    {
                    this.state = 549;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 550;
                    this.dbSchemaName();
                    }
                }

                this.state = 553;
                this.match(SparkSqlParser.KW_COMPUTE);
                this.state = 554;
                this.match(SparkSqlParser.KW_STATISTICS);
                this.state = 556;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 555;
                    this.match(SparkSqlParser.KW_NOSCAN);
                    }
                }

                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 558;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 559;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 560;
                this.tableName();
                this.state = 561;
                this.match(SparkSqlParser.KW_ADD);
                this.state = 562;
                this.match(SparkSqlParser.KW_COLUMN);
                this.state = 563;
                this.qualifiedColTypeWithPositionForAdd();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 565;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 566;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 567;
                this.tableName();
                this.state = 568;
                this.match(SparkSqlParser.KW_ADD);
                this.state = 569;
                this.match(SparkSqlParser.KW_COLUMNS);
                this.state = 570;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 571;
                this.qualifiedColTypeWithPositionSeqForAdd();
                this.state = 572;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 574;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 575;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 576;
                localContext._table = this.tableName();
                this.state = 577;
                this.match(SparkSqlParser.KW_RENAME);
                this.state = 578;
                this.match(SparkSqlParser.KW_COLUMN);
                this.state = 579;
                this.columnName();
                this.state = 580;
                this.match(SparkSqlParser.KW_TO);
                this.state = 581;
                this.columnNameCreate();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 583;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 584;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 585;
                this.tableName();
                this.state = 586;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 587;
                this.match(SparkSqlParser.KW_COLUMN);
                this.state = 589;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
                case 1:
                    {
                    this.state = 588;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 591;
                this.columnName();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 593;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 594;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 595;
                this.tableName();
                this.state = 596;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 597;
                this.match(SparkSqlParser.KW_COLUMNS);
                this.state = 599;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 598;
                    this.ifExists();
                    }
                }

                this.state = 601;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 602;
                this.columnNameSeq();
                this.state = 603;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 605;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 610;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 606;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 607;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 608;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 609;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 612;
                this.match(SparkSqlParser.KW_RENAME);
                this.state = 613;
                this.match(SparkSqlParser.KW_TO);
                this.state = 614;
                this.multipartIdentifier();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 616;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 621;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 617;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 618;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 619;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 620;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 623;
                this.match(SparkSqlParser.KW_SET);
                this.state = 624;
                this.match(SparkSqlParser.KW_TBLPROPERTIES);
                this.state = 625;
                this.propertyList();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 627;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 632;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 628;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 629;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 630;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 631;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 634;
                this.match(SparkSqlParser.KW_UNSET);
                this.state = 635;
                this.match(SparkSqlParser.KW_TBLPROPERTIES);
                this.state = 637;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 636;
                    this.ifExists();
                    }
                }

                this.state = 639;
                this.propertyList();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 641;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 642;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 643;
                localContext._table = this.tableName();
                this.state = 644;
                _la = this.tokenStream.LA(1);
                if(!(_la === 11 || _la === 39)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 646;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 33, this.context) ) {
                case 1:
                    {
                    this.state = 645;
                    this.match(SparkSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 648;
                localContext._column = this.columnName();
                this.state = 650;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
                case 1:
                    {
                    this.state = 649;
                    this.alterColumnAction();
                    }
                    break;
                }
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 652;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 653;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 654;
                localContext._table = this.tableName();
                this.state = 656;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 655;
                    this.partitionSpec();
                    }
                }

                this.state = 658;
                this.match(SparkSqlParser.KW_CHANGE);
                this.state = 660;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 36, this.context) ) {
                case 1:
                    {
                    this.state = 659;
                    this.match(SparkSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 662;
                localContext._colName = this.columnName();
                this.state = 663;
                this.colType();
                this.state = 665;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 9 || _la === 116) {
                    {
                    this.state = 664;
                    this.colPosition();
                    }
                }

                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 667;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 668;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 669;
                localContext._table = this.tableName();
                this.state = 671;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 670;
                    this.partitionSpec();
                    }
                }

                this.state = 673;
                this.match(SparkSqlParser.KW_REPLACE);
                this.state = 674;
                this.match(SparkSqlParser.KW_COLUMNS);
                this.state = 675;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 676;
                this.qualifiedColTypeWithPositionSeqForReplace();
                this.state = 677;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 679;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 680;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 681;
                this.tableName();
                this.state = 683;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 682;
                    this.partitionSpec();
                    }
                }

                this.state = 685;
                this.match(SparkSqlParser.KW_SET);
                this.state = 686;
                this.match(SparkSqlParser.KW_SERDE);
                this.state = 687;
                this.stringLit();
                this.state = 691;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 40, this.context) ) {
                case 1:
                    {
                    this.state = 688;
                    this.match(SparkSqlParser.KW_WITH);
                    this.state = 689;
                    this.match(SparkSqlParser.KW_SERDEPROPERTIES);
                    this.state = 690;
                    this.propertyList();
                    }
                    break;
                }
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 693;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 694;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 695;
                this.tableName();
                this.state = 697;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 696;
                    this.partitionSpec();
                    }
                }

                this.state = 699;
                this.match(SparkSqlParser.KW_SET);
                this.state = 700;
                this.match(SparkSqlParser.KW_SERDEPROPERTIES);
                this.state = 701;
                this.propertyList();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 703;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 708;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 704;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 705;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 706;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 707;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 710;
                this.match(SparkSqlParser.KW_ADD);
                this.state = 712;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 711;
                    this.ifNotExists();
                    }
                }

                this.state = 715;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 714;
                    this.partitionSpecLocation();
                    }
                    }
                    this.state = 717;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 216);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 719;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 720;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 721;
                this.tableName();
                this.state = 722;
                this.partitionSpec();
                this.state = 723;
                this.match(SparkSqlParser.KW_RENAME);
                this.state = 724;
                this.match(SparkSqlParser.KW_TO);
                this.state = 725;
                this.partitionSpec();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 727;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 732;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 728;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 729;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 730;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 731;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 734;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 736;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 735;
                    this.ifExists();
                    }
                }

                this.state = 738;
                this.partitionSpec();
                this.state = 743;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 739;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 740;
                    this.partitionSpec();
                    }
                    }
                    this.state = 745;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 747;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 746;
                    this.match(SparkSqlParser.KW_PURGE);
                    }
                }

                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 749;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 750;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 751;
                this.tableName();
                this.state = 753;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 752;
                    this.partitionSpec();
                    }
                }

                this.state = 755;
                this.match(SparkSqlParser.KW_SET);
                this.state = 756;
                this.locationSpec();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 758;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 759;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 760;
                this.tableName();
                this.state = 761;
                this.match(SparkSqlParser.KW_RECOVER);
                this.state = 762;
                this.match(SparkSqlParser.KW_PARTITIONS);
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 764;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 765;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 766;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 767;
                this.viewName();
                this.state = 768;
                _la = this.tokenStream.LA(1);
                if(!(_la === 91 || _la === 98)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 769;
                this.match(SparkSqlParser.KW_REWRITE);
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 771;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 772;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 773;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 774;
                this.viewName();
                this.state = 775;
                this.match(SparkSqlParser.KW_SET);
                this.state = 776;
                this.match(SparkSqlParser.KW_TBLPROPERTIES);
                this.state = 777;
                this.propertyList();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 779;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 780;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 782;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 50, this.context) ) {
                case 1:
                    {
                    this.state = 781;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 784;
                this.tableName();
                this.state = 786;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 785;
                    this.match(SparkSqlParser.KW_PURGE);
                    }
                }

                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 788;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 789;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 791;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 52, this.context) ) {
                case 1:
                    {
                    this.state = 790;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 793;
                this.viewName();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 794;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 795;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 796;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 798;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 53, this.context) ) {
                case 1:
                    {
                    this.state = 797;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 800;
                this.viewName();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 801;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 804;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 802;
                    this.match(SparkSqlParser.KW_OR);
                    this.state = 803;
                    this.match(SparkSqlParser.KW_REPLACE);
                    }
                }

                this.state = 810;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128 || _la === 297) {
                    {
                    this.state = 807;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 128) {
                        {
                        this.state = 806;
                        this.match(SparkSqlParser.KW_GLOBAL);
                        }
                    }

                    this.state = 809;
                    this.match(SparkSqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 812;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 814;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 57, this.context) ) {
                case 1:
                    {
                    this.state = 813;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 816;
                this.viewNameCreate();
                this.state = 818;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 817;
                    this.identifierCommentList();
                    }
                }

                this.state = 828;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 51 || _la === 217 || _la === 296) {
                    {
                    this.state = 826;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSqlParser.KW_COMMENT:
                        {
                        this.state = 820;
                        this.commentSpec();
                        }
                        break;
                    case SparkSqlParser.KW_PARTITIONED:
                        {
                        {
                        this.state = 821;
                        this.match(SparkSqlParser.KW_PARTITIONED);
                        this.state = 822;
                        this.match(SparkSqlParser.KW_ON);
                        this.state = 823;
                        this.identifierList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 824;
                        this.match(SparkSqlParser.KW_TBLPROPERTIES);
                        this.state = 825;
                        this.propertyList();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 830;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 831;
                this.match(SparkSqlParser.KW_AS);
                this.state = 832;
                this.query();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 834;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 837;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 835;
                    this.match(SparkSqlParser.KW_OR);
                    this.state = 836;
                    this.match(SparkSqlParser.KW_REPLACE);
                    }
                }

                this.state = 840;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 839;
                    this.match(SparkSqlParser.KW_GLOBAL);
                    }
                }

                this.state = 842;
                this.match(SparkSqlParser.KW_TEMPORARY);
                this.state = 843;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 844;
                this.viewNameCreate();
                this.state = 849;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 845;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 846;
                    this.colTypeList();
                    this.state = 847;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                }

                this.state = 851;
                this.tableProvider();
                this.state = 854;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206) {
                    {
                    this.state = 852;
                    this.match(SparkSqlParser.KW_OPTIONS);
                    this.state = 853;
                    this.propertyList();
                    }
                }

                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 856;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 857;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 858;
                this.viewName();
                this.state = 860;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20) {
                    {
                    this.state = 859;
                    this.match(SparkSqlParser.KW_AS);
                    }
                }

                this.state = 862;
                this.query();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 864;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 867;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 865;
                    this.match(SparkSqlParser.KW_OR);
                    this.state = 866;
                    this.match(SparkSqlParser.KW_REPLACE);
                    }
                }

                this.state = 870;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 869;
                    this.match(SparkSqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 872;
                this.match(SparkSqlParser.KW_FUNCTION);
                this.state = 874;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 68, this.context) ) {
                case 1:
                    {
                    this.state = 873;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 876;
                this.functionNameCreate();
                this.state = 877;
                this.match(SparkSqlParser.KW_AS);
                this.state = 878;
                localContext._className = this.stringLit();
                this.state = 888;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 331) {
                    {
                    this.state = 879;
                    this.match(SparkSqlParser.KW_USING);
                    this.state = 880;
                    this.resource();
                    this.state = 885;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 881;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 882;
                        this.resource();
                        }
                        }
                        this.state = 887;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 890;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 891;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 892;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 894;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 71, this.context) ) {
                case 1:
                    {
                    this.state = 893;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 896;
                this.viewNameCreate();
                this.state = 898;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 331) {
                    {
                    this.state = 897;
                    this.tableProvider();
                    }
                }

                this.state = 915;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 45 || _la === 51 || _la === 169 || _la === 206 || _la === 217 || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 67371009) !== 0) || _la === 296) {
                    {
                    this.state = 913;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSqlParser.KW_OPTIONS:
                        {
                        {
                        this.state = 900;
                        this.match(SparkSqlParser.KW_OPTIONS);
                        this.state = 901;
                        localContext._options = this.propertyList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_PARTITIONED:
                        {
                        {
                        this.state = 902;
                        this.match(SparkSqlParser.KW_PARTITIONED);
                        this.state = 903;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 904;
                        localContext._partitioning = this.partitionFieldList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_SKEWED:
                        {
                        this.state = 905;
                        this.skewSpec();
                        }
                        break;
                    case SparkSqlParser.KW_CLUSTERED:
                        {
                        this.state = 906;
                        this.bucketSpec();
                        }
                        break;
                    case SparkSqlParser.KW_ROW:
                        {
                        this.state = 907;
                        this.rowFormat();
                        }
                        break;
                    case SparkSqlParser.KW_STORED:
                        {
                        this.state = 908;
                        this.createFileFormat();
                        }
                        break;
                    case SparkSqlParser.KW_LOCATION:
                        {
                        this.state = 909;
                        this.locationSpec();
                        }
                        break;
                    case SparkSqlParser.KW_COMMENT:
                        {
                        this.state = 910;
                        this.commentSpec();
                        }
                        break;
                    case SparkSqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 911;
                        this.match(SparkSqlParser.KW_TBLPROPERTIES);
                        this.state = 912;
                        localContext._tableProps = this.propertyList();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 917;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 918;
                this.match(SparkSqlParser.KW_AS);
                this.state = 919;
                this.query();
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 921;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 923;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 922;
                    this.match(SparkSqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 925;
                this.match(SparkSqlParser.KW_FUNCTION);
                this.state = 927;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 76, this.context) ) {
                case 1:
                    {
                    this.state = 926;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 929;
                this.functionName();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 930;
                this.match(SparkSqlParser.KW_DECLARE);
                this.state = 933;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 77, this.context) ) {
                case 1:
                    {
                    this.state = 931;
                    this.match(SparkSqlParser.KW_OR);
                    this.state = 932;
                    this.match(SparkSqlParser.KW_REPLACE);
                    }
                    break;
                }
                this.state = 936;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 78, this.context) ) {
                case 1:
                    {
                    this.state = 935;
                    this.match(SparkSqlParser.KW_VARIABLE);
                    }
                    break;
                }
                this.state = 938;
                this.functionName();
                this.state = 940;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 79, this.context) ) {
                case 1:
                    {
                    this.state = 939;
                    this.dataType();
                    }
                    break;
                }
                this.state = 943;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82 || _la === 351) {
                    {
                    this.state = 942;
                    this.variableDefaultExpression();
                    }
                }

                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 945;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 946;
                this.match(SparkSqlParser.KW_TEMPORARY);
                this.state = 947;
                this.match(SparkSqlParser.KW_VARIABLE);
                this.state = 949;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 81, this.context) ) {
                case 1:
                    {
                    this.state = 948;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 954;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 82, this.context) ) {
                case 1:
                    {
                    this.state = 951;
                    this.tableName();
                    }
                    break;
                case 2:
                    {
                    this.state = 952;
                    this.viewName();
                    }
                    break;
                case 3:
                    {
                    this.state = 953;
                    this.functionName();
                    }
                    break;
                }
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 956;
                this.match(SparkSqlParser.KW_EXPLAIN);
                this.state = 958;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46 || _la === 58 || _la === 108 || _la === 122 || _la === 172) {
                    {
                    this.state = 957;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 46 || _la === 58 || _la === 108 || _la === 122 || _la === 172)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 960;
                this.statement();
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 961;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 962;
                this.match(SparkSqlParser.KW_TABLES);
                this.state = 965;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 84, this.context) ) {
                case 1:
                    {
                    this.state = 963;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 964;
                    this.dbSchemaName();
                    }
                    break;
                }
                this.state = 971;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 162 || _la === 376 || _la === 377) {
                    {
                    this.state = 968;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 162) {
                        {
                        this.state = 967;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 970;
                    localContext._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 973;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 974;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 975;
                this.match(SparkSqlParser.KW_EXTENDED);
                this.state = 978;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 123 || _la === 140) {
                    {
                    this.state = 976;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 977;
                    localContext._ns = this.dbSchemaName();
                    }
                }

                this.state = 980;
                this.match(SparkSqlParser.KW_LIKE);
                this.state = 981;
                localContext._pattern = this.stringLit();
                this.state = 983;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 982;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 985;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 986;
                this.match(SparkSqlParser.KW_TBLPROPERTIES);
                this.state = 987;
                localContext._table = this.tableName();
                this.state = 992;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
                case 1:
                    {
                    this.state = 988;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 989;
                    localContext._key = this.propertyKey();
                    this.state = 990;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 994;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 995;
                this.match(SparkSqlParser.KW_COLUMNS);
                this.state = 996;
                _la = this.tokenStream.LA(1);
                if(!(_la === 123 || _la === 140)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 997;
                localContext._table = this.tableName();
                this.state = 1000;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 90, this.context) ) {
                case 1:
                    {
                    this.state = 998;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 999;
                    this.dbSchemaName();
                    }
                    break;
                }
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 1002;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1003;
                this.match(SparkSqlParser.KW_VIEWS);
                this.state = 1006;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 91, this.context) ) {
                case 1:
                    {
                    this.state = 1004;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1005;
                    this.dbSchemaName();
                    }
                    break;
                }
                this.state = 1012;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 162 || _la === 376 || _la === 377) {
                    {
                    this.state = 1009;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 162) {
                        {
                        this.state = 1008;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 1011;
                    localContext._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 1014;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1015;
                this.match(SparkSqlParser.KW_PARTITIONS);
                this.state = 1016;
                this.tableName();
                this.state = 1018;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1017;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 1020;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1022;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 10 || _la === 289 || _la === 330) {
                    {
                    this.state = 1021;
                    this.functionKind();
                    }
                }

                this.state = 1024;
                this.match(SparkSqlParser.KW_FUNCTIONS);
                this.state = 1027;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 96, this.context) ) {
                case 1:
                    {
                    this.state = 1025;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1026;
                    localContext._ns = this.dbSchemaName();
                    }
                    break;
                }
                this.state = 1036;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 99, this.context) ) {
                case 1:
                    {
                    this.state = 1030;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 97, this.context) ) {
                    case 1:
                        {
                        this.state = 1029;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                        break;
                    }
                    this.state = 1034;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 98, this.context) ) {
                    case 1:
                        {
                        this.state = 1032;
                        localContext._legacy = this.multipartIdentifier();
                        }
                        break;
                    case 2:
                        {
                        this.state = 1033;
                        localContext._pattern = this.stringLit();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 55:
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 1038;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1039;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 1040;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1041;
                this.tableName();
                this.state = 1044;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20) {
                    {
                    this.state = 1042;
                    this.match(SparkSqlParser.KW_AS);
                    this.state = 1043;
                    this.match(SparkSqlParser.KW_SERDE);
                    }
                }

                }
                break;
            case 56:
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 1046;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1047;
                this.match(SparkSqlParser.KW_CURRENT);
                this.state = 1048;
                this.dbSchema();
                }
                break;
            case 57:
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 1049;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1050;
                this.match(SparkSqlParser.KW_CATALOGS);
                this.state = 1055;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 162 || _la === 376 || _la === 377) {
                    {
                    this.state = 1052;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 162) {
                        {
                        this.state = 1051;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 1054;
                    localContext._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 58:
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 1057;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1058;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 1059;
                this.match(SparkSqlParser.KW_VIEWS);
                this.state = 1062;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 103, this.context) ) {
                case 1:
                    {
                    this.state = 1060;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1061;
                    localContext._db_name = this.dbSchemaName();
                    }
                    break;
                }
                this.state = 1068;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 162 || _la === 376 || _la === 377) {
                    {
                    this.state = 1065;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 162) {
                        {
                        this.state = 1064;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 1067;
                    localContext._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 59:
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 1070;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1071;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 1072;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 1073;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 1074;
                this.viewName();
                this.state = 1077;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20) {
                    {
                    this.state = 1075;
                    this.match(SparkSqlParser.KW_AS);
                    this.state = 1076;
                    this.match(SparkSqlParser.KW_SERDE);
                    }
                }

                }
                break;
            case 60:
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 1079;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1080;
                this.match(SparkSqlParser.KW_FUNCTION);
                this.state = 1082;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 107, this.context) ) {
                case 1:
                    {
                    this.state = 1081;
                    this.match(SparkSqlParser.KW_EXTENDED);
                    }
                    break;
                }
                this.state = 1084;
                this.describeFuncName();
                }
                break;
            case 61:
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 1085;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1086;
                this.match(SparkSqlParser.KW_DATABASE);
                this.state = 1088;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 108, this.context) ) {
                case 1:
                    {
                    this.state = 1087;
                    this.match(SparkSqlParser.KW_EXTENDED);
                    }
                    break;
                }
                this.state = 1090;
                this.dbSchemaName();
                }
                break;
            case 62:
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 1091;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1093;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 109, this.context) ) {
                case 1:
                    {
                    this.state = 1092;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                    break;
                }
                this.state = 1096;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 110, this.context) ) {
                case 1:
                    {
                    this.state = 1095;
                    localContext._option = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 108 || _la === 122)) {
                        localContext._option = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 1098;
                this.tableName();
                this.state = 1100;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 111, this.context) ) {
                case 1:
                    {
                    this.state = 1099;
                    this.partitionSpec();
                    }
                    break;
                }
                this.state = 1103;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 112, this.context) ) {
                case 1:
                    {
                    this.state = 1102;
                    this.describeColName();
                    }
                    break;
                }
                }
                break;
            case 63:
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 1105;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1107;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 231) {
                    {
                    this.state = 1106;
                    this.match(SparkSqlParser.KW_QUERY);
                    }
                }

                this.state = 1109;
                this.query();
                }
                break;
            case 64:
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 1110;
                this.match(SparkSqlParser.KW_COMMENT);
                this.state = 1111;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1112;
                this.dbSchema();
                this.state = 1113;
                this.dbSchemaName();
                this.state = 1114;
                this.match(SparkSqlParser.KW_IS);
                this.state = 1115;
                this.comment();
                }
                break;
            case 65:
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 1117;
                this.match(SparkSqlParser.KW_COMMENT);
                this.state = 1118;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1119;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1120;
                this.tableName();
                this.state = 1121;
                this.match(SparkSqlParser.KW_IS);
                this.state = 1122;
                this.comment();
                }
                break;
            case 66:
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 1124;
                this.match(SparkSqlParser.KW_REFRESH);
                this.state = 1125;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1126;
                this.tableName();
                }
                break;
            case 67:
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 1127;
                this.match(SparkSqlParser.KW_REFRESH);
                this.state = 1128;
                this.match(SparkSqlParser.KW_FUNCTION);
                this.state = 1129;
                this.functionName();
                }
                break;
            case 68:
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 1130;
                this.match(SparkSqlParser.KW_REFRESH);
                this.state = 1138;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 115, this.context) ) {
                case 1:
                    {
                    this.state = 1131;
                    this.stringLit();
                    }
                    break;
                case 2:
                    {
                    this.state = 1135;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 114, this.context);
                    while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1 + 1) {
                            {
                            {
                            this.state = 1132;
                            this.matchWildcard();
                            }
                            }
                        }
                        this.state = 1137;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 114, this.context);
                    }
                    }
                    break;
                }
                }
                break;
            case 69:
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 1140;
                this.match(SparkSqlParser.KW_REFRESH);
                this.state = 1141;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 1142;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 1143;
                this.viewName();
                }
                break;
            case 70:
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1144;
                this.match(SparkSqlParser.KW_CACHE);
                this.state = 1146;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 159) {
                    {
                    this.state = 1145;
                    this.match(SparkSqlParser.KW_LAZY);
                    }
                }

                this.state = 1148;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1149;
                this.tableName();
                this.state = 1152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206) {
                    {
                    this.state = 1150;
                    this.match(SparkSqlParser.KW_OPTIONS);
                    this.state = 1151;
                    localContext._options = this.propertyList();
                    }
                }

                this.state = 1158;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 119, this.context) ) {
                case 1:
                    {
                    this.state = 1155;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 20) {
                        {
                        this.state = 1154;
                        this.match(SparkSqlParser.KW_AS);
                        }
                    }

                    this.state = 1157;
                    this.query();
                    }
                    break;
                }
                }
                break;
            case 71:
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1160;
                this.match(SparkSqlParser.KW_UNCACHE);
                this.state = 1161;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1163;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
                case 1:
                    {
                    this.state = 1162;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1165;
                this.tableName();
                }
                break;
            case 72:
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1166;
                this.match(SparkSqlParser.KW_CLEAR);
                this.state = 1167;
                this.match(SparkSqlParser.KW_CACHE);
                }
                break;
            case 73:
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1168;
                this.match(SparkSqlParser.KW_LOAD);
                this.state = 1169;
                this.match(SparkSqlParser.KW_DATA);
                this.state = 1171;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 168) {
                    {
                    this.state = 1170;
                    this.match(SparkSqlParser.KW_LOCAL);
                    }
                }

                this.state = 1173;
                this.match(SparkSqlParser.KW_INPATH);
                this.state = 1174;
                localContext._path = this.stringLit();
                this.state = 1176;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 215) {
                    {
                    this.state = 1175;
                    this.match(SparkSqlParser.KW_OVERWRITE);
                    }
                }

                this.state = 1178;
                this.match(SparkSqlParser.KW_INTO);
                this.state = 1179;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1180;
                this.tableName();
                this.state = 1182;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1181;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 74:
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1184;
                this.match(SparkSqlParser.KW_TRUNCATE);
                this.state = 1185;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1186;
                this.tableName();
                this.state = 1188;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1187;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 75:
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1191;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 187) {
                    {
                    this.state = 1190;
                    this.match(SparkSqlParser.KW_MSCK);
                    }
                }

                this.state = 1193;
                this.match(SparkSqlParser.KW_REPAIR);
                this.state = 1194;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1195;
                this.tableName();
                this.state = 1198;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 126, this.context) ) {
                case 1:
                    {
                    this.state = 1196;
                    localContext._option = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 8 || _la === 96 || _la === 288)) {
                        localContext._option = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1197;
                    this.match(SparkSqlParser.KW_PARTITIONS);
                    }
                    break;
                }
                }
                break;
            case 76:
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1200;
                localContext._op = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 8 || _la === 166)) {
                    localContext._op = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1201;
                this.identifier();
                this.state = 1205;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 127, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1202;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1207;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 127, this.context);
                }
                }
                break;
            case 77:
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 1208;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1209;
                this.match(SparkSqlParser.KW_ROLE);
                this.state = 1213;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 128, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1210;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1215;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 128, this.context);
                }
                }
                break;
            case 78:
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 1216;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1217;
                this.match(SparkSqlParser.KW_TIME);
                this.state = 1218;
                this.match(SparkSqlParser.KW_ZONE);
                this.state = 1219;
                this.interval();
                }
                break;
            case 79:
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 1220;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1221;
                this.match(SparkSqlParser.KW_TIME);
                this.state = 1222;
                this.match(SparkSqlParser.KW_ZONE);
                this.state = 1223;
                this.timezone();
                }
                break;
            case 80:
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 1224;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1225;
                this.match(SparkSqlParser.KW_TIME);
                this.state = 1226;
                this.match(SparkSqlParser.KW_ZONE);
                this.state = 1230;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 129, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1227;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1232;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 129, this.context);
                }
                }
                break;
            case 81:
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 1233;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1234;
                _la = this.tokenStream.LA(1);
                if(!(_la === 334 || _la === 335)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1235;
                this.assignmentList();
                }
                break;
            case 82:
                this.enterOuterAlt(localContext, 82);
                {
                this.state = 1236;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1237;
                _la = this.tokenStream.LA(1);
                if(!(_la === 334 || _la === 335)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1238;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1239;
                this.multipartIdentifierList();
                this.state = 1240;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 1241;
                this.match(SparkSqlParser.EQ);
                this.state = 1242;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1243;
                this.query();
                this.state = 1244;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 83:
                this.enterOuterAlt(localContext, 83);
                {
                this.state = 1246;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1247;
                this.configKey();
                this.state = 1248;
                this.match(SparkSqlParser.EQ);
                this.state = 1249;
                this.configValue();
                }
                break;
            case 84:
                this.enterOuterAlt(localContext, 84);
                {
                this.state = 1251;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1252;
                this.configKey();
                this.state = 1260;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 351) {
                    {
                    this.state = 1253;
                    this.match(SparkSqlParser.EQ);
                    this.state = 1257;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 130, this.context);
                    while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1 + 1) {
                            {
                            {
                            this.state = 1254;
                            this.matchWildcard();
                            }
                            }
                        }
                        this.state = 1259;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 130, this.context);
                    }
                    }
                }

                }
                break;
            case 85:
                this.enterOuterAlt(localContext, 85);
                {
                this.state = 1262;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1266;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 132, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1263;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1268;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 132, this.context);
                }
                this.state = 1269;
                this.match(SparkSqlParser.EQ);
                this.state = 1270;
                this.configValue();
                }
                break;
            case 86:
                this.enterOuterAlt(localContext, 86);
                {
                this.state = 1271;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1275;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 133, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1272;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1277;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 133, this.context);
                }
                }
                break;
            case 87:
                this.enterOuterAlt(localContext, 87);
                {
                this.state = 1278;
                this.match(SparkSqlParser.KW_RESET);
                this.state = 1279;
                this.configKey();
                }
                break;
            case 88:
                this.enterOuterAlt(localContext, 88);
                {
                this.state = 1280;
                this.match(SparkSqlParser.KW_RESET);
                this.state = 1284;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 134, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1281;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1286;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 134, this.context);
                }
                }
                break;
            case 89:
                this.enterOuterAlt(localContext, 89);
                {
                this.state = 1287;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 1288;
                this.match(SparkSqlParser.KW_INDEX);
                this.state = 1290;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 135, this.context) ) {
                case 1:
                    {
                    this.state = 1289;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 1292;
                this.identifier();
                this.state = 1293;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1295;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 136, this.context) ) {
                case 1:
                    {
                    this.state = 1294;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                    break;
                }
                this.state = 1297;
                this.tableName();
                this.state = 1300;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 331) {
                    {
                    this.state = 1298;
                    this.match(SparkSqlParser.KW_USING);
                    this.state = 1299;
                    localContext._indexType = this.identifier();
                    }
                }

                this.state = 1302;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1303;
                this.multipartIdentifierPropertyList();
                this.state = 1304;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 1307;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206) {
                    {
                    this.state = 1305;
                    this.match(SparkSqlParser.KW_OPTIONS);
                    this.state = 1306;
                    localContext._options = this.propertyList();
                    }
                }

                }
                break;
            case 90:
                this.enterOuterAlt(localContext, 90);
                {
                this.state = 1309;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 1310;
                this.match(SparkSqlParser.KW_INDEX);
                this.state = 1312;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 139, this.context) ) {
                case 1:
                    {
                    this.state = 1311;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1314;
                this.identifier();
                this.state = 1315;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1317;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 140, this.context) ) {
                case 1:
                    {
                    this.state = 1316;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                    break;
                }
                this.state = 1319;
                this.tableName();
                }
                break;
            case 91:
                this.enterOuterAlt(localContext, 91);
                {
                this.state = 1321;
                this.match(SparkSqlParser.KW_OPTIMIZE);
                this.state = 1322;
                this.tableName();
                this.state = 1324;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 343) {
                    {
                    this.state = 1323;
                    this.whereClause();
                    }
                }

                this.state = 1326;
                this.zorderClause();
                }
                break;
            case 92:
                this.enterOuterAlt(localContext, 92);
                {
                this.state = 1328;
                this.unsupportedHiveNativeCommands();
                this.state = 1332;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 142, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1329;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1334;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 142, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timezone(): TimezoneContext {
        let localContext = new TimezoneContext(this.context, this.state);
        this.enterRule(localContext, 6, SparkSqlParser.RULE_timezone);
        try {
            this.state = 1339;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.STRING_LITERAL:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1337;
                this.stringLit();
                }
                break;
            case SparkSqlParser.KW_LOCAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1338;
                this.match(SparkSqlParser.KW_LOCAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public configKey(): ConfigKeyContext {
        let localContext = new ConfigKeyContext(this.context, this.state);
        this.enterRule(localContext, 8, SparkSqlParser.RULE_configKey);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1341;
            this.quotedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public configValue(): ConfigValueContext {
        let localContext = new ConfigValueContext(this.context, this.state);
        this.enterRule(localContext, 10, SparkSqlParser.RULE_configValue);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1343;
            this.backQuotedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedHiveNativeCommands(): UnsupportedHiveNativeCommandsContext {
        let localContext = new UnsupportedHiveNativeCommandsContext(this.context, this.state);
        this.enterRule(localContext, 12, SparkSqlParser.RULE_unsupportedHiveNativeCommands);
        let _la: number;
        try {
            this.state = 1513;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 152, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1345;
                localContext._kw1 = this.match(SparkSqlParser.KW_CREATE);
                this.state = 1346;
                localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1347;
                localContext._kw1 = this.match(SparkSqlParser.KW_DROP);
                this.state = 1348;
                localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1349;
                localContext._kw1 = this.match(SparkSqlParser.KW_GRANT);
                this.state = 1351;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 145, this.context) ) {
                case 1:
                    {
                    this.state = 1350;
                    localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1353;
                localContext._kw1 = this.match(SparkSqlParser.KW_REVOKE);
                this.state = 1355;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 146, this.context) ) {
                case 1:
                    {
                    this.state = 1354;
                    localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1357;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1358;
                localContext._kw2 = this.match(SparkSqlParser.KW_GRANT);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1359;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1360;
                localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                this.state = 1362;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 147, this.context) ) {
                case 1:
                    {
                    this.state = 1361;
                    localContext._kw3 = this.match(SparkSqlParser.KW_GRANT);
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1364;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1365;
                localContext._kw2 = this.match(SparkSqlParser.KW_PRINCIPALS);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1366;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1367;
                localContext._kw2 = this.match(SparkSqlParser.KW_ROLES);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1368;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1369;
                localContext._kw2 = this.match(SparkSqlParser.KW_CURRENT);
                this.state = 1370;
                localContext._kw3 = this.match(SparkSqlParser.KW_ROLES);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1371;
                localContext._kw1 = this.match(SparkSqlParser.KW_EXPORT);
                this.state = 1372;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1373;
                localContext._kw1 = this.match(SparkSqlParser.KW_IMPORT);
                this.state = 1374;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1375;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1376;
                localContext._kw2 = this.match(SparkSqlParser.KW_COMPACTIONS);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1377;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1378;
                localContext._kw2 = this.match(SparkSqlParser.KW_CREATE);
                this.state = 1379;
                localContext._kw3 = this.match(SparkSqlParser.KW_TABLE);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1380;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1381;
                localContext._kw2 = this.match(SparkSqlParser.KW_TRANSACTIONS);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1382;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1383;
                localContext._kw2 = this.match(SparkSqlParser.KW_INDEXES);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1384;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1385;
                localContext._kw2 = this.match(SparkSqlParser.KW_LOCKS);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1386;
                localContext._kw1 = this.match(SparkSqlParser.KW_CREATE);
                this.state = 1387;
                localContext._kw2 = this.match(SparkSqlParser.KW_INDEX);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1388;
                localContext._kw1 = this.match(SparkSqlParser.KW_DROP);
                this.state = 1389;
                localContext._kw2 = this.match(SparkSqlParser.KW_INDEX);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1390;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1391;
                localContext._kw2 = this.match(SparkSqlParser.KW_INDEX);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1392;
                localContext._kw1 = this.match(SparkSqlParser.KW_LOCK);
                this.state = 1393;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1394;
                localContext._kw1 = this.match(SparkSqlParser.KW_LOCK);
                this.state = 1395;
                localContext._kw2 = this.match(SparkSqlParser.KW_DATABASE);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1396;
                localContext._kw1 = this.match(SparkSqlParser.KW_UNLOCK);
                this.state = 1397;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1398;
                localContext._kw1 = this.match(SparkSqlParser.KW_UNLOCK);
                this.state = 1399;
                localContext._kw2 = this.match(SparkSqlParser.KW_DATABASE);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1400;
                localContext._kw1 = this.match(SparkSqlParser.KW_CREATE);
                this.state = 1401;
                localContext._kw2 = this.match(SparkSqlParser.KW_TEMPORARY);
                this.state = 1402;
                localContext._kw3 = this.match(SparkSqlParser.KW_MACRO);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 1403;
                localContext._kw1 = this.match(SparkSqlParser.KW_DROP);
                this.state = 1404;
                localContext._kw2 = this.match(SparkSqlParser.KW_TEMPORARY);
                this.state = 1405;
                localContext._kw3 = this.match(SparkSqlParser.KW_MACRO);
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 1406;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1407;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1408;
                this.tableName();
                this.state = 1409;
                localContext._kw3 = this.match(SparkSqlParser.KW_NOT);
                this.state = 1410;
                localContext._kw4 = this.match(SparkSqlParser.KW_CLUSTERED);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 1412;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1413;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1414;
                this.tableName();
                this.state = 1415;
                localContext._kw3 = this.match(SparkSqlParser.KW_CLUSTERED);
                this.state = 1416;
                localContext._kw4 = this.match(SparkSqlParser.KW_BY);
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 1418;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1419;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1420;
                this.tableName();
                this.state = 1421;
                localContext._kw3 = this.match(SparkSqlParser.KW_NOT);
                this.state = 1422;
                localContext._kw4 = this.match(SparkSqlParser.KW_SORTED);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 1424;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1425;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1426;
                this.tableName();
                this.state = 1427;
                localContext._kw3 = this.match(SparkSqlParser.KW_SKEWED);
                this.state = 1428;
                localContext._kw4 = this.match(SparkSqlParser.KW_BY);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 1430;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1431;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1432;
                this.tableName();
                this.state = 1433;
                localContext._kw3 = this.match(SparkSqlParser.KW_NOT);
                this.state = 1434;
                localContext._kw4 = this.match(SparkSqlParser.KW_SKEWED);
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 1436;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1437;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1438;
                this.tableName();
                this.state = 1439;
                localContext._kw3 = this.match(SparkSqlParser.KW_NOT);
                this.state = 1440;
                localContext._kw4 = this.match(SparkSqlParser.KW_STORED);
                this.state = 1441;
                localContext._kw5 = this.match(SparkSqlParser.KW_AS);
                this.state = 1442;
                localContext._kw6 = this.match(SparkSqlParser.KW_DIRECTORIES);
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 1444;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1445;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1446;
                this.tableName();
                this.state = 1447;
                localContext._kw3 = this.match(SparkSqlParser.KW_SET);
                this.state = 1448;
                localContext._kw4 = this.match(SparkSqlParser.KW_SKEWED);
                this.state = 1449;
                localContext._kw5 = this.match(SparkSqlParser.KW_LOCATION);
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 1451;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1452;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1453;
                this.tableName();
                this.state = 1454;
                localContext._kw3 = this.match(SparkSqlParser.KW_EXCHANGE);
                this.state = 1455;
                localContext._kw4 = this.match(SparkSqlParser.KW_PARTITION);
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 1457;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1458;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1459;
                this.tableName();
                this.state = 1460;
                localContext._kw3 = this.match(SparkSqlParser.KW_ARCHIVE);
                this.state = 1461;
                localContext._kw4 = this.match(SparkSqlParser.KW_PARTITION);
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 1463;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1464;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1465;
                this.tableName();
                this.state = 1466;
                localContext._kw3 = this.match(SparkSqlParser.KW_UNARCHIVE);
                this.state = 1467;
                localContext._kw4 = this.match(SparkSqlParser.KW_PARTITION);
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 1469;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1470;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1471;
                this.tableName();
                this.state = 1472;
                localContext._kw3 = this.match(SparkSqlParser.KW_TOUCH);
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 1474;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1475;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1476;
                this.tableName();
                this.state = 1478;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1477;
                    this.partitionSpec();
                    }
                }

                this.state = 1480;
                localContext._kw3 = this.match(SparkSqlParser.KW_COMPACT);
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 1482;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1483;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1484;
                this.tableName();
                this.state = 1486;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1485;
                    this.partitionSpec();
                    }
                }

                this.state = 1488;
                localContext._kw3 = this.match(SparkSqlParser.KW_CONCATENATE);
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 1490;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1491;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1492;
                this.tableName();
                this.state = 1494;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1493;
                    this.partitionSpec();
                    }
                }

                this.state = 1496;
                localContext._kw3 = this.match(SparkSqlParser.KW_SET);
                this.state = 1497;
                localContext._kw4 = this.match(SparkSqlParser.KW_FILEFORMAT);
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 1499;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1500;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1501;
                this.tableName();
                this.state = 1503;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1502;
                    this.partitionSpec();
                    }
                }

                this.state = 1505;
                localContext._kw3 = this.match(SparkSqlParser.KW_REPLACE);
                this.state = 1506;
                localContext._kw4 = this.match(SparkSqlParser.KW_COLUMNS);
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 1508;
                localContext._kw1 = this.match(SparkSqlParser.KW_START);
                this.state = 1509;
                localContext._kw2 = this.match(SparkSqlParser.KW_TRANSACTION);
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 1510;
                localContext._kw1 = this.match(SparkSqlParser.KW_COMMIT);
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 1511;
                localContext._kw1 = this.match(SparkSqlParser.KW_ROLLBACK);
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 1512;
                localContext._kw1 = this.match(SparkSqlParser.KW_DFS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableHeader(): CreateTableHeaderContext {
        let localContext = new CreateTableHeaderContext(this.context, this.state);
        this.enterRule(localContext, 14, SparkSqlParser.RULE_createTableHeader);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1515;
            this.match(SparkSqlParser.KW_CREATE);
            this.state = 1517;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 297) {
                {
                this.state = 1516;
                this.match(SparkSqlParser.KW_TEMPORARY);
                }
            }

            this.state = 1520;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109) {
                {
                this.state = 1519;
                this.match(SparkSqlParser.KW_EXTERNAL);
                }
            }

            this.state = 1522;
            this.match(SparkSqlParser.KW_TABLE);
            this.state = 1524;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 155, this.context) ) {
            case 1:
                {
                this.state = 1523;
                this.ifNotExists();
                }
                break;
            }
            this.state = 1526;
            this.tableNameCreate();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceTableHeader(): ReplaceTableHeaderContext {
        let localContext = new ReplaceTableHeaderContext(this.context, this.state);
        this.enterRule(localContext, 16, SparkSqlParser.RULE_replaceTableHeader);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1530;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 59) {
                {
                this.state = 1528;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 1529;
                this.match(SparkSqlParser.KW_OR);
                }
            }

            this.state = 1532;
            this.match(SparkSqlParser.KW_REPLACE);
            this.state = 1533;
            this.match(SparkSqlParser.KW_TABLE);
            this.state = 1534;
            this.tableNameCreate();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bucketSpec(): BucketSpecContext {
        let localContext = new BucketSpecContext(this.context, this.state);
        this.enterRule(localContext, 18, SparkSqlParser.RULE_bucketSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1536;
            this.match(SparkSqlParser.KW_CLUSTERED);
            this.state = 1537;
            this.match(SparkSqlParser.KW_BY);
            this.state = 1538;
            this.identifierList();
            this.state = 1542;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 278) {
                {
                this.state = 1539;
                this.match(SparkSqlParser.KW_SORTED);
                this.state = 1540;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1541;
                this.orderedIdentifierList();
                }
            }

            this.state = 1544;
            this.match(SparkSqlParser.KW_INTO);
            this.state = 1545;
            this.match(SparkSqlParser.INTEGER_VALUE);
            this.state = 1546;
            this.match(SparkSqlParser.KW_BUCKETS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewSpec(): SkewSpecContext {
        let localContext = new SkewSpecContext(this.context, this.state);
        this.enterRule(localContext, 20, SparkSqlParser.RULE_skewSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1548;
            this.match(SparkSqlParser.KW_SKEWED);
            this.state = 1549;
            this.match(SparkSqlParser.KW_BY);
            this.state = 1550;
            this.identifierList();
            this.state = 1551;
            this.match(SparkSqlParser.KW_ON);
            this.state = 1554;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 158, this.context) ) {
            case 1:
                {
                this.state = 1552;
                this.constantList();
                }
                break;
            case 2:
                {
                this.state = 1553;
                this.nestedConstantList();
                }
                break;
            }
            this.state = 1559;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 159, this.context) ) {
            case 1:
                {
                this.state = 1556;
                this.match(SparkSqlParser.KW_STORED);
                this.state = 1557;
                this.match(SparkSqlParser.KW_AS);
                this.state = 1558;
                this.match(SparkSqlParser.KW_DIRECTORIES);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public locationSpec(): LocationSpecContext {
        let localContext = new LocationSpecContext(this.context, this.state);
        this.enterRule(localContext, 22, SparkSqlParser.RULE_locationSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1561;
            this.match(SparkSqlParser.KW_LOCATION);
            this.state = 1562;
            this.stringLit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commentSpec(): CommentSpecContext {
        let localContext = new CommentSpecContext(this.context, this.state);
        this.enterRule(localContext, 24, SparkSqlParser.RULE_commentSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1564;
            this.match(SparkSqlParser.KW_COMMENT);
            this.state = 1565;
            this.stringLit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public query(): QueryContext {
        let localContext = new QueryContext(this.context, this.state);
        this.enterRule(localContext, 26, SparkSqlParser.RULE_query);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1568;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 345) {
                {
                this.state = 1567;
                this.ctes();
                }
            }

            this.state = 1570;
            this.queryTerm(0);
            this.state = 1571;
            this.queryOrganization();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertInto(): InsertIntoContext {
        let localContext = new InsertIntoContext(this.context, this.state);
        this.enterRule(localContext, 28, SparkSqlParser.RULE_insertInto);
        let _la: number;
        try {
            this.state = 1649;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 176, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1573;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1574;
                this.match(SparkSqlParser.KW_OVERWRITE);
                this.state = 1576;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 161, this.context) ) {
                case 1:
                    {
                    this.state = 1575;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                    break;
                }
                this.state = 1578;
                this.tableName();
                this.state = 1583;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1579;
                    this.partitionSpec();
                    this.state = 1581;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 137) {
                        {
                        this.state = 1580;
                        this.ifNotExists();
                        }
                    }

                    }
                }

                this.state = 1591;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 164, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 1585;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 1586;
                    this.match(SparkSqlParser.KW_NAME);
                    }
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 1587;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 1588;
                    this.columnNameSeq();
                    this.state = 1589;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1593;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1594;
                this.match(SparkSqlParser.KW_INTO);
                this.state = 1596;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 165, this.context) ) {
                case 1:
                    {
                    this.state = 1595;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                    break;
                }
                this.state = 1598;
                this.tableName();
                this.state = 1600;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1599;
                    this.partitionSpec();
                    }
                }

                this.state = 1603;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 1602;
                    this.ifNotExists();
                    }
                }

                this.state = 1611;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 168, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 1605;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 1606;
                    this.match(SparkSqlParser.KW_NAME);
                    }
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 1607;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 1608;
                    this.columnNameSeq();
                    this.state = 1609;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1613;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1614;
                this.match(SparkSqlParser.KW_INTO);
                this.state = 1616;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 169, this.context) ) {
                case 1:
                    {
                    this.state = 1615;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                    break;
                }
                this.state = 1618;
                this.tableName();
                this.state = 1619;
                this.match(SparkSqlParser.KW_REPLACE);
                this.state = 1620;
                this.whereClause();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1622;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1623;
                this.match(SparkSqlParser.KW_OVERWRITE);
                this.state = 1625;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 168) {
                    {
                    this.state = 1624;
                    this.match(SparkSqlParser.KW_LOCAL);
                    }
                }

                this.state = 1627;
                this.match(SparkSqlParser.KW_DIRECTORY);
                this.state = 1628;
                localContext._path = this.stringLit();
                this.state = 1630;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 256) {
                    {
                    this.state = 1629;
                    this.rowFormat();
                    }
                }

                this.state = 1633;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 282) {
                    {
                    this.state = 1632;
                    this.createFileFormat();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1635;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1636;
                this.match(SparkSqlParser.KW_OVERWRITE);
                this.state = 1638;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 168) {
                    {
                    this.state = 1637;
                    this.match(SparkSqlParser.KW_LOCAL);
                    }
                }

                this.state = 1640;
                this.match(SparkSqlParser.KW_DIRECTORY);
                this.state = 1642;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 376 || _la === 377) {
                    {
                    this.state = 1641;
                    localContext._path = this.stringLit();
                    }
                }

                this.state = 1644;
                this.tableProvider();
                this.state = 1647;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 206) {
                    {
                    this.state = 1645;
                    this.match(SparkSqlParser.KW_OPTIONS);
                    this.state = 1646;
                    localContext._options = this.propertyList();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpecLocation(): PartitionSpecLocationContext {
        let localContext = new PartitionSpecLocationContext(this.context, this.state);
        this.enterRule(localContext, 30, SparkSqlParser.RULE_partitionSpecLocation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1651;
            this.partitionSpec();
            this.state = 1653;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 169) {
                {
                this.state = 1652;
                this.locationSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpec(): PartitionSpecContext {
        let localContext = new PartitionSpecContext(this.context, this.state);
        this.enterRule(localContext, 32, SparkSqlParser.RULE_partitionSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1655;
            this.match(SparkSqlParser.KW_PARTITION);
            this.state = 1656;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1657;
            this.partitionVal();
            this.state = 1662;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1658;
                this.match(SparkSqlParser.COMMA);
                this.state = 1659;
                this.partitionVal();
                }
                }
                this.state = 1664;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1665;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionVal(): PartitionValContext {
        let localContext = new PartitionValContext(this.context, this.state);
        this.enterRule(localContext, 34, SparkSqlParser.RULE_partitionVal);
        let _la: number;
        try {
            this.state = 1676;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 180, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1667;
                this.identifier();
                this.state = 1670;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 351) {
                    {
                    this.state = 1668;
                    this.match(SparkSqlParser.EQ);
                    this.state = 1669;
                    this.constant();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1672;
                this.identifier();
                this.state = 1673;
                this.match(SparkSqlParser.EQ);
                this.state = 1674;
                this.match(SparkSqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbSchema(): DbSchemaContext {
        let localContext = new DbSchemaContext(this.context, this.state);
        this.enterRule(localContext, 36, SparkSqlParser.RULE_dbSchema);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1678;
            _la = this.tokenStream.LA(1);
            if(!(_la === 72 || _la === 189 || _la === 260)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbSchemas(): DbSchemasContext {
        let localContext = new DbSchemasContext(this.context, this.state);
        this.enterRule(localContext, 38, SparkSqlParser.RULE_dbSchemas);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1680;
            _la = this.tokenStream.LA(1);
            if(!(_la === 73 || _la === 190 || _la === 261)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeFuncName(): DescribeFuncNameContext {
        let localContext = new DescribeFuncNameContext(this.context, this.state);
        this.enterRule(localContext, 40, SparkSqlParser.RULE_describeFuncName);
        try {
            this.state = 1687;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 181, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1682;
                this.identifierReference();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1683;
                this.stringLit();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1684;
                this.comparisonOperator();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1685;
                this.arithmeticOperator();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1686;
                this.predicateOperator();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeColName(): DescribeColNameContext {
        let localContext = new DescribeColNameContext(this.context, this.state);
        this.enterRule(localContext, 42, SparkSqlParser.RULE_describeColName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1689;
            localContext._identifier = this.identifier();
            localContext._nameParts.push(localContext._identifier);
            this.state = 1694;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 5) {
                {
                {
                this.state = 1690;
                this.match(SparkSqlParser.DOT);
                this.state = 1691;
                localContext._identifier = this.identifier();
                localContext._nameParts.push(localContext._identifier);
                }
                }
                this.state = 1696;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ctes(): CtesContext {
        let localContext = new CtesContext(this.context, this.state);
        this.enterRule(localContext, 44, SparkSqlParser.RULE_ctes);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1697;
            this.match(SparkSqlParser.KW_WITH);
            this.state = 1698;
            this.namedQuery();
            this.state = 1703;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1699;
                this.match(SparkSqlParser.COMMA);
                this.state = 1700;
                this.namedQuery();
                }
                }
                this.state = 1705;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 46, SparkSqlParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1706;
            localContext._name = this.errorCapturingIdentifier();
            this.state = 1708;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 184, this.context) ) {
            case 1:
                {
                this.state = 1707;
                localContext._columnAliases = this.identifierList();
                }
                break;
            }
            this.state = 1711;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 20) {
                {
                this.state = 1710;
                this.match(SparkSqlParser.KW_AS);
                }
            }

            this.state = 1713;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1714;
            this.query();
            this.state = 1715;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableProvider(): TableProviderContext {
        let localContext = new TableProviderContext(this.context, this.state);
        this.enterRule(localContext, 48, SparkSqlParser.RULE_tableProvider);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1717;
            this.match(SparkSqlParser.KW_USING);
            this.state = 1718;
            this.multipartIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableClauses(): CreateTableClausesContext {
        let localContext = new CreateTableClausesContext(this.context, this.state);
        this.enterRule(localContext, 50, SparkSqlParser.RULE_createTableClauses);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1735;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 187, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 1733;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSqlParser.KW_OPTIONS:
                        {
                        {
                        this.state = 1720;
                        this.match(SparkSqlParser.KW_OPTIONS);
                        this.state = 1721;
                        localContext._options = this.expressionPropertyList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_PARTITIONED:
                        {
                        {
                        this.state = 1722;
                        this.match(SparkSqlParser.KW_PARTITIONED);
                        this.state = 1723;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 1724;
                        localContext._partitioning = this.partitionFieldList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_SKEWED:
                        {
                        this.state = 1725;
                        this.skewSpec();
                        }
                        break;
                    case SparkSqlParser.KW_CLUSTERED:
                        {
                        this.state = 1726;
                        this.bucketSpec();
                        }
                        break;
                    case SparkSqlParser.KW_ROW:
                        {
                        this.state = 1727;
                        this.rowFormat();
                        }
                        break;
                    case SparkSqlParser.KW_STORED:
                        {
                        this.state = 1728;
                        this.createFileFormat();
                        }
                        break;
                    case SparkSqlParser.KW_LOCATION:
                        {
                        this.state = 1729;
                        this.locationSpec();
                        }
                        break;
                    case SparkSqlParser.KW_COMMENT:
                        {
                        this.state = 1730;
                        this.commentSpec();
                        }
                        break;
                    case SparkSqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 1731;
                        this.match(SparkSqlParser.KW_TBLPROPERTIES);
                        this.state = 1732;
                        localContext._tableProps = this.propertyList();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }
                this.state = 1737;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 187, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyList(): PropertyListContext {
        let localContext = new PropertyListContext(this.context, this.state);
        this.enterRule(localContext, 52, SparkSqlParser.RULE_propertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1738;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1739;
            this.property();
            this.state = 1744;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1740;
                this.match(SparkSqlParser.COMMA);
                this.state = 1741;
                this.property();
                }
                }
                this.state = 1746;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1747;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public property(): PropertyContext {
        let localContext = new PropertyContext(this.context, this.state);
        this.enterRule(localContext, 54, SparkSqlParser.RULE_property);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1749;
            localContext._key = this.propertyKey();
            this.state = 1754;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 111 || _la === 315 || ((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & 1174405121) !== 0) || _la === 383) {
                {
                this.state = 1751;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 351) {
                    {
                    this.state = 1750;
                    this.match(SparkSqlParser.EQ);
                    }
                }

                this.state = 1753;
                localContext._value = this.propertyValue();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyKey(): PropertyKeyContext {
        let localContext = new PropertyKeyContext(this.context, this.state);
        this.enterRule(localContext, 56, SparkSqlParser.RULE_propertyKey);
        let _la: number;
        try {
            this.state = 1765;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 192, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1756;
                this.identifier();
                this.state = 1761;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 5) {
                    {
                    {
                    this.state = 1757;
                    this.match(SparkSqlParser.DOT);
                    this.state = 1758;
                    this.identifier();
                    }
                    }
                    this.state = 1763;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1764;
                this.stringLit();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyValue(): PropertyValueContext {
        let localContext = new PropertyValueContext(this.context, this.state);
        this.enterRule(localContext, 58, SparkSqlParser.RULE_propertyValue);
        try {
            this.state = 1771;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1767;
                this.match(SparkSqlParser.INTEGER_VALUE);
                }
                break;
            case SparkSqlParser.DECIMAL_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1768;
                this.match(SparkSqlParser.DECIMAL_VALUE);
                }
                break;
            case SparkSqlParser.KW_FALSE:
            case SparkSqlParser.KW_TRUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1769;
                this.booleanValue();
                }
                break;
            case SparkSqlParser.STRING_LITERAL:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1770;
                this.stringLit();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionPropertyList(): ExpressionPropertyListContext {
        let localContext = new ExpressionPropertyListContext(this.context, this.state);
        this.enterRule(localContext, 60, SparkSqlParser.RULE_expressionPropertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1773;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1774;
            this.expressionProperty();
            this.state = 1779;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1775;
                this.match(SparkSqlParser.COMMA);
                this.state = 1776;
                this.expressionProperty();
                }
                }
                this.state = 1781;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1782;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionProperty(): ExpressionPropertyContext {
        let localContext = new ExpressionPropertyContext(this.context, this.state);
        this.enterRule(localContext, 62, SparkSqlParser.RULE_expressionProperty);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1784;
            localContext._key = this.propertyKey();
            this.state = 1789;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 1073678415) !== 0)) {
                {
                this.state = 1786;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 351) {
                    {
                    this.state = 1785;
                    this.match(SparkSqlParser.EQ);
                    }
                }

                this.state = 1788;
                localContext._value = this.expression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constantList(): ConstantListContext {
        let localContext = new ConstantListContext(this.context, this.state);
        this.enterRule(localContext, 64, SparkSqlParser.RULE_constantList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1791;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1792;
            this.constant();
            this.state = 1797;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1793;
                this.match(SparkSqlParser.COMMA);
                this.state = 1794;
                this.constant();
                }
                }
                this.state = 1799;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1800;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nestedConstantList(): NestedConstantListContext {
        let localContext = new NestedConstantListContext(this.context, this.state);
        this.enterRule(localContext, 66, SparkSqlParser.RULE_nestedConstantList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1802;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1803;
            this.constantList();
            this.state = 1808;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1804;
                this.match(SparkSqlParser.COMMA);
                this.state = 1805;
                this.constantList();
                }
                }
                this.state = 1810;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1811;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFileFormat(): CreateFileFormatContext {
        let localContext = new CreateFileFormatContext(this.context, this.state);
        this.enterRule(localContext, 68, SparkSqlParser.RULE_createFileFormat);
        try {
            this.state = 1819;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 199, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1813;
                this.match(SparkSqlParser.KW_STORED);
                this.state = 1814;
                this.match(SparkSqlParser.KW_AS);
                this.state = 1815;
                this.fileFormat();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1816;
                this.match(SparkSqlParser.KW_STORED);
                this.state = 1817;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1818;
                this.storageHandler();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fileFormat(): FileFormatContext {
        let localContext = new FileFormatContext(this.context, this.state);
        this.enterRule(localContext, 70, SparkSqlParser.RULE_fileFormat);
        try {
            this.state = 1827;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 200, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1821;
                this.match(SparkSqlParser.KW_INPUTFORMAT);
                this.state = 1822;
                localContext._inFmt = this.stringLit();
                this.state = 1823;
                this.match(SparkSqlParser.KW_OUTPUTFORMAT);
                this.state = 1824;
                localContext._outFmt = this.stringLit();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1826;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storageHandler(): StorageHandlerContext {
        let localContext = new StorageHandlerContext(this.context, this.state);
        this.enterRule(localContext, 72, SparkSqlParser.RULE_storageHandler);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1829;
            this.stringLit();
            this.state = 1833;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 201, this.context) ) {
            case 1:
                {
                this.state = 1830;
                this.match(SparkSqlParser.KW_WITH);
                this.state = 1831;
                this.match(SparkSqlParser.KW_SERDEPROPERTIES);
                this.state = 1832;
                this.propertyList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resource(): ResourceContext {
        let localContext = new ResourceContext(this.context, this.state);
        this.enterRule(localContext, 74, SparkSqlParser.RULE_resource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1835;
            this.identifier();
            this.state = 1836;
            this.stringLit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dmlStatementNoWith(): DmlStatementNoWithContext {
        let localContext = new DmlStatementNoWithContext(this.context, this.state);
        this.enterRule(localContext, 76, SparkSqlParser.RULE_dmlStatementNoWith);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1894;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_INSERT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1838;
                this.insertInto();
                this.state = 1839;
                this.query();
                }
                break;
            case SparkSqlParser.KW_FROM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1841;
                this.fromClause();
                this.state = 1843;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 1842;
                        this.multiInsertQueryBody();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1845;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 202, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case SparkSqlParser.KW_DELETE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1847;
                this.match(SparkSqlParser.KW_DELETE);
                this.state = 1848;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 1849;
                this.tableName();
                this.state = 1850;
                this.tableAlias();
                this.state = 1852;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 343) {
                    {
                    this.state = 1851;
                    this.whereClause();
                    }
                }

                }
                break;
            case SparkSqlParser.KW_UPDATE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1854;
                this.match(SparkSqlParser.KW_UPDATE);
                this.state = 1855;
                this.tableName();
                this.state = 1856;
                this.tableAlias();
                this.state = 1857;
                this.setClause();
                this.state = 1859;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 343) {
                    {
                    this.state = 1858;
                    this.whereClause();
                    }
                }

                }
                break;
            case SparkSqlParser.KW_MERGE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1861;
                this.match(SparkSqlParser.KW_MERGE);
                this.state = 1862;
                this.match(SparkSqlParser.KW_INTO);
                this.state = 1863;
                localContext._target = this.tableName();
                this.state = 1864;
                localContext._targetAlias = this.tableAlias();
                this.state = 1865;
                this.match(SparkSqlParser.KW_USING);
                this.state = 1871;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_ADD:
                case SparkSqlParser.KW_AFTER:
                case SparkSqlParser.KW_ALL:
                case SparkSqlParser.KW_ALTER:
                case SparkSqlParser.KW_ALWAYS:
                case SparkSqlParser.KW_ANALYZE:
                case SparkSqlParser.KW_AND:
                case SparkSqlParser.KW_ANTI:
                case SparkSqlParser.KW_ANY:
                case SparkSqlParser.KW_ANY_VALUE:
                case SparkSqlParser.KW_ARCHIVE:
                case SparkSqlParser.KW_ARRAY:
                case SparkSqlParser.KW_AS:
                case SparkSqlParser.KW_ASC:
                case SparkSqlParser.KW_AT:
                case SparkSqlParser.KW_AUTHORIZATION:
                case SparkSqlParser.KW_BETWEEN:
                case SparkSqlParser.KW_BIGINT:
                case SparkSqlParser.KW_BINARY:
                case SparkSqlParser.KW_BOOLEAN:
                case SparkSqlParser.KW_BOTH:
                case SparkSqlParser.KW_BUCKET:
                case SparkSqlParser.KW_BUCKETS:
                case SparkSqlParser.KW_BY:
                case SparkSqlParser.KW_BYTE:
                case SparkSqlParser.KW_CACHE:
                case SparkSqlParser.KW_CASCADE:
                case SparkSqlParser.KW_CASE:
                case SparkSqlParser.KW_CAST:
                case SparkSqlParser.KW_CATALOG:
                case SparkSqlParser.KW_CATALOGS:
                case SparkSqlParser.KW_CHANGE:
                case SparkSqlParser.KW_CHAR:
                case SparkSqlParser.KW_CHARACTER:
                case SparkSqlParser.KW_CHECK:
                case SparkSqlParser.KW_CLEAR:
                case SparkSqlParser.KW_CLUSTER:
                case SparkSqlParser.KW_CLUSTERED:
                case SparkSqlParser.KW_CODEGEN:
                case SparkSqlParser.KW_COLLATE:
                case SparkSqlParser.KW_COLLECTION:
                case SparkSqlParser.KW_COLUMN:
                case SparkSqlParser.KW_COLUMNS:
                case SparkSqlParser.KW_COMMENT:
                case SparkSqlParser.KW_COMMIT:
                case SparkSqlParser.KW_COMPACT:
                case SparkSqlParser.KW_COMPACTIONS:
                case SparkSqlParser.KW_COMPUTE:
                case SparkSqlParser.KW_CONCATENATE:
                case SparkSqlParser.KW_CONSTRAINT:
                case SparkSqlParser.KW_COST:
                case SparkSqlParser.KW_CREATE:
                case SparkSqlParser.KW_CROSS:
                case SparkSqlParser.KW_CUBE:
                case SparkSqlParser.KW_CURRENT:
                case SparkSqlParser.KW_CURRENT_DATE:
                case SparkSqlParser.KW_CURRENT_TIME:
                case SparkSqlParser.KW_CURRENT_TIMESTAMP:
                case SparkSqlParser.KW_CURRENT_USER:
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYS:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_DATA:
                case SparkSqlParser.KW_DATE:
                case SparkSqlParser.KW_DATABASE:
                case SparkSqlParser.KW_DATABASES:
                case SparkSqlParser.KW_DATEADD:
                case SparkSqlParser.KW_DATE_ADD:
                case SparkSqlParser.KW_DATEDIFF:
                case SparkSqlParser.KW_DATE_DIFF:
                case SparkSqlParser.KW_DBPROPERTIES:
                case SparkSqlParser.KW_DEC:
                case SparkSqlParser.KW_DECIMAL:
                case SparkSqlParser.KW_DECLARE:
                case SparkSqlParser.KW_DEFAULT:
                case SparkSqlParser.KW_DEFINED:
                case SparkSqlParser.KW_DELETE:
                case SparkSqlParser.KW_DELIMITED:
                case SparkSqlParser.KW_DESC:
                case SparkSqlParser.KW_DESCRIBE:
                case SparkSqlParser.KW_DFS:
                case SparkSqlParser.KW_DIRECTORIES:
                case SparkSqlParser.KW_DIRECTORY:
                case SparkSqlParser.KW_DISABLE:
                case SparkSqlParser.KW_DISTINCT:
                case SparkSqlParser.KW_DISTRIBUTE:
                case SparkSqlParser.KW_DIV:
                case SparkSqlParser.KW_DOUBLE:
                case SparkSqlParser.KW_DROP:
                case SparkSqlParser.KW_ELSE:
                case SparkSqlParser.KW_ENABLE:
                case SparkSqlParser.KW_END:
                case SparkSqlParser.KW_ESCAPE:
                case SparkSqlParser.KW_ESCAPED:
                case SparkSqlParser.KW_EXCEPT:
                case SparkSqlParser.KW_EXCHANGE:
                case SparkSqlParser.KW_EXCLUDE:
                case SparkSqlParser.KW_EXISTS:
                case SparkSqlParser.KW_EXPLAIN:
                case SparkSqlParser.KW_EXPORT:
                case SparkSqlParser.KW_EXTENDED:
                case SparkSqlParser.KW_EXTERNAL:
                case SparkSqlParser.KW_EXTRACT:
                case SparkSqlParser.KW_FALSE:
                case SparkSqlParser.KW_FETCH:
                case SparkSqlParser.KW_FIELDS:
                case SparkSqlParser.KW_FILTER:
                case SparkSqlParser.KW_FILEFORMAT:
                case SparkSqlParser.KW_FIRST:
                case SparkSqlParser.KW_FLOAT:
                case SparkSqlParser.KW_FOLLOWING:
                case SparkSqlParser.KW_FOR:
                case SparkSqlParser.KW_FOREIGN:
                case SparkSqlParser.KW_FORMAT:
                case SparkSqlParser.KW_FORMATTED:
                case SparkSqlParser.KW_FROM:
                case SparkSqlParser.KW_FULL:
                case SparkSqlParser.KW_FUNCTION:
                case SparkSqlParser.KW_FUNCTIONS:
                case SparkSqlParser.KW_GENERATED:
                case SparkSqlParser.KW_GLOBAL:
                case SparkSqlParser.KW_GRANT:
                case SparkSqlParser.KW_GROUP:
                case SparkSqlParser.KW_GROUPING:
                case SparkSqlParser.KW_HAVING:
                case SparkSqlParser.KW_BINARY_HEX:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_HOURS:
                case SparkSqlParser.KW_IDENTIFIER:
                case SparkSqlParser.KW_IF:
                case SparkSqlParser.KW_IGNORE:
                case SparkSqlParser.KW_IMPORT:
                case SparkSqlParser.KW_IN:
                case SparkSqlParser.KW_INCLUDE:
                case SparkSqlParser.KW_INDEX:
                case SparkSqlParser.KW_INDEXES:
                case SparkSqlParser.KW_INNER:
                case SparkSqlParser.KW_INPATH:
                case SparkSqlParser.KW_INPUTFORMAT:
                case SparkSqlParser.KW_INSERT:
                case SparkSqlParser.KW_INTERSECT:
                case SparkSqlParser.KW_INTERVAL:
                case SparkSqlParser.KW_INT:
                case SparkSqlParser.KW_INTEGER:
                case SparkSqlParser.KW_INTO:
                case SparkSqlParser.KW_IS:
                case SparkSqlParser.KW_ITEMS:
                case SparkSqlParser.KW_JOIN:
                case SparkSqlParser.KW_KEYS:
                case SparkSqlParser.KW_LAST:
                case SparkSqlParser.KW_LATERAL:
                case SparkSqlParser.KW_LAZY:
                case SparkSqlParser.KW_LEADING:
                case SparkSqlParser.KW_LEFT:
                case SparkSqlParser.KW_LIKE:
                case SparkSqlParser.KW_ILIKE:
                case SparkSqlParser.KW_LIMIT:
                case SparkSqlParser.KW_LINES:
                case SparkSqlParser.KW_LIST:
                case SparkSqlParser.KW_LOAD:
                case SparkSqlParser.KW_LOCAL:
                case SparkSqlParser.KW_LOCATION:
                case SparkSqlParser.KW_LOCK:
                case SparkSqlParser.KW_LOCKS:
                case SparkSqlParser.KW_LOGICAL:
                case SparkSqlParser.KW_LONG:
                case SparkSqlParser.KW_MACRO:
                case SparkSqlParser.KW_MATERIALIZED:
                case SparkSqlParser.KW_MAP:
                case SparkSqlParser.KW_MATCHED:
                case SparkSqlParser.KW_MERGE:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MICROSECONDS:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MILLISECONDS:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MINUTES:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_MONTHS:
                case SparkSqlParser.KW_MSCK:
                case SparkSqlParser.KW_NAME:
                case SparkSqlParser.KW_NAMESPACE:
                case SparkSqlParser.KW_NAMESPACES:
                case SparkSqlParser.KW_NANOSECOND:
                case SparkSqlParser.KW_NANOSECONDS:
                case SparkSqlParser.KW_NATURAL:
                case SparkSqlParser.KW_NO:
                case SparkSqlParser.KW_NOT:
                case SparkSqlParser.KW_NULL:
                case SparkSqlParser.KW_NULLS:
                case SparkSqlParser.KW_NUMERIC:
                case SparkSqlParser.KW_OF:
                case SparkSqlParser.KW_OFFSET:
                case SparkSqlParser.KW_ON:
                case SparkSqlParser.KW_ONLY:
                case SparkSqlParser.KW_OPTIMIZE:
                case SparkSqlParser.KW_OPTION:
                case SparkSqlParser.KW_OPTIONS:
                case SparkSqlParser.KW_OR:
                case SparkSqlParser.KW_ORDER:
                case SparkSqlParser.KW_OUT:
                case SparkSqlParser.KW_OUTER:
                case SparkSqlParser.KW_OUTPUTFORMAT:
                case SparkSqlParser.KW_OVER:
                case SparkSqlParser.KW_OVERLAPS:
                case SparkSqlParser.KW_OVERLAY:
                case SparkSqlParser.KW_OVERWRITE:
                case SparkSqlParser.KW_PARTITION:
                case SparkSqlParser.KW_PARTITIONED:
                case SparkSqlParser.KW_PARTITIONS:
                case SparkSqlParser.KW_PERCENTILE_CONT:
                case SparkSqlParser.KW_PERCENTILE_DISC:
                case SparkSqlParser.KW_PERCENTLIT:
                case SparkSqlParser.KW_PIVOT:
                case SparkSqlParser.KW_PLACING:
                case SparkSqlParser.KW_POSITION:
                case SparkSqlParser.KW_PRECEDING:
                case SparkSqlParser.KW_PRIMARY:
                case SparkSqlParser.KW_PRINCIPALS:
                case SparkSqlParser.KW_PROPERTIES:
                case SparkSqlParser.KW_PURGE:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_QUERY:
                case SparkSqlParser.KW_RANGE:
                case SparkSqlParser.KW_REAL:
                case SparkSqlParser.KW_RECORDREADER:
                case SparkSqlParser.KW_RECORDWRITER:
                case SparkSqlParser.KW_RECOVER:
                case SparkSqlParser.KW_REDUCE:
                case SparkSqlParser.KW_REFERENCES:
                case SparkSqlParser.KW_REFRESH:
                case SparkSqlParser.KW_RENAME:
                case SparkSqlParser.KW_REPAIR:
                case SparkSqlParser.KW_REPEATABLE:
                case SparkSqlParser.KW_REPLACE:
                case SparkSqlParser.KW_RESET:
                case SparkSqlParser.KW_RESPECT:
                case SparkSqlParser.KW_RESTRICT:
                case SparkSqlParser.KW_REWRITE:
                case SparkSqlParser.KW_REVOKE:
                case SparkSqlParser.KW_RIGHT:
                case SparkSqlParser.KW_RLIKE:
                case SparkSqlParser.KW_REGEXP:
                case SparkSqlParser.KW_ROLE:
                case SparkSqlParser.KW_ROLES:
                case SparkSqlParser.KW_ROLLBACK:
                case SparkSqlParser.KW_ROLLUP:
                case SparkSqlParser.KW_ROW:
                case SparkSqlParser.KW_ROWS:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_SECONDS:
                case SparkSqlParser.KW_SCHEMA:
                case SparkSqlParser.KW_SCHEMAS:
                case SparkSqlParser.KW_SELECT:
                case SparkSqlParser.KW_SEMI:
                case SparkSqlParser.KW_SEPARATED:
                case SparkSqlParser.KW_SERDE:
                case SparkSqlParser.KW_SERDEPROPERTIES:
                case SparkSqlParser.KW_SESSION_USER:
                case SparkSqlParser.KW_SET:
                case SparkSqlParser.KW_MINUS:
                case SparkSqlParser.KW_SETS:
                case SparkSqlParser.KW_SHORT:
                case SparkSqlParser.KW_SHOW:
                case SparkSqlParser.KW_SINGLE:
                case SparkSqlParser.KW_SKEWED:
                case SparkSqlParser.KW_SMALLINT:
                case SparkSqlParser.KW_SOME:
                case SparkSqlParser.KW_SORT:
                case SparkSqlParser.KW_SORTED:
                case SparkSqlParser.KW_SOURCE:
                case SparkSqlParser.KW_START:
                case SparkSqlParser.KW_STATISTICS:
                case SparkSqlParser.KW_STORED:
                case SparkSqlParser.KW_STRATIFY:
                case SparkSqlParser.KW_STRING:
                case SparkSqlParser.KW_STRUCT:
                case SparkSqlParser.KW_SUBSTR:
                case SparkSqlParser.KW_SUBSTRING:
                case SparkSqlParser.KW_SYNC:
                case SparkSqlParser.KW_SYSTEM:
                case SparkSqlParser.KW_SYSTEM_TIME:
                case SparkSqlParser.KW_SYSTEM_VERSION:
                case SparkSqlParser.KW_TABLE:
                case SparkSqlParser.KW_TABLES:
                case SparkSqlParser.KW_TABLESAMPLE:
                case SparkSqlParser.KW_TARGET:
                case SparkSqlParser.KW_TBLPROPERTIES:
                case SparkSqlParser.KW_TEMPORARY:
                case SparkSqlParser.KW_TERMINATED:
                case SparkSqlParser.KW_THEN:
                case SparkSqlParser.KW_TIME:
                case SparkSqlParser.KW_TIMEDIFF:
                case SparkSqlParser.KW_TIMESTAMP:
                case SparkSqlParser.KW_TIMESTAMP_LTZ:
                case SparkSqlParser.KW_TIMESTAMP_NTZ:
                case SparkSqlParser.KW_TIMESTAMPADD:
                case SparkSqlParser.KW_TIMESTAMPDIFF:
                case SparkSqlParser.KW_TINYINT:
                case SparkSqlParser.KW_TO:
                case SparkSqlParser.KW_TOUCH:
                case SparkSqlParser.KW_TRAILING:
                case SparkSqlParser.KW_TRANSACTION:
                case SparkSqlParser.KW_TRANSACTIONS:
                case SparkSqlParser.KW_TRANSFORM:
                case SparkSqlParser.KW_TRIM:
                case SparkSqlParser.KW_TRUE:
                case SparkSqlParser.KW_TRUNCATE:
                case SparkSqlParser.KW_TRY_CAST:
                case SparkSqlParser.KW_TYPE:
                case SparkSqlParser.KW_UNARCHIVE:
                case SparkSqlParser.KW_UNBOUNDED:
                case SparkSqlParser.KW_UNCACHE:
                case SparkSqlParser.KW_UNION:
                case SparkSqlParser.KW_UNIQUE:
                case SparkSqlParser.KW_UNKNOWN:
                case SparkSqlParser.KW_UNLOCK:
                case SparkSqlParser.KW_UNPIVOT:
                case SparkSqlParser.KW_UNSET:
                case SparkSqlParser.KW_UPDATE:
                case SparkSqlParser.KW_USE:
                case SparkSqlParser.KW_USER:
                case SparkSqlParser.KW_USING:
                case SparkSqlParser.KW_VALUES:
                case SparkSqlParser.KW_VARCHAR:
                case SparkSqlParser.KW_VAR:
                case SparkSqlParser.KW_VARIABLE:
                case SparkSqlParser.KW_VERSION:
                case SparkSqlParser.KW_VIEW:
                case SparkSqlParser.KW_VIEWS:
                case SparkSqlParser.KW_VOID:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_WEEKS:
                case SparkSqlParser.KW_WHEN:
                case SparkSqlParser.KW_WHERE:
                case SparkSqlParser.KW_WINDOW:
                case SparkSqlParser.KW_WITH:
                case SparkSqlParser.KW_WITHIN:
                case SparkSqlParser.KW_YEAR:
                case SparkSqlParser.KW_YEARS:
                case SparkSqlParser.KW_ZONE:
                case SparkSqlParser.KW_ZORDER:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                case SparkSqlParser.IDENTIFIER:
                case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 1866;
                    localContext._source = this.identifierReference();
                    }
                    break;
                case SparkSqlParser.LEFT_PAREN:
                    {
                    this.state = 1867;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 1868;
                    localContext._sourceQuery = this.query();
                    this.state = 1869;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1873;
                localContext._sourceAlias = this.tableAlias();
                this.state = 1874;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1875;
                localContext._mergeCondition = this.booleanExpression(0);
                this.state = 1879;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 206, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1876;
                        this.matchedClause();
                        }
                        }
                    }
                    this.state = 1881;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 206, this.context);
                }
                this.state = 1885;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 207, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1882;
                        this.notMatchedClause();
                        }
                        }
                    }
                    this.state = 1887;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 207, this.context);
                }
                this.state = 1891;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 342) {
                    {
                    {
                    this.state = 1888;
                    this.notMatchedBySourceClause();
                    }
                    }
                    this.state = 1893;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbSchemaName(): DbSchemaNameContext {
        let localContext = new DbSchemaNameContext(this.context, this.state);
        this.enterRule(localContext, 78, SparkSqlParser.RULE_dbSchemaName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1896;
            this.identifierReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dbSchemaNameCreate(): DbSchemaNameCreateContext {
        let localContext = new DbSchemaNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 80, SparkSqlParser.RULE_dbSchemaNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1898;
            this.identifierReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableNameCreate(): TableNameCreateContext {
        let localContext = new TableNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 82, SparkSqlParser.RULE_tableNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1900;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableName(): TableNameContext {
        let localContext = new TableNameContext(this.context, this.state);
        this.enterRule(localContext, 84, SparkSqlParser.RULE_tableName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1902;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewNameCreate(): ViewNameCreateContext {
        let localContext = new ViewNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 86, SparkSqlParser.RULE_viewNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1904;
            this.viewIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewName(): ViewNameContext {
        let localContext = new ViewNameContext(this.context, this.state);
        this.enterRule(localContext, 88, SparkSqlParser.RULE_viewName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1906;
            this.viewIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnName(): ColumnNameContext {
        let localContext = new ColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 90, SparkSqlParser.RULE_columnName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1908;
            this.multipartIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameSeq(): ColumnNameSeqContext {
        let localContext = new ColumnNameSeqContext(this.context, this.state);
        this.enterRule(localContext, 92, SparkSqlParser.RULE_columnNameSeq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1910;
            this.columnName();
            this.state = 1915;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1911;
                this.match(SparkSqlParser.COMMA);
                this.state = 1912;
                this.columnName();
                }
                }
                this.state = 1917;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        let localContext = new ColumnNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 94, SparkSqlParser.RULE_columnNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1918;
            this.errorCapturingIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierReference(): IdentifierReferenceContext {
        let localContext = new IdentifierReferenceContext(this.context, this.state);
        this.enterRule(localContext, 96, SparkSqlParser.RULE_identifierReference);
        try {
            this.state = 1926;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 211, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1920;
                this.match(SparkSqlParser.KW_IDENTIFIER);
                this.state = 1921;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1922;
                this.expression();
                this.state = 1923;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1925;
                this.multipartIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryOrganization(): QueryOrganizationContext {
        let localContext = new QueryOrganizationContext(this.context, this.state);
        this.enterRule(localContext, 98, SparkSqlParser.RULE_queryOrganization);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1938;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 213, this.context) ) {
            case 1:
                {
                this.state = 1928;
                this.match(SparkSqlParser.KW_ORDER);
                this.state = 1929;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1930;
                localContext._sortItem = this.sortItem();
                localContext._order.push(localContext._sortItem);
                this.state = 1935;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 212, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1931;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 1932;
                        localContext._sortItem = this.sortItem();
                        localContext._order.push(localContext._sortItem);
                        }
                        }
                    }
                    this.state = 1937;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 212, this.context);
                }
                }
                break;
            }
            this.state = 1950;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 215, this.context) ) {
            case 1:
                {
                this.state = 1940;
                this.match(SparkSqlParser.KW_CLUSTER);
                this.state = 1941;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1942;
                localContext._expression = this.expression();
                localContext._clusterBy.push(localContext._expression);
                this.state = 1947;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 214, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1943;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 1944;
                        localContext._expression = this.expression();
                        localContext._clusterBy.push(localContext._expression);
                        }
                        }
                    }
                    this.state = 1949;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 214, this.context);
                }
                }
                break;
            }
            this.state = 1962;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 217, this.context) ) {
            case 1:
                {
                this.state = 1952;
                this.match(SparkSqlParser.KW_DISTRIBUTE);
                this.state = 1953;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1954;
                localContext._expression = this.expression();
                localContext._distributeBy.push(localContext._expression);
                this.state = 1959;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 216, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1955;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 1956;
                        localContext._expression = this.expression();
                        localContext._distributeBy.push(localContext._expression);
                        }
                        }
                    }
                    this.state = 1961;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 216, this.context);
                }
                }
                break;
            }
            this.state = 1974;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
            case 1:
                {
                this.state = 1964;
                this.match(SparkSqlParser.KW_SORT);
                this.state = 1965;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1966;
                localContext._sortItem = this.sortItem();
                localContext._sort.push(localContext._sortItem);
                this.state = 1971;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 218, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1967;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 1968;
                        localContext._sortItem = this.sortItem();
                        localContext._sort.push(localContext._sortItem);
                        }
                        }
                    }
                    this.state = 1973;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 218, this.context);
                }
                }
                break;
            }
            this.state = 1977;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 220, this.context) ) {
            case 1:
                {
                this.state = 1976;
                this.windowClause();
                }
                break;
            }
            this.state = 1984;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 222, this.context) ) {
            case 1:
                {
                this.state = 1979;
                this.match(SparkSqlParser.KW_LIMIT);
                this.state = 1982;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 221, this.context) ) {
                case 1:
                    {
                    this.state = 1980;
                    this.match(SparkSqlParser.KW_ALL);
                    }
                    break;
                case 2:
                    {
                    this.state = 1981;
                    localContext._limit = this.expression();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 1988;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 223, this.context) ) {
            case 1:
                {
                this.state = 1986;
                this.match(SparkSqlParser.KW_OFFSET);
                this.state = 1987;
                localContext._offset = this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiInsertQueryBody(): MultiInsertQueryBodyContext {
        let localContext = new MultiInsertQueryBodyContext(this.context, this.state);
        this.enterRule(localContext, 100, SparkSqlParser.RULE_multiInsertQueryBody);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1990;
            this.insertInto();
            this.state = 1991;
            this.fromStatementBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public queryTerm(): QueryTermContext;
    public queryTerm(_p: number): QueryTermContext;
    public queryTerm(_p?: number): QueryTermContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new QueryTermContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 102;
        this.enterRecursionRule(localContext, 102, SparkSqlParser.RULE_queryTerm, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 1994;
            this.queryPrimary();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2016;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 228, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2014;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 227, this.context) ) {
                    case 1:
                        {
                        localContext = new QueryTermContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_queryTerm);
                        this.state = 1996;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 1997;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 102 || _la === 148 || _la === 269 || _la === 322)) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1999;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 10 || _la === 92) {
                            {
                            this.state = 1998;
                            this.setQuantifier();
                            }
                        }

                        this.state = 2001;
                        localContext._right = this.queryTerm(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new QueryTermContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_queryTerm);
                        this.state = 2002;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2003;
                        localContext._operator = this.match(SparkSqlParser.KW_INTERSECT);
                        this.state = 2005;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 10 || _la === 92) {
                            {
                            this.state = 2004;
                            this.setQuantifier();
                            }
                        }

                        this.state = 2007;
                        localContext._right = this.queryTerm(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new QueryTermContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_queryTerm);
                        this.state = 2008;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2009;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 102 || _la === 269 || _la === 322)) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2011;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 10 || _la === 92) {
                            {
                            this.state = 2010;
                            this.setQuantifier();
                            }
                        }

                        this.state = 2013;
                        localContext._right = this.queryTerm(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 2018;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 228, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localContext = new QueryPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 104, SparkSqlParser.RULE_queryPrimary);
        try {
            this.state = 2028;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_MAP:
            case SparkSqlParser.KW_REDUCE:
            case SparkSqlParser.KW_SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2019;
                this.querySpecification();
                }
                break;
            case SparkSqlParser.KW_FROM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2020;
                this.fromStatement();
                }
                break;
            case SparkSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2021;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 2022;
                this.tableName();
                }
                break;
            case SparkSqlParser.KW_VALUES:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2023;
                this.inlineTable();
                }
                break;
            case SparkSqlParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2024;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2025;
                this.query();
                this.state = 2026;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortItem(): SortItemContext {
        let localContext = new SortItemContext(this.context, this.state);
        this.enterRule(localContext, 106, SparkSqlParser.RULE_sortItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2032;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 230, this.context) ) {
            case 1:
                {
                this.state = 2030;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 2031;
                this.expression();
                }
                break;
            }
            this.state = 2035;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 231, this.context) ) {
            case 1:
                {
                this.state = 2034;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 21 || _la === 86)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 2039;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 232, this.context) ) {
            case 1:
                {
                this.state = 2037;
                this.match(SparkSqlParser.KW_NULLS);
                this.state = 2038;
                localContext._nullOrder = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 116 || _la === 157)) {
                    localContext._nullOrder = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromStatement(): FromStatementContext {
        let localContext = new FromStatementContext(this.context, this.state);
        this.enterRule(localContext, 108, SparkSqlParser.RULE_fromStatement);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2041;
            this.fromClause();
            this.state = 2043;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 2042;
                    this.fromStatementBody();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2045;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 233, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromStatementBody(): FromStatementBodyContext {
        let localContext = new FromStatementBodyContext(this.context, this.state);
        this.enterRule(localContext, 110, SparkSqlParser.RULE_fromStatementBody);
        try {
            let alternative: number;
            this.state = 2074;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 240, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2047;
                this.transformClause();
                this.state = 2049;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 234, this.context) ) {
                case 1:
                    {
                    this.state = 2048;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 2051;
                this.queryOrganization();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2053;
                this.selectClause();
                this.state = 2057;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 235, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2054;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 2059;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 235, this.context);
                }
                this.state = 2061;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 236, this.context) ) {
                case 1:
                    {
                    this.state = 2060;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 2064;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 237, this.context) ) {
                case 1:
                    {
                    this.state = 2063;
                    this.aggregationClause();
                    }
                    break;
                }
                this.state = 2067;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 238, this.context) ) {
                case 1:
                    {
                    this.state = 2066;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 2070;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 239, this.context) ) {
                case 1:
                    {
                    this.state = 2069;
                    this.windowClause();
                    }
                    break;
                }
                this.state = 2072;
                this.queryOrganization();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecification(): QuerySpecificationContext {
        let localContext = new QuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 112, SparkSqlParser.RULE_querySpecification);
        try {
            let alternative: number;
            this.state = 2120;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 253, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2076;
                this.transformClause();
                this.state = 2078;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 241, this.context) ) {
                case 1:
                    {
                    this.state = 2077;
                    this.fromClause();
                    }
                    break;
                }
                this.state = 2083;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 242, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2080;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 2085;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 242, this.context);
                }
                this.state = 2087;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 243, this.context) ) {
                case 1:
                    {
                    this.state = 2086;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 2090;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
                case 1:
                    {
                    this.state = 2089;
                    this.aggregationClause();
                    }
                    break;
                }
                this.state = 2093;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 245, this.context) ) {
                case 1:
                    {
                    this.state = 2092;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 2096;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 246, this.context) ) {
                case 1:
                    {
                    this.state = 2095;
                    this.windowClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2098;
                this.selectClause();
                this.state = 2100;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
                case 1:
                    {
                    this.state = 2099;
                    this.fromClause();
                    }
                    break;
                }
                this.state = 2105;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 248, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2102;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 2107;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 248, this.context);
                }
                this.state = 2109;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 249, this.context) ) {
                case 1:
                    {
                    this.state = 2108;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 2112;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 250, this.context) ) {
                case 1:
                    {
                    this.state = 2111;
                    this.aggregationClause();
                    }
                    break;
                }
                this.state = 2115;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 251, this.context) ) {
                case 1:
                    {
                    this.state = 2114;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 2118;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 252, this.context) ) {
                case 1:
                    {
                    this.state = 2117;
                    this.windowClause();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transformClause(): TransformClauseContext {
        let localContext = new TransformClauseContext(this.context, this.state);
        this.enterRule(localContext, 114, SparkSqlParser.RULE_transformClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2141;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_SELECT:
                {
                this.state = 2122;
                this.match(SparkSqlParser.KW_SELECT);
                this.state = 2123;
                localContext._kind = this.match(SparkSqlParser.KW_TRANSFORM);
                this.state = 2124;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2126;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
                case 1:
                    {
                    this.state = 2125;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2128;
                this.expressionSeq();
                this.state = 2129;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case SparkSqlParser.KW_MAP:
                {
                this.state = 2131;
                localContext._kind = this.match(SparkSqlParser.KW_MAP);
                this.state = 2133;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
                case 1:
                    {
                    this.state = 2132;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2135;
                this.expressionSeq();
                }
                break;
            case SparkSqlParser.KW_REDUCE:
                {
                this.state = 2136;
                localContext._kind = this.match(SparkSqlParser.KW_REDUCE);
                this.state = 2138;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
                case 1:
                    {
                    this.state = 2137;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2140;
                this.expressionSeq();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2144;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 256) {
                {
                this.state = 2143;
                localContext._inRowFormat = this.rowFormat();
                }
            }

            this.state = 2148;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 235) {
                {
                this.state = 2146;
                this.match(SparkSqlParser.KW_RECORDWRITER);
                this.state = 2147;
                localContext._recordWriter = this.stringLit();
                }
            }

            this.state = 2150;
            this.match(SparkSqlParser.KW_USING);
            this.state = 2151;
            localContext._script = this.stringLit();
            this.state = 2164;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 262, this.context) ) {
            case 1:
                {
                this.state = 2152;
                this.match(SparkSqlParser.KW_AS);
                this.state = 2162;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 261, this.context) ) {
                case 1:
                    {
                    this.state = 2153;
                    this.identifierSeq();
                    }
                    break;
                case 2:
                    {
                    this.state = 2154;
                    this.colTypeList();
                    }
                    break;
                case 3:
                    {
                    {
                    this.state = 2155;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2158;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 260, this.context) ) {
                    case 1:
                        {
                        this.state = 2156;
                        this.identifierSeq();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2157;
                        this.colTypeList();
                        }
                        break;
                    }
                    this.state = 2160;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            }
            this.state = 2167;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 263, this.context) ) {
            case 1:
                {
                this.state = 2166;
                localContext._outRowFormat = this.rowFormat();
                }
                break;
            }
            this.state = 2171;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 264, this.context) ) {
            case 1:
                {
                this.state = 2169;
                this.match(SparkSqlParser.KW_RECORDREADER);
                this.state = 2170;
                localContext._recordReader = this.stringLit();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectClause(): SelectClauseContext {
        let localContext = new SelectClauseContext(this.context, this.state);
        this.enterRule(localContext, 116, SparkSqlParser.RULE_selectClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2173;
            this.match(SparkSqlParser.KW_SELECT);
            this.state = 2177;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 373) {
                {
                {
                this.state = 2174;
                localContext._hint = this.hint();
                localContext._hints.push(localContext._hint);
                }
                }
                this.state = 2179;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2181;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 266, this.context) ) {
            case 1:
                {
                this.state = 2180;
                this.setQuantifier();
                }
                break;
            }
            this.state = 2183;
            this.namedExpressionSeq();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setClause(): SetClauseContext {
        let localContext = new SetClauseContext(this.context, this.state);
        this.enterRule(localContext, 118, SparkSqlParser.RULE_setClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2185;
            this.match(SparkSqlParser.KW_SET);
            this.state = 2186;
            this.assignmentList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public matchedClause(): MatchedClauseContext {
        let localContext = new MatchedClauseContext(this.context, this.state);
        this.enterRule(localContext, 120, SparkSqlParser.RULE_matchedClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2188;
            this.match(SparkSqlParser.KW_WHEN);
            this.state = 2189;
            this.match(SparkSqlParser.KW_MATCHED);
            this.state = 2192;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14) {
                {
                this.state = 2190;
                this.match(SparkSqlParser.KW_AND);
                this.state = 2191;
                localContext._matchedCond = this.booleanExpression(0);
                }
            }

            this.state = 2194;
            this.match(SparkSqlParser.KW_THEN);
            this.state = 2195;
            this.matchedAction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedClause(): NotMatchedClauseContext {
        let localContext = new NotMatchedClauseContext(this.context, this.state);
        this.enterRule(localContext, 122, SparkSqlParser.RULE_notMatchedClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2197;
            this.match(SparkSqlParser.KW_WHEN);
            this.state = 2198;
            this.match(SparkSqlParser.KW_NOT);
            this.state = 2199;
            this.match(SparkSqlParser.KW_MATCHED);
            this.state = 2202;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 31) {
                {
                this.state = 2200;
                this.match(SparkSqlParser.KW_BY);
                this.state = 2201;
                this.match(SparkSqlParser.KW_TARGET);
                }
            }

            this.state = 2206;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14) {
                {
                this.state = 2204;
                this.match(SparkSqlParser.KW_AND);
                this.state = 2205;
                localContext._notMatchedCond = this.booleanExpression(0);
                }
            }

            this.state = 2208;
            this.match(SparkSqlParser.KW_THEN);
            this.state = 2209;
            this.notMatchedAction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedBySourceClause(): NotMatchedBySourceClauseContext {
        let localContext = new NotMatchedBySourceClauseContext(this.context, this.state);
        this.enterRule(localContext, 124, SparkSqlParser.RULE_notMatchedBySourceClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2211;
            this.match(SparkSqlParser.KW_WHEN);
            this.state = 2212;
            this.match(SparkSqlParser.KW_NOT);
            this.state = 2213;
            this.match(SparkSqlParser.KW_MATCHED);
            this.state = 2214;
            this.match(SparkSqlParser.KW_BY);
            this.state = 2215;
            this.match(SparkSqlParser.KW_SOURCE);
            this.state = 2218;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14) {
                {
                this.state = 2216;
                this.match(SparkSqlParser.KW_AND);
                this.state = 2217;
                localContext._notMatchedBySourceCond = this.booleanExpression(0);
                }
            }

            this.state = 2220;
            this.match(SparkSqlParser.KW_THEN);
            this.state = 2221;
            this.notMatchedBySourceAction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public matchedAction(): MatchedActionContext {
        let localContext = new MatchedActionContext(this.context, this.state);
        this.enterRule(localContext, 126, SparkSqlParser.RULE_matchedAction);
        try {
            this.state = 2230;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 271, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2223;
                this.match(SparkSqlParser.KW_DELETE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2224;
                this.match(SparkSqlParser.KW_UPDATE);
                this.state = 2225;
                this.match(SparkSqlParser.KW_SET);
                this.state = 2226;
                this.match(SparkSqlParser.ASTERISK);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2227;
                this.match(SparkSqlParser.KW_UPDATE);
                this.state = 2228;
                this.match(SparkSqlParser.KW_SET);
                this.state = 2229;
                this.assignmentList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedAction(): NotMatchedActionContext {
        let localContext = new NotMatchedActionContext(this.context, this.state);
        this.enterRule(localContext, 128, SparkSqlParser.RULE_notMatchedAction);
        let _la: number;
        try {
            this.state = 2250;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 273, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2232;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 2233;
                this.match(SparkSqlParser.ASTERISK);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2234;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 2235;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2236;
                this.multipartIdentifierList();
                this.state = 2237;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2238;
                this.match(SparkSqlParser.KW_VALUES);
                this.state = 2239;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2240;
                this.expression();
                this.state = 2245;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2241;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2242;
                    this.expression();
                    }
                    }
                    this.state = 2247;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2248;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedBySourceAction(): NotMatchedBySourceActionContext {
        let localContext = new NotMatchedBySourceActionContext(this.context, this.state);
        this.enterRule(localContext, 130, SparkSqlParser.RULE_notMatchedBySourceAction);
        try {
            this.state = 2256;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_DELETE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2252;
                this.match(SparkSqlParser.KW_DELETE);
                }
                break;
            case SparkSqlParser.KW_UPDATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2253;
                this.match(SparkSqlParser.KW_UPDATE);
                this.state = 2254;
                this.match(SparkSqlParser.KW_SET);
                this.state = 2255;
                this.assignmentList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentList(): AssignmentListContext {
        let localContext = new AssignmentListContext(this.context, this.state);
        this.enterRule(localContext, 132, SparkSqlParser.RULE_assignmentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2258;
            this.assignment();
            this.state = 2263;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2259;
                this.match(SparkSqlParser.COMMA);
                this.state = 2260;
                this.assignment();
                }
                }
                this.state = 2265;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignment(): AssignmentContext {
        let localContext = new AssignmentContext(this.context, this.state);
        this.enterRule(localContext, 134, SparkSqlParser.RULE_assignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2266;
            localContext._key = this.multipartIdentifier();
            this.state = 2267;
            this.match(SparkSqlParser.EQ);
            this.state = 2268;
            localContext._value = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 136, SparkSqlParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2270;
            this.match(SparkSqlParser.KW_WHERE);
            this.state = 2271;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 138, SparkSqlParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2273;
            this.match(SparkSqlParser.KW_HAVING);
            this.state = 2274;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hint(): HintContext {
        let localContext = new HintContext(this.context, this.state);
        this.enterRule(localContext, 140, SparkSqlParser.RULE_hint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2276;
            this.match(SparkSqlParser.HENT_START);
            this.state = 2277;
            localContext._hintStatement = this.hintStatement();
            localContext._hintStatements.push(localContext._hintStatement);
            this.state = 2284;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967056) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & 3073) !== 0)) {
                {
                {
                this.state = 2279;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 2278;
                    this.match(SparkSqlParser.COMMA);
                    }
                }

                this.state = 2281;
                localContext._hintStatement = this.hintStatement();
                localContext._hintStatements.push(localContext._hintStatement);
                }
                }
                this.state = 2286;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2287;
            this.match(SparkSqlParser.HENT_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintStatement(): HintStatementContext {
        let localContext = new HintStatementContext(this.context, this.state);
        this.enterRule(localContext, 142, SparkSqlParser.RULE_hintStatement);
        let _la: number;
        try {
            this.state = 2302;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 279, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2289;
                localContext._hintName = this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2290;
                localContext._hintName = this.identifier();
                this.state = 2291;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2292;
                localContext._primaryExpression = this.primaryExpression(0);
                localContext._parameters.push(localContext._primaryExpression);
                this.state = 2297;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2293;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2294;
                    localContext._primaryExpression = this.primaryExpression(0);
                    localContext._parameters.push(localContext._primaryExpression);
                    }
                    }
                    this.state = 2299;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2300;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 144, SparkSqlParser.RULE_fromClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2304;
            this.match(SparkSqlParser.KW_FROM);
            this.state = 2305;
            this.relation();
            this.state = 2310;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 280, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2306;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2307;
                    this.relation();
                    }
                    }
                }
                this.state = 2312;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 280, this.context);
            }
            this.state = 2316;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 281, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2313;
                    this.lateralView();
                    }
                    }
                }
                this.state = 2318;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 281, this.context);
            }
            this.state = 2320;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 282, this.context) ) {
            case 1:
                {
                this.state = 2319;
                this.pivotClause();
                }
                break;
            }
            this.state = 2323;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 283, this.context) ) {
            case 1:
                {
                this.state = 2322;
                this.unpivotClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionKind(): FunctionKindContext {
        let localContext = new FunctionKindContext(this.context, this.state);
        this.enterRule(localContext, 146, SparkSqlParser.RULE_functionKind);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2325;
            _la = this.tokenStream.LA(1);
            if(!(_la === 10 || _la === 289 || _la === 330)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public temporalClause(): TemporalClauseContext {
        let localContext = new TemporalClauseContext(this.context, this.state);
        this.enterRule(localContext, 148, SparkSqlParser.RULE_temporalClause);
        let _la: number;
        try {
            this.state = 2341;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 286, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2328;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 2327;
                    this.match(SparkSqlParser.KW_FOR);
                    }
                }

                this.state = 2330;
                _la = this.tokenStream.LA(1);
                if(!(_la === 291 || _la === 336)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2331;
                this.match(SparkSqlParser.KW_AS);
                this.state = 2332;
                this.match(SparkSqlParser.KW_OF);
                this.state = 2333;
                this.version();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2335;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 2334;
                    this.match(SparkSqlParser.KW_FOR);
                    }
                }

                this.state = 2337;
                _la = this.tokenStream.LA(1);
                if(!(_la === 290 || _la === 302)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2338;
                this.match(SparkSqlParser.KW_AS);
                this.state = 2339;
                this.match(SparkSqlParser.KW_OF);
                this.state = 2340;
                localContext._timestamp = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregationClause(): AggregationClauseContext {
        let localContext = new AggregationClauseContext(this.context, this.state);
        this.enterRule(localContext, 150, SparkSqlParser.RULE_aggregationClause);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2382;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2343;
                this.match(SparkSqlParser.KW_GROUP);
                this.state = 2344;
                this.match(SparkSqlParser.KW_BY);
                this.state = 2345;
                localContext._groupByClause = this.groupByClause();
                localContext._groupingExpressionsWithGroupingAnalytics.push(localContext._groupByClause);
                this.state = 2350;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 287, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2346;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2347;
                        localContext._groupByClause = this.groupByClause();
                        localContext._groupingExpressionsWithGroupingAnalytics.push(localContext._groupByClause);
                        }
                        }
                    }
                    this.state = 2352;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 287, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2353;
                this.match(SparkSqlParser.KW_GROUP);
                this.state = 2354;
                this.match(SparkSqlParser.KW_BY);
                this.state = 2355;
                localContext._expression = this.expression();
                localContext._groupingExpressions.push(localContext._expression);
                this.state = 2360;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 288, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2356;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2357;
                        localContext._expression = this.expression();
                        localContext._groupingExpressions.push(localContext._expression);
                        }
                        }
                    }
                    this.state = 2362;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 288, this.context);
                }
                this.state = 2380;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 290, this.context) ) {
                case 1:
                    {
                    this.state = 2363;
                    this.match(SparkSqlParser.KW_WITH);
                    this.state = 2364;
                    localContext._kind = this.match(SparkSqlParser.KW_ROLLUP);
                    }
                    break;
                case 2:
                    {
                    this.state = 2365;
                    this.match(SparkSqlParser.KW_WITH);
                    this.state = 2366;
                    localContext._kind = this.match(SparkSqlParser.KW_CUBE);
                    }
                    break;
                case 3:
                    {
                    this.state = 2367;
                    localContext._kind = this.match(SparkSqlParser.KW_GROUPING);
                    this.state = 2368;
                    this.match(SparkSqlParser.KW_SETS);
                    this.state = 2369;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2370;
                    this.groupingSet();
                    this.state = 2375;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2371;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2372;
                        this.groupingSet();
                        }
                        }
                        this.state = 2377;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2378;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 152, SparkSqlParser.RULE_groupByClause);
        try {
            this.state = 2387;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 292, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2384;
                this.columnName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2385;
                this.groupingAnalytics();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2386;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingAnalytics(): GroupingAnalyticsContext {
        let localContext = new GroupingAnalyticsContext(this.context, this.state);
        this.enterRule(localContext, 154, SparkSqlParser.RULE_groupingAnalytics);
        let _la: number;
        try {
            this.state = 2414;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_CUBE:
            case SparkSqlParser.KW_ROLLUP:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2389;
                _la = this.tokenStream.LA(1);
                if(!(_la === 61 || _la === 255)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2390;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2391;
                this.groupingSet();
                this.state = 2396;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2392;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2393;
                    this.groupingSet();
                    }
                    }
                    this.state = 2398;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2399;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case SparkSqlParser.KW_GROUPING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2401;
                this.match(SparkSqlParser.KW_GROUPING);
                this.state = 2402;
                this.match(SparkSqlParser.KW_SETS);
                this.state = 2403;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2404;
                this.groupingElement();
                this.state = 2409;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2405;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2406;
                    this.groupingElement();
                    }
                    }
                    this.state = 2411;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2412;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingElement(): GroupingElementContext {
        let localContext = new GroupingElementContext(this.context, this.state);
        this.enterRule(localContext, 156, SparkSqlParser.RULE_groupingElement);
        try {
            this.state = 2418;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 296, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2416;
                this.groupingAnalytics();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2417;
                this.groupingSet();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSet(): GroupingSetContext {
        let localContext = new GroupingSetContext(this.context, this.state);
        this.enterRule(localContext, 158, SparkSqlParser.RULE_groupingSet);
        let _la: number;
        try {
            this.state = 2440;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 301, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2420;
                this.columnName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2421;
                this.expression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2422;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2437;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 1073678415) !== 0)) {
                    {
                    this.state = 2425;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 297, this.context) ) {
                    case 1:
                        {
                        this.state = 2423;
                        this.columnName();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2424;
                        this.expression();
                        }
                        break;
                    }
                    this.state = 2434;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2427;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2430;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 298, this.context) ) {
                        case 1:
                            {
                            this.state = 2428;
                            this.columnName();
                            }
                            break;
                        case 2:
                            {
                            this.state = 2429;
                            this.expression();
                            }
                            break;
                        }
                        }
                        }
                        this.state = 2436;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2439;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotClause(): PivotClauseContext {
        let localContext = new PivotClauseContext(this.context, this.state);
        this.enterRule(localContext, 160, SparkSqlParser.RULE_pivotClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2442;
            this.match(SparkSqlParser.KW_PIVOT);
            this.state = 2443;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2444;
            localContext._aggregates = this.namedExpressionSeq();
            this.state = 2445;
            this.match(SparkSqlParser.KW_FOR);
            this.state = 2446;
            this.pivotColumn();
            this.state = 2447;
            this.match(SparkSqlParser.KW_IN);
            this.state = 2448;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2449;
            localContext._pivotValue = this.pivotValue();
            localContext._pivotValues.push(localContext._pivotValue);
            this.state = 2454;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2450;
                this.match(SparkSqlParser.COMMA);
                this.state = 2451;
                localContext._pivotValue = this.pivotValue();
                localContext._pivotValues.push(localContext._pivotValue);
                }
                }
                this.state = 2456;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2457;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2458;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotColumn(): PivotColumnContext {
        let localContext = new PivotColumnContext(this.context, this.state);
        this.enterRule(localContext, 162, SparkSqlParser.RULE_pivotColumn);
        let _la: number;
        try {
            this.state = 2472;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ADD:
            case SparkSqlParser.KW_AFTER:
            case SparkSqlParser.KW_ALL:
            case SparkSqlParser.KW_ALTER:
            case SparkSqlParser.KW_ALWAYS:
            case SparkSqlParser.KW_ANALYZE:
            case SparkSqlParser.KW_AND:
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_ANY:
            case SparkSqlParser.KW_ANY_VALUE:
            case SparkSqlParser.KW_ARCHIVE:
            case SparkSqlParser.KW_ARRAY:
            case SparkSqlParser.KW_AS:
            case SparkSqlParser.KW_ASC:
            case SparkSqlParser.KW_AT:
            case SparkSqlParser.KW_AUTHORIZATION:
            case SparkSqlParser.KW_BETWEEN:
            case SparkSqlParser.KW_BIGINT:
            case SparkSqlParser.KW_BINARY:
            case SparkSqlParser.KW_BOOLEAN:
            case SparkSqlParser.KW_BOTH:
            case SparkSqlParser.KW_BUCKET:
            case SparkSqlParser.KW_BUCKETS:
            case SparkSqlParser.KW_BY:
            case SparkSqlParser.KW_BYTE:
            case SparkSqlParser.KW_CACHE:
            case SparkSqlParser.KW_CASCADE:
            case SparkSqlParser.KW_CASE:
            case SparkSqlParser.KW_CAST:
            case SparkSqlParser.KW_CATALOG:
            case SparkSqlParser.KW_CATALOGS:
            case SparkSqlParser.KW_CHANGE:
            case SparkSqlParser.KW_CHAR:
            case SparkSqlParser.KW_CHARACTER:
            case SparkSqlParser.KW_CHECK:
            case SparkSqlParser.KW_CLEAR:
            case SparkSqlParser.KW_CLUSTER:
            case SparkSqlParser.KW_CLUSTERED:
            case SparkSqlParser.KW_CODEGEN:
            case SparkSqlParser.KW_COLLATE:
            case SparkSqlParser.KW_COLLECTION:
            case SparkSqlParser.KW_COLUMN:
            case SparkSqlParser.KW_COLUMNS:
            case SparkSqlParser.KW_COMMENT:
            case SparkSqlParser.KW_COMMIT:
            case SparkSqlParser.KW_COMPACT:
            case SparkSqlParser.KW_COMPACTIONS:
            case SparkSqlParser.KW_COMPUTE:
            case SparkSqlParser.KW_CONCATENATE:
            case SparkSqlParser.KW_CONSTRAINT:
            case SparkSqlParser.KW_COST:
            case SparkSqlParser.KW_CREATE:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_CUBE:
            case SparkSqlParser.KW_CURRENT:
            case SparkSqlParser.KW_CURRENT_DATE:
            case SparkSqlParser.KW_CURRENT_TIME:
            case SparkSqlParser.KW_CURRENT_TIMESTAMP:
            case SparkSqlParser.KW_CURRENT_USER:
            case SparkSqlParser.KW_DAY:
            case SparkSqlParser.KW_DAYS:
            case SparkSqlParser.KW_DAYOFYEAR:
            case SparkSqlParser.KW_DATA:
            case SparkSqlParser.KW_DATE:
            case SparkSqlParser.KW_DATABASE:
            case SparkSqlParser.KW_DATABASES:
            case SparkSqlParser.KW_DATEADD:
            case SparkSqlParser.KW_DATE_ADD:
            case SparkSqlParser.KW_DATEDIFF:
            case SparkSqlParser.KW_DATE_DIFF:
            case SparkSqlParser.KW_DBPROPERTIES:
            case SparkSqlParser.KW_DEC:
            case SparkSqlParser.KW_DECIMAL:
            case SparkSqlParser.KW_DECLARE:
            case SparkSqlParser.KW_DEFAULT:
            case SparkSqlParser.KW_DEFINED:
            case SparkSqlParser.KW_DELETE:
            case SparkSqlParser.KW_DELIMITED:
            case SparkSqlParser.KW_DESC:
            case SparkSqlParser.KW_DESCRIBE:
            case SparkSqlParser.KW_DFS:
            case SparkSqlParser.KW_DIRECTORIES:
            case SparkSqlParser.KW_DIRECTORY:
            case SparkSqlParser.KW_DISABLE:
            case SparkSqlParser.KW_DISTINCT:
            case SparkSqlParser.KW_DISTRIBUTE:
            case SparkSqlParser.KW_DIV:
            case SparkSqlParser.KW_DOUBLE:
            case SparkSqlParser.KW_DROP:
            case SparkSqlParser.KW_ELSE:
            case SparkSqlParser.KW_ENABLE:
            case SparkSqlParser.KW_END:
            case SparkSqlParser.KW_ESCAPE:
            case SparkSqlParser.KW_ESCAPED:
            case SparkSqlParser.KW_EXCEPT:
            case SparkSqlParser.KW_EXCHANGE:
            case SparkSqlParser.KW_EXCLUDE:
            case SparkSqlParser.KW_EXISTS:
            case SparkSqlParser.KW_EXPLAIN:
            case SparkSqlParser.KW_EXPORT:
            case SparkSqlParser.KW_EXTENDED:
            case SparkSqlParser.KW_EXTERNAL:
            case SparkSqlParser.KW_EXTRACT:
            case SparkSqlParser.KW_FALSE:
            case SparkSqlParser.KW_FETCH:
            case SparkSqlParser.KW_FIELDS:
            case SparkSqlParser.KW_FILTER:
            case SparkSqlParser.KW_FILEFORMAT:
            case SparkSqlParser.KW_FIRST:
            case SparkSqlParser.KW_FLOAT:
            case SparkSqlParser.KW_FOLLOWING:
            case SparkSqlParser.KW_FOR:
            case SparkSqlParser.KW_FOREIGN:
            case SparkSqlParser.KW_FORMAT:
            case SparkSqlParser.KW_FORMATTED:
            case SparkSqlParser.KW_FROM:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_FUNCTION:
            case SparkSqlParser.KW_FUNCTIONS:
            case SparkSqlParser.KW_GENERATED:
            case SparkSqlParser.KW_GLOBAL:
            case SparkSqlParser.KW_GRANT:
            case SparkSqlParser.KW_GROUP:
            case SparkSqlParser.KW_GROUPING:
            case SparkSqlParser.KW_HAVING:
            case SparkSqlParser.KW_BINARY_HEX:
            case SparkSqlParser.KW_HOUR:
            case SparkSqlParser.KW_HOURS:
            case SparkSqlParser.KW_IDENTIFIER:
            case SparkSqlParser.KW_IF:
            case SparkSqlParser.KW_IGNORE:
            case SparkSqlParser.KW_IMPORT:
            case SparkSqlParser.KW_IN:
            case SparkSqlParser.KW_INCLUDE:
            case SparkSqlParser.KW_INDEX:
            case SparkSqlParser.KW_INDEXES:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_INPATH:
            case SparkSqlParser.KW_INPUTFORMAT:
            case SparkSqlParser.KW_INSERT:
            case SparkSqlParser.KW_INTERSECT:
            case SparkSqlParser.KW_INTERVAL:
            case SparkSqlParser.KW_INT:
            case SparkSqlParser.KW_INTEGER:
            case SparkSqlParser.KW_INTO:
            case SparkSqlParser.KW_IS:
            case SparkSqlParser.KW_ITEMS:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_KEYS:
            case SparkSqlParser.KW_LAST:
            case SparkSqlParser.KW_LATERAL:
            case SparkSqlParser.KW_LAZY:
            case SparkSqlParser.KW_LEADING:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_LIKE:
            case SparkSqlParser.KW_ILIKE:
            case SparkSqlParser.KW_LIMIT:
            case SparkSqlParser.KW_LINES:
            case SparkSqlParser.KW_LIST:
            case SparkSqlParser.KW_LOAD:
            case SparkSqlParser.KW_LOCAL:
            case SparkSqlParser.KW_LOCATION:
            case SparkSqlParser.KW_LOCK:
            case SparkSqlParser.KW_LOCKS:
            case SparkSqlParser.KW_LOGICAL:
            case SparkSqlParser.KW_LONG:
            case SparkSqlParser.KW_MACRO:
            case SparkSqlParser.KW_MATERIALIZED:
            case SparkSqlParser.KW_MAP:
            case SparkSqlParser.KW_MATCHED:
            case SparkSqlParser.KW_MERGE:
            case SparkSqlParser.KW_MICROSECOND:
            case SparkSqlParser.KW_MICROSECONDS:
            case SparkSqlParser.KW_MILLISECOND:
            case SparkSqlParser.KW_MILLISECONDS:
            case SparkSqlParser.KW_MINUTE:
            case SparkSqlParser.KW_MINUTES:
            case SparkSqlParser.KW_MONTH:
            case SparkSqlParser.KW_MONTHS:
            case SparkSqlParser.KW_MSCK:
            case SparkSqlParser.KW_NAME:
            case SparkSqlParser.KW_NAMESPACE:
            case SparkSqlParser.KW_NAMESPACES:
            case SparkSqlParser.KW_NANOSECOND:
            case SparkSqlParser.KW_NANOSECONDS:
            case SparkSqlParser.KW_NATURAL:
            case SparkSqlParser.KW_NO:
            case SparkSqlParser.KW_NOT:
            case SparkSqlParser.KW_NULL:
            case SparkSqlParser.KW_NULLS:
            case SparkSqlParser.KW_NUMERIC:
            case SparkSqlParser.KW_OF:
            case SparkSqlParser.KW_OFFSET:
            case SparkSqlParser.KW_ON:
            case SparkSqlParser.KW_ONLY:
            case SparkSqlParser.KW_OPTIMIZE:
            case SparkSqlParser.KW_OPTION:
            case SparkSqlParser.KW_OPTIONS:
            case SparkSqlParser.KW_OR:
            case SparkSqlParser.KW_ORDER:
            case SparkSqlParser.KW_OUT:
            case SparkSqlParser.KW_OUTER:
            case SparkSqlParser.KW_OUTPUTFORMAT:
            case SparkSqlParser.KW_OVER:
            case SparkSqlParser.KW_OVERLAPS:
            case SparkSqlParser.KW_OVERLAY:
            case SparkSqlParser.KW_OVERWRITE:
            case SparkSqlParser.KW_PARTITION:
            case SparkSqlParser.KW_PARTITIONED:
            case SparkSqlParser.KW_PARTITIONS:
            case SparkSqlParser.KW_PERCENTILE_CONT:
            case SparkSqlParser.KW_PERCENTILE_DISC:
            case SparkSqlParser.KW_PERCENTLIT:
            case SparkSqlParser.KW_PIVOT:
            case SparkSqlParser.KW_PLACING:
            case SparkSqlParser.KW_POSITION:
            case SparkSqlParser.KW_PRECEDING:
            case SparkSqlParser.KW_PRIMARY:
            case SparkSqlParser.KW_PRINCIPALS:
            case SparkSqlParser.KW_PROPERTIES:
            case SparkSqlParser.KW_PURGE:
            case SparkSqlParser.KW_QUARTER:
            case SparkSqlParser.KW_QUERY:
            case SparkSqlParser.KW_RANGE:
            case SparkSqlParser.KW_REAL:
            case SparkSqlParser.KW_RECORDREADER:
            case SparkSqlParser.KW_RECORDWRITER:
            case SparkSqlParser.KW_RECOVER:
            case SparkSqlParser.KW_REDUCE:
            case SparkSqlParser.KW_REFERENCES:
            case SparkSqlParser.KW_REFRESH:
            case SparkSqlParser.KW_RENAME:
            case SparkSqlParser.KW_REPAIR:
            case SparkSqlParser.KW_REPEATABLE:
            case SparkSqlParser.KW_REPLACE:
            case SparkSqlParser.KW_RESET:
            case SparkSqlParser.KW_RESPECT:
            case SparkSqlParser.KW_RESTRICT:
            case SparkSqlParser.KW_REWRITE:
            case SparkSqlParser.KW_REVOKE:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_RLIKE:
            case SparkSqlParser.KW_REGEXP:
            case SparkSqlParser.KW_ROLE:
            case SparkSqlParser.KW_ROLES:
            case SparkSqlParser.KW_ROLLBACK:
            case SparkSqlParser.KW_ROLLUP:
            case SparkSqlParser.KW_ROW:
            case SparkSqlParser.KW_ROWS:
            case SparkSqlParser.KW_SECOND:
            case SparkSqlParser.KW_SECONDS:
            case SparkSqlParser.KW_SCHEMA:
            case SparkSqlParser.KW_SCHEMAS:
            case SparkSqlParser.KW_SELECT:
            case SparkSqlParser.KW_SEMI:
            case SparkSqlParser.KW_SEPARATED:
            case SparkSqlParser.KW_SERDE:
            case SparkSqlParser.KW_SERDEPROPERTIES:
            case SparkSqlParser.KW_SESSION_USER:
            case SparkSqlParser.KW_SET:
            case SparkSqlParser.KW_MINUS:
            case SparkSqlParser.KW_SETS:
            case SparkSqlParser.KW_SHORT:
            case SparkSqlParser.KW_SHOW:
            case SparkSqlParser.KW_SINGLE:
            case SparkSqlParser.KW_SKEWED:
            case SparkSqlParser.KW_SMALLINT:
            case SparkSqlParser.KW_SOME:
            case SparkSqlParser.KW_SORT:
            case SparkSqlParser.KW_SORTED:
            case SparkSqlParser.KW_SOURCE:
            case SparkSqlParser.KW_START:
            case SparkSqlParser.KW_STATISTICS:
            case SparkSqlParser.KW_STORED:
            case SparkSqlParser.KW_STRATIFY:
            case SparkSqlParser.KW_STRING:
            case SparkSqlParser.KW_STRUCT:
            case SparkSqlParser.KW_SUBSTR:
            case SparkSqlParser.KW_SUBSTRING:
            case SparkSqlParser.KW_SYNC:
            case SparkSqlParser.KW_SYSTEM:
            case SparkSqlParser.KW_SYSTEM_TIME:
            case SparkSqlParser.KW_SYSTEM_VERSION:
            case SparkSqlParser.KW_TABLE:
            case SparkSqlParser.KW_TABLES:
            case SparkSqlParser.KW_TABLESAMPLE:
            case SparkSqlParser.KW_TARGET:
            case SparkSqlParser.KW_TBLPROPERTIES:
            case SparkSqlParser.KW_TEMPORARY:
            case SparkSqlParser.KW_TERMINATED:
            case SparkSqlParser.KW_THEN:
            case SparkSqlParser.KW_TIME:
            case SparkSqlParser.KW_TIMEDIFF:
            case SparkSqlParser.KW_TIMESTAMP:
            case SparkSqlParser.KW_TIMESTAMP_LTZ:
            case SparkSqlParser.KW_TIMESTAMP_NTZ:
            case SparkSqlParser.KW_TIMESTAMPADD:
            case SparkSqlParser.KW_TIMESTAMPDIFF:
            case SparkSqlParser.KW_TINYINT:
            case SparkSqlParser.KW_TO:
            case SparkSqlParser.KW_TOUCH:
            case SparkSqlParser.KW_TRAILING:
            case SparkSqlParser.KW_TRANSACTION:
            case SparkSqlParser.KW_TRANSACTIONS:
            case SparkSqlParser.KW_TRANSFORM:
            case SparkSqlParser.KW_TRIM:
            case SparkSqlParser.KW_TRUE:
            case SparkSqlParser.KW_TRUNCATE:
            case SparkSqlParser.KW_TRY_CAST:
            case SparkSqlParser.KW_TYPE:
            case SparkSqlParser.KW_UNARCHIVE:
            case SparkSqlParser.KW_UNBOUNDED:
            case SparkSqlParser.KW_UNCACHE:
            case SparkSqlParser.KW_UNION:
            case SparkSqlParser.KW_UNIQUE:
            case SparkSqlParser.KW_UNKNOWN:
            case SparkSqlParser.KW_UNLOCK:
            case SparkSqlParser.KW_UNPIVOT:
            case SparkSqlParser.KW_UNSET:
            case SparkSqlParser.KW_UPDATE:
            case SparkSqlParser.KW_USE:
            case SparkSqlParser.KW_USER:
            case SparkSqlParser.KW_USING:
            case SparkSqlParser.KW_VALUES:
            case SparkSqlParser.KW_VARCHAR:
            case SparkSqlParser.KW_VAR:
            case SparkSqlParser.KW_VARIABLE:
            case SparkSqlParser.KW_VERSION:
            case SparkSqlParser.KW_VIEW:
            case SparkSqlParser.KW_VIEWS:
            case SparkSqlParser.KW_VOID:
            case SparkSqlParser.KW_WEEK:
            case SparkSqlParser.KW_WEEKS:
            case SparkSqlParser.KW_WHEN:
            case SparkSqlParser.KW_WHERE:
            case SparkSqlParser.KW_WINDOW:
            case SparkSqlParser.KW_WITH:
            case SparkSqlParser.KW_WITHIN:
            case SparkSqlParser.KW_YEAR:
            case SparkSqlParser.KW_YEARS:
            case SparkSqlParser.KW_ZONE:
            case SparkSqlParser.KW_ZORDER:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
            case SparkSqlParser.IDENTIFIER:
            case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2460;
                localContext._identifier = this.identifier();
                localContext._identifiers.push(localContext._identifier);
                }
                break;
            case SparkSqlParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2461;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2462;
                localContext._identifier = this.identifier();
                localContext._identifiers.push(localContext._identifier);
                this.state = 2467;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2463;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2464;
                    localContext._identifier = this.identifier();
                    localContext._identifiers.push(localContext._identifier);
                    }
                    }
                    this.state = 2469;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2470;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotValue(): PivotValueContext {
        let localContext = new PivotValueContext(this.context, this.state);
        this.enterRule(localContext, 164, SparkSqlParser.RULE_pivotValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2474;
            this.expression();
            this.state = 2479;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & 3073) !== 0)) {
                {
                this.state = 2476;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 305, this.context) ) {
                case 1:
                    {
                    this.state = 2475;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2478;
                this.identifier();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotClause(): UnpivotClauseContext {
        let localContext = new UnpivotClauseContext(this.context, this.state);
        this.enterRule(localContext, 166, SparkSqlParser.RULE_unpivotClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2481;
            this.match(SparkSqlParser.KW_UNPIVOT);
            this.state = 2483;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 104 || _la === 141) {
                {
                this.state = 2482;
                localContext._nullOperator = this.unpivotNullClause();
                }
            }

            this.state = 2485;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2486;
            localContext._operator = this.unpivotOperator();
            this.state = 2487;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2492;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 309, this.context) ) {
            case 1:
                {
                this.state = 2489;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 308, this.context) ) {
                case 1:
                    {
                    this.state = 2488;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2491;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotNullClause(): UnpivotNullClauseContext {
        let localContext = new UnpivotNullClauseContext(this.context, this.state);
        this.enterRule(localContext, 168, SparkSqlParser.RULE_unpivotNullClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2494;
            _la = this.tokenStream.LA(1);
            if(!(_la === 104 || _la === 141)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2495;
            this.match(SparkSqlParser.KW_NULLS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotOperator(): UnpivotOperatorContext {
        let localContext = new UnpivotOperatorContext(this.context, this.state);
        this.enterRule(localContext, 170, SparkSqlParser.RULE_unpivotOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2499;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ADD:
            case SparkSqlParser.KW_AFTER:
            case SparkSqlParser.KW_ALL:
            case SparkSqlParser.KW_ALTER:
            case SparkSqlParser.KW_ALWAYS:
            case SparkSqlParser.KW_ANALYZE:
            case SparkSqlParser.KW_AND:
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_ANY:
            case SparkSqlParser.KW_ANY_VALUE:
            case SparkSqlParser.KW_ARCHIVE:
            case SparkSqlParser.KW_ARRAY:
            case SparkSqlParser.KW_AS:
            case SparkSqlParser.KW_ASC:
            case SparkSqlParser.KW_AT:
            case SparkSqlParser.KW_AUTHORIZATION:
            case SparkSqlParser.KW_BETWEEN:
            case SparkSqlParser.KW_BIGINT:
            case SparkSqlParser.KW_BINARY:
            case SparkSqlParser.KW_BOOLEAN:
            case SparkSqlParser.KW_BOTH:
            case SparkSqlParser.KW_BUCKET:
            case SparkSqlParser.KW_BUCKETS:
            case SparkSqlParser.KW_BY:
            case SparkSqlParser.KW_BYTE:
            case SparkSqlParser.KW_CACHE:
            case SparkSqlParser.KW_CASCADE:
            case SparkSqlParser.KW_CASE:
            case SparkSqlParser.KW_CAST:
            case SparkSqlParser.KW_CATALOG:
            case SparkSqlParser.KW_CATALOGS:
            case SparkSqlParser.KW_CHANGE:
            case SparkSqlParser.KW_CHAR:
            case SparkSqlParser.KW_CHARACTER:
            case SparkSqlParser.KW_CHECK:
            case SparkSqlParser.KW_CLEAR:
            case SparkSqlParser.KW_CLUSTER:
            case SparkSqlParser.KW_CLUSTERED:
            case SparkSqlParser.KW_CODEGEN:
            case SparkSqlParser.KW_COLLATE:
            case SparkSqlParser.KW_COLLECTION:
            case SparkSqlParser.KW_COLUMN:
            case SparkSqlParser.KW_COLUMNS:
            case SparkSqlParser.KW_COMMENT:
            case SparkSqlParser.KW_COMMIT:
            case SparkSqlParser.KW_COMPACT:
            case SparkSqlParser.KW_COMPACTIONS:
            case SparkSqlParser.KW_COMPUTE:
            case SparkSqlParser.KW_CONCATENATE:
            case SparkSqlParser.KW_CONSTRAINT:
            case SparkSqlParser.KW_COST:
            case SparkSqlParser.KW_CREATE:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_CUBE:
            case SparkSqlParser.KW_CURRENT:
            case SparkSqlParser.KW_CURRENT_DATE:
            case SparkSqlParser.KW_CURRENT_TIME:
            case SparkSqlParser.KW_CURRENT_TIMESTAMP:
            case SparkSqlParser.KW_CURRENT_USER:
            case SparkSqlParser.KW_DAY:
            case SparkSqlParser.KW_DAYS:
            case SparkSqlParser.KW_DAYOFYEAR:
            case SparkSqlParser.KW_DATA:
            case SparkSqlParser.KW_DATE:
            case SparkSqlParser.KW_DATABASE:
            case SparkSqlParser.KW_DATABASES:
            case SparkSqlParser.KW_DATEADD:
            case SparkSqlParser.KW_DATE_ADD:
            case SparkSqlParser.KW_DATEDIFF:
            case SparkSqlParser.KW_DATE_DIFF:
            case SparkSqlParser.KW_DBPROPERTIES:
            case SparkSqlParser.KW_DEC:
            case SparkSqlParser.KW_DECIMAL:
            case SparkSqlParser.KW_DECLARE:
            case SparkSqlParser.KW_DEFAULT:
            case SparkSqlParser.KW_DEFINED:
            case SparkSqlParser.KW_DELETE:
            case SparkSqlParser.KW_DELIMITED:
            case SparkSqlParser.KW_DESC:
            case SparkSqlParser.KW_DESCRIBE:
            case SparkSqlParser.KW_DFS:
            case SparkSqlParser.KW_DIRECTORIES:
            case SparkSqlParser.KW_DIRECTORY:
            case SparkSqlParser.KW_DISABLE:
            case SparkSqlParser.KW_DISTINCT:
            case SparkSqlParser.KW_DISTRIBUTE:
            case SparkSqlParser.KW_DIV:
            case SparkSqlParser.KW_DOUBLE:
            case SparkSqlParser.KW_DROP:
            case SparkSqlParser.KW_ELSE:
            case SparkSqlParser.KW_ENABLE:
            case SparkSqlParser.KW_END:
            case SparkSqlParser.KW_ESCAPE:
            case SparkSqlParser.KW_ESCAPED:
            case SparkSqlParser.KW_EXCEPT:
            case SparkSqlParser.KW_EXCHANGE:
            case SparkSqlParser.KW_EXCLUDE:
            case SparkSqlParser.KW_EXISTS:
            case SparkSqlParser.KW_EXPLAIN:
            case SparkSqlParser.KW_EXPORT:
            case SparkSqlParser.KW_EXTENDED:
            case SparkSqlParser.KW_EXTERNAL:
            case SparkSqlParser.KW_EXTRACT:
            case SparkSqlParser.KW_FALSE:
            case SparkSqlParser.KW_FETCH:
            case SparkSqlParser.KW_FIELDS:
            case SparkSqlParser.KW_FILTER:
            case SparkSqlParser.KW_FILEFORMAT:
            case SparkSqlParser.KW_FIRST:
            case SparkSqlParser.KW_FLOAT:
            case SparkSqlParser.KW_FOLLOWING:
            case SparkSqlParser.KW_FOR:
            case SparkSqlParser.KW_FOREIGN:
            case SparkSqlParser.KW_FORMAT:
            case SparkSqlParser.KW_FORMATTED:
            case SparkSqlParser.KW_FROM:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_FUNCTION:
            case SparkSqlParser.KW_FUNCTIONS:
            case SparkSqlParser.KW_GENERATED:
            case SparkSqlParser.KW_GLOBAL:
            case SparkSqlParser.KW_GRANT:
            case SparkSqlParser.KW_GROUP:
            case SparkSqlParser.KW_GROUPING:
            case SparkSqlParser.KW_HAVING:
            case SparkSqlParser.KW_BINARY_HEX:
            case SparkSqlParser.KW_HOUR:
            case SparkSqlParser.KW_HOURS:
            case SparkSqlParser.KW_IDENTIFIER:
            case SparkSqlParser.KW_IF:
            case SparkSqlParser.KW_IGNORE:
            case SparkSqlParser.KW_IMPORT:
            case SparkSqlParser.KW_IN:
            case SparkSqlParser.KW_INCLUDE:
            case SparkSqlParser.KW_INDEX:
            case SparkSqlParser.KW_INDEXES:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_INPATH:
            case SparkSqlParser.KW_INPUTFORMAT:
            case SparkSqlParser.KW_INSERT:
            case SparkSqlParser.KW_INTERSECT:
            case SparkSqlParser.KW_INTERVAL:
            case SparkSqlParser.KW_INT:
            case SparkSqlParser.KW_INTEGER:
            case SparkSqlParser.KW_INTO:
            case SparkSqlParser.KW_IS:
            case SparkSqlParser.KW_ITEMS:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_KEYS:
            case SparkSqlParser.KW_LAST:
            case SparkSqlParser.KW_LATERAL:
            case SparkSqlParser.KW_LAZY:
            case SparkSqlParser.KW_LEADING:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_LIKE:
            case SparkSqlParser.KW_ILIKE:
            case SparkSqlParser.KW_LIMIT:
            case SparkSqlParser.KW_LINES:
            case SparkSqlParser.KW_LIST:
            case SparkSqlParser.KW_LOAD:
            case SparkSqlParser.KW_LOCAL:
            case SparkSqlParser.KW_LOCATION:
            case SparkSqlParser.KW_LOCK:
            case SparkSqlParser.KW_LOCKS:
            case SparkSqlParser.KW_LOGICAL:
            case SparkSqlParser.KW_LONG:
            case SparkSqlParser.KW_MACRO:
            case SparkSqlParser.KW_MATERIALIZED:
            case SparkSqlParser.KW_MAP:
            case SparkSqlParser.KW_MATCHED:
            case SparkSqlParser.KW_MERGE:
            case SparkSqlParser.KW_MICROSECOND:
            case SparkSqlParser.KW_MICROSECONDS:
            case SparkSqlParser.KW_MILLISECOND:
            case SparkSqlParser.KW_MILLISECONDS:
            case SparkSqlParser.KW_MINUTE:
            case SparkSqlParser.KW_MINUTES:
            case SparkSqlParser.KW_MONTH:
            case SparkSqlParser.KW_MONTHS:
            case SparkSqlParser.KW_MSCK:
            case SparkSqlParser.KW_NAME:
            case SparkSqlParser.KW_NAMESPACE:
            case SparkSqlParser.KW_NAMESPACES:
            case SparkSqlParser.KW_NANOSECOND:
            case SparkSqlParser.KW_NANOSECONDS:
            case SparkSqlParser.KW_NATURAL:
            case SparkSqlParser.KW_NO:
            case SparkSqlParser.KW_NOT:
            case SparkSqlParser.KW_NULL:
            case SparkSqlParser.KW_NULLS:
            case SparkSqlParser.KW_NUMERIC:
            case SparkSqlParser.KW_OF:
            case SparkSqlParser.KW_OFFSET:
            case SparkSqlParser.KW_ON:
            case SparkSqlParser.KW_ONLY:
            case SparkSqlParser.KW_OPTIMIZE:
            case SparkSqlParser.KW_OPTION:
            case SparkSqlParser.KW_OPTIONS:
            case SparkSqlParser.KW_OR:
            case SparkSqlParser.KW_ORDER:
            case SparkSqlParser.KW_OUT:
            case SparkSqlParser.KW_OUTER:
            case SparkSqlParser.KW_OUTPUTFORMAT:
            case SparkSqlParser.KW_OVER:
            case SparkSqlParser.KW_OVERLAPS:
            case SparkSqlParser.KW_OVERLAY:
            case SparkSqlParser.KW_OVERWRITE:
            case SparkSqlParser.KW_PARTITION:
            case SparkSqlParser.KW_PARTITIONED:
            case SparkSqlParser.KW_PARTITIONS:
            case SparkSqlParser.KW_PERCENTILE_CONT:
            case SparkSqlParser.KW_PERCENTILE_DISC:
            case SparkSqlParser.KW_PERCENTLIT:
            case SparkSqlParser.KW_PIVOT:
            case SparkSqlParser.KW_PLACING:
            case SparkSqlParser.KW_POSITION:
            case SparkSqlParser.KW_PRECEDING:
            case SparkSqlParser.KW_PRIMARY:
            case SparkSqlParser.KW_PRINCIPALS:
            case SparkSqlParser.KW_PROPERTIES:
            case SparkSqlParser.KW_PURGE:
            case SparkSqlParser.KW_QUARTER:
            case SparkSqlParser.KW_QUERY:
            case SparkSqlParser.KW_RANGE:
            case SparkSqlParser.KW_REAL:
            case SparkSqlParser.KW_RECORDREADER:
            case SparkSqlParser.KW_RECORDWRITER:
            case SparkSqlParser.KW_RECOVER:
            case SparkSqlParser.KW_REDUCE:
            case SparkSqlParser.KW_REFERENCES:
            case SparkSqlParser.KW_REFRESH:
            case SparkSqlParser.KW_RENAME:
            case SparkSqlParser.KW_REPAIR:
            case SparkSqlParser.KW_REPEATABLE:
            case SparkSqlParser.KW_REPLACE:
            case SparkSqlParser.KW_RESET:
            case SparkSqlParser.KW_RESPECT:
            case SparkSqlParser.KW_RESTRICT:
            case SparkSqlParser.KW_REWRITE:
            case SparkSqlParser.KW_REVOKE:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_RLIKE:
            case SparkSqlParser.KW_REGEXP:
            case SparkSqlParser.KW_ROLE:
            case SparkSqlParser.KW_ROLES:
            case SparkSqlParser.KW_ROLLBACK:
            case SparkSqlParser.KW_ROLLUP:
            case SparkSqlParser.KW_ROW:
            case SparkSqlParser.KW_ROWS:
            case SparkSqlParser.KW_SECOND:
            case SparkSqlParser.KW_SECONDS:
            case SparkSqlParser.KW_SCHEMA:
            case SparkSqlParser.KW_SCHEMAS:
            case SparkSqlParser.KW_SELECT:
            case SparkSqlParser.KW_SEMI:
            case SparkSqlParser.KW_SEPARATED:
            case SparkSqlParser.KW_SERDE:
            case SparkSqlParser.KW_SERDEPROPERTIES:
            case SparkSqlParser.KW_SESSION_USER:
            case SparkSqlParser.KW_SET:
            case SparkSqlParser.KW_MINUS:
            case SparkSqlParser.KW_SETS:
            case SparkSqlParser.KW_SHORT:
            case SparkSqlParser.KW_SHOW:
            case SparkSqlParser.KW_SINGLE:
            case SparkSqlParser.KW_SKEWED:
            case SparkSqlParser.KW_SMALLINT:
            case SparkSqlParser.KW_SOME:
            case SparkSqlParser.KW_SORT:
            case SparkSqlParser.KW_SORTED:
            case SparkSqlParser.KW_SOURCE:
            case SparkSqlParser.KW_START:
            case SparkSqlParser.KW_STATISTICS:
            case SparkSqlParser.KW_STORED:
            case SparkSqlParser.KW_STRATIFY:
            case SparkSqlParser.KW_STRING:
            case SparkSqlParser.KW_STRUCT:
            case SparkSqlParser.KW_SUBSTR:
            case SparkSqlParser.KW_SUBSTRING:
            case SparkSqlParser.KW_SYNC:
            case SparkSqlParser.KW_SYSTEM:
            case SparkSqlParser.KW_SYSTEM_TIME:
            case SparkSqlParser.KW_SYSTEM_VERSION:
            case SparkSqlParser.KW_TABLE:
            case SparkSqlParser.KW_TABLES:
            case SparkSqlParser.KW_TABLESAMPLE:
            case SparkSqlParser.KW_TARGET:
            case SparkSqlParser.KW_TBLPROPERTIES:
            case SparkSqlParser.KW_TEMPORARY:
            case SparkSqlParser.KW_TERMINATED:
            case SparkSqlParser.KW_THEN:
            case SparkSqlParser.KW_TIME:
            case SparkSqlParser.KW_TIMEDIFF:
            case SparkSqlParser.KW_TIMESTAMP:
            case SparkSqlParser.KW_TIMESTAMP_LTZ:
            case SparkSqlParser.KW_TIMESTAMP_NTZ:
            case SparkSqlParser.KW_TIMESTAMPADD:
            case SparkSqlParser.KW_TIMESTAMPDIFF:
            case SparkSqlParser.KW_TINYINT:
            case SparkSqlParser.KW_TO:
            case SparkSqlParser.KW_TOUCH:
            case SparkSqlParser.KW_TRAILING:
            case SparkSqlParser.KW_TRANSACTION:
            case SparkSqlParser.KW_TRANSACTIONS:
            case SparkSqlParser.KW_TRANSFORM:
            case SparkSqlParser.KW_TRIM:
            case SparkSqlParser.KW_TRUE:
            case SparkSqlParser.KW_TRUNCATE:
            case SparkSqlParser.KW_TRY_CAST:
            case SparkSqlParser.KW_TYPE:
            case SparkSqlParser.KW_UNARCHIVE:
            case SparkSqlParser.KW_UNBOUNDED:
            case SparkSqlParser.KW_UNCACHE:
            case SparkSqlParser.KW_UNION:
            case SparkSqlParser.KW_UNIQUE:
            case SparkSqlParser.KW_UNKNOWN:
            case SparkSqlParser.KW_UNLOCK:
            case SparkSqlParser.KW_UNPIVOT:
            case SparkSqlParser.KW_UNSET:
            case SparkSqlParser.KW_UPDATE:
            case SparkSqlParser.KW_USE:
            case SparkSqlParser.KW_USER:
            case SparkSqlParser.KW_USING:
            case SparkSqlParser.KW_VALUES:
            case SparkSqlParser.KW_VARCHAR:
            case SparkSqlParser.KW_VAR:
            case SparkSqlParser.KW_VARIABLE:
            case SparkSqlParser.KW_VERSION:
            case SparkSqlParser.KW_VIEW:
            case SparkSqlParser.KW_VIEWS:
            case SparkSqlParser.KW_VOID:
            case SparkSqlParser.KW_WEEK:
            case SparkSqlParser.KW_WEEKS:
            case SparkSqlParser.KW_WHEN:
            case SparkSqlParser.KW_WHERE:
            case SparkSqlParser.KW_WINDOW:
            case SparkSqlParser.KW_WITH:
            case SparkSqlParser.KW_WITHIN:
            case SparkSqlParser.KW_YEAR:
            case SparkSqlParser.KW_YEARS:
            case SparkSqlParser.KW_ZONE:
            case SparkSqlParser.KW_ZORDER:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
            case SparkSqlParser.IDENTIFIER:
            case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                {
                this.state = 2497;
                this.unpivotSingleValueColumnClause();
                }
                break;
            case SparkSqlParser.LEFT_PAREN:
                {
                this.state = 2498;
                this.unpivotMultiValueColumnClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotSingleValueColumnClause(): UnpivotSingleValueColumnClauseContext {
        let localContext = new UnpivotSingleValueColumnClauseContext(this.context, this.state);
        this.enterRule(localContext, 172, SparkSqlParser.RULE_unpivotSingleValueColumnClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2501;
            this.unpivotValueColumn();
            this.state = 2502;
            this.match(SparkSqlParser.KW_FOR);
            this.state = 2503;
            this.unpivotNameColumn();
            this.state = 2504;
            this.match(SparkSqlParser.KW_IN);
            this.state = 2505;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2506;
            localContext._unpivotColumnAndAlias = this.unpivotColumnAndAlias();
            localContext._unpivotColumns.push(localContext._unpivotColumnAndAlias);
            this.state = 2511;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2507;
                this.match(SparkSqlParser.COMMA);
                this.state = 2508;
                localContext._unpivotColumnAndAlias = this.unpivotColumnAndAlias();
                localContext._unpivotColumns.push(localContext._unpivotColumnAndAlias);
                }
                }
                this.state = 2513;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2514;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotMultiValueColumnClause(): UnpivotMultiValueColumnClauseContext {
        let localContext = new UnpivotMultiValueColumnClauseContext(this.context, this.state);
        this.enterRule(localContext, 174, SparkSqlParser.RULE_unpivotMultiValueColumnClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2516;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2517;
            localContext._unpivotValueColumn = this.unpivotValueColumn();
            localContext._unpivotValueColumns.push(localContext._unpivotValueColumn);
            this.state = 2522;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2518;
                this.match(SparkSqlParser.COMMA);
                this.state = 2519;
                localContext._unpivotValueColumn = this.unpivotValueColumn();
                localContext._unpivotValueColumns.push(localContext._unpivotValueColumn);
                }
                }
                this.state = 2524;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2525;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2526;
            this.match(SparkSqlParser.KW_FOR);
            this.state = 2527;
            this.unpivotNameColumn();
            this.state = 2528;
            this.match(SparkSqlParser.KW_IN);
            this.state = 2529;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2530;
            localContext._unpivotColumnSet = this.unpivotColumnSet();
            localContext._unpivotColumnSets.push(localContext._unpivotColumnSet);
            this.state = 2535;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2531;
                this.match(SparkSqlParser.COMMA);
                this.state = 2532;
                localContext._unpivotColumnSet = this.unpivotColumnSet();
                localContext._unpivotColumnSets.push(localContext._unpivotColumnSet);
                }
                }
                this.state = 2537;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2538;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotColumnSet(): UnpivotColumnSetContext {
        let localContext = new UnpivotColumnSetContext(this.context, this.state);
        this.enterRule(localContext, 176, SparkSqlParser.RULE_unpivotColumnSet);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2540;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2541;
            localContext._unpivotColumn = this.unpivotColumn();
            localContext._unpivotColumns.push(localContext._unpivotColumn);
            this.state = 2546;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2542;
                this.match(SparkSqlParser.COMMA);
                this.state = 2543;
                localContext._unpivotColumn = this.unpivotColumn();
                localContext._unpivotColumns.push(localContext._unpivotColumn);
                }
                }
                this.state = 2548;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2549;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2551;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & 3073) !== 0)) {
                {
                this.state = 2550;
                this.unpivotAlias();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotValueColumn(): UnpivotValueColumnContext {
        let localContext = new UnpivotValueColumnContext(this.context, this.state);
        this.enterRule(localContext, 178, SparkSqlParser.RULE_unpivotValueColumn);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2553;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotNameColumn(): UnpivotNameColumnContext {
        let localContext = new UnpivotNameColumnContext(this.context, this.state);
        this.enterRule(localContext, 180, SparkSqlParser.RULE_unpivotNameColumn);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2555;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotColumnAndAlias(): UnpivotColumnAndAliasContext {
        let localContext = new UnpivotColumnAndAliasContext(this.context, this.state);
        this.enterRule(localContext, 182, SparkSqlParser.RULE_unpivotColumnAndAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2557;
            this.unpivotColumn();
            this.state = 2559;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & 3073) !== 0)) {
                {
                this.state = 2558;
                this.unpivotAlias();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotColumn(): UnpivotColumnContext {
        let localContext = new UnpivotColumnContext(this.context, this.state);
        this.enterRule(localContext, 184, SparkSqlParser.RULE_unpivotColumn);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2561;
            this.multipartIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotAlias(): UnpivotAliasContext {
        let localContext = new UnpivotAliasContext(this.context, this.state);
        this.enterRule(localContext, 186, SparkSqlParser.RULE_unpivotAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2564;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 317, this.context) ) {
            case 1:
                {
                this.state = 2563;
                this.match(SparkSqlParser.KW_AS);
                }
                break;
            }
            this.state = 2566;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifNotExists(): IfNotExistsContext {
        let localContext = new IfNotExistsContext(this.context, this.state);
        this.enterRule(localContext, 188, SparkSqlParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2568;
            this.match(SparkSqlParser.KW_IF);
            this.state = 2569;
            this.match(SparkSqlParser.KW_NOT);
            this.state = 2570;
            this.match(SparkSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExists(): IfExistsContext {
        let localContext = new IfExistsContext(this.context, this.state);
        this.enterRule(localContext, 190, SparkSqlParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2572;
            this.match(SparkSqlParser.KW_IF);
            this.state = 2573;
            this.match(SparkSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lateralView(): LateralViewContext {
        let localContext = new LateralViewContext(this.context, this.state);
        this.enterRule(localContext, 192, SparkSqlParser.RULE_lateralView);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2575;
            this.match(SparkSqlParser.KW_LATERAL);
            this.state = 2576;
            this.match(SparkSqlParser.KW_VIEW);
            this.state = 2578;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
            case 1:
                {
                this.state = 2577;
                this.match(SparkSqlParser.KW_OUTER);
                }
                break;
            }
            this.state = 2580;
            this.viewName();
            this.state = 2581;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2590;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 1073678415) !== 0)) {
                {
                this.state = 2582;
                this.expression();
                this.state = 2587;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2583;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2584;
                    this.expression();
                    }
                    }
                    this.state = 2589;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2592;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2593;
            this.tableAlias();
            this.state = 2605;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 323, this.context) ) {
            case 1:
                {
                this.state = 2595;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 321, this.context) ) {
                case 1:
                    {
                    this.state = 2594;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2597;
                localContext._identifier = this.identifier();
                localContext._colName.push(localContext._identifier);
                this.state = 2602;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 322, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2598;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2599;
                        localContext._identifier = this.identifier();
                        localContext._colName.push(localContext._identifier);
                        }
                        }
                    }
                    this.state = 2604;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 322, this.context);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setQuantifier(): SetQuantifierContext {
        let localContext = new SetQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 194, SparkSqlParser.RULE_setQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2607;
            _la = this.tokenStream.LA(1);
            if(!(_la === 10 || _la === 92)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation(): RelationContext {
        let localContext = new RelationContext(this.context, this.state);
        this.enterRule(localContext, 196, SparkSqlParser.RULE_relation);
        try {
            let alternative: number;
            this.state = 2620;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 326, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2610;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 324, this.context) ) {
                case 1:
                    {
                    this.state = 2609;
                    this.match(SparkSqlParser.KW_LATERAL);
                    }
                    break;
                }
                this.state = 2612;
                this.relationPrimary();
                this.state = 2616;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 325, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2613;
                        this.relationExtension();
                        }
                        }
                    }
                    this.state = 2618;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 325, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2619;
                this.tableName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationExtension(): RelationExtensionContext {
        let localContext = new RelationExtensionContext(this.context, this.state);
        this.enterRule(localContext, 198, SparkSqlParser.RULE_relationExtension);
        try {
            this.state = 2625;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_NATURAL:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_SEMI:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2622;
                this.joinRelation();
                }
                break;
            case SparkSqlParser.KW_PIVOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2623;
                this.pivotClause();
                }
                break;
            case SparkSqlParser.KW_UNPIVOT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2624;
                this.unpivotClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinRelation(): JoinRelationContext {
        let localContext = new JoinRelationContext(this.context, this.state);
        this.enterRule(localContext, 200, SparkSqlParser.RULE_joinRelation);
        try {
            this.state = 2644;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_SEMI:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 2627;
                this.joinType();
                }
                this.state = 2628;
                this.match(SparkSqlParser.KW_JOIN);
                this.state = 2630;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 328, this.context) ) {
                case 1:
                    {
                    this.state = 2629;
                    this.match(SparkSqlParser.KW_LATERAL);
                    }
                    break;
                }
                this.state = 2632;
                localContext._right = this.relationPrimary();
                this.state = 2634;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 329, this.context) ) {
                case 1:
                    {
                    this.state = 2633;
                    this.joinCriteria();
                    }
                    break;
                }
                }
                break;
            case SparkSqlParser.KW_NATURAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2636;
                this.match(SparkSqlParser.KW_NATURAL);
                this.state = 2637;
                this.joinType();
                this.state = 2638;
                this.match(SparkSqlParser.KW_JOIN);
                this.state = 2640;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 330, this.context) ) {
                case 1:
                    {
                    this.state = 2639;
                    this.match(SparkSqlParser.KW_LATERAL);
                    }
                    break;
                }
                this.state = 2642;
                localContext._right = this.relationPrimary();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinType(): JoinTypeContext {
        let localContext = new JoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 202, SparkSqlParser.RULE_joinType);
        let _la: number;
        try {
            this.state = 2670;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 338, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2647;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 2646;
                    this.match(SparkSqlParser.KW_INNER);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2649;
                this.match(SparkSqlParser.KW_CROSS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2650;
                this.match(SparkSqlParser.KW_LEFT);
                this.state = 2652;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 210) {
                    {
                    this.state = 2651;
                    this.match(SparkSqlParser.KW_OUTER);
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2655;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 161) {
                    {
                    this.state = 2654;
                    this.match(SparkSqlParser.KW_LEFT);
                    }
                }

                this.state = 2657;
                this.match(SparkSqlParser.KW_SEMI);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2658;
                this.match(SparkSqlParser.KW_RIGHT);
                this.state = 2660;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 210) {
                    {
                    this.state = 2659;
                    this.match(SparkSqlParser.KW_OUTER);
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2662;
                this.match(SparkSqlParser.KW_FULL);
                this.state = 2664;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 210) {
                    {
                    this.state = 2663;
                    this.match(SparkSqlParser.KW_OUTER);
                    }
                }

                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2667;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 161) {
                    {
                    this.state = 2666;
                    this.match(SparkSqlParser.KW_LEFT);
                    }
                }

                this.state = 2669;
                this.match(SparkSqlParser.KW_ANTI);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCriteria(): JoinCriteriaContext {
        let localContext = new JoinCriteriaContext(this.context, this.state);
        this.enterRule(localContext, 204, SparkSqlParser.RULE_joinCriteria);
        try {
            this.state = 2676;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2672;
                this.match(SparkSqlParser.KW_ON);
                this.state = 2673;
                this.booleanExpression(0);
                }
                break;
            case SparkSqlParser.KW_USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2674;
                this.match(SparkSqlParser.KW_USING);
                this.state = 2675;
                this.identifierList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sample(): SampleContext {
        let localContext = new SampleContext(this.context, this.state);
        this.enterRule(localContext, 206, SparkSqlParser.RULE_sample);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2678;
            this.match(SparkSqlParser.KW_TABLESAMPLE);
            this.state = 2679;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2681;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 1073678415) !== 0)) {
                {
                this.state = 2680;
                this.sampleMethod();
                }
            }

            this.state = 2683;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2688;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 341, this.context) ) {
            case 1:
                {
                this.state = 2684;
                this.match(SparkSqlParser.KW_REPEATABLE);
                this.state = 2685;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2686;
                localContext._seed = this.match(SparkSqlParser.INTEGER_VALUE);
                this.state = 2687;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleMethod(): SampleMethodContext {
        let localContext = new SampleMethodContext(this.context, this.state);
        this.enterRule(localContext, 208, SparkSqlParser.RULE_sampleMethod);
        let _la: number;
        try {
            this.state = 2714;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 345, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2691;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 2690;
                    localContext._negativeSign = this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 2693;
                localContext._percentage = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 381 || _la === 383)) {
                    localContext._percentage = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2694;
                this.match(SparkSqlParser.KW_PERCENTLIT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2695;
                this.expression();
                this.state = 2696;
                this.match(SparkSqlParser.KW_ROWS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2698;
                localContext._sampleType = this.match(SparkSqlParser.KW_BUCKET);
                this.state = 2699;
                localContext._numerator = this.match(SparkSqlParser.INTEGER_VALUE);
                this.state = 2700;
                this.match(SparkSqlParser.KW_OUT);
                this.state = 2701;
                this.match(SparkSqlParser.KW_OF);
                this.state = 2702;
                localContext._denominator = this.match(SparkSqlParser.INTEGER_VALUE);
                this.state = 2711;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 202) {
                    {
                    this.state = 2703;
                    this.match(SparkSqlParser.KW_ON);
                    this.state = 2709;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 343, this.context) ) {
                    case 1:
                        {
                        this.state = 2704;
                        this.identifier();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2705;
                        this.qualifiedName();
                        this.state = 2706;
                        this.match(SparkSqlParser.LEFT_PAREN);
                        this.state = 2707;
                        this.match(SparkSqlParser.RIGHT_PAREN);
                        }
                        break;
                    }
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2713;
                localContext._bytes = this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierList(): IdentifierListContext {
        let localContext = new IdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 210, SparkSqlParser.RULE_identifierList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2716;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2717;
            this.identifierSeq();
            this.state = 2718;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierSeq(): IdentifierSeqContext {
        let localContext = new IdentifierSeqContext(this.context, this.state);
        this.enterRule(localContext, 212, SparkSqlParser.RULE_identifierSeq);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2720;
            localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
            localContext._ident.push(localContext._errorCapturingIdentifier);
            this.state = 2725;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 346, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2721;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2722;
                    localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                    localContext._ident.push(localContext._errorCapturingIdentifier);
                    }
                    }
                }
                this.state = 2727;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 346, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderedIdentifierList(): OrderedIdentifierListContext {
        let localContext = new OrderedIdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 214, SparkSqlParser.RULE_orderedIdentifierList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2728;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2729;
            this.orderedIdentifier();
            this.state = 2734;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2730;
                this.match(SparkSqlParser.COMMA);
                this.state = 2731;
                this.orderedIdentifier();
                }
                }
                this.state = 2736;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2737;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderedIdentifier(): OrderedIdentifierContext {
        let localContext = new OrderedIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 216, SparkSqlParser.RULE_orderedIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2739;
            localContext._ident = this.errorCapturingIdentifier();
            this.state = 2741;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 21 || _la === 86) {
                {
                this.state = 2740;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 21 || _la === 86)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierCommentList(): IdentifierCommentListContext {
        let localContext = new IdentifierCommentListContext(this.context, this.state);
        this.enterRule(localContext, 218, SparkSqlParser.RULE_identifierCommentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2743;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2744;
            this.identifierComment();
            this.state = 2749;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2745;
                this.match(SparkSqlParser.COMMA);
                this.state = 2746;
                this.identifierComment();
                }
                }
                this.state = 2751;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2752;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierComment(): IdentifierCommentContext {
        let localContext = new IdentifierCommentContext(this.context, this.state);
        this.enterRule(localContext, 220, SparkSqlParser.RULE_identifierComment);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2754;
            this.identifier();
            this.state = 2756;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 2755;
                this.commentSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationPrimary(): RelationPrimaryContext {
        let localContext = new RelationPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 222, SparkSqlParser.RULE_relationPrimary);
        try {
            this.state = 2785;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 355, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2758;
                this.identifierReference();
                this.state = 2760;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 351, this.context) ) {
                case 1:
                    {
                    this.state = 2759;
                    this.temporalClause();
                    }
                    break;
                }
                this.state = 2763;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 352, this.context) ) {
                case 1:
                    {
                    this.state = 2762;
                    this.sample();
                    }
                    break;
                }
                this.state = 2765;
                this.tableAlias();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2767;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2768;
                this.query();
                this.state = 2769;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2771;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 353, this.context) ) {
                case 1:
                    {
                    this.state = 2770;
                    this.sample();
                    }
                    break;
                }
                this.state = 2773;
                this.tableAlias();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2775;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2776;
                this.relation();
                this.state = 2777;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2779;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 354, this.context) ) {
                case 1:
                    {
                    this.state = 2778;
                    this.sample();
                    }
                    break;
                }
                this.state = 2781;
                this.tableAlias();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2783;
                this.inlineTable();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2784;
                this.functionTable();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inlineTable(): InlineTableContext {
        let localContext = new InlineTableContext(this.context, this.state);
        this.enterRule(localContext, 224, SparkSqlParser.RULE_inlineTable);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2787;
            this.match(SparkSqlParser.KW_VALUES);
            this.state = 2788;
            this.expression();
            this.state = 2793;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 356, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2789;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2790;
                    this.expression();
                    }
                    }
                }
                this.state = 2795;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 356, this.context);
            }
            this.state = 2796;
            this.tableAlias();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext {
        let localContext = new FunctionTableSubqueryArgumentContext(this.context, this.state);
        this.enterRule(localContext, 226, SparkSqlParser.RULE_functionTableSubqueryArgument);
        let _la: number;
        try {
            this.state = 2817;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 360, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2798;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 2799;
                this.tableName();
                this.state = 2801;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 216 || _la === 345) {
                    {
                    this.state = 2800;
                    this.tableArgumentPartitioning();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2803;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 2804;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2805;
                this.tableName();
                this.state = 2806;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2808;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 216 || _la === 345) {
                    {
                    this.state = 2807;
                    this.tableArgumentPartitioning();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2810;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 2811;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2812;
                this.query();
                this.state = 2813;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2815;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 216 || _la === 345) {
                    {
                    this.state = 2814;
                    this.tableArgumentPartitioning();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgumentPartitioning(): TableArgumentPartitioningContext {
        let localContext = new TableArgumentPartitioningContext(this.context, this.state);
        this.enterRule(localContext, 228, SparkSqlParser.RULE_tableArgumentPartitioning);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2838;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_WITH:
                {
                {
                this.state = 2819;
                this.match(SparkSqlParser.KW_WITH);
                this.state = 2820;
                this.match(SparkSqlParser.KW_SINGLE);
                this.state = 2821;
                this.match(SparkSqlParser.KW_PARTITION);
                }
                }
                break;
            case SparkSqlParser.KW_DISTRIBUTE:
            case SparkSqlParser.KW_PARTITION:
                {
                {
                this.state = 2822;
                _la = this.tokenStream.LA(1);
                if(!(_la === 93 || _la === 216)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2823;
                this.match(SparkSqlParser.KW_BY);
                this.state = 2836;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 362, this.context) ) {
                case 1:
                    {
                    {
                    {
                    this.state = 2824;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2825;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    this.state = 2830;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2826;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2827;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        }
                        }
                        this.state = 2832;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2833;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 2835;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    }
                    break;
                }
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2856;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 208 || _la === 277) {
                {
                this.state = 2840;
                _la = this.tokenStream.LA(1);
                if(!(_la === 208 || _la === 277)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2841;
                this.match(SparkSqlParser.KW_BY);
                {
                this.state = 2854;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 365, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 2842;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2843;
                    this.sortItem();
                    this.state = 2848;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2844;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2845;
                        this.sortItem();
                        }
                        }
                        this.state = 2850;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2851;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 2853;
                    this.sortItem();
                    }
                    break;
                }
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableNamedArgumentExpression(): FunctionTableNamedArgumentExpressionContext {
        let localContext = new FunctionTableNamedArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 230, SparkSqlParser.RULE_functionTableNamedArgumentExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2858;
            localContext._key = this.identifier();
            this.state = 2859;
            this.match(SparkSqlParser.FAT_ARROW);
            this.state = 2860;
            localContext._table = this.functionTableSubqueryArgument();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableReferenceArgument(): FunctionTableReferenceArgumentContext {
        let localContext = new FunctionTableReferenceArgumentContext(this.context, this.state);
        this.enterRule(localContext, 232, SparkSqlParser.RULE_functionTableReferenceArgument);
        try {
            this.state = 2864;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 367, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2862;
                this.functionTableSubqueryArgument();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2863;
                this.functionTableNamedArgumentExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableArgument(): FunctionTableArgumentContext {
        let localContext = new FunctionTableArgumentContext(this.context, this.state);
        this.enterRule(localContext, 234, SparkSqlParser.RULE_functionTableArgument);
        try {
            this.state = 2868;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 368, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2866;
                this.functionTableReferenceArgument();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2867;
                this.functionArgument();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTable(): FunctionTableContext {
        let localContext = new FunctionTableContext(this.context, this.state);
        this.enterRule(localContext, 236, SparkSqlParser.RULE_functionTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2870;
            this.functionName();
            this.state = 2871;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2880;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 1073678415) !== 0)) {
                {
                this.state = 2872;
                this.functionTableArgument();
                this.state = 2877;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2873;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2874;
                    this.functionTableArgument();
                    }
                    }
                    this.state = 2879;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2882;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2883;
            this.tableAlias();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAlias(): TableAliasContext {
        let localContext = new TableAliasContext(this.context, this.state);
        this.enterRule(localContext, 238, SparkSqlParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2892;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 373, this.context) ) {
            case 1:
                {
                this.state = 2886;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 371, this.context) ) {
                case 1:
                    {
                    this.state = 2885;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2888;
                this.strictIdentifier();
                this.state = 2890;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 372, this.context) ) {
                case 1:
                    {
                    this.state = 2889;
                    this.identifierList();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormat(): RowFormatContext {
        let localContext = new RowFormatContext(this.context, this.state);
        this.enterRule(localContext, 240, SparkSqlParser.RULE_rowFormat);
        try {
            this.state = 2943;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 381, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2894;
                this.match(SparkSqlParser.KW_ROW);
                this.state = 2895;
                this.match(SparkSqlParser.KW_FORMAT);
                this.state = 2896;
                this.match(SparkSqlParser.KW_SERDE);
                this.state = 2897;
                localContext._name = this.stringLit();
                this.state = 2901;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 374, this.context) ) {
                case 1:
                    {
                    this.state = 2898;
                    this.match(SparkSqlParser.KW_WITH);
                    this.state = 2899;
                    this.match(SparkSqlParser.KW_SERDEPROPERTIES);
                    this.state = 2900;
                    localContext._props = this.propertyList();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2903;
                this.match(SparkSqlParser.KW_ROW);
                this.state = 2904;
                this.match(SparkSqlParser.KW_FORMAT);
                this.state = 2905;
                this.match(SparkSqlParser.KW_DELIMITED);
                this.state = 2915;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 376, this.context) ) {
                case 1:
                    {
                    this.state = 2906;
                    this.match(SparkSqlParser.KW_FIELDS);
                    this.state = 2907;
                    this.match(SparkSqlParser.KW_TERMINATED);
                    this.state = 2908;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 2909;
                    localContext._fieldsTerminatedBy = this.stringLit();
                    this.state = 2913;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 375, this.context) ) {
                    case 1:
                        {
                        this.state = 2910;
                        this.match(SparkSqlParser.KW_ESCAPED);
                        this.state = 2911;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 2912;
                        localContext._escapedBy = this.stringLit();
                        }
                        break;
                    }
                    }
                    break;
                }
                this.state = 2922;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 377, this.context) ) {
                case 1:
                    {
                    this.state = 2917;
                    this.match(SparkSqlParser.KW_COLLECTION);
                    this.state = 2918;
                    this.match(SparkSqlParser.KW_ITEMS);
                    this.state = 2919;
                    this.match(SparkSqlParser.KW_TERMINATED);
                    this.state = 2920;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 2921;
                    localContext._collectionItemsTerminatedBy = this.stringLit();
                    }
                    break;
                }
                this.state = 2929;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
                case 1:
                    {
                    this.state = 2924;
                    this.match(SparkSqlParser.KW_MAP);
                    this.state = 2925;
                    this.match(SparkSqlParser.KW_KEYS);
                    this.state = 2926;
                    this.match(SparkSqlParser.KW_TERMINATED);
                    this.state = 2927;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 2928;
                    localContext._keysTerminatedBy = this.stringLit();
                    }
                    break;
                }
                this.state = 2935;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 379, this.context) ) {
                case 1:
                    {
                    this.state = 2931;
                    this.match(SparkSqlParser.KW_LINES);
                    this.state = 2932;
                    this.match(SparkSqlParser.KW_TERMINATED);
                    this.state = 2933;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 2934;
                    localContext._linesSeparatedBy = this.stringLit();
                    }
                    break;
                }
                this.state = 2941;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 380, this.context) ) {
                case 1:
                    {
                    this.state = 2937;
                    this.match(SparkSqlParser.KW_NULL);
                    this.state = 2938;
                    this.match(SparkSqlParser.KW_DEFINED);
                    this.state = 2939;
                    this.match(SparkSqlParser.KW_AS);
                    this.state = 2940;
                    localContext._nullDefinedAs = this.stringLit();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierList(): MultipartIdentifierListContext {
        let localContext = new MultipartIdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 242, SparkSqlParser.RULE_multipartIdentifierList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2945;
            this.multipartIdentifier();
            this.state = 2950;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2946;
                this.match(SparkSqlParser.COMMA);
                this.state = 2947;
                this.multipartIdentifier();
                }
                }
                this.state = 2952;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        let localContext = new MultipartIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 244, SparkSqlParser.RULE_multipartIdentifier);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2953;
            localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
            localContext._parts.push(localContext._errorCapturingIdentifier);
            this.state = 2958;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 383, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2954;
                    this.match(SparkSqlParser.DOT);
                    this.state = 2955;
                    localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                    localContext._parts.push(localContext._errorCapturingIdentifier);
                    }
                    }
                }
                this.state = 2960;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 383, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierPropertyList(): MultipartIdentifierPropertyListContext {
        let localContext = new MultipartIdentifierPropertyListContext(this.context, this.state);
        this.enterRule(localContext, 246, SparkSqlParser.RULE_multipartIdentifierPropertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2961;
            this.multipartIdentifierProperty();
            this.state = 2966;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2962;
                this.match(SparkSqlParser.COMMA);
                this.state = 2963;
                this.multipartIdentifierProperty();
                }
                }
                this.state = 2968;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierProperty(): MultipartIdentifierPropertyContext {
        let localContext = new MultipartIdentifierPropertyContext(this.context, this.state);
        this.enterRule(localContext, 248, SparkSqlParser.RULE_multipartIdentifierProperty);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2969;
            this.multipartIdentifier();
            this.state = 2972;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 206) {
                {
                this.state = 2970;
                this.match(SparkSqlParser.KW_OPTIONS);
                this.state = 2971;
                localContext._options = this.propertyList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIdentifier(): TableIdentifierContext {
        let localContext = new TableIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 250, SparkSqlParser.RULE_tableIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2977;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 386, this.context) ) {
            case 1:
                {
                this.state = 2974;
                localContext._db = this.errorCapturingIdentifier();
                this.state = 2975;
                this.match(SparkSqlParser.DOT);
                }
                break;
            }
            this.state = 2979;
            localContext._table = this.errorCapturingIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewIdentifier(): ViewIdentifierContext {
        let localContext = new ViewIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 252, SparkSqlParser.RULE_viewIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2984;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 387, this.context) ) {
            case 1:
                {
                this.state = 2981;
                localContext._db = this.errorCapturingIdentifier();
                this.state = 2982;
                this.match(SparkSqlParser.DOT);
                }
                break;
            }
            this.state = 2986;
            localContext._view = this.errorCapturingIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedExpression(): NamedExpressionContext {
        let localContext = new NamedExpressionContext(this.context, this.state);
        this.enterRule(localContext, 254, SparkSqlParser.RULE_namedExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2990;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 388, this.context) ) {
            case 1:
                {
                this.state = 2988;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 2989;
                this.expression();
                }
                break;
            }
            this.state = 2999;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 391, this.context) ) {
            case 1:
                {
                this.state = 2993;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 389, this.context) ) {
                case 1:
                    {
                    this.state = 2992;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2997;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_ADD:
                case SparkSqlParser.KW_AFTER:
                case SparkSqlParser.KW_ALL:
                case SparkSqlParser.KW_ALTER:
                case SparkSqlParser.KW_ALWAYS:
                case SparkSqlParser.KW_ANALYZE:
                case SparkSqlParser.KW_AND:
                case SparkSqlParser.KW_ANTI:
                case SparkSqlParser.KW_ANY:
                case SparkSqlParser.KW_ANY_VALUE:
                case SparkSqlParser.KW_ARCHIVE:
                case SparkSqlParser.KW_ARRAY:
                case SparkSqlParser.KW_AS:
                case SparkSqlParser.KW_ASC:
                case SparkSqlParser.KW_AT:
                case SparkSqlParser.KW_AUTHORIZATION:
                case SparkSqlParser.KW_BETWEEN:
                case SparkSqlParser.KW_BIGINT:
                case SparkSqlParser.KW_BINARY:
                case SparkSqlParser.KW_BOOLEAN:
                case SparkSqlParser.KW_BOTH:
                case SparkSqlParser.KW_BUCKET:
                case SparkSqlParser.KW_BUCKETS:
                case SparkSqlParser.KW_BY:
                case SparkSqlParser.KW_BYTE:
                case SparkSqlParser.KW_CACHE:
                case SparkSqlParser.KW_CASCADE:
                case SparkSqlParser.KW_CASE:
                case SparkSqlParser.KW_CAST:
                case SparkSqlParser.KW_CATALOG:
                case SparkSqlParser.KW_CATALOGS:
                case SparkSqlParser.KW_CHANGE:
                case SparkSqlParser.KW_CHAR:
                case SparkSqlParser.KW_CHARACTER:
                case SparkSqlParser.KW_CHECK:
                case SparkSqlParser.KW_CLEAR:
                case SparkSqlParser.KW_CLUSTER:
                case SparkSqlParser.KW_CLUSTERED:
                case SparkSqlParser.KW_CODEGEN:
                case SparkSqlParser.KW_COLLATE:
                case SparkSqlParser.KW_COLLECTION:
                case SparkSqlParser.KW_COLUMN:
                case SparkSqlParser.KW_COLUMNS:
                case SparkSqlParser.KW_COMMENT:
                case SparkSqlParser.KW_COMMIT:
                case SparkSqlParser.KW_COMPACT:
                case SparkSqlParser.KW_COMPACTIONS:
                case SparkSqlParser.KW_COMPUTE:
                case SparkSqlParser.KW_CONCATENATE:
                case SparkSqlParser.KW_CONSTRAINT:
                case SparkSqlParser.KW_COST:
                case SparkSqlParser.KW_CREATE:
                case SparkSqlParser.KW_CROSS:
                case SparkSqlParser.KW_CUBE:
                case SparkSqlParser.KW_CURRENT:
                case SparkSqlParser.KW_CURRENT_DATE:
                case SparkSqlParser.KW_CURRENT_TIME:
                case SparkSqlParser.KW_CURRENT_TIMESTAMP:
                case SparkSqlParser.KW_CURRENT_USER:
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYS:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_DATA:
                case SparkSqlParser.KW_DATE:
                case SparkSqlParser.KW_DATABASE:
                case SparkSqlParser.KW_DATABASES:
                case SparkSqlParser.KW_DATEADD:
                case SparkSqlParser.KW_DATE_ADD:
                case SparkSqlParser.KW_DATEDIFF:
                case SparkSqlParser.KW_DATE_DIFF:
                case SparkSqlParser.KW_DBPROPERTIES:
                case SparkSqlParser.KW_DEC:
                case SparkSqlParser.KW_DECIMAL:
                case SparkSqlParser.KW_DECLARE:
                case SparkSqlParser.KW_DEFAULT:
                case SparkSqlParser.KW_DEFINED:
                case SparkSqlParser.KW_DELETE:
                case SparkSqlParser.KW_DELIMITED:
                case SparkSqlParser.KW_DESC:
                case SparkSqlParser.KW_DESCRIBE:
                case SparkSqlParser.KW_DFS:
                case SparkSqlParser.KW_DIRECTORIES:
                case SparkSqlParser.KW_DIRECTORY:
                case SparkSqlParser.KW_DISABLE:
                case SparkSqlParser.KW_DISTINCT:
                case SparkSqlParser.KW_DISTRIBUTE:
                case SparkSqlParser.KW_DIV:
                case SparkSqlParser.KW_DOUBLE:
                case SparkSqlParser.KW_DROP:
                case SparkSqlParser.KW_ELSE:
                case SparkSqlParser.KW_ENABLE:
                case SparkSqlParser.KW_END:
                case SparkSqlParser.KW_ESCAPE:
                case SparkSqlParser.KW_ESCAPED:
                case SparkSqlParser.KW_EXCEPT:
                case SparkSqlParser.KW_EXCHANGE:
                case SparkSqlParser.KW_EXCLUDE:
                case SparkSqlParser.KW_EXISTS:
                case SparkSqlParser.KW_EXPLAIN:
                case SparkSqlParser.KW_EXPORT:
                case SparkSqlParser.KW_EXTENDED:
                case SparkSqlParser.KW_EXTERNAL:
                case SparkSqlParser.KW_EXTRACT:
                case SparkSqlParser.KW_FALSE:
                case SparkSqlParser.KW_FETCH:
                case SparkSqlParser.KW_FIELDS:
                case SparkSqlParser.KW_FILTER:
                case SparkSqlParser.KW_FILEFORMAT:
                case SparkSqlParser.KW_FIRST:
                case SparkSqlParser.KW_FLOAT:
                case SparkSqlParser.KW_FOLLOWING:
                case SparkSqlParser.KW_FOR:
                case SparkSqlParser.KW_FOREIGN:
                case SparkSqlParser.KW_FORMAT:
                case SparkSqlParser.KW_FORMATTED:
                case SparkSqlParser.KW_FROM:
                case SparkSqlParser.KW_FULL:
                case SparkSqlParser.KW_FUNCTION:
                case SparkSqlParser.KW_FUNCTIONS:
                case SparkSqlParser.KW_GENERATED:
                case SparkSqlParser.KW_GLOBAL:
                case SparkSqlParser.KW_GRANT:
                case SparkSqlParser.KW_GROUP:
                case SparkSqlParser.KW_GROUPING:
                case SparkSqlParser.KW_HAVING:
                case SparkSqlParser.KW_BINARY_HEX:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_HOURS:
                case SparkSqlParser.KW_IDENTIFIER:
                case SparkSqlParser.KW_IF:
                case SparkSqlParser.KW_IGNORE:
                case SparkSqlParser.KW_IMPORT:
                case SparkSqlParser.KW_IN:
                case SparkSqlParser.KW_INCLUDE:
                case SparkSqlParser.KW_INDEX:
                case SparkSqlParser.KW_INDEXES:
                case SparkSqlParser.KW_INNER:
                case SparkSqlParser.KW_INPATH:
                case SparkSqlParser.KW_INPUTFORMAT:
                case SparkSqlParser.KW_INSERT:
                case SparkSqlParser.KW_INTERSECT:
                case SparkSqlParser.KW_INTERVAL:
                case SparkSqlParser.KW_INT:
                case SparkSqlParser.KW_INTEGER:
                case SparkSqlParser.KW_INTO:
                case SparkSqlParser.KW_IS:
                case SparkSqlParser.KW_ITEMS:
                case SparkSqlParser.KW_JOIN:
                case SparkSqlParser.KW_KEYS:
                case SparkSqlParser.KW_LAST:
                case SparkSqlParser.KW_LATERAL:
                case SparkSqlParser.KW_LAZY:
                case SparkSqlParser.KW_LEADING:
                case SparkSqlParser.KW_LEFT:
                case SparkSqlParser.KW_LIKE:
                case SparkSqlParser.KW_ILIKE:
                case SparkSqlParser.KW_LIMIT:
                case SparkSqlParser.KW_LINES:
                case SparkSqlParser.KW_LIST:
                case SparkSqlParser.KW_LOAD:
                case SparkSqlParser.KW_LOCAL:
                case SparkSqlParser.KW_LOCATION:
                case SparkSqlParser.KW_LOCK:
                case SparkSqlParser.KW_LOCKS:
                case SparkSqlParser.KW_LOGICAL:
                case SparkSqlParser.KW_LONG:
                case SparkSqlParser.KW_MACRO:
                case SparkSqlParser.KW_MATERIALIZED:
                case SparkSqlParser.KW_MAP:
                case SparkSqlParser.KW_MATCHED:
                case SparkSqlParser.KW_MERGE:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MICROSECONDS:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MILLISECONDS:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MINUTES:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_MONTHS:
                case SparkSqlParser.KW_MSCK:
                case SparkSqlParser.KW_NAME:
                case SparkSqlParser.KW_NAMESPACE:
                case SparkSqlParser.KW_NAMESPACES:
                case SparkSqlParser.KW_NANOSECOND:
                case SparkSqlParser.KW_NANOSECONDS:
                case SparkSqlParser.KW_NATURAL:
                case SparkSqlParser.KW_NO:
                case SparkSqlParser.KW_NOT:
                case SparkSqlParser.KW_NULL:
                case SparkSqlParser.KW_NULLS:
                case SparkSqlParser.KW_NUMERIC:
                case SparkSqlParser.KW_OF:
                case SparkSqlParser.KW_OFFSET:
                case SparkSqlParser.KW_ON:
                case SparkSqlParser.KW_ONLY:
                case SparkSqlParser.KW_OPTIMIZE:
                case SparkSqlParser.KW_OPTION:
                case SparkSqlParser.KW_OPTIONS:
                case SparkSqlParser.KW_OR:
                case SparkSqlParser.KW_ORDER:
                case SparkSqlParser.KW_OUT:
                case SparkSqlParser.KW_OUTER:
                case SparkSqlParser.KW_OUTPUTFORMAT:
                case SparkSqlParser.KW_OVER:
                case SparkSqlParser.KW_OVERLAPS:
                case SparkSqlParser.KW_OVERLAY:
                case SparkSqlParser.KW_OVERWRITE:
                case SparkSqlParser.KW_PARTITION:
                case SparkSqlParser.KW_PARTITIONED:
                case SparkSqlParser.KW_PARTITIONS:
                case SparkSqlParser.KW_PERCENTILE_CONT:
                case SparkSqlParser.KW_PERCENTILE_DISC:
                case SparkSqlParser.KW_PERCENTLIT:
                case SparkSqlParser.KW_PIVOT:
                case SparkSqlParser.KW_PLACING:
                case SparkSqlParser.KW_POSITION:
                case SparkSqlParser.KW_PRECEDING:
                case SparkSqlParser.KW_PRIMARY:
                case SparkSqlParser.KW_PRINCIPALS:
                case SparkSqlParser.KW_PROPERTIES:
                case SparkSqlParser.KW_PURGE:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_QUERY:
                case SparkSqlParser.KW_RANGE:
                case SparkSqlParser.KW_REAL:
                case SparkSqlParser.KW_RECORDREADER:
                case SparkSqlParser.KW_RECORDWRITER:
                case SparkSqlParser.KW_RECOVER:
                case SparkSqlParser.KW_REDUCE:
                case SparkSqlParser.KW_REFERENCES:
                case SparkSqlParser.KW_REFRESH:
                case SparkSqlParser.KW_RENAME:
                case SparkSqlParser.KW_REPAIR:
                case SparkSqlParser.KW_REPEATABLE:
                case SparkSqlParser.KW_REPLACE:
                case SparkSqlParser.KW_RESET:
                case SparkSqlParser.KW_RESPECT:
                case SparkSqlParser.KW_RESTRICT:
                case SparkSqlParser.KW_REWRITE:
                case SparkSqlParser.KW_REVOKE:
                case SparkSqlParser.KW_RIGHT:
                case SparkSqlParser.KW_RLIKE:
                case SparkSqlParser.KW_REGEXP:
                case SparkSqlParser.KW_ROLE:
                case SparkSqlParser.KW_ROLES:
                case SparkSqlParser.KW_ROLLBACK:
                case SparkSqlParser.KW_ROLLUP:
                case SparkSqlParser.KW_ROW:
                case SparkSqlParser.KW_ROWS:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_SECONDS:
                case SparkSqlParser.KW_SCHEMA:
                case SparkSqlParser.KW_SCHEMAS:
                case SparkSqlParser.KW_SELECT:
                case SparkSqlParser.KW_SEMI:
                case SparkSqlParser.KW_SEPARATED:
                case SparkSqlParser.KW_SERDE:
                case SparkSqlParser.KW_SERDEPROPERTIES:
                case SparkSqlParser.KW_SESSION_USER:
                case SparkSqlParser.KW_SET:
                case SparkSqlParser.KW_MINUS:
                case SparkSqlParser.KW_SETS:
                case SparkSqlParser.KW_SHORT:
                case SparkSqlParser.KW_SHOW:
                case SparkSqlParser.KW_SINGLE:
                case SparkSqlParser.KW_SKEWED:
                case SparkSqlParser.KW_SMALLINT:
                case SparkSqlParser.KW_SOME:
                case SparkSqlParser.KW_SORT:
                case SparkSqlParser.KW_SORTED:
                case SparkSqlParser.KW_SOURCE:
                case SparkSqlParser.KW_START:
                case SparkSqlParser.KW_STATISTICS:
                case SparkSqlParser.KW_STORED:
                case SparkSqlParser.KW_STRATIFY:
                case SparkSqlParser.KW_STRING:
                case SparkSqlParser.KW_STRUCT:
                case SparkSqlParser.KW_SUBSTR:
                case SparkSqlParser.KW_SUBSTRING:
                case SparkSqlParser.KW_SYNC:
                case SparkSqlParser.KW_SYSTEM:
                case SparkSqlParser.KW_SYSTEM_TIME:
                case SparkSqlParser.KW_SYSTEM_VERSION:
                case SparkSqlParser.KW_TABLE:
                case SparkSqlParser.KW_TABLES:
                case SparkSqlParser.KW_TABLESAMPLE:
                case SparkSqlParser.KW_TARGET:
                case SparkSqlParser.KW_TBLPROPERTIES:
                case SparkSqlParser.KW_TEMPORARY:
                case SparkSqlParser.KW_TERMINATED:
                case SparkSqlParser.KW_THEN:
                case SparkSqlParser.KW_TIME:
                case SparkSqlParser.KW_TIMEDIFF:
                case SparkSqlParser.KW_TIMESTAMP:
                case SparkSqlParser.KW_TIMESTAMP_LTZ:
                case SparkSqlParser.KW_TIMESTAMP_NTZ:
                case SparkSqlParser.KW_TIMESTAMPADD:
                case SparkSqlParser.KW_TIMESTAMPDIFF:
                case SparkSqlParser.KW_TINYINT:
                case SparkSqlParser.KW_TO:
                case SparkSqlParser.KW_TOUCH:
                case SparkSqlParser.KW_TRAILING:
                case SparkSqlParser.KW_TRANSACTION:
                case SparkSqlParser.KW_TRANSACTIONS:
                case SparkSqlParser.KW_TRANSFORM:
                case SparkSqlParser.KW_TRIM:
                case SparkSqlParser.KW_TRUE:
                case SparkSqlParser.KW_TRUNCATE:
                case SparkSqlParser.KW_TRY_CAST:
                case SparkSqlParser.KW_TYPE:
                case SparkSqlParser.KW_UNARCHIVE:
                case SparkSqlParser.KW_UNBOUNDED:
                case SparkSqlParser.KW_UNCACHE:
                case SparkSqlParser.KW_UNION:
                case SparkSqlParser.KW_UNIQUE:
                case SparkSqlParser.KW_UNKNOWN:
                case SparkSqlParser.KW_UNLOCK:
                case SparkSqlParser.KW_UNPIVOT:
                case SparkSqlParser.KW_UNSET:
                case SparkSqlParser.KW_UPDATE:
                case SparkSqlParser.KW_USE:
                case SparkSqlParser.KW_USER:
                case SparkSqlParser.KW_USING:
                case SparkSqlParser.KW_VALUES:
                case SparkSqlParser.KW_VARCHAR:
                case SparkSqlParser.KW_VAR:
                case SparkSqlParser.KW_VARIABLE:
                case SparkSqlParser.KW_VERSION:
                case SparkSqlParser.KW_VIEW:
                case SparkSqlParser.KW_VIEWS:
                case SparkSqlParser.KW_VOID:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_WEEKS:
                case SparkSqlParser.KW_WHEN:
                case SparkSqlParser.KW_WHERE:
                case SparkSqlParser.KW_WINDOW:
                case SparkSqlParser.KW_WITH:
                case SparkSqlParser.KW_WITHIN:
                case SparkSqlParser.KW_YEAR:
                case SparkSqlParser.KW_YEARS:
                case SparkSqlParser.KW_ZONE:
                case SparkSqlParser.KW_ZORDER:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                case SparkSqlParser.IDENTIFIER:
                case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 2995;
                    localContext._name = this.errorCapturingIdentifier();
                    }
                    break;
                case SparkSqlParser.LEFT_PAREN:
                    {
                    this.state = 2996;
                    this.identifierList();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        let localContext = new NamedExpressionSeqContext(this.context, this.state);
        this.enterRule(localContext, 256, SparkSqlParser.RULE_namedExpressionSeq);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3001;
            this.namedExpression();
            this.state = 3006;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 392, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3002;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3003;
                    this.namedExpression();
                    }
                    }
                }
                this.state = 3008;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 392, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionFieldList(): PartitionFieldListContext {
        let localContext = new PartitionFieldListContext(this.context, this.state);
        this.enterRule(localContext, 258, SparkSqlParser.RULE_partitionFieldList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3009;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 3010;
            localContext._partitionField = this.partitionField();
            localContext._fields.push(localContext._partitionField);
            this.state = 3015;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3011;
                this.match(SparkSqlParser.COMMA);
                this.state = 3012;
                localContext._partitionField = this.partitionField();
                localContext._fields.push(localContext._partitionField);
                }
                }
                this.state = 3017;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3018;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionField(): PartitionFieldContext {
        let localContext = new PartitionFieldContext(this.context, this.state);
        this.enterRule(localContext, 260, SparkSqlParser.RULE_partitionField);
        try {
            this.state = 3022;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 394, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3020;
                this.transform();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3021;
                this.colType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transform(): TransformContext {
        let localContext = new TransformContext(this.context, this.state);
        this.enterRule(localContext, 262, SparkSqlParser.RULE_transform);
        let _la: number;
        try {
            this.state = 3037;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 396, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3024;
                this.qualifiedName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3025;
                localContext._transformName = this.identifier();
                this.state = 3026;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3027;
                this.transformArgument();
                this.state = 3032;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 3028;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3029;
                    this.transformArgument();
                    }
                    }
                    this.state = 3034;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3035;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transformArgument(): TransformArgumentContext {
        let localContext = new TransformArgumentContext(this.context, this.state);
        this.enterRule(localContext, 264, SparkSqlParser.RULE_transformArgument);
        try {
            this.state = 3041;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 397, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3039;
                this.qualifiedName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3040;
                this.constant();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 266, SparkSqlParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3043;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedArgumentExpression(): NamedArgumentExpressionContext {
        let localContext = new NamedArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 268, SparkSqlParser.RULE_namedArgumentExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3045;
            localContext._key = this.identifier();
            this.state = 3046;
            this.match(SparkSqlParser.FAT_ARROW);
            this.state = 3047;
            localContext._value = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionArgument(): FunctionArgumentContext {
        let localContext = new FunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 270, SparkSqlParser.RULE_functionArgument);
        try {
            this.state = 3051;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 398, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3049;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3050;
                this.namedArgumentExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionSeq(): ExpressionSeqContext {
        let localContext = new ExpressionSeqContext(this.context, this.state);
        this.enterRule(localContext, 272, SparkSqlParser.RULE_expressionSeq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3053;
            this.expression();
            this.state = 3058;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3054;
                this.match(SparkSqlParser.COMMA);
                this.state = 3055;
                this.expression();
                }
                }
                this.state = 3060;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 274;
        this.enterRecursionRule(localContext, 274, SparkSqlParser.RULE_booleanExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3073;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 401, this.context) ) {
            case 1:
                {
                this.state = 3062;
                _la = this.tokenStream.LA(1);
                if(!(_la === 196 || _la === 359)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3063;
                this.booleanExpression(5);
                }
                break;
            case 2:
                {
                this.state = 3064;
                this.match(SparkSqlParser.KW_EXISTS);
                this.state = 3065;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3066;
                this.query();
                this.state = 3067;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                {
                this.state = 3069;
                this.valueExpression(0);
                this.state = 3071;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 400, this.context) ) {
                case 1:
                    {
                    this.state = 3070;
                    this.predicate();
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3083;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 403, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3081;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 402, this.context) ) {
                    case 1:
                        {
                        localContext = new BooleanExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_booleanExpression);
                        this.state = 3075;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 3076;
                        localContext._operator = this.match(SparkSqlParser.KW_AND);
                        this.state = 3077;
                        localContext._right = this.booleanExpression(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new BooleanExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_booleanExpression);
                        this.state = 3078;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 3079;
                        localContext._operator = this.match(SparkSqlParser.KW_OR);
                        this.state = 3080;
                        localContext._right = this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 3085;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 403, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate(): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state);
        this.enterRule(localContext, 276, SparkSqlParser.RULE_predicate);
        let _la: number;
        try {
            this.state = 3168;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 417, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3087;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 3086;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3089;
                localContext._kind = this.match(SparkSqlParser.KW_BETWEEN);
                this.state = 3090;
                localContext._lower = this.valueExpression(0);
                this.state = 3091;
                this.match(SparkSqlParser.KW_AND);
                this.state = 3092;
                localContext._upper = this.valueExpression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3095;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 3094;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3097;
                localContext._kind = this.match(SparkSqlParser.KW_IN);
                this.state = 3098;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3099;
                this.expression();
                this.state = 3104;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 3100;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3101;
                    this.expression();
                    }
                    }
                    this.state = 3106;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3107;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3110;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 3109;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3112;
                localContext._kind = this.match(SparkSqlParser.KW_IN);
                this.state = 3113;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3114;
                this.query();
                this.state = 3115;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3118;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 3117;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3120;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 250 || _la === 251)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3121;
                localContext._pattern = this.valueExpression(0);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3123;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 3122;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3125;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 162 || _la === 163)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3126;
                localContext._quantifier = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 16 || _la === 276)) {
                    localContext._quantifier = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3140;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 411, this.context) ) {
                case 1:
                    {
                    this.state = 3127;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3128;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 3129;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3130;
                    this.expression();
                    this.state = 3135;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3131;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3132;
                        this.expression();
                        }
                        }
                        this.state = 3137;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3138;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3143;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 3142;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3145;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 162 || _la === 163)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3146;
                localContext._pattern = this.valueExpression(0);
                this.state = 3149;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 413, this.context) ) {
                case 1:
                    {
                    this.state = 3147;
                    this.match(SparkSqlParser.KW_ESCAPE);
                    this.state = 3148;
                    localContext._escapeChar = this.stringLit();
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3151;
                this.match(SparkSqlParser.KW_IS);
                this.state = 3153;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 3152;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3155;
                localContext._kind = this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3156;
                this.match(SparkSqlParser.KW_IS);
                this.state = 3158;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 3157;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3160;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 111 || _la === 315 || _la === 324)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3161;
                this.match(SparkSqlParser.KW_IS);
                this.state = 3163;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 3162;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3165;
                localContext._kind = this.match(SparkSqlParser.KW_DISTINCT);
                this.state = 3166;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 3167;
                localContext._right = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 278;
        this.enterRecursionRule(localContext, 278, SparkSqlParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3174;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 418, this.context) ) {
            case 1:
                {
                this.state = 3171;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                this.state = 3172;
                localContext._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 35) !== 0))) {
                    localContext._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3173;
                this.valueExpression(7);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3197;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 420, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3195;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 419, this.context) ) {
                    case 1:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3176;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 3177;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 94 || ((((_la - 362)) & ~0x1F) === 0 && ((1 << (_la - 362)) & 7) !== 0))) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3178;
                        localContext._right = this.valueExpression(7);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3179;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 3180;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 259) !== 0))) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3181;
                        localContext._right = this.valueExpression(6);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3182;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 3183;
                        localContext._operator = this.match(SparkSqlParser.AMPERSAND);
                        this.state = 3184;
                        localContext._right = this.valueExpression(5);
                        }
                        break;
                    case 4:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3185;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 3186;
                        localContext._operator = this.match(SparkSqlParser.HAT);
                        this.state = 3187;
                        localContext._right = this.valueExpression(4);
                        }
                        break;
                    case 5:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3188;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 3189;
                        localContext._operator = this.match(SparkSqlParser.PIPE);
                        this.state = 3190;
                        localContext._right = this.valueExpression(3);
                        }
                        break;
                    case 6:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3191;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 3192;
                        this.comparisonOperator();
                        this.state = 3193;
                        localContext._right = this.valueExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 3199;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 420, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public datetimeUnit(): DatetimeUnitContext {
        let localContext = new DatetimeUnitContext(this.context, this.state);
        this.enterRule(localContext, 280, SparkSqlParser.RULE_datetimeUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3200;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 69 || _la === 134 || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & 85) !== 0) || _la === 230 || _la === 258 || _la === 340 || _la === 347)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 282;
        this.enterRecursionRule(localContext, 282, SparkSqlParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3451;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 446, this.context) ) {
            case 1:
                {
                this.state = 3203;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 63)) & ~0x1F) === 0 && ((1 << (_la - 63)) & 13) !== 0) || _la === 267 || _la === 330)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                {
                this.state = 3204;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 74 || _la === 75 || _la === 305)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3205;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3208;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_YEAR:
                    {
                    this.state = 3206;
                    localContext._unit = this.datetimeUnit();
                    }
                    break;
                case SparkSqlParser.STRING_LITERAL:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 3207;
                    localContext._invalidUnit = this.stringLit();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3210;
                this.match(SparkSqlParser.COMMA);
                this.state = 3211;
                localContext._unitsAmount = this.valueExpression(0);
                this.state = 3212;
                this.match(SparkSqlParser.COMMA);
                this.state = 3213;
                localContext._timestamp = this.valueExpression(0);
                this.state = 3214;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                {
                this.state = 3216;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 76 || _la === 77 || _la === 301 || _la === 306)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3217;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3220;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_YEAR:
                    {
                    this.state = 3218;
                    localContext._unit = this.datetimeUnit();
                    }
                    break;
                case SparkSqlParser.STRING_LITERAL:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 3219;
                    localContext._invalidUnit = this.stringLit();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3222;
                this.match(SparkSqlParser.COMMA);
                this.state = 3223;
                localContext._startTimestamp = this.valueExpression(0);
                this.state = 3224;
                this.match(SparkSqlParser.COMMA);
                this.state = 3225;
                localContext._endTimestamp = this.valueExpression(0);
                this.state = 3226;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 4:
                {
                this.state = 3228;
                this.match(SparkSqlParser.KW_CASE);
                this.state = 3230;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3229;
                    this.whenClause();
                    }
                    }
                    this.state = 3232;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 342);
                this.state = 3236;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 3234;
                    this.match(SparkSqlParser.KW_ELSE);
                    this.state = 3235;
                    localContext._elseExpression = this.expression();
                    }
                }

                this.state = 3238;
                this.match(SparkSqlParser.KW_END);
                }
                break;
            case 5:
                {
                this.state = 3240;
                this.match(SparkSqlParser.KW_CASE);
                this.state = 3241;
                this.expression();
                this.state = 3243;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3242;
                    this.whenClause();
                    }
                    }
                    this.state = 3245;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 342);
                this.state = 3249;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 3247;
                    this.match(SparkSqlParser.KW_ELSE);
                    this.state = 3248;
                    localContext._elseExpression = this.expression();
                    }
                }

                this.state = 3251;
                this.match(SparkSqlParser.KW_END);
                }
                break;
            case 6:
                {
                this.state = 3253;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 36 || _la === 317)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3254;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3255;
                this.expression();
                this.state = 3256;
                this.match(SparkSqlParser.KW_AS);
                this.state = 3257;
                this.dataType();
                this.state = 3258;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 7:
                {
                this.state = 3260;
                this.match(SparkSqlParser.KW_STRUCT);
                this.state = 3261;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3270;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 1073678415) !== 0)) {
                    {
                    this.state = 3262;
                    this.namedExpression();
                    this.state = 3267;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3263;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3264;
                        this.namedExpression();
                        }
                        }
                        this.state = 3269;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 3272;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 8:
                {
                this.state = 3273;
                this.match(SparkSqlParser.KW_FIRST);
                this.state = 3274;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3275;
                this.expression();
                this.state = 3278;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 3276;
                    this.match(SparkSqlParser.KW_IGNORE);
                    this.state = 3277;
                    this.match(SparkSqlParser.KW_NULLS);
                    }
                }

                this.state = 3280;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 9:
                {
                this.state = 3282;
                this.match(SparkSqlParser.KW_ANY_VALUE);
                this.state = 3283;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3284;
                this.expression();
                this.state = 3287;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 3285;
                    this.match(SparkSqlParser.KW_IGNORE);
                    this.state = 3286;
                    this.match(SparkSqlParser.KW_NULLS);
                    }
                }

                this.state = 3289;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 10:
                {
                this.state = 3291;
                this.match(SparkSqlParser.KW_LAST);
                this.state = 3292;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3293;
                this.expression();
                this.state = 3296;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 3294;
                    this.match(SparkSqlParser.KW_IGNORE);
                    this.state = 3295;
                    this.match(SparkSqlParser.KW_NULLS);
                    }
                }

                this.state = 3298;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 11:
                {
                this.state = 3300;
                this.match(SparkSqlParser.KW_POSITION);
                this.state = 3301;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3302;
                localContext._substr = this.valueExpression(0);
                this.state = 3303;
                this.match(SparkSqlParser.KW_IN);
                this.state = 3304;
                localContext._str = this.valueExpression(0);
                this.state = 3305;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 12:
                {
                this.state = 3307;
                this.constant();
                }
                break;
            case 13:
                {
                this.state = 3308;
                this.match(SparkSqlParser.ASTERISK);
                }
                break;
            case 14:
                {
                this.state = 3309;
                this.qualifiedName();
                this.state = 3310;
                this.match(SparkSqlParser.DOT);
                this.state = 3311;
                this.match(SparkSqlParser.ASTERISK);
                }
                break;
            case 15:
                {
                this.state = 3313;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3314;
                this.namedExpression();
                this.state = 3317;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3315;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3316;
                    this.namedExpression();
                    }
                    }
                    this.state = 3319;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 4);
                this.state = 3321;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 16:
                {
                this.state = 3323;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3324;
                this.query();
                this.state = 3325;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 17:
                {
                this.state = 3327;
                this.match(SparkSqlParser.KW_IDENTIFIER);
                this.state = 3328;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3329;
                this.expression();
                this.state = 3330;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 18:
                {
                this.state = 3332;
                this.functionName();
                this.state = 3333;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3345;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 359)) & ~0x1F) === 0 && ((1 << (_la - 359)) & 1073678415) !== 0)) {
                    {
                    this.state = 3335;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 433, this.context) ) {
                    case 1:
                        {
                        this.state = 3334;
                        this.setQuantifier();
                        }
                        break;
                    }
                    this.state = 3337;
                    this.functionArgument();
                    this.state = 3342;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3338;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3339;
                        this.functionArgument();
                        }
                        }
                        this.state = 3344;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 3347;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 3354;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 436, this.context) ) {
                case 1:
                    {
                    this.state = 3348;
                    this.match(SparkSqlParser.KW_FILTER);
                    this.state = 3349;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3350;
                    this.match(SparkSqlParser.KW_WHERE);
                    this.state = 3351;
                    localContext._where = this.booleanExpression(0);
                    this.state = 3352;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3358;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 437, this.context) ) {
                case 1:
                    {
                    this.state = 3356;
                    localContext._nullsOption = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 138 || _la === 245)) {
                        localContext._nullsOption = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3357;
                    this.match(SparkSqlParser.KW_NULLS);
                    }
                    break;
                }
                this.state = 3362;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 438, this.context) ) {
                case 1:
                    {
                    this.state = 3360;
                    this.match(SparkSqlParser.KW_OVER);
                    this.state = 3361;
                    this.windowSpec();
                    }
                    break;
                }
                }
                break;
            case 19:
                {
                this.state = 3364;
                this.identifier();
                this.state = 3365;
                this.match(SparkSqlParser.ARROW);
                this.state = 3366;
                this.expression();
                }
                break;
            case 20:
                {
                this.state = 3368;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3369;
                this.identifier();
                this.state = 3372;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3370;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3371;
                    this.identifier();
                    }
                    }
                    this.state = 3374;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 4);
                this.state = 3376;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 3377;
                this.match(SparkSqlParser.ARROW);
                this.state = 3378;
                this.expression();
                }
                break;
            case 21:
                {
                this.state = 3380;
                this.identifier();
                }
                break;
            case 22:
                {
                this.state = 3381;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3382;
                this.expression();
                this.state = 3383;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 23:
                {
                this.state = 3385;
                this.match(SparkSqlParser.KW_EXTRACT);
                this.state = 3386;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3387;
                localContext._field = this.identifier();
                this.state = 3388;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 3389;
                localContext._source = this.valueExpression(0);
                this.state = 3390;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 24:
                {
                this.state = 3392;
                _la = this.tokenStream.LA(1);
                if(!(_la === 286 || _la === 287)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3393;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3394;
                localContext._str = this.valueExpression(0);
                this.state = 3395;
                _la = this.tokenStream.LA(1);
                if(!(_la === 4 || _la === 123)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3396;
                localContext._pos = this.valueExpression(0);
                this.state = 3399;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4 || _la === 119) {
                    {
                    this.state = 3397;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 4 || _la === 119)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3398;
                    localContext._len = this.valueExpression(0);
                    }
                }

                this.state = 3401;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 25:
                {
                this.state = 3403;
                this.match(SparkSqlParser.KW_TRIM);
                this.state = 3404;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3406;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 441, this.context) ) {
                case 1:
                    {
                    this.state = 3405;
                    localContext._trimOption = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 28 || _la === 160 || _la === 310)) {
                        localContext._trimOption = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 3409;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 442, this.context) ) {
                case 1:
                    {
                    this.state = 3408;
                    localContext._trimStr = this.valueExpression(0);
                    }
                    break;
                }
                this.state = 3411;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 3412;
                localContext._srcStr = this.valueExpression(0);
                this.state = 3413;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 26:
                {
                this.state = 3415;
                this.match(SparkSqlParser.KW_OVERLAY);
                this.state = 3416;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3417;
                localContext._input = this.valueExpression(0);
                this.state = 3418;
                this.match(SparkSqlParser.KW_PLACING);
                this.state = 3419;
                localContext._replace = this.valueExpression(0);
                this.state = 3420;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 3421;
                localContext._position = this.valueExpression(0);
                this.state = 3424;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 3422;
                    this.match(SparkSqlParser.KW_FOR);
                    this.state = 3423;
                    localContext._length = this.valueExpression(0);
                    }
                }

                this.state = 3426;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 27:
                {
                this.state = 3428;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 219 || _la === 220)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3429;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3430;
                localContext._percentage = this.valueExpression(0);
                this.state = 3431;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 3432;
                this.match(SparkSqlParser.KW_WITHIN);
                this.state = 3433;
                this.match(SparkSqlParser.KW_GROUP);
                this.state = 3434;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3435;
                this.match(SparkSqlParser.KW_ORDER);
                this.state = 3436;
                this.match(SparkSqlParser.KW_BY);
                this.state = 3437;
                this.sortItem();
                this.state = 3438;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 3445;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 444, this.context) ) {
                case 1:
                    {
                    this.state = 3439;
                    this.match(SparkSqlParser.KW_FILTER);
                    this.state = 3440;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3441;
                    this.match(SparkSqlParser.KW_WHERE);
                    this.state = 3442;
                    localContext._where = this.booleanExpression(0);
                    this.state = 3443;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3449;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 445, this.context) ) {
                case 1:
                    {
                    this.state = 3447;
                    this.match(SparkSqlParser.KW_OVER);
                    this.state = 3448;
                    this.windowSpec();
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3463;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 448, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3461;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 447, this.context) ) {
                    case 1:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        localContext._value = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_primaryExpression);
                        this.state = 3453;
                        if (!(this.precpred(this.context, 9))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 9)");
                        }
                        this.state = 3454;
                        this.match(SparkSqlParser.LEFT_BRACKET);
                        this.state = 3455;
                        localContext._index = this.valueExpression(0);
                        this.state = 3456;
                        this.match(SparkSqlParser.RIGHT_BRACKET);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        localContext._base = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_primaryExpression);
                        this.state = 3458;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 3459;
                        this.match(SparkSqlParser.DOT);
                        this.state = 3460;
                        localContext._fieldName = this.identifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 3465;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 448, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public literalType(): LiteralTypeContext {
        let localContext = new LiteralTypeContext(this.context, this.state);
        this.enterRule(localContext, 284, SparkSqlParser.RULE_literalType);
        try {
            this.state = 3473;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 449, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3466;
                this.match(SparkSqlParser.KW_DATE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3467;
                this.match(SparkSqlParser.KW_TIMESTAMP);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3468;
                this.match(SparkSqlParser.KW_TIMESTAMP_LTZ);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3469;
                this.match(SparkSqlParser.KW_TIMESTAMP_NTZ);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3470;
                this.match(SparkSqlParser.KW_INTERVAL);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3471;
                this.match(SparkSqlParser.KW_BINARY_HEX);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3472;
                localContext._unsupportedType = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constant(): ConstantContext {
        let localContext = new ConstantContext(this.context, this.state);
        this.enterRule(localContext, 286, SparkSqlParser.RULE_constant);
        try {
            let alternative: number;
            this.state = 3490;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 451, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3475;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3476;
                this.match(SparkSqlParser.QUESTION);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3477;
                this.match(SparkSqlParser.COLON);
                this.state = 3478;
                this.identifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3479;
                this.interval();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3480;
                this.literalType();
                this.state = 3481;
                this.stringLit();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3483;
                this.number_();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3484;
                this.booleanValue();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3486;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 3485;
                        this.stringLit();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 3488;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 450, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 288, SparkSqlParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3492;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 351)) & ~0x1F) === 0 && ((1 << (_la - 351)) & 255) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arithmeticOperator(): ArithmeticOperatorContext {
        let localContext = new ArithmeticOperatorContext(this.context, this.state);
        this.enterRule(localContext, 290, SparkSqlParser.RULE_arithmeticOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3494;
            _la = this.tokenStream.LA(1);
            if(!(_la === 94 || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 1023) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public predicateOperator(): PredicateOperatorContext {
        let localContext = new PredicateOperatorContext(this.context, this.state);
        this.enterRule(localContext, 292, SparkSqlParser.RULE_predicateOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3496;
            _la = this.tokenStream.LA(1);
            if(!(_la === 14 || _la === 140 || _la === 196 || _la === 207)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValue(): BooleanValueContext {
        let localContext = new BooleanValueContext(this.context, this.state);
        this.enterRule(localContext, 294, SparkSqlParser.RULE_booleanValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3498;
            _la = this.tokenStream.LA(1);
            if(!(_la === 111 || _la === 315)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 296, SparkSqlParser.RULE_interval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3500;
            this.match(SparkSqlParser.KW_INTERVAL);
            this.state = 3503;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 452, this.context) ) {
            case 1:
                {
                this.state = 3501;
                this.errorCapturingMultiUnitsInterval();
                }
                break;
            case 2:
                {
                this.state = 3502;
                this.errorCapturingUnitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext {
        let localContext = new ErrorCapturingMultiUnitsIntervalContext(this.context, this.state);
        this.enterRule(localContext, 298, SparkSqlParser.RULE_errorCapturingMultiUnitsInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3505;
            localContext._body = this.multiUnitsInterval();
            this.state = 3507;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 453, this.context) ) {
            case 1:
                {
                this.state = 3506;
                this.unitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext {
        let localContext = new MultiUnitsIntervalContext(this.context, this.state);
        this.enterRule(localContext, 300, SparkSqlParser.RULE_multiUnitsInterval);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3512;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 3509;
                    this.intervalValue();
                    this.state = 3510;
                    localContext._unitInMultiUnits = this.unitInMultiUnits();
                    localContext._unit.push(localContext._unitInMultiUnits);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3514;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 454, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext {
        let localContext = new ErrorCapturingUnitToUnitIntervalContext(this.context, this.state);
        this.enterRule(localContext, 302, SparkSqlParser.RULE_errorCapturingUnitToUnitInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3516;
            localContext._body = this.unitToUnitInterval();
            this.state = 3519;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 455, this.context) ) {
            case 1:
                {
                this.state = 3517;
                localContext._error1 = this.multiUnitsInterval();
                }
                break;
            case 2:
                {
                this.state = 3518;
                localContext._error2 = this.unitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext {
        let localContext = new UnitToUnitIntervalContext(this.context, this.state);
        this.enterRule(localContext, 304, SparkSqlParser.RULE_unitToUnitInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3521;
            localContext._value = this.intervalValue();
            this.state = 3522;
            this.unitInUnitToUnit();
            this.state = 3523;
            this.match(SparkSqlParser.KW_TO);
            this.state = 3524;
            this.unitInUnitToUnit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalValue(): IntervalValueContext {
        let localContext = new IntervalValueContext(this.context, this.state);
        this.enterRule(localContext, 306, SparkSqlParser.RULE_intervalValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3527;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 360 || _la === 361) {
                {
                this.state = 3526;
                _la = this.tokenStream.LA(1);
                if(!(_la === 360 || _la === 361)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3532;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.INTEGER_VALUE:
                {
                this.state = 3529;
                this.match(SparkSqlParser.INTEGER_VALUE);
                }
                break;
            case SparkSqlParser.DECIMAL_VALUE:
                {
                this.state = 3530;
                this.match(SparkSqlParser.DECIMAL_VALUE);
                }
                break;
            case SparkSqlParser.STRING_LITERAL:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
                {
                this.state = 3531;
                this.stringLit();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitInMultiUnits(): UnitInMultiUnitsContext {
        let localContext = new UnitInMultiUnitsContext(this.context, this.state);
        this.enterRule(localContext, 308, SparkSqlParser.RULE_unitInMultiUnits);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3534;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 68 || _la === 134 || _la === 135 || ((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & 12543) !== 0) || _la === 258 || _la === 259 || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 387) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitInUnitToUnit(): UnitInUnitToUnitContext {
        let localContext = new UnitInUnitToUnitContext(this.context, this.state);
        this.enterRule(localContext, 310, SparkSqlParser.RULE_unitInUnitToUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3536;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 134 || _la === 183 || _la === 185 || _la === 258 || _la === 347)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colPosition(): ColPositionContext {
        let localContext = new ColPositionContext(this.context, this.state);
        this.enterRule(localContext, 312, SparkSqlParser.RULE_colPosition);
        try {
            this.state = 3541;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_FIRST:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3538;
                localContext._position = this.match(SparkSqlParser.KW_FIRST);
                }
                break;
            case SparkSqlParser.KW_AFTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3539;
                localContext._position = this.match(SparkSqlParser.KW_AFTER);
                this.state = 3540;
                localContext._afterCol = this.errorCapturingIdentifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_(): TypeContext {
        let localContext = new TypeContext(this.context, this.state);
        this.enterRule(localContext, 314, SparkSqlParser.RULE_type);
        try {
            this.state = 3573;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 459, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3543;
                this.match(SparkSqlParser.KW_BOOLEAN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3544;
                this.match(SparkSqlParser.KW_TINYINT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3545;
                this.match(SparkSqlParser.KW_BYTE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3546;
                this.match(SparkSqlParser.KW_SMALLINT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3547;
                this.match(SparkSqlParser.KW_SHORT);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3548;
                this.match(SparkSqlParser.KW_INT);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3549;
                this.match(SparkSqlParser.KW_INTEGER);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3550;
                this.match(SparkSqlParser.KW_BIGINT);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3551;
                this.match(SparkSqlParser.KW_LONG);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3552;
                this.match(SparkSqlParser.KW_FLOAT);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3553;
                this.match(SparkSqlParser.KW_REAL);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3554;
                this.match(SparkSqlParser.KW_DOUBLE);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3555;
                this.match(SparkSqlParser.KW_DATE);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3556;
                this.match(SparkSqlParser.KW_TIMESTAMP);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3557;
                this.match(SparkSqlParser.KW_TIMESTAMP_NTZ);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3558;
                this.match(SparkSqlParser.KW_TIMESTAMP_LTZ);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3559;
                this.match(SparkSqlParser.KW_STRING);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 3560;
                this.match(SparkSqlParser.KW_CHARACTER);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 3561;
                this.match(SparkSqlParser.KW_CHAR);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 3562;
                this.match(SparkSqlParser.KW_VARCHAR);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 3563;
                this.match(SparkSqlParser.KW_BINARY);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 3564;
                this.match(SparkSqlParser.KW_DECIMAL);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 3565;
                this.match(SparkSqlParser.KW_DEC);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 3566;
                this.match(SparkSqlParser.KW_NUMERIC);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 3567;
                this.match(SparkSqlParser.KW_VOID);
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 3568;
                this.match(SparkSqlParser.KW_INTERVAL);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 3569;
                this.match(SparkSqlParser.KW_ARRAY);
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 3570;
                this.match(SparkSqlParser.KW_STRUCT);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 3571;
                this.match(SparkSqlParser.KW_MAP);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 3572;
                localContext._unsupportedType = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataType(): DataTypeContext {
        let localContext = new DataTypeContext(this.context, this.state);
        this.enterRule(localContext, 316, SparkSqlParser.RULE_dataType);
        let _la: number;
        try {
            this.state = 3621;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 466, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3575;
                localContext._complex = this.match(SparkSqlParser.KW_ARRAY);
                this.state = 3576;
                this.match(SparkSqlParser.LT);
                this.state = 3577;
                this.dataType();
                this.state = 3578;
                this.match(SparkSqlParser.GT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3580;
                localContext._complex = this.match(SparkSqlParser.KW_MAP);
                this.state = 3581;
                this.match(SparkSqlParser.LT);
                this.state = 3582;
                this.dataType();
                this.state = 3583;
                this.match(SparkSqlParser.COMMA);
                this.state = 3584;
                this.dataType();
                this.state = 3585;
                this.match(SparkSqlParser.GT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3587;
                localContext._complex = this.match(SparkSqlParser.KW_STRUCT);
                this.state = 3594;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.LT:
                    {
                    this.state = 3588;
                    this.match(SparkSqlParser.LT);
                    this.state = 3590;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967287) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147483647) !== 0) || ((((_la - 377)) & ~0x1F) === 0 && ((1 << (_la - 377)) & 3073) !== 0)) {
                        {
                        this.state = 3589;
                        this.complexColTypeList();
                        }
                    }

                    this.state = 3592;
                    this.match(SparkSqlParser.GT);
                    }
                    break;
                case SparkSqlParser.NEQ:
                    {
                    this.state = 3593;
                    this.match(SparkSqlParser.NEQ);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3596;
                this.match(SparkSqlParser.KW_INTERVAL);
                this.state = 3597;
                _la = this.tokenStream.LA(1);
                if(!(_la === 185 || _la === 347)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3600;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 462, this.context) ) {
                case 1:
                    {
                    this.state = 3598;
                    this.match(SparkSqlParser.KW_TO);
                    this.state = 3599;
                    this.match(SparkSqlParser.KW_MONTH);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3602;
                this.match(SparkSqlParser.KW_INTERVAL);
                this.state = 3603;
                _la = this.tokenStream.LA(1);
                if(!(_la === 67 || _la === 134 || _la === 183 || _la === 258)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3606;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 463, this.context) ) {
                case 1:
                    {
                    this.state = 3604;
                    this.match(SparkSqlParser.KW_TO);
                    this.state = 3605;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 134 || _la === 183 || _la === 258)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3608;
                this.type_();
                this.state = 3619;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 465, this.context) ) {
                case 1:
                    {
                    this.state = 3609;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3610;
                    this.match(SparkSqlParser.INTEGER_VALUE);
                    this.state = 3615;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3611;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3612;
                        this.match(SparkSqlParser.INTEGER_VALUE);
                        }
                        }
                        this.state = 3617;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3618;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionSeqForAdd(): QualifiedColTypeWithPositionSeqForAddContext {
        let localContext = new QualifiedColTypeWithPositionSeqForAddContext(this.context, this.state);
        this.enterRule(localContext, 318, SparkSqlParser.RULE_qualifiedColTypeWithPositionSeqForAdd);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3623;
            this.qualifiedColTypeWithPositionForAdd();
            this.state = 3628;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3624;
                this.match(SparkSqlParser.COMMA);
                this.state = 3625;
                this.qualifiedColTypeWithPositionForAdd();
                }
                }
                this.state = 3630;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionForAdd(): QualifiedColTypeWithPositionForAddContext {
        let localContext = new QualifiedColTypeWithPositionForAddContext(this.context, this.state);
        this.enterRule(localContext, 320, SparkSqlParser.RULE_qualifiedColTypeWithPositionForAdd);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3631;
            localContext._name = this.columnNameCreate();
            this.state = 3632;
            this.dataType();
            this.state = 3636;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 468, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3633;
                    this.colDefinitionDescriptorWithPosition();
                    }
                    }
                }
                this.state = 3638;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 468, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionSeqForReplace(): QualifiedColTypeWithPositionSeqForReplaceContext {
        let localContext = new QualifiedColTypeWithPositionSeqForReplaceContext(this.context, this.state);
        this.enterRule(localContext, 322, SparkSqlParser.RULE_qualifiedColTypeWithPositionSeqForReplace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3639;
            this.qualifiedColTypeWithPositionForReplace();
            this.state = 3644;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3640;
                this.match(SparkSqlParser.COMMA);
                this.state = 3641;
                this.qualifiedColTypeWithPositionForReplace();
                }
                }
                this.state = 3646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionForReplace(): QualifiedColTypeWithPositionForReplaceContext {
        let localContext = new QualifiedColTypeWithPositionForReplaceContext(this.context, this.state);
        this.enterRule(localContext, 324, SparkSqlParser.RULE_qualifiedColTypeWithPositionForReplace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3647;
            localContext._name = this.columnName();
            this.state = 3648;
            this.dataType();
            this.state = 3652;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 9 || _la === 51 || _la === 82 || _la === 116 || _la === 196) {
                {
                {
                this.state = 3649;
                this.colDefinitionDescriptorWithPosition();
                }
                }
                this.state = 3654;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext {
        let localContext = new ColDefinitionDescriptorWithPositionContext(this.context, this.state);
        this.enterRule(localContext, 326, SparkSqlParser.RULE_colDefinitionDescriptorWithPosition);
        try {
            this.state = 3660;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3655;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3656;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case SparkSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3657;
                this.defaultExpression();
                }
                break;
            case SparkSqlParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3658;
                this.commentSpec();
                }
                break;
            case SparkSqlParser.KW_AFTER:
            case SparkSqlParser.KW_FIRST:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3659;
                this.colPosition();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultExpression(): DefaultExpressionContext {
        let localContext = new DefaultExpressionContext(this.context, this.state);
        this.enterRule(localContext, 328, SparkSqlParser.RULE_defaultExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3662;
            this.match(SparkSqlParser.KW_DEFAULT);
            this.state = 3663;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDefaultExpression(): VariableDefaultExpressionContext {
        let localContext = new VariableDefaultExpressionContext(this.context, this.state);
        this.enterRule(localContext, 330, SparkSqlParser.RULE_variableDefaultExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3665;
            _la = this.tokenStream.LA(1);
            if(!(_la === 82 || _la === 351)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3666;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colTypeList(): ColTypeListContext {
        let localContext = new ColTypeListContext(this.context, this.state);
        this.enterRule(localContext, 332, SparkSqlParser.RULE_colTypeList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3668;
            this.colType();
            this.state = 3673;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 472, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3669;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3670;
                    this.colType();
                    }
                    }
                }
                this.state = 3675;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 472, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colType(): ColTypeContext {
        let localContext = new ColTypeContext(this.context, this.state);
        this.enterRule(localContext, 334, SparkSqlParser.RULE_colType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3676;
            localContext._colName = this.errorCapturingIdentifier();
            this.state = 3677;
            this.dataType();
            this.state = 3680;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 473, this.context) ) {
            case 1:
                {
                this.state = 3678;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3679;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            }
            this.state = 3683;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 474, this.context) ) {
            case 1:
                {
                this.state = 3682;
                this.commentSpec();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext {
        let localContext = new CreateOrReplaceTableColTypeListContext(this.context, this.state);
        this.enterRule(localContext, 336, SparkSqlParser.RULE_createOrReplaceTableColTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3685;
            this.createOrReplaceTableColType();
            this.state = 3690;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3686;
                this.match(SparkSqlParser.COMMA);
                this.state = 3687;
                this.createOrReplaceTableColType();
                }
                }
                this.state = 3692;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createOrReplaceTableColType(): CreateOrReplaceTableColTypeContext {
        let localContext = new CreateOrReplaceTableColTypeContext(this.context, this.state);
        this.enterRule(localContext, 338, SparkSqlParser.RULE_createOrReplaceTableColType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3693;
            localContext._colName = this.columnNameCreate();
            this.state = 3694;
            this.dataType();
            this.state = 3698;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 51 || _la === 82 || _la === 127 || _la === 196) {
                {
                {
                this.state = 3695;
                this.colDefinitionOption();
                }
                }
                this.state = 3700;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colDefinitionOption(): ColDefinitionOptionContext {
        let localContext = new ColDefinitionOptionContext(this.context, this.state);
        this.enterRule(localContext, 340, SparkSqlParser.RULE_colDefinitionOption);
        try {
            this.state = 3706;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3701;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3702;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case SparkSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3703;
                this.defaultExpression();
                }
                break;
            case SparkSqlParser.KW_GENERATED:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3704;
                this.generationExpression();
                }
                break;
            case SparkSqlParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3705;
                this.commentSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generationExpression(): GenerationExpressionContext {
        let localContext = new GenerationExpressionContext(this.context, this.state);
        this.enterRule(localContext, 342, SparkSqlParser.RULE_generationExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3708;
            this.match(SparkSqlParser.KW_GENERATED);
            this.state = 3709;
            this.match(SparkSqlParser.KW_ALWAYS);
            this.state = 3710;
            this.match(SparkSqlParser.KW_AS);
            this.state = 3711;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 3712;
            this.expression();
            this.state = 3713;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public complexColTypeList(): ComplexColTypeListContext {
        let localContext = new ComplexColTypeListContext(this.context, this.state);
        this.enterRule(localContext, 344, SparkSqlParser.RULE_complexColTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3715;
            this.complexColType();
            this.state = 3720;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3716;
                this.match(SparkSqlParser.COMMA);
                this.state = 3717;
                this.complexColType();
                }
                }
                this.state = 3722;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public complexColType(): ComplexColTypeContext {
        let localContext = new ComplexColTypeContext(this.context, this.state);
        this.enterRule(localContext, 346, SparkSqlParser.RULE_complexColType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3723;
            this.identifier();
            this.state = 3725;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 370) {
                {
                this.state = 3724;
                this.match(SparkSqlParser.COLON);
                }
            }

            this.state = 3727;
            this.dataType();
            this.state = 3730;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 196) {
                {
                this.state = 3728;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3729;
                this.match(SparkSqlParser.KW_NULL);
                }
            }

            this.state = 3733;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 3732;
                this.commentSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClause(): WhenClauseContext {
        let localContext = new WhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 348, SparkSqlParser.RULE_whenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3735;
            this.match(SparkSqlParser.KW_WHEN);
            this.state = 3736;
            localContext._condition = this.expression();
            this.state = 3737;
            this.match(SparkSqlParser.KW_THEN);
            this.state = 3738;
            localContext._result = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowClause(): WindowClauseContext {
        let localContext = new WindowClauseContext(this.context, this.state);
        this.enterRule(localContext, 350, SparkSqlParser.RULE_windowClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3740;
            this.match(SparkSqlParser.KW_WINDOW);
            this.state = 3741;
            this.namedWindow();
            this.state = 3746;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 482, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3742;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3743;
                    this.namedWindow();
                    }
                    }
                }
                this.state = 3748;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 482, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zorderClause(): ZorderClauseContext {
        let localContext = new ZorderClauseContext(this.context, this.state);
        this.enterRule(localContext, 352, SparkSqlParser.RULE_zorderClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3749;
            this.match(SparkSqlParser.KW_ZORDER);
            this.state = 3750;
            this.match(SparkSqlParser.KW_BY);
            this.state = 3751;
            this.columnNameSeq();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedWindow(): NamedWindowContext {
        let localContext = new NamedWindowContext(this.context, this.state);
        this.enterRule(localContext, 354, SparkSqlParser.RULE_namedWindow);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3753;
            localContext._name = this.errorCapturingIdentifier();
            this.state = 3754;
            this.match(SparkSqlParser.KW_AS);
            this.state = 3755;
            this.windowSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpec(): WindowSpecContext {
        let localContext = new WindowSpecContext(this.context, this.state);
        this.enterRule(localContext, 356, SparkSqlParser.RULE_windowSpec);
        let _la: number;
        try {
            this.state = 3803;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 490, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3757;
                localContext._name = this.errorCapturingIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3758;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3759;
                localContext._name = this.errorCapturingIdentifier();
                this.state = 3760;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3762;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3797;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_CLUSTER:
                    {
                    this.state = 3763;
                    this.match(SparkSqlParser.KW_CLUSTER);
                    this.state = 3764;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 3765;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    this.state = 3770;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3766;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3767;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        }
                        }
                        this.state = 3772;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case SparkSqlParser.RIGHT_PAREN:
                case SparkSqlParser.KW_DISTRIBUTE:
                case SparkSqlParser.KW_ORDER:
                case SparkSqlParser.KW_PARTITION:
                case SparkSqlParser.KW_RANGE:
                case SparkSqlParser.KW_ROWS:
                case SparkSqlParser.KW_SORT:
                    {
                    this.state = 3783;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 93 || _la === 216) {
                        {
                        this.state = 3773;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 93 || _la === 216)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3774;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 3775;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        this.state = 3780;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 3776;
                            this.match(SparkSqlParser.COMMA);
                            this.state = 3777;
                            localContext._expression = this.expression();
                            localContext._partition.push(localContext._expression);
                            }
                            }
                            this.state = 3782;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 3795;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 208 || _la === 277) {
                        {
                        this.state = 3785;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 208 || _la === 277)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3786;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 3787;
                        this.sortItem();
                        this.state = 3792;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 3788;
                            this.match(SparkSqlParser.COMMA);
                            this.state = 3789;
                            this.sortItem();
                            }
                            }
                            this.state = 3794;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3800;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232 || _la === 257) {
                    {
                    this.state = 3799;
                    this.windowFrame();
                    }
                }

                this.state = 3802;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrame(): WindowFrameContext {
        let localContext = new WindowFrameContext(this.context, this.state);
        this.enterRule(localContext, 358, SparkSqlParser.RULE_windowFrame);
        try {
            this.state = 3821;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 491, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3805;
                localContext._frameType = this.match(SparkSqlParser.KW_RANGE);
                this.state = 3806;
                localContext._start_ = this.frameBound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3807;
                localContext._frameType = this.match(SparkSqlParser.KW_ROWS);
                this.state = 3808;
                localContext._start_ = this.frameBound();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3809;
                localContext._frameType = this.match(SparkSqlParser.KW_RANGE);
                this.state = 3810;
                this.match(SparkSqlParser.KW_BETWEEN);
                this.state = 3811;
                localContext._start_ = this.frameBound();
                this.state = 3812;
                this.match(SparkSqlParser.KW_AND);
                this.state = 3813;
                localContext._end = this.frameBound();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3815;
                localContext._frameType = this.match(SparkSqlParser.KW_ROWS);
                this.state = 3816;
                this.match(SparkSqlParser.KW_BETWEEN);
                this.state = 3817;
                localContext._start_ = this.frameBound();
                this.state = 3818;
                this.match(SparkSqlParser.KW_AND);
                this.state = 3819;
                localContext._end = this.frameBound();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBound(): FrameBoundContext {
        let localContext = new FrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 360, SparkSqlParser.RULE_frameBound);
        let _la: number;
        try {
            this.state = 3830;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 492, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3823;
                this.match(SparkSqlParser.KW_UNBOUNDED);
                this.state = 3824;
                localContext._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 225)) {
                    localContext._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3825;
                localContext._boundType = this.match(SparkSqlParser.KW_CURRENT);
                this.state = 3826;
                this.match(SparkSqlParser.KW_ROW);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3827;
                this.expression();
                this.state = 3828;
                localContext._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 225)) {
                    localContext._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedNameList(): QualifiedNameListContext {
        let localContext = new QualifiedNameListContext(this.context, this.state);
        this.enterRule(localContext, 362, SparkSqlParser.RULE_qualifiedNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3832;
            this.qualifiedName();
            this.state = 3837;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3833;
                this.match(SparkSqlParser.COMMA);
                this.state = 3834;
                this.qualifiedName();
                }
                }
                this.state = 3839;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionName(): FunctionNameContext {
        let localContext = new FunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 364, SparkSqlParser.RULE_functionName);
        try {
            this.state = 3849;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 494, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3840;
                this.match(SparkSqlParser.KW_IDENTIFIER);
                this.state = 3841;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3842;
                this.expression();
                this.state = 3843;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3845;
                this.qualifiedName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3846;
                this.match(SparkSqlParser.KW_FILTER);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3847;
                this.match(SparkSqlParser.KW_LEFT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3848;
                this.match(SparkSqlParser.KW_RIGHT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        let localContext = new FunctionNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 366, SparkSqlParser.RULE_functionNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3851;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 368, SparkSqlParser.RULE_qualifiedName);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3853;
            this.identifier();
            this.state = 3858;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 495, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3854;
                    this.match(SparkSqlParser.DOT);
                    this.state = 3855;
                    this.identifier();
                    }
                    }
                }
                this.state = 3860;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 495, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        let localContext = new ErrorCapturingIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 370, SparkSqlParser.RULE_errorCapturingIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3861;
            this.identifier();
            this.state = 3862;
            this.errorCapturingIdentifierExtra();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
        let localContext = new ErrorCapturingIdentifierExtraContext(this.context, this.state);
        this.enterRule(localContext, 372, SparkSqlParser.RULE_errorCapturingIdentifierExtra);
        try {
            let alternative: number;
            this.state = 3871;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 497, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3866;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 3864;
                        this.match(SparkSqlParser.MINUS);
                        this.state = 3865;
                        this.identifier();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 3868;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 496, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 374, SparkSqlParser.RULE_identifier);
        try {
            this.state = 3875;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 498, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3873;
                this.strictIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3874;
                this.strictNonReserved();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public strictIdentifier(): StrictIdentifierContext {
        let localContext = new StrictIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 376, SparkSqlParser.RULE_strictIdentifier);
        try {
            this.state = 3881;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 499, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3877;
                this.match(SparkSqlParser.IDENTIFIER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3878;
                this.quotedIdentifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3879;
                this.ansiNonReserved();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3880;
                this.nonReserved();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotedIdentifier(): QuotedIdentifierContext {
        let localContext = new QuotedIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 378, SparkSqlParser.RULE_quotedIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3883;
            _la = this.tokenStream.LA(1);
            if(!(_la === 377 || _la === 388)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public backQuotedIdentifier(): BackQuotedIdentifierContext {
        let localContext = new BackQuotedIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 380, SparkSqlParser.RULE_backQuotedIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3885;
            this.match(SparkSqlParser.BACKQUOTED_IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 382, SparkSqlParser.RULE_number);
        let _la: number;
        try {
            this.state = 3927;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 510, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3888;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 3887;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3890;
                this.match(SparkSqlParser.EXPONENT_VALUE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3892;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 3891;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3894;
                this.match(SparkSqlParser.DECIMAL_VALUE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3896;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 3895;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3898;
                _la = this.tokenStream.LA(1);
                if(!(_la === 382 || _la === 383)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3900;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 3899;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3902;
                this.match(SparkSqlParser.INTEGER_VALUE);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3904;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 3903;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3906;
                this.match(SparkSqlParser.BIGINT_LITERAL);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3908;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 3907;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3910;
                this.match(SparkSqlParser.SMALLINT_LITERAL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3912;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 3911;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3914;
                this.match(SparkSqlParser.TINYINT_LITERAL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3916;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 3915;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3918;
                this.match(SparkSqlParser.DOUBLE_LITERAL);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3920;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 3919;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3922;
                this.match(SparkSqlParser.FLOAT_LITERAL);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3924;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 361) {
                    {
                    this.state = 3923;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3926;
                this.match(SparkSqlParser.BIGDECIMAL_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterColumnAction(): AlterColumnActionContext {
        let localContext = new AlterColumnActionContext(this.context, this.state);
        this.enterRule(localContext, 384, SparkSqlParser.RULE_alterColumnAction);
        let _la: number;
        try {
            this.state = 3940;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 511, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3929;
                this.match(SparkSqlParser.KW_TYPE);
                this.state = 3930;
                this.dataType();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3931;
                this.commentSpec();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3932;
                this.colPosition();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3933;
                localContext._setOrDrop = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 96 || _la === 268)) {
                    localContext._setOrDrop = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3934;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3935;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3936;
                this.match(SparkSqlParser.KW_SET);
                this.state = 3937;
                this.defaultExpression();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3938;
                localContext._dropDefault = this.match(SparkSqlParser.KW_DROP);
                this.state = 3939;
                this.match(SparkSqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringLit(): StringLitContext {
        let localContext = new StringLitContext(this.context, this.state);
        this.enterRule(localContext, 386, SparkSqlParser.RULE_stringLit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3942;
            _la = this.tokenStream.LA(1);
            if(!(_la === 376 || _la === 377)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comment(): CommentContext {
        let localContext = new CommentContext(this.context, this.state);
        this.enterRule(localContext, 388, SparkSqlParser.RULE_comment);
        try {
            this.state = 3946;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.STRING_LITERAL:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3944;
                this.stringLit();
                }
                break;
            case SparkSqlParser.KW_NULL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3945;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public version(): VersionContext {
        let localContext = new VersionContext(this.context, this.state);
        this.enterRule(localContext, 390, SparkSqlParser.RULE_version);
        try {
            this.state = 3950;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3948;
                this.match(SparkSqlParser.INTEGER_VALUE);
                }
                break;
            case SparkSqlParser.STRING_LITERAL:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3949;
                this.stringLit();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ansiNonReserved(): AnsiNonReservedContext {
        let localContext = new AnsiNonReservedContext(this.context, this.state);
        this.enterRule(localContext, 392, SparkSqlParser.RULE_ansiNonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3952;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4017011456) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 1711111143) !== 0) || ((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & 3187671039) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 1328796669) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 3852957567) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 805306367) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4020201927) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294442751) !== 0) || ((((_la - 263)) & ~0x1F) === 0 && ((1 << (_la - 263)) & 3758088175) !== 0) || ((((_la - 295)) & ~0x1F) === 0 && ((1 << (_la - 295)) & 3355402191) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 15892455) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public strictNonReserved(): StrictNonReservedContext {
        let localContext = new StrictNonReservedContext(this.context, this.state);
        this.enterRule(localContext, 394, SparkSqlParser.RULE_strictNonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3954;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 60 || _la === 102 || _la === 124 || ((((_la - 144)) & ~0x1F) === 0 && ((1 << (_la - 144)) & 149521) !== 0) || _la === 193 || _la === 202 || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 1064961) !== 0) || _la === 322 || _la === 331)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 396, SparkSqlParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3956;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294934272) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4026531839) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4026531775) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3085893631) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967293) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294966261) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4261412863) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294958975) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 2147481595) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 51:
            return this.queryTerm_sempred(localContext as QueryTermContext, predIndex);
        case 137:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 139:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 141:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        }
        return true;
    }
    private queryTerm_sempred(localContext: QueryTermContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 3);
        case 1:
            return this.precpred(this.context, 2);
        case 2:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 3:
            return this.precpred(this.context, 2);
        case 4:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return this.precpred(this.context, 6);
        case 6:
            return this.precpred(this.context, 5);
        case 7:
            return this.precpred(this.context, 4);
        case 8:
            return this.precpred(this.context, 3);
        case 9:
            return this.precpred(this.context, 2);
        case 10:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 11:
            return this.precpred(this.context, 9);
        case 12:
            return this.precpred(this.context, 7);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,392,3959,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,1,0,5,0,400,8,0,10,0,12,0,403,9,0,1,0,1,0,1,1,
        1,1,3,1,409,8,1,1,2,1,2,3,2,413,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,3,2,426,8,2,1,2,1,2,1,2,3,2,431,8,2,1,2,1,2,1,2,
        1,2,1,2,1,2,5,2,439,8,2,10,2,12,2,442,9,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,460,8,2,1,2,1,2,3,
        2,464,8,2,1,2,1,2,1,2,1,2,3,2,470,8,2,1,2,3,2,473,8,2,1,2,3,2,476,
        8,2,1,2,1,2,1,2,1,2,1,2,3,2,483,8,2,1,2,3,2,486,8,2,1,2,1,2,3,2,
        490,8,2,1,2,3,2,493,8,2,1,2,1,2,1,2,3,2,498,8,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,5,2,509,8,2,10,2,12,2,512,9,2,1,2,1,2,1,2,1,
        2,1,2,3,2,519,8,2,1,2,3,2,522,8,2,1,2,1,2,3,2,526,8,2,1,2,3,2,529,
        8,2,1,2,1,2,1,2,1,2,3,2,535,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,3,2,546,8,2,1,2,1,2,1,2,1,2,3,2,552,8,2,1,2,1,2,1,2,3,2,557,
        8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        3,2,590,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,600,8,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,611,8,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,3,2,622,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        633,8,2,1,2,1,2,1,2,3,2,638,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        647,8,2,1,2,1,2,3,2,651,8,2,1,2,1,2,1,2,1,2,3,2,657,8,2,1,2,1,2,
        3,2,661,8,2,1,2,1,2,1,2,3,2,666,8,2,1,2,1,2,1,2,1,2,3,2,672,8,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,684,8,2,1,2,1,2,1,2,
        1,2,1,2,1,2,3,2,692,8,2,1,2,1,2,1,2,1,2,3,2,698,8,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,3,2,709,8,2,1,2,1,2,3,2,713,8,2,1,2,4,2,
        716,8,2,11,2,12,2,717,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,3,2,733,8,2,1,2,1,2,3,2,737,8,2,1,2,1,2,1,2,5,2,742,8,
        2,10,2,12,2,745,9,2,1,2,3,2,748,8,2,1,2,1,2,1,2,1,2,3,2,754,8,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,783,8,2,1,2,1,2,
        3,2,787,8,2,1,2,1,2,1,2,3,2,792,8,2,1,2,1,2,1,2,1,2,1,2,3,2,799,
        8,2,1,2,1,2,1,2,1,2,3,2,805,8,2,1,2,3,2,808,8,2,1,2,3,2,811,8,2,
        1,2,1,2,3,2,815,8,2,1,2,1,2,3,2,819,8,2,1,2,1,2,1,2,1,2,1,2,1,2,
        5,2,827,8,2,10,2,12,2,830,9,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,838,8,
        2,1,2,3,2,841,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,850,8,2,1,2,1,
        2,1,2,3,2,855,8,2,1,2,1,2,1,2,1,2,3,2,861,8,2,1,2,1,2,1,2,1,2,1,
        2,3,2,868,8,2,1,2,3,2,871,8,2,1,2,1,2,3,2,875,8,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,5,2,884,8,2,10,2,12,2,887,9,2,3,2,889,8,2,1,2,1,2,
        1,2,1,2,3,2,895,8,2,1,2,1,2,3,2,899,8,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,914,8,2,10,2,12,2,917,9,2,1,2,1,
        2,1,2,1,2,1,2,3,2,924,8,2,1,2,1,2,3,2,928,8,2,1,2,1,2,1,2,1,2,3,
        2,934,8,2,1,2,3,2,937,8,2,1,2,1,2,3,2,941,8,2,1,2,3,2,944,8,2,1,
        2,1,2,1,2,1,2,3,2,950,8,2,1,2,1,2,1,2,3,2,955,8,2,1,2,1,2,3,2,959,
        8,2,1,2,1,2,1,2,1,2,1,2,3,2,966,8,2,1,2,3,2,969,8,2,1,2,3,2,972,
        8,2,1,2,1,2,1,2,1,2,1,2,3,2,979,8,2,1,2,1,2,1,2,3,2,984,8,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,3,2,993,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        1001,8,2,1,2,1,2,1,2,1,2,3,2,1007,8,2,1,2,3,2,1010,8,2,1,2,3,2,1013,
        8,2,1,2,1,2,1,2,1,2,3,2,1019,8,2,1,2,1,2,3,2,1023,8,2,1,2,1,2,1,
        2,3,2,1028,8,2,1,2,3,2,1031,8,2,1,2,1,2,3,2,1035,8,2,3,2,1037,8,
        2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1045,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
        2,1053,8,2,1,2,3,2,1056,8,2,1,2,1,2,1,2,1,2,1,2,3,2,1063,8,2,1,2,
        3,2,1066,8,2,1,2,3,2,1069,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1078,
        8,2,1,2,1,2,1,2,3,2,1083,8,2,1,2,1,2,1,2,1,2,3,2,1089,8,2,1,2,1,
        2,1,2,3,2,1094,8,2,1,2,3,2,1097,8,2,1,2,1,2,3,2,1101,8,2,1,2,3,2,
        1104,8,2,1,2,1,2,3,2,1108,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,
        2,1134,8,2,10,2,12,2,1137,9,2,3,2,1139,8,2,1,2,1,2,1,2,1,2,1,2,1,
        2,3,2,1147,8,2,1,2,1,2,1,2,1,2,3,2,1153,8,2,1,2,3,2,1156,8,2,1,2,
        3,2,1159,8,2,1,2,1,2,1,2,3,2,1164,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
        2,1172,8,2,1,2,1,2,1,2,3,2,1177,8,2,1,2,1,2,1,2,1,2,3,2,1183,8,2,
        1,2,1,2,1,2,1,2,3,2,1189,8,2,1,2,3,2,1192,8,2,1,2,1,2,1,2,1,2,1,
        2,3,2,1199,8,2,1,2,1,2,1,2,5,2,1204,8,2,10,2,12,2,1207,9,2,1,2,1,
        2,1,2,5,2,1212,8,2,10,2,12,2,1215,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,5,2,1229,8,2,10,2,12,2,1232,9,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,5,2,1256,8,2,10,2,12,2,1259,9,2,3,2,1261,8,2,1,2,1,
        2,5,2,1265,8,2,10,2,12,2,1268,9,2,1,2,1,2,1,2,1,2,5,2,1274,8,2,10,
        2,12,2,1277,9,2,1,2,1,2,1,2,1,2,5,2,1283,8,2,10,2,12,2,1286,9,2,
        1,2,1,2,1,2,3,2,1291,8,2,1,2,1,2,1,2,3,2,1296,8,2,1,2,1,2,1,2,3,
        2,1301,8,2,1,2,1,2,1,2,1,2,1,2,3,2,1308,8,2,1,2,1,2,1,2,3,2,1313,
        8,2,1,2,1,2,1,2,3,2,1318,8,2,1,2,1,2,1,2,1,2,1,2,3,2,1325,8,2,1,
        2,1,2,1,2,1,2,5,2,1331,8,2,10,2,12,2,1334,9,2,3,2,1336,8,2,1,3,1,
        3,3,3,1340,8,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1352,
        8,6,1,6,1,6,3,6,1356,8,6,1,6,1,6,1,6,1,6,1,6,3,6,1363,8,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,3,6,1479,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1487,8,6,1,6,1,6,1,6,
        1,6,1,6,1,6,3,6,1495,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1504,8,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1514,8,6,1,7,1,7,3,7,1518,
        8,7,1,7,3,7,1521,8,7,1,7,1,7,3,7,1525,8,7,1,7,1,7,1,8,1,8,3,8,1531,
        8,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,1543,8,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,1555,8,10,1,10,1,10,1,
        10,3,10,1560,8,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,3,13,1569,8,
        13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,1577,8,14,1,14,1,14,1,14,3,
        14,1582,8,14,3,14,1584,8,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1592,
        8,14,1,14,1,14,1,14,3,14,1597,8,14,1,14,1,14,3,14,1601,8,14,1,14,
        3,14,1604,8,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1612,8,14,1,14,
        1,14,1,14,3,14,1617,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,
        1626,8,14,1,14,1,14,1,14,3,14,1631,8,14,1,14,3,14,1634,8,14,1,14,
        1,14,1,14,3,14,1639,8,14,1,14,1,14,3,14,1643,8,14,1,14,1,14,1,14,
        3,14,1648,8,14,3,14,1650,8,14,1,15,1,15,3,15,1654,8,15,1,16,1,16,
        1,16,1,16,1,16,5,16,1661,8,16,10,16,12,16,1664,9,16,1,16,1,16,1,
        17,1,17,1,17,3,17,1671,8,17,1,17,1,17,1,17,1,17,3,17,1677,8,17,1,
        18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,1688,8,20,1,21,1,
        21,1,21,5,21,1693,8,21,10,21,12,21,1696,9,21,1,22,1,22,1,22,1,22,
        5,22,1702,8,22,10,22,12,22,1705,9,22,1,23,1,23,3,23,1709,8,23,1,
        23,3,23,1712,8,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,1734,8,
        25,10,25,12,25,1737,9,25,1,26,1,26,1,26,1,26,5,26,1743,8,26,10,26,
        12,26,1746,9,26,1,26,1,26,1,27,1,27,3,27,1752,8,27,1,27,3,27,1755,
        8,27,1,28,1,28,1,28,5,28,1760,8,28,10,28,12,28,1763,9,28,1,28,3,
        28,1766,8,28,1,29,1,29,1,29,1,29,3,29,1772,8,29,1,30,1,30,1,30,1,
        30,5,30,1778,8,30,10,30,12,30,1781,9,30,1,30,1,30,1,31,1,31,3,31,
        1787,8,31,1,31,3,31,1790,8,31,1,32,1,32,1,32,1,32,5,32,1796,8,32,
        10,32,12,32,1799,9,32,1,32,1,32,1,33,1,33,1,33,1,33,5,33,1807,8,
        33,10,33,12,33,1810,9,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,
        3,34,1820,8,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1828,8,35,1,36,
        1,36,1,36,1,36,3,36,1834,8,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,
        1,38,4,38,1844,8,38,11,38,12,38,1845,1,38,1,38,1,38,1,38,1,38,3,
        38,1853,8,38,1,38,1,38,1,38,1,38,1,38,3,38,1860,8,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1872,8,38,1,38,1,38,1,
        38,1,38,5,38,1878,8,38,10,38,12,38,1881,9,38,1,38,5,38,1884,8,38,
        10,38,12,38,1887,9,38,1,38,5,38,1890,8,38,10,38,12,38,1893,9,38,
        3,38,1895,8,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
        1,44,1,44,1,45,1,45,1,46,1,46,1,46,5,46,1914,8,46,10,46,12,46,1917,
        9,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1927,8,48,1,49,
        1,49,1,49,1,49,1,49,5,49,1934,8,49,10,49,12,49,1937,9,49,3,49,1939,
        8,49,1,49,1,49,1,49,1,49,1,49,5,49,1946,8,49,10,49,12,49,1949,9,
        49,3,49,1951,8,49,1,49,1,49,1,49,1,49,1,49,5,49,1958,8,49,10,49,
        12,49,1961,9,49,3,49,1963,8,49,1,49,1,49,1,49,1,49,1,49,5,49,1970,
        8,49,10,49,12,49,1973,9,49,3,49,1975,8,49,1,49,3,49,1978,8,49,1,
        49,1,49,1,49,3,49,1983,8,49,3,49,1985,8,49,1,49,1,49,3,49,1989,8,
        49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,2000,8,51,1,
        51,1,51,1,51,1,51,3,51,2006,8,51,1,51,1,51,1,51,1,51,3,51,2012,8,
        51,1,51,5,51,2015,8,51,10,51,12,51,2018,9,51,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,3,52,2029,8,52,1,53,1,53,3,53,2033,8,53,
        1,53,3,53,2036,8,53,1,53,1,53,3,53,2040,8,53,1,54,1,54,4,54,2044,
        8,54,11,54,12,54,2045,1,55,1,55,3,55,2050,8,55,1,55,1,55,1,55,1,
        55,5,55,2056,8,55,10,55,12,55,2059,9,55,1,55,3,55,2062,8,55,1,55,
        3,55,2065,8,55,1,55,3,55,2068,8,55,1,55,3,55,2071,8,55,1,55,1,55,
        3,55,2075,8,55,1,56,1,56,3,56,2079,8,56,1,56,5,56,2082,8,56,10,56,
        12,56,2085,9,56,1,56,3,56,2088,8,56,1,56,3,56,2091,8,56,1,56,3,56,
        2094,8,56,1,56,3,56,2097,8,56,1,56,1,56,3,56,2101,8,56,1,56,5,56,
        2104,8,56,10,56,12,56,2107,9,56,1,56,3,56,2110,8,56,1,56,3,56,2113,
        8,56,1,56,3,56,2116,8,56,1,56,3,56,2119,8,56,3,56,2121,8,56,1,57,
        1,57,1,57,1,57,3,57,2127,8,57,1,57,1,57,1,57,1,57,1,57,3,57,2134,
        8,57,1,57,1,57,1,57,3,57,2139,8,57,1,57,3,57,2142,8,57,1,57,3,57,
        2145,8,57,1,57,1,57,3,57,2149,8,57,1,57,1,57,1,57,1,57,1,57,1,57,
        1,57,1,57,3,57,2159,8,57,1,57,1,57,3,57,2163,8,57,3,57,2165,8,57,
        1,57,3,57,2168,8,57,1,57,1,57,3,57,2172,8,57,1,58,1,58,5,58,2176,
        8,58,10,58,12,58,2179,9,58,1,58,3,58,2182,8,58,1,58,1,58,1,59,1,
        59,1,59,1,60,1,60,1,60,1,60,3,60,2193,8,60,1,60,1,60,1,60,1,61,1,
        61,1,61,1,61,1,61,3,61,2203,8,61,1,61,1,61,3,61,2207,8,61,1,61,1,
        61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,2219,8,62,1,62,1,
        62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,2231,8,63,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2244,8,64,10,
        64,12,64,2247,9,64,1,64,1,64,3,64,2251,8,64,1,65,1,65,1,65,1,65,
        3,65,2257,8,65,1,66,1,66,1,66,5,66,2262,8,66,10,66,12,66,2265,9,
        66,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,
        70,3,70,2280,8,70,1,70,5,70,2283,8,70,10,70,12,70,2286,9,70,1,70,
        1,70,1,71,1,71,1,71,1,71,1,71,1,71,5,71,2296,8,71,10,71,12,71,2299,
        9,71,1,71,1,71,3,71,2303,8,71,1,72,1,72,1,72,1,72,5,72,2309,8,72,
        10,72,12,72,2312,9,72,1,72,5,72,2315,8,72,10,72,12,72,2318,9,72,
        1,72,3,72,2321,8,72,1,72,3,72,2324,8,72,1,73,1,73,1,74,3,74,2329,
        8,74,1,74,1,74,1,74,1,74,1,74,3,74,2336,8,74,1,74,1,74,1,74,1,74,
        3,74,2342,8,74,1,75,1,75,1,75,1,75,1,75,5,75,2349,8,75,10,75,12,
        75,2352,9,75,1,75,1,75,1,75,1,75,1,75,5,75,2359,8,75,10,75,12,75,
        2362,9,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,5,75,
        2374,8,75,10,75,12,75,2377,9,75,1,75,1,75,3,75,2381,8,75,3,75,2383,
        8,75,1,76,1,76,1,76,3,76,2388,8,76,1,77,1,77,1,77,1,77,1,77,5,77,
        2395,8,77,10,77,12,77,2398,9,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
        77,1,77,5,77,2408,8,77,10,77,12,77,2411,9,77,1,77,1,77,3,77,2415,
        8,77,1,78,1,78,3,78,2419,8,78,1,79,1,79,1,79,1,79,1,79,3,79,2426,
        8,79,1,79,1,79,1,79,3,79,2431,8,79,5,79,2433,8,79,10,79,12,79,2436,
        9,79,3,79,2438,8,79,1,79,3,79,2441,8,79,1,80,1,80,1,80,1,80,1,80,
        1,80,1,80,1,80,1,80,1,80,5,80,2453,8,80,10,80,12,80,2456,9,80,1,
        80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,5,81,2466,8,81,10,81,12,81,
        2469,9,81,1,81,1,81,3,81,2473,8,81,1,82,1,82,3,82,2477,8,82,1,82,
        3,82,2480,8,82,1,83,1,83,3,83,2484,8,83,1,83,1,83,1,83,1,83,3,83,
        2490,8,83,1,83,3,83,2493,8,83,1,84,1,84,1,84,1,85,1,85,3,85,2500,
        8,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,5,86,2510,8,86,10,86,
        12,86,2513,9,86,1,86,1,86,1,87,1,87,1,87,1,87,5,87,2521,8,87,10,
        87,12,87,2524,9,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,5,87,
        2534,8,87,10,87,12,87,2537,9,87,1,87,1,87,1,88,1,88,1,88,1,88,5,
        88,2545,8,88,10,88,12,88,2548,9,88,1,88,1,88,3,88,2552,8,88,1,89,
        1,89,1,90,1,90,1,91,1,91,3,91,2560,8,91,1,92,1,92,1,93,3,93,2565,
        8,93,1,93,1,93,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,96,1,96,1,96,
        3,96,2579,8,96,1,96,1,96,1,96,1,96,1,96,5,96,2586,8,96,10,96,12,
        96,2589,9,96,3,96,2591,8,96,1,96,1,96,1,96,3,96,2596,8,96,1,96,1,
        96,1,96,5,96,2601,8,96,10,96,12,96,2604,9,96,3,96,2606,8,96,1,97,
        1,97,1,98,3,98,2611,8,98,1,98,1,98,5,98,2615,8,98,10,98,12,98,2618,
        9,98,1,98,3,98,2621,8,98,1,99,1,99,1,99,3,99,2626,8,99,1,100,1,100,
        1,100,3,100,2631,8,100,1,100,1,100,3,100,2635,8,100,1,100,1,100,
        1,100,1,100,3,100,2641,8,100,1,100,1,100,3,100,2645,8,100,1,101,
        3,101,2648,8,101,1,101,1,101,1,101,3,101,2653,8,101,1,101,3,101,
        2656,8,101,1,101,1,101,1,101,3,101,2661,8,101,1,101,1,101,3,101,
        2665,8,101,1,101,3,101,2668,8,101,1,101,3,101,2671,8,101,1,102,1,
        102,1,102,1,102,3,102,2677,8,102,1,103,1,103,1,103,3,103,2682,8,
        103,1,103,1,103,1,103,1,103,1,103,3,103,2689,8,103,1,104,3,104,2692,
        8,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,1,104,3,104,2710,8,104,3,104,2712,
        8,104,1,104,3,104,2715,8,104,1,105,1,105,1,105,1,105,1,106,1,106,
        1,106,5,106,2724,8,106,10,106,12,106,2727,9,106,1,107,1,107,1,107,
        1,107,5,107,2733,8,107,10,107,12,107,2736,9,107,1,107,1,107,1,108,
        1,108,3,108,2742,8,108,1,109,1,109,1,109,1,109,5,109,2748,8,109,
        10,109,12,109,2751,9,109,1,109,1,109,1,110,1,110,3,110,2757,8,110,
        1,111,1,111,3,111,2761,8,111,1,111,3,111,2764,8,111,1,111,1,111,
        1,111,1,111,1,111,1,111,3,111,2772,8,111,1,111,1,111,1,111,1,111,
        1,111,1,111,3,111,2780,8,111,1,111,1,111,1,111,1,111,3,111,2786,
        8,111,1,112,1,112,1,112,1,112,5,112,2792,8,112,10,112,12,112,2795,
        9,112,1,112,1,112,1,113,1,113,1,113,3,113,2802,8,113,1,113,1,113,
        1,113,1,113,1,113,3,113,2809,8,113,1,113,1,113,1,113,1,113,1,113,
        3,113,2816,8,113,3,113,2818,8,113,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,5,114,2829,8,114,10,114,12,114,2832,9,114,
        1,114,1,114,1,114,3,114,2837,8,114,3,114,2839,8,114,1,114,1,114,
        1,114,1,114,1,114,1,114,5,114,2847,8,114,10,114,12,114,2850,9,114,
        1,114,1,114,1,114,3,114,2855,8,114,3,114,2857,8,114,1,115,1,115,
        1,115,1,115,1,116,1,116,3,116,2865,8,116,1,117,1,117,3,117,2869,
        8,117,1,118,1,118,1,118,1,118,1,118,5,118,2876,8,118,10,118,12,118,
        2879,9,118,3,118,2881,8,118,1,118,1,118,1,118,1,119,3,119,2887,8,
        119,1,119,1,119,3,119,2891,8,119,3,119,2893,8,119,1,120,1,120,1,
        120,1,120,1,120,1,120,1,120,3,120,2902,8,120,1,120,1,120,1,120,1,
        120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,2914,8,120,3,120,2916,
        8,120,1,120,1,120,1,120,1,120,1,120,3,120,2923,8,120,1,120,1,120,
        1,120,1,120,1,120,3,120,2930,8,120,1,120,1,120,1,120,1,120,3,120,
        2936,8,120,1,120,1,120,1,120,1,120,3,120,2942,8,120,3,120,2944,8,
        120,1,121,1,121,1,121,5,121,2949,8,121,10,121,12,121,2952,9,121,
        1,122,1,122,1,122,5,122,2957,8,122,10,122,12,122,2960,9,122,1,123,
        1,123,1,123,5,123,2965,8,123,10,123,12,123,2968,9,123,1,124,1,124,
        1,124,3,124,2973,8,124,1,125,1,125,1,125,3,125,2978,8,125,1,125,
        1,125,1,126,1,126,1,126,3,126,2985,8,126,1,126,1,126,1,127,1,127,
        3,127,2991,8,127,1,127,3,127,2994,8,127,1,127,1,127,3,127,2998,8,
        127,3,127,3000,8,127,1,128,1,128,1,128,5,128,3005,8,128,10,128,12,
        128,3008,9,128,1,129,1,129,1,129,1,129,5,129,3014,8,129,10,129,12,
        129,3017,9,129,1,129,1,129,1,130,1,130,3,130,3023,8,130,1,131,1,
        131,1,131,1,131,1,131,1,131,5,131,3031,8,131,10,131,12,131,3034,
        9,131,1,131,1,131,3,131,3038,8,131,1,132,1,132,3,132,3042,8,132,
        1,133,1,133,1,134,1,134,1,134,1,134,1,135,1,135,3,135,3052,8,135,
        1,136,1,136,1,136,5,136,3057,8,136,10,136,12,136,3060,9,136,1,137,
        1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,3,137,3072,
        8,137,3,137,3074,8,137,1,137,1,137,1,137,1,137,1,137,1,137,5,137,
        3082,8,137,10,137,12,137,3085,9,137,1,138,3,138,3088,8,138,1,138,
        1,138,1,138,1,138,1,138,1,138,3,138,3096,8,138,1,138,1,138,1,138,
        1,138,1,138,5,138,3103,8,138,10,138,12,138,3106,9,138,1,138,1,138,
        1,138,3,138,3111,8,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,
        3119,8,138,1,138,1,138,1,138,3,138,3124,8,138,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,5,138,3134,8,138,10,138,12,138,3137,
        9,138,1,138,1,138,3,138,3141,8,138,1,138,3,138,3144,8,138,1,138,
        1,138,1,138,1,138,3,138,3150,8,138,1,138,1,138,3,138,3154,8,138,
        1,138,1,138,1,138,3,138,3159,8,138,1,138,1,138,1,138,3,138,3164,
        8,138,1,138,1,138,1,138,3,138,3169,8,138,1,139,1,139,1,139,1,139,
        3,139,3175,8,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        5,139,3196,8,139,10,139,12,139,3199,9,139,1,140,1,140,1,141,1,141,
        1,141,1,141,1,141,1,141,3,141,3209,8,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,3,141,3221,8,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,4,141,3231,8,141,11,141,12,141,
        3232,1,141,1,141,3,141,3237,8,141,1,141,1,141,1,141,1,141,1,141,
        4,141,3244,8,141,11,141,12,141,3245,1,141,1,141,3,141,3250,8,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,5,141,3266,8,141,10,141,12,141,3269,9,141,3,141,
        3271,8,141,1,141,1,141,1,141,1,141,1,141,1,141,3,141,3279,8,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,3,141,3288,8,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,3,141,3297,8,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,4,141,3318,8,141,11,141,12,141,
        3319,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,3,141,3336,8,141,1,141,1,141,1,141,5,141,
        3341,8,141,10,141,12,141,3344,9,141,3,141,3346,8,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,3,141,3355,8,141,1,141,1,141,3,141,
        3359,8,141,1,141,1,141,3,141,3363,8,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,4,141,3373,8,141,11,141,12,141,3374,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        3,141,3400,8,141,1,141,1,141,1,141,1,141,1,141,3,141,3407,8,141,
        1,141,3,141,3410,8,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,3,141,3425,8,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,3,141,3446,8,141,1,141,1,141,
        3,141,3450,8,141,3,141,3452,8,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,5,141,3462,8,141,10,141,12,141,3465,9,141,1,142,
        1,142,1,142,1,142,1,142,1,142,1,142,3,142,3474,8,142,1,143,1,143,
        1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,4,143,3487,
        8,143,11,143,12,143,3488,3,143,3491,8,143,1,144,1,144,1,145,1,145,
        1,146,1,146,1,147,1,147,1,148,1,148,1,148,3,148,3504,8,148,1,149,
        1,149,3,149,3508,8,149,1,150,1,150,1,150,4,150,3513,8,150,11,150,
        12,150,3514,1,151,1,151,1,151,3,151,3520,8,151,1,152,1,152,1,152,
        1,152,1,152,1,153,3,153,3528,8,153,1,153,1,153,1,153,3,153,3533,
        8,153,1,154,1,154,1,155,1,155,1,156,1,156,1,156,3,156,3542,8,156,
        1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,3,157,3574,8,157,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,1,158,3,158,3591,8,158,1,158,1,158,3,158,3595,
        8,158,1,158,1,158,1,158,1,158,3,158,3601,8,158,1,158,1,158,1,158,
        1,158,3,158,3607,8,158,1,158,1,158,1,158,1,158,1,158,5,158,3614,
        8,158,10,158,12,158,3617,9,158,1,158,3,158,3620,8,158,3,158,3622,
        8,158,1,159,1,159,1,159,5,159,3627,8,159,10,159,12,159,3630,9,159,
        1,160,1,160,1,160,5,160,3635,8,160,10,160,12,160,3638,9,160,1,161,
        1,161,1,161,5,161,3643,8,161,10,161,12,161,3646,9,161,1,162,1,162,
        1,162,5,162,3651,8,162,10,162,12,162,3654,9,162,1,163,1,163,1,163,
        1,163,1,163,3,163,3661,8,163,1,164,1,164,1,164,1,165,1,165,1,165,
        1,166,1,166,1,166,5,166,3672,8,166,10,166,12,166,3675,9,166,1,167,
        1,167,1,167,1,167,3,167,3681,8,167,1,167,3,167,3684,8,167,1,168,
        1,168,1,168,5,168,3689,8,168,10,168,12,168,3692,9,168,1,169,1,169,
        1,169,5,169,3697,8,169,10,169,12,169,3700,9,169,1,170,1,170,1,170,
        1,170,1,170,3,170,3707,8,170,1,171,1,171,1,171,1,171,1,171,1,171,
        1,171,1,172,1,172,1,172,5,172,3719,8,172,10,172,12,172,3722,9,172,
        1,173,1,173,3,173,3726,8,173,1,173,1,173,1,173,3,173,3731,8,173,
        1,173,3,173,3734,8,173,1,174,1,174,1,174,1,174,1,174,1,175,1,175,
        1,175,1,175,5,175,3745,8,175,10,175,12,175,3748,9,175,1,176,1,176,
        1,176,1,176,1,177,1,177,1,177,1,177,1,178,1,178,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,1,178,5,178,3769,8,178,10,178,12,178,
        3772,9,178,1,178,1,178,1,178,1,178,1,178,5,178,3779,8,178,10,178,
        12,178,3782,9,178,3,178,3784,8,178,1,178,1,178,1,178,1,178,1,178,
        5,178,3791,8,178,10,178,12,178,3794,9,178,3,178,3796,8,178,3,178,
        3798,8,178,1,178,3,178,3801,8,178,1,178,3,178,3804,8,178,1,179,1,
        179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
        1,179,1,179,1,179,1,179,3,179,3822,8,179,1,180,1,180,1,180,1,180,
        1,180,1,180,1,180,3,180,3831,8,180,1,181,1,181,1,181,5,181,3836,
        8,181,10,181,12,181,3839,9,181,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,182,3,182,3850,8,182,1,183,1,183,1,184,1,184,1,184,
        5,184,3857,8,184,10,184,12,184,3860,9,184,1,185,1,185,1,185,1,186,
        1,186,4,186,3867,8,186,11,186,12,186,3868,1,186,3,186,3872,8,186,
        1,187,1,187,3,187,3876,8,187,1,188,1,188,1,188,1,188,3,188,3882,
        8,188,1,189,1,189,1,190,1,190,1,191,3,191,3889,8,191,1,191,1,191,
        3,191,3893,8,191,1,191,1,191,3,191,3897,8,191,1,191,1,191,3,191,
        3901,8,191,1,191,1,191,3,191,3905,8,191,1,191,1,191,3,191,3909,8,
        191,1,191,1,191,3,191,3913,8,191,1,191,1,191,3,191,3917,8,191,1,
        191,1,191,3,191,3921,8,191,1,191,1,191,3,191,3925,8,191,1,191,3,
        191,3928,8,191,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,
        192,1,192,1,192,3,192,3941,8,192,1,193,1,193,1,194,1,194,3,194,3947,
        8,194,1,195,1,195,3,195,3951,8,195,1,196,1,196,1,197,1,197,1,198,
        1,198,1,198,9,1135,1205,1213,1230,1257,1266,1275,1284,1332,4,102,
        274,278,282,199,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
        36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
        80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
        118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
        150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
        182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
        214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
        246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,
        278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,
        310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,
        342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,
        374,376,378,380,382,384,386,388,390,392,394,396,0,64,2,0,78,78,228,
        228,2,0,34,34,246,246,2,0,123,123,140,140,2,0,11,11,39,39,2,0,91,
        91,98,98,5,0,46,46,58,58,108,108,122,122,172,172,1,0,86,87,2,0,108,
        108,122,122,3,0,8,8,96,96,288,288,2,0,8,8,166,166,1,0,334,335,3,
        0,72,72,189,189,260,260,3,0,73,73,190,190,261,261,4,0,102,102,148,
        148,269,269,322,322,3,0,102,102,269,269,322,322,2,0,21,21,86,86,
        2,0,116,116,157,157,3,0,10,10,289,289,330,330,2,0,291,291,336,336,
        2,0,290,290,302,302,2,0,61,61,255,255,2,0,104,104,141,141,2,0,10,
        10,92,92,2,0,381,381,383,383,2,0,93,93,216,216,2,0,208,208,277,277,
        2,0,196,196,359,359,1,0,250,251,1,0,162,163,3,0,10,10,16,16,276,
        276,3,0,111,111,315,315,324,324,2,0,360,361,365,365,2,0,94,94,362,
        364,2,0,360,361,368,368,11,0,67,67,69,69,134,134,179,179,181,181,
        183,183,185,185,230,230,258,258,340,340,347,347,4,0,63,63,65,66,
        267,267,330,330,2,0,74,75,305,305,3,0,76,77,301,301,306,306,2,0,
        36,36,317,317,2,0,138,138,245,245,1,0,286,287,2,0,4,4,123,123,2,
        0,4,4,119,119,3,0,28,28,160,160,310,310,1,0,219,220,1,0,351,358,
        2,0,94,94,360,369,4,0,14,14,140,140,196,196,207,207,2,0,111,111,
        315,315,1,0,360,361,7,0,67,68,134,135,179,186,191,192,258,259,340,
        341,347,348,6,0,67,67,134,134,183,183,185,185,258,258,347,347,2,
        0,185,185,347,347,4,0,67,67,134,134,183,183,258,258,3,0,134,134,
        183,183,258,258,2,0,82,82,351,351,2,0,118,118,225,225,2,0,377,377,
        388,388,1,0,382,383,2,0,96,96,268,268,1,0,376,377,52,0,8,9,11,13,
        15,15,17,19,21,22,24,27,29,34,37,41,43,46,48,48,50,56,58,58,61,62,
        67,91,93,96,98,98,101,101,103,110,113,113,115,118,121,122,125,128,
        131,131,133,139,141,143,145,147,149,151,154,154,156,157,159,159,
        162,192,194,194,198,200,204,206,209,209,211,212,214,218,221,225,
        227,237,239,248,250,261,263,266,268,275,277,291,293,298,301,307,
        309,309,311,321,325,329,332,341,344,344,347,350,16,0,15,15,60,60,
        102,102,124,124,144,144,148,148,155,155,158,158,161,161,193,193,
        202,202,249,249,263,263,269,269,322,322,331,331,18,0,8,14,16,59,
        61,101,103,123,125,143,145,147,149,154,156,157,159,160,162,192,194,
        194,196,201,203,248,250,262,264,268,270,321,323,330,332,350,4570,
        0,401,1,0,0,0,2,406,1,0,0,0,4,1335,1,0,0,0,6,1339,1,0,0,0,8,1341,
        1,0,0,0,10,1343,1,0,0,0,12,1513,1,0,0,0,14,1515,1,0,0,0,16,1530,
        1,0,0,0,18,1536,1,0,0,0,20,1548,1,0,0,0,22,1561,1,0,0,0,24,1564,
        1,0,0,0,26,1568,1,0,0,0,28,1649,1,0,0,0,30,1651,1,0,0,0,32,1655,
        1,0,0,0,34,1676,1,0,0,0,36,1678,1,0,0,0,38,1680,1,0,0,0,40,1687,
        1,0,0,0,42,1689,1,0,0,0,44,1697,1,0,0,0,46,1706,1,0,0,0,48,1717,
        1,0,0,0,50,1735,1,0,0,0,52,1738,1,0,0,0,54,1749,1,0,0,0,56,1765,
        1,0,0,0,58,1771,1,0,0,0,60,1773,1,0,0,0,62,1784,1,0,0,0,64,1791,
        1,0,0,0,66,1802,1,0,0,0,68,1819,1,0,0,0,70,1827,1,0,0,0,72,1829,
        1,0,0,0,74,1835,1,0,0,0,76,1894,1,0,0,0,78,1896,1,0,0,0,80,1898,
        1,0,0,0,82,1900,1,0,0,0,84,1902,1,0,0,0,86,1904,1,0,0,0,88,1906,
        1,0,0,0,90,1908,1,0,0,0,92,1910,1,0,0,0,94,1918,1,0,0,0,96,1926,
        1,0,0,0,98,1938,1,0,0,0,100,1990,1,0,0,0,102,1993,1,0,0,0,104,2028,
        1,0,0,0,106,2032,1,0,0,0,108,2041,1,0,0,0,110,2074,1,0,0,0,112,2120,
        1,0,0,0,114,2141,1,0,0,0,116,2173,1,0,0,0,118,2185,1,0,0,0,120,2188,
        1,0,0,0,122,2197,1,0,0,0,124,2211,1,0,0,0,126,2230,1,0,0,0,128,2250,
        1,0,0,0,130,2256,1,0,0,0,132,2258,1,0,0,0,134,2266,1,0,0,0,136,2270,
        1,0,0,0,138,2273,1,0,0,0,140,2276,1,0,0,0,142,2302,1,0,0,0,144,2304,
        1,0,0,0,146,2325,1,0,0,0,148,2341,1,0,0,0,150,2382,1,0,0,0,152,2387,
        1,0,0,0,154,2414,1,0,0,0,156,2418,1,0,0,0,158,2440,1,0,0,0,160,2442,
        1,0,0,0,162,2472,1,0,0,0,164,2474,1,0,0,0,166,2481,1,0,0,0,168,2494,
        1,0,0,0,170,2499,1,0,0,0,172,2501,1,0,0,0,174,2516,1,0,0,0,176,2540,
        1,0,0,0,178,2553,1,0,0,0,180,2555,1,0,0,0,182,2557,1,0,0,0,184,2561,
        1,0,0,0,186,2564,1,0,0,0,188,2568,1,0,0,0,190,2572,1,0,0,0,192,2575,
        1,0,0,0,194,2607,1,0,0,0,196,2620,1,0,0,0,198,2625,1,0,0,0,200,2644,
        1,0,0,0,202,2670,1,0,0,0,204,2676,1,0,0,0,206,2678,1,0,0,0,208,2714,
        1,0,0,0,210,2716,1,0,0,0,212,2720,1,0,0,0,214,2728,1,0,0,0,216,2739,
        1,0,0,0,218,2743,1,0,0,0,220,2754,1,0,0,0,222,2785,1,0,0,0,224,2787,
        1,0,0,0,226,2817,1,0,0,0,228,2838,1,0,0,0,230,2858,1,0,0,0,232,2864,
        1,0,0,0,234,2868,1,0,0,0,236,2870,1,0,0,0,238,2892,1,0,0,0,240,2943,
        1,0,0,0,242,2945,1,0,0,0,244,2953,1,0,0,0,246,2961,1,0,0,0,248,2969,
        1,0,0,0,250,2977,1,0,0,0,252,2984,1,0,0,0,254,2990,1,0,0,0,256,3001,
        1,0,0,0,258,3009,1,0,0,0,260,3022,1,0,0,0,262,3037,1,0,0,0,264,3041,
        1,0,0,0,266,3043,1,0,0,0,268,3045,1,0,0,0,270,3051,1,0,0,0,272,3053,
        1,0,0,0,274,3073,1,0,0,0,276,3168,1,0,0,0,278,3174,1,0,0,0,280,3200,
        1,0,0,0,282,3451,1,0,0,0,284,3473,1,0,0,0,286,3490,1,0,0,0,288,3492,
        1,0,0,0,290,3494,1,0,0,0,292,3496,1,0,0,0,294,3498,1,0,0,0,296,3500,
        1,0,0,0,298,3505,1,0,0,0,300,3512,1,0,0,0,302,3516,1,0,0,0,304,3521,
        1,0,0,0,306,3527,1,0,0,0,308,3534,1,0,0,0,310,3536,1,0,0,0,312,3541,
        1,0,0,0,314,3573,1,0,0,0,316,3621,1,0,0,0,318,3623,1,0,0,0,320,3631,
        1,0,0,0,322,3639,1,0,0,0,324,3647,1,0,0,0,326,3660,1,0,0,0,328,3662,
        1,0,0,0,330,3665,1,0,0,0,332,3668,1,0,0,0,334,3676,1,0,0,0,336,3685,
        1,0,0,0,338,3693,1,0,0,0,340,3706,1,0,0,0,342,3708,1,0,0,0,344,3715,
        1,0,0,0,346,3723,1,0,0,0,348,3735,1,0,0,0,350,3740,1,0,0,0,352,3749,
        1,0,0,0,354,3753,1,0,0,0,356,3803,1,0,0,0,358,3821,1,0,0,0,360,3830,
        1,0,0,0,362,3832,1,0,0,0,364,3849,1,0,0,0,366,3851,1,0,0,0,368,3853,
        1,0,0,0,370,3861,1,0,0,0,372,3871,1,0,0,0,374,3875,1,0,0,0,376,3881,
        1,0,0,0,378,3883,1,0,0,0,380,3885,1,0,0,0,382,3927,1,0,0,0,384,3940,
        1,0,0,0,386,3942,1,0,0,0,388,3946,1,0,0,0,390,3950,1,0,0,0,392,3952,
        1,0,0,0,394,3954,1,0,0,0,396,3956,1,0,0,0,398,400,3,2,1,0,399,398,
        1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,
        1,0,0,0,403,401,1,0,0,0,404,405,5,0,0,1,405,1,1,0,0,0,406,408,3,
        4,2,0,407,409,5,1,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,3,1,0,
        0,0,410,1336,3,26,13,0,411,413,3,44,22,0,412,411,1,0,0,0,412,413,
        1,0,0,0,413,414,1,0,0,0,414,1336,3,76,38,0,415,416,5,329,0,0,416,
        1336,3,78,39,0,417,418,5,329,0,0,418,419,3,36,18,0,419,420,3,78,
        39,0,420,1336,1,0,0,0,421,422,5,268,0,0,422,425,5,37,0,0,423,426,
        3,374,187,0,424,426,3,386,193,0,425,423,1,0,0,0,425,424,1,0,0,0,
        426,1336,1,0,0,0,427,428,5,59,0,0,428,430,3,36,18,0,429,431,3,188,
        94,0,430,429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,440,3,80,
        40,0,433,439,3,24,12,0,434,439,3,22,11,0,435,436,5,345,0,0,436,437,
        7,0,0,0,437,439,3,52,26,0,438,433,1,0,0,0,438,434,1,0,0,0,438,435,
        1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,1336,
        1,0,0,0,442,440,1,0,0,0,443,444,5,11,0,0,444,445,3,36,18,0,445,446,
        3,78,39,0,446,447,5,268,0,0,447,448,7,0,0,0,448,449,3,52,26,0,449,
        1336,1,0,0,0,450,451,5,11,0,0,451,452,3,36,18,0,452,453,3,78,39,
        0,453,454,5,268,0,0,454,455,3,22,11,0,455,1336,1,0,0,0,456,457,5,
        96,0,0,457,459,3,36,18,0,458,460,3,190,95,0,459,458,1,0,0,0,459,
        460,1,0,0,0,460,461,1,0,0,0,461,463,3,78,39,0,462,464,7,1,0,0,463,
        462,1,0,0,0,463,464,1,0,0,0,464,1336,1,0,0,0,465,466,5,272,0,0,466,
        469,3,38,19,0,467,468,7,2,0,0,468,470,3,244,122,0,469,467,1,0,0,
        0,469,470,1,0,0,0,470,475,1,0,0,0,471,473,5,162,0,0,472,471,1,0,
        0,0,472,473,1,0,0,0,473,474,1,0,0,0,474,476,3,386,193,0,475,472,
        1,0,0,0,475,476,1,0,0,0,476,1336,1,0,0,0,477,482,3,14,7,0,478,479,
        5,2,0,0,479,480,3,336,168,0,480,481,5,3,0,0,481,483,1,0,0,0,482,
        478,1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,486,3,48,24,0,485,
        484,1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,492,3,50,25,0,488,
        490,5,20,0,0,489,488,1,0,0,0,489,490,1,0,0,0,490,491,1,0,0,0,491,
        493,3,26,13,0,492,489,1,0,0,0,492,493,1,0,0,0,493,1336,1,0,0,0,494,
        495,5,59,0,0,495,497,5,292,0,0,496,498,3,188,94,0,497,496,1,0,0,
        0,497,498,1,0,0,0,498,499,1,0,0,0,499,500,3,82,41,0,500,501,5,162,
        0,0,501,510,3,84,42,0,502,509,3,48,24,0,503,509,3,240,120,0,504,
        509,3,68,34,0,505,509,3,22,11,0,506,507,5,296,0,0,507,509,3,52,26,
        0,508,502,1,0,0,0,508,503,1,0,0,0,508,504,1,0,0,0,508,505,1,0,0,
        0,508,506,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,
        0,511,1336,1,0,0,0,512,510,1,0,0,0,513,518,3,16,8,0,514,515,5,2,
        0,0,515,516,3,336,168,0,516,517,5,3,0,0,517,519,1,0,0,0,518,514,
        1,0,0,0,518,519,1,0,0,0,519,521,1,0,0,0,520,522,3,48,24,0,521,520,
        1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,528,3,50,25,0,524,526,
        5,20,0,0,525,524,1,0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,527,529,
        3,26,13,0,528,525,1,0,0,0,528,529,1,0,0,0,529,1336,1,0,0,0,530,531,
        5,13,0,0,531,532,5,292,0,0,532,534,3,84,42,0,533,535,3,32,16,0,534,
        533,1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,537,5,55,0,0,537,
        545,5,281,0,0,538,546,5,195,0,0,539,540,5,119,0,0,540,541,5,50,0,
        0,541,546,3,92,46,0,542,543,5,119,0,0,543,544,5,10,0,0,544,546,5,
        50,0,0,545,538,1,0,0,0,545,539,1,0,0,0,545,542,1,0,0,0,545,546,1,
        0,0,0,546,1336,1,0,0,0,547,548,5,13,0,0,548,551,5,293,0,0,549,550,
        7,2,0,0,550,552,3,78,39,0,551,549,1,0,0,0,551,552,1,0,0,0,552,553,
        1,0,0,0,553,554,5,55,0,0,554,556,5,281,0,0,555,557,5,195,0,0,556,
        555,1,0,0,0,556,557,1,0,0,0,557,1336,1,0,0,0,558,559,5,11,0,0,559,
        560,5,292,0,0,560,561,3,84,42,0,561,562,5,8,0,0,562,563,5,49,0,0,
        563,564,3,320,160,0,564,1336,1,0,0,0,565,566,5,11,0,0,566,567,5,
        292,0,0,567,568,3,84,42,0,568,569,5,8,0,0,569,570,5,50,0,0,570,571,
        5,2,0,0,571,572,3,318,159,0,572,573,5,3,0,0,573,1336,1,0,0,0,574,
        575,5,11,0,0,575,576,5,292,0,0,576,577,3,84,42,0,577,578,5,240,0,
        0,578,579,5,49,0,0,579,580,3,90,45,0,580,581,5,308,0,0,581,582,3,
        94,47,0,582,1336,1,0,0,0,583,584,5,11,0,0,584,585,5,292,0,0,585,
        586,3,84,42,0,586,587,5,96,0,0,587,589,5,49,0,0,588,590,3,190,95,
        0,589,588,1,0,0,0,589,590,1,0,0,0,590,591,1,0,0,0,591,592,3,90,45,
        0,592,1336,1,0,0,0,593,594,5,11,0,0,594,595,5,292,0,0,595,596,3,
        84,42,0,596,597,5,96,0,0,597,599,5,50,0,0,598,600,3,190,95,0,599,
        598,1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,602,5,2,0,0,602,
        603,3,92,46,0,603,604,5,3,0,0,604,1336,1,0,0,0,605,610,5,11,0,0,
        606,607,5,292,0,0,607,611,3,84,42,0,608,609,5,337,0,0,609,611,3,
        88,44,0,610,606,1,0,0,0,610,608,1,0,0,0,611,612,1,0,0,0,612,613,
        5,240,0,0,613,614,5,308,0,0,614,615,3,244,122,0,615,1336,1,0,0,0,
        616,621,5,11,0,0,617,618,5,292,0,0,618,622,3,84,42,0,619,620,5,337,
        0,0,620,622,3,88,44,0,621,617,1,0,0,0,621,619,1,0,0,0,622,623,1,
        0,0,0,623,624,5,268,0,0,624,625,5,296,0,0,625,626,3,52,26,0,626,
        1336,1,0,0,0,627,632,5,11,0,0,628,629,5,292,0,0,629,633,3,84,42,
        0,630,631,5,337,0,0,631,633,3,88,44,0,632,628,1,0,0,0,632,630,1,
        0,0,0,633,634,1,0,0,0,634,635,5,327,0,0,635,637,5,296,0,0,636,638,
        3,190,95,0,637,636,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,640,
        3,52,26,0,640,1336,1,0,0,0,641,642,5,11,0,0,642,643,5,292,0,0,643,
        644,3,84,42,0,644,646,7,3,0,0,645,647,5,49,0,0,646,645,1,0,0,0,646,
        647,1,0,0,0,647,648,1,0,0,0,648,650,3,90,45,0,649,651,3,384,192,
        0,650,649,1,0,0,0,650,651,1,0,0,0,651,1336,1,0,0,0,652,653,5,11,
        0,0,653,654,5,292,0,0,654,656,3,84,42,0,655,657,3,32,16,0,656,655,
        1,0,0,0,656,657,1,0,0,0,657,658,1,0,0,0,658,660,5,39,0,0,659,661,
        5,49,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,662,1,0,0,0,662,663,
        3,90,45,0,663,665,3,334,167,0,664,666,3,312,156,0,665,664,1,0,0,
        0,665,666,1,0,0,0,666,1336,1,0,0,0,667,668,5,11,0,0,668,669,5,292,
        0,0,669,671,3,84,42,0,670,672,3,32,16,0,671,670,1,0,0,0,671,672,
        1,0,0,0,672,673,1,0,0,0,673,674,5,243,0,0,674,675,5,50,0,0,675,676,
        5,2,0,0,676,677,3,322,161,0,677,678,5,3,0,0,678,1336,1,0,0,0,679,
        680,5,11,0,0,680,681,5,292,0,0,681,683,3,84,42,0,682,684,3,32,16,
        0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,5,268,
        0,0,686,687,5,265,0,0,687,691,3,386,193,0,688,689,5,345,0,0,689,
        690,5,266,0,0,690,692,3,52,26,0,691,688,1,0,0,0,691,692,1,0,0,0,
        692,1336,1,0,0,0,693,694,5,11,0,0,694,695,5,292,0,0,695,697,3,84,
        42,0,696,698,3,32,16,0,697,696,1,0,0,0,697,698,1,0,0,0,698,699,1,
        0,0,0,699,700,5,268,0,0,700,701,5,266,0,0,701,702,3,52,26,0,702,
        1336,1,0,0,0,703,708,5,11,0,0,704,705,5,292,0,0,705,709,3,84,42,
        0,706,707,5,337,0,0,707,709,3,88,44,0,708,704,1,0,0,0,708,706,1,
        0,0,0,709,710,1,0,0,0,710,712,5,8,0,0,711,713,3,188,94,0,712,711,
        1,0,0,0,712,713,1,0,0,0,713,715,1,0,0,0,714,716,3,30,15,0,715,714,
        1,0,0,0,716,717,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,1336,
        1,0,0,0,719,720,5,11,0,0,720,721,5,292,0,0,721,722,3,84,42,0,722,
        723,3,32,16,0,723,724,5,240,0,0,724,725,5,308,0,0,725,726,3,32,16,
        0,726,1336,1,0,0,0,727,732,5,11,0,0,728,729,5,292,0,0,729,733,3,
        84,42,0,730,731,5,337,0,0,731,733,3,88,44,0,732,728,1,0,0,0,732,
        730,1,0,0,0,733,734,1,0,0,0,734,736,5,96,0,0,735,737,3,190,95,0,
        736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,743,3,32,16,
        0,739,740,5,4,0,0,740,742,3,32,16,0,741,739,1,0,0,0,742,745,1,0,
        0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,747,1,0,0,0,745,743,1,0,
        0,0,746,748,5,229,0,0,747,746,1,0,0,0,747,748,1,0,0,0,748,1336,1,
        0,0,0,749,750,5,11,0,0,750,751,5,292,0,0,751,753,3,84,42,0,752,754,
        3,32,16,0,753,752,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,756,
        5,268,0,0,756,757,3,22,11,0,757,1336,1,0,0,0,758,759,5,11,0,0,759,
        760,5,292,0,0,760,761,3,84,42,0,761,762,5,236,0,0,762,763,5,218,
        0,0,763,1336,1,0,0,0,764,765,5,11,0,0,765,766,5,175,0,0,766,767,
        5,337,0,0,767,768,3,88,44,0,768,769,7,4,0,0,769,770,5,247,0,0,770,
        1336,1,0,0,0,771,772,5,11,0,0,772,773,5,175,0,0,773,774,5,337,0,
        0,774,775,3,88,44,0,775,776,5,268,0,0,776,777,5,296,0,0,777,778,
        3,52,26,0,778,1336,1,0,0,0,779,780,5,96,0,0,780,782,5,292,0,0,781,
        783,3,190,95,0,782,781,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,
        786,3,84,42,0,785,787,5,229,0,0,786,785,1,0,0,0,786,787,1,0,0,0,
        787,1336,1,0,0,0,788,789,5,96,0,0,789,791,5,337,0,0,790,792,3,190,
        95,0,791,790,1,0,0,0,791,792,1,0,0,0,792,793,1,0,0,0,793,1336,3,
        88,44,0,794,795,5,96,0,0,795,796,5,175,0,0,796,798,5,337,0,0,797,
        799,3,190,95,0,798,797,1,0,0,0,798,799,1,0,0,0,799,800,1,0,0,0,800,
        1336,3,88,44,0,801,804,5,59,0,0,802,803,5,207,0,0,803,805,5,243,
        0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,810,1,0,0,0,806,808,5,128,
        0,0,807,806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,811,5,297,
        0,0,810,807,1,0,0,0,810,811,1,0,0,0,811,812,1,0,0,0,812,814,5,337,
        0,0,813,815,3,188,94,0,814,813,1,0,0,0,814,815,1,0,0,0,815,816,1,
        0,0,0,816,818,3,86,43,0,817,819,3,218,109,0,818,817,1,0,0,0,818,
        819,1,0,0,0,819,828,1,0,0,0,820,827,3,24,12,0,821,822,5,217,0,0,
        822,823,5,202,0,0,823,827,3,210,105,0,824,825,5,296,0,0,825,827,
        3,52,26,0,826,820,1,0,0,0,826,821,1,0,0,0,826,824,1,0,0,0,827,830,
        1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,831,1,0,0,0,830,828,
        1,0,0,0,831,832,5,20,0,0,832,833,3,26,13,0,833,1336,1,0,0,0,834,
        837,5,59,0,0,835,836,5,207,0,0,836,838,5,243,0,0,837,835,1,0,0,0,
        837,838,1,0,0,0,838,840,1,0,0,0,839,841,5,128,0,0,840,839,1,0,0,
        0,840,841,1,0,0,0,841,842,1,0,0,0,842,843,5,297,0,0,843,844,5,337,
        0,0,844,849,3,86,43,0,845,846,5,2,0,0,846,847,3,332,166,0,847,848,
        5,3,0,0,848,850,1,0,0,0,849,845,1,0,0,0,849,850,1,0,0,0,850,851,
        1,0,0,0,851,854,3,48,24,0,852,853,5,206,0,0,853,855,3,52,26,0,854,
        852,1,0,0,0,854,855,1,0,0,0,855,1336,1,0,0,0,856,857,5,11,0,0,857,
        858,5,337,0,0,858,860,3,88,44,0,859,861,5,20,0,0,860,859,1,0,0,0,
        860,861,1,0,0,0,861,862,1,0,0,0,862,863,3,26,13,0,863,1336,1,0,0,
        0,864,867,5,59,0,0,865,866,5,207,0,0,866,868,5,243,0,0,867,865,1,
        0,0,0,867,868,1,0,0,0,868,870,1,0,0,0,869,871,5,297,0,0,870,869,
        1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,872,874,5,125,0,0,873,875,
        3,188,94,0,874,873,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,876,877,
        3,366,183,0,877,878,5,20,0,0,878,888,3,386,193,0,879,880,5,331,0,
        0,880,885,3,74,37,0,881,882,5,4,0,0,882,884,3,74,37,0,883,881,1,
        0,0,0,884,887,1,0,0,0,885,883,1,0,0,0,885,886,1,0,0,0,886,889,1,
        0,0,0,887,885,1,0,0,0,888,879,1,0,0,0,888,889,1,0,0,0,889,1336,1,
        0,0,0,890,891,5,59,0,0,891,892,5,175,0,0,892,894,5,337,0,0,893,895,
        3,188,94,0,894,893,1,0,0,0,894,895,1,0,0,0,895,896,1,0,0,0,896,898,
        3,86,43,0,897,899,3,48,24,0,898,897,1,0,0,0,898,899,1,0,0,0,899,
        915,1,0,0,0,900,901,5,206,0,0,901,914,3,52,26,0,902,903,5,217,0,
        0,903,904,5,31,0,0,904,914,3,258,129,0,905,914,3,20,10,0,906,914,
        3,18,9,0,907,914,3,240,120,0,908,914,3,68,34,0,909,914,3,22,11,0,
        910,914,3,24,12,0,911,912,5,296,0,0,912,914,3,52,26,0,913,900,1,
        0,0,0,913,902,1,0,0,0,913,905,1,0,0,0,913,906,1,0,0,0,913,907,1,
        0,0,0,913,908,1,0,0,0,913,909,1,0,0,0,913,910,1,0,0,0,913,911,1,
        0,0,0,914,917,1,0,0,0,915,913,1,0,0,0,915,916,1,0,0,0,916,918,1,
        0,0,0,917,915,1,0,0,0,918,919,5,20,0,0,919,920,3,26,13,0,920,1336,
        1,0,0,0,921,923,5,96,0,0,922,924,5,297,0,0,923,922,1,0,0,0,923,924,
        1,0,0,0,924,925,1,0,0,0,925,927,5,125,0,0,926,928,3,190,95,0,927,
        926,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,929,1336,3,364,182,0,
        930,933,5,81,0,0,931,932,5,207,0,0,932,934,5,243,0,0,933,931,1,0,
        0,0,933,934,1,0,0,0,934,936,1,0,0,0,935,937,5,335,0,0,936,935,1,
        0,0,0,936,937,1,0,0,0,937,938,1,0,0,0,938,940,3,364,182,0,939,941,
        3,316,158,0,940,939,1,0,0,0,940,941,1,0,0,0,941,943,1,0,0,0,942,
        944,3,330,165,0,943,942,1,0,0,0,943,944,1,0,0,0,944,1336,1,0,0,0,
        945,946,5,96,0,0,946,947,5,297,0,0,947,949,5,335,0,0,948,950,3,190,
        95,0,949,948,1,0,0,0,949,950,1,0,0,0,950,954,1,0,0,0,951,955,3,84,
        42,0,952,955,3,88,44,0,953,955,3,364,182,0,954,951,1,0,0,0,954,952,
        1,0,0,0,954,953,1,0,0,0,955,1336,1,0,0,0,956,958,5,106,0,0,957,959,
        7,5,0,0,958,957,1,0,0,0,958,959,1,0,0,0,959,960,1,0,0,0,960,1336,
        3,4,2,0,961,962,5,272,0,0,962,965,5,293,0,0,963,964,7,2,0,0,964,
        966,3,78,39,0,965,963,1,0,0,0,965,966,1,0,0,0,966,971,1,0,0,0,967,
        969,5,162,0,0,968,967,1,0,0,0,968,969,1,0,0,0,969,970,1,0,0,0,970,
        972,3,386,193,0,971,968,1,0,0,0,971,972,1,0,0,0,972,1336,1,0,0,0,
        973,974,5,272,0,0,974,975,5,292,0,0,975,978,5,108,0,0,976,977,7,
        2,0,0,977,979,3,78,39,0,978,976,1,0,0,0,978,979,1,0,0,0,979,980,
        1,0,0,0,980,981,5,162,0,0,981,983,3,386,193,0,982,984,3,32,16,0,
        983,982,1,0,0,0,983,984,1,0,0,0,984,1336,1,0,0,0,985,986,5,272,0,
        0,986,987,5,296,0,0,987,992,3,84,42,0,988,989,5,2,0,0,989,990,3,
        56,28,0,990,991,5,3,0,0,991,993,1,0,0,0,992,988,1,0,0,0,992,993,
        1,0,0,0,993,1336,1,0,0,0,994,995,5,272,0,0,995,996,5,50,0,0,996,
        997,7,2,0,0,997,1000,3,84,42,0,998,999,7,2,0,0,999,1001,3,78,39,
        0,1000,998,1,0,0,0,1000,1001,1,0,0,0,1001,1336,1,0,0,0,1002,1003,
        5,272,0,0,1003,1006,5,338,0,0,1004,1005,7,2,0,0,1005,1007,3,78,39,
        0,1006,1004,1,0,0,0,1006,1007,1,0,0,0,1007,1012,1,0,0,0,1008,1010,
        5,162,0,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,
        1011,1013,3,386,193,0,1012,1009,1,0,0,0,1012,1013,1,0,0,0,1013,1336,
        1,0,0,0,1014,1015,5,272,0,0,1015,1016,5,218,0,0,1016,1018,3,84,42,
        0,1017,1019,3,32,16,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1336,
        1,0,0,0,1020,1022,5,272,0,0,1021,1023,3,146,73,0,1022,1021,1,0,0,
        0,1022,1023,1,0,0,0,1023,1024,1,0,0,0,1024,1027,5,126,0,0,1025,1026,
        7,2,0,0,1026,1028,3,78,39,0,1027,1025,1,0,0,0,1027,1028,1,0,0,0,
        1028,1036,1,0,0,0,1029,1031,5,162,0,0,1030,1029,1,0,0,0,1030,1031,
        1,0,0,0,1031,1034,1,0,0,0,1032,1035,3,244,122,0,1033,1035,3,386,
        193,0,1034,1032,1,0,0,0,1034,1033,1,0,0,0,1035,1037,1,0,0,0,1036,
        1030,1,0,0,0,1036,1037,1,0,0,0,1037,1336,1,0,0,0,1038,1039,5,272,
        0,0,1039,1040,5,59,0,0,1040,1041,5,292,0,0,1041,1044,3,84,42,0,1042,
        1043,5,20,0,0,1043,1045,5,265,0,0,1044,1042,1,0,0,0,1044,1045,1,
        0,0,0,1045,1336,1,0,0,0,1046,1047,5,272,0,0,1047,1048,5,62,0,0,1048,
        1336,3,36,18,0,1049,1050,5,272,0,0,1050,1055,5,38,0,0,1051,1053,
        5,162,0,0,1052,1051,1,0,0,0,1052,1053,1,0,0,0,1053,1054,1,0,0,0,
        1054,1056,3,386,193,0,1055,1052,1,0,0,0,1055,1056,1,0,0,0,1056,1336,
        1,0,0,0,1057,1058,5,272,0,0,1058,1059,5,175,0,0,1059,1062,5,338,
        0,0,1060,1061,7,2,0,0,1061,1063,3,78,39,0,1062,1060,1,0,0,0,1062,
        1063,1,0,0,0,1063,1068,1,0,0,0,1064,1066,5,162,0,0,1065,1064,1,0,
        0,0,1065,1066,1,0,0,0,1066,1067,1,0,0,0,1067,1069,3,386,193,0,1068,
        1065,1,0,0,0,1068,1069,1,0,0,0,1069,1336,1,0,0,0,1070,1071,5,272,
        0,0,1071,1072,5,59,0,0,1072,1073,5,175,0,0,1073,1074,5,337,0,0,1074,
        1077,3,88,44,0,1075,1076,5,20,0,0,1076,1078,5,265,0,0,1077,1075,
        1,0,0,0,1077,1078,1,0,0,0,1078,1336,1,0,0,0,1079,1080,7,6,0,0,1080,
        1082,5,125,0,0,1081,1083,5,108,0,0,1082,1081,1,0,0,0,1082,1083,1,
        0,0,0,1083,1084,1,0,0,0,1084,1336,3,40,20,0,1085,1086,7,6,0,0,1086,
        1088,5,72,0,0,1087,1089,5,108,0,0,1088,1087,1,0,0,0,1088,1089,1,
        0,0,0,1089,1090,1,0,0,0,1090,1336,3,78,39,0,1091,1093,7,6,0,0,1092,
        1094,5,292,0,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1096,1,0,
        0,0,1095,1097,7,7,0,0,1096,1095,1,0,0,0,1096,1097,1,0,0,0,1097,1098,
        1,0,0,0,1098,1100,3,84,42,0,1099,1101,3,32,16,0,1100,1099,1,0,0,
        0,1100,1101,1,0,0,0,1101,1103,1,0,0,0,1102,1104,3,42,21,0,1103,1102,
        1,0,0,0,1103,1104,1,0,0,0,1104,1336,1,0,0,0,1105,1107,7,6,0,0,1106,
        1108,5,231,0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,
        0,0,1109,1336,3,26,13,0,1110,1111,5,51,0,0,1111,1112,5,202,0,0,1112,
        1113,3,36,18,0,1113,1114,3,78,39,0,1114,1115,5,153,0,0,1115,1116,
        3,388,194,0,1116,1336,1,0,0,0,1117,1118,5,51,0,0,1118,1119,5,202,
        0,0,1119,1120,5,292,0,0,1120,1121,3,84,42,0,1121,1122,5,153,0,0,
        1122,1123,3,388,194,0,1123,1336,1,0,0,0,1124,1125,5,239,0,0,1125,
        1126,5,292,0,0,1126,1336,3,84,42,0,1127,1128,5,239,0,0,1128,1129,
        5,125,0,0,1129,1336,3,364,182,0,1130,1138,5,239,0,0,1131,1139,3,
        386,193,0,1132,1134,9,0,0,0,1133,1132,1,0,0,0,1134,1137,1,0,0,0,
        1135,1136,1,0,0,0,1135,1133,1,0,0,0,1136,1139,1,0,0,0,1137,1135,
        1,0,0,0,1138,1131,1,0,0,0,1138,1135,1,0,0,0,1139,1336,1,0,0,0,1140,
        1141,5,239,0,0,1141,1142,5,175,0,0,1142,1143,5,337,0,0,1143,1336,
        3,88,44,0,1144,1146,5,33,0,0,1145,1147,5,159,0,0,1146,1145,1,0,0,
        0,1146,1147,1,0,0,0,1147,1148,1,0,0,0,1148,1149,5,292,0,0,1149,1152,
        3,84,42,0,1150,1151,5,206,0,0,1151,1153,3,52,26,0,1152,1150,1,0,
        0,0,1152,1153,1,0,0,0,1153,1158,1,0,0,0,1154,1156,5,20,0,0,1155,
        1154,1,0,0,0,1155,1156,1,0,0,0,1156,1157,1,0,0,0,1157,1159,3,26,
        13,0,1158,1155,1,0,0,0,1158,1159,1,0,0,0,1159,1336,1,0,0,0,1160,
        1161,5,321,0,0,1161,1163,5,292,0,0,1162,1164,3,190,95,0,1163,1162,
        1,0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,1336,3,84,42,0,
        1166,1167,5,43,0,0,1167,1336,5,33,0,0,1168,1169,5,167,0,0,1169,1171,
        5,70,0,0,1170,1172,5,168,0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,
        1172,1173,1,0,0,0,1173,1174,5,145,0,0,1174,1176,3,386,193,0,1175,
        1177,5,215,0,0,1176,1175,1,0,0,0,1176,1177,1,0,0,0,1177,1178,1,0,
        0,0,1178,1179,5,152,0,0,1179,1180,5,292,0,0,1180,1182,3,84,42,0,
        1181,1183,3,32,16,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1336,
        1,0,0,0,1184,1185,5,316,0,0,1185,1186,5,292,0,0,1186,1188,3,84,42,
        0,1187,1189,3,32,16,0,1188,1187,1,0,0,0,1188,1189,1,0,0,0,1189,1336,
        1,0,0,0,1190,1192,5,187,0,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,
        1192,1193,1,0,0,0,1193,1194,5,241,0,0,1194,1195,5,292,0,0,1195,1198,
        3,84,42,0,1196,1197,7,8,0,0,1197,1199,5,218,0,0,1198,1196,1,0,0,
        0,1198,1199,1,0,0,0,1199,1336,1,0,0,0,1200,1201,7,9,0,0,1201,1205,
        3,374,187,0,1202,1204,9,0,0,0,1203,1202,1,0,0,0,1204,1207,1,0,0,
        0,1205,1206,1,0,0,0,1205,1203,1,0,0,0,1206,1336,1,0,0,0,1207,1205,
        1,0,0,0,1208,1209,5,268,0,0,1209,1213,5,252,0,0,1210,1212,9,0,0,
        0,1211,1210,1,0,0,0,1212,1215,1,0,0,0,1213,1214,1,0,0,0,1213,1211,
        1,0,0,0,1214,1336,1,0,0,0,1215,1213,1,0,0,0,1216,1217,5,268,0,0,
        1217,1218,5,300,0,0,1218,1219,5,349,0,0,1219,1336,3,296,148,0,1220,
        1221,5,268,0,0,1221,1222,5,300,0,0,1222,1223,5,349,0,0,1223,1336,
        3,6,3,0,1224,1225,5,268,0,0,1225,1226,5,300,0,0,1226,1230,5,349,
        0,0,1227,1229,9,0,0,0,1228,1227,1,0,0,0,1229,1232,1,0,0,0,1230,1231,
        1,0,0,0,1230,1228,1,0,0,0,1231,1336,1,0,0,0,1232,1230,1,0,0,0,1233,
        1234,5,268,0,0,1234,1235,7,10,0,0,1235,1336,3,132,66,0,1236,1237,
        5,268,0,0,1237,1238,7,10,0,0,1238,1239,5,2,0,0,1239,1240,3,242,121,
        0,1240,1241,5,3,0,0,1241,1242,5,351,0,0,1242,1243,5,2,0,0,1243,1244,
        3,26,13,0,1244,1245,5,3,0,0,1245,1336,1,0,0,0,1246,1247,5,268,0,
        0,1247,1248,3,8,4,0,1248,1249,5,351,0,0,1249,1250,3,10,5,0,1250,
        1336,1,0,0,0,1251,1252,5,268,0,0,1252,1260,3,8,4,0,1253,1257,5,351,
        0,0,1254,1256,9,0,0,0,1255,1254,1,0,0,0,1256,1259,1,0,0,0,1257,1258,
        1,0,0,0,1257,1255,1,0,0,0,1258,1261,1,0,0,0,1259,1257,1,0,0,0,1260,
        1253,1,0,0,0,1260,1261,1,0,0,0,1261,1336,1,0,0,0,1262,1266,5,268,
        0,0,1263,1265,9,0,0,0,1264,1263,1,0,0,0,1265,1268,1,0,0,0,1266,1267,
        1,0,0,0,1266,1264,1,0,0,0,1267,1269,1,0,0,0,1268,1266,1,0,0,0,1269,
        1270,5,351,0,0,1270,1336,3,10,5,0,1271,1275,5,268,0,0,1272,1274,
        9,0,0,0,1273,1272,1,0,0,0,1274,1277,1,0,0,0,1275,1276,1,0,0,0,1275,
        1273,1,0,0,0,1276,1336,1,0,0,0,1277,1275,1,0,0,0,1278,1279,5,244,
        0,0,1279,1336,3,8,4,0,1280,1284,5,244,0,0,1281,1283,9,0,0,0,1282,
        1281,1,0,0,0,1283,1286,1,0,0,0,1284,1285,1,0,0,0,1284,1282,1,0,0,
        0,1285,1336,1,0,0,0,1286,1284,1,0,0,0,1287,1288,5,59,0,0,1288,1290,
        5,142,0,0,1289,1291,3,188,94,0,1290,1289,1,0,0,0,1290,1291,1,0,0,
        0,1291,1292,1,0,0,0,1292,1293,3,374,187,0,1293,1295,5,202,0,0,1294,
        1296,5,292,0,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1297,1,0,
        0,0,1297,1300,3,84,42,0,1298,1299,5,331,0,0,1299,1301,3,374,187,
        0,1300,1298,1,0,0,0,1300,1301,1,0,0,0,1301,1302,1,0,0,0,1302,1303,
        5,2,0,0,1303,1304,3,246,123,0,1304,1307,5,3,0,0,1305,1306,5,206,
        0,0,1306,1308,3,52,26,0,1307,1305,1,0,0,0,1307,1308,1,0,0,0,1308,
        1336,1,0,0,0,1309,1310,5,96,0,0,1310,1312,5,142,0,0,1311,1313,3,
        190,95,0,1312,1311,1,0,0,0,1312,1313,1,0,0,0,1313,1314,1,0,0,0,1314,
        1315,3,374,187,0,1315,1317,5,202,0,0,1316,1318,5,292,0,0,1317,1316,
        1,0,0,0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1320,3,84,42,0,
        1320,1336,1,0,0,0,1321,1322,5,204,0,0,1322,1324,3,84,42,0,1323,1325,
        3,136,68,0,1324,1323,1,0,0,0,1324,1325,1,0,0,0,1325,1326,1,0,0,0,
        1326,1327,3,352,176,0,1327,1336,1,0,0,0,1328,1332,3,12,6,0,1329,
        1331,9,0,0,0,1330,1329,1,0,0,0,1331,1334,1,0,0,0,1332,1333,1,0,0,
        0,1332,1330,1,0,0,0,1333,1336,1,0,0,0,1334,1332,1,0,0,0,1335,410,
        1,0,0,0,1335,412,1,0,0,0,1335,415,1,0,0,0,1335,417,1,0,0,0,1335,
        421,1,0,0,0,1335,427,1,0,0,0,1335,443,1,0,0,0,1335,450,1,0,0,0,1335,
        456,1,0,0,0,1335,465,1,0,0,0,1335,477,1,0,0,0,1335,494,1,0,0,0,1335,
        513,1,0,0,0,1335,530,1,0,0,0,1335,547,1,0,0,0,1335,558,1,0,0,0,1335,
        565,1,0,0,0,1335,574,1,0,0,0,1335,583,1,0,0,0,1335,593,1,0,0,0,1335,
        605,1,0,0,0,1335,616,1,0,0,0,1335,627,1,0,0,0,1335,641,1,0,0,0,1335,
        652,1,0,0,0,1335,667,1,0,0,0,1335,679,1,0,0,0,1335,693,1,0,0,0,1335,
        703,1,0,0,0,1335,719,1,0,0,0,1335,727,1,0,0,0,1335,749,1,0,0,0,1335,
        758,1,0,0,0,1335,764,1,0,0,0,1335,771,1,0,0,0,1335,779,1,0,0,0,1335,
        788,1,0,0,0,1335,794,1,0,0,0,1335,801,1,0,0,0,1335,834,1,0,0,0,1335,
        856,1,0,0,0,1335,864,1,0,0,0,1335,890,1,0,0,0,1335,921,1,0,0,0,1335,
        930,1,0,0,0,1335,945,1,0,0,0,1335,956,1,0,0,0,1335,961,1,0,0,0,1335,
        973,1,0,0,0,1335,985,1,0,0,0,1335,994,1,0,0,0,1335,1002,1,0,0,0,
        1335,1014,1,0,0,0,1335,1020,1,0,0,0,1335,1038,1,0,0,0,1335,1046,
        1,0,0,0,1335,1049,1,0,0,0,1335,1057,1,0,0,0,1335,1070,1,0,0,0,1335,
        1079,1,0,0,0,1335,1085,1,0,0,0,1335,1091,1,0,0,0,1335,1105,1,0,0,
        0,1335,1110,1,0,0,0,1335,1117,1,0,0,0,1335,1124,1,0,0,0,1335,1127,
        1,0,0,0,1335,1130,1,0,0,0,1335,1140,1,0,0,0,1335,1144,1,0,0,0,1335,
        1160,1,0,0,0,1335,1166,1,0,0,0,1335,1168,1,0,0,0,1335,1184,1,0,0,
        0,1335,1191,1,0,0,0,1335,1200,1,0,0,0,1335,1208,1,0,0,0,1335,1216,
        1,0,0,0,1335,1220,1,0,0,0,1335,1224,1,0,0,0,1335,1233,1,0,0,0,1335,
        1236,1,0,0,0,1335,1246,1,0,0,0,1335,1251,1,0,0,0,1335,1262,1,0,0,
        0,1335,1271,1,0,0,0,1335,1278,1,0,0,0,1335,1280,1,0,0,0,1335,1287,
        1,0,0,0,1335,1309,1,0,0,0,1335,1321,1,0,0,0,1335,1328,1,0,0,0,1336,
        5,1,0,0,0,1337,1340,3,386,193,0,1338,1340,5,168,0,0,1339,1337,1,
        0,0,0,1339,1338,1,0,0,0,1340,7,1,0,0,0,1341,1342,3,378,189,0,1342,
        9,1,0,0,0,1343,1344,3,380,190,0,1344,11,1,0,0,0,1345,1346,5,59,0,
        0,1346,1514,5,252,0,0,1347,1348,5,96,0,0,1348,1514,5,252,0,0,1349,
        1351,5,129,0,0,1350,1352,5,252,0,0,1351,1350,1,0,0,0,1351,1352,1,
        0,0,0,1352,1514,1,0,0,0,1353,1355,5,248,0,0,1354,1356,5,252,0,0,
        1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,1514,1,0,0,0,1357,1358,
        5,272,0,0,1358,1514,5,129,0,0,1359,1360,5,272,0,0,1360,1362,5,252,
        0,0,1361,1363,5,129,0,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,
        1514,1,0,0,0,1364,1365,5,272,0,0,1365,1514,5,227,0,0,1366,1367,5,
        272,0,0,1367,1514,5,253,0,0,1368,1369,5,272,0,0,1369,1370,5,62,0,
        0,1370,1514,5,253,0,0,1371,1372,5,107,0,0,1372,1514,5,292,0,0,1373,
        1374,5,139,0,0,1374,1514,5,292,0,0,1375,1376,5,272,0,0,1376,1514,
        5,54,0,0,1377,1378,5,272,0,0,1378,1379,5,59,0,0,1379,1514,5,292,
        0,0,1380,1381,5,272,0,0,1381,1514,5,312,0,0,1382,1383,5,272,0,0,
        1383,1514,5,143,0,0,1384,1385,5,272,0,0,1385,1514,5,171,0,0,1386,
        1387,5,59,0,0,1387,1514,5,142,0,0,1388,1389,5,96,0,0,1389,1514,5,
        142,0,0,1390,1391,5,11,0,0,1391,1514,5,142,0,0,1392,1393,5,170,0,
        0,1393,1514,5,292,0,0,1394,1395,5,170,0,0,1395,1514,5,72,0,0,1396,
        1397,5,325,0,0,1397,1514,5,292,0,0,1398,1399,5,325,0,0,1399,1514,
        5,72,0,0,1400,1401,5,59,0,0,1401,1402,5,297,0,0,1402,1514,5,174,
        0,0,1403,1404,5,96,0,0,1404,1405,5,297,0,0,1405,1514,5,174,0,0,1406,
        1407,5,11,0,0,1407,1408,5,292,0,0,1408,1409,3,84,42,0,1409,1410,
        5,196,0,0,1410,1411,5,45,0,0,1411,1514,1,0,0,0,1412,1413,5,11,0,
        0,1413,1414,5,292,0,0,1414,1415,3,84,42,0,1415,1416,5,45,0,0,1416,
        1417,5,31,0,0,1417,1514,1,0,0,0,1418,1419,5,11,0,0,1419,1420,5,292,
        0,0,1420,1421,3,84,42,0,1421,1422,5,196,0,0,1422,1423,5,278,0,0,
        1423,1514,1,0,0,0,1424,1425,5,11,0,0,1425,1426,5,292,0,0,1426,1427,
        3,84,42,0,1427,1428,5,274,0,0,1428,1429,5,31,0,0,1429,1514,1,0,0,
        0,1430,1431,5,11,0,0,1431,1432,5,292,0,0,1432,1433,3,84,42,0,1433,
        1434,5,196,0,0,1434,1435,5,274,0,0,1435,1514,1,0,0,0,1436,1437,5,
        11,0,0,1437,1438,5,292,0,0,1438,1439,3,84,42,0,1439,1440,5,196,0,
        0,1440,1441,5,282,0,0,1441,1442,5,20,0,0,1442,1443,5,89,0,0,1443,
        1514,1,0,0,0,1444,1445,5,11,0,0,1445,1446,5,292,0,0,1446,1447,3,
        84,42,0,1447,1448,5,268,0,0,1448,1449,5,274,0,0,1449,1450,5,169,
        0,0,1450,1514,1,0,0,0,1451,1452,5,11,0,0,1452,1453,5,292,0,0,1453,
        1454,3,84,42,0,1454,1455,5,103,0,0,1455,1456,5,216,0,0,1456,1514,
        1,0,0,0,1457,1458,5,11,0,0,1458,1459,5,292,0,0,1459,1460,3,84,42,
        0,1460,1461,5,18,0,0,1461,1462,5,216,0,0,1462,1514,1,0,0,0,1463,
        1464,5,11,0,0,1464,1465,5,292,0,0,1465,1466,3,84,42,0,1466,1467,
        5,319,0,0,1467,1468,5,216,0,0,1468,1514,1,0,0,0,1469,1470,5,11,0,
        0,1470,1471,5,292,0,0,1471,1472,3,84,42,0,1472,1473,5,309,0,0,1473,
        1514,1,0,0,0,1474,1475,5,11,0,0,1475,1476,5,292,0,0,1476,1478,3,
        84,42,0,1477,1479,3,32,16,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,
        1479,1480,1,0,0,0,1480,1481,5,53,0,0,1481,1514,1,0,0,0,1482,1483,
        5,11,0,0,1483,1484,5,292,0,0,1484,1486,3,84,42,0,1485,1487,3,32,
        16,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,1,0,0,0,1488,
        1489,5,56,0,0,1489,1514,1,0,0,0,1490,1491,5,11,0,0,1491,1492,5,292,
        0,0,1492,1494,3,84,42,0,1493,1495,3,32,16,0,1494,1493,1,0,0,0,1494,
        1495,1,0,0,0,1495,1496,1,0,0,0,1496,1497,5,268,0,0,1497,1498,5,115,
        0,0,1498,1514,1,0,0,0,1499,1500,5,11,0,0,1500,1501,5,292,0,0,1501,
        1503,3,84,42,0,1502,1504,3,32,16,0,1503,1502,1,0,0,0,1503,1504,1,
        0,0,0,1504,1505,1,0,0,0,1505,1506,5,243,0,0,1506,1507,5,50,0,0,1507,
        1514,1,0,0,0,1508,1509,5,280,0,0,1509,1514,5,311,0,0,1510,1514,5,
        52,0,0,1511,1514,5,254,0,0,1512,1514,5,88,0,0,1513,1345,1,0,0,0,
        1513,1347,1,0,0,0,1513,1349,1,0,0,0,1513,1353,1,0,0,0,1513,1357,
        1,0,0,0,1513,1359,1,0,0,0,1513,1364,1,0,0,0,1513,1366,1,0,0,0,1513,
        1368,1,0,0,0,1513,1371,1,0,0,0,1513,1373,1,0,0,0,1513,1375,1,0,0,
        0,1513,1377,1,0,0,0,1513,1380,1,0,0,0,1513,1382,1,0,0,0,1513,1384,
        1,0,0,0,1513,1386,1,0,0,0,1513,1388,1,0,0,0,1513,1390,1,0,0,0,1513,
        1392,1,0,0,0,1513,1394,1,0,0,0,1513,1396,1,0,0,0,1513,1398,1,0,0,
        0,1513,1400,1,0,0,0,1513,1403,1,0,0,0,1513,1406,1,0,0,0,1513,1412,
        1,0,0,0,1513,1418,1,0,0,0,1513,1424,1,0,0,0,1513,1430,1,0,0,0,1513,
        1436,1,0,0,0,1513,1444,1,0,0,0,1513,1451,1,0,0,0,1513,1457,1,0,0,
        0,1513,1463,1,0,0,0,1513,1469,1,0,0,0,1513,1474,1,0,0,0,1513,1482,
        1,0,0,0,1513,1490,1,0,0,0,1513,1499,1,0,0,0,1513,1508,1,0,0,0,1513,
        1510,1,0,0,0,1513,1511,1,0,0,0,1513,1512,1,0,0,0,1514,13,1,0,0,0,
        1515,1517,5,59,0,0,1516,1518,5,297,0,0,1517,1516,1,0,0,0,1517,1518,
        1,0,0,0,1518,1520,1,0,0,0,1519,1521,5,109,0,0,1520,1519,1,0,0,0,
        1520,1521,1,0,0,0,1521,1522,1,0,0,0,1522,1524,5,292,0,0,1523,1525,
        3,188,94,0,1524,1523,1,0,0,0,1524,1525,1,0,0,0,1525,1526,1,0,0,0,
        1526,1527,3,82,41,0,1527,15,1,0,0,0,1528,1529,5,59,0,0,1529,1531,
        5,207,0,0,1530,1528,1,0,0,0,1530,1531,1,0,0,0,1531,1532,1,0,0,0,
        1532,1533,5,243,0,0,1533,1534,5,292,0,0,1534,1535,3,82,41,0,1535,
        17,1,0,0,0,1536,1537,5,45,0,0,1537,1538,5,31,0,0,1538,1542,3,210,
        105,0,1539,1540,5,278,0,0,1540,1541,5,31,0,0,1541,1543,3,214,107,
        0,1542,1539,1,0,0,0,1542,1543,1,0,0,0,1543,1544,1,0,0,0,1544,1545,
        5,152,0,0,1545,1546,5,381,0,0,1546,1547,5,30,0,0,1547,19,1,0,0,0,
        1548,1549,5,274,0,0,1549,1550,5,31,0,0,1550,1551,3,210,105,0,1551,
        1554,5,202,0,0,1552,1555,3,64,32,0,1553,1555,3,66,33,0,1554,1552,
        1,0,0,0,1554,1553,1,0,0,0,1555,1559,1,0,0,0,1556,1557,5,282,0,0,
        1557,1558,5,20,0,0,1558,1560,5,89,0,0,1559,1556,1,0,0,0,1559,1560,
        1,0,0,0,1560,21,1,0,0,0,1561,1562,5,169,0,0,1562,1563,3,386,193,
        0,1563,23,1,0,0,0,1564,1565,5,51,0,0,1565,1566,3,386,193,0,1566,
        25,1,0,0,0,1567,1569,3,44,22,0,1568,1567,1,0,0,0,1568,1569,1,0,0,
        0,1569,1570,1,0,0,0,1570,1571,3,102,51,0,1571,1572,3,98,49,0,1572,
        27,1,0,0,0,1573,1574,5,147,0,0,1574,1576,5,215,0,0,1575,1577,5,292,
        0,0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,1578,1,0,0,0,1578,1583,
        3,84,42,0,1579,1581,3,32,16,0,1580,1582,3,188,94,0,1581,1580,1,0,
        0,0,1581,1582,1,0,0,0,1582,1584,1,0,0,0,1583,1579,1,0,0,0,1583,1584,
        1,0,0,0,1584,1591,1,0,0,0,1585,1586,5,31,0,0,1586,1592,5,188,0,0,
        1587,1588,5,2,0,0,1588,1589,3,92,46,0,1589,1590,5,3,0,0,1590,1592,
        1,0,0,0,1591,1585,1,0,0,0,1591,1587,1,0,0,0,1591,1592,1,0,0,0,1592,
        1650,1,0,0,0,1593,1594,5,147,0,0,1594,1596,5,152,0,0,1595,1597,5,
        292,0,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,1598,1,0,0,0,1598,
        1600,3,84,42,0,1599,1601,3,32,16,0,1600,1599,1,0,0,0,1600,1601,1,
        0,0,0,1601,1603,1,0,0,0,1602,1604,3,188,94,0,1603,1602,1,0,0,0,1603,
        1604,1,0,0,0,1604,1611,1,0,0,0,1605,1606,5,31,0,0,1606,1612,5,188,
        0,0,1607,1608,5,2,0,0,1608,1609,3,92,46,0,1609,1610,5,3,0,0,1610,
        1612,1,0,0,0,1611,1605,1,0,0,0,1611,1607,1,0,0,0,1611,1612,1,0,0,
        0,1612,1650,1,0,0,0,1613,1614,5,147,0,0,1614,1616,5,152,0,0,1615,
        1617,5,292,0,0,1616,1615,1,0,0,0,1616,1617,1,0,0,0,1617,1618,1,0,
        0,0,1618,1619,3,84,42,0,1619,1620,5,243,0,0,1620,1621,3,136,68,0,
        1621,1650,1,0,0,0,1622,1623,5,147,0,0,1623,1625,5,215,0,0,1624,1626,
        5,168,0,0,1625,1624,1,0,0,0,1625,1626,1,0,0,0,1626,1627,1,0,0,0,
        1627,1628,5,90,0,0,1628,1630,3,386,193,0,1629,1631,3,240,120,0,1630,
        1629,1,0,0,0,1630,1631,1,0,0,0,1631,1633,1,0,0,0,1632,1634,3,68,
        34,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1650,1,0,0,0,1635,
        1636,5,147,0,0,1636,1638,5,215,0,0,1637,1639,5,168,0,0,1638,1637,
        1,0,0,0,1638,1639,1,0,0,0,1639,1640,1,0,0,0,1640,1642,5,90,0,0,1641,
        1643,3,386,193,0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,
        0,0,0,1644,1647,3,48,24,0,1645,1646,5,206,0,0,1646,1648,3,52,26,
        0,1647,1645,1,0,0,0,1647,1648,1,0,0,0,1648,1650,1,0,0,0,1649,1573,
        1,0,0,0,1649,1593,1,0,0,0,1649,1613,1,0,0,0,1649,1622,1,0,0,0,1649,
        1635,1,0,0,0,1650,29,1,0,0,0,1651,1653,3,32,16,0,1652,1654,3,22,
        11,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,31,1,0,0,0,1655,1656,
        5,216,0,0,1656,1657,5,2,0,0,1657,1662,3,34,17,0,1658,1659,5,4,0,
        0,1659,1661,3,34,17,0,1660,1658,1,0,0,0,1661,1664,1,0,0,0,1662,1660,
        1,0,0,0,1662,1663,1,0,0,0,1663,1665,1,0,0,0,1664,1662,1,0,0,0,1665,
        1666,5,3,0,0,1666,33,1,0,0,0,1667,1670,3,374,187,0,1668,1669,5,351,
        0,0,1669,1671,3,286,143,0,1670,1668,1,0,0,0,1670,1671,1,0,0,0,1671,
        1677,1,0,0,0,1672,1673,3,374,187,0,1673,1674,5,351,0,0,1674,1675,
        5,82,0,0,1675,1677,1,0,0,0,1676,1667,1,0,0,0,1676,1672,1,0,0,0,1677,
        35,1,0,0,0,1678,1679,7,11,0,0,1679,37,1,0,0,0,1680,1681,7,12,0,0,
        1681,39,1,0,0,0,1682,1688,3,96,48,0,1683,1688,3,386,193,0,1684,1688,
        3,288,144,0,1685,1688,3,290,145,0,1686,1688,3,292,146,0,1687,1682,
        1,0,0,0,1687,1683,1,0,0,0,1687,1684,1,0,0,0,1687,1685,1,0,0,0,1687,
        1686,1,0,0,0,1688,41,1,0,0,0,1689,1694,3,374,187,0,1690,1691,5,5,
        0,0,1691,1693,3,374,187,0,1692,1690,1,0,0,0,1693,1696,1,0,0,0,1694,
        1692,1,0,0,0,1694,1695,1,0,0,0,1695,43,1,0,0,0,1696,1694,1,0,0,0,
        1697,1698,5,345,0,0,1698,1703,3,46,23,0,1699,1700,5,4,0,0,1700,1702,
        3,46,23,0,1701,1699,1,0,0,0,1702,1705,1,0,0,0,1703,1701,1,0,0,0,
        1703,1704,1,0,0,0,1704,45,1,0,0,0,1705,1703,1,0,0,0,1706,1708,3,
        370,185,0,1707,1709,3,210,105,0,1708,1707,1,0,0,0,1708,1709,1,0,
        0,0,1709,1711,1,0,0,0,1710,1712,5,20,0,0,1711,1710,1,0,0,0,1711,
        1712,1,0,0,0,1712,1713,1,0,0,0,1713,1714,5,2,0,0,1714,1715,3,26,
        13,0,1715,1716,5,3,0,0,1716,47,1,0,0,0,1717,1718,5,331,0,0,1718,
        1719,3,244,122,0,1719,49,1,0,0,0,1720,1721,5,206,0,0,1721,1734,3,
        60,30,0,1722,1723,5,217,0,0,1723,1724,5,31,0,0,1724,1734,3,258,129,
        0,1725,1734,3,20,10,0,1726,1734,3,18,9,0,1727,1734,3,240,120,0,1728,
        1734,3,68,34,0,1729,1734,3,22,11,0,1730,1734,3,24,12,0,1731,1732,
        5,296,0,0,1732,1734,3,52,26,0,1733,1720,1,0,0,0,1733,1722,1,0,0,
        0,1733,1725,1,0,0,0,1733,1726,1,0,0,0,1733,1727,1,0,0,0,1733,1728,
        1,0,0,0,1733,1729,1,0,0,0,1733,1730,1,0,0,0,1733,1731,1,0,0,0,1734,
        1737,1,0,0,0,1735,1733,1,0,0,0,1735,1736,1,0,0,0,1736,51,1,0,0,0,
        1737,1735,1,0,0,0,1738,1739,5,2,0,0,1739,1744,3,54,27,0,1740,1741,
        5,4,0,0,1741,1743,3,54,27,0,1742,1740,1,0,0,0,1743,1746,1,0,0,0,
        1744,1742,1,0,0,0,1744,1745,1,0,0,0,1745,1747,1,0,0,0,1746,1744,
        1,0,0,0,1747,1748,5,3,0,0,1748,53,1,0,0,0,1749,1754,3,56,28,0,1750,
        1752,5,351,0,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,1753,1,0,
        0,0,1753,1755,3,58,29,0,1754,1751,1,0,0,0,1754,1755,1,0,0,0,1755,
        55,1,0,0,0,1756,1761,3,374,187,0,1757,1758,5,5,0,0,1758,1760,3,374,
        187,0,1759,1757,1,0,0,0,1760,1763,1,0,0,0,1761,1759,1,0,0,0,1761,
        1762,1,0,0,0,1762,1766,1,0,0,0,1763,1761,1,0,0,0,1764,1766,3,386,
        193,0,1765,1756,1,0,0,0,1765,1764,1,0,0,0,1766,57,1,0,0,0,1767,1772,
        5,381,0,0,1768,1772,5,383,0,0,1769,1772,3,294,147,0,1770,1772,3,
        386,193,0,1771,1767,1,0,0,0,1771,1768,1,0,0,0,1771,1769,1,0,0,0,
        1771,1770,1,0,0,0,1772,59,1,0,0,0,1773,1774,5,2,0,0,1774,1779,3,
        62,31,0,1775,1776,5,4,0,0,1776,1778,3,62,31,0,1777,1775,1,0,0,0,
        1778,1781,1,0,0,0,1779,1777,1,0,0,0,1779,1780,1,0,0,0,1780,1782,
        1,0,0,0,1781,1779,1,0,0,0,1782,1783,5,3,0,0,1783,61,1,0,0,0,1784,
        1789,3,56,28,0,1785,1787,5,351,0,0,1786,1785,1,0,0,0,1786,1787,1,
        0,0,0,1787,1788,1,0,0,0,1788,1790,3,266,133,0,1789,1786,1,0,0,0,
        1789,1790,1,0,0,0,1790,63,1,0,0,0,1791,1792,5,2,0,0,1792,1797,3,
        286,143,0,1793,1794,5,4,0,0,1794,1796,3,286,143,0,1795,1793,1,0,
        0,0,1796,1799,1,0,0,0,1797,1795,1,0,0,0,1797,1798,1,0,0,0,1798,1800,
        1,0,0,0,1799,1797,1,0,0,0,1800,1801,5,3,0,0,1801,65,1,0,0,0,1802,
        1803,5,2,0,0,1803,1808,3,64,32,0,1804,1805,5,4,0,0,1805,1807,3,64,
        32,0,1806,1804,1,0,0,0,1807,1810,1,0,0,0,1808,1806,1,0,0,0,1808,
        1809,1,0,0,0,1809,1811,1,0,0,0,1810,1808,1,0,0,0,1811,1812,5,3,0,
        0,1812,67,1,0,0,0,1813,1814,5,282,0,0,1814,1815,5,20,0,0,1815,1820,
        3,70,35,0,1816,1817,5,282,0,0,1817,1818,5,31,0,0,1818,1820,3,72,
        36,0,1819,1813,1,0,0,0,1819,1816,1,0,0,0,1820,69,1,0,0,0,1821,1822,
        5,146,0,0,1822,1823,3,386,193,0,1823,1824,5,211,0,0,1824,1825,3,
        386,193,0,1825,1828,1,0,0,0,1826,1828,3,374,187,0,1827,1821,1,0,
        0,0,1827,1826,1,0,0,0,1828,71,1,0,0,0,1829,1833,3,386,193,0,1830,
        1831,5,345,0,0,1831,1832,5,266,0,0,1832,1834,3,52,26,0,1833,1830,
        1,0,0,0,1833,1834,1,0,0,0,1834,73,1,0,0,0,1835,1836,3,374,187,0,
        1836,1837,3,386,193,0,1837,75,1,0,0,0,1838,1839,3,28,14,0,1839,1840,
        3,26,13,0,1840,1895,1,0,0,0,1841,1843,3,144,72,0,1842,1844,3,100,
        50,0,1843,1842,1,0,0,0,1844,1845,1,0,0,0,1845,1843,1,0,0,0,1845,
        1846,1,0,0,0,1846,1895,1,0,0,0,1847,1848,5,84,0,0,1848,1849,5,123,
        0,0,1849,1850,3,84,42,0,1850,1852,3,238,119,0,1851,1853,3,136,68,
        0,1852,1851,1,0,0,0,1852,1853,1,0,0,0,1853,1895,1,0,0,0,1854,1855,
        5,328,0,0,1855,1856,3,84,42,0,1856,1857,3,238,119,0,1857,1859,3,
        118,59,0,1858,1860,3,136,68,0,1859,1858,1,0,0,0,1859,1860,1,0,0,
        0,1860,1895,1,0,0,0,1861,1862,5,178,0,0,1862,1863,5,152,0,0,1863,
        1864,3,84,42,0,1864,1865,3,238,119,0,1865,1871,5,331,0,0,1866,1872,
        3,96,48,0,1867,1868,5,2,0,0,1868,1869,3,26,13,0,1869,1870,5,3,0,
        0,1870,1872,1,0,0,0,1871,1866,1,0,0,0,1871,1867,1,0,0,0,1872,1873,
        1,0,0,0,1873,1874,3,238,119,0,1874,1875,5,202,0,0,1875,1879,3,274,
        137,0,1876,1878,3,120,60,0,1877,1876,1,0,0,0,1878,1881,1,0,0,0,1879,
        1877,1,0,0,0,1879,1880,1,0,0,0,1880,1885,1,0,0,0,1881,1879,1,0,0,
        0,1882,1884,3,122,61,0,1883,1882,1,0,0,0,1884,1887,1,0,0,0,1885,
        1883,1,0,0,0,1885,1886,1,0,0,0,1886,1891,1,0,0,0,1887,1885,1,0,0,
        0,1888,1890,3,124,62,0,1889,1888,1,0,0,0,1890,1893,1,0,0,0,1891,
        1889,1,0,0,0,1891,1892,1,0,0,0,1892,1895,1,0,0,0,1893,1891,1,0,0,
        0,1894,1838,1,0,0,0,1894,1841,1,0,0,0,1894,1847,1,0,0,0,1894,1854,
        1,0,0,0,1894,1861,1,0,0,0,1895,77,1,0,0,0,1896,1897,3,96,48,0,1897,
        79,1,0,0,0,1898,1899,3,96,48,0,1899,81,1,0,0,0,1900,1901,3,250,125,
        0,1901,83,1,0,0,0,1902,1903,3,250,125,0,1903,85,1,0,0,0,1904,1905,
        3,252,126,0,1905,87,1,0,0,0,1906,1907,3,252,126,0,1907,89,1,0,0,
        0,1908,1909,3,244,122,0,1909,91,1,0,0,0,1910,1915,3,90,45,0,1911,
        1912,5,4,0,0,1912,1914,3,90,45,0,1913,1911,1,0,0,0,1914,1917,1,0,
        0,0,1915,1913,1,0,0,0,1915,1916,1,0,0,0,1916,93,1,0,0,0,1917,1915,
        1,0,0,0,1918,1919,3,370,185,0,1919,95,1,0,0,0,1920,1921,5,136,0,
        0,1921,1922,5,2,0,0,1922,1923,3,266,133,0,1923,1924,5,3,0,0,1924,
        1927,1,0,0,0,1925,1927,3,244,122,0,1926,1920,1,0,0,0,1926,1925,1,
        0,0,0,1927,97,1,0,0,0,1928,1929,5,208,0,0,1929,1930,5,31,0,0,1930,
        1935,3,106,53,0,1931,1932,5,4,0,0,1932,1934,3,106,53,0,1933,1931,
        1,0,0,0,1934,1937,1,0,0,0,1935,1933,1,0,0,0,1935,1936,1,0,0,0,1936,
        1939,1,0,0,0,1937,1935,1,0,0,0,1938,1928,1,0,0,0,1938,1939,1,0,0,
        0,1939,1950,1,0,0,0,1940,1941,5,44,0,0,1941,1942,5,31,0,0,1942,1947,
        3,266,133,0,1943,1944,5,4,0,0,1944,1946,3,266,133,0,1945,1943,1,
        0,0,0,1946,1949,1,0,0,0,1947,1945,1,0,0,0,1947,1948,1,0,0,0,1948,
        1951,1,0,0,0,1949,1947,1,0,0,0,1950,1940,1,0,0,0,1950,1951,1,0,0,
        0,1951,1962,1,0,0,0,1952,1953,5,93,0,0,1953,1954,5,31,0,0,1954,1959,
        3,266,133,0,1955,1956,5,4,0,0,1956,1958,3,266,133,0,1957,1955,1,
        0,0,0,1958,1961,1,0,0,0,1959,1957,1,0,0,0,1959,1960,1,0,0,0,1960,
        1963,1,0,0,0,1961,1959,1,0,0,0,1962,1952,1,0,0,0,1962,1963,1,0,0,
        0,1963,1974,1,0,0,0,1964,1965,5,277,0,0,1965,1966,5,31,0,0,1966,
        1971,3,106,53,0,1967,1968,5,4,0,0,1968,1970,3,106,53,0,1969,1967,
        1,0,0,0,1970,1973,1,0,0,0,1971,1969,1,0,0,0,1971,1972,1,0,0,0,1972,
        1975,1,0,0,0,1973,1971,1,0,0,0,1974,1964,1,0,0,0,1974,1975,1,0,0,
        0,1975,1977,1,0,0,0,1976,1978,3,350,175,0,1977,1976,1,0,0,0,1977,
        1978,1,0,0,0,1978,1984,1,0,0,0,1979,1982,5,164,0,0,1980,1983,5,10,
        0,0,1981,1983,3,266,133,0,1982,1980,1,0,0,0,1982,1981,1,0,0,0,1983,
        1985,1,0,0,0,1984,1979,1,0,0,0,1984,1985,1,0,0,0,1985,1988,1,0,0,
        0,1986,1987,5,201,0,0,1987,1989,3,266,133,0,1988,1986,1,0,0,0,1988,
        1989,1,0,0,0,1989,99,1,0,0,0,1990,1991,3,28,14,0,1991,1992,3,110,
        55,0,1992,101,1,0,0,0,1993,1994,6,51,-1,0,1994,1995,3,104,52,0,1995,
        2016,1,0,0,0,1996,1997,10,3,0,0,1997,1999,7,13,0,0,1998,2000,3,194,
        97,0,1999,1998,1,0,0,0,1999,2000,1,0,0,0,2000,2001,1,0,0,0,2001,
        2015,3,102,51,4,2002,2003,10,2,0,0,2003,2005,5,148,0,0,2004,2006,
        3,194,97,0,2005,2004,1,0,0,0,2005,2006,1,0,0,0,2006,2007,1,0,0,0,
        2007,2015,3,102,51,3,2008,2009,10,1,0,0,2009,2011,7,14,0,0,2010,
        2012,3,194,97,0,2011,2010,1,0,0,0,2011,2012,1,0,0,0,2012,2013,1,
        0,0,0,2013,2015,3,102,51,2,2014,1996,1,0,0,0,2014,2002,1,0,0,0,2014,
        2008,1,0,0,0,2015,2018,1,0,0,0,2016,2014,1,0,0,0,2016,2017,1,0,0,
        0,2017,103,1,0,0,0,2018,2016,1,0,0,0,2019,2029,3,112,56,0,2020,2029,
        3,108,54,0,2021,2022,5,292,0,0,2022,2029,3,84,42,0,2023,2029,3,224,
        112,0,2024,2025,5,2,0,0,2025,2026,3,26,13,0,2026,2027,5,3,0,0,2027,
        2029,1,0,0,0,2028,2019,1,0,0,0,2028,2020,1,0,0,0,2028,2021,1,0,0,
        0,2028,2023,1,0,0,0,2028,2024,1,0,0,0,2029,105,1,0,0,0,2030,2033,
        3,90,45,0,2031,2033,3,266,133,0,2032,2030,1,0,0,0,2032,2031,1,0,
        0,0,2033,2035,1,0,0,0,2034,2036,7,15,0,0,2035,2034,1,0,0,0,2035,
        2036,1,0,0,0,2036,2039,1,0,0,0,2037,2038,5,198,0,0,2038,2040,7,16,
        0,0,2039,2037,1,0,0,0,2039,2040,1,0,0,0,2040,107,1,0,0,0,2041,2043,
        3,144,72,0,2042,2044,3,110,55,0,2043,2042,1,0,0,0,2044,2045,1,0,
        0,0,2045,2043,1,0,0,0,2045,2046,1,0,0,0,2046,109,1,0,0,0,2047,2049,
        3,114,57,0,2048,2050,3,136,68,0,2049,2048,1,0,0,0,2049,2050,1,0,
        0,0,2050,2051,1,0,0,0,2051,2052,3,98,49,0,2052,2075,1,0,0,0,2053,
        2057,3,116,58,0,2054,2056,3,192,96,0,2055,2054,1,0,0,0,2056,2059,
        1,0,0,0,2057,2055,1,0,0,0,2057,2058,1,0,0,0,2058,2061,1,0,0,0,2059,
        2057,1,0,0,0,2060,2062,3,136,68,0,2061,2060,1,0,0,0,2061,2062,1,
        0,0,0,2062,2064,1,0,0,0,2063,2065,3,150,75,0,2064,2063,1,0,0,0,2064,
        2065,1,0,0,0,2065,2067,1,0,0,0,2066,2068,3,138,69,0,2067,2066,1,
        0,0,0,2067,2068,1,0,0,0,2068,2070,1,0,0,0,2069,2071,3,350,175,0,
        2070,2069,1,0,0,0,2070,2071,1,0,0,0,2071,2072,1,0,0,0,2072,2073,
        3,98,49,0,2073,2075,1,0,0,0,2074,2047,1,0,0,0,2074,2053,1,0,0,0,
        2075,111,1,0,0,0,2076,2078,3,114,57,0,2077,2079,3,144,72,0,2078,
        2077,1,0,0,0,2078,2079,1,0,0,0,2079,2083,1,0,0,0,2080,2082,3,192,
        96,0,2081,2080,1,0,0,0,2082,2085,1,0,0,0,2083,2081,1,0,0,0,2083,
        2084,1,0,0,0,2084,2087,1,0,0,0,2085,2083,1,0,0,0,2086,2088,3,136,
        68,0,2087,2086,1,0,0,0,2087,2088,1,0,0,0,2088,2090,1,0,0,0,2089,
        2091,3,150,75,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,2093,1,
        0,0,0,2092,2094,3,138,69,0,2093,2092,1,0,0,0,2093,2094,1,0,0,0,2094,
        2096,1,0,0,0,2095,2097,3,350,175,0,2096,2095,1,0,0,0,2096,2097,1,
        0,0,0,2097,2121,1,0,0,0,2098,2100,3,116,58,0,2099,2101,3,144,72,
        0,2100,2099,1,0,0,0,2100,2101,1,0,0,0,2101,2105,1,0,0,0,2102,2104,
        3,192,96,0,2103,2102,1,0,0,0,2104,2107,1,0,0,0,2105,2103,1,0,0,0,
        2105,2106,1,0,0,0,2106,2109,1,0,0,0,2107,2105,1,0,0,0,2108,2110,
        3,136,68,0,2109,2108,1,0,0,0,2109,2110,1,0,0,0,2110,2112,1,0,0,0,
        2111,2113,3,150,75,0,2112,2111,1,0,0,0,2112,2113,1,0,0,0,2113,2115,
        1,0,0,0,2114,2116,3,138,69,0,2115,2114,1,0,0,0,2115,2116,1,0,0,0,
        2116,2118,1,0,0,0,2117,2119,3,350,175,0,2118,2117,1,0,0,0,2118,2119,
        1,0,0,0,2119,2121,1,0,0,0,2120,2076,1,0,0,0,2120,2098,1,0,0,0,2121,
        113,1,0,0,0,2122,2123,5,262,0,0,2123,2124,5,313,0,0,2124,2126,5,
        2,0,0,2125,2127,3,194,97,0,2126,2125,1,0,0,0,2126,2127,1,0,0,0,2127,
        2128,1,0,0,0,2128,2129,3,272,136,0,2129,2130,5,3,0,0,2130,2142,1,
        0,0,0,2131,2133,5,176,0,0,2132,2134,3,194,97,0,2133,2132,1,0,0,0,
        2133,2134,1,0,0,0,2134,2135,1,0,0,0,2135,2142,3,272,136,0,2136,2138,
        5,237,0,0,2137,2139,3,194,97,0,2138,2137,1,0,0,0,2138,2139,1,0,0,
        0,2139,2140,1,0,0,0,2140,2142,3,272,136,0,2141,2122,1,0,0,0,2141,
        2131,1,0,0,0,2141,2136,1,0,0,0,2142,2144,1,0,0,0,2143,2145,3,240,
        120,0,2144,2143,1,0,0,0,2144,2145,1,0,0,0,2145,2148,1,0,0,0,2146,
        2147,5,235,0,0,2147,2149,3,386,193,0,2148,2146,1,0,0,0,2148,2149,
        1,0,0,0,2149,2150,1,0,0,0,2150,2151,5,331,0,0,2151,2164,3,386,193,
        0,2152,2162,5,20,0,0,2153,2163,3,212,106,0,2154,2163,3,332,166,0,
        2155,2158,5,2,0,0,2156,2159,3,212,106,0,2157,2159,3,332,166,0,2158,
        2156,1,0,0,0,2158,2157,1,0,0,0,2159,2160,1,0,0,0,2160,2161,5,3,0,
        0,2161,2163,1,0,0,0,2162,2153,1,0,0,0,2162,2154,1,0,0,0,2162,2155,
        1,0,0,0,2163,2165,1,0,0,0,2164,2152,1,0,0,0,2164,2165,1,0,0,0,2165,
        2167,1,0,0,0,2166,2168,3,240,120,0,2167,2166,1,0,0,0,2167,2168,1,
        0,0,0,2168,2171,1,0,0,0,2169,2170,5,234,0,0,2170,2172,3,386,193,
        0,2171,2169,1,0,0,0,2171,2172,1,0,0,0,2172,115,1,0,0,0,2173,2177,
        5,262,0,0,2174,2176,3,140,70,0,2175,2174,1,0,0,0,2176,2179,1,0,0,
        0,2177,2175,1,0,0,0,2177,2178,1,0,0,0,2178,2181,1,0,0,0,2179,2177,
        1,0,0,0,2180,2182,3,194,97,0,2181,2180,1,0,0,0,2181,2182,1,0,0,0,
        2182,2183,1,0,0,0,2183,2184,3,256,128,0,2184,117,1,0,0,0,2185,2186,
        5,268,0,0,2186,2187,3,132,66,0,2187,119,1,0,0,0,2188,2189,5,342,
        0,0,2189,2192,5,177,0,0,2190,2191,5,14,0,0,2191,2193,3,274,137,0,
        2192,2190,1,0,0,0,2192,2193,1,0,0,0,2193,2194,1,0,0,0,2194,2195,
        5,299,0,0,2195,2196,3,126,63,0,2196,121,1,0,0,0,2197,2198,5,342,
        0,0,2198,2199,5,196,0,0,2199,2202,5,177,0,0,2200,2201,5,31,0,0,2201,
        2203,5,295,0,0,2202,2200,1,0,0,0,2202,2203,1,0,0,0,2203,2206,1,0,
        0,0,2204,2205,5,14,0,0,2205,2207,3,274,137,0,2206,2204,1,0,0,0,2206,
        2207,1,0,0,0,2207,2208,1,0,0,0,2208,2209,5,299,0,0,2209,2210,3,128,
        64,0,2210,123,1,0,0,0,2211,2212,5,342,0,0,2212,2213,5,196,0,0,2213,
        2214,5,177,0,0,2214,2215,5,31,0,0,2215,2218,5,279,0,0,2216,2217,
        5,14,0,0,2217,2219,3,274,137,0,2218,2216,1,0,0,0,2218,2219,1,0,0,
        0,2219,2220,1,0,0,0,2220,2221,5,299,0,0,2221,2222,3,130,65,0,2222,
        125,1,0,0,0,2223,2231,5,84,0,0,2224,2225,5,328,0,0,2225,2226,5,268,
        0,0,2226,2231,5,362,0,0,2227,2228,5,328,0,0,2228,2229,5,268,0,0,
        2229,2231,3,132,66,0,2230,2223,1,0,0,0,2230,2224,1,0,0,0,2230,2227,
        1,0,0,0,2231,127,1,0,0,0,2232,2233,5,147,0,0,2233,2251,5,362,0,0,
        2234,2235,5,147,0,0,2235,2236,5,2,0,0,2236,2237,3,242,121,0,2237,
        2238,5,3,0,0,2238,2239,5,332,0,0,2239,2240,5,2,0,0,2240,2245,3,266,
        133,0,2241,2242,5,4,0,0,2242,2244,3,266,133,0,2243,2241,1,0,0,0,
        2244,2247,1,0,0,0,2245,2243,1,0,0,0,2245,2246,1,0,0,0,2246,2248,
        1,0,0,0,2247,2245,1,0,0,0,2248,2249,5,3,0,0,2249,2251,1,0,0,0,2250,
        2232,1,0,0,0,2250,2234,1,0,0,0,2251,129,1,0,0,0,2252,2257,5,84,0,
        0,2253,2254,5,328,0,0,2254,2255,5,268,0,0,2255,2257,3,132,66,0,2256,
        2252,1,0,0,0,2256,2253,1,0,0,0,2257,131,1,0,0,0,2258,2263,3,134,
        67,0,2259,2260,5,4,0,0,2260,2262,3,134,67,0,2261,2259,1,0,0,0,2262,
        2265,1,0,0,0,2263,2261,1,0,0,0,2263,2264,1,0,0,0,2264,133,1,0,0,
        0,2265,2263,1,0,0,0,2266,2267,3,244,122,0,2267,2268,5,351,0,0,2268,
        2269,3,266,133,0,2269,135,1,0,0,0,2270,2271,5,343,0,0,2271,2272,
        3,274,137,0,2272,137,1,0,0,0,2273,2274,5,132,0,0,2274,2275,3,274,
        137,0,2275,139,1,0,0,0,2276,2277,5,373,0,0,2277,2284,3,142,71,0,
        2278,2280,5,4,0,0,2279,2278,1,0,0,0,2279,2280,1,0,0,0,2280,2281,
        1,0,0,0,2281,2283,3,142,71,0,2282,2279,1,0,0,0,2283,2286,1,0,0,0,
        2284,2282,1,0,0,0,2284,2285,1,0,0,0,2285,2287,1,0,0,0,2286,2284,
        1,0,0,0,2287,2288,5,374,0,0,2288,141,1,0,0,0,2289,2303,3,374,187,
        0,2290,2291,3,374,187,0,2291,2292,5,2,0,0,2292,2297,3,282,141,0,
        2293,2294,5,4,0,0,2294,2296,3,282,141,0,2295,2293,1,0,0,0,2296,2299,
        1,0,0,0,2297,2295,1,0,0,0,2297,2298,1,0,0,0,2298,2300,1,0,0,0,2299,
        2297,1,0,0,0,2300,2301,5,3,0,0,2301,2303,1,0,0,0,2302,2289,1,0,0,
        0,2302,2290,1,0,0,0,2303,143,1,0,0,0,2304,2305,5,123,0,0,2305,2310,
        3,196,98,0,2306,2307,5,4,0,0,2307,2309,3,196,98,0,2308,2306,1,0,
        0,0,2309,2312,1,0,0,0,2310,2308,1,0,0,0,2310,2311,1,0,0,0,2311,2316,
        1,0,0,0,2312,2310,1,0,0,0,2313,2315,3,192,96,0,2314,2313,1,0,0,0,
        2315,2318,1,0,0,0,2316,2314,1,0,0,0,2316,2317,1,0,0,0,2317,2320,
        1,0,0,0,2318,2316,1,0,0,0,2319,2321,3,160,80,0,2320,2319,1,0,0,0,
        2320,2321,1,0,0,0,2321,2323,1,0,0,0,2322,2324,3,166,83,0,2323,2322,
        1,0,0,0,2323,2324,1,0,0,0,2324,145,1,0,0,0,2325,2326,7,17,0,0,2326,
        147,1,0,0,0,2327,2329,5,119,0,0,2328,2327,1,0,0,0,2328,2329,1,0,
        0,0,2329,2330,1,0,0,0,2330,2331,7,18,0,0,2331,2332,5,20,0,0,2332,
        2333,5,200,0,0,2333,2342,3,390,195,0,2334,2336,5,119,0,0,2335,2334,
        1,0,0,0,2335,2336,1,0,0,0,2336,2337,1,0,0,0,2337,2338,7,19,0,0,2338,
        2339,5,20,0,0,2339,2340,5,200,0,0,2340,2342,3,278,139,0,2341,2328,
        1,0,0,0,2341,2335,1,0,0,0,2342,149,1,0,0,0,2343,2344,5,130,0,0,2344,
        2345,5,31,0,0,2345,2350,3,152,76,0,2346,2347,5,4,0,0,2347,2349,3,
        152,76,0,2348,2346,1,0,0,0,2349,2352,1,0,0,0,2350,2348,1,0,0,0,2350,
        2351,1,0,0,0,2351,2383,1,0,0,0,2352,2350,1,0,0,0,2353,2354,5,130,
        0,0,2354,2355,5,31,0,0,2355,2360,3,266,133,0,2356,2357,5,4,0,0,2357,
        2359,3,266,133,0,2358,2356,1,0,0,0,2359,2362,1,0,0,0,2360,2358,1,
        0,0,0,2360,2361,1,0,0,0,2361,2380,1,0,0,0,2362,2360,1,0,0,0,2363,
        2364,5,345,0,0,2364,2381,5,255,0,0,2365,2366,5,345,0,0,2366,2381,
        5,61,0,0,2367,2368,5,131,0,0,2368,2369,5,270,0,0,2369,2370,5,2,0,
        0,2370,2375,3,158,79,0,2371,2372,5,4,0,0,2372,2374,3,158,79,0,2373,
        2371,1,0,0,0,2374,2377,1,0,0,0,2375,2373,1,0,0,0,2375,2376,1,0,0,
        0,2376,2378,1,0,0,0,2377,2375,1,0,0,0,2378,2379,5,3,0,0,2379,2381,
        1,0,0,0,2380,2363,1,0,0,0,2380,2365,1,0,0,0,2380,2367,1,0,0,0,2380,
        2381,1,0,0,0,2381,2383,1,0,0,0,2382,2343,1,0,0,0,2382,2353,1,0,0,
        0,2383,151,1,0,0,0,2384,2388,3,90,45,0,2385,2388,3,154,77,0,2386,
        2388,3,266,133,0,2387,2384,1,0,0,0,2387,2385,1,0,0,0,2387,2386,1,
        0,0,0,2388,153,1,0,0,0,2389,2390,7,20,0,0,2390,2391,5,2,0,0,2391,
        2396,3,158,79,0,2392,2393,5,4,0,0,2393,2395,3,158,79,0,2394,2392,
        1,0,0,0,2395,2398,1,0,0,0,2396,2394,1,0,0,0,2396,2397,1,0,0,0,2397,
        2399,1,0,0,0,2398,2396,1,0,0,0,2399,2400,5,3,0,0,2400,2415,1,0,0,
        0,2401,2402,5,131,0,0,2402,2403,5,270,0,0,2403,2404,5,2,0,0,2404,
        2409,3,156,78,0,2405,2406,5,4,0,0,2406,2408,3,156,78,0,2407,2405,
        1,0,0,0,2408,2411,1,0,0,0,2409,2407,1,0,0,0,2409,2410,1,0,0,0,2410,
        2412,1,0,0,0,2411,2409,1,0,0,0,2412,2413,5,3,0,0,2413,2415,1,0,0,
        0,2414,2389,1,0,0,0,2414,2401,1,0,0,0,2415,155,1,0,0,0,2416,2419,
        3,154,77,0,2417,2419,3,158,79,0,2418,2416,1,0,0,0,2418,2417,1,0,
        0,0,2419,157,1,0,0,0,2420,2441,3,90,45,0,2421,2441,3,266,133,0,2422,
        2437,5,2,0,0,2423,2426,3,90,45,0,2424,2426,3,266,133,0,2425,2423,
        1,0,0,0,2425,2424,1,0,0,0,2426,2434,1,0,0,0,2427,2430,5,4,0,0,2428,
        2431,3,90,45,0,2429,2431,3,266,133,0,2430,2428,1,0,0,0,2430,2429,
        1,0,0,0,2431,2433,1,0,0,0,2432,2427,1,0,0,0,2433,2436,1,0,0,0,2434,
        2432,1,0,0,0,2434,2435,1,0,0,0,2435,2438,1,0,0,0,2436,2434,1,0,0,
        0,2437,2425,1,0,0,0,2437,2438,1,0,0,0,2438,2439,1,0,0,0,2439,2441,
        5,3,0,0,2440,2420,1,0,0,0,2440,2421,1,0,0,0,2440,2422,1,0,0,0,2441,
        159,1,0,0,0,2442,2443,5,222,0,0,2443,2444,5,2,0,0,2444,2445,3,256,
        128,0,2445,2446,5,119,0,0,2446,2447,3,162,81,0,2447,2448,5,140,0,
        0,2448,2449,5,2,0,0,2449,2454,3,164,82,0,2450,2451,5,4,0,0,2451,
        2453,3,164,82,0,2452,2450,1,0,0,0,2453,2456,1,0,0,0,2454,2452,1,
        0,0,0,2454,2455,1,0,0,0,2455,2457,1,0,0,0,2456,2454,1,0,0,0,2457,
        2458,5,3,0,0,2458,2459,5,3,0,0,2459,161,1,0,0,0,2460,2473,3,374,
        187,0,2461,2462,5,2,0,0,2462,2467,3,374,187,0,2463,2464,5,4,0,0,
        2464,2466,3,374,187,0,2465,2463,1,0,0,0,2466,2469,1,0,0,0,2467,2465,
        1,0,0,0,2467,2468,1,0,0,0,2468,2470,1,0,0,0,2469,2467,1,0,0,0,2470,
        2471,5,3,0,0,2471,2473,1,0,0,0,2472,2460,1,0,0,0,2472,2461,1,0,0,
        0,2473,163,1,0,0,0,2474,2479,3,266,133,0,2475,2477,5,20,0,0,2476,
        2475,1,0,0,0,2476,2477,1,0,0,0,2477,2478,1,0,0,0,2478,2480,3,374,
        187,0,2479,2476,1,0,0,0,2479,2480,1,0,0,0,2480,165,1,0,0,0,2481,
        2483,5,326,0,0,2482,2484,3,168,84,0,2483,2482,1,0,0,0,2483,2484,
        1,0,0,0,2484,2485,1,0,0,0,2485,2486,5,2,0,0,2486,2487,3,170,85,0,
        2487,2492,5,3,0,0,2488,2490,5,20,0,0,2489,2488,1,0,0,0,2489,2490,
        1,0,0,0,2490,2491,1,0,0,0,2491,2493,3,374,187,0,2492,2489,1,0,0,
        0,2492,2493,1,0,0,0,2493,167,1,0,0,0,2494,2495,7,21,0,0,2495,2496,
        5,198,0,0,2496,169,1,0,0,0,2497,2500,3,172,86,0,2498,2500,3,174,
        87,0,2499,2497,1,0,0,0,2499,2498,1,0,0,0,2500,171,1,0,0,0,2501,2502,
        3,178,89,0,2502,2503,5,119,0,0,2503,2504,3,180,90,0,2504,2505,5,
        140,0,0,2505,2506,5,2,0,0,2506,2511,3,182,91,0,2507,2508,5,4,0,0,
        2508,2510,3,182,91,0,2509,2507,1,0,0,0,2510,2513,1,0,0,0,2511,2509,
        1,0,0,0,2511,2512,1,0,0,0,2512,2514,1,0,0,0,2513,2511,1,0,0,0,2514,
        2515,5,3,0,0,2515,173,1,0,0,0,2516,2517,5,2,0,0,2517,2522,3,178,
        89,0,2518,2519,5,4,0,0,2519,2521,3,178,89,0,2520,2518,1,0,0,0,2521,
        2524,1,0,0,0,2522,2520,1,0,0,0,2522,2523,1,0,0,0,2523,2525,1,0,0,
        0,2524,2522,1,0,0,0,2525,2526,5,3,0,0,2526,2527,5,119,0,0,2527,2528,
        3,180,90,0,2528,2529,5,140,0,0,2529,2530,5,2,0,0,2530,2535,3,176,
        88,0,2531,2532,5,4,0,0,2532,2534,3,176,88,0,2533,2531,1,0,0,0,2534,
        2537,1,0,0,0,2535,2533,1,0,0,0,2535,2536,1,0,0,0,2536,2538,1,0,0,
        0,2537,2535,1,0,0,0,2538,2539,5,3,0,0,2539,175,1,0,0,0,2540,2541,
        5,2,0,0,2541,2546,3,184,92,0,2542,2543,5,4,0,0,2543,2545,3,184,92,
        0,2544,2542,1,0,0,0,2545,2548,1,0,0,0,2546,2544,1,0,0,0,2546,2547,
        1,0,0,0,2547,2549,1,0,0,0,2548,2546,1,0,0,0,2549,2551,5,3,0,0,2550,
        2552,3,186,93,0,2551,2550,1,0,0,0,2551,2552,1,0,0,0,2552,177,1,0,
        0,0,2553,2554,3,374,187,0,2554,179,1,0,0,0,2555,2556,3,374,187,0,
        2556,181,1,0,0,0,2557,2559,3,184,92,0,2558,2560,3,186,93,0,2559,
        2558,1,0,0,0,2559,2560,1,0,0,0,2560,183,1,0,0,0,2561,2562,3,244,
        122,0,2562,185,1,0,0,0,2563,2565,5,20,0,0,2564,2563,1,0,0,0,2564,
        2565,1,0,0,0,2565,2566,1,0,0,0,2566,2567,3,374,187,0,2567,187,1,
        0,0,0,2568,2569,5,137,0,0,2569,2570,5,196,0,0,2570,2571,5,105,0,
        0,2571,189,1,0,0,0,2572,2573,5,137,0,0,2573,2574,5,105,0,0,2574,
        191,1,0,0,0,2575,2576,5,158,0,0,2576,2578,5,337,0,0,2577,2579,5,
        210,0,0,2578,2577,1,0,0,0,2578,2579,1,0,0,0,2579,2580,1,0,0,0,2580,
        2581,3,88,44,0,2581,2590,5,2,0,0,2582,2587,3,266,133,0,2583,2584,
        5,4,0,0,2584,2586,3,266,133,0,2585,2583,1,0,0,0,2586,2589,1,0,0,
        0,2587,2585,1,0,0,0,2587,2588,1,0,0,0,2588,2591,1,0,0,0,2589,2587,
        1,0,0,0,2590,2582,1,0,0,0,2590,2591,1,0,0,0,2591,2592,1,0,0,0,2592,
        2593,5,3,0,0,2593,2605,3,238,119,0,2594,2596,5,20,0,0,2595,2594,
        1,0,0,0,2595,2596,1,0,0,0,2596,2597,1,0,0,0,2597,2602,3,374,187,
        0,2598,2599,5,4,0,0,2599,2601,3,374,187,0,2600,2598,1,0,0,0,2601,
        2604,1,0,0,0,2602,2600,1,0,0,0,2602,2603,1,0,0,0,2603,2606,1,0,0,
        0,2604,2602,1,0,0,0,2605,2595,1,0,0,0,2605,2606,1,0,0,0,2606,193,
        1,0,0,0,2607,2608,7,22,0,0,2608,195,1,0,0,0,2609,2611,5,158,0,0,
        2610,2609,1,0,0,0,2610,2611,1,0,0,0,2611,2612,1,0,0,0,2612,2616,
        3,222,111,0,2613,2615,3,198,99,0,2614,2613,1,0,0,0,2615,2618,1,0,
        0,0,2616,2614,1,0,0,0,2616,2617,1,0,0,0,2617,2621,1,0,0,0,2618,2616,
        1,0,0,0,2619,2621,3,84,42,0,2620,2610,1,0,0,0,2620,2619,1,0,0,0,
        2621,197,1,0,0,0,2622,2626,3,200,100,0,2623,2626,3,160,80,0,2624,
        2626,3,166,83,0,2625,2622,1,0,0,0,2625,2623,1,0,0,0,2625,2624,1,
        0,0,0,2626,199,1,0,0,0,2627,2628,3,202,101,0,2628,2630,5,155,0,0,
        2629,2631,5,158,0,0,2630,2629,1,0,0,0,2630,2631,1,0,0,0,2631,2632,
        1,0,0,0,2632,2634,3,222,111,0,2633,2635,3,204,102,0,2634,2633,1,
        0,0,0,2634,2635,1,0,0,0,2635,2645,1,0,0,0,2636,2637,5,193,0,0,2637,
        2638,3,202,101,0,2638,2640,5,155,0,0,2639,2641,5,158,0,0,2640,2639,
        1,0,0,0,2640,2641,1,0,0,0,2641,2642,1,0,0,0,2642,2643,3,222,111,
        0,2643,2645,1,0,0,0,2644,2627,1,0,0,0,2644,2636,1,0,0,0,2645,201,
        1,0,0,0,2646,2648,5,144,0,0,2647,2646,1,0,0,0,2647,2648,1,0,0,0,
        2648,2671,1,0,0,0,2649,2671,5,60,0,0,2650,2652,5,161,0,0,2651,2653,
        5,210,0,0,2652,2651,1,0,0,0,2652,2653,1,0,0,0,2653,2671,1,0,0,0,
        2654,2656,5,161,0,0,2655,2654,1,0,0,0,2655,2656,1,0,0,0,2656,2657,
        1,0,0,0,2657,2671,5,263,0,0,2658,2660,5,249,0,0,2659,2661,5,210,
        0,0,2660,2659,1,0,0,0,2660,2661,1,0,0,0,2661,2671,1,0,0,0,2662,2664,
        5,124,0,0,2663,2665,5,210,0,0,2664,2663,1,0,0,0,2664,2665,1,0,0,
        0,2665,2671,1,0,0,0,2666,2668,5,161,0,0,2667,2666,1,0,0,0,2667,2668,
        1,0,0,0,2668,2669,1,0,0,0,2669,2671,5,15,0,0,2670,2647,1,0,0,0,2670,
        2649,1,0,0,0,2670,2650,1,0,0,0,2670,2655,1,0,0,0,2670,2658,1,0,0,
        0,2670,2662,1,0,0,0,2670,2667,1,0,0,0,2671,203,1,0,0,0,2672,2673,
        5,202,0,0,2673,2677,3,274,137,0,2674,2675,5,331,0,0,2675,2677,3,
        210,105,0,2676,2672,1,0,0,0,2676,2674,1,0,0,0,2677,205,1,0,0,0,2678,
        2679,5,294,0,0,2679,2681,5,2,0,0,2680,2682,3,208,104,0,2681,2680,
        1,0,0,0,2681,2682,1,0,0,0,2682,2683,1,0,0,0,2683,2688,5,3,0,0,2684,
        2685,5,242,0,0,2685,2686,5,2,0,0,2686,2687,5,381,0,0,2687,2689,5,
        3,0,0,2688,2684,1,0,0,0,2688,2689,1,0,0,0,2689,207,1,0,0,0,2690,
        2692,5,361,0,0,2691,2690,1,0,0,0,2691,2692,1,0,0,0,2692,2693,1,0,
        0,0,2693,2694,7,23,0,0,2694,2715,5,221,0,0,2695,2696,3,266,133,0,
        2696,2697,5,257,0,0,2697,2715,1,0,0,0,2698,2699,5,29,0,0,2699,2700,
        5,381,0,0,2700,2701,5,209,0,0,2701,2702,5,200,0,0,2702,2711,5,381,
        0,0,2703,2709,5,202,0,0,2704,2710,3,374,187,0,2705,2706,3,368,184,
        0,2706,2707,5,2,0,0,2707,2708,5,3,0,0,2708,2710,1,0,0,0,2709,2704,
        1,0,0,0,2709,2705,1,0,0,0,2710,2712,1,0,0,0,2711,2703,1,0,0,0,2711,
        2712,1,0,0,0,2712,2715,1,0,0,0,2713,2715,3,266,133,0,2714,2691,1,
        0,0,0,2714,2695,1,0,0,0,2714,2698,1,0,0,0,2714,2713,1,0,0,0,2715,
        209,1,0,0,0,2716,2717,5,2,0,0,2717,2718,3,212,106,0,2718,2719,5,
        3,0,0,2719,211,1,0,0,0,2720,2725,3,370,185,0,2721,2722,5,4,0,0,2722,
        2724,3,370,185,0,2723,2721,1,0,0,0,2724,2727,1,0,0,0,2725,2723,1,
        0,0,0,2725,2726,1,0,0,0,2726,213,1,0,0,0,2727,2725,1,0,0,0,2728,
        2729,5,2,0,0,2729,2734,3,216,108,0,2730,2731,5,4,0,0,2731,2733,3,
        216,108,0,2732,2730,1,0,0,0,2733,2736,1,0,0,0,2734,2732,1,0,0,0,
        2734,2735,1,0,0,0,2735,2737,1,0,0,0,2736,2734,1,0,0,0,2737,2738,
        5,3,0,0,2738,215,1,0,0,0,2739,2741,3,370,185,0,2740,2742,7,15,0,
        0,2741,2740,1,0,0,0,2741,2742,1,0,0,0,2742,217,1,0,0,0,2743,2744,
        5,2,0,0,2744,2749,3,220,110,0,2745,2746,5,4,0,0,2746,2748,3,220,
        110,0,2747,2745,1,0,0,0,2748,2751,1,0,0,0,2749,2747,1,0,0,0,2749,
        2750,1,0,0,0,2750,2752,1,0,0,0,2751,2749,1,0,0,0,2752,2753,5,3,0,
        0,2753,219,1,0,0,0,2754,2756,3,374,187,0,2755,2757,3,24,12,0,2756,
        2755,1,0,0,0,2756,2757,1,0,0,0,2757,221,1,0,0,0,2758,2760,3,96,48,
        0,2759,2761,3,148,74,0,2760,2759,1,0,0,0,2760,2761,1,0,0,0,2761,
        2763,1,0,0,0,2762,2764,3,206,103,0,2763,2762,1,0,0,0,2763,2764,1,
        0,0,0,2764,2765,1,0,0,0,2765,2766,3,238,119,0,2766,2786,1,0,0,0,
        2767,2768,5,2,0,0,2768,2769,3,26,13,0,2769,2771,5,3,0,0,2770,2772,
        3,206,103,0,2771,2770,1,0,0,0,2771,2772,1,0,0,0,2772,2773,1,0,0,
        0,2773,2774,3,238,119,0,2774,2786,1,0,0,0,2775,2776,5,2,0,0,2776,
        2777,3,196,98,0,2777,2779,5,3,0,0,2778,2780,3,206,103,0,2779,2778,
        1,0,0,0,2779,2780,1,0,0,0,2780,2781,1,0,0,0,2781,2782,3,238,119,
        0,2782,2786,1,0,0,0,2783,2786,3,224,112,0,2784,2786,3,236,118,0,
        2785,2758,1,0,0,0,2785,2767,1,0,0,0,2785,2775,1,0,0,0,2785,2783,
        1,0,0,0,2785,2784,1,0,0,0,2786,223,1,0,0,0,2787,2788,5,332,0,0,2788,
        2793,3,266,133,0,2789,2790,5,4,0,0,2790,2792,3,266,133,0,2791,2789,
        1,0,0,0,2792,2795,1,0,0,0,2793,2791,1,0,0,0,2793,2794,1,0,0,0,2794,
        2796,1,0,0,0,2795,2793,1,0,0,0,2796,2797,3,238,119,0,2797,225,1,
        0,0,0,2798,2799,5,292,0,0,2799,2801,3,84,42,0,2800,2802,3,228,114,
        0,2801,2800,1,0,0,0,2801,2802,1,0,0,0,2802,2818,1,0,0,0,2803,2804,
        5,292,0,0,2804,2805,5,2,0,0,2805,2806,3,84,42,0,2806,2808,5,3,0,
        0,2807,2809,3,228,114,0,2808,2807,1,0,0,0,2808,2809,1,0,0,0,2809,
        2818,1,0,0,0,2810,2811,5,292,0,0,2811,2812,5,2,0,0,2812,2813,3,26,
        13,0,2813,2815,5,3,0,0,2814,2816,3,228,114,0,2815,2814,1,0,0,0,2815,
        2816,1,0,0,0,2816,2818,1,0,0,0,2817,2798,1,0,0,0,2817,2803,1,0,0,
        0,2817,2810,1,0,0,0,2818,227,1,0,0,0,2819,2820,5,345,0,0,2820,2821,
        5,273,0,0,2821,2839,5,216,0,0,2822,2823,7,24,0,0,2823,2836,5,31,
        0,0,2824,2825,5,2,0,0,2825,2830,3,266,133,0,2826,2827,5,4,0,0,2827,
        2829,3,266,133,0,2828,2826,1,0,0,0,2829,2832,1,0,0,0,2830,2828,1,
        0,0,0,2830,2831,1,0,0,0,2831,2833,1,0,0,0,2832,2830,1,0,0,0,2833,
        2834,5,3,0,0,2834,2837,1,0,0,0,2835,2837,3,266,133,0,2836,2824,1,
        0,0,0,2836,2835,1,0,0,0,2837,2839,1,0,0,0,2838,2819,1,0,0,0,2838,
        2822,1,0,0,0,2839,2856,1,0,0,0,2840,2841,7,25,0,0,2841,2854,5,31,
        0,0,2842,2843,5,2,0,0,2843,2848,3,106,53,0,2844,2845,5,4,0,0,2845,
        2847,3,106,53,0,2846,2844,1,0,0,0,2847,2850,1,0,0,0,2848,2846,1,
        0,0,0,2848,2849,1,0,0,0,2849,2851,1,0,0,0,2850,2848,1,0,0,0,2851,
        2852,5,3,0,0,2852,2855,1,0,0,0,2853,2855,3,106,53,0,2854,2842,1,
        0,0,0,2854,2853,1,0,0,0,2855,2857,1,0,0,0,2856,2840,1,0,0,0,2856,
        2857,1,0,0,0,2857,229,1,0,0,0,2858,2859,3,374,187,0,2859,2860,5,
        372,0,0,2860,2861,3,226,113,0,2861,231,1,0,0,0,2862,2865,3,226,113,
        0,2863,2865,3,230,115,0,2864,2862,1,0,0,0,2864,2863,1,0,0,0,2865,
        233,1,0,0,0,2866,2869,3,232,116,0,2867,2869,3,270,135,0,2868,2866,
        1,0,0,0,2868,2867,1,0,0,0,2869,235,1,0,0,0,2870,2871,3,364,182,0,
        2871,2880,5,2,0,0,2872,2877,3,234,117,0,2873,2874,5,4,0,0,2874,2876,
        3,234,117,0,2875,2873,1,0,0,0,2876,2879,1,0,0,0,2877,2875,1,0,0,
        0,2877,2878,1,0,0,0,2878,2881,1,0,0,0,2879,2877,1,0,0,0,2880,2872,
        1,0,0,0,2880,2881,1,0,0,0,2881,2882,1,0,0,0,2882,2883,5,3,0,0,2883,
        2884,3,238,119,0,2884,237,1,0,0,0,2885,2887,5,20,0,0,2886,2885,1,
        0,0,0,2886,2887,1,0,0,0,2887,2888,1,0,0,0,2888,2890,3,376,188,0,
        2889,2891,3,210,105,0,2890,2889,1,0,0,0,2890,2891,1,0,0,0,2891,2893,
        1,0,0,0,2892,2886,1,0,0,0,2892,2893,1,0,0,0,2893,239,1,0,0,0,2894,
        2895,5,256,0,0,2895,2896,5,121,0,0,2896,2897,5,265,0,0,2897,2901,
        3,386,193,0,2898,2899,5,345,0,0,2899,2900,5,266,0,0,2900,2902,3,
        52,26,0,2901,2898,1,0,0,0,2901,2902,1,0,0,0,2902,2944,1,0,0,0,2903,
        2904,5,256,0,0,2904,2905,5,121,0,0,2905,2915,5,85,0,0,2906,2907,
        5,113,0,0,2907,2908,5,298,0,0,2908,2909,5,31,0,0,2909,2913,3,386,
        193,0,2910,2911,5,101,0,0,2911,2912,5,31,0,0,2912,2914,3,386,193,
        0,2913,2910,1,0,0,0,2913,2914,1,0,0,0,2914,2916,1,0,0,0,2915,2906,
        1,0,0,0,2915,2916,1,0,0,0,2916,2922,1,0,0,0,2917,2918,5,48,0,0,2918,
        2919,5,154,0,0,2919,2920,5,298,0,0,2920,2921,5,31,0,0,2921,2923,
        3,386,193,0,2922,2917,1,0,0,0,2922,2923,1,0,0,0,2923,2929,1,0,0,
        0,2924,2925,5,176,0,0,2925,2926,5,156,0,0,2926,2927,5,298,0,0,2927,
        2928,5,31,0,0,2928,2930,3,386,193,0,2929,2924,1,0,0,0,2929,2930,
        1,0,0,0,2930,2935,1,0,0,0,2931,2932,5,165,0,0,2932,2933,5,298,0,
        0,2933,2934,5,31,0,0,2934,2936,3,386,193,0,2935,2931,1,0,0,0,2935,
        2936,1,0,0,0,2936,2941,1,0,0,0,2937,2938,5,197,0,0,2938,2939,5,83,
        0,0,2939,2940,5,20,0,0,2940,2942,3,386,193,0,2941,2937,1,0,0,0,2941,
        2942,1,0,0,0,2942,2944,1,0,0,0,2943,2894,1,0,0,0,2943,2903,1,0,0,
        0,2944,241,1,0,0,0,2945,2950,3,244,122,0,2946,2947,5,4,0,0,2947,
        2949,3,244,122,0,2948,2946,1,0,0,0,2949,2952,1,0,0,0,2950,2948,1,
        0,0,0,2950,2951,1,0,0,0,2951,243,1,0,0,0,2952,2950,1,0,0,0,2953,
        2958,3,370,185,0,2954,2955,5,5,0,0,2955,2957,3,370,185,0,2956,2954,
        1,0,0,0,2957,2960,1,0,0,0,2958,2956,1,0,0,0,2958,2959,1,0,0,0,2959,
        245,1,0,0,0,2960,2958,1,0,0,0,2961,2966,3,248,124,0,2962,2963,5,
        4,0,0,2963,2965,3,248,124,0,2964,2962,1,0,0,0,2965,2968,1,0,0,0,
        2966,2964,1,0,0,0,2966,2967,1,0,0,0,2967,247,1,0,0,0,2968,2966,1,
        0,0,0,2969,2972,3,244,122,0,2970,2971,5,206,0,0,2971,2973,3,52,26,
        0,2972,2970,1,0,0,0,2972,2973,1,0,0,0,2973,249,1,0,0,0,2974,2975,
        3,370,185,0,2975,2976,5,5,0,0,2976,2978,1,0,0,0,2977,2974,1,0,0,
        0,2977,2978,1,0,0,0,2978,2979,1,0,0,0,2979,2980,3,370,185,0,2980,
        251,1,0,0,0,2981,2982,3,370,185,0,2982,2983,5,5,0,0,2983,2985,1,
        0,0,0,2984,2981,1,0,0,0,2984,2985,1,0,0,0,2985,2986,1,0,0,0,2986,
        2987,3,370,185,0,2987,253,1,0,0,0,2988,2991,3,90,45,0,2989,2991,
        3,266,133,0,2990,2988,1,0,0,0,2990,2989,1,0,0,0,2991,2999,1,0,0,
        0,2992,2994,5,20,0,0,2993,2992,1,0,0,0,2993,2994,1,0,0,0,2994,2997,
        1,0,0,0,2995,2998,3,370,185,0,2996,2998,3,210,105,0,2997,2995,1,
        0,0,0,2997,2996,1,0,0,0,2998,3000,1,0,0,0,2999,2993,1,0,0,0,2999,
        3000,1,0,0,0,3000,255,1,0,0,0,3001,3006,3,254,127,0,3002,3003,5,
        4,0,0,3003,3005,3,254,127,0,3004,3002,1,0,0,0,3005,3008,1,0,0,0,
        3006,3004,1,0,0,0,3006,3007,1,0,0,0,3007,257,1,0,0,0,3008,3006,1,
        0,0,0,3009,3010,5,2,0,0,3010,3015,3,260,130,0,3011,3012,5,4,0,0,
        3012,3014,3,260,130,0,3013,3011,1,0,0,0,3014,3017,1,0,0,0,3015,3013,
        1,0,0,0,3015,3016,1,0,0,0,3016,3018,1,0,0,0,3017,3015,1,0,0,0,3018,
        3019,5,3,0,0,3019,259,1,0,0,0,3020,3023,3,262,131,0,3021,3023,3,
        334,167,0,3022,3020,1,0,0,0,3022,3021,1,0,0,0,3023,261,1,0,0,0,3024,
        3038,3,368,184,0,3025,3026,3,374,187,0,3026,3027,5,2,0,0,3027,3032,
        3,264,132,0,3028,3029,5,4,0,0,3029,3031,3,264,132,0,3030,3028,1,
        0,0,0,3031,3034,1,0,0,0,3032,3030,1,0,0,0,3032,3033,1,0,0,0,3033,
        3035,1,0,0,0,3034,3032,1,0,0,0,3035,3036,5,3,0,0,3036,3038,1,0,0,
        0,3037,3024,1,0,0,0,3037,3025,1,0,0,0,3038,263,1,0,0,0,3039,3042,
        3,368,184,0,3040,3042,3,286,143,0,3041,3039,1,0,0,0,3041,3040,1,
        0,0,0,3042,265,1,0,0,0,3043,3044,3,274,137,0,3044,267,1,0,0,0,3045,
        3046,3,374,187,0,3046,3047,5,372,0,0,3047,3048,3,266,133,0,3048,
        269,1,0,0,0,3049,3052,3,266,133,0,3050,3052,3,268,134,0,3051,3049,
        1,0,0,0,3051,3050,1,0,0,0,3052,271,1,0,0,0,3053,3058,3,266,133,0,
        3054,3055,5,4,0,0,3055,3057,3,266,133,0,3056,3054,1,0,0,0,3057,3060,
        1,0,0,0,3058,3056,1,0,0,0,3058,3059,1,0,0,0,3059,273,1,0,0,0,3060,
        3058,1,0,0,0,3061,3062,6,137,-1,0,3062,3063,7,26,0,0,3063,3074,3,
        274,137,5,3064,3065,5,105,0,0,3065,3066,5,2,0,0,3066,3067,3,26,13,
        0,3067,3068,5,3,0,0,3068,3074,1,0,0,0,3069,3071,3,278,139,0,3070,
        3072,3,276,138,0,3071,3070,1,0,0,0,3071,3072,1,0,0,0,3072,3074,1,
        0,0,0,3073,3061,1,0,0,0,3073,3064,1,0,0,0,3073,3069,1,0,0,0,3074,
        3083,1,0,0,0,3075,3076,10,2,0,0,3076,3077,5,14,0,0,3077,3082,3,274,
        137,3,3078,3079,10,1,0,0,3079,3080,5,207,0,0,3080,3082,3,274,137,
        2,3081,3075,1,0,0,0,3081,3078,1,0,0,0,3082,3085,1,0,0,0,3083,3081,
        1,0,0,0,3083,3084,1,0,0,0,3084,275,1,0,0,0,3085,3083,1,0,0,0,3086,
        3088,5,196,0,0,3087,3086,1,0,0,0,3087,3088,1,0,0,0,3088,3089,1,0,
        0,0,3089,3090,5,24,0,0,3090,3091,3,278,139,0,3091,3092,5,14,0,0,
        3092,3093,3,278,139,0,3093,3169,1,0,0,0,3094,3096,5,196,0,0,3095,
        3094,1,0,0,0,3095,3096,1,0,0,0,3096,3097,1,0,0,0,3097,3098,5,140,
        0,0,3098,3099,5,2,0,0,3099,3104,3,266,133,0,3100,3101,5,4,0,0,3101,
        3103,3,266,133,0,3102,3100,1,0,0,0,3103,3106,1,0,0,0,3104,3102,1,
        0,0,0,3104,3105,1,0,0,0,3105,3107,1,0,0,0,3106,3104,1,0,0,0,3107,
        3108,5,3,0,0,3108,3169,1,0,0,0,3109,3111,5,196,0,0,3110,3109,1,0,
        0,0,3110,3111,1,0,0,0,3111,3112,1,0,0,0,3112,3113,5,140,0,0,3113,
        3114,5,2,0,0,3114,3115,3,26,13,0,3115,3116,5,3,0,0,3116,3169,1,0,
        0,0,3117,3119,5,196,0,0,3118,3117,1,0,0,0,3118,3119,1,0,0,0,3119,
        3120,1,0,0,0,3120,3121,7,27,0,0,3121,3169,3,278,139,0,3122,3124,
        5,196,0,0,3123,3122,1,0,0,0,3123,3124,1,0,0,0,3124,3125,1,0,0,0,
        3125,3126,7,28,0,0,3126,3140,7,29,0,0,3127,3128,5,2,0,0,3128,3141,
        5,3,0,0,3129,3130,5,2,0,0,3130,3135,3,266,133,0,3131,3132,5,4,0,
        0,3132,3134,3,266,133,0,3133,3131,1,0,0,0,3134,3137,1,0,0,0,3135,
        3133,1,0,0,0,3135,3136,1,0,0,0,3136,3138,1,0,0,0,3137,3135,1,0,0,
        0,3138,3139,5,3,0,0,3139,3141,1,0,0,0,3140,3127,1,0,0,0,3140,3129,
        1,0,0,0,3141,3169,1,0,0,0,3142,3144,5,196,0,0,3143,3142,1,0,0,0,
        3143,3144,1,0,0,0,3144,3145,1,0,0,0,3145,3146,7,28,0,0,3146,3149,
        3,278,139,0,3147,3148,5,100,0,0,3148,3150,3,386,193,0,3149,3147,
        1,0,0,0,3149,3150,1,0,0,0,3150,3169,1,0,0,0,3151,3153,5,153,0,0,
        3152,3154,5,196,0,0,3153,3152,1,0,0,0,3153,3154,1,0,0,0,3154,3155,
        1,0,0,0,3155,3169,5,197,0,0,3156,3158,5,153,0,0,3157,3159,5,196,
        0,0,3158,3157,1,0,0,0,3158,3159,1,0,0,0,3159,3160,1,0,0,0,3160,3169,
        7,30,0,0,3161,3163,5,153,0,0,3162,3164,5,196,0,0,3163,3162,1,0,0,
        0,3163,3164,1,0,0,0,3164,3165,1,0,0,0,3165,3166,5,92,0,0,3166,3167,
        5,123,0,0,3167,3169,3,278,139,0,3168,3087,1,0,0,0,3168,3095,1,0,
        0,0,3168,3110,1,0,0,0,3168,3118,1,0,0,0,3168,3123,1,0,0,0,3168,3143,
        1,0,0,0,3168,3151,1,0,0,0,3168,3156,1,0,0,0,3168,3161,1,0,0,0,3169,
        277,1,0,0,0,3170,3171,6,139,-1,0,3171,3175,3,282,141,0,3172,3173,
        7,31,0,0,3173,3175,3,278,139,7,3174,3170,1,0,0,0,3174,3172,1,0,0,
        0,3175,3197,1,0,0,0,3176,3177,10,6,0,0,3177,3178,7,32,0,0,3178,3196,
        3,278,139,7,3179,3180,10,5,0,0,3180,3181,7,33,0,0,3181,3196,3,278,
        139,6,3182,3183,10,4,0,0,3183,3184,5,366,0,0,3184,3196,3,278,139,
        5,3185,3186,10,3,0,0,3186,3187,5,369,0,0,3187,3196,3,278,139,4,3188,
        3189,10,2,0,0,3189,3190,5,367,0,0,3190,3196,3,278,139,3,3191,3192,
        10,1,0,0,3192,3193,3,288,144,0,3193,3194,3,278,139,2,3194,3196,1,
        0,0,0,3195,3176,1,0,0,0,3195,3179,1,0,0,0,3195,3182,1,0,0,0,3195,
        3185,1,0,0,0,3195,3188,1,0,0,0,3195,3191,1,0,0,0,3196,3199,1,0,0,
        0,3197,3195,1,0,0,0,3197,3198,1,0,0,0,3198,279,1,0,0,0,3199,3197,
        1,0,0,0,3200,3201,7,34,0,0,3201,281,1,0,0,0,3202,3203,6,141,-1,0,
        3203,3452,7,35,0,0,3204,3205,7,36,0,0,3205,3208,5,2,0,0,3206,3209,
        3,280,140,0,3207,3209,3,386,193,0,3208,3206,1,0,0,0,3208,3207,1,
        0,0,0,3209,3210,1,0,0,0,3210,3211,5,4,0,0,3211,3212,3,278,139,0,
        3212,3213,5,4,0,0,3213,3214,3,278,139,0,3214,3215,5,3,0,0,3215,3452,
        1,0,0,0,3216,3217,7,37,0,0,3217,3220,5,2,0,0,3218,3221,3,280,140,
        0,3219,3221,3,386,193,0,3220,3218,1,0,0,0,3220,3219,1,0,0,0,3221,
        3222,1,0,0,0,3222,3223,5,4,0,0,3223,3224,3,278,139,0,3224,3225,5,
        4,0,0,3225,3226,3,278,139,0,3226,3227,5,3,0,0,3227,3452,1,0,0,0,
        3228,3230,5,35,0,0,3229,3231,3,348,174,0,3230,3229,1,0,0,0,3231,
        3232,1,0,0,0,3232,3230,1,0,0,0,3232,3233,1,0,0,0,3233,3236,1,0,0,
        0,3234,3235,5,97,0,0,3235,3237,3,266,133,0,3236,3234,1,0,0,0,3236,
        3237,1,0,0,0,3237,3238,1,0,0,0,3238,3239,5,99,0,0,3239,3452,1,0,
        0,0,3240,3241,5,35,0,0,3241,3243,3,266,133,0,3242,3244,3,348,174,
        0,3243,3242,1,0,0,0,3244,3245,1,0,0,0,3245,3243,1,0,0,0,3245,3246,
        1,0,0,0,3246,3249,1,0,0,0,3247,3248,5,97,0,0,3248,3250,3,266,133,
        0,3249,3247,1,0,0,0,3249,3250,1,0,0,0,3250,3251,1,0,0,0,3251,3252,
        5,99,0,0,3252,3452,1,0,0,0,3253,3254,7,38,0,0,3254,3255,5,2,0,0,
        3255,3256,3,266,133,0,3256,3257,5,20,0,0,3257,3258,3,316,158,0,3258,
        3259,5,3,0,0,3259,3452,1,0,0,0,3260,3261,5,285,0,0,3261,3270,5,2,
        0,0,3262,3267,3,254,127,0,3263,3264,5,4,0,0,3264,3266,3,254,127,
        0,3265,3263,1,0,0,0,3266,3269,1,0,0,0,3267,3265,1,0,0,0,3267,3268,
        1,0,0,0,3268,3271,1,0,0,0,3269,3267,1,0,0,0,3270,3262,1,0,0,0,3270,
        3271,1,0,0,0,3271,3272,1,0,0,0,3272,3452,5,3,0,0,3273,3274,5,116,
        0,0,3274,3275,5,2,0,0,3275,3278,3,266,133,0,3276,3277,5,138,0,0,
        3277,3279,5,198,0,0,3278,3276,1,0,0,0,3278,3279,1,0,0,0,3279,3280,
        1,0,0,0,3280,3281,5,3,0,0,3281,3452,1,0,0,0,3282,3283,5,17,0,0,3283,
        3284,5,2,0,0,3284,3287,3,266,133,0,3285,3286,5,138,0,0,3286,3288,
        5,198,0,0,3287,3285,1,0,0,0,3287,3288,1,0,0,0,3288,3289,1,0,0,0,
        3289,3290,5,3,0,0,3290,3452,1,0,0,0,3291,3292,5,157,0,0,3292,3293,
        5,2,0,0,3293,3296,3,266,133,0,3294,3295,5,138,0,0,3295,3297,5,198,
        0,0,3296,3294,1,0,0,0,3296,3297,1,0,0,0,3297,3298,1,0,0,0,3298,3299,
        5,3,0,0,3299,3452,1,0,0,0,3300,3301,5,224,0,0,3301,3302,5,2,0,0,
        3302,3303,3,278,139,0,3303,3304,5,140,0,0,3304,3305,3,278,139,0,
        3305,3306,5,3,0,0,3306,3452,1,0,0,0,3307,3452,3,286,143,0,3308,3452,
        5,362,0,0,3309,3310,3,368,184,0,3310,3311,5,5,0,0,3311,3312,5,362,
        0,0,3312,3452,1,0,0,0,3313,3314,5,2,0,0,3314,3317,3,254,127,0,3315,
        3316,5,4,0,0,3316,3318,3,254,127,0,3317,3315,1,0,0,0,3318,3319,1,
        0,0,0,3319,3317,1,0,0,0,3319,3320,1,0,0,0,3320,3321,1,0,0,0,3321,
        3322,5,3,0,0,3322,3452,1,0,0,0,3323,3324,5,2,0,0,3324,3325,3,26,
        13,0,3325,3326,5,3,0,0,3326,3452,1,0,0,0,3327,3328,5,136,0,0,3328,
        3329,5,2,0,0,3329,3330,3,266,133,0,3330,3331,5,3,0,0,3331,3452,1,
        0,0,0,3332,3333,3,364,182,0,3333,3345,5,2,0,0,3334,3336,3,194,97,
        0,3335,3334,1,0,0,0,3335,3336,1,0,0,0,3336,3337,1,0,0,0,3337,3342,
        3,270,135,0,3338,3339,5,4,0,0,3339,3341,3,270,135,0,3340,3338,1,
        0,0,0,3341,3344,1,0,0,0,3342,3340,1,0,0,0,3342,3343,1,0,0,0,3343,
        3346,1,0,0,0,3344,3342,1,0,0,0,3345,3335,1,0,0,0,3345,3346,1,0,0,
        0,3346,3347,1,0,0,0,3347,3354,5,3,0,0,3348,3349,5,114,0,0,3349,3350,
        5,2,0,0,3350,3351,5,343,0,0,3351,3352,3,274,137,0,3352,3353,5,3,
        0,0,3353,3355,1,0,0,0,3354,3348,1,0,0,0,3354,3355,1,0,0,0,3355,3358,
        1,0,0,0,3356,3357,7,39,0,0,3357,3359,5,198,0,0,3358,3356,1,0,0,0,
        3358,3359,1,0,0,0,3359,3362,1,0,0,0,3360,3361,5,212,0,0,3361,3363,
        3,356,178,0,3362,3360,1,0,0,0,3362,3363,1,0,0,0,3363,3452,1,0,0,
        0,3364,3365,3,374,187,0,3365,3366,5,371,0,0,3366,3367,3,266,133,
        0,3367,3452,1,0,0,0,3368,3369,5,2,0,0,3369,3372,3,374,187,0,3370,
        3371,5,4,0,0,3371,3373,3,374,187,0,3372,3370,1,0,0,0,3373,3374,1,
        0,0,0,3374,3372,1,0,0,0,3374,3375,1,0,0,0,3375,3376,1,0,0,0,3376,
        3377,5,3,0,0,3377,3378,5,371,0,0,3378,3379,3,266,133,0,3379,3452,
        1,0,0,0,3380,3452,3,374,187,0,3381,3382,5,2,0,0,3382,3383,3,266,
        133,0,3383,3384,5,3,0,0,3384,3452,1,0,0,0,3385,3386,5,110,0,0,3386,
        3387,5,2,0,0,3387,3388,3,374,187,0,3388,3389,5,123,0,0,3389,3390,
        3,278,139,0,3390,3391,5,3,0,0,3391,3452,1,0,0,0,3392,3393,7,40,0,
        0,3393,3394,5,2,0,0,3394,3395,3,278,139,0,3395,3396,7,41,0,0,3396,
        3399,3,278,139,0,3397,3398,7,42,0,0,3398,3400,3,278,139,0,3399,3397,
        1,0,0,0,3399,3400,1,0,0,0,3400,3401,1,0,0,0,3401,3402,5,3,0,0,3402,
        3452,1,0,0,0,3403,3404,5,314,0,0,3404,3406,5,2,0,0,3405,3407,7,43,
        0,0,3406,3405,1,0,0,0,3406,3407,1,0,0,0,3407,3409,1,0,0,0,3408,3410,
        3,278,139,0,3409,3408,1,0,0,0,3409,3410,1,0,0,0,3410,3411,1,0,0,
        0,3411,3412,5,123,0,0,3412,3413,3,278,139,0,3413,3414,5,3,0,0,3414,
        3452,1,0,0,0,3415,3416,5,214,0,0,3416,3417,5,2,0,0,3417,3418,3,278,
        139,0,3418,3419,5,223,0,0,3419,3420,3,278,139,0,3420,3421,5,123,
        0,0,3421,3424,3,278,139,0,3422,3423,5,119,0,0,3423,3425,3,278,139,
        0,3424,3422,1,0,0,0,3424,3425,1,0,0,0,3425,3426,1,0,0,0,3426,3427,
        5,3,0,0,3427,3452,1,0,0,0,3428,3429,7,44,0,0,3429,3430,5,2,0,0,3430,
        3431,3,278,139,0,3431,3432,5,3,0,0,3432,3433,5,346,0,0,3433,3434,
        5,130,0,0,3434,3435,5,2,0,0,3435,3436,5,208,0,0,3436,3437,5,31,0,
        0,3437,3438,3,106,53,0,3438,3445,5,3,0,0,3439,3440,5,114,0,0,3440,
        3441,5,2,0,0,3441,3442,5,343,0,0,3442,3443,3,274,137,0,3443,3444,
        5,3,0,0,3444,3446,1,0,0,0,3445,3439,1,0,0,0,3445,3446,1,0,0,0,3446,
        3449,1,0,0,0,3447,3448,5,212,0,0,3448,3450,3,356,178,0,3449,3447,
        1,0,0,0,3449,3450,1,0,0,0,3450,3452,1,0,0,0,3451,3202,1,0,0,0,3451,
        3204,1,0,0,0,3451,3216,1,0,0,0,3451,3228,1,0,0,0,3451,3240,1,0,0,
        0,3451,3253,1,0,0,0,3451,3260,1,0,0,0,3451,3273,1,0,0,0,3451,3282,
        1,0,0,0,3451,3291,1,0,0,0,3451,3300,1,0,0,0,3451,3307,1,0,0,0,3451,
        3308,1,0,0,0,3451,3309,1,0,0,0,3451,3313,1,0,0,0,3451,3323,1,0,0,
        0,3451,3327,1,0,0,0,3451,3332,1,0,0,0,3451,3364,1,0,0,0,3451,3368,
        1,0,0,0,3451,3380,1,0,0,0,3451,3381,1,0,0,0,3451,3385,1,0,0,0,3451,
        3392,1,0,0,0,3451,3403,1,0,0,0,3451,3415,1,0,0,0,3451,3428,1,0,0,
        0,3452,3463,1,0,0,0,3453,3454,10,9,0,0,3454,3455,5,6,0,0,3455,3456,
        3,278,139,0,3456,3457,5,7,0,0,3457,3462,1,0,0,0,3458,3459,10,7,0,
        0,3459,3460,5,5,0,0,3460,3462,3,374,187,0,3461,3453,1,0,0,0,3461,
        3458,1,0,0,0,3462,3465,1,0,0,0,3463,3461,1,0,0,0,3463,3464,1,0,0,
        0,3464,283,1,0,0,0,3465,3463,1,0,0,0,3466,3474,5,71,0,0,3467,3474,
        5,302,0,0,3468,3474,5,303,0,0,3469,3474,5,304,0,0,3470,3474,5,149,
        0,0,3471,3474,5,133,0,0,3472,3474,3,374,187,0,3473,3466,1,0,0,0,
        3473,3467,1,0,0,0,3473,3468,1,0,0,0,3473,3469,1,0,0,0,3473,3470,
        1,0,0,0,3473,3471,1,0,0,0,3473,3472,1,0,0,0,3474,285,1,0,0,0,3475,
        3491,5,197,0,0,3476,3491,5,375,0,0,3477,3478,5,370,0,0,3478,3491,
        3,374,187,0,3479,3491,3,296,148,0,3480,3481,3,284,142,0,3481,3482,
        3,386,193,0,3482,3491,1,0,0,0,3483,3491,3,382,191,0,3484,3491,3,
        294,147,0,3485,3487,3,386,193,0,3486,3485,1,0,0,0,3487,3488,1,0,
        0,0,3488,3486,1,0,0,0,3488,3489,1,0,0,0,3489,3491,1,0,0,0,3490,3475,
        1,0,0,0,3490,3476,1,0,0,0,3490,3477,1,0,0,0,3490,3479,1,0,0,0,3490,
        3480,1,0,0,0,3490,3483,1,0,0,0,3490,3484,1,0,0,0,3490,3486,1,0,0,
        0,3491,287,1,0,0,0,3492,3493,7,45,0,0,3493,289,1,0,0,0,3494,3495,
        7,46,0,0,3495,291,1,0,0,0,3496,3497,7,47,0,0,3497,293,1,0,0,0,3498,
        3499,7,48,0,0,3499,295,1,0,0,0,3500,3503,5,149,0,0,3501,3504,3,298,
        149,0,3502,3504,3,302,151,0,3503,3501,1,0,0,0,3503,3502,1,0,0,0,
        3504,297,1,0,0,0,3505,3507,3,300,150,0,3506,3508,3,304,152,0,3507,
        3506,1,0,0,0,3507,3508,1,0,0,0,3508,299,1,0,0,0,3509,3510,3,306,
        153,0,3510,3511,3,308,154,0,3511,3513,1,0,0,0,3512,3509,1,0,0,0,
        3513,3514,1,0,0,0,3514,3512,1,0,0,0,3514,3515,1,0,0,0,3515,301,1,
        0,0,0,3516,3519,3,304,152,0,3517,3520,3,300,150,0,3518,3520,3,304,
        152,0,3519,3517,1,0,0,0,3519,3518,1,0,0,0,3519,3520,1,0,0,0,3520,
        303,1,0,0,0,3521,3522,3,306,153,0,3522,3523,3,310,155,0,3523,3524,
        5,308,0,0,3524,3525,3,310,155,0,3525,305,1,0,0,0,3526,3528,7,49,
        0,0,3527,3526,1,0,0,0,3527,3528,1,0,0,0,3528,3532,1,0,0,0,3529,3533,
        5,381,0,0,3530,3533,5,383,0,0,3531,3533,3,386,193,0,3532,3529,1,
        0,0,0,3532,3530,1,0,0,0,3532,3531,1,0,0,0,3533,307,1,0,0,0,3534,
        3535,7,50,0,0,3535,309,1,0,0,0,3536,3537,7,51,0,0,3537,311,1,0,0,
        0,3538,3542,5,116,0,0,3539,3540,5,9,0,0,3540,3542,3,370,185,0,3541,
        3538,1,0,0,0,3541,3539,1,0,0,0,3542,313,1,0,0,0,3543,3574,5,27,0,
        0,3544,3574,5,307,0,0,3545,3574,5,32,0,0,3546,3574,5,275,0,0,3547,
        3574,5,271,0,0,3548,3574,5,150,0,0,3549,3574,5,151,0,0,3550,3574,
        5,25,0,0,3551,3574,5,173,0,0,3552,3574,5,117,0,0,3553,3574,5,233,
        0,0,3554,3574,5,95,0,0,3555,3574,5,71,0,0,3556,3574,5,302,0,0,3557,
        3574,5,304,0,0,3558,3574,5,303,0,0,3559,3574,5,284,0,0,3560,3574,
        5,41,0,0,3561,3574,5,40,0,0,3562,3574,5,333,0,0,3563,3574,5,26,0,
        0,3564,3574,5,80,0,0,3565,3574,5,79,0,0,3566,3574,5,199,0,0,3567,
        3574,5,339,0,0,3568,3574,5,149,0,0,3569,3574,5,19,0,0,3570,3574,
        5,285,0,0,3571,3574,5,176,0,0,3572,3574,3,374,187,0,3573,3543,1,
        0,0,0,3573,3544,1,0,0,0,3573,3545,1,0,0,0,3573,3546,1,0,0,0,3573,
        3547,1,0,0,0,3573,3548,1,0,0,0,3573,3549,1,0,0,0,3573,3550,1,0,0,
        0,3573,3551,1,0,0,0,3573,3552,1,0,0,0,3573,3553,1,0,0,0,3573,3554,
        1,0,0,0,3573,3555,1,0,0,0,3573,3556,1,0,0,0,3573,3557,1,0,0,0,3573,
        3558,1,0,0,0,3573,3559,1,0,0,0,3573,3560,1,0,0,0,3573,3561,1,0,0,
        0,3573,3562,1,0,0,0,3573,3563,1,0,0,0,3573,3564,1,0,0,0,3573,3565,
        1,0,0,0,3573,3566,1,0,0,0,3573,3567,1,0,0,0,3573,3568,1,0,0,0,3573,
        3569,1,0,0,0,3573,3570,1,0,0,0,3573,3571,1,0,0,0,3573,3572,1,0,0,
        0,3574,315,1,0,0,0,3575,3576,5,19,0,0,3576,3577,5,355,0,0,3577,3578,
        3,316,158,0,3578,3579,5,357,0,0,3579,3622,1,0,0,0,3580,3581,5,176,
        0,0,3581,3582,5,355,0,0,3582,3583,3,316,158,0,3583,3584,5,4,0,0,
        3584,3585,3,316,158,0,3585,3586,5,357,0,0,3586,3622,1,0,0,0,3587,
        3594,5,285,0,0,3588,3590,5,355,0,0,3589,3591,3,344,172,0,3590,3589,
        1,0,0,0,3590,3591,1,0,0,0,3591,3592,1,0,0,0,3592,3595,5,357,0,0,
        3593,3595,5,353,0,0,3594,3588,1,0,0,0,3594,3593,1,0,0,0,3595,3622,
        1,0,0,0,3596,3597,5,149,0,0,3597,3600,7,52,0,0,3598,3599,5,308,0,
        0,3599,3601,5,185,0,0,3600,3598,1,0,0,0,3600,3601,1,0,0,0,3601,3622,
        1,0,0,0,3602,3603,5,149,0,0,3603,3606,7,53,0,0,3604,3605,5,308,0,
        0,3605,3607,7,54,0,0,3606,3604,1,0,0,0,3606,3607,1,0,0,0,3607,3622,
        1,0,0,0,3608,3619,3,314,157,0,3609,3610,5,2,0,0,3610,3615,5,381,
        0,0,3611,3612,5,4,0,0,3612,3614,5,381,0,0,3613,3611,1,0,0,0,3614,
        3617,1,0,0,0,3615,3613,1,0,0,0,3615,3616,1,0,0,0,3616,3618,1,0,0,
        0,3617,3615,1,0,0,0,3618,3620,5,3,0,0,3619,3609,1,0,0,0,3619,3620,
        1,0,0,0,3620,3622,1,0,0,0,3621,3575,1,0,0,0,3621,3580,1,0,0,0,3621,
        3587,1,0,0,0,3621,3596,1,0,0,0,3621,3602,1,0,0,0,3621,3608,1,0,0,
        0,3622,317,1,0,0,0,3623,3628,3,320,160,0,3624,3625,5,4,0,0,3625,
        3627,3,320,160,0,3626,3624,1,0,0,0,3627,3630,1,0,0,0,3628,3626,1,
        0,0,0,3628,3629,1,0,0,0,3629,319,1,0,0,0,3630,3628,1,0,0,0,3631,
        3632,3,94,47,0,3632,3636,3,316,158,0,3633,3635,3,326,163,0,3634,
        3633,1,0,0,0,3635,3638,1,0,0,0,3636,3634,1,0,0,0,3636,3637,1,0,0,
        0,3637,321,1,0,0,0,3638,3636,1,0,0,0,3639,3644,3,324,162,0,3640,
        3641,5,4,0,0,3641,3643,3,324,162,0,3642,3640,1,0,0,0,3643,3646,1,
        0,0,0,3644,3642,1,0,0,0,3644,3645,1,0,0,0,3645,323,1,0,0,0,3646,
        3644,1,0,0,0,3647,3648,3,90,45,0,3648,3652,3,316,158,0,3649,3651,
        3,326,163,0,3650,3649,1,0,0,0,3651,3654,1,0,0,0,3652,3650,1,0,0,
        0,3652,3653,1,0,0,0,3653,325,1,0,0,0,3654,3652,1,0,0,0,3655,3656,
        5,196,0,0,3656,3661,5,197,0,0,3657,3661,3,328,164,0,3658,3661,3,
        24,12,0,3659,3661,3,312,156,0,3660,3655,1,0,0,0,3660,3657,1,0,0,
        0,3660,3658,1,0,0,0,3660,3659,1,0,0,0,3661,327,1,0,0,0,3662,3663,
        5,82,0,0,3663,3664,3,266,133,0,3664,329,1,0,0,0,3665,3666,7,55,0,
        0,3666,3667,3,266,133,0,3667,331,1,0,0,0,3668,3673,3,334,167,0,3669,
        3670,5,4,0,0,3670,3672,3,334,167,0,3671,3669,1,0,0,0,3672,3675,1,
        0,0,0,3673,3671,1,0,0,0,3673,3674,1,0,0,0,3674,333,1,0,0,0,3675,
        3673,1,0,0,0,3676,3677,3,370,185,0,3677,3680,3,316,158,0,3678,3679,
        5,196,0,0,3679,3681,5,197,0,0,3680,3678,1,0,0,0,3680,3681,1,0,0,
        0,3681,3683,1,0,0,0,3682,3684,3,24,12,0,3683,3682,1,0,0,0,3683,3684,
        1,0,0,0,3684,335,1,0,0,0,3685,3690,3,338,169,0,3686,3687,5,4,0,0,
        3687,3689,3,338,169,0,3688,3686,1,0,0,0,3689,3692,1,0,0,0,3690,3688,
        1,0,0,0,3690,3691,1,0,0,0,3691,337,1,0,0,0,3692,3690,1,0,0,0,3693,
        3694,3,94,47,0,3694,3698,3,316,158,0,3695,3697,3,340,170,0,3696,
        3695,1,0,0,0,3697,3700,1,0,0,0,3698,3696,1,0,0,0,3698,3699,1,0,0,
        0,3699,339,1,0,0,0,3700,3698,1,0,0,0,3701,3702,5,196,0,0,3702,3707,
        5,197,0,0,3703,3707,3,328,164,0,3704,3707,3,342,171,0,3705,3707,
        3,24,12,0,3706,3701,1,0,0,0,3706,3703,1,0,0,0,3706,3704,1,0,0,0,
        3706,3705,1,0,0,0,3707,341,1,0,0,0,3708,3709,5,127,0,0,3709,3710,
        5,12,0,0,3710,3711,5,20,0,0,3711,3712,5,2,0,0,3712,3713,3,266,133,
        0,3713,3714,5,3,0,0,3714,343,1,0,0,0,3715,3720,3,346,173,0,3716,
        3717,5,4,0,0,3717,3719,3,346,173,0,3718,3716,1,0,0,0,3719,3722,1,
        0,0,0,3720,3718,1,0,0,0,3720,3721,1,0,0,0,3721,345,1,0,0,0,3722,
        3720,1,0,0,0,3723,3725,3,374,187,0,3724,3726,5,370,0,0,3725,3724,
        1,0,0,0,3725,3726,1,0,0,0,3726,3727,1,0,0,0,3727,3730,3,316,158,
        0,3728,3729,5,196,0,0,3729,3731,5,197,0,0,3730,3728,1,0,0,0,3730,
        3731,1,0,0,0,3731,3733,1,0,0,0,3732,3734,3,24,12,0,3733,3732,1,0,
        0,0,3733,3734,1,0,0,0,3734,347,1,0,0,0,3735,3736,5,342,0,0,3736,
        3737,3,266,133,0,3737,3738,5,299,0,0,3738,3739,3,266,133,0,3739,
        349,1,0,0,0,3740,3741,5,344,0,0,3741,3746,3,354,177,0,3742,3743,
        5,4,0,0,3743,3745,3,354,177,0,3744,3742,1,0,0,0,3745,3748,1,0,0,
        0,3746,3744,1,0,0,0,3746,3747,1,0,0,0,3747,351,1,0,0,0,3748,3746,
        1,0,0,0,3749,3750,5,350,0,0,3750,3751,5,31,0,0,3751,3752,3,92,46,
        0,3752,353,1,0,0,0,3753,3754,3,370,185,0,3754,3755,5,20,0,0,3755,
        3756,3,356,178,0,3756,355,1,0,0,0,3757,3804,3,370,185,0,3758,3759,
        5,2,0,0,3759,3760,3,370,185,0,3760,3761,5,3,0,0,3761,3804,1,0,0,
        0,3762,3797,5,2,0,0,3763,3764,5,44,0,0,3764,3765,5,31,0,0,3765,3770,
        3,266,133,0,3766,3767,5,4,0,0,3767,3769,3,266,133,0,3768,3766,1,
        0,0,0,3769,3772,1,0,0,0,3770,3768,1,0,0,0,3770,3771,1,0,0,0,3771,
        3798,1,0,0,0,3772,3770,1,0,0,0,3773,3774,7,24,0,0,3774,3775,5,31,
        0,0,3775,3780,3,266,133,0,3776,3777,5,4,0,0,3777,3779,3,266,133,
        0,3778,3776,1,0,0,0,3779,3782,1,0,0,0,3780,3778,1,0,0,0,3780,3781,
        1,0,0,0,3781,3784,1,0,0,0,3782,3780,1,0,0,0,3783,3773,1,0,0,0,3783,
        3784,1,0,0,0,3784,3795,1,0,0,0,3785,3786,7,25,0,0,3786,3787,5,31,
        0,0,3787,3792,3,106,53,0,3788,3789,5,4,0,0,3789,3791,3,106,53,0,
        3790,3788,1,0,0,0,3791,3794,1,0,0,0,3792,3790,1,0,0,0,3792,3793,
        1,0,0,0,3793,3796,1,0,0,0,3794,3792,1,0,0,0,3795,3785,1,0,0,0,3795,
        3796,1,0,0,0,3796,3798,1,0,0,0,3797,3763,1,0,0,0,3797,3783,1,0,0,
        0,3798,3800,1,0,0,0,3799,3801,3,358,179,0,3800,3799,1,0,0,0,3800,
        3801,1,0,0,0,3801,3802,1,0,0,0,3802,3804,5,3,0,0,3803,3757,1,0,0,
        0,3803,3758,1,0,0,0,3803,3762,1,0,0,0,3804,357,1,0,0,0,3805,3806,
        5,232,0,0,3806,3822,3,360,180,0,3807,3808,5,257,0,0,3808,3822,3,
        360,180,0,3809,3810,5,232,0,0,3810,3811,5,24,0,0,3811,3812,3,360,
        180,0,3812,3813,5,14,0,0,3813,3814,3,360,180,0,3814,3822,1,0,0,0,
        3815,3816,5,257,0,0,3816,3817,5,24,0,0,3817,3818,3,360,180,0,3818,
        3819,5,14,0,0,3819,3820,3,360,180,0,3820,3822,1,0,0,0,3821,3805,
        1,0,0,0,3821,3807,1,0,0,0,3821,3809,1,0,0,0,3821,3815,1,0,0,0,3822,
        359,1,0,0,0,3823,3824,5,320,0,0,3824,3831,7,56,0,0,3825,3826,5,62,
        0,0,3826,3831,5,256,0,0,3827,3828,3,266,133,0,3828,3829,7,56,0,0,
        3829,3831,1,0,0,0,3830,3823,1,0,0,0,3830,3825,1,0,0,0,3830,3827,
        1,0,0,0,3831,361,1,0,0,0,3832,3837,3,368,184,0,3833,3834,5,4,0,0,
        3834,3836,3,368,184,0,3835,3833,1,0,0,0,3836,3839,1,0,0,0,3837,3835,
        1,0,0,0,3837,3838,1,0,0,0,3838,363,1,0,0,0,3839,3837,1,0,0,0,3840,
        3841,5,136,0,0,3841,3842,5,2,0,0,3842,3843,3,266,133,0,3843,3844,
        5,3,0,0,3844,3850,1,0,0,0,3845,3850,3,368,184,0,3846,3850,5,114,
        0,0,3847,3850,5,161,0,0,3848,3850,5,249,0,0,3849,3840,1,0,0,0,3849,
        3845,1,0,0,0,3849,3846,1,0,0,0,3849,3847,1,0,0,0,3849,3848,1,0,0,
        0,3850,365,1,0,0,0,3851,3852,3,368,184,0,3852,367,1,0,0,0,3853,3858,
        3,374,187,0,3854,3855,5,5,0,0,3855,3857,3,374,187,0,3856,3854,1,
        0,0,0,3857,3860,1,0,0,0,3858,3856,1,0,0,0,3858,3859,1,0,0,0,3859,
        369,1,0,0,0,3860,3858,1,0,0,0,3861,3862,3,374,187,0,3862,3863,3,
        372,186,0,3863,371,1,0,0,0,3864,3865,5,361,0,0,3865,3867,3,374,187,
        0,3866,3864,1,0,0,0,3867,3868,1,0,0,0,3868,3866,1,0,0,0,3868,3869,
        1,0,0,0,3869,3872,1,0,0,0,3870,3872,1,0,0,0,3871,3866,1,0,0,0,3871,
        3870,1,0,0,0,3872,373,1,0,0,0,3873,3876,3,376,188,0,3874,3876,3,
        394,197,0,3875,3873,1,0,0,0,3875,3874,1,0,0,0,3876,375,1,0,0,0,3877,
        3882,5,387,0,0,3878,3882,3,378,189,0,3879,3882,3,392,196,0,3880,
        3882,3,396,198,0,3881,3877,1,0,0,0,3881,3878,1,0,0,0,3881,3879,1,
        0,0,0,3881,3880,1,0,0,0,3882,377,1,0,0,0,3883,3884,7,57,0,0,3884,
        379,1,0,0,0,3885,3886,5,388,0,0,3886,381,1,0,0,0,3887,3889,5,361,
        0,0,3888,3887,1,0,0,0,3888,3889,1,0,0,0,3889,3890,1,0,0,0,3890,3928,
        5,382,0,0,3891,3893,5,361,0,0,3892,3891,1,0,0,0,3892,3893,1,0,0,
        0,3893,3894,1,0,0,0,3894,3928,5,383,0,0,3895,3897,5,361,0,0,3896,
        3895,1,0,0,0,3896,3897,1,0,0,0,3897,3898,1,0,0,0,3898,3928,7,58,
        0,0,3899,3901,5,361,0,0,3900,3899,1,0,0,0,3900,3901,1,0,0,0,3901,
        3902,1,0,0,0,3902,3928,5,381,0,0,3903,3905,5,361,0,0,3904,3903,1,
        0,0,0,3904,3905,1,0,0,0,3905,3906,1,0,0,0,3906,3928,5,378,0,0,3907,
        3909,5,361,0,0,3908,3907,1,0,0,0,3908,3909,1,0,0,0,3909,3910,1,0,
        0,0,3910,3928,5,379,0,0,3911,3913,5,361,0,0,3912,3911,1,0,0,0,3912,
        3913,1,0,0,0,3913,3914,1,0,0,0,3914,3928,5,380,0,0,3915,3917,5,361,
        0,0,3916,3915,1,0,0,0,3916,3917,1,0,0,0,3917,3918,1,0,0,0,3918,3928,
        5,385,0,0,3919,3921,5,361,0,0,3920,3919,1,0,0,0,3920,3921,1,0,0,
        0,3921,3922,1,0,0,0,3922,3928,5,384,0,0,3923,3925,5,361,0,0,3924,
        3923,1,0,0,0,3924,3925,1,0,0,0,3925,3926,1,0,0,0,3926,3928,5,386,
        0,0,3927,3888,1,0,0,0,3927,3892,1,0,0,0,3927,3896,1,0,0,0,3927,3900,
        1,0,0,0,3927,3904,1,0,0,0,3927,3908,1,0,0,0,3927,3912,1,0,0,0,3927,
        3916,1,0,0,0,3927,3920,1,0,0,0,3927,3924,1,0,0,0,3928,383,1,0,0,
        0,3929,3930,5,318,0,0,3930,3941,3,316,158,0,3931,3941,3,24,12,0,
        3932,3941,3,312,156,0,3933,3934,7,59,0,0,3934,3935,5,196,0,0,3935,
        3941,5,197,0,0,3936,3937,5,268,0,0,3937,3941,3,328,164,0,3938,3939,
        5,96,0,0,3939,3941,5,82,0,0,3940,3929,1,0,0,0,3940,3931,1,0,0,0,
        3940,3932,1,0,0,0,3940,3933,1,0,0,0,3940,3936,1,0,0,0,3940,3938,
        1,0,0,0,3941,385,1,0,0,0,3942,3943,7,60,0,0,3943,387,1,0,0,0,3944,
        3947,3,386,193,0,3945,3947,5,197,0,0,3946,3944,1,0,0,0,3946,3945,
        1,0,0,0,3947,389,1,0,0,0,3948,3951,5,381,0,0,3949,3951,3,386,193,
        0,3950,3948,1,0,0,0,3950,3949,1,0,0,0,3951,391,1,0,0,0,3952,3953,
        7,61,0,0,3953,393,1,0,0,0,3954,3955,7,62,0,0,3955,395,1,0,0,0,3956,
        3957,7,63,0,0,3957,397,1,0,0,0,514,401,408,412,425,430,438,440,459,
        463,469,472,475,482,485,489,492,497,508,510,518,521,525,528,534,
        545,551,556,589,599,610,621,632,637,646,650,656,660,665,671,683,
        691,697,708,712,717,732,736,743,747,753,782,786,791,798,804,807,
        810,814,818,826,828,837,840,849,854,860,867,870,874,885,888,894,
        898,913,915,923,927,933,936,940,943,949,954,958,965,968,971,978,
        983,992,1000,1006,1009,1012,1018,1022,1027,1030,1034,1036,1044,1052,
        1055,1062,1065,1068,1077,1082,1088,1093,1096,1100,1103,1107,1135,
        1138,1146,1152,1155,1158,1163,1171,1176,1182,1188,1191,1198,1205,
        1213,1230,1257,1260,1266,1275,1284,1290,1295,1300,1307,1312,1317,
        1324,1332,1335,1339,1351,1355,1362,1478,1486,1494,1503,1513,1517,
        1520,1524,1530,1542,1554,1559,1568,1576,1581,1583,1591,1596,1600,
        1603,1611,1616,1625,1630,1633,1638,1642,1647,1649,1653,1662,1670,
        1676,1687,1694,1703,1708,1711,1733,1735,1744,1751,1754,1761,1765,
        1771,1779,1786,1789,1797,1808,1819,1827,1833,1845,1852,1859,1871,
        1879,1885,1891,1894,1915,1926,1935,1938,1947,1950,1959,1962,1971,
        1974,1977,1982,1984,1988,1999,2005,2011,2014,2016,2028,2032,2035,
        2039,2045,2049,2057,2061,2064,2067,2070,2074,2078,2083,2087,2090,
        2093,2096,2100,2105,2109,2112,2115,2118,2120,2126,2133,2138,2141,
        2144,2148,2158,2162,2164,2167,2171,2177,2181,2192,2202,2206,2218,
        2230,2245,2250,2256,2263,2279,2284,2297,2302,2310,2316,2320,2323,
        2328,2335,2341,2350,2360,2375,2380,2382,2387,2396,2409,2414,2418,
        2425,2430,2434,2437,2440,2454,2467,2472,2476,2479,2483,2489,2492,
        2499,2511,2522,2535,2546,2551,2559,2564,2578,2587,2590,2595,2602,
        2605,2610,2616,2620,2625,2630,2634,2640,2644,2647,2652,2655,2660,
        2664,2667,2670,2676,2681,2688,2691,2709,2711,2714,2725,2734,2741,
        2749,2756,2760,2763,2771,2779,2785,2793,2801,2808,2815,2817,2830,
        2836,2838,2848,2854,2856,2864,2868,2877,2880,2886,2890,2892,2901,
        2913,2915,2922,2929,2935,2941,2943,2950,2958,2966,2972,2977,2984,
        2990,2993,2997,2999,3006,3015,3022,3032,3037,3041,3051,3058,3071,
        3073,3081,3083,3087,3095,3104,3110,3118,3123,3135,3140,3143,3149,
        3153,3158,3163,3168,3174,3195,3197,3208,3220,3232,3236,3245,3249,
        3267,3270,3278,3287,3296,3319,3335,3342,3345,3354,3358,3362,3374,
        3399,3406,3409,3424,3445,3449,3451,3461,3463,3473,3488,3490,3503,
        3507,3514,3519,3527,3532,3541,3573,3590,3594,3600,3606,3615,3619,
        3621,3628,3636,3644,3652,3660,3673,3680,3683,3690,3698,3706,3720,
        3725,3730,3733,3746,3770,3780,3783,3792,3795,3797,3800,3803,3821,
        3830,3837,3849,3858,3868,3871,3875,3881,3888,3892,3896,3900,3904,
        3908,3912,3916,3920,3924,3927,3940,3946,3950
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!SparkSqlParser.__ATN) {
            SparkSqlParser.__ATN = new antlr.ATNDeserializer().deserialize(SparkSqlParser._serializedATN);
        }

        return SparkSqlParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(SparkSqlParser.literalNames, SparkSqlParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return SparkSqlParser.vocabulary;
    }

    private static readonly decisionsToDFA = SparkSqlParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ProgramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.EOF, 0)!;
    }
    public singleStatement(): SingleStatementContext[];
    public singleStatement(i: number): SingleStatementContext | null;
    public singleStatement(i?: number): SingleStatementContext[] | SingleStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SingleStatementContext);
        }

        return this.getRuleContext(i, SingleStatementContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_program;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterProgram) {
             listener.enterProgram(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitProgram) {
             listener.exitProgram(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProgram) {
            return visitor.visitProgram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.SEMICOLON, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_singleStatement;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSingleStatement) {
             listener.enterSingleStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSingleStatement) {
             listener.exitSingleStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSingleStatement) {
            return visitor.visitSingleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public _pattern?: StringLitContext;
    public _target?: TableNameCreateContext;
    public _source?: TableNameContext;
    public _tableProps?: PropertyListContext;
    public _table?: TableNameContext;
    public _column?: ColumnNameContext;
    public _colName?: ColumnNameContext;
    public _className?: StringLitContext;
    public _options?: PropertyListContext;
    public _partitioning?: PartitionFieldListContext;
    public _ns?: DbSchemaNameContext;
    public _key?: PropertyKeyContext;
    public _legacy?: MultipartIdentifierContext;
    public _db_name?: DbSchemaNameContext;
    public _option?: Token | null;
    public _path?: StringLitContext;
    public _op?: Token | null;
    public _indexType?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public dmlStatementNoWith(): DmlStatementNoWithContext | null {
        return this.getRuleContext(0, DmlStatementNoWithContext);
    }
    public ctes(): CtesContext | null {
        return this.getRuleContext(0, CtesContext);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USE, 0);
    }
    public dbSchemaName(): DbSchemaNameContext | null {
        return this.getRuleContext(0, DbSchemaNameContext);
    }
    public dbSchema(): DbSchemaContext | null {
        return this.getRuleContext(0, DbSchemaContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOG, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CREATE, 0);
    }
    public dbSchemaNameCreate(): DbSchemaNameCreateContext | null {
        return this.getRuleContext(0, DbSchemaNameCreateContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public commentSpec(): CommentSpecContext[];
    public commentSpec(i: number): CommentSpecContext | null;
    public commentSpec(i?: number): CommentSpecContext[] | CommentSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommentSpecContext);
        }

        return this.getRuleContext(i, CommentSpecContext);
    }
    public locationSpec(): LocationSpecContext[];
    public locationSpec(i: number): LocationSpecContext | null;
    public locationSpec(i?: number): LocationSpecContext[] | LocationSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LocationSpecContext);
        }

        return this.getRuleContext(i, LocationSpecContext);
    }
    public KW_WITH(): antlr.TerminalNode[];
    public KW_WITH(i: number): antlr.TerminalNode | null;
    public KW_WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_WITH);
    	} else {
    		return this.getToken(SparkSqlParser.KW_WITH, i);
    	}
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode[];
    public KW_DBPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_DBPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_DBPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_DBPROPERTIES, i);
    	}
    }
    public KW_PROPERTIES(): antlr.TerminalNode[];
    public KW_PROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_PROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_PROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_PROPERTIES, i);
    	}
    }
    public KW_ALTER(): antlr.TerminalNode[];
    public KW_ALTER(i: number): antlr.TerminalNode | null;
    public KW_ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_ALTER);
    	} else {
    		return this.getToken(SparkSqlParser.KW_ALTER, i);
    	}
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESTRICT, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASCADE, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHOW, 0);
    }
    public dbSchemas(): DbSchemasContext | null {
        return this.getRuleContext(0, DbSchemasContext);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public KW_FROM(): antlr.TerminalNode[];
    public KW_FROM(i: number): antlr.TerminalNode | null;
    public KW_FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_FROM);
    	} else {
    		return this.getToken(SparkSqlParser.KW_FROM, i);
    	}
    }
    public KW_IN(): antlr.TerminalNode[];
    public KW_IN(i: number): antlr.TerminalNode | null;
    public KW_IN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_IN);
    	} else {
    		return this.getToken(SparkSqlParser.KW_IN, i);
    	}
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public createTableHeader(): CreateTableHeaderContext | null {
        return this.getRuleContext(0, CreateTableHeaderContext);
    }
    public createTableClauses(): CreateTableClausesContext | null {
        return this.getRuleContext(0, CreateTableClausesContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext | null {
        return this.getRuleContext(0, CreateOrReplaceTableColTypeListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public tableProvider(): TableProviderContext[];
    public tableProvider(i: number): TableProviderContext | null;
    public tableProvider(i?: number): TableProviderContext[] | TableProviderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableProviderContext);
        }

        return this.getRuleContext(i, TableProviderContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableNameCreate(): TableNameCreateContext | null {
        return this.getRuleContext(0, TableNameCreateContext);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext[];
    public createFileFormat(i: number): CreateFileFormatContext | null;
    public createFileFormat(i?: number): CreateFileFormatContext[] | CreateFileFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateFileFormatContext);
        }

        return this.getRuleContext(i, CreateFileFormatContext);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public replaceTableHeader(): ReplaceTableHeaderContext | null {
        return this.getRuleContext(0, ReplaceTableHeaderContext);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANALYZE, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPUTE, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STATISTICS, 0);
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOSCAN, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOR, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0);
    }
    public columnNameSeq(): ColumnNameSeqContext | null {
        return this.getRuleContext(0, ColumnNameSeqContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLES, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ADD, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0);
    }
    public qualifiedColTypeWithPositionForAdd(): QualifiedColTypeWithPositionForAddContext | null {
        return this.getRuleContext(0, QualifiedColTypeWithPositionForAddContext);
    }
    public qualifiedColTypeWithPositionSeqForAdd(): QualifiedColTypeWithPositionSeqForAddContext | null {
        return this.getRuleContext(0, QualifiedColTypeWithPositionSeqForAddContext);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RENAME, 0);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TO, 0);
    }
    public columnNameCreate(): ColumnNameCreateContext | null {
        return this.getRuleContext(0, ColumnNameCreateContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNSET, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHANGE, 0);
    }
    public alterColumnAction(): AlterColumnActionContext | null {
        return this.getRuleContext(0, AlterColumnActionContext);
    }
    public colType(): ColTypeContext | null {
        return this.getRuleContext(0, ColTypeContext);
    }
    public colPosition(): ColPositionContext | null {
        return this.getRuleContext(0, ColPositionContext);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public qualifiedColTypeWithPositionSeqForReplace(): QualifiedColTypeWithPositionSeqForReplaceContext | null {
        return this.getRuleContext(0, QualifiedColTypeWithPositionSeqForReplaceContext);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public partitionSpecLocation(): PartitionSpecLocationContext[];
    public partitionSpecLocation(i: number): PartitionSpecLocationContext | null;
    public partitionSpecLocation(i?: number): PartitionSpecLocationContext[] | PartitionSpecLocationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecLocationContext);
        }

        return this.getRuleContext(i, PartitionSpecLocationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PURGE, 0);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECOVER, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REWRITE, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ENABLE, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISABLE, 0);
    }
    public viewNameCreate(): ViewNameCreateContext | null {
        return this.getRuleContext(0, ViewNameCreateContext);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public identifierCommentList(): IdentifierCommentListContext | null {
        return this.getRuleContext(0, IdentifierCommentListContext);
    }
    public KW_PARTITIONED(): antlr.TerminalNode[];
    public KW_PARTITIONED(i: number): antlr.TerminalNode | null;
    public KW_PARTITIONED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_PARTITIONED);
    	} else {
    		return this.getToken(SparkSqlParser.KW_PARTITIONED, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_ON);
    	} else {
    		return this.getToken(SparkSqlParser.KW_ON, i);
    	}
    }
    public identifierList(): IdentifierListContext[];
    public identifierList(i: number): IdentifierListContext | null;
    public identifierList(i?: number): IdentifierListContext[] | IdentifierListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierListContext);
        }

        return this.getRuleContext(i, IdentifierListContext);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GLOBAL, 0);
    }
    public colTypeList(): ColTypeListContext | null {
        return this.getRuleContext(0, ColTypeListContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode[];
    public KW_OPTIONS(i: number): antlr.TerminalNode | null;
    public KW_OPTIONS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_OPTIONS);
    	} else {
    		return this.getToken(SparkSqlParser.KW_OPTIONS, i);
    	}
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0);
    }
    public functionNameCreate(): FunctionNameCreateContext | null {
        return this.getRuleContext(0, FunctionNameCreateContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USING, 0);
    }
    public resource(): ResourceContext[];
    public resource(i: number): ResourceContext | null;
    public resource(i?: number): ResourceContext[] | ResourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }

        return this.getRuleContext(i, ResourceContext);
    }
    public skewSpec(): SkewSpecContext[];
    public skewSpec(i: number): SkewSpecContext | null;
    public skewSpec(i?: number): SkewSpecContext[] | SkewSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewSpecContext);
        }

        return this.getRuleContext(i, SkewSpecContext);
    }
    public bucketSpec(): BucketSpecContext[];
    public bucketSpec(i: number): BucketSpecContext | null;
    public bucketSpec(i?: number): BucketSpecContext[] | BucketSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BucketSpecContext);
        }

        return this.getRuleContext(i, BucketSpecContext);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public partitionFieldList(): PartitionFieldListContext[];
    public partitionFieldList(i: number): PartitionFieldListContext | null;
    public partitionFieldList(i?: number): PartitionFieldListContext[] | PartitionFieldListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionFieldListContext);
        }

        return this.getRuleContext(i, PartitionFieldListContext);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECLARE, 0);
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public variableDefaultExpression(): VariableDefaultExpressionContext | null {
        return this.getRuleContext(0, VariableDefaultExpressionContext);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPLAIN, 0);
    }
    public statement(): StatementContext | null {
        return this.getRuleContext(0, StatementContext);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOGICAL, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMATTED, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public KW_CODEGEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CODEGEN, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COST, 0);
    }
    public propertyKey(): PropertyKeyContext | null {
        return this.getRuleContext(0, PropertyKeyContext);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEWS, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTIONS, 0);
    }
    public functionKind(): FunctionKindContext | null {
        return this.getRuleContext(0, FunctionKindContext);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public KW_CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOGS, 0);
    }
    public describeFuncName(): DescribeFuncNameContext | null {
        return this.getRuleContext(0, DescribeFuncNameContext);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public describeColName(): DescribeColNameContext | null {
        return this.getRuleContext(0, DescribeColNameContext);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUERY, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IS, 0);
    }
    public comment(): CommentContext | null {
        return this.getRuleContext(0, CommentContext);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CACHE, 0);
    }
    public KW_LAZY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAZY, 0);
    }
    public KW_UNCACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNCACHE, 0);
    }
    public KW_CLEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLEAR, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOAD, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATA, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPATH, 0);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTO, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERWRITE, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUNCATE, 0);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPAIR, 0);
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MSCK, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYNC, 0);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIST, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLE, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZONE, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public timezone(): TimezoneContext | null {
        return this.getRuleContext(0, TimezoneContext);
    }
    public assignmentList(): AssignmentListContext | null {
        return this.getRuleContext(0, AssignmentListContext);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VAR, 0);
    }
    public multipartIdentifierList(): MultipartIdentifierListContext | null {
        return this.getRuleContext(0, MultipartIdentifierListContext);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public configKey(): ConfigKeyContext | null {
        return this.getRuleContext(0, ConfigKeyContext);
    }
    public configValue(): ConfigValueContext | null {
        return this.getRuleContext(0, ConfigValueContext);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESET, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEX, 0);
    }
    public multipartIdentifierPropertyList(): MultipartIdentifierPropertyListContext | null {
        return this.getRuleContext(0, MultipartIdentifierPropertyListContext);
    }
    public KW_OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIMIZE, 0);
    }
    public zorderClause(): ZorderClauseContext | null {
        return this.getRuleContext(0, ZorderClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public unsupportedHiveNativeCommands(): UnsupportedHiveNativeCommandsContext | null {
        return this.getRuleContext(0, UnsupportedHiveNativeCommandsContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_statement;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStatement) {
             listener.enterStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStatement) {
             listener.exitStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimezoneContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_timezone;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTimezone) {
             listener.enterTimezone(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTimezone) {
             listener.exitTimezone(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTimezone) {
            return visitor.visitTimezone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConfigKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public quotedIdentifier(): QuotedIdentifierContext {
        return this.getRuleContext(0, QuotedIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_configKey;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterConfigKey) {
             listener.enterConfigKey(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitConfigKey) {
             listener.exitConfigKey(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConfigKey) {
            return visitor.visitConfigKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConfigValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public backQuotedIdentifier(): BackQuotedIdentifierContext {
        return this.getRuleContext(0, BackQuotedIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_configValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterConfigValue) {
             listener.enterConfigValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitConfigValue) {
             listener.exitConfigValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConfigValue) {
            return visitor.visitConfigValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedHiveNativeCommandsContext extends antlr.ParserRuleContext {
    public _kw1?: Token | null;
    public _kw2?: Token | null;
    public _kw3?: Token | null;
    public _kw4?: Token | null;
    public _kw5?: Token | null;
    public _kw6?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CREATE, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GRANT, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REVOKE, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHOW, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRINCIPALS, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLES, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPORT, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IMPORT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEXES, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCKS, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEX, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALTER, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCK, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNLOCK, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MACRO, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTERED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORTED, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SKEWED, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STORED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORIES, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCHANGE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARCHIVE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TOUCH, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACT, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CONCATENATE, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILEFORMAT, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_START, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTION, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMIT, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLBACK, 0);
    }
    public KW_DFS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DFS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unsupportedHiveNativeCommands;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnsupportedHiveNativeCommands) {
             listener.enterUnsupportedHiveNativeCommands(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnsupportedHiveNativeCommands) {
             listener.exitUnsupportedHiveNativeCommands(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnsupportedHiveNativeCommands) {
            return visitor.visitUnsupportedHiveNativeCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableHeaderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTERNAL, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createTableHeader;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateTableHeader) {
             listener.enterCreateTableHeader(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateTableHeader) {
             listener.exitCreateTableHeader(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableHeader) {
            return visitor.visitCreateTableHeader(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceTableHeaderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CREATE, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_replaceTableHeader;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterReplaceTableHeader) {
             listener.enterReplaceTableHeader(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitReplaceTableHeader) {
             listener.exitReplaceTableHeader(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceTableHeader) {
            return visitor.visitReplaceTableHeader(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BucketSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTERED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CLUSTERED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INTO, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0)!;
    }
    public KW_BUCKETS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BUCKETS, 0)!;
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORTED, 0);
    }
    public orderedIdentifierList(): OrderedIdentifierListContext | null {
        return this.getRuleContext(0, OrderedIdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_bucketSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterBucketSpec) {
             listener.enterBucketSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitBucketSpec) {
             listener.exitBucketSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBucketSpec) {
            return visitor.visitBucketSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SKEWED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SKEWED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BY, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ON, 0)!;
    }
    public constantList(): ConstantListContext | null {
        return this.getRuleContext(0, ConstantListContext);
    }
    public nestedConstantList(): NestedConstantListContext | null {
        return this.getRuleContext(0, NestedConstantListContext);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STORED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORIES, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_skewSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSkewSpec) {
             listener.enterSkewSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSkewSpec) {
             listener.exitSkewSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSkewSpec) {
            return visitor.visitSkewSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LocationSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_locationSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterLocationSpec) {
             listener.enterLocationSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitLocationSpec) {
             listener.exitLocationSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLocationSpec) {
            return visitor.visitLocationSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommentSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_commentSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCommentSpec) {
             listener.enterCommentSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCommentSpec) {
             listener.exitCommentSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommentSpec) {
            return visitor.visitCommentSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryTerm(): QueryTermContext {
        return this.getRuleContext(0, QueryTermContext)!;
    }
    public queryOrganization(): QueryOrganizationContext {
        return this.getRuleContext(0, QueryOrganizationContext)!;
    }
    public ctes(): CtesContext | null {
        return this.getRuleContext(0, CtesContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_query;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQuery) {
             listener.enterQuery(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQuery) {
             listener.exitQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuery) {
            return visitor.visitQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertIntoContext extends antlr.ParserRuleContext {
    public _path?: StringLitContext;
    public _options?: PropertyListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INSERT, 0)!;
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERWRITE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAME, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public columnNameSeq(): ColumnNameSeqContext | null {
        return this.getRuleContext(0, ColumnNameSeqContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTO, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORY, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public rowFormat(): RowFormatContext | null {
        return this.getRuleContext(0, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext | null {
        return this.getRuleContext(0, CreateFileFormatContext);
    }
    public tableProvider(): TableProviderContext | null {
        return this.getRuleContext(0, TableProviderContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_insertInto;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterInsertInto) {
             listener.enterInsertInto(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitInsertInto) {
             listener.exitInsertInto(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertInto) {
            return visitor.visitInsertInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecLocationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionSpec(): PartitionSpecContext {
        return this.getRuleContext(0, PartitionSpecContext)!;
    }
    public locationSpec(): LocationSpecContext | null {
        return this.getRuleContext(0, LocationSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionSpecLocation;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionSpecLocation) {
             listener.enterPartitionSpecLocation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionSpecLocation) {
             listener.exitPartitionSpecLocation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpecLocation) {
            return visitor.visitPartitionSpecLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public partitionVal(): PartitionValContext[];
    public partitionVal(i: number): PartitionValContext | null;
    public partitionVal(i?: number): PartitionValContext[] | PartitionValContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValContext);
        }

        return this.getRuleContext(i, PartitionValContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionSpec) {
             listener.enterPartitionSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionSpec) {
             listener.exitPartitionSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpec) {
            return visitor.visitPartitionSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionVal;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionVal) {
             listener.enterPartitionVal(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionVal) {
             listener.exitPartitionVal(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionVal) {
            return visitor.visitPartitionVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbSchemaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACE, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_dbSchema;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDbSchema) {
             listener.enterDbSchema(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDbSchema) {
             listener.exitDbSchema(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDbSchema) {
            return visitor.visitDbSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbSchemasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACES, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASES, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMAS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_dbSchemas;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDbSchemas) {
             listener.enterDbSchemas(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDbSchemas) {
             listener.exitDbSchemas(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDbSchemas) {
            return visitor.visitDbSchemas(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeFuncNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext | null {
        return this.getRuleContext(0, IdentifierReferenceContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public comparisonOperator(): ComparisonOperatorContext | null {
        return this.getRuleContext(0, ComparisonOperatorContext);
    }
    public arithmeticOperator(): ArithmeticOperatorContext | null {
        return this.getRuleContext(0, ArithmeticOperatorContext);
    }
    public predicateOperator(): PredicateOperatorContext | null {
        return this.getRuleContext(0, PredicateOperatorContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_describeFuncName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeFuncName) {
             listener.enterDescribeFuncName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeFuncName) {
             listener.exitDescribeFuncName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeFuncName) {
            return visitor.visitDescribeFuncName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeColNameContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _nameParts: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_describeColName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeColName) {
             listener.enterDescribeColName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeColName) {
             listener.exitDescribeColName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeColName) {
            return visitor.visitDescribeColName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CtesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WITH, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_ctes;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCtes) {
             listener.enterCtes(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCtes) {
             listener.exitCtes(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCtes) {
            return visitor.visitCtes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public _columnAliases?: IdentifierListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedQuery;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedQuery) {
             listener.enterNamedQuery(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedQuery) {
             listener.exitNamedQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableProviderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_USING, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableProvider;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableProvider) {
             listener.enterTableProvider(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableProvider) {
             listener.exitTableProvider(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableProvider) {
            return visitor.visitTableProvider(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableClausesContext extends antlr.ParserRuleContext {
    public _options?: ExpressionPropertyListContext;
    public _partitioning?: PartitionFieldListContext;
    public _tableProps?: PropertyListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public skewSpec(): SkewSpecContext[];
    public skewSpec(i: number): SkewSpecContext | null;
    public skewSpec(i?: number): SkewSpecContext[] | SkewSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewSpecContext);
        }

        return this.getRuleContext(i, SkewSpecContext);
    }
    public bucketSpec(): BucketSpecContext[];
    public bucketSpec(i: number): BucketSpecContext | null;
    public bucketSpec(i?: number): BucketSpecContext[] | BucketSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BucketSpecContext);
        }

        return this.getRuleContext(i, BucketSpecContext);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext[];
    public createFileFormat(i: number): CreateFileFormatContext | null;
    public createFileFormat(i?: number): CreateFileFormatContext[] | CreateFileFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateFileFormatContext);
        }

        return this.getRuleContext(i, CreateFileFormatContext);
    }
    public locationSpec(): LocationSpecContext[];
    public locationSpec(i: number): LocationSpecContext | null;
    public locationSpec(i?: number): LocationSpecContext[] | LocationSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LocationSpecContext);
        }

        return this.getRuleContext(i, LocationSpecContext);
    }
    public commentSpec(): CommentSpecContext[];
    public commentSpec(i: number): CommentSpecContext | null;
    public commentSpec(i?: number): CommentSpecContext[] | CommentSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommentSpecContext);
        }

        return this.getRuleContext(i, CommentSpecContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode[];
    public KW_OPTIONS(i: number): antlr.TerminalNode | null;
    public KW_OPTIONS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_OPTIONS);
    	} else {
    		return this.getToken(SparkSqlParser.KW_OPTIONS, i);
    	}
    }
    public KW_PARTITIONED(): antlr.TerminalNode[];
    public KW_PARTITIONED(i: number): antlr.TerminalNode | null;
    public KW_PARTITIONED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_PARTITIONED);
    	} else {
    		return this.getToken(SparkSqlParser.KW_PARTITIONED, i);
    	}
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public expressionPropertyList(): ExpressionPropertyListContext[];
    public expressionPropertyList(i: number): ExpressionPropertyListContext | null;
    public expressionPropertyList(i?: number): ExpressionPropertyListContext[] | ExpressionPropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionPropertyListContext);
        }

        return this.getRuleContext(i, ExpressionPropertyListContext);
    }
    public partitionFieldList(): PartitionFieldListContext[];
    public partitionFieldList(i: number): PartitionFieldListContext | null;
    public partitionFieldList(i?: number): PartitionFieldListContext[] | PartitionFieldListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionFieldListContext);
        }

        return this.getRuleContext(i, PartitionFieldListContext);
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createTableClauses;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateTableClauses) {
             listener.enterCreateTableClauses(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateTableClauses) {
             listener.exitCreateTableClauses(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableClauses) {
            return visitor.visitCreateTableClauses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public property(): PropertyContext[];
    public property(i: number): PropertyContext | null;
    public property(i?: number): PropertyContext[] | PropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyContext);
        }

        return this.getRuleContext(i, PropertyContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_propertyList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPropertyList) {
             listener.enterPropertyList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPropertyList) {
             listener.exitPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyList) {
            return visitor.visitPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyContext extends antlr.ParserRuleContext {
    public _key?: PropertyKeyContext;
    public _value?: PropertyValueContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyKey(): PropertyKeyContext {
        return this.getRuleContext(0, PropertyKeyContext)!;
    }
    public propertyValue(): PropertyValueContext | null {
        return this.getRuleContext(0, PropertyValueContext);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_property;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterProperty) {
             listener.enterProperty(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitProperty) {
             listener.exitProperty(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProperty) {
            return visitor.visitProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_propertyKey;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPropertyKey) {
             listener.enterPropertyKey(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPropertyKey) {
             listener.exitPropertyKey(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyKey) {
            return visitor.visitPropertyKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DECIMAL_VALUE, 0);
    }
    public booleanValue(): BooleanValueContext | null {
        return this.getRuleContext(0, BooleanValueContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_propertyValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPropertyValue) {
             listener.enterPropertyValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPropertyValue) {
             listener.exitPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyValue) {
            return visitor.visitPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionPropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public expressionProperty(): ExpressionPropertyContext[];
    public expressionProperty(i: number): ExpressionPropertyContext | null;
    public expressionProperty(i?: number): ExpressionPropertyContext[] | ExpressionPropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionPropertyContext);
        }

        return this.getRuleContext(i, ExpressionPropertyContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_expressionPropertyList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExpressionPropertyList) {
             listener.enterExpressionPropertyList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExpressionPropertyList) {
             listener.exitExpressionPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionPropertyList) {
            return visitor.visitExpressionPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionPropertyContext extends antlr.ParserRuleContext {
    public _key?: PropertyKeyContext;
    public _value?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyKey(): PropertyKeyContext {
        return this.getRuleContext(0, PropertyKeyContext)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_expressionProperty;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExpressionProperty) {
             listener.enterExpressionProperty(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExpressionProperty) {
             listener.exitExpressionProperty(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionProperty) {
            return visitor.visitExpressionProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_constantList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterConstantList) {
             listener.enterConstantList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitConstantList) {
             listener.exitConstantList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstantList) {
            return visitor.visitConstantList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NestedConstantListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public constantList(): ConstantListContext[];
    public constantList(i: number): ConstantListContext | null;
    public constantList(i?: number): ConstantListContext[] | ConstantListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantListContext);
        }

        return this.getRuleContext(i, ConstantListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_nestedConstantList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNestedConstantList) {
             listener.enterNestedConstantList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNestedConstantList) {
             listener.exitNestedConstantList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNestedConstantList) {
            return visitor.visitNestedConstantList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFileFormatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_STORED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public fileFormat(): FileFormatContext | null {
        return this.getRuleContext(0, FileFormatContext);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public storageHandler(): StorageHandlerContext | null {
        return this.getRuleContext(0, StorageHandlerContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createFileFormat;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateFileFormat) {
             listener.enterCreateFileFormat(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateFileFormat) {
             listener.exitCreateFileFormat(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFileFormat) {
            return visitor.visitCreateFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: StringLitContext;
    public _outFmt?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_fileFormat;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFileFormat) {
             listener.enterFileFormat(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFileFormat) {
             listener.exitFileFormat(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFileFormat) {
            return visitor.visitFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StorageHandlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_storageHandler;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStorageHandler) {
             listener.enterStorageHandler(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStorageHandler) {
             listener.exitStorageHandler(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStorageHandler) {
            return visitor.visitStorageHandler(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_resource;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterResource) {
             listener.enterResource(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitResource) {
             listener.exitResource(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResource) {
            return visitor.visitResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DmlStatementNoWithContext extends antlr.ParserRuleContext {
    public _target?: TableNameContext;
    public _targetAlias?: TableAliasContext;
    public _source?: IdentifierReferenceContext;
    public _sourceQuery?: QueryContext;
    public _sourceAlias?: TableAliasContext;
    public _mergeCondition?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertInto(): InsertIntoContext | null {
        return this.getRuleContext(0, InsertIntoContext);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public multiInsertQueryBody(): MultiInsertQueryBodyContext[];
    public multiInsertQueryBody(i: number): MultiInsertQueryBodyContext | null;
    public multiInsertQueryBody(i?: number): MultiInsertQueryBodyContext[] | MultiInsertQueryBodyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultiInsertQueryBodyContext);
        }

        return this.getRuleContext(i, MultiInsertQueryBodyContext);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public tableAlias(): TableAliasContext[];
    public tableAlias(i: number): TableAliasContext | null;
    public tableAlias(i?: number): TableAliasContext[] | TableAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableAliasContext);
        }

        return this.getRuleContext(i, TableAliasContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public setClause(): SetClauseContext | null {
        return this.getRuleContext(0, SetClauseContext);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MERGE, 0);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTO, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USING, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ON, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public identifierReference(): IdentifierReferenceContext | null {
        return this.getRuleContext(0, IdentifierReferenceContext);
    }
    public matchedClause(): MatchedClauseContext[];
    public matchedClause(i: number): MatchedClauseContext | null;
    public matchedClause(i?: number): MatchedClauseContext[] | MatchedClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MatchedClauseContext);
        }

        return this.getRuleContext(i, MatchedClauseContext);
    }
    public notMatchedClause(): NotMatchedClauseContext[];
    public notMatchedClause(i: number): NotMatchedClauseContext | null;
    public notMatchedClause(i?: number): NotMatchedClauseContext[] | NotMatchedClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NotMatchedClauseContext);
        }

        return this.getRuleContext(i, NotMatchedClauseContext);
    }
    public notMatchedBySourceClause(): NotMatchedBySourceClauseContext[];
    public notMatchedBySourceClause(i: number): NotMatchedBySourceClauseContext | null;
    public notMatchedBySourceClause(i?: number): NotMatchedBySourceClauseContext[] | NotMatchedBySourceClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NotMatchedBySourceClauseContext);
        }

        return this.getRuleContext(i, NotMatchedBySourceClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_dmlStatementNoWith;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDmlStatementNoWith) {
             listener.enterDmlStatementNoWith(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDmlStatementNoWith) {
             listener.exitDmlStatementNoWith(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDmlStatementNoWith) {
            return visitor.visitDmlStatementNoWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbSchemaNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext {
        return this.getRuleContext(0, IdentifierReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_dbSchemaName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDbSchemaName) {
             listener.enterDbSchemaName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDbSchemaName) {
             listener.exitDbSchemaName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDbSchemaName) {
            return visitor.visitDbSchemaName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DbSchemaNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext {
        return this.getRuleContext(0, IdentifierReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_dbSchemaNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDbSchemaNameCreate) {
             listener.enterDbSchemaNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDbSchemaNameCreate) {
             listener.exitDbSchemaNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDbSchemaNameCreate) {
            return visitor.visitDbSchemaNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableNameCreate) {
             listener.enterTableNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableNameCreate) {
             listener.exitTableNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableNameCreate) {
            return visitor.visitTableNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_viewNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterViewNameCreate) {
             listener.enterViewNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitViewNameCreate) {
             listener.exitViewNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewNameCreate) {
            return visitor.visitViewNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_viewName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterViewName) {
             listener.enterViewName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitViewName) {
             listener.exitViewName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewName) {
            return visitor.visitViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_columnName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_columnNameSeq;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColumnNameSeq) {
             listener.enterColumnNameSeq(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColumnNameSeq) {
             listener.exitColumnNameSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameSeq) {
            return visitor.visitColumnNameSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_columnNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColumnNameCreate) {
             listener.enterColumnNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColumnNameCreate) {
             listener.exitColumnNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCreate) {
            return visitor.visitColumnNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierReference;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierReference) {
             listener.enterIdentifierReference(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierReference) {
             listener.exitIdentifierReference(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierReference) {
            return visitor.visitIdentifierReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryOrganizationContext extends antlr.ParserRuleContext {
    public _sortItem?: SortItemContext;
    public _order: SortItemContext[] = [];
    public _expression?: ExpressionContext;
    public _clusterBy: ExpressionContext[] = [];
    public _distributeBy: ExpressionContext[] = [];
    public _sort: SortItemContext[] = [];
    public _limit?: ExpressionContext;
    public _offset?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTER, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIMIT, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OFFSET, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_queryOrganization;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQueryOrganization) {
             listener.enterQueryOrganization(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQueryOrganization) {
             listener.exitQueryOrganization(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryOrganization) {
            return visitor.visitQueryOrganization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultiInsertQueryBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertInto(): InsertIntoContext {
        return this.getRuleContext(0, InsertIntoContext)!;
    }
    public fromStatementBody(): FromStatementBodyContext {
        return this.getRuleContext(0, FromStatementBodyContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multiInsertQueryBody;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultiInsertQueryBody) {
             listener.enterMultiInsertQueryBody(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultiInsertQueryBody) {
             listener.exitMultiInsertQueryBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultiInsertQueryBody) {
            return visitor.visitMultiInsertQueryBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryTermContext extends antlr.ParserRuleContext {
    public _left?: QueryTermContext;
    public _operator?: Token | null;
    public _right?: QueryTermContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryPrimary(): QueryPrimaryContext | null {
        return this.getRuleContext(0, QueryPrimaryContext);
    }
    public queryTerm(): QueryTermContext[];
    public queryTerm(i: number): QueryTermContext | null;
    public queryTerm(i?: number): QueryTermContext[] | QueryTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryTermContext);
        }

        return this.getRuleContext(i, QueryTermContext);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERSECT, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNION, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCEPT, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUS, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_queryTerm;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQueryTerm) {
             listener.enterQueryTerm(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQueryTerm) {
             listener.exitQueryTerm(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryTerm) {
            return visitor.visitQueryTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public querySpecification(): QuerySpecificationContext | null {
        return this.getRuleContext(0, QuerySpecificationContext);
    }
    public fromStatement(): FromStatementContext | null {
        return this.getRuleContext(0, FromStatementContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public inlineTable(): InlineTableContext | null {
        return this.getRuleContext(0, InlineTableContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_queryPrimary;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQueryPrimary) {
             listener.enterQueryPrimary(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQueryPrimary) {
             listener.exitQueryPrimary(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryPrimary) {
            return visitor.visitQueryPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortItemContext extends antlr.ParserRuleContext {
    public _ordering?: Token | null;
    public _nullOrder?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAST, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_sortItem;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSortItem) {
             listener.enterSortItem(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSortItem) {
             listener.exitSortItem(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSortItem) {
            return visitor.visitSortItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public fromStatementBody(): FromStatementBodyContext[];
    public fromStatementBody(i: number): FromStatementBodyContext | null;
    public fromStatementBody(i?: number): FromStatementBodyContext[] | FromStatementBodyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FromStatementBodyContext);
        }

        return this.getRuleContext(i, FromStatementBodyContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_fromStatement;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFromStatement) {
             listener.enterFromStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFromStatement) {
             listener.exitFromStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromStatement) {
            return visitor.visitFromStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromStatementBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transformClause(): TransformClauseContext | null {
        return this.getRuleContext(0, TransformClauseContext);
    }
    public queryOrganization(): QueryOrganizationContext {
        return this.getRuleContext(0, QueryOrganizationContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public aggregationClause(): AggregationClauseContext | null {
        return this.getRuleContext(0, AggregationClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_fromStatementBody;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFromStatementBody) {
             listener.enterFromStatementBody(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFromStatementBody) {
             listener.exitFromStatementBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromStatementBody) {
            return visitor.visitFromStatementBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transformClause(): TransformClauseContext | null {
        return this.getRuleContext(0, TransformClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public aggregationClause(): AggregationClauseContext | null {
        return this.getRuleContext(0, AggregationClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_querySpecification;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQuerySpecification) {
             listener.enterQuerySpecification(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQuerySpecification) {
             listener.exitQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuerySpecification) {
            return visitor.visitQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformClauseContext extends antlr.ParserRuleContext {
    public _kind?: Token | null;
    public _inRowFormat?: RowFormatContext;
    public _recordWriter?: StringLitContext;
    public _script?: StringLitContext;
    public _outRowFormat?: RowFormatContext;
    public _recordReader?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_USING, 0)!;
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SELECT, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public expressionSeq(): ExpressionSeqContext | null {
        return this.getRuleContext(0, ExpressionSeqContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSFORM, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REDUCE, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDWRITER, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDREADER, 0);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public identifierSeq(): IdentifierSeqContext | null {
        return this.getRuleContext(0, IdentifierSeqContext);
    }
    public colTypeList(): ColTypeListContext | null {
        return this.getRuleContext(0, ColTypeListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_transformClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTransformClause) {
             listener.enterTransformClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTransformClause) {
             listener.exitTransformClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransformClause) {
            return visitor.visitTransformClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectClauseContext extends antlr.ParserRuleContext {
    public _hint?: HintContext;
    public _hints: HintContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SELECT, 0)!;
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        return this.getRuleContext(0, NamedExpressionSeqContext)!;
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public hint(): HintContext[];
    public hint(i: number): HintContext | null;
    public hint(i?: number): HintContext[] | HintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintContext);
        }

        return this.getRuleContext(i, HintContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_selectClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSelectClause) {
             listener.enterSelectClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSelectClause) {
             listener.exitSelectClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectClause) {
            return visitor.visitSelectClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public assignmentList(): AssignmentListContext {
        return this.getRuleContext(0, AssignmentListContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_setClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetClause) {
             listener.enterSetClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetClause) {
             listener.exitSetClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetClause) {
            return visitor.visitSetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MatchedClauseContext extends antlr.ParserRuleContext {
    public _matchedCond?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_THEN, 0)!;
    }
    public matchedAction(): MatchedActionContext {
        return this.getRuleContext(0, MatchedActionContext)!;
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_matchedClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMatchedClause) {
             listener.enterMatchedClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMatchedClause) {
             listener.exitMatchedClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMatchedClause) {
            return visitor.visitMatchedClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedClauseContext extends antlr.ParserRuleContext {
    public _notMatchedCond?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHEN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_NOT, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_THEN, 0)!;
    }
    public notMatchedAction(): NotMatchedActionContext {
        return this.getRuleContext(0, NotMatchedActionContext)!;
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_TARGET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TARGET, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_notMatchedClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNotMatchedClause) {
             listener.enterNotMatchedClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNotMatchedClause) {
             listener.exitNotMatchedClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedClause) {
            return visitor.visitNotMatchedClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedBySourceClauseContext extends antlr.ParserRuleContext {
    public _notMatchedBySourceCond?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHEN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_NOT, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BY, 0)!;
    }
    public KW_SOURCE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SOURCE, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_THEN, 0)!;
    }
    public notMatchedBySourceAction(): NotMatchedBySourceActionContext {
        return this.getRuleContext(0, NotMatchedBySourceActionContext)!;
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_notMatchedBySourceClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNotMatchedBySourceClause) {
             listener.enterNotMatchedBySourceClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNotMatchedBySourceClause) {
             listener.exitNotMatchedBySourceClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedBySourceClause) {
            return visitor.visitNotMatchedBySourceClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MatchedActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public assignmentList(): AssignmentListContext | null {
        return this.getRuleContext(0, AssignmentListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_matchedAction;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMatchedAction) {
             listener.enterMatchedAction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMatchedAction) {
             listener.exitMatchedAction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMatchedAction) {
            return visitor.visitMatchedAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INSERT, 0)!;
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public multipartIdentifierList(): MultipartIdentifierListContext | null {
        return this.getRuleContext(0, MultipartIdentifierListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VALUES, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_notMatchedAction;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNotMatchedAction) {
             listener.enterNotMatchedAction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNotMatchedAction) {
             listener.exitNotMatchedAction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedAction) {
            return visitor.visitNotMatchedAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedBySourceActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public assignmentList(): AssignmentListContext | null {
        return this.getRuleContext(0, AssignmentListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_notMatchedBySourceAction;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNotMatchedBySourceAction) {
             listener.enterNotMatchedBySourceAction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNotMatchedBySourceAction) {
             listener.exitNotMatchedBySourceAction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedBySourceAction) {
            return visitor.visitNotMatchedBySourceAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignment(): AssignmentContext[];
    public assignment(i: number): AssignmentContext | null;
    public assignment(i?: number): AssignmentContext[] | AssignmentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AssignmentContext);
        }

        return this.getRuleContext(i, AssignmentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_assignmentList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAssignmentList) {
             listener.enterAssignmentList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAssignmentList) {
             listener.exitAssignmentList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentList) {
            return visitor.visitAssignmentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentContext extends antlr.ParserRuleContext {
    public _key?: MultipartIdentifierContext;
    public _value?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.EQ, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_assignment;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAssignment) {
             listener.enterAssignment(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAssignment) {
             listener.exitAssignment(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssignment) {
            return visitor.visitAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHERE, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_whereClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HAVING(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_HAVING, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_havingClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintContext extends antlr.ParserRuleContext {
    public _hintStatement?: HintStatementContext;
    public _hintStatements: HintStatementContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HENT_START(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.HENT_START, 0)!;
    }
    public HENT_END(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.HENT_END, 0)!;
    }
    public hintStatement(): HintStatementContext[];
    public hintStatement(i: number): HintStatementContext | null;
    public hintStatement(i?: number): HintStatementContext[] | HintStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintStatementContext);
        }

        return this.getRuleContext(i, HintStatementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_hint;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHint) {
             listener.enterHint(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHint) {
             listener.exitHint(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHint) {
            return visitor.visitHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintStatementContext extends antlr.ParserRuleContext {
    public _hintName?: IdentifierContext;
    public _primaryExpression?: PrimaryExpressionContext;
    public _parameters: PrimaryExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public primaryExpression(): PrimaryExpressionContext[];
    public primaryExpression(i: number): PrimaryExpressionContext | null;
    public primaryExpression(i?: number): PrimaryExpressionContext[] | PrimaryExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryExpressionContext);
        }

        return this.getRuleContext(i, PrimaryExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_hintStatement;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHintStatement) {
             listener.enterHintStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHintStatement) {
             listener.exitHintStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHintStatement) {
            return visitor.visitHintStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FROM, 0)!;
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public pivotClause(): PivotClauseContext | null {
        return this.getRuleContext(0, PivotClauseContext);
    }
    public unpivotClause(): UnpivotClauseContext | null {
        return this.getRuleContext(0, UnpivotClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_fromClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFromClause) {
             listener.enterFromClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFromClause) {
             listener.exitFromClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionKindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USER, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionKind;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionKind) {
             listener.enterFunctionKind(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionKind) {
             listener.exitFunctionKind(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionKind) {
            return visitor.visitFunctionKind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TemporalClauseContext extends antlr.ParserRuleContext {
    public _timestamp?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public KW_OF(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_OF, 0)!;
    }
    public version(): VersionContext | null {
        return this.getRuleContext(0, VersionContext);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VERSION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOR, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_temporalClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTemporalClause) {
             listener.enterTemporalClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTemporalClause) {
             listener.exitTemporalClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTemporalClause) {
            return visitor.visitTemporalClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregationClauseContext extends antlr.ParserRuleContext {
    public _groupByClause?: GroupByClauseContext;
    public _groupingExpressionsWithGroupingAnalytics: GroupByClauseContext[] = [];
    public _expression?: ExpressionContext;
    public _groupingExpressions: ExpressionContext[] = [];
    public _kind?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_GROUP, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BY, 0)!;
    }
    public groupByClause(): GroupByClauseContext[];
    public groupByClause(i: number): GroupByClauseContext | null;
    public groupByClause(i?: number): GroupByClauseContext[] | GroupByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupByClauseContext);
        }

        return this.getRuleContext(i, GroupByClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SETS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CUBE, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUPING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_aggregationClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAggregationClause) {
             listener.enterAggregationClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAggregationClause) {
             listener.exitAggregationClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggregationClause) {
            return visitor.visitAggregationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public groupingAnalytics(): GroupingAnalyticsContext | null {
        return this.getRuleContext(0, GroupingAnalyticsContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_groupByClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGroupByClause) {
             listener.enterGroupByClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGroupByClause) {
             listener.exitGroupByClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingAnalyticsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CUBE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUPING, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SETS, 0);
    }
    public groupingElement(): GroupingElementContext[];
    public groupingElement(i: number): GroupingElementContext | null;
    public groupingElement(i?: number): GroupingElementContext[] | GroupingElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingElementContext);
        }

        return this.getRuleContext(i, GroupingElementContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_groupingAnalytics;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGroupingAnalytics) {
             listener.enterGroupingAnalytics(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGroupingAnalytics) {
             listener.exitGroupingAnalytics(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingAnalytics) {
            return visitor.visitGroupingAnalytics(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingAnalytics(): GroupingAnalyticsContext | null {
        return this.getRuleContext(0, GroupingAnalyticsContext);
    }
    public groupingSet(): GroupingSetContext | null {
        return this.getRuleContext(0, GroupingSetContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_groupingElement;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGroupingElement) {
             listener.enterGroupingElement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGroupingElement) {
             listener.exitGroupingElement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingElement) {
            return visitor.visitGroupingElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_groupingSet;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGroupingSet) {
             listener.enterGroupingSet(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGroupingSet) {
             listener.exitGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingSet) {
            return visitor.visitGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotClauseContext extends antlr.ParserRuleContext {
    public _aggregates?: NamedExpressionSeqContext;
    public _pivotValue?: PivotValueContext;
    public _pivotValues: PivotValueContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PIVOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_PIVOT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FOR, 0)!;
    }
    public pivotColumn(): PivotColumnContext {
        return this.getRuleContext(0, PivotColumnContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        return this.getRuleContext(0, NamedExpressionSeqContext)!;
    }
    public pivotValue(): PivotValueContext[];
    public pivotValue(i: number): PivotValueContext | null;
    public pivotValue(i?: number): PivotValueContext[] | PivotValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PivotValueContext);
        }

        return this.getRuleContext(i, PivotValueContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_pivotClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPivotClause) {
             listener.enterPivotClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPivotClause) {
             listener.exitPivotClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPivotClause) {
            return visitor.visitPivotClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotColumnContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _identifiers: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_pivotColumn;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPivotColumn) {
             listener.enterPivotColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPivotColumn) {
             listener.exitPivotColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPivotColumn) {
            return visitor.visitPivotColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_pivotValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPivotValue) {
             listener.enterPivotValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPivotValue) {
             listener.exitPivotValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPivotValue) {
            return visitor.visitPivotValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotClauseContext extends antlr.ParserRuleContext {
    public _nullOperator?: UnpivotNullClauseContext;
    public _operator?: UnpivotOperatorContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNPIVOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_UNPIVOT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public unpivotOperator(): UnpivotOperatorContext {
        return this.getRuleContext(0, UnpivotOperatorContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public unpivotNullClause(): UnpivotNullClauseContext | null {
        return this.getRuleContext(0, UnpivotNullClauseContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotClause) {
             listener.enterUnpivotClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotClause) {
             listener.exitUnpivotClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotClause) {
            return visitor.visitUnpivotClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotNullClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULLS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_NULLS, 0)!;
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INCLUDE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCLUDE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotNullClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotNullClause) {
             listener.enterUnpivotNullClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotNullClause) {
             listener.exitUnpivotNullClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotNullClause) {
            return visitor.visitUnpivotNullClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unpivotSingleValueColumnClause(): UnpivotSingleValueColumnClauseContext | null {
        return this.getRuleContext(0, UnpivotSingleValueColumnClauseContext);
    }
    public unpivotMultiValueColumnClause(): UnpivotMultiValueColumnClauseContext | null {
        return this.getRuleContext(0, UnpivotMultiValueColumnClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotOperator;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotOperator) {
             listener.enterUnpivotOperator(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotOperator) {
             listener.exitUnpivotOperator(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotOperator) {
            return visitor.visitUnpivotOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotSingleValueColumnClauseContext extends antlr.ParserRuleContext {
    public _unpivotColumnAndAlias?: UnpivotColumnAndAliasContext;
    public _unpivotColumns: UnpivotColumnAndAliasContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unpivotValueColumn(): UnpivotValueColumnContext {
        return this.getRuleContext(0, UnpivotValueColumnContext)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FOR, 0)!;
    }
    public unpivotNameColumn(): UnpivotNameColumnContext {
        return this.getRuleContext(0, UnpivotNameColumnContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IN, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public unpivotColumnAndAlias(): UnpivotColumnAndAliasContext[];
    public unpivotColumnAndAlias(i: number): UnpivotColumnAndAliasContext | null;
    public unpivotColumnAndAlias(i?: number): UnpivotColumnAndAliasContext[] | UnpivotColumnAndAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnpivotColumnAndAliasContext);
        }

        return this.getRuleContext(i, UnpivotColumnAndAliasContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotSingleValueColumnClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotSingleValueColumnClause) {
             listener.enterUnpivotSingleValueColumnClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotSingleValueColumnClause) {
             listener.exitUnpivotSingleValueColumnClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotSingleValueColumnClause) {
            return visitor.visitUnpivotSingleValueColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotMultiValueColumnClauseContext extends antlr.ParserRuleContext {
    public _unpivotValueColumn?: UnpivotValueColumnContext;
    public _unpivotValueColumns: UnpivotValueColumnContext[] = [];
    public _unpivotColumnSet?: UnpivotColumnSetContext;
    public _unpivotColumnSets: UnpivotColumnSetContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FOR, 0)!;
    }
    public unpivotNameColumn(): UnpivotNameColumnContext {
        return this.getRuleContext(0, UnpivotNameColumnContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IN, 0)!;
    }
    public unpivotValueColumn(): UnpivotValueColumnContext[];
    public unpivotValueColumn(i: number): UnpivotValueColumnContext | null;
    public unpivotValueColumn(i?: number): UnpivotValueColumnContext[] | UnpivotValueColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnpivotValueColumnContext);
        }

        return this.getRuleContext(i, UnpivotValueColumnContext);
    }
    public unpivotColumnSet(): UnpivotColumnSetContext[];
    public unpivotColumnSet(i: number): UnpivotColumnSetContext | null;
    public unpivotColumnSet(i?: number): UnpivotColumnSetContext[] | UnpivotColumnSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnpivotColumnSetContext);
        }

        return this.getRuleContext(i, UnpivotColumnSetContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotMultiValueColumnClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotMultiValueColumnClause) {
             listener.enterUnpivotMultiValueColumnClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotMultiValueColumnClause) {
             listener.exitUnpivotMultiValueColumnClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotMultiValueColumnClause) {
            return visitor.visitUnpivotMultiValueColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotColumnSetContext extends antlr.ParserRuleContext {
    public _unpivotColumn?: UnpivotColumnContext;
    public _unpivotColumns: UnpivotColumnContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public unpivotColumn(): UnpivotColumnContext[];
    public unpivotColumn(i: number): UnpivotColumnContext | null;
    public unpivotColumn(i?: number): UnpivotColumnContext[] | UnpivotColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnpivotColumnContext);
        }

        return this.getRuleContext(i, UnpivotColumnContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public unpivotAlias(): UnpivotAliasContext | null {
        return this.getRuleContext(0, UnpivotAliasContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotColumnSet;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotColumnSet) {
             listener.enterUnpivotColumnSet(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotColumnSet) {
             listener.exitUnpivotColumnSet(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotColumnSet) {
            return visitor.visitUnpivotColumnSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotValueColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotValueColumn;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotValueColumn) {
             listener.enterUnpivotValueColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotValueColumn) {
             listener.exitUnpivotValueColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotValueColumn) {
            return visitor.visitUnpivotValueColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotNameColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotNameColumn;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotNameColumn) {
             listener.enterUnpivotNameColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotNameColumn) {
             listener.exitUnpivotNameColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotNameColumn) {
            return visitor.visitUnpivotNameColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotColumnAndAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unpivotColumn(): UnpivotColumnContext {
        return this.getRuleContext(0, UnpivotColumnContext)!;
    }
    public unpivotAlias(): UnpivotAliasContext | null {
        return this.getRuleContext(0, UnpivotAliasContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotColumnAndAlias;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotColumnAndAlias) {
             listener.enterUnpivotColumnAndAlias(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotColumnAndAlias) {
             listener.exitUnpivotColumnAndAlias(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotColumnAndAlias) {
            return visitor.visitUnpivotColumnAndAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotColumn;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotColumn) {
             listener.enterUnpivotColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotColumn) {
             listener.exitUnpivotColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotColumn) {
            return visitor.visitUnpivotColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotAlias;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotAlias) {
             listener.enterUnpivotAlias(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotAlias) {
             listener.exitUnpivotAlias(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotAlias) {
            return visitor.visitUnpivotAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfNotExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IF, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_NOT, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_ifNotExists;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIfNotExists) {
             listener.enterIfNotExists(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIfNotExists) {
             listener.exitIfNotExists(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IF, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_ifExists;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIfExists) {
             listener.enterIfExists(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIfExists) {
             listener.exitIfExists(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LateralViewContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _colName: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LATERAL(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LATERAL, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTER, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_lateralView;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterLateralView) {
             listener.enterLateralView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitLateralView) {
             listener.exitLateralView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLateralView) {
            return visitor.visitLateralView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTINCT, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_setQuantifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetQuantifier) {
             listener.enterSetQuantifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetQuantifier) {
             listener.exitSetQuantifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relationPrimary(): RelationPrimaryContext | null {
        return this.getRuleContext(0, RelationPrimaryContext);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LATERAL, 0);
    }
    public relationExtension(): RelationExtensionContext[];
    public relationExtension(i: number): RelationExtensionContext | null;
    public relationExtension(i?: number): RelationExtensionContext[] | RelationExtensionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationExtensionContext);
        }

        return this.getRuleContext(i, RelationExtensionContext);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_relation;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRelation) {
             listener.enterRelation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRelation) {
             listener.exitRelation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelation) {
            return visitor.visitRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationExtensionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public joinRelation(): JoinRelationContext | null {
        return this.getRuleContext(0, JoinRelationContext);
    }
    public pivotClause(): PivotClauseContext | null {
        return this.getRuleContext(0, PivotClauseContext);
    }
    public unpivotClause(): UnpivotClauseContext | null {
        return this.getRuleContext(0, UnpivotClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_relationExtension;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRelationExtension) {
             listener.enterRelationExtension(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRelationExtension) {
             listener.exitRelationExtension(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelationExtension) {
            return visitor.visitRelationExtension(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinRelationContext extends antlr.ParserRuleContext {
    public _right?: RelationPrimaryContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_JOIN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_JOIN, 0)!;
    }
    public relationPrimary(): RelationPrimaryContext {
        return this.getRuleContext(0, RelationPrimaryContext)!;
    }
    public joinType(): JoinTypeContext | null {
        return this.getRuleContext(0, JoinTypeContext);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LATERAL, 0);
    }
    public joinCriteria(): JoinCriteriaContext | null {
        return this.getRuleContext(0, JoinCriteriaContext);
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NATURAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_joinRelation;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterJoinRelation) {
             listener.enterJoinRelation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitJoinRelation) {
             listener.exitJoinRelation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinRelation) {
            return visitor.visitJoinRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INNER, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CROSS, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEFT, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTER, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEMI, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RIGHT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FULL, 0);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANTI, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_joinType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterJoinType) {
             listener.enterJoinType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitJoinType) {
             listener.exitJoinType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinType) {
            return visitor.visitJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinCriteriaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ON, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USING, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_joinCriteria;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterJoinCriteria) {
             listener.enterJoinCriteria(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitJoinCriteria) {
             listener.exitJoinCriteria(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinCriteria) {
            return visitor.visitJoinCriteria(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleContext extends antlr.ParserRuleContext {
    public _seed?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLESAMPLE, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public sampleMethod(): SampleMethodContext | null {
        return this.getRuleContext(0, SampleMethodContext);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPEATABLE, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_sample;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSample) {
             listener.enterSample(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSample) {
             listener.exitSample(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSample) {
            return visitor.visitSample(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleMethodContext extends antlr.ParserRuleContext {
    public _negativeSign?: Token | null;
    public _percentage?: Token | null;
    public _sampleType?: Token | null;
    public _numerator?: Token | null;
    public _denominator?: Token | null;
    public _bytes?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PERCENTLIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTLIT, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(SparkSqlParser.INTEGER_VALUE, i);
    	}
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DECIMAL_VALUE, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROWS, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OF, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKET, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ON, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_sampleMethod;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSampleMethod) {
             listener.enterSampleMethod(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSampleMethod) {
             listener.exitSampleMethod(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSampleMethod) {
            return visitor.visitSampleMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public identifierSeq(): IdentifierSeqContext {
        return this.getRuleContext(0, IdentifierSeqContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierList) {
             listener.enterIdentifierList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierList) {
             listener.exitIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierList) {
            return visitor.visitIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierSeqContext extends antlr.ParserRuleContext {
    public _errorCapturingIdentifier?: ErrorCapturingIdentifierContext;
    public _ident: ErrorCapturingIdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierSeq;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierSeq) {
             listener.enterIdentifierSeq(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierSeq) {
             listener.exitIdentifierSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierSeq) {
            return visitor.visitIdentifierSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderedIdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public orderedIdentifier(): OrderedIdentifierContext[];
    public orderedIdentifier(i: number): OrderedIdentifierContext | null;
    public orderedIdentifier(i?: number): OrderedIdentifierContext[] | OrderedIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderedIdentifierContext);
        }

        return this.getRuleContext(i, OrderedIdentifierContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_orderedIdentifierList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterOrderedIdentifierList) {
             listener.enterOrderedIdentifierList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitOrderedIdentifierList) {
             listener.exitOrderedIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderedIdentifierList) {
            return visitor.visitOrderedIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderedIdentifierContext extends antlr.ParserRuleContext {
    public _ident?: ErrorCapturingIdentifierContext;
    public _ordering?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_orderedIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterOrderedIdentifier) {
             listener.enterOrderedIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitOrderedIdentifier) {
             listener.exitOrderedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderedIdentifier) {
            return visitor.visitOrderedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierCommentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public identifierComment(): IdentifierCommentContext[];
    public identifierComment(i: number): IdentifierCommentContext | null;
    public identifierComment(i?: number): IdentifierCommentContext[] | IdentifierCommentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierCommentContext);
        }

        return this.getRuleContext(i, IdentifierCommentContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierCommentList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierCommentList) {
             listener.enterIdentifierCommentList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierCommentList) {
             listener.exitIdentifierCommentList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierCommentList) {
            return visitor.visitIdentifierCommentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierCommentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierComment;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierComment) {
             listener.enterIdentifierComment(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierComment) {
             listener.exitIdentifierComment(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierComment) {
            return visitor.visitIdentifierComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext | null {
        return this.getRuleContext(0, IdentifierReferenceContext);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public temporalClause(): TemporalClauseContext | null {
        return this.getRuleContext(0, TemporalClauseContext);
    }
    public sample(): SampleContext | null {
        return this.getRuleContext(0, SampleContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public relation(): RelationContext | null {
        return this.getRuleContext(0, RelationContext);
    }
    public inlineTable(): InlineTableContext | null {
        return this.getRuleContext(0, InlineTableContext);
    }
    public functionTable(): FunctionTableContext | null {
        return this.getRuleContext(0, FunctionTableContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_relationPrimary;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRelationPrimary) {
             listener.enterRelationPrimary(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRelationPrimary) {
             listener.exitRelationPrimary(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelationPrimary) {
            return visitor.visitRelationPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InlineTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VALUES, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_inlineTable;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterInlineTable) {
             listener.enterInlineTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitInlineTable) {
             listener.exitInlineTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInlineTable) {
            return visitor.visitInlineTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableSubqueryArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public tableArgumentPartitioning(): TableArgumentPartitioningContext | null {
        return this.getRuleContext(0, TableArgumentPartitioningContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTableSubqueryArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableSubqueryArgument) {
             listener.enterFunctionTableSubqueryArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableSubqueryArgument) {
             listener.exitFunctionTableSubqueryArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableSubqueryArgument) {
            return visitor.visitFunctionTableSubqueryArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentPartitioningContext extends antlr.ParserRuleContext {
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SINGLE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableArgumentPartitioning;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableArgumentPartitioning) {
             listener.enterTableArgumentPartitioning(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableArgumentPartitioning) {
             listener.exitTableArgumentPartitioning(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentPartitioning) {
            return visitor.visitTableArgumentPartitioning(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableNamedArgumentExpressionContext extends antlr.ParserRuleContext {
    public _key?: IdentifierContext;
    public _table?: FunctionTableSubqueryArgumentContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAT_ARROW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.FAT_ARROW, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext {
        return this.getRuleContext(0, FunctionTableSubqueryArgumentContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTableNamedArgumentExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableNamedArgumentExpression) {
             listener.enterFunctionTableNamedArgumentExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableNamedArgumentExpression) {
             listener.exitFunctionTableNamedArgumentExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableNamedArgumentExpression) {
            return visitor.visitFunctionTableNamedArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableReferenceArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext | null {
        return this.getRuleContext(0, FunctionTableSubqueryArgumentContext);
    }
    public functionTableNamedArgumentExpression(): FunctionTableNamedArgumentExpressionContext | null {
        return this.getRuleContext(0, FunctionTableNamedArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTableReferenceArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableReferenceArgument) {
             listener.enterFunctionTableReferenceArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableReferenceArgument) {
             listener.exitFunctionTableReferenceArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableReferenceArgument) {
            return visitor.visitFunctionTableReferenceArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionTableReferenceArgument(): FunctionTableReferenceArgumentContext | null {
        return this.getRuleContext(0, FunctionTableReferenceArgumentContext);
    }
    public functionArgument(): FunctionArgumentContext | null {
        return this.getRuleContext(0, FunctionArgumentContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTableArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableArgument) {
             listener.enterFunctionTableArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableArgument) {
             listener.exitFunctionTableArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableArgument) {
            return visitor.visitFunctionTableArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public functionTableArgument(): FunctionTableArgumentContext[];
    public functionTableArgument(i: number): FunctionTableArgumentContext | null;
    public functionTableArgument(i?: number): FunctionTableArgumentContext[] | FunctionTableArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionTableArgumentContext);
        }

        return this.getRuleContext(i, FunctionTableArgumentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTable;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTable) {
             listener.enterFunctionTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTable) {
             listener.exitFunctionTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTable) {
            return visitor.visitFunctionTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public strictIdentifier(): StrictIdentifierContext | null {
        return this.getRuleContext(0, StrictIdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableAlias;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableAlias) {
             listener.enterTableAlias(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableAlias) {
             listener.exitTableAlias(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableAlias) {
            return visitor.visitTableAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatContext extends antlr.ParserRuleContext {
    public _name?: StringLitContext;
    public _props?: PropertyListContext;
    public _fieldsTerminatedBy?: StringLitContext;
    public _escapedBy?: StringLitContext;
    public _collectionItemsTerminatedBy?: StringLitContext;
    public _keysTerminatedBy?: StringLitContext;
    public _linesSeparatedBy?: StringLitContext;
    public _nullDefinedAs?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELIMITED, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIELDS, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode[];
    public KW_TERMINATED(i: number): antlr.TerminalNode | null;
    public KW_TERMINATED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TERMINATED);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TERMINATED, i);
    	}
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLLECTION, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ITEMS, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_KEYS, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LINES, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFINED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPED, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_rowFormat;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRowFormat) {
             listener.enterRowFormat(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRowFormat) {
             listener.exitRowFormat(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowFormat) {
            return visitor.visitRowFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext[];
    public multipartIdentifier(i: number): MultipartIdentifierContext | null;
    public multipartIdentifier(i?: number): MultipartIdentifierContext[] | MultipartIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierContext);
        }

        return this.getRuleContext(i, MultipartIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multipartIdentifierList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipartIdentifierList) {
             listener.enterMultipartIdentifierList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipartIdentifierList) {
             listener.exitMultipartIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierList) {
            return visitor.visitMultipartIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierContext extends antlr.ParserRuleContext {
    public _errorCapturingIdentifier?: ErrorCapturingIdentifierContext;
    public _parts: ErrorCapturingIdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multipartIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipartIdentifier) {
             listener.enterMultipartIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipartIdentifier) {
             listener.exitMultipartIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifier) {
            return visitor.visitMultipartIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierPropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifierProperty(): MultipartIdentifierPropertyContext[];
    public multipartIdentifierProperty(i: number): MultipartIdentifierPropertyContext | null;
    public multipartIdentifierProperty(i?: number): MultipartIdentifierPropertyContext[] | MultipartIdentifierPropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierPropertyContext);
        }

        return this.getRuleContext(i, MultipartIdentifierPropertyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multipartIdentifierPropertyList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipartIdentifierPropertyList) {
             listener.enterMultipartIdentifierPropertyList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipartIdentifierPropertyList) {
             listener.exitMultipartIdentifierPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierPropertyList) {
            return visitor.visitMultipartIdentifierPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierPropertyContext extends antlr.ParserRuleContext {
    public _options?: PropertyListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multipartIdentifierProperty;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipartIdentifierProperty) {
             listener.enterMultipartIdentifierProperty(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipartIdentifierProperty) {
             listener.exitMultipartIdentifierProperty(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierProperty) {
            return visitor.visitMultipartIdentifierProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIdentifierContext extends antlr.ParserRuleContext {
    public _db?: ErrorCapturingIdentifierContext;
    public _table?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableIdentifier) {
             listener.enterTableIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableIdentifier) {
             listener.exitTableIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableIdentifier) {
            return visitor.visitTableIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewIdentifierContext extends antlr.ParserRuleContext {
    public _db?: ErrorCapturingIdentifierContext;
    public _view?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_viewIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterViewIdentifier) {
             listener.enterViewIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitViewIdentifier) {
             listener.exitViewIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewIdentifier) {
            return visitor.visitViewIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedExpressionContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedExpression) {
             listener.enterNamedExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedExpression) {
             listener.exitNamedExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedExpression) {
            return visitor.visitNamedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedExpressionSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public namedExpression(): NamedExpressionContext[];
    public namedExpression(i: number): NamedExpressionContext | null;
    public namedExpression(i?: number): NamedExpressionContext[] | NamedExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedExpressionContext);
        }

        return this.getRuleContext(i, NamedExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedExpressionSeq;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedExpressionSeq) {
             listener.enterNamedExpressionSeq(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedExpressionSeq) {
             listener.exitNamedExpressionSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedExpressionSeq) {
            return visitor.visitNamedExpressionSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionFieldListContext extends antlr.ParserRuleContext {
    public _partitionField?: PartitionFieldContext;
    public _fields: PartitionFieldContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public partitionField(): PartitionFieldContext[];
    public partitionField(i: number): PartitionFieldContext | null;
    public partitionField(i?: number): PartitionFieldContext[] | PartitionFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionFieldContext);
        }

        return this.getRuleContext(i, PartitionFieldContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionFieldList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionFieldList) {
             listener.enterPartitionFieldList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionFieldList) {
             listener.exitPartitionFieldList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionFieldList) {
            return visitor.visitPartitionFieldList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transform(): TransformContext | null {
        return this.getRuleContext(0, TransformContext);
    }
    public colType(): ColTypeContext | null {
        return this.getRuleContext(0, ColTypeContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionField;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionField) {
             listener.enterPartitionField(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionField) {
             listener.exitPartitionField(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionField) {
            return visitor.visitPartitionField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformContext extends antlr.ParserRuleContext {
    public _transformName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public transformArgument(): TransformArgumentContext[];
    public transformArgument(i: number): TransformArgumentContext | null;
    public transformArgument(i?: number): TransformArgumentContext[] | TransformArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransformArgumentContext);
        }

        return this.getRuleContext(i, TransformArgumentContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_transform;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTransform) {
             listener.enterTransform(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTransform) {
             listener.exitTransform(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransform) {
            return visitor.visitTransform(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_transformArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTransformArgument) {
             listener.enterTransformArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTransformArgument) {
             listener.exitTransformArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransformArgument) {
            return visitor.visitTransformArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_expression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedArgumentExpressionContext extends antlr.ParserRuleContext {
    public _key?: IdentifierContext;
    public _value?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAT_ARROW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.FAT_ARROW, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedArgumentExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedArgumentExpression) {
             listener.enterNamedArgumentExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedArgumentExpression) {
             listener.exitNamedArgumentExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedArgumentExpression) {
            return visitor.visitNamedArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public namedArgumentExpression(): NamedArgumentExpressionContext | null {
        return this.getRuleContext(0, NamedArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionArgument) {
             listener.enterFunctionArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionArgument) {
             listener.exitFunctionArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionArgument) {
            return visitor.visitFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_expressionSeq;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExpressionSeq) {
             listener.enterExpressionSeq(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExpressionSeq) {
             listener.exitExpressionSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionSeq) {
            return visitor.visitExpressionSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public _left?: BooleanExpressionContext;
    public _operator?: Token | null;
    public _right?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NOT, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(0, PredicateContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_booleanExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterBooleanExpression) {
             listener.enterBooleanExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitBooleanExpression) {
             listener.exitBooleanExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanExpression) {
            return visitor.visitBooleanExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public _kind?: Token | null;
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public _pattern?: ValueExpressionContext;
    public _quantifier?: Token | null;
    public _escapeChar?: StringLitContext;
    public _right?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BETWEEN, 0);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REGEXP, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ILIKE, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SOME, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPE, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IS, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FALSE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNKNOWN, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_predicate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPredicate) {
             listener.enterPredicate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPredicate) {
             listener.exitPredicate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPredicate) {
            return visitor.visitPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PLUS, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.TILDE, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PERCENT, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIV, 0);
    }
    public CONCAT_PIPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.CONCAT_PIPE, 0);
    }
    public AMPERSAND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.AMPERSAND, 0);
    }
    public HAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.HAT, 0);
    }
    public PIPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PIPE, 0);
    }
    public comparisonOperator(): ComparisonOperatorContext | null {
        return this.getRuleContext(0, ComparisonOperatorContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_valueExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterValueExpression) {
             listener.enterValueExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitValueExpression) {
             listener.exitValueExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValueExpression) {
            return visitor.visitValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUARTER, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEK, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYOFYEAR, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECOND, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECOND, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_datetimeUnit;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDatetimeUnit) {
             listener.enterDatetimeUnit(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDatetimeUnit) {
             listener.exitDatetimeUnit(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatetimeUnit) {
            return visitor.visitDatetimeUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public _value?: PrimaryExpressionContext;
    public _base?: PrimaryExpressionContext;
    public _name?: Token | null;
    public _unit?: DatetimeUnitContext;
    public _invalidUnit?: StringLitContext;
    public _unitsAmount?: ValueExpressionContext;
    public _timestamp?: ValueExpressionContext;
    public _startTimestamp?: ValueExpressionContext;
    public _endTimestamp?: ValueExpressionContext;
    public _elseExpression?: ExpressionContext;
    public _substr?: ValueExpressionContext;
    public _str?: ValueExpressionContext;
    public _where?: BooleanExpressionContext;
    public _nullsOption?: Token | null;
    public _field?: IdentifierContext;
    public _source?: ValueExpressionContext;
    public _pos?: ValueExpressionContext;
    public _len?: ValueExpressionContext;
    public _trimOption?: Token | null;
    public _trimStr?: ValueExpressionContext;
    public _srcStr?: ValueExpressionContext;
    public _input?: ValueExpressionContext;
    public _replace?: ValueExpressionContext;
    public _position?: ValueExpressionContext;
    public _length?: ValueExpressionContext;
    public _percentage?: ValueExpressionContext;
    public _index?: ValueExpressionContext;
    public _fieldName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USER, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SESSION_USER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPADD, 0);
    }
    public KW_DATEADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEADD, 0);
    }
    public KW_DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_ADD, 0);
    }
    public datetimeUnit(): DatetimeUnitContext | null {
        return this.getRuleContext(0, DatetimeUnitContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEDIFF, 0);
    }
    public KW_DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_DIFF, 0);
    }
    public KW_TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMEDIFF, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_END, 0);
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ELSE, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CAST, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRY_CAST, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public namedExpression(): NamedExpressionContext[];
    public namedExpression(i: number): NamedExpressionContext | null;
    public namedExpression(i?: number): NamedExpressionContext[] | NamedExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedExpressionContext);
        }

        return this.getRuleContext(i, NamedExpressionContext);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IGNORE, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public KW_ANY_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY_VALUE, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAST, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_POSITION, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOT, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public functionArgument(): FunctionArgumentContext[];
    public functionArgument(i: number): FunctionArgumentContext | null;
    public functionArgument(i?: number): FunctionArgumentContext[] | FunctionArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionArgumentContext);
        }

        return this.getRuleContext(i, FunctionArgumentContext);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILTER, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WHERE, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVER, 0);
    }
    public windowSpec(): WindowSpecContext | null {
        return this.getRuleContext(0, WindowSpecContext);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESPECT, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ARROW, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTRACT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTR, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTRING, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOR, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRIM, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOTH, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEADING, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRAILING, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERLAY, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PLACING, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITHIN, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUP, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public sortItem(): SortItemContext | null {
        return this.getRuleContext(0, SortItemContext);
    }
    public KW_PERCENTILE_CONT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTILE_CONT, 0);
    }
    public KW_PERCENTILE_DISC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTILE_DISC, 0);
    }
    public LEFT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_BRACKET, 0);
    }
    public RIGHT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_BRACKET, 0);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_primaryExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPrimaryExpression) {
             listener.enterPrimaryExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPrimaryExpression) {
             listener.exitPrimaryExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryExpression) {
            return visitor.visitPrimaryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralTypeContext extends antlr.ParserRuleContext {
    public _unsupportedType?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_BINARY_HEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY_HEX, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_literalType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterLiteralType) {
             listener.enterLiteralType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitLiteralType) {
             listener.exitLiteralType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLiteralType) {
            return visitor.visitLiteralType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public QUESTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.QUESTION, 0);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.COLON, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public literalType(): LiteralTypeContext | null {
        return this.getRuleContext(0, LiteralTypeContext);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public booleanValue(): BooleanValueContext | null {
        return this.getRuleContext(0, BooleanValueContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_constant;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterConstant) {
             listener.enterConstant(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitConstant) {
             listener.exitConstant(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstant) {
            return visitor.visitConstant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public NEQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NEQ, 0);
    }
    public NEQJ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NEQJ, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LT, 0);
    }
    public LTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LTE, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.GT, 0);
    }
    public GTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.GTE, 0);
    }
    public NSEQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NSEQ, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArithmeticOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PERCENT, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIV, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.TILDE, 0);
    }
    public AMPERSAND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.AMPERSAND, 0);
    }
    public PIPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PIPE, 0);
    }
    public CONCAT_PIPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.CONCAT_PIPE, 0);
    }
    public HAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.HAT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_arithmeticOperator;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterArithmeticOperator) {
             listener.enterArithmeticOperator(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitArithmeticOperator) {
             listener.exitArithmeticOperator(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticOperator) {
            return visitor.visitArithmeticOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_predicateOperator;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPredicateOperator) {
             listener.enterPredicateOperator(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPredicateOperator) {
             listener.exitPredicateOperator(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPredicateOperator) {
            return visitor.visitPredicateOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FALSE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_booleanValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterBooleanValue) {
             listener.enterBooleanValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitBooleanValue) {
             listener.exitBooleanValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanValue) {
            return visitor.visitBooleanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTERVAL(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0)!;
    }
    public errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext | null {
        return this.getRuleContext(0, ErrorCapturingMultiUnitsIntervalContext);
    }
    public errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext | null {
        return this.getRuleContext(0, ErrorCapturingUnitToUnitIntervalContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_interval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterInterval) {
             listener.enterInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitInterval) {
             listener.exitInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingMultiUnitsIntervalContext extends antlr.ParserRuleContext {
    public _body?: MultiUnitsIntervalContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext {
        return this.getRuleContext(0, MultiUnitsIntervalContext)!;
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext | null {
        return this.getRuleContext(0, UnitToUnitIntervalContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_errorCapturingMultiUnitsInterval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterErrorCapturingMultiUnitsInterval) {
             listener.enterErrorCapturingMultiUnitsInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitErrorCapturingMultiUnitsInterval) {
             listener.exitErrorCapturingMultiUnitsInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingMultiUnitsInterval) {
            return visitor.visitErrorCapturingMultiUnitsInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultiUnitsIntervalContext extends antlr.ParserRuleContext {
    public _unitInMultiUnits?: UnitInMultiUnitsContext;
    public _unit: UnitInMultiUnitsContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalValue(): IntervalValueContext[];
    public intervalValue(i: number): IntervalValueContext | null;
    public intervalValue(i?: number): IntervalValueContext[] | IntervalValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalValueContext);
        }

        return this.getRuleContext(i, IntervalValueContext);
    }
    public unitInMultiUnits(): UnitInMultiUnitsContext[];
    public unitInMultiUnits(i: number): UnitInMultiUnitsContext | null;
    public unitInMultiUnits(i?: number): UnitInMultiUnitsContext[] | UnitInMultiUnitsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitInMultiUnitsContext);
        }

        return this.getRuleContext(i, UnitInMultiUnitsContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multiUnitsInterval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultiUnitsInterval) {
             listener.enterMultiUnitsInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultiUnitsInterval) {
             listener.exitMultiUnitsInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultiUnitsInterval) {
            return visitor.visitMultiUnitsInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingUnitToUnitIntervalContext extends antlr.ParserRuleContext {
    public _body?: UnitToUnitIntervalContext;
    public _error1?: MultiUnitsIntervalContext;
    public _error2?: UnitToUnitIntervalContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext[];
    public unitToUnitInterval(i: number): UnitToUnitIntervalContext | null;
    public unitToUnitInterval(i?: number): UnitToUnitIntervalContext[] | UnitToUnitIntervalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitToUnitIntervalContext);
        }

        return this.getRuleContext(i, UnitToUnitIntervalContext);
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext | null {
        return this.getRuleContext(0, MultiUnitsIntervalContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_errorCapturingUnitToUnitInterval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterErrorCapturingUnitToUnitInterval) {
             listener.enterErrorCapturingUnitToUnitInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitErrorCapturingUnitToUnitInterval) {
             listener.exitErrorCapturingUnitToUnitInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingUnitToUnitInterval) {
            return visitor.visitErrorCapturingUnitToUnitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitToUnitIntervalContext extends antlr.ParserRuleContext {
    public _value?: IntervalValueContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unitInUnitToUnit(): UnitInUnitToUnitContext[];
    public unitInUnitToUnit(i: number): UnitInUnitToUnitContext | null;
    public unitInUnitToUnit(i?: number): UnitInUnitToUnitContext[] | UnitInUnitToUnitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitInUnitToUnitContext);
        }

        return this.getRuleContext(i, UnitInUnitToUnitContext);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TO, 0)!;
    }
    public intervalValue(): IntervalValueContext {
        return this.getRuleContext(0, IntervalValueContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unitToUnitInterval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnitToUnitInterval) {
             listener.enterUnitToUnitInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnitToUnitInterval) {
             listener.exitUnitToUnitInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnitToUnitInterval) {
            return visitor.visitUnitToUnitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DECIMAL_VALUE, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_intervalValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIntervalValue) {
             listener.enterIntervalValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIntervalValue) {
             listener.exitIntervalValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalValue) {
            return visitor.visitIntervalValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitInMultiUnitsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECOND, 0);
    }
    public KW_NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECONDS, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECOND, 0);
    }
    public KW_MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECOND, 0);
    }
    public KW_MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECONDS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECONDS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTES, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOURS, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYS, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEKS, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTHS, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEARS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unitInMultiUnits;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnitInMultiUnits) {
             listener.enterUnitInMultiUnits(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnitInMultiUnits) {
             listener.exitUnitInMultiUnits(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnitInMultiUnits) {
            return visitor.visitUnitInMultiUnits(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitInUnitToUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unitInUnitToUnit;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnitInUnitToUnit) {
             listener.enterUnitInUnitToUnit(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnitInUnitToUnit) {
             listener.exitUnitInUnitToUnit(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnitInUnitToUnit) {
            return visitor.visitUnitInUnitToUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColPositionContext extends antlr.ParserRuleContext {
    public _position?: Token | null;
    public _afterCol?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AFTER, 0);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colPosition;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColPosition) {
             listener.enterColPosition(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColPosition) {
             listener.exitColPosition(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColPosition) {
            return visitor.visitColPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeContext extends antlr.ParserRuleContext {
    public _unsupportedType?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOOLEAN, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TINYINT, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BYTE, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SMALLINT, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHORT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTEGER, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BIGINT, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LONG, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FLOAT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REAL, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DOUBLE, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRING, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHARACTER, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHAR, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARCHAR, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECIMAL, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEC, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NUMERIC, 0);
    }
    public KW_VOID(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VOID, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARRAY, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_type;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterType) {
             listener.enterType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitType) {
             listener.exitType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitType) {
            return visitor.visitType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeContext extends antlr.ParserRuleContext {
    public _complex?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LT, 0);
    }
    public dataType(): DataTypeContext[];
    public dataType(i: number): DataTypeContext | null;
    public dataType(i?: number): DataTypeContext[] | DataTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeContext);
        }

        return this.getRuleContext(i, DataTypeContext);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.GT, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARRAY, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public NEQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NEQ, 0);
    }
    public complexColTypeList(): ComplexColTypeListContext | null {
        return this.getRuleContext(0, ComplexColTypeListContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_MONTH(): antlr.TerminalNode[];
    public KW_MONTH(i: number): antlr.TerminalNode | null;
    public KW_MONTH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_MONTH);
    	} else {
    		return this.getToken(SparkSqlParser.KW_MONTH, i);
    	}
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TO, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode[];
    public KW_HOUR(i: number): antlr.TerminalNode | null;
    public KW_HOUR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_HOUR);
    	} else {
    		return this.getToken(SparkSqlParser.KW_HOUR, i);
    	}
    }
    public KW_MINUTE(): antlr.TerminalNode[];
    public KW_MINUTE(i: number): antlr.TerminalNode | null;
    public KW_MINUTE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_MINUTE);
    	} else {
    		return this.getToken(SparkSqlParser.KW_MINUTE, i);
    	}
    }
    public KW_SECOND(): antlr.TerminalNode[];
    public KW_SECOND(i: number): antlr.TerminalNode | null;
    public KW_SECOND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_SECOND);
    	} else {
    		return this.getToken(SparkSqlParser.KW_SECOND, i);
    	}
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(SparkSqlParser.INTEGER_VALUE, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_dataType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDataType) {
             listener.enterDataType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDataType) {
             listener.exitDataType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDataType) {
            return visitor.visitDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionSeqForAddContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedColTypeWithPositionForAdd(): QualifiedColTypeWithPositionForAddContext[];
    public qualifiedColTypeWithPositionForAdd(i: number): QualifiedColTypeWithPositionForAddContext | null;
    public qualifiedColTypeWithPositionForAdd(i?: number): QualifiedColTypeWithPositionForAddContext[] | QualifiedColTypeWithPositionForAddContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedColTypeWithPositionForAddContext);
        }

        return this.getRuleContext(i, QualifiedColTypeWithPositionForAddContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedColTypeWithPositionSeqForAdd;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionSeqForAdd) {
             listener.enterQualifiedColTypeWithPositionSeqForAdd(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionSeqForAdd) {
             listener.exitQualifiedColTypeWithPositionSeqForAdd(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionSeqForAdd) {
            return visitor.visitQualifiedColTypeWithPositionSeqForAdd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionForAddContext extends antlr.ParserRuleContext {
    public _name?: ColumnNameCreateContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext[];
    public colDefinitionDescriptorWithPosition(i: number): ColDefinitionDescriptorWithPositionContext | null;
    public colDefinitionDescriptorWithPosition(i?: number): ColDefinitionDescriptorWithPositionContext[] | ColDefinitionDescriptorWithPositionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColDefinitionDescriptorWithPositionContext);
        }

        return this.getRuleContext(i, ColDefinitionDescriptorWithPositionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedColTypeWithPositionForAdd;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionForAdd) {
             listener.enterQualifiedColTypeWithPositionForAdd(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionForAdd) {
             listener.exitQualifiedColTypeWithPositionForAdd(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionForAdd) {
            return visitor.visitQualifiedColTypeWithPositionForAdd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionSeqForReplaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedColTypeWithPositionForReplace(): QualifiedColTypeWithPositionForReplaceContext[];
    public qualifiedColTypeWithPositionForReplace(i: number): QualifiedColTypeWithPositionForReplaceContext | null;
    public qualifiedColTypeWithPositionForReplace(i?: number): QualifiedColTypeWithPositionForReplaceContext[] | QualifiedColTypeWithPositionForReplaceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedColTypeWithPositionForReplaceContext);
        }

        return this.getRuleContext(i, QualifiedColTypeWithPositionForReplaceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedColTypeWithPositionSeqForReplace;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionSeqForReplace) {
             listener.enterQualifiedColTypeWithPositionSeqForReplace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionSeqForReplace) {
             listener.exitQualifiedColTypeWithPositionSeqForReplace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionSeqForReplace) {
            return visitor.visitQualifiedColTypeWithPositionSeqForReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionForReplaceContext extends antlr.ParserRuleContext {
    public _name?: ColumnNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext[];
    public colDefinitionDescriptorWithPosition(i: number): ColDefinitionDescriptorWithPositionContext | null;
    public colDefinitionDescriptorWithPosition(i?: number): ColDefinitionDescriptorWithPositionContext[] | ColDefinitionDescriptorWithPositionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColDefinitionDescriptorWithPositionContext);
        }

        return this.getRuleContext(i, ColDefinitionDescriptorWithPositionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedColTypeWithPositionForReplace;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionForReplace) {
             listener.enterQualifiedColTypeWithPositionForReplace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionForReplace) {
             listener.exitQualifiedColTypeWithPositionForReplace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionForReplace) {
            return visitor.visitQualifiedColTypeWithPositionForReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColDefinitionDescriptorWithPositionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public defaultExpression(): DefaultExpressionContext | null {
        return this.getRuleContext(0, DefaultExpressionContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public colPosition(): ColPositionContext | null {
        return this.getRuleContext(0, ColPositionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colDefinitionDescriptorWithPosition;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColDefinitionDescriptorWithPosition) {
             listener.enterColDefinitionDescriptorWithPosition(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColDefinitionDescriptorWithPosition) {
             listener.exitColDefinitionDescriptorWithPosition(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColDefinitionDescriptorWithPosition) {
            return visitor.visitColDefinitionDescriptorWithPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEFAULT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_defaultExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDefaultExpression) {
             listener.enterDefaultExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDefaultExpression) {
             listener.exitDefaultExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefaultExpression) {
            return visitor.visitDefaultExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDefaultExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_variableDefaultExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterVariableDefaultExpression) {
             listener.enterVariableDefaultExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitVariableDefaultExpression) {
             listener.exitVariableDefaultExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableDefaultExpression) {
            return visitor.visitVariableDefaultExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colType(): ColTypeContext[];
    public colType(i: number): ColTypeContext | null;
    public colType(i?: number): ColTypeContext[] | ColTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColTypeContext);
        }

        return this.getRuleContext(i, ColTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colTypeList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColTypeList) {
             listener.enterColTypeList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColTypeList) {
             listener.exitColTypeList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColTypeList) {
            return visitor.visitColTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColTypeContext extends antlr.ParserRuleContext {
    public _colName?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColType) {
             listener.enterColType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColType) {
             listener.exitColType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColType) {
            return visitor.visitColType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateOrReplaceTableColTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createOrReplaceTableColType(): CreateOrReplaceTableColTypeContext[];
    public createOrReplaceTableColType(i: number): CreateOrReplaceTableColTypeContext | null;
    public createOrReplaceTableColType(i?: number): CreateOrReplaceTableColTypeContext[] | CreateOrReplaceTableColTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateOrReplaceTableColTypeContext);
        }

        return this.getRuleContext(i, CreateOrReplaceTableColTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createOrReplaceTableColTypeList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateOrReplaceTableColTypeList) {
             listener.enterCreateOrReplaceTableColTypeList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateOrReplaceTableColTypeList) {
             listener.exitCreateOrReplaceTableColTypeList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateOrReplaceTableColTypeList) {
            return visitor.visitCreateOrReplaceTableColTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateOrReplaceTableColTypeContext extends antlr.ParserRuleContext {
    public _colName?: ColumnNameCreateContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public colDefinitionOption(): ColDefinitionOptionContext[];
    public colDefinitionOption(i: number): ColDefinitionOptionContext | null;
    public colDefinitionOption(i?: number): ColDefinitionOptionContext[] | ColDefinitionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColDefinitionOptionContext);
        }

        return this.getRuleContext(i, ColDefinitionOptionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createOrReplaceTableColType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateOrReplaceTableColType) {
             listener.enterCreateOrReplaceTableColType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateOrReplaceTableColType) {
             listener.exitCreateOrReplaceTableColType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateOrReplaceTableColType) {
            return visitor.visitCreateOrReplaceTableColType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColDefinitionOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public defaultExpression(): DefaultExpressionContext | null {
        return this.getRuleContext(0, DefaultExpressionContext);
    }
    public generationExpression(): GenerationExpressionContext | null {
        return this.getRuleContext(0, GenerationExpressionContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colDefinitionOption;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColDefinitionOption) {
             listener.enterColDefinitionOption(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColDefinitionOption) {
             listener.exitColDefinitionOption(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColDefinitionOption) {
            return visitor.visitColDefinitionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GenerationExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GENERATED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_GENERATED, 0)!;
    }
    public KW_ALWAYS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALWAYS, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_generationExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGenerationExpression) {
             listener.enterGenerationExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGenerationExpression) {
             listener.exitGenerationExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGenerationExpression) {
            return visitor.visitGenerationExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComplexColTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public complexColType(): ComplexColTypeContext[];
    public complexColType(i: number): ComplexColTypeContext | null;
    public complexColType(i?: number): ComplexColTypeContext[] | ComplexColTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ComplexColTypeContext);
        }

        return this.getRuleContext(i, ComplexColTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_complexColTypeList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterComplexColTypeList) {
             listener.enterComplexColTypeList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitComplexColTypeList) {
             listener.exitComplexColTypeList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComplexColTypeList) {
            return visitor.visitComplexColTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComplexColTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.COLON, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_complexColType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterComplexColType) {
             listener.enterComplexColType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitComplexColType) {
             listener.exitComplexColType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComplexColType) {
            return visitor.visitComplexColType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClauseContext extends antlr.ParserRuleContext {
    public _condition?: ExpressionContext;
    public _result?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHEN, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_THEN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_whenClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWhenClause) {
             listener.enterWhenClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWhenClause) {
             listener.exitWhenClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WINDOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WINDOW, 0)!;
    }
    public namedWindow(): NamedWindowContext[];
    public namedWindow(i: number): NamedWindowContext | null;
    public namedWindow(i?: number): NamedWindowContext[] | NamedWindowContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedWindowContext);
        }

        return this.getRuleContext(i, NamedWindowContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_windowClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWindowClause) {
             listener.enterWindowClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWindowClause) {
             listener.exitWindowClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZorderClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ZORDER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ZORDER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BY, 0)!;
    }
    public columnNameSeq(): ColumnNameSeqContext {
        return this.getRuleContext(0, ColumnNameSeqContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_zorderClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterZorderClause) {
             listener.enterZorderClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitZorderClause) {
             listener.exitZorderClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitZorderClause) {
            return visitor.visitZorderClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedWindowContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public windowSpec(): WindowSpecContext {
        return this.getRuleContext(0, WindowSpecContext)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedWindow;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedWindow) {
             listener.enterNamedWindow(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedWindow) {
             listener.exitNamedWindow(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedWindow) {
            return visitor.visitNamedWindow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTER, 0);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public windowFrame(): WindowFrameContext | null {
        return this.getRuleContext(0, WindowFrameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_windowSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWindowSpec) {
             listener.enterWindowSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWindowSpec) {
             listener.exitWindowSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowSpec) {
            return visitor.visitWindowSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameContext extends antlr.ParserRuleContext {
    public _frameType?: Token | null;
    public _start_?: FrameBoundContext;
    public _end?: FrameBoundContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RANGE, 0);
    }
    public frameBound(): FrameBoundContext[];
    public frameBound(i: number): FrameBoundContext | null;
    public frameBound(i?: number): FrameBoundContext[] | FrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameBoundContext);
        }

        return this.getRuleContext(i, FrameBoundContext);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROWS, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BETWEEN, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_windowFrame;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWindowFrame) {
             listener.enterWindowFrame(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWindowFrame) {
             listener.exitWindowFrame(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrame) {
            return visitor.visitWindowFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBoundContext extends antlr.ParserRuleContext {
    public _boundType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRECEDING, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOLLOWING, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROW, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_frameBound;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFrameBound) {
             listener.enterFrameBound(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFrameBound) {
             listener.exitFrameBound(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrameBound) {
            return visitor.visitFrameBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedNameList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedNameList) {
             listener.enterQualifiedNameList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedNameList) {
             listener.exitQualifiedNameList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedNameList) {
            return visitor.visitQualifiedNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILTER, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEFT, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RIGHT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionName) {
             listener.enterFunctionName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionName) {
             listener.exitFunctionName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionNameCreate) {
             listener.enterFunctionNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionNameCreate) {
             listener.exitFunctionNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameCreate) {
            return visitor.visitFunctionNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedName) {
             listener.enterQualifiedName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedName) {
             listener.exitQualifiedName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierExtraContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_errorCapturingIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterErrorCapturingIdentifier) {
             listener.enterErrorCapturingIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitErrorCapturingIdentifier) {
             listener.exitErrorCapturingIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingIdentifier) {
            return visitor.visitErrorCapturingIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingIdentifierExtraContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.MINUS);
    	} else {
    		return this.getToken(SparkSqlParser.MINUS, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_errorCapturingIdentifierExtra;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterErrorCapturingIdentifierExtra) {
             listener.enterErrorCapturingIdentifierExtra(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitErrorCapturingIdentifierExtra) {
             listener.exitErrorCapturingIdentifierExtra(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingIdentifierExtra) {
            return visitor.visitErrorCapturingIdentifierExtra(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public strictIdentifier(): StrictIdentifierContext | null {
        return this.getRuleContext(0, StrictIdentifierContext);
    }
    public strictNonReserved(): StrictNonReservedContext | null {
        return this.getRuleContext(0, StrictNonReservedContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifier) {
             listener.enterIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifier) {
             listener.exitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StrictIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.IDENTIFIER, 0);
    }
    public quotedIdentifier(): QuotedIdentifierContext | null {
        return this.getRuleContext(0, QuotedIdentifierContext);
    }
    public ansiNonReserved(): AnsiNonReservedContext | null {
        return this.getRuleContext(0, AnsiNonReservedContext);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_strictIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStrictIdentifier) {
             listener.enterStrictIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStrictIdentifier) {
             listener.exitStrictIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStrictIdentifier) {
            return visitor.visitStrictIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotedIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BACKQUOTED_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.BACKQUOTED_IDENTIFIER, 0);
    }
    public DOUBLEQUOTED_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOUBLEQUOTED_STRING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_quotedIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQuotedIdentifier) {
             listener.enterQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQuotedIdentifier) {
             listener.exitQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuotedIdentifier) {
            return visitor.visitQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BackQuotedIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BACKQUOTED_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.BACKQUOTED_IDENTIFIER, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_backQuotedIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterBackQuotedIdentifier) {
             listener.enterBackQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitBackQuotedIdentifier) {
             listener.exitBackQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBackQuotedIdentifier) {
            return visitor.visitBackQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPONENT_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EXPONENT_VALUE, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DECIMAL_VALUE, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public BIGINT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.BIGINT_LITERAL, 0);
    }
    public SMALLINT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.SMALLINT_LITERAL, 0);
    }
    public TINYINT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.TINYINT_LITERAL, 0);
    }
    public DOUBLE_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOUBLE_LITERAL, 0);
    }
    public FLOAT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.FLOAT_LITERAL, 0);
    }
    public BIGDECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.BIGDECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_number;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNumber) {
             listener.enterNumber(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNumber) {
             listener.exitNumber(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNumber) {
            return visitor.visitNumber(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterColumnActionContext extends antlr.ParserRuleContext {
    public _setOrDrop?: Token | null;
    public _dropDefault?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TYPE, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public colPosition(): ColPositionContext | null {
        return this.getRuleContext(0, ColPositionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public defaultExpression(): DefaultExpressionContext | null {
        return this.getRuleContext(0, DefaultExpressionContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_alterColumnAction;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterColumnAction) {
             listener.enterAlterColumnAction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterColumnAction) {
             listener.exitAlterColumnAction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterColumnAction) {
            return visitor.visitAlterColumnAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringLitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.STRING_LITERAL, 0);
    }
    public DOUBLEQUOTED_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOUBLEQUOTED_STRING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_stringLit;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStringLit) {
             listener.enterStringLit(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStringLit) {
             listener.exitStringLit(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStringLit) {
            return visitor.visitStringLit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_comment;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterComment) {
             listener.enterComment(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitComment) {
             listener.exitComment(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComment) {
            return visitor.visitComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VersionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_version;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterVersion) {
             listener.enterVersion(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitVersion) {
             listener.exitVersion(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVersion) {
            return visitor.visitVersion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnsiNonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ADD, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AFTER, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALTER, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALWAYS, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANALYZE, 0);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANTI, 0);
    }
    public KW_ANY_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY_VALUE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARCHIVE, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARRAY, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ASC, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AT, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BETWEEN, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BIGINT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY, 0);
    }
    public KW_BINARY_HEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY_HEX, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOOLEAN, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKET, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKETS, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BYTE, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CACHE, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASCADE, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOG, 0);
    }
    public KW_CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOGS, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHANGE, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHAR, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHARACTER, 0);
    }
    public KW_CLEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLEAR, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTER, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTERED, 0);
    }
    public KW_CODEGEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CODEGEN, 0);
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLLECTION, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMIT, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPUTE, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CONCATENATE, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COST, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CUBE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATA, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASES, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE, 0);
    }
    public KW_DATEADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEADD, 0);
    }
    public KW_DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_ADD, 0);
    }
    public KW_DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEDIFF, 0);
    }
    public KW_DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_DIFF, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYS, 0);
    }
    public KW_DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYOFYEAR, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECIMAL, 0);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECLARE, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFINED, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELIMITED, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_DFS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DFS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORIES, 0);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISABLE, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIV, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DOUBLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ENABLE, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPED, 0);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCHANGE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCLUDE, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPORT, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTERNAL, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTRACT, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIELDS, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILEFORMAT, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FLOAT, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOLLOWING, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMAT, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMATTED, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GENERATED, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GLOBAL, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUPING, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOURS, 0);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IF, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IGNORE, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IMPORT, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INCLUDE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEXES, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPATH, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INSERT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTEGER, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ITEMS, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_KEYS, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAST, 0);
    }
    public KW_LAZY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAZY, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ILIKE, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIMIT, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LINES, 0);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIST, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOAD, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCK, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCKS, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOGICAL, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LONG, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MACRO, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_MATCHED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MERGE, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECOND, 0);
    }
    public KW_MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECOND, 0);
    }
    public KW_MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECONDS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTES, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTHS, 0);
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MSCK, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAME, 0);
    }
    public KW_NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACE, 0);
    }
    public KW_NAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACES, 0);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECOND, 0);
    }
    public KW_NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECONDS, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NO, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NUMERIC, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OF, 0);
    }
    public KW_OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIMIZE, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTION, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVER, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERLAY, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERWRITE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONED, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0);
    }
    public KW_PERCENTLIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTLIT, 0);
    }
    public KW_PIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PIVOT, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PLACING, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_POSITION, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRECEDING, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRINCIPALS, 0);
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PROPERTIES, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PURGE, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUARTER, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUERY, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RANGE, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REAL, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDREADER, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDWRITER, 0);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECOVER, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REDUCE, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RENAME, 0);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPAIR, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPEATABLE, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESET, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESPECT, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESTRICT, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REVOKE, 0);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REWRITE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REGEXP, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLE, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLES, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLUP, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROWS, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMAS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECONDS, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEMI, 0);
    }
    public KW_SEPARATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEPARATED, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUS, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SETS, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHORT, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHOW, 0);
    }
    public KW_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SINGLE, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SKEWED, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SMALLINT, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORTED, 0);
    }
    public KW_SOURCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SOURCE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_START, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STATISTICS, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STORED, 0);
    }
    public KW_STRATIFY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRATIFY, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRING, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public KW_SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTR, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTRING, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYNC, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLES, 0);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLESAMPLE, 0);
    }
    public KW_TARGET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TARGET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TERMINATED, 0);
    }
    public KW_TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMEDIFF, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPADD, 0);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TINYINT, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TOUCH, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSFORM, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRIM, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUE, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUNCATE, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRY_CAST, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TYPE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_UNCACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNCACHE, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNLOCK, 0);
    }
    public KW_UNPIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNPIVOT, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNSET, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USE, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VALUES, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARCHAR, 0);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VAR, 0);
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEWS, 0);
    }
    public KW_VOID(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VOID, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEKS, 0);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WINDOW, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEARS, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZONE, 0);
    }
    public KW_ZORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZORDER, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_ansiNonReserved;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAnsiNonReserved) {
             listener.enterAnsiNonReserved(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAnsiNonReserved) {
             listener.exitAnsiNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnsiNonReserved) {
            return visitor.visitAnsiNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StrictNonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANTI, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CROSS, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCEPT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FULL, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INNER, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERSECT, 0);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_JOIN, 0);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LATERAL, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEFT, 0);
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NATURAL, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ON, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RIGHT, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEMI, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUS, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNION, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_strictNonReserved;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStrictNonReserved) {
             listener.enterStrictNonReserved(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStrictNonReserved) {
             listener.exitStrictNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStrictNonReserved) {
            return visitor.visitStrictNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ADD, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AFTER, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALTER, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALWAYS, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANALYZE, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY, 0);
    }
    public KW_ANY_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY_VALUE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARCHIVE, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARRAY, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ASC, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AT, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BETWEEN, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BIGINT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY, 0);
    }
    public KW_BINARY_HEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY_HEX, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOOLEAN, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOTH, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKET, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKETS, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BYTE, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CACHE, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASCADE, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASE, 0);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CAST, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOG, 0);
    }
    public KW_CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOGS, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHANGE, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHAR, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHARACTER, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHECK, 0);
    }
    public KW_CLEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLEAR, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTER, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTERED, 0);
    }
    public KW_CODEGEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CODEGEN, 0);
    }
    public KW_COLLATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLLATE, 0);
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLLECTION, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMIT, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPUTE, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CONCATENATE, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COST, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CREATE, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CUBE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_TIME, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATA, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASES, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE, 0);
    }
    public KW_DATEADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEADD, 0);
    }
    public KW_DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_ADD, 0);
    }
    public KW_DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEDIFF, 0);
    }
    public KW_DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_DIFF, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYS, 0);
    }
    public KW_DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYOFYEAR, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECIMAL, 0);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECLARE, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFINED, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELIMITED, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_DFS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DFS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORIES, 0);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISABLE, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTINCT, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIV, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DOUBLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ELSE, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ENABLE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_END, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPE, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPED, 0);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCHANGE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCLUDE, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPORT, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTERNAL, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTRACT, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FALSE, 0);
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FETCH, 0);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILTER, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIELDS, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILEFORMAT, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FLOAT, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOLLOWING, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOR, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOREIGN, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMAT, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMATTED, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GENERATED, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GLOBAL, 0);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GRANT, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUP, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUPING, 0);
    }
    public KW_HAVING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HAVING, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOURS, 0);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IF, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IGNORE, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IMPORT, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INCLUDE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEXES, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPATH, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INSERT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTEGER, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTO, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IS, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ITEMS, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_KEYS, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAST, 0);
    }
    public KW_LAZY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAZY, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEADING, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LONG, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ILIKE, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIMIT, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LINES, 0);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIST, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOAD, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCK, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCKS, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOGICAL, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MACRO, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_MATCHED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MERGE, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECOND, 0);
    }
    public KW_MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECOND, 0);
    }
    public KW_MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECONDS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTES, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTHS, 0);
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MSCK, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAME, 0);
    }
    public KW_NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACE, 0);
    }
    public KW_NAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACES, 0);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECOND, 0);
    }
    public KW_NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECONDS, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NO, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NUMERIC, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OF, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OFFSET, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ONLY, 0);
    }
    public KW_OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIMIZE, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTION, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUT, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTER, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVER, 0);
    }
    public KW_OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERLAPS, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERLAY, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERWRITE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONED, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0);
    }
    public KW_PERCENTILE_CONT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTILE_CONT, 0);
    }
    public KW_PERCENTILE_DISC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTILE_DISC, 0);
    }
    public KW_PERCENTLIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTLIT, 0);
    }
    public KW_PIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PIVOT, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PLACING, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_POSITION, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRECEDING, 0);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRIMARY, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRINCIPALS, 0);
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PROPERTIES, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PURGE, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUARTER, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUERY, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RANGE, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REAL, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDREADER, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDWRITER, 0);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECOVER, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REDUCE, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REFERENCES, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RENAME, 0);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPAIR, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPEATABLE, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESET, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESPECT, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESTRICT, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REVOKE, 0);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REWRITE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REGEXP, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLE, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLES, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLUP, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROWS, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMAS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECONDS, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SELECT, 0);
    }
    public KW_SEPARATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEPARATED, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SESSION_USER, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SETS, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHORT, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHOW, 0);
    }
    public KW_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SINGLE, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SKEWED, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SMALLINT, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SOME, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORTED, 0);
    }
    public KW_SOURCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SOURCE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_START, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STATISTICS, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STORED, 0);
    }
    public KW_STRATIFY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRATIFY, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRING, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public KW_SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTR, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTRING, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYNC, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLES, 0);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLESAMPLE, 0);
    }
    public KW_TARGET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TARGET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TERMINATED, 0);
    }
    public KW_THEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_THEN, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIME, 0);
    }
    public KW_TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMEDIFF, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPADD, 0);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TINYINT, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TO, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TOUCH, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRAILING, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSFORM, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRIM, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUE, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUNCATE, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRY_CAST, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TYPE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_UNCACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNCACHE, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNIQUE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNKNOWN, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNLOCK, 0);
    }
    public KW_UNPIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNPIVOT, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNSET, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USER, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VALUES, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARCHAR, 0);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VAR, 0);
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEWS, 0);
    }
    public KW_VOID(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VOID, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEKS, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WHEN, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WHERE, 0);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WINDOW, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITHIN, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEARS, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZONE, 0);
    }
    public KW_ZORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZORDER, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_nonReserved;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNonReserved) {
             listener.enterNonReserved(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNonReserved) {
             listener.exitNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
