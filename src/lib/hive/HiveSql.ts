// Generated from /Users/ziv/github.com/dt-sql-parser/src/grammar/hive/HiveSql.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { HiveSqlListener } from "./HiveSqlListener";
import { HiveSqlVisitor } from "./HiveSqlVisitor";


export class HiveSql extends Parser {
	public static readonly T_ACTION = 1;
	public static readonly T_ADD2 = 2;
	public static readonly T_ALL = 3;
	public static readonly T_ALLOCATE = 4;
	public static readonly T_ALTER = 5;
	public static readonly T_AND = 6;
	public static readonly T_ANSI_NULLS = 7;
	public static readonly T_ANSI_PADDING = 8;
	public static readonly T_AS = 9;
	public static readonly T_ASC = 10;
	public static readonly T_ASSOCIATE = 11;
	public static readonly T_AT = 12;
	public static readonly T_AUTO_INCREMENT = 13;
	public static readonly T_AVG = 14;
	public static readonly T_BATCHSIZE = 15;
	public static readonly T_BEGIN = 16;
	public static readonly T_BETWEEN = 17;
	public static readonly T_BIGINT = 18;
	public static readonly T_BINARY_DOUBLE = 19;
	public static readonly T_BINARY_FLOAT = 20;
	public static readonly T_BINARY_INTEGER = 21;
	public static readonly T_BIT = 22;
	public static readonly T_BODY = 23;
	public static readonly T_BREAK = 24;
	public static readonly T_BY = 25;
	public static readonly T_BYTE = 26;
	public static readonly T_CALL = 27;
	public static readonly T_CALLER = 28;
	public static readonly T_CASCADE = 29;
	public static readonly T_CASE = 30;
	public static readonly T_CASESPECIFIC = 31;
	public static readonly T_CAST = 32;
	public static readonly T_CHAR = 33;
	public static readonly T_CHARACTER = 34;
	public static readonly T_CHARSET = 35;
	public static readonly T_CLIENT = 36;
	public static readonly T_CLOSE = 37;
	public static readonly T_CLUSTERED = 38;
	public static readonly T_CMP = 39;
	public static readonly T_COLLECT = 40;
	public static readonly T_COLLECTION = 41;
	public static readonly T_COLUMN = 42;
	public static readonly T_COMMENT = 43;
	public static readonly T_CONSTANT = 44;
	public static readonly T_COMMIT = 45;
	public static readonly T_COMPRESS = 46;
	public static readonly T_CONCAT = 47;
	public static readonly T_CONDITION = 48;
	public static readonly T_CONSTRAINT = 49;
	public static readonly T_CONTINUE = 50;
	public static readonly T_COPY = 51;
	public static readonly T_COUNT = 52;
	public static readonly T_COUNT_BIG = 53;
	public static readonly T_CREATE = 54;
	public static readonly T_CREATION = 55;
	public static readonly T_CREATOR = 56;
	public static readonly T_CS = 57;
	public static readonly T_CURRENT = 58;
	public static readonly T_CURRENT_SCHEMA = 59;
	public static readonly T_CURSOR = 60;
	public static readonly T_DATABASE = 61;
	public static readonly T_DATA = 62;
	public static readonly T_DATE = 63;
	public static readonly T_DATETIME = 64;
	public static readonly T_DAY = 65;
	public static readonly T_DAYS = 66;
	public static readonly T_DEC = 67;
	public static readonly T_DECIMAL = 68;
	public static readonly T_DECLARE = 69;
	public static readonly T_DEFAULT = 70;
	public static readonly T_DEFERRED = 71;
	public static readonly T_DEFINED = 72;
	public static readonly T_DEFINER = 73;
	public static readonly T_DEFINITION = 74;
	public static readonly T_DELETE = 75;
	public static readonly T_DELIMITED = 76;
	public static readonly T_DELIMITER = 77;
	public static readonly T_DESC = 78;
	public static readonly T_DESCRIBE = 79;
	public static readonly T_DIAGNOSTICS = 80;
	public static readonly T_DIR = 81;
	public static readonly T_DIRECTORY = 82;
	public static readonly T_DISTINCT = 83;
	public static readonly T_DISTRIBUTE = 84;
	public static readonly T_DO = 85;
	public static readonly T_DOUBLE = 86;
	public static readonly T_DROP = 87;
	public static readonly T_DYNAMIC = 88;
	public static readonly T_ELSE = 89;
	public static readonly T_ELSEIF = 90;
	public static readonly T_ELSIF = 91;
	public static readonly T_ENABLE = 92;
	public static readonly T_END = 93;
	public static readonly T_ENGINE = 94;
	public static readonly T_ESCAPED = 95;
	public static readonly T_EXCEPT = 96;
	public static readonly T_EXEC = 97;
	public static readonly T_EXECUTE = 98;
	public static readonly T_EXCEPTION = 99;
	public static readonly T_EXCLUSIVE = 100;
	public static readonly T_EXISTS = 101;
	public static readonly T_EXIT = 102;
	public static readonly T_FALLBACK = 103;
	public static readonly T_FALSE = 104;
	public static readonly T_FETCH = 105;
	public static readonly T_FIELDS = 106;
	public static readonly T_FILE = 107;
	public static readonly T_FILES = 108;
	public static readonly T_FLOAT = 109;
	public static readonly T_FOR = 110;
	public static readonly T_FOREIGN = 111;
	public static readonly T_FORMAT = 112;
	public static readonly T_FOUND = 113;
	public static readonly T_FROM = 114;
	public static readonly T_FULL = 115;
	public static readonly T_FUNCTION = 116;
	public static readonly T_GET = 117;
	public static readonly T_GLOBAL = 118;
	public static readonly T_GO = 119;
	public static readonly T_GRANT = 120;
	public static readonly T_GROUP = 121;
	public static readonly T_HANDLER = 122;
	public static readonly T_HASH = 123;
	public static readonly T_HAVING = 124;
	public static readonly T_HDFS = 125;
	public static readonly T_HIVE = 126;
	public static readonly T_HOST = 127;
	public static readonly T_IDENTITY = 128;
	public static readonly T_IF = 129;
	public static readonly T_IGNORE = 130;
	public static readonly T_IMMEDIATE = 131;
	public static readonly T_IN = 132;
	public static readonly T_INCLUDE = 133;
	public static readonly T_INDEX = 134;
	public static readonly T_INITRANS = 135;
	public static readonly T_INNER = 136;
	public static readonly T_INOUT = 137;
	public static readonly T_INSERT = 138;
	public static readonly T_INT = 139;
	public static readonly T_INT2 = 140;
	public static readonly T_INT4 = 141;
	public static readonly T_INT8 = 142;
	public static readonly T_INTEGER = 143;
	public static readonly T_INTERSECT = 144;
	public static readonly T_INTERVAL = 145;
	public static readonly T_INTO = 146;
	public static readonly T_INVOKER = 147;
	public static readonly T_IS = 148;
	public static readonly T_ISOPEN = 149;
	public static readonly T_ITEMS = 150;
	public static readonly T_JOIN = 151;
	public static readonly T_KEEP = 152;
	public static readonly T_KEY = 153;
	public static readonly T_KEYS = 154;
	public static readonly T_LANGUAGE = 155;
	public static readonly T_LEAVE = 156;
	public static readonly T_LEFT = 157;
	public static readonly T_LIKE = 158;
	public static readonly T_LIMIT = 159;
	public static readonly T_LINES = 160;
	public static readonly T_LOCAL = 161;
	public static readonly T_LOCATION = 162;
	public static readonly T_LOCATOR = 163;
	public static readonly T_LOCATORS = 164;
	public static readonly T_LOCKS = 165;
	public static readonly T_LOG = 166;
	public static readonly T_LOGGED = 167;
	public static readonly T_LOGGING = 168;
	public static readonly T_LOOP = 169;
	public static readonly T_MAP = 170;
	public static readonly T_MATCHED = 171;
	public static readonly T_MAX = 172;
	public static readonly T_MAXTRANS = 173;
	public static readonly T_MERGE = 174;
	public static readonly T_MESSAGE_TEXT = 175;
	public static readonly T_MICROSECOND = 176;
	public static readonly T_MICROSECONDS = 177;
	public static readonly T_MIN = 178;
	public static readonly T_MULTISET = 179;
	public static readonly T_NCHAR = 180;
	public static readonly T_NEW = 181;
	public static readonly T_NVARCHAR = 182;
	public static readonly T_NO = 183;
	public static readonly T_NOCOUNT = 184;
	public static readonly T_NOCOMPRESS = 185;
	public static readonly T_NOLOGGING = 186;
	public static readonly T_NONE = 187;
	public static readonly T_NOT = 188;
	public static readonly T_NOTFOUND = 189;
	public static readonly T_NULL = 190;
	public static readonly T_NUMERIC = 191;
	public static readonly T_NUMBER = 192;
	public static readonly T_OBJECT = 193;
	public static readonly T_OFF = 194;
	public static readonly T_ON = 195;
	public static readonly T_ONLY = 196;
	public static readonly T_OPEN = 197;
	public static readonly T_OR = 198;
	public static readonly T_ORDER = 199;
	public static readonly T_OUT = 200;
	public static readonly T_OUTER = 201;
	public static readonly T_OVER = 202;
	public static readonly T_OVERWRITE = 203;
	public static readonly T_OWNER = 204;
	public static readonly T_PACKAGE = 205;
	public static readonly T_PARTITION = 206;
	public static readonly T_PCTFREE = 207;
	public static readonly T_PCTUSED = 208;
	public static readonly T_PLS_INTEGER = 209;
	public static readonly T_PRECISION = 210;
	public static readonly T_PRESERVE = 211;
	public static readonly T_PRIMARY = 212;
	public static readonly T_PRINT = 213;
	public static readonly T_PROC = 214;
	public static readonly T_PROCEDURE = 215;
	public static readonly T_QUALIFY = 216;
	public static readonly T_QUERY_BAND = 217;
	public static readonly T_QUIT = 218;
	public static readonly T_QUOTED_IDENTIFIER = 219;
	public static readonly T_RAISE = 220;
	public static readonly T_REAL = 221;
	public static readonly T_REFERENCES = 222;
	public static readonly T_REGEXP = 223;
	public static readonly T_REPLACE = 224;
	public static readonly T_RESIGNAL = 225;
	public static readonly T_RESTRICT = 226;
	public static readonly T_RESULT = 227;
	public static readonly T_RESULT_SET_LOCATOR = 228;
	public static readonly T_RETURN = 229;
	public static readonly T_RETURNS = 230;
	public static readonly T_REVERSE = 231;
	public static readonly T_RIGHT = 232;
	public static readonly T_RLIKE = 233;
	public static readonly T_ROLE = 234;
	public static readonly T_ROLLBACK = 235;
	public static readonly T_ROW = 236;
	public static readonly T_ROWS = 237;
	public static readonly T_ROWTYPE = 238;
	public static readonly T_ROW_COUNT = 239;
	public static readonly T_RR = 240;
	public static readonly T_RS = 241;
	public static readonly T_PWD = 242;
	public static readonly T_TRIM = 243;
	public static readonly T_SCHEMA = 244;
	public static readonly T_SECOND = 245;
	public static readonly T_SECONDS = 246;
	public static readonly T_SECURITY = 247;
	public static readonly T_SEGMENT = 248;
	public static readonly T_SEL = 249;
	public static readonly T_SELECT = 250;
	public static readonly T_SET = 251;
	public static readonly T_SESSION = 252;
	public static readonly T_SESSIONS = 253;
	public static readonly T_SETS = 254;
	public static readonly T_SHARE = 255;
	public static readonly T_SIGNAL = 256;
	public static readonly T_SIMPLE_DOUBLE = 257;
	public static readonly T_SIMPLE_FLOAT = 258;
	public static readonly T_SIMPLE_INTEGER = 259;
	public static readonly T_SMALLDATETIME = 260;
	public static readonly T_SMALLINT = 261;
	public static readonly T_SQL = 262;
	public static readonly T_SQLEXCEPTION = 263;
	public static readonly T_SQLINSERT = 264;
	public static readonly T_SQLSTATE = 265;
	public static readonly T_SQLWARNING = 266;
	public static readonly T_STATS = 267;
	public static readonly T_STATISTICS = 268;
	public static readonly T_STEP = 269;
	public static readonly T_STORAGE = 270;
	public static readonly T_STORED = 271;
	public static readonly T_STRING = 272;
	public static readonly T_SUBDIR = 273;
	public static readonly T_SUBSTRING = 274;
	public static readonly T_SUM = 275;
	public static readonly T_SUMMARY = 276;
	public static readonly T_SYS_REFCURSOR = 277;
	public static readonly T_TABLE = 278;
	public static readonly T_TABLESPACE = 279;
	public static readonly T_TEMPORARY = 280;
	public static readonly T_TERMINATED = 281;
	public static readonly T_TEXTIMAGE_ON = 282;
	public static readonly T_THEN = 283;
	public static readonly T_TIMESTAMP = 284;
	public static readonly T_TINYINT = 285;
	public static readonly T_TITLE = 286;
	public static readonly T_TO = 287;
	public static readonly T_TOP = 288;
	public static readonly T_TRANSACTION = 289;
	public static readonly T_TRUE = 290;
	public static readonly T_TRUNCATE = 291;
	public static readonly T_TYPE = 292;
	public static readonly T_UNION = 293;
	public static readonly T_UNIQUE = 294;
	public static readonly T_UPDATE = 295;
	public static readonly T_UR = 296;
	public static readonly T_USE = 297;
	public static readonly T_USING = 298;
	public static readonly T_VALUE = 299;
	public static readonly T_VALUES = 300;
	public static readonly T_VAR = 301;
	public static readonly T_VARCHAR = 302;
	public static readonly T_VARCHAR2 = 303;
	public static readonly T_VARYING = 304;
	public static readonly T_VOLATILE = 305;
	public static readonly T_WHEN = 306;
	public static readonly T_WHERE = 307;
	public static readonly T_WHILE = 308;
	public static readonly T_WITH = 309;
	public static readonly T_WITHOUT = 310;
	public static readonly T_WORK = 311;
	public static readonly T_XACT_ABORT = 312;
	public static readonly T_XML = 313;
	public static readonly T_YES = 314;
	public static readonly T_ACTIVITY_COUNT = 315;
	public static readonly T_CUME_DIST = 316;
	public static readonly T_CURRENT_DATE = 317;
	public static readonly T_CURRENT_TIMESTAMP = 318;
	public static readonly T_CURRENT_USER = 319;
	public static readonly T_DENSE_RANK = 320;
	public static readonly T_FIRST_VALUE = 321;
	public static readonly T_LAG = 322;
	public static readonly T_LAST_VALUE = 323;
	public static readonly T_LEAD = 324;
	public static readonly T_MAX_PART_STRING = 325;
	public static readonly T_MIN_PART_STRING = 326;
	public static readonly T_MAX_PART_INT = 327;
	public static readonly T_MIN_PART_INT = 328;
	public static readonly T_MAX_PART_DATE = 329;
	public static readonly T_MIN_PART_DATE = 330;
	public static readonly T_PART_COUNT = 331;
	public static readonly T_PART_LOC = 332;
	public static readonly T_RANK = 333;
	public static readonly T_ROW_NUMBER = 334;
	public static readonly T_STDEV = 335;
	public static readonly T_SYSDATE = 336;
	public static readonly T_VARIANCE = 337;
	public static readonly T_USER = 338;
	public static readonly T_ADD = 339;
	public static readonly T_COLON = 340;
	public static readonly T_COMMA = 341;
	public static readonly T_PIPE = 342;
	public static readonly T_DIV = 343;
	public static readonly T_DOT = 344;
	public static readonly T_DOT2 = 345;
	public static readonly T_EQUAL = 346;
	public static readonly T_EQUAL2 = 347;
	public static readonly T_SHARP = 348;
	public static readonly T_NOTE = 349;
	public static readonly T_NOTEQUAL = 350;
	public static readonly T_NOTEQUAL2 = 351;
	public static readonly T_GREATER = 352;
	public static readonly T_GREATEREQUAL = 353;
	public static readonly T_LESS = 354;
	public static readonly T_LESSEQUAL = 355;
	public static readonly T_MUL = 356;
	public static readonly T_PRECENT = 357;
	public static readonly T_CALLS = 358;
	public static readonly T_OPEN_B = 359;
	public static readonly T_OPEN_P = 360;
	public static readonly T_OPEN_SB = 361;
	public static readonly T_CLOSE_B = 362;
	public static readonly T_CLOSE_P = 363;
	public static readonly T_CLOSE_SB = 364;
	public static readonly T_SEMICOLON = 365;
	public static readonly T_SUB = 366;
	public static readonly L_ID = 367;
	public static readonly L_S_STRING = 368;
	public static readonly L_D_STRING = 369;
	public static readonly L_INT = 370;
	public static readonly L_DEC = 371;
	public static readonly L_WS = 372;
	public static readonly L_M_COMMENT = 373;
	public static readonly L_S_COMMENT = 374;
	public static readonly L_FILE = 375;
	public static readonly L_LABEL = 376;
	public static readonly RULE_program = 0;
	public static readonly RULE_block = 1;
	public static readonly RULE_begin_end_block = 2;
	public static readonly RULE_single_block_stmt = 3;
	public static readonly RULE_block_end = 4;
	public static readonly RULE_proc_block = 5;
	public static readonly RULE_stmt = 6;
	public static readonly RULE_semicolon_stmt = 7;
	public static readonly RULE_exception_block = 8;
	public static readonly RULE_exception_block_item = 9;
	public static readonly RULE_null_stmt = 10;
	public static readonly RULE_expr_stmt = 11;
	public static readonly RULE_assignment_stmt = 12;
	public static readonly RULE_assignment_stmt_item = 13;
	public static readonly RULE_assignment_stmt_single_item = 14;
	public static readonly RULE_assignment_stmt_multiple_item = 15;
	public static readonly RULE_assignment_stmt_select_item = 16;
	public static readonly RULE_allocate_cursor_stmt = 17;
	public static readonly RULE_associate_locator_stmt = 18;
	public static readonly RULE_begin_transaction_stmt = 19;
	public static readonly RULE_break_stmt = 20;
	public static readonly RULE_call_stmt = 21;
	public static readonly RULE_declare_stmt = 22;
	public static readonly RULE_declare_block = 23;
	public static readonly RULE_declare_block_inplace = 24;
	public static readonly RULE_declare_stmt_item = 25;
	public static readonly RULE_declare_var_item = 26;
	public static readonly RULE_declare_condition_item = 27;
	public static readonly RULE_declare_cursor_item = 28;
	public static readonly RULE_cursor_with_return = 29;
	public static readonly RULE_cursor_without_return = 30;
	public static readonly RULE_declare_handler_item = 31;
	public static readonly RULE_declare_temporary_table_item = 32;
	public static readonly RULE_create_table_stmt = 33;
	public static readonly RULE_create_local_temp_table_stmt = 34;
	public static readonly RULE_create_table_definition = 35;
	public static readonly RULE_create_table_columns = 36;
	public static readonly RULE_create_table_columns_item = 37;
	public static readonly RULE_column_name = 38;
	public static readonly RULE_create_table_column_inline_cons = 39;
	public static readonly RULE_create_table_column_cons = 40;
	public static readonly RULE_create_table_fk_action = 41;
	public static readonly RULE_create_table_preoptions = 42;
	public static readonly RULE_create_table_preoptions_item = 43;
	public static readonly RULE_create_table_preoptions_td_item = 44;
	public static readonly RULE_create_table_options = 45;
	public static readonly RULE_create_table_options_item = 46;
	public static readonly RULE_create_table_options_ora_item = 47;
	public static readonly RULE_create_table_options_db2_item = 48;
	public static readonly RULE_create_table_options_td_item = 49;
	public static readonly RULE_create_table_options_hive_item = 50;
	public static readonly RULE_create_table_hive_row_format = 51;
	public static readonly RULE_create_table_hive_row_format_fields = 52;
	public static readonly RULE_create_table_options_mssql_item = 53;
	public static readonly RULE_create_table_options_mysql_item = 54;
	public static readonly RULE_alter_table_stmt = 55;
	public static readonly RULE_alter_table_item = 56;
	public static readonly RULE_alter_table_add_constraint = 57;
	public static readonly RULE_alter_table_add_constraint_item = 58;
	public static readonly RULE_dtype = 59;
	public static readonly RULE_dtype_len = 60;
	public static readonly RULE_dtype_attr = 61;
	public static readonly RULE_dtype_default = 62;
	public static readonly RULE_create_database_stmt = 63;
	public static readonly RULE_create_database_option = 64;
	public static readonly RULE_create_function_stmt = 65;
	public static readonly RULE_create_function_return = 66;
	public static readonly RULE_create_package_stmt = 67;
	public static readonly RULE_package_spec = 68;
	public static readonly RULE_package_spec_item = 69;
	public static readonly RULE_create_package_body_stmt = 70;
	public static readonly RULE_package_body = 71;
	public static readonly RULE_package_body_item = 72;
	public static readonly RULE_create_procedure_stmt = 73;
	public static readonly RULE_create_routine_params = 74;
	public static readonly RULE_create_routine_param_item = 75;
	public static readonly RULE_create_routine_options = 76;
	public static readonly RULE_create_routine_option = 77;
	public static readonly RULE_drop_stmt = 78;
	public static readonly RULE_end_transaction_stmt = 79;
	public static readonly RULE_exec_stmt = 80;
	public static readonly RULE_if_stmt = 81;
	public static readonly RULE_if_plsql_stmt = 82;
	public static readonly RULE_if_tsql_stmt = 83;
	public static readonly RULE_if_bteq_stmt = 84;
	public static readonly RULE_elseif_block = 85;
	public static readonly RULE_else_block = 86;
	public static readonly RULE_include_stmt = 87;
	public static readonly RULE_insert_stmt = 88;
	public static readonly RULE_insert_stmt_cols = 89;
	public static readonly RULE_insert_stmt_rows = 90;
	public static readonly RULE_insert_stmt_row = 91;
	public static readonly RULE_insert_directory_stmt = 92;
	public static readonly RULE_exit_stmt = 93;
	public static readonly RULE_get_diag_stmt = 94;
	public static readonly RULE_get_diag_stmt_item = 95;
	public static readonly RULE_get_diag_stmt_exception_item = 96;
	public static readonly RULE_get_diag_stmt_rowcount_item = 97;
	public static readonly RULE_grant_stmt = 98;
	public static readonly RULE_grant_stmt_item = 99;
	public static readonly RULE_leave_stmt = 100;
	public static readonly RULE_map_object_stmt = 101;
	public static readonly RULE_open_stmt = 102;
	public static readonly RULE_fetch_stmt = 103;
	public static readonly RULE_collect_stats_stmt = 104;
	public static readonly RULE_collect_stats_clause = 105;
	public static readonly RULE_close_stmt = 106;
	public static readonly RULE_cmp_stmt = 107;
	public static readonly RULE_cmp_source = 108;
	public static readonly RULE_copy_from_local_stmt = 109;
	public static readonly RULE_copy_stmt = 110;
	public static readonly RULE_copy_source = 111;
	public static readonly RULE_copy_target = 112;
	public static readonly RULE_copy_option = 113;
	public static readonly RULE_copy_file_option = 114;
	public static readonly RULE_commit_stmt = 115;
	public static readonly RULE_create_index_stmt = 116;
	public static readonly RULE_create_index_col = 117;
	public static readonly RULE_index_storage_clause = 118;
	public static readonly RULE_index_mssql_storage_clause = 119;
	public static readonly RULE_print_stmt = 120;
	public static readonly RULE_quit_stmt = 121;
	public static readonly RULE_raise_stmt = 122;
	public static readonly RULE_resignal_stmt = 123;
	public static readonly RULE_return_stmt = 124;
	public static readonly RULE_rollback_stmt = 125;
	public static readonly RULE_set_session_option = 126;
	public static readonly RULE_set_current_schema_option = 127;
	public static readonly RULE_set_mssql_session_option = 128;
	public static readonly RULE_set_teradata_session_option = 129;
	public static readonly RULE_signal_stmt = 130;
	public static readonly RULE_summary_stmt = 131;
	public static readonly RULE_truncate_stmt = 132;
	public static readonly RULE_use_stmt = 133;
	public static readonly RULE_values_into_stmt = 134;
	public static readonly RULE_while_stmt = 135;
	public static readonly RULE_for_cursor_stmt = 136;
	public static readonly RULE_for_range_stmt = 137;
	public static readonly RULE_label = 138;
	public static readonly RULE_using_clause = 139;
	public static readonly RULE_select_stmt = 140;
	public static readonly RULE_cte_select_stmt = 141;
	public static readonly RULE_cte_select_stmt_item = 142;
	public static readonly RULE_cte_select_cols = 143;
	public static readonly RULE_fullselect_stmt = 144;
	public static readonly RULE_fullselect_stmt_item = 145;
	public static readonly RULE_fullselect_set_clause = 146;
	public static readonly RULE_subselect_stmt = 147;
	public static readonly RULE_select_list = 148;
	public static readonly RULE_select_list_set = 149;
	public static readonly RULE_select_list_limit = 150;
	public static readonly RULE_select_list_item = 151;
	public static readonly RULE_select_list_alias = 152;
	public static readonly RULE_select_list_asterisk = 153;
	public static readonly RULE_into_clause = 154;
	public static readonly RULE_from_clause = 155;
	public static readonly RULE_from_table_clause = 156;
	public static readonly RULE_from_table_name_clause = 157;
	public static readonly RULE_from_subselect_clause = 158;
	public static readonly RULE_from_join_clause = 159;
	public static readonly RULE_from_join_type_clause = 160;
	public static readonly RULE_from_table_values_clause = 161;
	public static readonly RULE_from_table_values_row = 162;
	public static readonly RULE_from_alias_clause = 163;
	public static readonly RULE_table_name = 164;
	public static readonly RULE_where_clause = 165;
	public static readonly RULE_group_by_clause = 166;
	public static readonly RULE_having_clause = 167;
	public static readonly RULE_qualify_clause = 168;
	public static readonly RULE_order_by_clause = 169;
	public static readonly RULE_select_options = 170;
	public static readonly RULE_select_options_item = 171;
	public static readonly RULE_update_stmt = 172;
	public static readonly RULE_update_assignment = 173;
	public static readonly RULE_update_table = 174;
	public static readonly RULE_update_upsert = 175;
	public static readonly RULE_merge_stmt = 176;
	public static readonly RULE_merge_table = 177;
	public static readonly RULE_merge_condition = 178;
	public static readonly RULE_merge_action = 179;
	public static readonly RULE_delete_stmt = 180;
	public static readonly RULE_delete_alias = 181;
	public static readonly RULE_describe_stmt = 182;
	public static readonly RULE_bool_expr = 183;
	public static readonly RULE_bool_expr_atom = 184;
	public static readonly RULE_bool_expr_unary = 185;
	public static readonly RULE_bool_expr_single_in = 186;
	public static readonly RULE_bool_expr_multi_in = 187;
	public static readonly RULE_bool_expr_binary = 188;
	public static readonly RULE_bool_expr_logical_operator = 189;
	public static readonly RULE_bool_expr_binary_operator = 190;
	public static readonly RULE_expr = 191;
	public static readonly RULE_expr_atom = 192;
	public static readonly RULE_expr_interval = 193;
	public static readonly RULE_interval_item = 194;
	public static readonly RULE_expr_concat = 195;
	public static readonly RULE_expr_concat_item = 196;
	public static readonly RULE_expr_case = 197;
	public static readonly RULE_expr_case_simple = 198;
	public static readonly RULE_expr_case_searched = 199;
	public static readonly RULE_expr_cursor_attribute = 200;
	public static readonly RULE_expr_agg_window_func = 201;
	public static readonly RULE_expr_func_all_distinct = 202;
	public static readonly RULE_expr_func_over_clause = 203;
	public static readonly RULE_expr_func_partition_by_clause = 204;
	public static readonly RULE_expr_spec_func = 205;
	public static readonly RULE_expr_func = 206;
	public static readonly RULE_expr_func_params = 207;
	public static readonly RULE_func_param = 208;
	public static readonly RULE_expr_select = 209;
	public static readonly RULE_expr_file = 210;
	public static readonly RULE_hive = 211;
	public static readonly RULE_hive_item = 212;
	public static readonly RULE_host = 213;
	public static readonly RULE_host_cmd = 214;
	public static readonly RULE_host_stmt = 215;
	public static readonly RULE_file_name = 216;
	public static readonly RULE_date_literal = 217;
	public static readonly RULE_timestamp_literal = 218;
	public static readonly RULE_ident = 219;
	public static readonly RULE_string = 220;
	public static readonly RULE_int_number = 221;
	public static readonly RULE_dec_number = 222;
	public static readonly RULE_bool_literal = 223;
	public static readonly RULE_null_const = 224;
	public static readonly RULE_non_reserved_words = 225;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"program", "block", "begin_end_block", "single_block_stmt", "block_end", 
		"proc_block", "stmt", "semicolon_stmt", "exception_block", "exception_block_item", 
		"null_stmt", "expr_stmt", "assignment_stmt", "assignment_stmt_item", "assignment_stmt_single_item", 
		"assignment_stmt_multiple_item", "assignment_stmt_select_item", "allocate_cursor_stmt", 
		"associate_locator_stmt", "begin_transaction_stmt", "break_stmt", "call_stmt", 
		"declare_stmt", "declare_block", "declare_block_inplace", "declare_stmt_item", 
		"declare_var_item", "declare_condition_item", "declare_cursor_item", "cursor_with_return", 
		"cursor_without_return", "declare_handler_item", "declare_temporary_table_item", 
		"create_table_stmt", "create_local_temp_table_stmt", "create_table_definition", 
		"create_table_columns", "create_table_columns_item", "column_name", "create_table_column_inline_cons", 
		"create_table_column_cons", "create_table_fk_action", "create_table_preoptions", 
		"create_table_preoptions_item", "create_table_preoptions_td_item", "create_table_options", 
		"create_table_options_item", "create_table_options_ora_item", "create_table_options_db2_item", 
		"create_table_options_td_item", "create_table_options_hive_item", "create_table_hive_row_format", 
		"create_table_hive_row_format_fields", "create_table_options_mssql_item", 
		"create_table_options_mysql_item", "alter_table_stmt", "alter_table_item", 
		"alter_table_add_constraint", "alter_table_add_constraint_item", "dtype", 
		"dtype_len", "dtype_attr", "dtype_default", "create_database_stmt", "create_database_option", 
		"create_function_stmt", "create_function_return", "create_package_stmt", 
		"package_spec", "package_spec_item", "create_package_body_stmt", "package_body", 
		"package_body_item", "create_procedure_stmt", "create_routine_params", 
		"create_routine_param_item", "create_routine_options", "create_routine_option", 
		"drop_stmt", "end_transaction_stmt", "exec_stmt", "if_stmt", "if_plsql_stmt", 
		"if_tsql_stmt", "if_bteq_stmt", "elseif_block", "else_block", "include_stmt", 
		"insert_stmt", "insert_stmt_cols", "insert_stmt_rows", "insert_stmt_row", 
		"insert_directory_stmt", "exit_stmt", "get_diag_stmt", "get_diag_stmt_item", 
		"get_diag_stmt_exception_item", "get_diag_stmt_rowcount_item", "grant_stmt", 
		"grant_stmt_item", "leave_stmt", "map_object_stmt", "open_stmt", "fetch_stmt", 
		"collect_stats_stmt", "collect_stats_clause", "close_stmt", "cmp_stmt", 
		"cmp_source", "copy_from_local_stmt", "copy_stmt", "copy_source", "copy_target", 
		"copy_option", "copy_file_option", "commit_stmt", "create_index_stmt", 
		"create_index_col", "index_storage_clause", "index_mssql_storage_clause", 
		"print_stmt", "quit_stmt", "raise_stmt", "resignal_stmt", "return_stmt", 
		"rollback_stmt", "set_session_option", "set_current_schema_option", "set_mssql_session_option", 
		"set_teradata_session_option", "signal_stmt", "summary_stmt", "truncate_stmt", 
		"use_stmt", "values_into_stmt", "while_stmt", "for_cursor_stmt", "for_range_stmt", 
		"label", "using_clause", "select_stmt", "cte_select_stmt", "cte_select_stmt_item", 
		"cte_select_cols", "fullselect_stmt", "fullselect_stmt_item", "fullselect_set_clause", 
		"subselect_stmt", "select_list", "select_list_set", "select_list_limit", 
		"select_list_item", "select_list_alias", "select_list_asterisk", "into_clause", 
		"from_clause", "from_table_clause", "from_table_name_clause", "from_subselect_clause", 
		"from_join_clause", "from_join_type_clause", "from_table_values_clause", 
		"from_table_values_row", "from_alias_clause", "table_name", "where_clause", 
		"group_by_clause", "having_clause", "qualify_clause", "order_by_clause", 
		"select_options", "select_options_item", "update_stmt", "update_assignment", 
		"update_table", "update_upsert", "merge_stmt", "merge_table", "merge_condition", 
		"merge_action", "delete_stmt", "delete_alias", "describe_stmt", "bool_expr", 
		"bool_expr_atom", "bool_expr_unary", "bool_expr_single_in", "bool_expr_multi_in", 
		"bool_expr_binary", "bool_expr_logical_operator", "bool_expr_binary_operator", 
		"expr", "expr_atom", "expr_interval", "interval_item", "expr_concat", 
		"expr_concat_item", "expr_case", "expr_case_simple", "expr_case_searched", 
		"expr_cursor_attribute", "expr_agg_window_func", "expr_func_all_distinct", 
		"expr_func_over_clause", "expr_func_partition_by_clause", "expr_spec_func", 
		"expr_func", "expr_func_params", "func_param", "expr_select", "expr_file", 
		"hive", "hive_item", "host", "host_cmd", "host_stmt", "file_name", "date_literal", 
		"timestamp_literal", "ident", "string", "int_number", "dec_number", "bool_literal", 
		"null_const", "non_reserved_words",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "'+'", "':'", "','", "'||'", "'/'", "'.'", 
		"'..'", "'='", "'=='", "'#'", "'!'", "'<>'", "'!='", "'>'", "'>='", "'<'", 
		"'<='", "'*'", "'%'", "'@'", "'{'", "'('", "'['", "'}'", "')'", "']'", 
		"';'", "'-'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "T_ACTION", "T_ADD2", "T_ALL", "T_ALLOCATE", "T_ALTER", "T_AND", 
		"T_ANSI_NULLS", "T_ANSI_PADDING", "T_AS", "T_ASC", "T_ASSOCIATE", "T_AT", 
		"T_AUTO_INCREMENT", "T_AVG", "T_BATCHSIZE", "T_BEGIN", "T_BETWEEN", "T_BIGINT", 
		"T_BINARY_DOUBLE", "T_BINARY_FLOAT", "T_BINARY_INTEGER", "T_BIT", "T_BODY", 
		"T_BREAK", "T_BY", "T_BYTE", "T_CALL", "T_CALLER", "T_CASCADE", "T_CASE", 
		"T_CASESPECIFIC", "T_CAST", "T_CHAR", "T_CHARACTER", "T_CHARSET", "T_CLIENT", 
		"T_CLOSE", "T_CLUSTERED", "T_CMP", "T_COLLECT", "T_COLLECTION", "T_COLUMN", 
		"T_COMMENT", "T_CONSTANT", "T_COMMIT", "T_COMPRESS", "T_CONCAT", "T_CONDITION", 
		"T_CONSTRAINT", "T_CONTINUE", "T_COPY", "T_COUNT", "T_COUNT_BIG", "T_CREATE", 
		"T_CREATION", "T_CREATOR", "T_CS", "T_CURRENT", "T_CURRENT_SCHEMA", "T_CURSOR", 
		"T_DATABASE", "T_DATA", "T_DATE", "T_DATETIME", "T_DAY", "T_DAYS", "T_DEC", 
		"T_DECIMAL", "T_DECLARE", "T_DEFAULT", "T_DEFERRED", "T_DEFINED", "T_DEFINER", 
		"T_DEFINITION", "T_DELETE", "T_DELIMITED", "T_DELIMITER", "T_DESC", "T_DESCRIBE", 
		"T_DIAGNOSTICS", "T_DIR", "T_DIRECTORY", "T_DISTINCT", "T_DISTRIBUTE", 
		"T_DO", "T_DOUBLE", "T_DROP", "T_DYNAMIC", "T_ELSE", "T_ELSEIF", "T_ELSIF", 
		"T_ENABLE", "T_END", "T_ENGINE", "T_ESCAPED", "T_EXCEPT", "T_EXEC", "T_EXECUTE", 
		"T_EXCEPTION", "T_EXCLUSIVE", "T_EXISTS", "T_EXIT", "T_FALLBACK", "T_FALSE", 
		"T_FETCH", "T_FIELDS", "T_FILE", "T_FILES", "T_FLOAT", "T_FOR", "T_FOREIGN", 
		"T_FORMAT", "T_FOUND", "T_FROM", "T_FULL", "T_FUNCTION", "T_GET", "T_GLOBAL", 
		"T_GO", "T_GRANT", "T_GROUP", "T_HANDLER", "T_HASH", "T_HAVING", "T_HDFS", 
		"T_HIVE", "T_HOST", "T_IDENTITY", "T_IF", "T_IGNORE", "T_IMMEDIATE", "T_IN", 
		"T_INCLUDE", "T_INDEX", "T_INITRANS", "T_INNER", "T_INOUT", "T_INSERT", 
		"T_INT", "T_INT2", "T_INT4", "T_INT8", "T_INTEGER", "T_INTERSECT", "T_INTERVAL", 
		"T_INTO", "T_INVOKER", "T_IS", "T_ISOPEN", "T_ITEMS", "T_JOIN", "T_KEEP", 
		"T_KEY", "T_KEYS", "T_LANGUAGE", "T_LEAVE", "T_LEFT", "T_LIKE", "T_LIMIT", 
		"T_LINES", "T_LOCAL", "T_LOCATION", "T_LOCATOR", "T_LOCATORS", "T_LOCKS", 
		"T_LOG", "T_LOGGED", "T_LOGGING", "T_LOOP", "T_MAP", "T_MATCHED", "T_MAX", 
		"T_MAXTRANS", "T_MERGE", "T_MESSAGE_TEXT", "T_MICROSECOND", "T_MICROSECONDS", 
		"T_MIN", "T_MULTISET", "T_NCHAR", "T_NEW", "T_NVARCHAR", "T_NO", "T_NOCOUNT", 
		"T_NOCOMPRESS", "T_NOLOGGING", "T_NONE", "T_NOT", "T_NOTFOUND", "T_NULL", 
		"T_NUMERIC", "T_NUMBER", "T_OBJECT", "T_OFF", "T_ON", "T_ONLY", "T_OPEN", 
		"T_OR", "T_ORDER", "T_OUT", "T_OUTER", "T_OVER", "T_OVERWRITE", "T_OWNER", 
		"T_PACKAGE", "T_PARTITION", "T_PCTFREE", "T_PCTUSED", "T_PLS_INTEGER", 
		"T_PRECISION", "T_PRESERVE", "T_PRIMARY", "T_PRINT", "T_PROC", "T_PROCEDURE", 
		"T_QUALIFY", "T_QUERY_BAND", "T_QUIT", "T_QUOTED_IDENTIFIER", "T_RAISE", 
		"T_REAL", "T_REFERENCES", "T_REGEXP", "T_REPLACE", "T_RESIGNAL", "T_RESTRICT", 
		"T_RESULT", "T_RESULT_SET_LOCATOR", "T_RETURN", "T_RETURNS", "T_REVERSE", 
		"T_RIGHT", "T_RLIKE", "T_ROLE", "T_ROLLBACK", "T_ROW", "T_ROWS", "T_ROWTYPE", 
		"T_ROW_COUNT", "T_RR", "T_RS", "T_PWD", "T_TRIM", "T_SCHEMA", "T_SECOND", 
		"T_SECONDS", "T_SECURITY", "T_SEGMENT", "T_SEL", "T_SELECT", "T_SET", 
		"T_SESSION", "T_SESSIONS", "T_SETS", "T_SHARE", "T_SIGNAL", "T_SIMPLE_DOUBLE", 
		"T_SIMPLE_FLOAT", "T_SIMPLE_INTEGER", "T_SMALLDATETIME", "T_SMALLINT", 
		"T_SQL", "T_SQLEXCEPTION", "T_SQLINSERT", "T_SQLSTATE", "T_SQLWARNING", 
		"T_STATS", "T_STATISTICS", "T_STEP", "T_STORAGE", "T_STORED", "T_STRING", 
		"T_SUBDIR", "T_SUBSTRING", "T_SUM", "T_SUMMARY", "T_SYS_REFCURSOR", "T_TABLE", 
		"T_TABLESPACE", "T_TEMPORARY", "T_TERMINATED", "T_TEXTIMAGE_ON", "T_THEN", 
		"T_TIMESTAMP", "T_TINYINT", "T_TITLE", "T_TO", "T_TOP", "T_TRANSACTION", 
		"T_TRUE", "T_TRUNCATE", "T_TYPE", "T_UNION", "T_UNIQUE", "T_UPDATE", "T_UR", 
		"T_USE", "T_USING", "T_VALUE", "T_VALUES", "T_VAR", "T_VARCHAR", "T_VARCHAR2", 
		"T_VARYING", "T_VOLATILE", "T_WHEN", "T_WHERE", "T_WHILE", "T_WITH", "T_WITHOUT", 
		"T_WORK", "T_XACT_ABORT", "T_XML", "T_YES", "T_ACTIVITY_COUNT", "T_CUME_DIST", 
		"T_CURRENT_DATE", "T_CURRENT_TIMESTAMP", "T_CURRENT_USER", "T_DENSE_RANK", 
		"T_FIRST_VALUE", "T_LAG", "T_LAST_VALUE", "T_LEAD", "T_MAX_PART_STRING", 
		"T_MIN_PART_STRING", "T_MAX_PART_INT", "T_MIN_PART_INT", "T_MAX_PART_DATE", 
		"T_MIN_PART_DATE", "T_PART_COUNT", "T_PART_LOC", "T_RANK", "T_ROW_NUMBER", 
		"T_STDEV", "T_SYSDATE", "T_VARIANCE", "T_USER", "T_ADD", "T_COLON", "T_COMMA", 
		"T_PIPE", "T_DIV", "T_DOT", "T_DOT2", "T_EQUAL", "T_EQUAL2", "T_SHARP", 
		"T_NOTE", "T_NOTEQUAL", "T_NOTEQUAL2", "T_GREATER", "T_GREATEREQUAL", 
		"T_LESS", "T_LESSEQUAL", "T_MUL", "T_PRECENT", "T_CALLS", "T_OPEN_B", 
		"T_OPEN_P", "T_OPEN_SB", "T_CLOSE_B", "T_CLOSE_P", "T_CLOSE_SB", "T_SEMICOLON", 
		"T_SUB", "L_ID", "L_S_STRING", "L_D_STRING", "L_INT", "L_DEC", "L_WS", 
		"L_M_COMMENT", "L_S_COMMENT", "L_FILE", "L_LABEL",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(HiveSql._LITERAL_NAMES, HiveSql._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return HiveSql.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "HiveSql.g4"; }

	// @Override
	public get ruleNames(): string[] { return HiveSql.ruleNames; }

	// @Override
	public get serializedATN(): string { return HiveSql._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(HiveSql._ATN, this);
	}
	// @RuleVersion(0)
	public program(): ProgramContext {
		let _localctx: ProgramContext = new ProgramContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, HiveSql.RULE_program);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 452;
			this.block();
			this.state = 453;
			this.match(HiveSql.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public block(): BlockContext {
		let _localctx: BlockContext = new BlockContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, HiveSql.RULE_block);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 462;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 457;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 0, this._ctx) ) {
					case 1:
						{
						this.state = 455;
						this.begin_end_block();
						}
						break;

					case 2:
						{
						this.state = 456;
						this.stmt();
						}
						break;
					}
					this.state = 460;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 1, this._ctx) ) {
					case 1:
						{
						this.state = 459;
						this.match(HiveSql.T_GO);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 464;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 2, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public begin_end_block(): Begin_end_blockContext {
		let _localctx: Begin_end_blockContext = new Begin_end_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, HiveSql.RULE_begin_end_block);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 467;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_DECLARE) {
				{
				this.state = 466;
				this.declare_block();
				}
			}

			this.state = 469;
			this.match(HiveSql.T_BEGIN);
			this.state = 470;
			this.block();
			this.state = 472;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 4, this._ctx) ) {
			case 1:
				{
				this.state = 471;
				this.exception_block();
				}
				break;
			}
			this.state = 474;
			this.block_end();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public single_block_stmt(): Single_block_stmtContext {
		let _localctx: Single_block_stmtContext = new Single_block_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, HiveSql.RULE_single_block_stmt);
		try {
			this.state = 487;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 7, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 476;
				this.match(HiveSql.T_BEGIN);
				this.state = 477;
				this.block();
				this.state = 479;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 5, this._ctx) ) {
				case 1:
					{
					this.state = 478;
					this.exception_block();
					}
					break;
				}
				this.state = 481;
				this.block_end();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 483;
				this.stmt();
				this.state = 485;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 6, this._ctx) ) {
				case 1:
					{
					this.state = 484;
					this.match(HiveSql.T_SEMICOLON);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public block_end(): Block_endContext {
		let _localctx: Block_endContext = new Block_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, HiveSql.RULE_block_end);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 489;
			if (!(this._input.LT(2).text.toUpperCase() !== "TRANSACTION")) {
				throw this.createFailedPredicateException("this._input.LT(2).text.toUpperCase() !== \"TRANSACTION\"");
			}
			this.state = 490;
			this.match(HiveSql.T_END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public proc_block(): Proc_blockContext {
		let _localctx: Proc_blockContext = new Proc_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, HiveSql.RULE_proc_block);
		try {
			let _alt: number;
			this.state = 501;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 10, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 492;
				this.begin_end_block();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 494;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 493;
						this.stmt();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 496;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 8, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 499;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 9, this._ctx) ) {
				case 1:
					{
					this.state = 498;
					this.match(HiveSql.T_GO);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt(): StmtContext {
		let _localctx: StmtContext = new StmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, HiveSql.RULE_stmt);
		try {
			this.state = 564;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 11, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 503;
				this.assignment_stmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 504;
				this.allocate_cursor_stmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 505;
				this.alter_table_stmt();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 506;
				this.associate_locator_stmt();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 507;
				this.begin_transaction_stmt();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 508;
				this.break_stmt();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 509;
				this.call_stmt();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 510;
				this.collect_stats_stmt();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 511;
				this.close_stmt();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 512;
				this.cmp_stmt();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 513;
				this.copy_from_local_stmt();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 514;
				this.copy_stmt();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 515;
				this.commit_stmt();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 516;
				this.create_database_stmt();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 517;
				this.create_function_stmt();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 518;
				this.create_index_stmt();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 519;
				this.create_local_temp_table_stmt();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 520;
				this.create_package_stmt();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 521;
				this.create_package_body_stmt();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 522;
				this.create_procedure_stmt();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 523;
				this.create_table_stmt();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 524;
				this.declare_stmt();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 525;
				this.delete_stmt();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 526;
				this.describe_stmt();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 527;
				this.drop_stmt();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 528;
				this.end_transaction_stmt();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 529;
				this.exec_stmt();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 530;
				this.exit_stmt();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 531;
				this.fetch_stmt();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 532;
				this.for_cursor_stmt();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 533;
				this.for_range_stmt();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 534;
				this.if_stmt();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 535;
				this.include_stmt();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 536;
				this.insert_stmt();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 537;
				this.insert_directory_stmt();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 538;
				this.get_diag_stmt();
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 539;
				this.grant_stmt();
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 540;
				this.leave_stmt();
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 541;
				this.map_object_stmt();
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 542;
				this.merge_stmt();
				}
				break;

			case 41:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 543;
				this.open_stmt();
				}
				break;

			case 42:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 544;
				this.print_stmt();
				}
				break;

			case 43:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 545;
				this.quit_stmt();
				}
				break;

			case 44:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 546;
				this.raise_stmt();
				}
				break;

			case 45:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 547;
				this.resignal_stmt();
				}
				break;

			case 46:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 548;
				this.return_stmt();
				}
				break;

			case 47:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 549;
				this.rollback_stmt();
				}
				break;

			case 48:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 550;
				this.select_stmt();
				}
				break;

			case 49:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 551;
				this.signal_stmt();
				}
				break;

			case 50:
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 552;
				this.summary_stmt();
				}
				break;

			case 51:
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 553;
				this.update_stmt();
				}
				break;

			case 52:
				this.enterOuterAlt(_localctx, 52);
				{
				this.state = 554;
				this.use_stmt();
				}
				break;

			case 53:
				this.enterOuterAlt(_localctx, 53);
				{
				this.state = 555;
				this.truncate_stmt();
				}
				break;

			case 54:
				this.enterOuterAlt(_localctx, 54);
				{
				this.state = 556;
				this.values_into_stmt();
				}
				break;

			case 55:
				this.enterOuterAlt(_localctx, 55);
				{
				this.state = 557;
				this.while_stmt();
				}
				break;

			case 56:
				this.enterOuterAlt(_localctx, 56);
				{
				this.state = 558;
				this.label();
				}
				break;

			case 57:
				this.enterOuterAlt(_localctx, 57);
				{
				this.state = 559;
				this.hive();
				}
				break;

			case 58:
				this.enterOuterAlt(_localctx, 58);
				{
				this.state = 560;
				this.host();
				}
				break;

			case 59:
				this.enterOuterAlt(_localctx, 59);
				{
				this.state = 561;
				this.null_stmt();
				}
				break;

			case 60:
				this.enterOuterAlt(_localctx, 60);
				{
				this.state = 562;
				this.expr_stmt();
				}
				break;

			case 61:
				this.enterOuterAlt(_localctx, 61);
				{
				this.state = 563;
				this.semicolon_stmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public semicolon_stmt(): Semicolon_stmtContext {
		let _localctx: Semicolon_stmtContext = new Semicolon_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, HiveSql.RULE_semicolon_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 566;
			_la = this._input.LA(1);
			if (!(((((_la - 343)) & ~0x1F) === 0 && ((1 << (_la - 343)) & ((1 << (HiveSql.T_DIV - 343)) | (1 << (HiveSql.T_SHARP - 343)) | (1 << (HiveSql.T_CALLS - 343)) | (1 << (HiveSql.T_SEMICOLON - 343)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exception_block(): Exception_blockContext {
		let _localctx: Exception_blockContext = new Exception_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, HiveSql.RULE_exception_block);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 568;
			this.match(HiveSql.T_EXCEPTION);
			this.state = 570;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 569;
					this.exception_block_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 572;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exception_block_item(): Exception_block_itemContext {
		let _localctx: Exception_block_itemContext = new Exception_block_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, HiveSql.RULE_exception_block_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 574;
			this.match(HiveSql.T_WHEN);
			this.state = 575;
			this.match(HiveSql.L_ID);
			this.state = 576;
			this.match(HiveSql.T_THEN);
			this.state = 577;
			this.block();
			this.state = 578;
			_la = this._input.LA(1);
			if (_la <= 0 || (_la === HiveSql.T_END || _la === HiveSql.T_WHEN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public null_stmt(): Null_stmtContext {
		let _localctx: Null_stmtContext = new Null_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, HiveSql.RULE_null_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 580;
			this.match(HiveSql.T_NULL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_stmt(): Expr_stmtContext {
		let _localctx: Expr_stmtContext = new Expr_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, HiveSql.RULE_expr_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 582;
			if (!(this._input.LT(1).text.toUpperCase() !== "GO")) {
				throw this.createFailedPredicateException("this._input.LT(1).text.toUpperCase() !== \"GO\"");
			}
			this.state = 583;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignment_stmt(): Assignment_stmtContext {
		let _localctx: Assignment_stmtContext = new Assignment_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, HiveSql.RULE_assignment_stmt);
		try {
			let _alt: number;
			this.state = 598;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 15, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 585;
				this.match(HiveSql.T_SET);
				this.state = 586;
				this.set_session_option();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 588;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 13, this._ctx) ) {
				case 1:
					{
					this.state = 587;
					this.match(HiveSql.T_SET);
					}
					break;
				}
				this.state = 590;
				this.assignment_stmt_item();
				this.state = 595;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 591;
						this.match(HiveSql.T_COMMA);
						this.state = 592;
						this.assignment_stmt_item();
						}
						}
					}
					this.state = 597;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 14, this._ctx);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignment_stmt_item(): Assignment_stmt_itemContext {
		let _localctx: Assignment_stmt_itemContext = new Assignment_stmt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, HiveSql.RULE_assignment_stmt_item);
		try {
			this.state = 603;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 16, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 600;
				this.assignment_stmt_single_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 601;
				this.assignment_stmt_multiple_item();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 602;
				this.assignment_stmt_select_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignment_stmt_single_item(): Assignment_stmt_single_itemContext {
		let _localctx: Assignment_stmt_single_itemContext = new Assignment_stmt_single_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, HiveSql.RULE_assignment_stmt_single_item);
		let _la: number;
		try {
			this.state = 621;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_ACTION:
			case HiveSql.T_ADD2:
			case HiveSql.T_ALL:
			case HiveSql.T_ALLOCATE:
			case HiveSql.T_ALTER:
			case HiveSql.T_AND:
			case HiveSql.T_ANSI_NULLS:
			case HiveSql.T_ANSI_PADDING:
			case HiveSql.T_AS:
			case HiveSql.T_ASC:
			case HiveSql.T_ASSOCIATE:
			case HiveSql.T_AT:
			case HiveSql.T_AUTO_INCREMENT:
			case HiveSql.T_AVG:
			case HiveSql.T_BATCHSIZE:
			case HiveSql.T_BEGIN:
			case HiveSql.T_BETWEEN:
			case HiveSql.T_BIGINT:
			case HiveSql.T_BINARY_DOUBLE:
			case HiveSql.T_BINARY_FLOAT:
			case HiveSql.T_BIT:
			case HiveSql.T_BODY:
			case HiveSql.T_BREAK:
			case HiveSql.T_BY:
			case HiveSql.T_BYTE:
			case HiveSql.T_CALL:
			case HiveSql.T_CALLER:
			case HiveSql.T_CASCADE:
			case HiveSql.T_CASE:
			case HiveSql.T_CASESPECIFIC:
			case HiveSql.T_CAST:
			case HiveSql.T_CHAR:
			case HiveSql.T_CHARACTER:
			case HiveSql.T_CHARSET:
			case HiveSql.T_CLIENT:
			case HiveSql.T_CLOSE:
			case HiveSql.T_CLUSTERED:
			case HiveSql.T_CMP:
			case HiveSql.T_COLLECT:
			case HiveSql.T_COLLECTION:
			case HiveSql.T_COLUMN:
			case HiveSql.T_COMMENT:
			case HiveSql.T_CONSTANT:
			case HiveSql.T_COMMIT:
			case HiveSql.T_COMPRESS:
			case HiveSql.T_CONCAT:
			case HiveSql.T_CONDITION:
			case HiveSql.T_CONSTRAINT:
			case HiveSql.T_CONTINUE:
			case HiveSql.T_COPY:
			case HiveSql.T_COUNT:
			case HiveSql.T_COUNT_BIG:
			case HiveSql.T_CREATE:
			case HiveSql.T_CREATION:
			case HiveSql.T_CREATOR:
			case HiveSql.T_CS:
			case HiveSql.T_CURRENT:
			case HiveSql.T_CURRENT_SCHEMA:
			case HiveSql.T_CURSOR:
			case HiveSql.T_DATABASE:
			case HiveSql.T_DATA:
			case HiveSql.T_DATE:
			case HiveSql.T_DATETIME:
			case HiveSql.T_DAY:
			case HiveSql.T_DAYS:
			case HiveSql.T_DEC:
			case HiveSql.T_DECIMAL:
			case HiveSql.T_DECLARE:
			case HiveSql.T_DEFAULT:
			case HiveSql.T_DEFERRED:
			case HiveSql.T_DEFINED:
			case HiveSql.T_DEFINER:
			case HiveSql.T_DEFINITION:
			case HiveSql.T_DELETE:
			case HiveSql.T_DELIMITED:
			case HiveSql.T_DELIMITER:
			case HiveSql.T_DESC:
			case HiveSql.T_DESCRIBE:
			case HiveSql.T_DIAGNOSTICS:
			case HiveSql.T_DIR:
			case HiveSql.T_DIRECTORY:
			case HiveSql.T_DISTINCT:
			case HiveSql.T_DISTRIBUTE:
			case HiveSql.T_DO:
			case HiveSql.T_DOUBLE:
			case HiveSql.T_DROP:
			case HiveSql.T_DYNAMIC:
			case HiveSql.T_ENABLE:
			case HiveSql.T_ENGINE:
			case HiveSql.T_ESCAPED:
			case HiveSql.T_EXCEPT:
			case HiveSql.T_EXEC:
			case HiveSql.T_EXECUTE:
			case HiveSql.T_EXCEPTION:
			case HiveSql.T_EXCLUSIVE:
			case HiveSql.T_EXISTS:
			case HiveSql.T_EXIT:
			case HiveSql.T_FALLBACK:
			case HiveSql.T_FALSE:
			case HiveSql.T_FETCH:
			case HiveSql.T_FIELDS:
			case HiveSql.T_FILE:
			case HiveSql.T_FILES:
			case HiveSql.T_FLOAT:
			case HiveSql.T_FOR:
			case HiveSql.T_FOREIGN:
			case HiveSql.T_FORMAT:
			case HiveSql.T_FOUND:
			case HiveSql.T_FROM:
			case HiveSql.T_FULL:
			case HiveSql.T_FUNCTION:
			case HiveSql.T_GET:
			case HiveSql.T_GLOBAL:
			case HiveSql.T_GO:
			case HiveSql.T_GRANT:
			case HiveSql.T_GROUP:
			case HiveSql.T_HANDLER:
			case HiveSql.T_HASH:
			case HiveSql.T_HAVING:
			case HiveSql.T_HDFS:
			case HiveSql.T_HIVE:
			case HiveSql.T_HOST:
			case HiveSql.T_IDENTITY:
			case HiveSql.T_IF:
			case HiveSql.T_IGNORE:
			case HiveSql.T_IMMEDIATE:
			case HiveSql.T_IN:
			case HiveSql.T_INCLUDE:
			case HiveSql.T_INDEX:
			case HiveSql.T_INITRANS:
			case HiveSql.T_INNER:
			case HiveSql.T_INOUT:
			case HiveSql.T_INSERT:
			case HiveSql.T_INT:
			case HiveSql.T_INT2:
			case HiveSql.T_INT4:
			case HiveSql.T_INT8:
			case HiveSql.T_INTEGER:
			case HiveSql.T_INTERSECT:
			case HiveSql.T_INTERVAL:
			case HiveSql.T_INTO:
			case HiveSql.T_INVOKER:
			case HiveSql.T_IS:
			case HiveSql.T_ISOPEN:
			case HiveSql.T_ITEMS:
			case HiveSql.T_JOIN:
			case HiveSql.T_KEEP:
			case HiveSql.T_KEY:
			case HiveSql.T_KEYS:
			case HiveSql.T_LANGUAGE:
			case HiveSql.T_LEAVE:
			case HiveSql.T_LEFT:
			case HiveSql.T_LIKE:
			case HiveSql.T_LIMIT:
			case HiveSql.T_LINES:
			case HiveSql.T_LOCAL:
			case HiveSql.T_LOCATION:
			case HiveSql.T_LOCATOR:
			case HiveSql.T_LOCATORS:
			case HiveSql.T_LOCKS:
			case HiveSql.T_LOG:
			case HiveSql.T_LOGGED:
			case HiveSql.T_LOGGING:
			case HiveSql.T_LOOP:
			case HiveSql.T_MAP:
			case HiveSql.T_MATCHED:
			case HiveSql.T_MAX:
			case HiveSql.T_MAXTRANS:
			case HiveSql.T_MERGE:
			case HiveSql.T_MESSAGE_TEXT:
			case HiveSql.T_MICROSECOND:
			case HiveSql.T_MICROSECONDS:
			case HiveSql.T_MIN:
			case HiveSql.T_MULTISET:
			case HiveSql.T_NCHAR:
			case HiveSql.T_NEW:
			case HiveSql.T_NVARCHAR:
			case HiveSql.T_NO:
			case HiveSql.T_NOCOUNT:
			case HiveSql.T_NOCOMPRESS:
			case HiveSql.T_NOLOGGING:
			case HiveSql.T_NONE:
			case HiveSql.T_NOT:
			case HiveSql.T_NOTFOUND:
			case HiveSql.T_NUMERIC:
			case HiveSql.T_NUMBER:
			case HiveSql.T_OBJECT:
			case HiveSql.T_OFF:
			case HiveSql.T_ON:
			case HiveSql.T_ONLY:
			case HiveSql.T_OPEN:
			case HiveSql.T_OR:
			case HiveSql.T_ORDER:
			case HiveSql.T_OUT:
			case HiveSql.T_OUTER:
			case HiveSql.T_OVER:
			case HiveSql.T_OVERWRITE:
			case HiveSql.T_OWNER:
			case HiveSql.T_PACKAGE:
			case HiveSql.T_PARTITION:
			case HiveSql.T_PCTFREE:
			case HiveSql.T_PCTUSED:
			case HiveSql.T_PRECISION:
			case HiveSql.T_PRESERVE:
			case HiveSql.T_PRIMARY:
			case HiveSql.T_PRINT:
			case HiveSql.T_PROC:
			case HiveSql.T_PROCEDURE:
			case HiveSql.T_QUALIFY:
			case HiveSql.T_QUERY_BAND:
			case HiveSql.T_QUIT:
			case HiveSql.T_QUOTED_IDENTIFIER:
			case HiveSql.T_RAISE:
			case HiveSql.T_REAL:
			case HiveSql.T_REFERENCES:
			case HiveSql.T_REGEXP:
			case HiveSql.T_REPLACE:
			case HiveSql.T_RESIGNAL:
			case HiveSql.T_RESTRICT:
			case HiveSql.T_RESULT:
			case HiveSql.T_RESULT_SET_LOCATOR:
			case HiveSql.T_RETURN:
			case HiveSql.T_RETURNS:
			case HiveSql.T_REVERSE:
			case HiveSql.T_RIGHT:
			case HiveSql.T_RLIKE:
			case HiveSql.T_ROLE:
			case HiveSql.T_ROLLBACK:
			case HiveSql.T_ROW:
			case HiveSql.T_ROWS:
			case HiveSql.T_ROW_COUNT:
			case HiveSql.T_RR:
			case HiveSql.T_RS:
			case HiveSql.T_PWD:
			case HiveSql.T_TRIM:
			case HiveSql.T_SCHEMA:
			case HiveSql.T_SECOND:
			case HiveSql.T_SECONDS:
			case HiveSql.T_SECURITY:
			case HiveSql.T_SEGMENT:
			case HiveSql.T_SEL:
			case HiveSql.T_SELECT:
			case HiveSql.T_SET:
			case HiveSql.T_SESSION:
			case HiveSql.T_SESSIONS:
			case HiveSql.T_SETS:
			case HiveSql.T_SHARE:
			case HiveSql.T_SIGNAL:
			case HiveSql.T_SIMPLE_DOUBLE:
			case HiveSql.T_SIMPLE_FLOAT:
			case HiveSql.T_SMALLDATETIME:
			case HiveSql.T_SMALLINT:
			case HiveSql.T_SQL:
			case HiveSql.T_SQLEXCEPTION:
			case HiveSql.T_SQLINSERT:
			case HiveSql.T_SQLSTATE:
			case HiveSql.T_SQLWARNING:
			case HiveSql.T_STATS:
			case HiveSql.T_STATISTICS:
			case HiveSql.T_STEP:
			case HiveSql.T_STORAGE:
			case HiveSql.T_STORED:
			case HiveSql.T_STRING:
			case HiveSql.T_SUBDIR:
			case HiveSql.T_SUBSTRING:
			case HiveSql.T_SUM:
			case HiveSql.T_SUMMARY:
			case HiveSql.T_SYS_REFCURSOR:
			case HiveSql.T_TABLE:
			case HiveSql.T_TABLESPACE:
			case HiveSql.T_TEMPORARY:
			case HiveSql.T_TERMINATED:
			case HiveSql.T_TEXTIMAGE_ON:
			case HiveSql.T_THEN:
			case HiveSql.T_TIMESTAMP:
			case HiveSql.T_TITLE:
			case HiveSql.T_TO:
			case HiveSql.T_TOP:
			case HiveSql.T_TRANSACTION:
			case HiveSql.T_TRUE:
			case HiveSql.T_TRUNCATE:
			case HiveSql.T_UNIQUE:
			case HiveSql.T_UPDATE:
			case HiveSql.T_UR:
			case HiveSql.T_USE:
			case HiveSql.T_USING:
			case HiveSql.T_VALUE:
			case HiveSql.T_VALUES:
			case HiveSql.T_VAR:
			case HiveSql.T_VARCHAR:
			case HiveSql.T_VARCHAR2:
			case HiveSql.T_VARYING:
			case HiveSql.T_VOLATILE:
			case HiveSql.T_WHILE:
			case HiveSql.T_WITH:
			case HiveSql.T_WITHOUT:
			case HiveSql.T_WORK:
			case HiveSql.T_XACT_ABORT:
			case HiveSql.T_XML:
			case HiveSql.T_YES:
			case HiveSql.T_ACTIVITY_COUNT:
			case HiveSql.T_CUME_DIST:
			case HiveSql.T_CURRENT_DATE:
			case HiveSql.T_CURRENT_TIMESTAMP:
			case HiveSql.T_CURRENT_USER:
			case HiveSql.T_DENSE_RANK:
			case HiveSql.T_FIRST_VALUE:
			case HiveSql.T_LAG:
			case HiveSql.T_LAST_VALUE:
			case HiveSql.T_LEAD:
			case HiveSql.T_PART_COUNT:
			case HiveSql.T_PART_LOC:
			case HiveSql.T_RANK:
			case HiveSql.T_ROW_NUMBER:
			case HiveSql.T_STDEV:
			case HiveSql.T_SYSDATE:
			case HiveSql.T_VARIANCE:
			case HiveSql.T_USER:
			case HiveSql.L_ID:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 605;
				this.ident();
				this.state = 607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_COLON) {
					{
					this.state = 606;
					this.match(HiveSql.T_COLON);
					}
				}

				this.state = 609;
				this.match(HiveSql.T_EQUAL);
				this.state = 610;
				this.expr(0);
				}
				break;
			case HiveSql.T_OPEN_P:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 612;
				this.match(HiveSql.T_OPEN_P);
				this.state = 613;
				this.ident();
				this.state = 614;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 616;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_COLON) {
					{
					this.state = 615;
					this.match(HiveSql.T_COLON);
					}
				}

				this.state = 618;
				this.match(HiveSql.T_EQUAL);
				this.state = 619;
				this.expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignment_stmt_multiple_item(): Assignment_stmt_multiple_itemContext {
		let _localctx: Assignment_stmt_multiple_itemContext = new Assignment_stmt_multiple_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, HiveSql.RULE_assignment_stmt_multiple_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 623;
			this.match(HiveSql.T_OPEN_P);
			this.state = 624;
			this.ident();
			this.state = 629;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 625;
				this.match(HiveSql.T_COMMA);
				this.state = 626;
				this.ident();
				}
				}
				this.state = 631;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 632;
			this.match(HiveSql.T_CLOSE_P);
			this.state = 634;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_COLON) {
				{
				this.state = 633;
				this.match(HiveSql.T_COLON);
				}
			}

			this.state = 636;
			this.match(HiveSql.T_EQUAL);
			this.state = 637;
			this.match(HiveSql.T_OPEN_P);
			this.state = 638;
			this.expr(0);
			this.state = 643;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 639;
				this.match(HiveSql.T_COMMA);
				this.state = 640;
				this.expr(0);
				}
				}
				this.state = 645;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 646;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assignment_stmt_select_item(): Assignment_stmt_select_itemContext {
		let _localctx: Assignment_stmt_select_itemContext = new Assignment_stmt_select_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, HiveSql.RULE_assignment_stmt_select_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 660;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_ACTION:
			case HiveSql.T_ADD2:
			case HiveSql.T_ALL:
			case HiveSql.T_ALLOCATE:
			case HiveSql.T_ALTER:
			case HiveSql.T_AND:
			case HiveSql.T_ANSI_NULLS:
			case HiveSql.T_ANSI_PADDING:
			case HiveSql.T_AS:
			case HiveSql.T_ASC:
			case HiveSql.T_ASSOCIATE:
			case HiveSql.T_AT:
			case HiveSql.T_AUTO_INCREMENT:
			case HiveSql.T_AVG:
			case HiveSql.T_BATCHSIZE:
			case HiveSql.T_BEGIN:
			case HiveSql.T_BETWEEN:
			case HiveSql.T_BIGINT:
			case HiveSql.T_BINARY_DOUBLE:
			case HiveSql.T_BINARY_FLOAT:
			case HiveSql.T_BIT:
			case HiveSql.T_BODY:
			case HiveSql.T_BREAK:
			case HiveSql.T_BY:
			case HiveSql.T_BYTE:
			case HiveSql.T_CALL:
			case HiveSql.T_CALLER:
			case HiveSql.T_CASCADE:
			case HiveSql.T_CASE:
			case HiveSql.T_CASESPECIFIC:
			case HiveSql.T_CAST:
			case HiveSql.T_CHAR:
			case HiveSql.T_CHARACTER:
			case HiveSql.T_CHARSET:
			case HiveSql.T_CLIENT:
			case HiveSql.T_CLOSE:
			case HiveSql.T_CLUSTERED:
			case HiveSql.T_CMP:
			case HiveSql.T_COLLECT:
			case HiveSql.T_COLLECTION:
			case HiveSql.T_COLUMN:
			case HiveSql.T_COMMENT:
			case HiveSql.T_CONSTANT:
			case HiveSql.T_COMMIT:
			case HiveSql.T_COMPRESS:
			case HiveSql.T_CONCAT:
			case HiveSql.T_CONDITION:
			case HiveSql.T_CONSTRAINT:
			case HiveSql.T_CONTINUE:
			case HiveSql.T_COPY:
			case HiveSql.T_COUNT:
			case HiveSql.T_COUNT_BIG:
			case HiveSql.T_CREATE:
			case HiveSql.T_CREATION:
			case HiveSql.T_CREATOR:
			case HiveSql.T_CS:
			case HiveSql.T_CURRENT:
			case HiveSql.T_CURRENT_SCHEMA:
			case HiveSql.T_CURSOR:
			case HiveSql.T_DATABASE:
			case HiveSql.T_DATA:
			case HiveSql.T_DATE:
			case HiveSql.T_DATETIME:
			case HiveSql.T_DAY:
			case HiveSql.T_DAYS:
			case HiveSql.T_DEC:
			case HiveSql.T_DECIMAL:
			case HiveSql.T_DECLARE:
			case HiveSql.T_DEFAULT:
			case HiveSql.T_DEFERRED:
			case HiveSql.T_DEFINED:
			case HiveSql.T_DEFINER:
			case HiveSql.T_DEFINITION:
			case HiveSql.T_DELETE:
			case HiveSql.T_DELIMITED:
			case HiveSql.T_DELIMITER:
			case HiveSql.T_DESC:
			case HiveSql.T_DESCRIBE:
			case HiveSql.T_DIAGNOSTICS:
			case HiveSql.T_DIR:
			case HiveSql.T_DIRECTORY:
			case HiveSql.T_DISTINCT:
			case HiveSql.T_DISTRIBUTE:
			case HiveSql.T_DO:
			case HiveSql.T_DOUBLE:
			case HiveSql.T_DROP:
			case HiveSql.T_DYNAMIC:
			case HiveSql.T_ENABLE:
			case HiveSql.T_ENGINE:
			case HiveSql.T_ESCAPED:
			case HiveSql.T_EXCEPT:
			case HiveSql.T_EXEC:
			case HiveSql.T_EXECUTE:
			case HiveSql.T_EXCEPTION:
			case HiveSql.T_EXCLUSIVE:
			case HiveSql.T_EXISTS:
			case HiveSql.T_EXIT:
			case HiveSql.T_FALLBACK:
			case HiveSql.T_FALSE:
			case HiveSql.T_FETCH:
			case HiveSql.T_FIELDS:
			case HiveSql.T_FILE:
			case HiveSql.T_FILES:
			case HiveSql.T_FLOAT:
			case HiveSql.T_FOR:
			case HiveSql.T_FOREIGN:
			case HiveSql.T_FORMAT:
			case HiveSql.T_FOUND:
			case HiveSql.T_FROM:
			case HiveSql.T_FULL:
			case HiveSql.T_FUNCTION:
			case HiveSql.T_GET:
			case HiveSql.T_GLOBAL:
			case HiveSql.T_GO:
			case HiveSql.T_GRANT:
			case HiveSql.T_GROUP:
			case HiveSql.T_HANDLER:
			case HiveSql.T_HASH:
			case HiveSql.T_HAVING:
			case HiveSql.T_HDFS:
			case HiveSql.T_HIVE:
			case HiveSql.T_HOST:
			case HiveSql.T_IDENTITY:
			case HiveSql.T_IF:
			case HiveSql.T_IGNORE:
			case HiveSql.T_IMMEDIATE:
			case HiveSql.T_IN:
			case HiveSql.T_INCLUDE:
			case HiveSql.T_INDEX:
			case HiveSql.T_INITRANS:
			case HiveSql.T_INNER:
			case HiveSql.T_INOUT:
			case HiveSql.T_INSERT:
			case HiveSql.T_INT:
			case HiveSql.T_INT2:
			case HiveSql.T_INT4:
			case HiveSql.T_INT8:
			case HiveSql.T_INTEGER:
			case HiveSql.T_INTERSECT:
			case HiveSql.T_INTERVAL:
			case HiveSql.T_INTO:
			case HiveSql.T_INVOKER:
			case HiveSql.T_IS:
			case HiveSql.T_ISOPEN:
			case HiveSql.T_ITEMS:
			case HiveSql.T_JOIN:
			case HiveSql.T_KEEP:
			case HiveSql.T_KEY:
			case HiveSql.T_KEYS:
			case HiveSql.T_LANGUAGE:
			case HiveSql.T_LEAVE:
			case HiveSql.T_LEFT:
			case HiveSql.T_LIKE:
			case HiveSql.T_LIMIT:
			case HiveSql.T_LINES:
			case HiveSql.T_LOCAL:
			case HiveSql.T_LOCATION:
			case HiveSql.T_LOCATOR:
			case HiveSql.T_LOCATORS:
			case HiveSql.T_LOCKS:
			case HiveSql.T_LOG:
			case HiveSql.T_LOGGED:
			case HiveSql.T_LOGGING:
			case HiveSql.T_LOOP:
			case HiveSql.T_MAP:
			case HiveSql.T_MATCHED:
			case HiveSql.T_MAX:
			case HiveSql.T_MAXTRANS:
			case HiveSql.T_MERGE:
			case HiveSql.T_MESSAGE_TEXT:
			case HiveSql.T_MICROSECOND:
			case HiveSql.T_MICROSECONDS:
			case HiveSql.T_MIN:
			case HiveSql.T_MULTISET:
			case HiveSql.T_NCHAR:
			case HiveSql.T_NEW:
			case HiveSql.T_NVARCHAR:
			case HiveSql.T_NO:
			case HiveSql.T_NOCOUNT:
			case HiveSql.T_NOCOMPRESS:
			case HiveSql.T_NOLOGGING:
			case HiveSql.T_NONE:
			case HiveSql.T_NOT:
			case HiveSql.T_NOTFOUND:
			case HiveSql.T_NUMERIC:
			case HiveSql.T_NUMBER:
			case HiveSql.T_OBJECT:
			case HiveSql.T_OFF:
			case HiveSql.T_ON:
			case HiveSql.T_ONLY:
			case HiveSql.T_OPEN:
			case HiveSql.T_OR:
			case HiveSql.T_ORDER:
			case HiveSql.T_OUT:
			case HiveSql.T_OUTER:
			case HiveSql.T_OVER:
			case HiveSql.T_OVERWRITE:
			case HiveSql.T_OWNER:
			case HiveSql.T_PACKAGE:
			case HiveSql.T_PARTITION:
			case HiveSql.T_PCTFREE:
			case HiveSql.T_PCTUSED:
			case HiveSql.T_PRECISION:
			case HiveSql.T_PRESERVE:
			case HiveSql.T_PRIMARY:
			case HiveSql.T_PRINT:
			case HiveSql.T_PROC:
			case HiveSql.T_PROCEDURE:
			case HiveSql.T_QUALIFY:
			case HiveSql.T_QUERY_BAND:
			case HiveSql.T_QUIT:
			case HiveSql.T_QUOTED_IDENTIFIER:
			case HiveSql.T_RAISE:
			case HiveSql.T_REAL:
			case HiveSql.T_REFERENCES:
			case HiveSql.T_REGEXP:
			case HiveSql.T_REPLACE:
			case HiveSql.T_RESIGNAL:
			case HiveSql.T_RESTRICT:
			case HiveSql.T_RESULT:
			case HiveSql.T_RESULT_SET_LOCATOR:
			case HiveSql.T_RETURN:
			case HiveSql.T_RETURNS:
			case HiveSql.T_REVERSE:
			case HiveSql.T_RIGHT:
			case HiveSql.T_RLIKE:
			case HiveSql.T_ROLE:
			case HiveSql.T_ROLLBACK:
			case HiveSql.T_ROW:
			case HiveSql.T_ROWS:
			case HiveSql.T_ROW_COUNT:
			case HiveSql.T_RR:
			case HiveSql.T_RS:
			case HiveSql.T_PWD:
			case HiveSql.T_TRIM:
			case HiveSql.T_SCHEMA:
			case HiveSql.T_SECOND:
			case HiveSql.T_SECONDS:
			case HiveSql.T_SECURITY:
			case HiveSql.T_SEGMENT:
			case HiveSql.T_SEL:
			case HiveSql.T_SELECT:
			case HiveSql.T_SET:
			case HiveSql.T_SESSION:
			case HiveSql.T_SESSIONS:
			case HiveSql.T_SETS:
			case HiveSql.T_SHARE:
			case HiveSql.T_SIGNAL:
			case HiveSql.T_SIMPLE_DOUBLE:
			case HiveSql.T_SIMPLE_FLOAT:
			case HiveSql.T_SMALLDATETIME:
			case HiveSql.T_SMALLINT:
			case HiveSql.T_SQL:
			case HiveSql.T_SQLEXCEPTION:
			case HiveSql.T_SQLINSERT:
			case HiveSql.T_SQLSTATE:
			case HiveSql.T_SQLWARNING:
			case HiveSql.T_STATS:
			case HiveSql.T_STATISTICS:
			case HiveSql.T_STEP:
			case HiveSql.T_STORAGE:
			case HiveSql.T_STORED:
			case HiveSql.T_STRING:
			case HiveSql.T_SUBDIR:
			case HiveSql.T_SUBSTRING:
			case HiveSql.T_SUM:
			case HiveSql.T_SUMMARY:
			case HiveSql.T_SYS_REFCURSOR:
			case HiveSql.T_TABLE:
			case HiveSql.T_TABLESPACE:
			case HiveSql.T_TEMPORARY:
			case HiveSql.T_TERMINATED:
			case HiveSql.T_TEXTIMAGE_ON:
			case HiveSql.T_THEN:
			case HiveSql.T_TIMESTAMP:
			case HiveSql.T_TITLE:
			case HiveSql.T_TO:
			case HiveSql.T_TOP:
			case HiveSql.T_TRANSACTION:
			case HiveSql.T_TRUE:
			case HiveSql.T_TRUNCATE:
			case HiveSql.T_UNIQUE:
			case HiveSql.T_UPDATE:
			case HiveSql.T_UR:
			case HiveSql.T_USE:
			case HiveSql.T_USING:
			case HiveSql.T_VALUE:
			case HiveSql.T_VALUES:
			case HiveSql.T_VAR:
			case HiveSql.T_VARCHAR:
			case HiveSql.T_VARCHAR2:
			case HiveSql.T_VARYING:
			case HiveSql.T_VOLATILE:
			case HiveSql.T_WHILE:
			case HiveSql.T_WITH:
			case HiveSql.T_WITHOUT:
			case HiveSql.T_WORK:
			case HiveSql.T_XACT_ABORT:
			case HiveSql.T_XML:
			case HiveSql.T_YES:
			case HiveSql.T_ACTIVITY_COUNT:
			case HiveSql.T_CUME_DIST:
			case HiveSql.T_CURRENT_DATE:
			case HiveSql.T_CURRENT_TIMESTAMP:
			case HiveSql.T_CURRENT_USER:
			case HiveSql.T_DENSE_RANK:
			case HiveSql.T_FIRST_VALUE:
			case HiveSql.T_LAG:
			case HiveSql.T_LAST_VALUE:
			case HiveSql.T_LEAD:
			case HiveSql.T_PART_COUNT:
			case HiveSql.T_PART_LOC:
			case HiveSql.T_RANK:
			case HiveSql.T_ROW_NUMBER:
			case HiveSql.T_STDEV:
			case HiveSql.T_SYSDATE:
			case HiveSql.T_VARIANCE:
			case HiveSql.T_USER:
			case HiveSql.L_ID:
				{
				this.state = 648;
				this.ident();
				}
				break;
			case HiveSql.T_OPEN_P:
				{
				{
				this.state = 649;
				this.match(HiveSql.T_OPEN_P);
				this.state = 650;
				this.ident();
				this.state = 655;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 651;
					this.match(HiveSql.T_COMMA);
					this.state = 652;
					this.ident();
					}
					}
					this.state = 657;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 658;
				this.match(HiveSql.T_CLOSE_P);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 663;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_COLON) {
				{
				this.state = 662;
				this.match(HiveSql.T_COLON);
				}
			}

			this.state = 665;
			this.match(HiveSql.T_EQUAL);
			this.state = 666;
			this.match(HiveSql.T_OPEN_P);
			this.state = 667;
			this.select_stmt();
			this.state = 668;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public allocate_cursor_stmt(): Allocate_cursor_stmtContext {
		let _localctx: Allocate_cursor_stmtContext = new Allocate_cursor_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, HiveSql.RULE_allocate_cursor_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 670;
			this.match(HiveSql.T_ALLOCATE);
			this.state = 671;
			this.ident();
			this.state = 672;
			this.match(HiveSql.T_CURSOR);
			this.state = 673;
			this.match(HiveSql.T_FOR);
			this.state = 677;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_RESULT:
				{
				{
				this.state = 674;
				this.match(HiveSql.T_RESULT);
				this.state = 675;
				this.match(HiveSql.T_SET);
				}
				}
				break;
			case HiveSql.T_PROCEDURE:
				{
				this.state = 676;
				this.match(HiveSql.T_PROCEDURE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 679;
			this.ident();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public associate_locator_stmt(): Associate_locator_stmtContext {
		let _localctx: Associate_locator_stmtContext = new Associate_locator_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, HiveSql.RULE_associate_locator_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 681;
			this.match(HiveSql.T_ASSOCIATE);
			this.state = 684;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_RESULT) {
				{
				this.state = 682;
				this.match(HiveSql.T_RESULT);
				this.state = 683;
				this.match(HiveSql.T_SET);
				}
			}

			this.state = 686;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_LOCATOR || _la === HiveSql.T_LOCATORS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 687;
			this.match(HiveSql.T_OPEN_P);
			this.state = 688;
			this.ident();
			this.state = 693;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 689;
				this.match(HiveSql.T_COMMA);
				this.state = 690;
				this.ident();
				}
				}
				this.state = 695;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 696;
			this.match(HiveSql.T_CLOSE_P);
			this.state = 697;
			this.match(HiveSql.T_WITH);
			this.state = 698;
			this.match(HiveSql.T_PROCEDURE);
			this.state = 699;
			this.ident();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public begin_transaction_stmt(): Begin_transaction_stmtContext {
		let _localctx: Begin_transaction_stmtContext = new Begin_transaction_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, HiveSql.RULE_begin_transaction_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 701;
			this.match(HiveSql.T_BEGIN);
			this.state = 702;
			this.match(HiveSql.T_TRANSACTION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public break_stmt(): Break_stmtContext {
		let _localctx: Break_stmtContext = new Break_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, HiveSql.RULE_break_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 704;
			this.match(HiveSql.T_BREAK);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public call_stmt(): Call_stmtContext {
		let _localctx: Call_stmtContext = new Call_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, HiveSql.RULE_call_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 706;
			this.match(HiveSql.T_CALL);
			this.state = 707;
			this.ident();
			this.state = 714;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 30, this._ctx) ) {
			case 1:
				{
				this.state = 708;
				this.match(HiveSql.T_OPEN_P);
				this.state = 710;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 29, this._ctx) ) {
				case 1:
					{
					this.state = 709;
					this.expr_func_params();
					}
					break;
				}
				this.state = 712;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 2:
				{
				this.state = 713;
				this.expr_func_params();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_stmt(): Declare_stmtContext {
		let _localctx: Declare_stmtContext = new Declare_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, HiveSql.RULE_declare_stmt);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 716;
			this.match(HiveSql.T_DECLARE);
			this.state = 717;
			this.declare_stmt_item();
			this.state = 722;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 31, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 718;
					this.match(HiveSql.T_COMMA);
					this.state = 719;
					this.declare_stmt_item();
					}
					}
				}
				this.state = 724;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 31, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_block(): Declare_blockContext {
		let _localctx: Declare_blockContext = new Declare_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, HiveSql.RULE_declare_block);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 725;
			this.match(HiveSql.T_DECLARE);
			this.state = 726;
			this.declare_stmt_item();
			this.state = 727;
			this.match(HiveSql.T_SEMICOLON);
			this.state = 733;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 32, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 728;
					this.declare_stmt_item();
					this.state = 729;
					this.match(HiveSql.T_SEMICOLON);
					}
					}
				}
				this.state = 735;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 32, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_block_inplace(): Declare_block_inplaceContext {
		let _localctx: Declare_block_inplaceContext = new Declare_block_inplaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, HiveSql.RULE_declare_block_inplace);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 736;
			this.declare_stmt_item();
			this.state = 737;
			this.match(HiveSql.T_SEMICOLON);
			this.state = 743;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 738;
					this.declare_stmt_item();
					this.state = 739;
					this.match(HiveSql.T_SEMICOLON);
					}
					}
				}
				this.state = 745;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 33, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_stmt_item(): Declare_stmt_itemContext {
		let _localctx: Declare_stmt_itemContext = new Declare_stmt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, HiveSql.RULE_declare_stmt_item);
		try {
			this.state = 751;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 34, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 746;
				this.declare_cursor_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 747;
				this.declare_condition_item();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 748;
				this.declare_handler_item();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 749;
				this.declare_var_item();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 750;
				this.declare_temporary_table_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_var_item(): Declare_var_itemContext {
		let _localctx: Declare_var_itemContext = new Declare_var_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, HiveSql.RULE_declare_var_item);
		let _la: number;
		try {
			let _alt: number;
			this.state = 788;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 42, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 753;
				this.ident();
				this.state = 758;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 754;
					this.match(HiveSql.T_COMMA);
					this.state = 755;
					this.ident();
					}
					}
					this.state = 760;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 762;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 36, this._ctx) ) {
				case 1:
					{
					this.state = 761;
					this.match(HiveSql.T_AS);
					}
					break;
				}
				this.state = 764;
				this.dtype();
				this.state = 766;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 37, this._ctx) ) {
				case 1:
					{
					this.state = 765;
					this.dtype_len();
					}
					break;
				}
				this.state = 771;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 768;
						this.dtype_attr();
						}
						}
					}
					this.state = 773;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);
				}
				this.state = 775;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 39, this._ctx) ) {
				case 1:
					{
					this.state = 774;
					this.dtype_default();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 777;
				this.ident();
				this.state = 778;
				this.match(HiveSql.T_CONSTANT);
				this.state = 780;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 40, this._ctx) ) {
				case 1:
					{
					this.state = 779;
					this.match(HiveSql.T_AS);
					}
					break;
				}
				this.state = 782;
				this.dtype();
				this.state = 784;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_OPEN_P) {
					{
					this.state = 783;
					this.dtype_len();
					}
				}

				this.state = 786;
				this.dtype_default();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_condition_item(): Declare_condition_itemContext {
		let _localctx: Declare_condition_itemContext = new Declare_condition_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, HiveSql.RULE_declare_condition_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 790;
			this.ident();
			this.state = 791;
			this.match(HiveSql.T_CONDITION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_cursor_item(): Declare_cursor_itemContext {
		let _localctx: Declare_cursor_itemContext = new Declare_cursor_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, HiveSql.RULE_declare_cursor_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 798;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 43, this._ctx) ) {
			case 1:
				{
				this.state = 793;
				this.match(HiveSql.T_CURSOR);
				this.state = 794;
				this.ident();
				}
				break;

			case 2:
				{
				this.state = 795;
				this.ident();
				this.state = 796;
				this.match(HiveSql.T_CURSOR);
				}
				break;
			}
			this.state = 802;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_WITH:
				{
				this.state = 800;
				this.cursor_with_return();
				}
				break;
			case HiveSql.T_WITHOUT:
				{
				this.state = 801;
				this.cursor_without_return();
				}
				break;
			case HiveSql.T_AS:
			case HiveSql.T_FOR:
			case HiveSql.T_IS:
				break;
			default:
				break;
			}
			this.state = 804;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_AS || _la === HiveSql.T_FOR || _la === HiveSql.T_IS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 807;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 45, this._ctx) ) {
			case 1:
				{
				this.state = 805;
				this.select_stmt();
				}
				break;

			case 2:
				{
				this.state = 806;
				this.expr(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursor_with_return(): Cursor_with_returnContext {
		let _localctx: Cursor_with_returnContext = new Cursor_with_returnContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, HiveSql.RULE_cursor_with_return);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 809;
			this.match(HiveSql.T_WITH);
			this.state = 810;
			this.match(HiveSql.T_RETURN);
			this.state = 812;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_ONLY) {
				{
				this.state = 811;
				this.match(HiveSql.T_ONLY);
				}
			}

			this.state = 816;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_TO) {
				{
				this.state = 814;
				this.match(HiveSql.T_TO);
				this.state = 815;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_CALLER || _la === HiveSql.T_CLIENT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursor_without_return(): Cursor_without_returnContext {
		let _localctx: Cursor_without_returnContext = new Cursor_without_returnContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, HiveSql.RULE_cursor_without_return);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 818;
			this.match(HiveSql.T_WITHOUT);
			this.state = 819;
			this.match(HiveSql.T_RETURN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_handler_item(): Declare_handler_itemContext {
		let _localctx: Declare_handler_itemContext = new Declare_handler_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, HiveSql.RULE_declare_handler_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 821;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_CONTINUE || _la === HiveSql.T_EXIT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 822;
			this.match(HiveSql.T_HANDLER);
			this.state = 823;
			this.match(HiveSql.T_FOR);
			this.state = 829;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 48, this._ctx) ) {
			case 1:
				{
				this.state = 824;
				this.match(HiveSql.T_SQLEXCEPTION);
				}
				break;

			case 2:
				{
				this.state = 825;
				this.match(HiveSql.T_SQLWARNING);
				}
				break;

			case 3:
				{
				this.state = 826;
				this.match(HiveSql.T_NOT);
				this.state = 827;
				this.match(HiveSql.T_FOUND);
				}
				break;

			case 4:
				{
				this.state = 828;
				this.ident();
				}
				break;
			}
			this.state = 831;
			this.single_block_stmt();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_temporary_table_item(): Declare_temporary_table_itemContext {
		let _localctx: Declare_temporary_table_itemContext = new Declare_temporary_table_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, HiveSql.RULE_declare_temporary_table_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 834;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_GLOBAL) {
				{
				this.state = 833;
				this.match(HiveSql.T_GLOBAL);
				}
			}

			this.state = 836;
			this.match(HiveSql.T_TEMPORARY);
			this.state = 837;
			this.match(HiveSql.T_TABLE);
			this.state = 838;
			this.ident();
			this.state = 840;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_ROW || _la === HiveSql.T_STORED || _la === HiveSql.T_COMMA) {
				{
				this.state = 839;
				this.create_table_preoptions();
				}
			}

			this.state = 842;
			this.create_table_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_stmt(): Create_table_stmtContext {
		let _localctx: Create_table_stmtContext = new Create_table_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, HiveSql.RULE_create_table_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 844;
			this.match(HiveSql.T_CREATE);
			this.state = 845;
			this.match(HiveSql.T_TABLE);
			this.state = 849;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 51, this._ctx) ) {
			case 1:
				{
				this.state = 846;
				this.match(HiveSql.T_IF);
				this.state = 847;
				this.match(HiveSql.T_NOT);
				this.state = 848;
				this.match(HiveSql.T_EXISTS);
				}
				break;
			}
			this.state = 851;
			this.table_name();
			this.state = 853;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_ROW || _la === HiveSql.T_STORED || _la === HiveSql.T_COMMA) {
				{
				this.state = 852;
				this.create_table_preoptions();
				}
			}

			this.state = 855;
			this.create_table_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_local_temp_table_stmt(): Create_local_temp_table_stmtContext {
		let _localctx: Create_local_temp_table_stmtContext = new Create_local_temp_table_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, HiveSql.RULE_create_local_temp_table_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 857;
			this.match(HiveSql.T_CREATE);
			this.state = 864;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_LOCAL:
				{
				this.state = 858;
				this.match(HiveSql.T_LOCAL);
				this.state = 859;
				this.match(HiveSql.T_TEMPORARY);
				}
				break;
			case HiveSql.T_MULTISET:
			case HiveSql.T_SET:
			case HiveSql.T_VOLATILE:
				{
				this.state = 861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_MULTISET || _la === HiveSql.T_SET) {
					{
					this.state = 860;
					_la = this._input.LA(1);
					if (!(_la === HiveSql.T_MULTISET || _la === HiveSql.T_SET)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 863;
				this.match(HiveSql.T_VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 866;
			this.match(HiveSql.T_TABLE);
			this.state = 867;
			this.ident();
			this.state = 869;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_ROW || _la === HiveSql.T_STORED || _la === HiveSql.T_COMMA) {
				{
				this.state = 868;
				this.create_table_preoptions();
				}
			}

			this.state = 871;
			this.create_table_definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_definition(): Create_table_definitionContext {
		let _localctx: Create_table_definitionContext = new Create_table_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, HiveSql.RULE_create_table_definition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 888;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 58, this._ctx) ) {
			case 1:
				{
				this.state = 874;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_AS) {
					{
					this.state = 873;
					this.match(HiveSql.T_AS);
					}
				}

				this.state = 876;
				this.match(HiveSql.T_OPEN_P);
				this.state = 877;
				this.select_stmt();
				this.state = 878;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 2:
				{
				this.state = 881;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_AS) {
					{
					this.state = 880;
					this.match(HiveSql.T_AS);
					}
				}

				this.state = 883;
				this.select_stmt();
				}
				break;

			case 3:
				{
				this.state = 884;
				this.match(HiveSql.T_OPEN_P);
				this.state = 885;
				this.create_table_columns();
				this.state = 886;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			}
			this.state = 891;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 59, this._ctx) ) {
			case 1:
				{
				this.state = 890;
				this.create_table_options();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_columns(): Create_table_columnsContext {
		let _localctx: Create_table_columnsContext = new Create_table_columnsContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, HiveSql.RULE_create_table_columns);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 893;
			this.create_table_columns_item();
			this.state = 898;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 894;
				this.match(HiveSql.T_COMMA);
				this.state = 895;
				this.create_table_columns_item();
				}
				}
				this.state = 900;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_columns_item(): Create_table_columns_itemContext {
		let _localctx: Create_table_columns_itemContext = new Create_table_columns_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, HiveSql.RULE_create_table_columns_item);
		let _la: number;
		try {
			let _alt: number;
			this.state = 923;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 65, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 901;
				this.column_name();
				this.state = 902;
				this.dtype();
				this.state = 904;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_OPEN_P) {
					{
					this.state = 903;
					this.dtype_len();
					}
				}

				this.state = 909;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 906;
						this.dtype_attr();
						}
						}
					}
					this.state = 911;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);
				}
				this.state = 915;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_AUTO_INCREMENT || _la === HiveSql.T_DEFAULT || _la === HiveSql.T_ENABLE || _la === HiveSql.T_IDENTITY || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & ((1 << (HiveSql.T_NOT - 188)) | (1 << (HiveSql.T_NULL - 188)) | (1 << (HiveSql.T_PRIMARY - 188)))) !== 0) || _la === HiveSql.T_REFERENCES || _la === HiveSql.T_UNIQUE || _la === HiveSql.T_WITH || _la === HiveSql.T_COLON || _la === HiveSql.T_EQUAL) {
					{
					{
					this.state = 912;
					this.create_table_column_inline_cons();
					}
					}
					this.state = 917;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 920;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_CONSTRAINT) {
					{
					this.state = 918;
					this.match(HiveSql.T_CONSTRAINT);
					this.state = 919;
					this.ident();
					}
				}

				this.state = 922;
				this.create_table_column_cons();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_name(): Column_nameContext {
		let _localctx: Column_nameContext = new Column_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, HiveSql.RULE_column_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 925;
			this.ident();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_column_inline_cons(): Create_table_column_inline_consContext {
		let _localctx: Create_table_column_inline_consContext = new Create_table_column_inline_consContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, HiveSql.RULE_create_table_column_inline_cons);
		let _la: number;
		try {
			this.state = 959;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_DEFAULT:
			case HiveSql.T_WITH:
			case HiveSql.T_COLON:
			case HiveSql.T_EQUAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 927;
				this.dtype_default();
				}
				break;
			case HiveSql.T_NOT:
			case HiveSql.T_NULL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 929;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_NOT) {
					{
					this.state = 928;
					this.match(HiveSql.T_NOT);
					}
				}

				this.state = 931;
				this.match(HiveSql.T_NULL);
				}
				break;
			case HiveSql.T_PRIMARY:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 932;
				this.match(HiveSql.T_PRIMARY);
				this.state = 933;
				this.match(HiveSql.T_KEY);
				}
				break;
			case HiveSql.T_UNIQUE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 934;
				this.match(HiveSql.T_UNIQUE);
				}
				break;
			case HiveSql.T_REFERENCES:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 935;
				this.match(HiveSql.T_REFERENCES);
				this.state = 936;
				this.table_name();
				this.state = 937;
				this.match(HiveSql.T_OPEN_P);
				this.state = 938;
				this.ident();
				this.state = 939;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 943;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_ON) {
					{
					{
					this.state = 940;
					this.create_table_fk_action();
					}
					}
					this.state = 945;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case HiveSql.T_IDENTITY:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 946;
				this.match(HiveSql.T_IDENTITY);
				this.state = 947;
				this.match(HiveSql.T_OPEN_P);
				this.state = 948;
				this.match(HiveSql.L_INT);
				this.state = 953;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 949;
					this.match(HiveSql.T_COMMA);
					this.state = 950;
					this.match(HiveSql.L_INT);
					}
					}
					this.state = 955;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 956;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			case HiveSql.T_AUTO_INCREMENT:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 957;
				this.match(HiveSql.T_AUTO_INCREMENT);
				}
				break;
			case HiveSql.T_ENABLE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 958;
				this.match(HiveSql.T_ENABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_column_cons(): Create_table_column_consContext {
		let _localctx: Create_table_column_consContext = new Create_table_column_consContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, HiveSql.RULE_create_table_column_cons);
		let _la: number;
		try {
			this.state = 1018;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_PRIMARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 961;
				this.match(HiveSql.T_PRIMARY);
				this.state = 962;
				this.match(HiveSql.T_KEY);
				this.state = 964;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_CLUSTERED) {
					{
					this.state = 963;
					this.match(HiveSql.T_CLUSTERED);
					}
				}

				this.state = 966;
				this.match(HiveSql.T_OPEN_P);
				this.state = 967;
				this.ident();
				this.state = 969;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_ASC || _la === HiveSql.T_DESC) {
					{
					this.state = 968;
					_la = this._input.LA(1);
					if (!(_la === HiveSql.T_ASC || _la === HiveSql.T_DESC)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 978;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 971;
					this.match(HiveSql.T_COMMA);
					this.state = 972;
					this.ident();
					this.state = 974;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === HiveSql.T_ASC || _la === HiveSql.T_DESC) {
						{
						this.state = 973;
						_la = this._input.LA(1);
						if (!(_la === HiveSql.T_ASC || _la === HiveSql.T_DESC)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					}
					}
					this.state = 980;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 981;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 983;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_ENABLE) {
					{
					this.state = 982;
					this.match(HiveSql.T_ENABLE);
					}
				}

				this.state = 986;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_WITH) {
					{
					this.state = 985;
					this.index_storage_clause();
					}
				}

				}
				break;
			case HiveSql.T_FOREIGN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 988;
				this.match(HiveSql.T_FOREIGN);
				this.state = 989;
				this.match(HiveSql.T_KEY);
				this.state = 990;
				this.match(HiveSql.T_OPEN_P);
				this.state = 991;
				this.ident();
				this.state = 996;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 992;
					this.match(HiveSql.T_COMMA);
					this.state = 993;
					this.ident();
					}
					}
					this.state = 998;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 999;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 1000;
				this.match(HiveSql.T_REFERENCES);
				this.state = 1001;
				this.table_name();
				this.state = 1002;
				this.match(HiveSql.T_OPEN_P);
				this.state = 1003;
				this.ident();
				this.state = 1008;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 1004;
					this.match(HiveSql.T_COMMA);
					this.state = 1005;
					this.ident();
					}
					}
					this.state = 1010;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1011;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 1015;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_ON) {
					{
					{
					this.state = 1012;
					this.create_table_fk_action();
					}
					}
					this.state = 1017;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_fk_action(): Create_table_fk_actionContext {
		let _localctx: Create_table_fk_actionContext = new Create_table_fk_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, HiveSql.RULE_create_table_fk_action);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1020;
			this.match(HiveSql.T_ON);
			this.state = 1021;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_DELETE || _la === HiveSql.T_UPDATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1030;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 80, this._ctx) ) {
			case 1:
				{
				this.state = 1022;
				this.match(HiveSql.T_NO);
				this.state = 1023;
				this.match(HiveSql.T_ACTION);
				}
				break;

			case 2:
				{
				this.state = 1024;
				this.match(HiveSql.T_RESTRICT);
				}
				break;

			case 3:
				{
				this.state = 1025;
				this.match(HiveSql.T_SET);
				this.state = 1026;
				this.match(HiveSql.T_NULL);
				}
				break;

			case 4:
				{
				this.state = 1027;
				this.match(HiveSql.T_SET);
				this.state = 1028;
				this.match(HiveSql.T_DEFAULT);
				}
				break;

			case 5:
				{
				this.state = 1029;
				this.match(HiveSql.T_CASCADE);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_preoptions(): Create_table_preoptionsContext {
		let _localctx: Create_table_preoptionsContext = new Create_table_preoptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, HiveSql.RULE_create_table_preoptions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1033;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1032;
				this.create_table_preoptions_item();
				}
				}
				this.state = 1035;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === HiveSql.T_ROW || _la === HiveSql.T_STORED || _la === HiveSql.T_COMMA);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_preoptions_item(): Create_table_preoptions_itemContext {
		let _localctx: Create_table_preoptions_itemContext = new Create_table_preoptions_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, HiveSql.RULE_create_table_preoptions_item);
		try {
			this.state = 1040;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_COMMA:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1037;
				this.match(HiveSql.T_COMMA);
				this.state = 1038;
				this.create_table_preoptions_td_item();
				}
				break;
			case HiveSql.T_ROW:
			case HiveSql.T_STORED:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1039;
				this.create_table_options_hive_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_preoptions_td_item(): Create_table_preoptions_td_itemContext {
		let _localctx: Create_table_preoptions_td_itemContext = new Create_table_preoptions_td_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, HiveSql.RULE_create_table_preoptions_td_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1043;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_NO) {
				{
				this.state = 1042;
				this.match(HiveSql.T_NO);
				}
			}

			this.state = 1045;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_FALLBACK || _la === HiveSql.T_LOG)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_options(): Create_table_optionsContext {
		let _localctx: Create_table_optionsContext = new Create_table_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, HiveSql.RULE_create_table_options);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1048;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1047;
					this.create_table_options_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1050;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 84, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_options_item(): Create_table_options_itemContext {
		let _localctx: Create_table_options_itemContext = new Create_table_options_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, HiveSql.RULE_create_table_options_item);
		let _la: number;
		try {
			this.state = 1062;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 85, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1052;
				this.match(HiveSql.T_ON);
				this.state = 1053;
				this.match(HiveSql.T_COMMIT);
				this.state = 1054;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_DELETE || _la === HiveSql.T_PRESERVE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1055;
				this.match(HiveSql.T_ROWS);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1056;
				this.create_table_options_ora_item();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1057;
				this.create_table_options_db2_item();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1058;
				this.create_table_options_td_item();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1059;
				this.create_table_options_hive_item();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1060;
				this.create_table_options_mssql_item();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1061;
				this.create_table_options_mysql_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_options_ora_item(): Create_table_options_ora_itemContext {
		let _localctx: Create_table_options_ora_itemContext = new Create_table_options_ora_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, HiveSql.RULE_create_table_options_ora_item);
		let _la: number;
		try {
			this.state = 1082;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_SEGMENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1064;
				this.match(HiveSql.T_SEGMENT);
				this.state = 1065;
				this.match(HiveSql.T_CREATION);
				this.state = 1066;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_DEFERRED || _la === HiveSql.T_IMMEDIATE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case HiveSql.T_INITRANS:
			case HiveSql.T_MAXTRANS:
			case HiveSql.T_PCTFREE:
			case HiveSql.T_PCTUSED:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1067;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_INITRANS || _la === HiveSql.T_MAXTRANS || _la === HiveSql.T_PCTFREE || _la === HiveSql.T_PCTUSED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1068;
				this.match(HiveSql.L_INT);
				}
				break;
			case HiveSql.T_NOCOMPRESS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1069;
				this.match(HiveSql.T_NOCOMPRESS);
				}
				break;
			case HiveSql.T_LOGGING:
			case HiveSql.T_NOLOGGING:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1070;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_LOGGING || _la === HiveSql.T_NOLOGGING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case HiveSql.T_STORAGE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1071;
				this.match(HiveSql.T_STORAGE);
				this.state = 1072;
				this.match(HiveSql.T_OPEN_P);
				this.state = 1075;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 1075;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case HiveSql.T_ACTION:
					case HiveSql.T_ADD2:
					case HiveSql.T_ALL:
					case HiveSql.T_ALLOCATE:
					case HiveSql.T_ALTER:
					case HiveSql.T_AND:
					case HiveSql.T_ANSI_NULLS:
					case HiveSql.T_ANSI_PADDING:
					case HiveSql.T_AS:
					case HiveSql.T_ASC:
					case HiveSql.T_ASSOCIATE:
					case HiveSql.T_AT:
					case HiveSql.T_AUTO_INCREMENT:
					case HiveSql.T_AVG:
					case HiveSql.T_BATCHSIZE:
					case HiveSql.T_BEGIN:
					case HiveSql.T_BETWEEN:
					case HiveSql.T_BIGINT:
					case HiveSql.T_BINARY_DOUBLE:
					case HiveSql.T_BINARY_FLOAT:
					case HiveSql.T_BIT:
					case HiveSql.T_BODY:
					case HiveSql.T_BREAK:
					case HiveSql.T_BY:
					case HiveSql.T_BYTE:
					case HiveSql.T_CALL:
					case HiveSql.T_CALLER:
					case HiveSql.T_CASCADE:
					case HiveSql.T_CASE:
					case HiveSql.T_CASESPECIFIC:
					case HiveSql.T_CAST:
					case HiveSql.T_CHAR:
					case HiveSql.T_CHARACTER:
					case HiveSql.T_CHARSET:
					case HiveSql.T_CLIENT:
					case HiveSql.T_CLOSE:
					case HiveSql.T_CLUSTERED:
					case HiveSql.T_CMP:
					case HiveSql.T_COLLECT:
					case HiveSql.T_COLLECTION:
					case HiveSql.T_COLUMN:
					case HiveSql.T_COMMENT:
					case HiveSql.T_CONSTANT:
					case HiveSql.T_COMMIT:
					case HiveSql.T_COMPRESS:
					case HiveSql.T_CONCAT:
					case HiveSql.T_CONDITION:
					case HiveSql.T_CONSTRAINT:
					case HiveSql.T_CONTINUE:
					case HiveSql.T_COPY:
					case HiveSql.T_COUNT:
					case HiveSql.T_COUNT_BIG:
					case HiveSql.T_CREATE:
					case HiveSql.T_CREATION:
					case HiveSql.T_CREATOR:
					case HiveSql.T_CS:
					case HiveSql.T_CURRENT:
					case HiveSql.T_CURRENT_SCHEMA:
					case HiveSql.T_CURSOR:
					case HiveSql.T_DATABASE:
					case HiveSql.T_DATA:
					case HiveSql.T_DATE:
					case HiveSql.T_DATETIME:
					case HiveSql.T_DAY:
					case HiveSql.T_DAYS:
					case HiveSql.T_DEC:
					case HiveSql.T_DECIMAL:
					case HiveSql.T_DECLARE:
					case HiveSql.T_DEFAULT:
					case HiveSql.T_DEFERRED:
					case HiveSql.T_DEFINED:
					case HiveSql.T_DEFINER:
					case HiveSql.T_DEFINITION:
					case HiveSql.T_DELETE:
					case HiveSql.T_DELIMITED:
					case HiveSql.T_DELIMITER:
					case HiveSql.T_DESC:
					case HiveSql.T_DESCRIBE:
					case HiveSql.T_DIAGNOSTICS:
					case HiveSql.T_DIR:
					case HiveSql.T_DIRECTORY:
					case HiveSql.T_DISTINCT:
					case HiveSql.T_DISTRIBUTE:
					case HiveSql.T_DO:
					case HiveSql.T_DOUBLE:
					case HiveSql.T_DROP:
					case HiveSql.T_DYNAMIC:
					case HiveSql.T_ENABLE:
					case HiveSql.T_ENGINE:
					case HiveSql.T_ESCAPED:
					case HiveSql.T_EXCEPT:
					case HiveSql.T_EXEC:
					case HiveSql.T_EXECUTE:
					case HiveSql.T_EXCEPTION:
					case HiveSql.T_EXCLUSIVE:
					case HiveSql.T_EXISTS:
					case HiveSql.T_EXIT:
					case HiveSql.T_FALLBACK:
					case HiveSql.T_FALSE:
					case HiveSql.T_FETCH:
					case HiveSql.T_FIELDS:
					case HiveSql.T_FILE:
					case HiveSql.T_FILES:
					case HiveSql.T_FLOAT:
					case HiveSql.T_FOR:
					case HiveSql.T_FOREIGN:
					case HiveSql.T_FORMAT:
					case HiveSql.T_FOUND:
					case HiveSql.T_FROM:
					case HiveSql.T_FULL:
					case HiveSql.T_FUNCTION:
					case HiveSql.T_GET:
					case HiveSql.T_GLOBAL:
					case HiveSql.T_GO:
					case HiveSql.T_GRANT:
					case HiveSql.T_GROUP:
					case HiveSql.T_HANDLER:
					case HiveSql.T_HASH:
					case HiveSql.T_HAVING:
					case HiveSql.T_HDFS:
					case HiveSql.T_HIVE:
					case HiveSql.T_HOST:
					case HiveSql.T_IDENTITY:
					case HiveSql.T_IF:
					case HiveSql.T_IGNORE:
					case HiveSql.T_IMMEDIATE:
					case HiveSql.T_IN:
					case HiveSql.T_INCLUDE:
					case HiveSql.T_INDEX:
					case HiveSql.T_INITRANS:
					case HiveSql.T_INNER:
					case HiveSql.T_INOUT:
					case HiveSql.T_INSERT:
					case HiveSql.T_INT:
					case HiveSql.T_INT2:
					case HiveSql.T_INT4:
					case HiveSql.T_INT8:
					case HiveSql.T_INTEGER:
					case HiveSql.T_INTERSECT:
					case HiveSql.T_INTERVAL:
					case HiveSql.T_INTO:
					case HiveSql.T_INVOKER:
					case HiveSql.T_IS:
					case HiveSql.T_ISOPEN:
					case HiveSql.T_ITEMS:
					case HiveSql.T_JOIN:
					case HiveSql.T_KEEP:
					case HiveSql.T_KEY:
					case HiveSql.T_KEYS:
					case HiveSql.T_LANGUAGE:
					case HiveSql.T_LEAVE:
					case HiveSql.T_LEFT:
					case HiveSql.T_LIKE:
					case HiveSql.T_LIMIT:
					case HiveSql.T_LINES:
					case HiveSql.T_LOCAL:
					case HiveSql.T_LOCATION:
					case HiveSql.T_LOCATOR:
					case HiveSql.T_LOCATORS:
					case HiveSql.T_LOCKS:
					case HiveSql.T_LOG:
					case HiveSql.T_LOGGED:
					case HiveSql.T_LOGGING:
					case HiveSql.T_LOOP:
					case HiveSql.T_MAP:
					case HiveSql.T_MATCHED:
					case HiveSql.T_MAX:
					case HiveSql.T_MAXTRANS:
					case HiveSql.T_MERGE:
					case HiveSql.T_MESSAGE_TEXT:
					case HiveSql.T_MICROSECOND:
					case HiveSql.T_MICROSECONDS:
					case HiveSql.T_MIN:
					case HiveSql.T_MULTISET:
					case HiveSql.T_NCHAR:
					case HiveSql.T_NEW:
					case HiveSql.T_NVARCHAR:
					case HiveSql.T_NO:
					case HiveSql.T_NOCOUNT:
					case HiveSql.T_NOCOMPRESS:
					case HiveSql.T_NOLOGGING:
					case HiveSql.T_NONE:
					case HiveSql.T_NOT:
					case HiveSql.T_NOTFOUND:
					case HiveSql.T_NUMERIC:
					case HiveSql.T_NUMBER:
					case HiveSql.T_OBJECT:
					case HiveSql.T_OFF:
					case HiveSql.T_ON:
					case HiveSql.T_ONLY:
					case HiveSql.T_OPEN:
					case HiveSql.T_OR:
					case HiveSql.T_ORDER:
					case HiveSql.T_OUT:
					case HiveSql.T_OUTER:
					case HiveSql.T_OVER:
					case HiveSql.T_OVERWRITE:
					case HiveSql.T_OWNER:
					case HiveSql.T_PACKAGE:
					case HiveSql.T_PARTITION:
					case HiveSql.T_PCTFREE:
					case HiveSql.T_PCTUSED:
					case HiveSql.T_PRECISION:
					case HiveSql.T_PRESERVE:
					case HiveSql.T_PRIMARY:
					case HiveSql.T_PRINT:
					case HiveSql.T_PROC:
					case HiveSql.T_PROCEDURE:
					case HiveSql.T_QUALIFY:
					case HiveSql.T_QUERY_BAND:
					case HiveSql.T_QUIT:
					case HiveSql.T_QUOTED_IDENTIFIER:
					case HiveSql.T_RAISE:
					case HiveSql.T_REAL:
					case HiveSql.T_REFERENCES:
					case HiveSql.T_REGEXP:
					case HiveSql.T_REPLACE:
					case HiveSql.T_RESIGNAL:
					case HiveSql.T_RESTRICT:
					case HiveSql.T_RESULT:
					case HiveSql.T_RESULT_SET_LOCATOR:
					case HiveSql.T_RETURN:
					case HiveSql.T_RETURNS:
					case HiveSql.T_REVERSE:
					case HiveSql.T_RIGHT:
					case HiveSql.T_RLIKE:
					case HiveSql.T_ROLE:
					case HiveSql.T_ROLLBACK:
					case HiveSql.T_ROW:
					case HiveSql.T_ROWS:
					case HiveSql.T_ROW_COUNT:
					case HiveSql.T_RR:
					case HiveSql.T_RS:
					case HiveSql.T_PWD:
					case HiveSql.T_TRIM:
					case HiveSql.T_SCHEMA:
					case HiveSql.T_SECOND:
					case HiveSql.T_SECONDS:
					case HiveSql.T_SECURITY:
					case HiveSql.T_SEGMENT:
					case HiveSql.T_SEL:
					case HiveSql.T_SELECT:
					case HiveSql.T_SET:
					case HiveSql.T_SESSION:
					case HiveSql.T_SESSIONS:
					case HiveSql.T_SETS:
					case HiveSql.T_SHARE:
					case HiveSql.T_SIGNAL:
					case HiveSql.T_SIMPLE_DOUBLE:
					case HiveSql.T_SIMPLE_FLOAT:
					case HiveSql.T_SMALLDATETIME:
					case HiveSql.T_SMALLINT:
					case HiveSql.T_SQL:
					case HiveSql.T_SQLEXCEPTION:
					case HiveSql.T_SQLINSERT:
					case HiveSql.T_SQLSTATE:
					case HiveSql.T_SQLWARNING:
					case HiveSql.T_STATS:
					case HiveSql.T_STATISTICS:
					case HiveSql.T_STEP:
					case HiveSql.T_STORAGE:
					case HiveSql.T_STORED:
					case HiveSql.T_STRING:
					case HiveSql.T_SUBDIR:
					case HiveSql.T_SUBSTRING:
					case HiveSql.T_SUM:
					case HiveSql.T_SUMMARY:
					case HiveSql.T_SYS_REFCURSOR:
					case HiveSql.T_TABLE:
					case HiveSql.T_TABLESPACE:
					case HiveSql.T_TEMPORARY:
					case HiveSql.T_TERMINATED:
					case HiveSql.T_TEXTIMAGE_ON:
					case HiveSql.T_THEN:
					case HiveSql.T_TIMESTAMP:
					case HiveSql.T_TITLE:
					case HiveSql.T_TO:
					case HiveSql.T_TOP:
					case HiveSql.T_TRANSACTION:
					case HiveSql.T_TRUE:
					case HiveSql.T_TRUNCATE:
					case HiveSql.T_UNIQUE:
					case HiveSql.T_UPDATE:
					case HiveSql.T_UR:
					case HiveSql.T_USE:
					case HiveSql.T_USING:
					case HiveSql.T_VALUE:
					case HiveSql.T_VALUES:
					case HiveSql.T_VAR:
					case HiveSql.T_VARCHAR:
					case HiveSql.T_VARCHAR2:
					case HiveSql.T_VARYING:
					case HiveSql.T_VOLATILE:
					case HiveSql.T_WHILE:
					case HiveSql.T_WITH:
					case HiveSql.T_WITHOUT:
					case HiveSql.T_WORK:
					case HiveSql.T_XACT_ABORT:
					case HiveSql.T_XML:
					case HiveSql.T_YES:
					case HiveSql.T_ACTIVITY_COUNT:
					case HiveSql.T_CUME_DIST:
					case HiveSql.T_CURRENT_DATE:
					case HiveSql.T_CURRENT_TIMESTAMP:
					case HiveSql.T_CURRENT_USER:
					case HiveSql.T_DENSE_RANK:
					case HiveSql.T_FIRST_VALUE:
					case HiveSql.T_LAG:
					case HiveSql.T_LAST_VALUE:
					case HiveSql.T_LEAD:
					case HiveSql.T_PART_COUNT:
					case HiveSql.T_PART_LOC:
					case HiveSql.T_RANK:
					case HiveSql.T_ROW_NUMBER:
					case HiveSql.T_STDEV:
					case HiveSql.T_SYSDATE:
					case HiveSql.T_VARIANCE:
					case HiveSql.T_USER:
					case HiveSql.L_ID:
						{
						this.state = 1073;
						this.ident();
						}
						break;
					case HiveSql.L_INT:
						{
						this.state = 1074;
						this.match(HiveSql.L_INT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					this.state = 1077;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveSql.T_ACTION) | (1 << HiveSql.T_ADD2) | (1 << HiveSql.T_ALL) | (1 << HiveSql.T_ALLOCATE) | (1 << HiveSql.T_ALTER) | (1 << HiveSql.T_AND) | (1 << HiveSql.T_ANSI_NULLS) | (1 << HiveSql.T_ANSI_PADDING) | (1 << HiveSql.T_AS) | (1 << HiveSql.T_ASC) | (1 << HiveSql.T_ASSOCIATE) | (1 << HiveSql.T_AT) | (1 << HiveSql.T_AUTO_INCREMENT) | (1 << HiveSql.T_AVG) | (1 << HiveSql.T_BATCHSIZE) | (1 << HiveSql.T_BEGIN) | (1 << HiveSql.T_BETWEEN) | (1 << HiveSql.T_BIGINT) | (1 << HiveSql.T_BINARY_DOUBLE) | (1 << HiveSql.T_BINARY_FLOAT) | (1 << HiveSql.T_BIT) | (1 << HiveSql.T_BODY) | (1 << HiveSql.T_BREAK) | (1 << HiveSql.T_BY) | (1 << HiveSql.T_BYTE) | (1 << HiveSql.T_CALL) | (1 << HiveSql.T_CALLER) | (1 << HiveSql.T_CASCADE) | (1 << HiveSql.T_CASE) | (1 << HiveSql.T_CASESPECIFIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (HiveSql.T_CAST - 32)) | (1 << (HiveSql.T_CHAR - 32)) | (1 << (HiveSql.T_CHARACTER - 32)) | (1 << (HiveSql.T_CHARSET - 32)) | (1 << (HiveSql.T_CLIENT - 32)) | (1 << (HiveSql.T_CLOSE - 32)) | (1 << (HiveSql.T_CLUSTERED - 32)) | (1 << (HiveSql.T_CMP - 32)) | (1 << (HiveSql.T_COLLECT - 32)) | (1 << (HiveSql.T_COLLECTION - 32)) | (1 << (HiveSql.T_COLUMN - 32)) | (1 << (HiveSql.T_COMMENT - 32)) | (1 << (HiveSql.T_CONSTANT - 32)) | (1 << (HiveSql.T_COMMIT - 32)) | (1 << (HiveSql.T_COMPRESS - 32)) | (1 << (HiveSql.T_CONCAT - 32)) | (1 << (HiveSql.T_CONDITION - 32)) | (1 << (HiveSql.T_CONSTRAINT - 32)) | (1 << (HiveSql.T_CONTINUE - 32)) | (1 << (HiveSql.T_COPY - 32)) | (1 << (HiveSql.T_COUNT - 32)) | (1 << (HiveSql.T_COUNT_BIG - 32)) | (1 << (HiveSql.T_CREATE - 32)) | (1 << (HiveSql.T_CREATION - 32)) | (1 << (HiveSql.T_CREATOR - 32)) | (1 << (HiveSql.T_CS - 32)) | (1 << (HiveSql.T_CURRENT - 32)) | (1 << (HiveSql.T_CURRENT_SCHEMA - 32)) | (1 << (HiveSql.T_CURSOR - 32)) | (1 << (HiveSql.T_DATABASE - 32)) | (1 << (HiveSql.T_DATA - 32)) | (1 << (HiveSql.T_DATE - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (HiveSql.T_DATETIME - 64)) | (1 << (HiveSql.T_DAY - 64)) | (1 << (HiveSql.T_DAYS - 64)) | (1 << (HiveSql.T_DEC - 64)) | (1 << (HiveSql.T_DECIMAL - 64)) | (1 << (HiveSql.T_DECLARE - 64)) | (1 << (HiveSql.T_DEFAULT - 64)) | (1 << (HiveSql.T_DEFERRED - 64)) | (1 << (HiveSql.T_DEFINED - 64)) | (1 << (HiveSql.T_DEFINER - 64)) | (1 << (HiveSql.T_DEFINITION - 64)) | (1 << (HiveSql.T_DELETE - 64)) | (1 << (HiveSql.T_DELIMITED - 64)) | (1 << (HiveSql.T_DELIMITER - 64)) | (1 << (HiveSql.T_DESC - 64)) | (1 << (HiveSql.T_DESCRIBE - 64)) | (1 << (HiveSql.T_DIAGNOSTICS - 64)) | (1 << (HiveSql.T_DIR - 64)) | (1 << (HiveSql.T_DIRECTORY - 64)) | (1 << (HiveSql.T_DISTINCT - 64)) | (1 << (HiveSql.T_DISTRIBUTE - 64)) | (1 << (HiveSql.T_DO - 64)) | (1 << (HiveSql.T_DOUBLE - 64)) | (1 << (HiveSql.T_DROP - 64)) | (1 << (HiveSql.T_DYNAMIC - 64)) | (1 << (HiveSql.T_ENABLE - 64)) | (1 << (HiveSql.T_ENGINE - 64)) | (1 << (HiveSql.T_ESCAPED - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (HiveSql.T_EXCEPT - 96)) | (1 << (HiveSql.T_EXEC - 96)) | (1 << (HiveSql.T_EXECUTE - 96)) | (1 << (HiveSql.T_EXCEPTION - 96)) | (1 << (HiveSql.T_EXCLUSIVE - 96)) | (1 << (HiveSql.T_EXISTS - 96)) | (1 << (HiveSql.T_EXIT - 96)) | (1 << (HiveSql.T_FALLBACK - 96)) | (1 << (HiveSql.T_FALSE - 96)) | (1 << (HiveSql.T_FETCH - 96)) | (1 << (HiveSql.T_FIELDS - 96)) | (1 << (HiveSql.T_FILE - 96)) | (1 << (HiveSql.T_FILES - 96)) | (1 << (HiveSql.T_FLOAT - 96)) | (1 << (HiveSql.T_FOR - 96)) | (1 << (HiveSql.T_FOREIGN - 96)) | (1 << (HiveSql.T_FORMAT - 96)) | (1 << (HiveSql.T_FOUND - 96)) | (1 << (HiveSql.T_FROM - 96)) | (1 << (HiveSql.T_FULL - 96)) | (1 << (HiveSql.T_FUNCTION - 96)) | (1 << (HiveSql.T_GET - 96)) | (1 << (HiveSql.T_GLOBAL - 96)) | (1 << (HiveSql.T_GO - 96)) | (1 << (HiveSql.T_GRANT - 96)) | (1 << (HiveSql.T_GROUP - 96)) | (1 << (HiveSql.T_HANDLER - 96)) | (1 << (HiveSql.T_HASH - 96)) | (1 << (HiveSql.T_HAVING - 96)) | (1 << (HiveSql.T_HDFS - 96)) | (1 << (HiveSql.T_HIVE - 96)) | (1 << (HiveSql.T_HOST - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (HiveSql.T_IDENTITY - 128)) | (1 << (HiveSql.T_IF - 128)) | (1 << (HiveSql.T_IGNORE - 128)) | (1 << (HiveSql.T_IMMEDIATE - 128)) | (1 << (HiveSql.T_IN - 128)) | (1 << (HiveSql.T_INCLUDE - 128)) | (1 << (HiveSql.T_INDEX - 128)) | (1 << (HiveSql.T_INITRANS - 128)) | (1 << (HiveSql.T_INNER - 128)) | (1 << (HiveSql.T_INOUT - 128)) | (1 << (HiveSql.T_INSERT - 128)) | (1 << (HiveSql.T_INT - 128)) | (1 << (HiveSql.T_INT2 - 128)) | (1 << (HiveSql.T_INT4 - 128)) | (1 << (HiveSql.T_INT8 - 128)) | (1 << (HiveSql.T_INTEGER - 128)) | (1 << (HiveSql.T_INTERSECT - 128)) | (1 << (HiveSql.T_INTERVAL - 128)) | (1 << (HiveSql.T_INTO - 128)) | (1 << (HiveSql.T_INVOKER - 128)) | (1 << (HiveSql.T_IS - 128)) | (1 << (HiveSql.T_ISOPEN - 128)) | (1 << (HiveSql.T_ITEMS - 128)) | (1 << (HiveSql.T_JOIN - 128)) | (1 << (HiveSql.T_KEEP - 128)) | (1 << (HiveSql.T_KEY - 128)) | (1 << (HiveSql.T_KEYS - 128)) | (1 << (HiveSql.T_LANGUAGE - 128)) | (1 << (HiveSql.T_LEAVE - 128)) | (1 << (HiveSql.T_LEFT - 128)) | (1 << (HiveSql.T_LIKE - 128)) | (1 << (HiveSql.T_LIMIT - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (HiveSql.T_LINES - 160)) | (1 << (HiveSql.T_LOCAL - 160)) | (1 << (HiveSql.T_LOCATION - 160)) | (1 << (HiveSql.T_LOCATOR - 160)) | (1 << (HiveSql.T_LOCATORS - 160)) | (1 << (HiveSql.T_LOCKS - 160)) | (1 << (HiveSql.T_LOG - 160)) | (1 << (HiveSql.T_LOGGED - 160)) | (1 << (HiveSql.T_LOGGING - 160)) | (1 << (HiveSql.T_LOOP - 160)) | (1 << (HiveSql.T_MAP - 160)) | (1 << (HiveSql.T_MATCHED - 160)) | (1 << (HiveSql.T_MAX - 160)) | (1 << (HiveSql.T_MAXTRANS - 160)) | (1 << (HiveSql.T_MERGE - 160)) | (1 << (HiveSql.T_MESSAGE_TEXT - 160)) | (1 << (HiveSql.T_MICROSECOND - 160)) | (1 << (HiveSql.T_MICROSECONDS - 160)) | (1 << (HiveSql.T_MIN - 160)) | (1 << (HiveSql.T_MULTISET - 160)) | (1 << (HiveSql.T_NCHAR - 160)) | (1 << (HiveSql.T_NEW - 160)) | (1 << (HiveSql.T_NVARCHAR - 160)) | (1 << (HiveSql.T_NO - 160)) | (1 << (HiveSql.T_NOCOUNT - 160)) | (1 << (HiveSql.T_NOCOMPRESS - 160)) | (1 << (HiveSql.T_NOLOGGING - 160)) | (1 << (HiveSql.T_NONE - 160)) | (1 << (HiveSql.T_NOT - 160)) | (1 << (HiveSql.T_NOTFOUND - 160)) | (1 << (HiveSql.T_NUMERIC - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (HiveSql.T_NUMBER - 192)) | (1 << (HiveSql.T_OBJECT - 192)) | (1 << (HiveSql.T_OFF - 192)) | (1 << (HiveSql.T_ON - 192)) | (1 << (HiveSql.T_ONLY - 192)) | (1 << (HiveSql.T_OPEN - 192)) | (1 << (HiveSql.T_OR - 192)) | (1 << (HiveSql.T_ORDER - 192)) | (1 << (HiveSql.T_OUT - 192)) | (1 << (HiveSql.T_OUTER - 192)) | (1 << (HiveSql.T_OVER - 192)) | (1 << (HiveSql.T_OVERWRITE - 192)) | (1 << (HiveSql.T_OWNER - 192)) | (1 << (HiveSql.T_PACKAGE - 192)) | (1 << (HiveSql.T_PARTITION - 192)) | (1 << (HiveSql.T_PCTFREE - 192)) | (1 << (HiveSql.T_PCTUSED - 192)) | (1 << (HiveSql.T_PRECISION - 192)) | (1 << (HiveSql.T_PRESERVE - 192)) | (1 << (HiveSql.T_PRIMARY - 192)) | (1 << (HiveSql.T_PRINT - 192)) | (1 << (HiveSql.T_PROC - 192)) | (1 << (HiveSql.T_PROCEDURE - 192)) | (1 << (HiveSql.T_QUALIFY - 192)) | (1 << (HiveSql.T_QUERY_BAND - 192)) | (1 << (HiveSql.T_QUIT - 192)) | (1 << (HiveSql.T_QUOTED_IDENTIFIER - 192)) | (1 << (HiveSql.T_RAISE - 192)) | (1 << (HiveSql.T_REAL - 192)) | (1 << (HiveSql.T_REFERENCES - 192)) | (1 << (HiveSql.T_REGEXP - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (HiveSql.T_REPLACE - 224)) | (1 << (HiveSql.T_RESIGNAL - 224)) | (1 << (HiveSql.T_RESTRICT - 224)) | (1 << (HiveSql.T_RESULT - 224)) | (1 << (HiveSql.T_RESULT_SET_LOCATOR - 224)) | (1 << (HiveSql.T_RETURN - 224)) | (1 << (HiveSql.T_RETURNS - 224)) | (1 << (HiveSql.T_REVERSE - 224)) | (1 << (HiveSql.T_RIGHT - 224)) | (1 << (HiveSql.T_RLIKE - 224)) | (1 << (HiveSql.T_ROLE - 224)) | (1 << (HiveSql.T_ROLLBACK - 224)) | (1 << (HiveSql.T_ROW - 224)) | (1 << (HiveSql.T_ROWS - 224)) | (1 << (HiveSql.T_ROW_COUNT - 224)) | (1 << (HiveSql.T_RR - 224)) | (1 << (HiveSql.T_RS - 224)) | (1 << (HiveSql.T_PWD - 224)) | (1 << (HiveSql.T_TRIM - 224)) | (1 << (HiveSql.T_SCHEMA - 224)) | (1 << (HiveSql.T_SECOND - 224)) | (1 << (HiveSql.T_SECONDS - 224)) | (1 << (HiveSql.T_SECURITY - 224)) | (1 << (HiveSql.T_SEGMENT - 224)) | (1 << (HiveSql.T_SEL - 224)) | (1 << (HiveSql.T_SELECT - 224)) | (1 << (HiveSql.T_SET - 224)) | (1 << (HiveSql.T_SESSION - 224)) | (1 << (HiveSql.T_SESSIONS - 224)) | (1 << (HiveSql.T_SETS - 224)) | (1 << (HiveSql.T_SHARE - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (HiveSql.T_SIGNAL - 256)) | (1 << (HiveSql.T_SIMPLE_DOUBLE - 256)) | (1 << (HiveSql.T_SIMPLE_FLOAT - 256)) | (1 << (HiveSql.T_SMALLDATETIME - 256)) | (1 << (HiveSql.T_SMALLINT - 256)) | (1 << (HiveSql.T_SQL - 256)) | (1 << (HiveSql.T_SQLEXCEPTION - 256)) | (1 << (HiveSql.T_SQLINSERT - 256)) | (1 << (HiveSql.T_SQLSTATE - 256)) | (1 << (HiveSql.T_SQLWARNING - 256)) | (1 << (HiveSql.T_STATS - 256)) | (1 << (HiveSql.T_STATISTICS - 256)) | (1 << (HiveSql.T_STEP - 256)) | (1 << (HiveSql.T_STORAGE - 256)) | (1 << (HiveSql.T_STORED - 256)) | (1 << (HiveSql.T_STRING - 256)) | (1 << (HiveSql.T_SUBDIR - 256)) | (1 << (HiveSql.T_SUBSTRING - 256)) | (1 << (HiveSql.T_SUM - 256)) | (1 << (HiveSql.T_SUMMARY - 256)) | (1 << (HiveSql.T_SYS_REFCURSOR - 256)) | (1 << (HiveSql.T_TABLE - 256)) | (1 << (HiveSql.T_TABLESPACE - 256)) | (1 << (HiveSql.T_TEMPORARY - 256)) | (1 << (HiveSql.T_TERMINATED - 256)) | (1 << (HiveSql.T_TEXTIMAGE_ON - 256)) | (1 << (HiveSql.T_THEN - 256)) | (1 << (HiveSql.T_TIMESTAMP - 256)) | (1 << (HiveSql.T_TITLE - 256)) | (1 << (HiveSql.T_TO - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (HiveSql.T_TOP - 288)) | (1 << (HiveSql.T_TRANSACTION - 288)) | (1 << (HiveSql.T_TRUE - 288)) | (1 << (HiveSql.T_TRUNCATE - 288)) | (1 << (HiveSql.T_UNIQUE - 288)) | (1 << (HiveSql.T_UPDATE - 288)) | (1 << (HiveSql.T_UR - 288)) | (1 << (HiveSql.T_USE - 288)) | (1 << (HiveSql.T_USING - 288)) | (1 << (HiveSql.T_VALUE - 288)) | (1 << (HiveSql.T_VALUES - 288)) | (1 << (HiveSql.T_VAR - 288)) | (1 << (HiveSql.T_VARCHAR - 288)) | (1 << (HiveSql.T_VARCHAR2 - 288)) | (1 << (HiveSql.T_VARYING - 288)) | (1 << (HiveSql.T_VOLATILE - 288)) | (1 << (HiveSql.T_WHILE - 288)) | (1 << (HiveSql.T_WITH - 288)) | (1 << (HiveSql.T_WITHOUT - 288)) | (1 << (HiveSql.T_WORK - 288)) | (1 << (HiveSql.T_XACT_ABORT - 288)) | (1 << (HiveSql.T_XML - 288)) | (1 << (HiveSql.T_YES - 288)) | (1 << (HiveSql.T_ACTIVITY_COUNT - 288)) | (1 << (HiveSql.T_CUME_DIST - 288)) | (1 << (HiveSql.T_CURRENT_DATE - 288)) | (1 << (HiveSql.T_CURRENT_TIMESTAMP - 288)) | (1 << (HiveSql.T_CURRENT_USER - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (HiveSql.T_DENSE_RANK - 320)) | (1 << (HiveSql.T_FIRST_VALUE - 320)) | (1 << (HiveSql.T_LAG - 320)) | (1 << (HiveSql.T_LAST_VALUE - 320)) | (1 << (HiveSql.T_LEAD - 320)) | (1 << (HiveSql.T_PART_COUNT - 320)) | (1 << (HiveSql.T_PART_LOC - 320)) | (1 << (HiveSql.T_RANK - 320)) | (1 << (HiveSql.T_ROW_NUMBER - 320)) | (1 << (HiveSql.T_STDEV - 320)) | (1 << (HiveSql.T_SYSDATE - 320)) | (1 << (HiveSql.T_VARIANCE - 320)) | (1 << (HiveSql.T_USER - 320)))) !== 0) || _la === HiveSql.L_ID || _la === HiveSql.L_INT);
				this.state = 1079;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			case HiveSql.T_TABLESPACE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1080;
				this.match(HiveSql.T_TABLESPACE);
				this.state = 1081;
				this.ident();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_options_db2_item(): Create_table_options_db2_itemContext {
		let _localctx: Create_table_options_db2_itemContext = new Create_table_options_db2_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, HiveSql.RULE_create_table_options_db2_item);
		let _la: number;
		try {
			this.state = 1117;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 92, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1085;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_INDEX) {
					{
					this.state = 1084;
					this.match(HiveSql.T_INDEX);
					}
				}

				this.state = 1087;
				this.match(HiveSql.T_IN);
				this.state = 1088;
				this.ident();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1089;
				this.match(HiveSql.T_WITH);
				this.state = 1090;
				this.match(HiveSql.T_REPLACE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1091;
				this.match(HiveSql.T_DISTRIBUTE);
				this.state = 1092;
				this.match(HiveSql.T_BY);
				this.state = 1093;
				this.match(HiveSql.T_HASH);
				this.state = 1094;
				this.match(HiveSql.T_OPEN_P);
				this.state = 1095;
				this.ident();
				this.state = 1100;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 1096;
					this.match(HiveSql.T_COMMA);
					this.state = 1097;
					this.ident();
					}
					}
					this.state = 1102;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1103;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1106;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_NOT) {
					{
					this.state = 1105;
					this.match(HiveSql.T_NOT);
					}
				}

				this.state = 1108;
				this.match(HiveSql.T_LOGGED);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1109;
				this.match(HiveSql.T_COMPRESS);
				this.state = 1110;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_NO || _la === HiveSql.T_YES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1111;
				this.match(HiveSql.T_DEFINITION);
				this.state = 1112;
				this.match(HiveSql.T_ONLY);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1113;
				this.match(HiveSql.T_WITH);
				this.state = 1114;
				this.match(HiveSql.T_RESTRICT);
				this.state = 1115;
				this.match(HiveSql.T_ON);
				this.state = 1116;
				this.match(HiveSql.T_DROP);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_options_td_item(): Create_table_options_td_itemContext {
		let _localctx: Create_table_options_td_itemContext = new Create_table_options_td_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, HiveSql.RULE_create_table_options_td_item);
		let _la: number;
		try {
			this.state = 1137;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_PRIMARY:
			case HiveSql.T_UNIQUE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1120;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_UNIQUE) {
					{
					this.state = 1119;
					this.match(HiveSql.T_UNIQUE);
					}
				}

				this.state = 1122;
				this.match(HiveSql.T_PRIMARY);
				this.state = 1123;
				this.match(HiveSql.T_INDEX);
				this.state = 1124;
				this.match(HiveSql.T_OPEN_P);
				this.state = 1125;
				this.ident();
				this.state = 1130;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 1126;
					this.match(HiveSql.T_COMMA);
					this.state = 1127;
					this.ident();
					}
					}
					this.state = 1132;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1133;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			case HiveSql.T_WITH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1135;
				this.match(HiveSql.T_WITH);
				this.state = 1136;
				this.match(HiveSql.T_DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_options_hive_item(): Create_table_options_hive_itemContext {
		let _localctx: Create_table_options_hive_itemContext = new Create_table_options_hive_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, HiveSql.RULE_create_table_options_hive_item);
		try {
			this.state = 1143;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_ROW:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1139;
				this.create_table_hive_row_format();
				}
				break;
			case HiveSql.T_STORED:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1140;
				this.match(HiveSql.T_STORED);
				this.state = 1141;
				this.match(HiveSql.T_AS);
				this.state = 1142;
				this.ident();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_hive_row_format(): Create_table_hive_row_formatContext {
		let _localctx: Create_table_hive_row_formatContext = new Create_table_hive_row_formatContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, HiveSql.RULE_create_table_hive_row_format);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1145;
			this.match(HiveSql.T_ROW);
			this.state = 1146;
			this.match(HiveSql.T_FORMAT);
			this.state = 1147;
			this.match(HiveSql.T_DELIMITED);
			this.state = 1151;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 97, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1148;
					this.create_table_hive_row_format_fields();
					}
					}
				}
				this.state = 1153;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 97, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_hive_row_format_fields(): Create_table_hive_row_format_fieldsContext {
		let _localctx: Create_table_hive_row_format_fieldsContext = new Create_table_hive_row_format_fieldsContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, HiveSql.RULE_create_table_hive_row_format_fields);
		try {
			this.state = 1181;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_FIELDS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1154;
				this.match(HiveSql.T_FIELDS);
				this.state = 1155;
				this.match(HiveSql.T_TERMINATED);
				this.state = 1156;
				this.match(HiveSql.T_BY);
				this.state = 1157;
				this.expr(0);
				this.state = 1161;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 98, this._ctx) ) {
				case 1:
					{
					this.state = 1158;
					this.match(HiveSql.T_ESCAPED);
					this.state = 1159;
					this.match(HiveSql.T_BY);
					this.state = 1160;
					this.expr(0);
					}
					break;
				}
				}
				break;
			case HiveSql.T_COLLECTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1163;
				this.match(HiveSql.T_COLLECTION);
				this.state = 1164;
				this.match(HiveSql.T_ITEMS);
				this.state = 1165;
				this.match(HiveSql.T_TERMINATED);
				this.state = 1166;
				this.match(HiveSql.T_BY);
				this.state = 1167;
				this.expr(0);
				}
				break;
			case HiveSql.T_MAP:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1168;
				this.match(HiveSql.T_MAP);
				this.state = 1169;
				this.match(HiveSql.T_KEYS);
				this.state = 1170;
				this.match(HiveSql.T_TERMINATED);
				this.state = 1171;
				this.match(HiveSql.T_BY);
				this.state = 1172;
				this.expr(0);
				}
				break;
			case HiveSql.T_LINES:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1173;
				this.match(HiveSql.T_LINES);
				this.state = 1174;
				this.match(HiveSql.T_TERMINATED);
				this.state = 1175;
				this.match(HiveSql.T_BY);
				this.state = 1176;
				this.expr(0);
				}
				break;
			case HiveSql.T_NULL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1177;
				this.match(HiveSql.T_NULL);
				this.state = 1178;
				this.match(HiveSql.T_DEFINED);
				this.state = 1179;
				this.match(HiveSql.T_AS);
				this.state = 1180;
				this.expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_options_mssql_item(): Create_table_options_mssql_itemContext {
		let _localctx: Create_table_options_mssql_itemContext = new Create_table_options_mssql_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, HiveSql.RULE_create_table_options_mssql_item);
		try {
			this.state = 1187;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_ON:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1183;
				this.match(HiveSql.T_ON);
				this.state = 1184;
				this.ident();
				}
				break;
			case HiveSql.T_TEXTIMAGE_ON:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1185;
				this.match(HiveSql.T_TEXTIMAGE_ON);
				this.state = 1186;
				this.ident();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_options_mysql_item(): Create_table_options_mysql_itemContext {
		let _localctx: Create_table_options_mysql_itemContext = new Create_table_options_mysql_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, HiveSql.RULE_create_table_options_mysql_item);
		let _la: number;
		try {
			this.state = 1216;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_AUTO_INCREMENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1189;
				this.match(HiveSql.T_AUTO_INCREMENT);
				this.state = 1191;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_EQUAL) {
					{
					this.state = 1190;
					this.match(HiveSql.T_EQUAL);
					}
				}

				this.state = 1193;
				this.expr(0);
				}
				break;
			case HiveSql.T_COMMENT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1194;
				this.match(HiveSql.T_COMMENT);
				this.state = 1196;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_EQUAL) {
					{
					this.state = 1195;
					this.match(HiveSql.T_EQUAL);
					}
				}

				this.state = 1198;
				this.expr(0);
				}
				break;
			case HiveSql.T_CHARACTER:
			case HiveSql.T_CHARSET:
			case HiveSql.T_DEFAULT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1200;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_DEFAULT) {
					{
					this.state = 1199;
					this.match(HiveSql.T_DEFAULT);
					}
				}

				this.state = 1205;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveSql.T_CHARACTER:
					{
					this.state = 1202;
					this.match(HiveSql.T_CHARACTER);
					this.state = 1203;
					this.match(HiveSql.T_SET);
					}
					break;
				case HiveSql.T_CHARSET:
					{
					this.state = 1204;
					this.match(HiveSql.T_CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1208;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_EQUAL) {
					{
					this.state = 1207;
					this.match(HiveSql.T_EQUAL);
					}
				}

				this.state = 1210;
				this.expr(0);
				}
				break;
			case HiveSql.T_ENGINE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1211;
				this.match(HiveSql.T_ENGINE);
				this.state = 1213;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_EQUAL) {
					{
					this.state = 1212;
					this.match(HiveSql.T_EQUAL);
					}
				}

				this.state = 1215;
				this.expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_table_stmt(): Alter_table_stmtContext {
		let _localctx: Alter_table_stmtContext = new Alter_table_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, HiveSql.RULE_alter_table_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1218;
			this.match(HiveSql.T_ALTER);
			this.state = 1219;
			this.match(HiveSql.T_TABLE);
			this.state = 1220;
			this.table_name();
			this.state = 1221;
			this.alter_table_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_table_item(): Alter_table_itemContext {
		let _localctx: Alter_table_itemContext = new Alter_table_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, HiveSql.RULE_alter_table_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1223;
			this.alter_table_add_constraint();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_table_add_constraint(): Alter_table_add_constraintContext {
		let _localctx: Alter_table_add_constraintContext = new Alter_table_add_constraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, HiveSql.RULE_alter_table_add_constraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1225;
			this.match(HiveSql.T_ADD2);
			this.state = 1228;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_CONSTRAINT) {
				{
				this.state = 1226;
				this.match(HiveSql.T_CONSTRAINT);
				this.state = 1227;
				this.ident();
				}
			}

			this.state = 1230;
			this.alter_table_add_constraint_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_table_add_constraint_item(): Alter_table_add_constraint_itemContext {
		let _localctx: Alter_table_add_constraint_itemContext = new Alter_table_add_constraint_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, HiveSql.RULE_alter_table_add_constraint_item);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1294;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_PRIMARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1232;
				this.match(HiveSql.T_PRIMARY);
				this.state = 1233;
				this.match(HiveSql.T_KEY);
				this.state = 1235;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_CLUSTERED) {
					{
					this.state = 1234;
					this.match(HiveSql.T_CLUSTERED);
					}
				}

				this.state = 1237;
				this.match(HiveSql.T_OPEN_P);
				this.state = 1238;
				this.ident();
				this.state = 1240;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_ASC || _la === HiveSql.T_DESC) {
					{
					this.state = 1239;
					_la = this._input.LA(1);
					if (!(_la === HiveSql.T_ASC || _la === HiveSql.T_DESC)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1249;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 1242;
					this.match(HiveSql.T_COMMA);
					this.state = 1243;
					this.ident();
					this.state = 1245;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === HiveSql.T_ASC || _la === HiveSql.T_DESC) {
						{
						this.state = 1244;
						_la = this._input.LA(1);
						if (!(_la === HiveSql.T_ASC || _la === HiveSql.T_DESC)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					}
					}
					this.state = 1251;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1252;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 1254;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 113, this._ctx) ) {
				case 1:
					{
					this.state = 1253;
					this.match(HiveSql.T_ENABLE);
					}
					break;
				}
				this.state = 1257;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 114, this._ctx) ) {
				case 1:
					{
					this.state = 1256;
					this.index_storage_clause();
					}
					break;
				}
				}
				break;
			case HiveSql.T_FOREIGN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1259;
				this.match(HiveSql.T_FOREIGN);
				this.state = 1260;
				this.match(HiveSql.T_KEY);
				this.state = 1261;
				this.match(HiveSql.T_OPEN_P);
				this.state = 1262;
				this.ident();
				this.state = 1267;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 1263;
					this.match(HiveSql.T_COMMA);
					this.state = 1264;
					this.ident();
					}
					}
					this.state = 1269;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1270;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 1271;
				this.match(HiveSql.T_REFERENCES);
				this.state = 1272;
				this.table_name();
				this.state = 1273;
				this.match(HiveSql.T_OPEN_P);
				this.state = 1274;
				this.ident();
				this.state = 1279;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 1275;
					this.match(HiveSql.T_COMMA);
					this.state = 1276;
					this.ident();
					}
					}
					this.state = 1281;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1282;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 1286;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1283;
						this.create_table_fk_action();
						}
						}
					}
					this.state = 1288;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
				}
				}
				break;
			case HiveSql.T_DEFAULT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1289;
				this.match(HiveSql.T_DEFAULT);
				this.state = 1290;
				this.expr(0);
				this.state = 1291;
				this.match(HiveSql.T_FOR);
				this.state = 1292;
				this.ident();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dtype(): DtypeContext {
		let _localctx: DtypeContext = new DtypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, HiveSql.RULE_dtype);
		let _la: number;
		try {
			this.state = 1341;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 121, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1296;
				this.match(HiveSql.T_CHAR);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1297;
				this.match(HiveSql.T_BIGINT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1298;
				this.match(HiveSql.T_BINARY_DOUBLE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1299;
				this.match(HiveSql.T_BINARY_FLOAT);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1300;
				this.match(HiveSql.T_BINARY_INTEGER);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1301;
				this.match(HiveSql.T_BIT);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1302;
				this.match(HiveSql.T_DATE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1303;
				this.match(HiveSql.T_DATETIME);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1304;
				this.match(HiveSql.T_DEC);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1305;
				this.match(HiveSql.T_DECIMAL);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1306;
				this.match(HiveSql.T_DOUBLE);
				this.state = 1308;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 119, this._ctx) ) {
				case 1:
					{
					this.state = 1307;
					this.match(HiveSql.T_PRECISION);
					}
					break;
				}
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1310;
				this.match(HiveSql.T_FLOAT);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1311;
				this.match(HiveSql.T_INT);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1312;
				this.match(HiveSql.T_INT2);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1313;
				this.match(HiveSql.T_INT4);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1314;
				this.match(HiveSql.T_INT8);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1315;
				this.match(HiveSql.T_INTEGER);
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1316;
				this.match(HiveSql.T_NCHAR);
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1317;
				this.match(HiveSql.T_NVARCHAR);
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1318;
				this.match(HiveSql.T_NUMBER);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1319;
				this.match(HiveSql.T_NUMERIC);
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1320;
				this.match(HiveSql.T_PLS_INTEGER);
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1321;
				this.match(HiveSql.T_REAL);
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1322;
				this.match(HiveSql.T_RESULT_SET_LOCATOR);
				this.state = 1323;
				this.match(HiveSql.T_VARYING);
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1324;
				this.match(HiveSql.T_SIMPLE_FLOAT);
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 1325;
				this.match(HiveSql.T_SIMPLE_DOUBLE);
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 1326;
				this.match(HiveSql.T_SIMPLE_INTEGER);
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 1327;
				this.match(HiveSql.T_SMALLINT);
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 1328;
				this.match(HiveSql.T_SMALLDATETIME);
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 1329;
				this.match(HiveSql.T_STRING);
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 1330;
				this.match(HiveSql.T_SYS_REFCURSOR);
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 1331;
				this.match(HiveSql.T_TIMESTAMP);
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 1332;
				this.match(HiveSql.T_TINYINT);
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 1333;
				this.match(HiveSql.T_VARCHAR);
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 1334;
				this.match(HiveSql.T_VARCHAR2);
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 1335;
				this.match(HiveSql.T_XML);
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 1336;
				this.ident();
				this.state = 1339;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 120, this._ctx) ) {
				case 1:
					{
					this.state = 1337;
					this.match(HiveSql.T_PRECENT);
					this.state = 1338;
					_la = this._input.LA(1);
					if (!(_la === HiveSql.T_ROWTYPE || _la === HiveSql.T_TYPE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dtype_len(): Dtype_lenContext {
		let _localctx: Dtype_lenContext = new Dtype_lenContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, HiveSql.RULE_dtype_len);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1343;
			this.match(HiveSql.T_OPEN_P);
			this.state = 1344;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_MAX || _la === HiveSql.L_INT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_BYTE || _la === HiveSql.T_CHAR) {
				{
				this.state = 1345;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_BYTE || _la === HiveSql.T_CHAR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1350;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_COMMA) {
				{
				this.state = 1348;
				this.match(HiveSql.T_COMMA);
				this.state = 1349;
				this.match(HiveSql.L_INT);
				}
			}

			this.state = 1352;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dtype_attr(): Dtype_attrContext {
		let _localctx: Dtype_attrContext = new Dtype_attrContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, HiveSql.RULE_dtype_attr);
		let _la: number;
		try {
			this.state = 1365;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 126, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1355;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_NOT) {
					{
					this.state = 1354;
					this.match(HiveSql.T_NOT);
					}
				}

				this.state = 1357;
				this.match(HiveSql.T_NULL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1358;
				this.match(HiveSql.T_CHARACTER);
				this.state = 1359;
				this.match(HiveSql.T_SET);
				this.state = 1360;
				this.ident();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1362;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_NOT) {
					{
					this.state = 1361;
					this.match(HiveSql.T_NOT);
					}
				}

				this.state = 1364;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_CASESPECIFIC || _la === HiveSql.T_CS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dtype_default(): Dtype_defaultContext {
		let _localctx: Dtype_defaultContext = new Dtype_defaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, HiveSql.RULE_dtype_default);
		let _la: number;
		try {
			this.state = 1379;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_COLON:
			case HiveSql.T_EQUAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1368;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_COLON) {
					{
					this.state = 1367;
					this.match(HiveSql.T_COLON);
					}
				}

				this.state = 1370;
				this.match(HiveSql.T_EQUAL);
				this.state = 1371;
				this.expr(0);
				}
				break;
			case HiveSql.T_DEFAULT:
			case HiveSql.T_WITH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1373;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_WITH) {
					{
					this.state = 1372;
					this.match(HiveSql.T_WITH);
					}
				}

				this.state = 1375;
				this.match(HiveSql.T_DEFAULT);
				this.state = 1377;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 129, this._ctx) ) {
				case 1:
					{
					this.state = 1376;
					this.expr(0);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_database_stmt(): Create_database_stmtContext {
		let _localctx: Create_database_stmtContext = new Create_database_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, HiveSql.RULE_create_database_stmt);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1381;
			this.match(HiveSql.T_CREATE);
			this.state = 1382;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_DATABASE || _la === HiveSql.T_SCHEMA)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1386;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 131, this._ctx) ) {
			case 1:
				{
				this.state = 1383;
				this.match(HiveSql.T_IF);
				this.state = 1384;
				this.match(HiveSql.T_NOT);
				this.state = 1385;
				this.match(HiveSql.T_EXISTS);
				}
				break;
			}
			this.state = 1388;
			this.expr(0);
			this.state = 1392;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1389;
					this.create_database_option();
					}
					}
				}
				this.state = 1394;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 132, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_database_option(): Create_database_optionContext {
		let _localctx: Create_database_optionContext = new Create_database_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, HiveSql.RULE_create_database_option);
		try {
			this.state = 1399;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_COMMENT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1395;
				this.match(HiveSql.T_COMMENT);
				this.state = 1396;
				this.expr(0);
				}
				break;
			case HiveSql.T_LOCATION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1397;
				this.match(HiveSql.T_LOCATION);
				this.state = 1398;
				this.expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_function_stmt(): Create_function_stmtContext {
		let _localctx: Create_function_stmtContext = new Create_function_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, HiveSql.RULE_create_function_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1408;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_ALTER:
				{
				this.state = 1401;
				this.match(HiveSql.T_ALTER);
				}
				break;
			case HiveSql.T_CREATE:
				{
				this.state = 1402;
				this.match(HiveSql.T_CREATE);
				this.state = 1405;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_OR) {
					{
					this.state = 1403;
					this.match(HiveSql.T_OR);
					this.state = 1404;
					this.match(HiveSql.T_REPLACE);
					}
				}

				}
				break;
			case HiveSql.T_REPLACE:
				{
				this.state = 1407;
				this.match(HiveSql.T_REPLACE);
				}
				break;
			case HiveSql.T_FUNCTION:
				break;
			default:
				break;
			}
			this.state = 1410;
			this.match(HiveSql.T_FUNCTION);
			this.state = 1411;
			this.ident();
			this.state = 1413;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 136, this._ctx) ) {
			case 1:
				{
				this.state = 1412;
				this.create_routine_params();
				}
				break;
			}
			this.state = 1415;
			this.create_function_return();
			this.state = 1417;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 137, this._ctx) ) {
			case 1:
				{
				this.state = 1416;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_AS || _la === HiveSql.T_IS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 1420;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 138, this._ctx) ) {
			case 1:
				{
				this.state = 1419;
				this.declare_block_inplace();
				}
				break;
			}
			this.state = 1422;
			this.single_block_stmt();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_function_return(): Create_function_returnContext {
		let _localctx: Create_function_returnContext = new Create_function_returnContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, HiveSql.RULE_create_function_return);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1424;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_RETURN || _la === HiveSql.T_RETURNS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1425;
			this.dtype();
			this.state = 1427;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 139, this._ctx) ) {
			case 1:
				{
				this.state = 1426;
				this.dtype_len();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_package_stmt(): Create_package_stmtContext {
		let _localctx: Create_package_stmtContext = new Create_package_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, HiveSql.RULE_create_package_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1436;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_ALTER:
				{
				this.state = 1429;
				this.match(HiveSql.T_ALTER);
				}
				break;
			case HiveSql.T_CREATE:
				{
				this.state = 1430;
				this.match(HiveSql.T_CREATE);
				this.state = 1433;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_OR) {
					{
					this.state = 1431;
					this.match(HiveSql.T_OR);
					this.state = 1432;
					this.match(HiveSql.T_REPLACE);
					}
				}

				}
				break;
			case HiveSql.T_REPLACE:
				{
				this.state = 1435;
				this.match(HiveSql.T_REPLACE);
				}
				break;
			case HiveSql.T_PACKAGE:
				break;
			default:
				break;
			}
			this.state = 1438;
			this.match(HiveSql.T_PACKAGE);
			this.state = 1439;
			this.ident();
			this.state = 1440;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_AS || _la === HiveSql.T_IS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1441;
			this.package_spec();
			this.state = 1442;
			this.match(HiveSql.T_END);
			this.state = 1446;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 142, this._ctx) ) {
			case 1:
				{
				this.state = 1443;
				this.ident();
				this.state = 1444;
				this.match(HiveSql.T_SEMICOLON);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public package_spec(): Package_specContext {
		let _localctx: Package_specContext = new Package_specContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, HiveSql.RULE_package_spec);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1448;
			this.package_spec_item();
			this.state = 1449;
			this.match(HiveSql.T_SEMICOLON);
			this.state = 1455;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveSql.T_ACTION) | (1 << HiveSql.T_ADD2) | (1 << HiveSql.T_ALL) | (1 << HiveSql.T_ALLOCATE) | (1 << HiveSql.T_ALTER) | (1 << HiveSql.T_AND) | (1 << HiveSql.T_ANSI_NULLS) | (1 << HiveSql.T_ANSI_PADDING) | (1 << HiveSql.T_AS) | (1 << HiveSql.T_ASC) | (1 << HiveSql.T_ASSOCIATE) | (1 << HiveSql.T_AT) | (1 << HiveSql.T_AUTO_INCREMENT) | (1 << HiveSql.T_AVG) | (1 << HiveSql.T_BATCHSIZE) | (1 << HiveSql.T_BEGIN) | (1 << HiveSql.T_BETWEEN) | (1 << HiveSql.T_BIGINT) | (1 << HiveSql.T_BINARY_DOUBLE) | (1 << HiveSql.T_BINARY_FLOAT) | (1 << HiveSql.T_BIT) | (1 << HiveSql.T_BODY) | (1 << HiveSql.T_BREAK) | (1 << HiveSql.T_BY) | (1 << HiveSql.T_BYTE) | (1 << HiveSql.T_CALL) | (1 << HiveSql.T_CALLER) | (1 << HiveSql.T_CASCADE) | (1 << HiveSql.T_CASE) | (1 << HiveSql.T_CASESPECIFIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (HiveSql.T_CAST - 32)) | (1 << (HiveSql.T_CHAR - 32)) | (1 << (HiveSql.T_CHARACTER - 32)) | (1 << (HiveSql.T_CHARSET - 32)) | (1 << (HiveSql.T_CLIENT - 32)) | (1 << (HiveSql.T_CLOSE - 32)) | (1 << (HiveSql.T_CLUSTERED - 32)) | (1 << (HiveSql.T_CMP - 32)) | (1 << (HiveSql.T_COLLECT - 32)) | (1 << (HiveSql.T_COLLECTION - 32)) | (1 << (HiveSql.T_COLUMN - 32)) | (1 << (HiveSql.T_COMMENT - 32)) | (1 << (HiveSql.T_CONSTANT - 32)) | (1 << (HiveSql.T_COMMIT - 32)) | (1 << (HiveSql.T_COMPRESS - 32)) | (1 << (HiveSql.T_CONCAT - 32)) | (1 << (HiveSql.T_CONDITION - 32)) | (1 << (HiveSql.T_CONSTRAINT - 32)) | (1 << (HiveSql.T_CONTINUE - 32)) | (1 << (HiveSql.T_COPY - 32)) | (1 << (HiveSql.T_COUNT - 32)) | (1 << (HiveSql.T_COUNT_BIG - 32)) | (1 << (HiveSql.T_CREATE - 32)) | (1 << (HiveSql.T_CREATION - 32)) | (1 << (HiveSql.T_CREATOR - 32)) | (1 << (HiveSql.T_CS - 32)) | (1 << (HiveSql.T_CURRENT - 32)) | (1 << (HiveSql.T_CURRENT_SCHEMA - 32)) | (1 << (HiveSql.T_CURSOR - 32)) | (1 << (HiveSql.T_DATABASE - 32)) | (1 << (HiveSql.T_DATA - 32)) | (1 << (HiveSql.T_DATE - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (HiveSql.T_DATETIME - 64)) | (1 << (HiveSql.T_DAY - 64)) | (1 << (HiveSql.T_DAYS - 64)) | (1 << (HiveSql.T_DEC - 64)) | (1 << (HiveSql.T_DECIMAL - 64)) | (1 << (HiveSql.T_DECLARE - 64)) | (1 << (HiveSql.T_DEFAULT - 64)) | (1 << (HiveSql.T_DEFERRED - 64)) | (1 << (HiveSql.T_DEFINED - 64)) | (1 << (HiveSql.T_DEFINER - 64)) | (1 << (HiveSql.T_DEFINITION - 64)) | (1 << (HiveSql.T_DELETE - 64)) | (1 << (HiveSql.T_DELIMITED - 64)) | (1 << (HiveSql.T_DELIMITER - 64)) | (1 << (HiveSql.T_DESC - 64)) | (1 << (HiveSql.T_DESCRIBE - 64)) | (1 << (HiveSql.T_DIAGNOSTICS - 64)) | (1 << (HiveSql.T_DIR - 64)) | (1 << (HiveSql.T_DIRECTORY - 64)) | (1 << (HiveSql.T_DISTINCT - 64)) | (1 << (HiveSql.T_DISTRIBUTE - 64)) | (1 << (HiveSql.T_DO - 64)) | (1 << (HiveSql.T_DOUBLE - 64)) | (1 << (HiveSql.T_DROP - 64)) | (1 << (HiveSql.T_DYNAMIC - 64)) | (1 << (HiveSql.T_ENABLE - 64)) | (1 << (HiveSql.T_ENGINE - 64)) | (1 << (HiveSql.T_ESCAPED - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (HiveSql.T_EXCEPT - 96)) | (1 << (HiveSql.T_EXEC - 96)) | (1 << (HiveSql.T_EXECUTE - 96)) | (1 << (HiveSql.T_EXCEPTION - 96)) | (1 << (HiveSql.T_EXCLUSIVE - 96)) | (1 << (HiveSql.T_EXISTS - 96)) | (1 << (HiveSql.T_EXIT - 96)) | (1 << (HiveSql.T_FALLBACK - 96)) | (1 << (HiveSql.T_FALSE - 96)) | (1 << (HiveSql.T_FETCH - 96)) | (1 << (HiveSql.T_FIELDS - 96)) | (1 << (HiveSql.T_FILE - 96)) | (1 << (HiveSql.T_FILES - 96)) | (1 << (HiveSql.T_FLOAT - 96)) | (1 << (HiveSql.T_FOR - 96)) | (1 << (HiveSql.T_FOREIGN - 96)) | (1 << (HiveSql.T_FORMAT - 96)) | (1 << (HiveSql.T_FOUND - 96)) | (1 << (HiveSql.T_FROM - 96)) | (1 << (HiveSql.T_FULL - 96)) | (1 << (HiveSql.T_FUNCTION - 96)) | (1 << (HiveSql.T_GET - 96)) | (1 << (HiveSql.T_GLOBAL - 96)) | (1 << (HiveSql.T_GO - 96)) | (1 << (HiveSql.T_GRANT - 96)) | (1 << (HiveSql.T_GROUP - 96)) | (1 << (HiveSql.T_HANDLER - 96)) | (1 << (HiveSql.T_HASH - 96)) | (1 << (HiveSql.T_HAVING - 96)) | (1 << (HiveSql.T_HDFS - 96)) | (1 << (HiveSql.T_HIVE - 96)) | (1 << (HiveSql.T_HOST - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (HiveSql.T_IDENTITY - 128)) | (1 << (HiveSql.T_IF - 128)) | (1 << (HiveSql.T_IGNORE - 128)) | (1 << (HiveSql.T_IMMEDIATE - 128)) | (1 << (HiveSql.T_IN - 128)) | (1 << (HiveSql.T_INCLUDE - 128)) | (1 << (HiveSql.T_INDEX - 128)) | (1 << (HiveSql.T_INITRANS - 128)) | (1 << (HiveSql.T_INNER - 128)) | (1 << (HiveSql.T_INOUT - 128)) | (1 << (HiveSql.T_INSERT - 128)) | (1 << (HiveSql.T_INT - 128)) | (1 << (HiveSql.T_INT2 - 128)) | (1 << (HiveSql.T_INT4 - 128)) | (1 << (HiveSql.T_INT8 - 128)) | (1 << (HiveSql.T_INTEGER - 128)) | (1 << (HiveSql.T_INTERSECT - 128)) | (1 << (HiveSql.T_INTERVAL - 128)) | (1 << (HiveSql.T_INTO - 128)) | (1 << (HiveSql.T_INVOKER - 128)) | (1 << (HiveSql.T_IS - 128)) | (1 << (HiveSql.T_ISOPEN - 128)) | (1 << (HiveSql.T_ITEMS - 128)) | (1 << (HiveSql.T_JOIN - 128)) | (1 << (HiveSql.T_KEEP - 128)) | (1 << (HiveSql.T_KEY - 128)) | (1 << (HiveSql.T_KEYS - 128)) | (1 << (HiveSql.T_LANGUAGE - 128)) | (1 << (HiveSql.T_LEAVE - 128)) | (1 << (HiveSql.T_LEFT - 128)) | (1 << (HiveSql.T_LIKE - 128)) | (1 << (HiveSql.T_LIMIT - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (HiveSql.T_LINES - 160)) | (1 << (HiveSql.T_LOCAL - 160)) | (1 << (HiveSql.T_LOCATION - 160)) | (1 << (HiveSql.T_LOCATOR - 160)) | (1 << (HiveSql.T_LOCATORS - 160)) | (1 << (HiveSql.T_LOCKS - 160)) | (1 << (HiveSql.T_LOG - 160)) | (1 << (HiveSql.T_LOGGED - 160)) | (1 << (HiveSql.T_LOGGING - 160)) | (1 << (HiveSql.T_LOOP - 160)) | (1 << (HiveSql.T_MAP - 160)) | (1 << (HiveSql.T_MATCHED - 160)) | (1 << (HiveSql.T_MAX - 160)) | (1 << (HiveSql.T_MAXTRANS - 160)) | (1 << (HiveSql.T_MERGE - 160)) | (1 << (HiveSql.T_MESSAGE_TEXT - 160)) | (1 << (HiveSql.T_MICROSECOND - 160)) | (1 << (HiveSql.T_MICROSECONDS - 160)) | (1 << (HiveSql.T_MIN - 160)) | (1 << (HiveSql.T_MULTISET - 160)) | (1 << (HiveSql.T_NCHAR - 160)) | (1 << (HiveSql.T_NEW - 160)) | (1 << (HiveSql.T_NVARCHAR - 160)) | (1 << (HiveSql.T_NO - 160)) | (1 << (HiveSql.T_NOCOUNT - 160)) | (1 << (HiveSql.T_NOCOMPRESS - 160)) | (1 << (HiveSql.T_NOLOGGING - 160)) | (1 << (HiveSql.T_NONE - 160)) | (1 << (HiveSql.T_NOT - 160)) | (1 << (HiveSql.T_NOTFOUND - 160)) | (1 << (HiveSql.T_NUMERIC - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (HiveSql.T_NUMBER - 192)) | (1 << (HiveSql.T_OBJECT - 192)) | (1 << (HiveSql.T_OFF - 192)) | (1 << (HiveSql.T_ON - 192)) | (1 << (HiveSql.T_ONLY - 192)) | (1 << (HiveSql.T_OPEN - 192)) | (1 << (HiveSql.T_OR - 192)) | (1 << (HiveSql.T_ORDER - 192)) | (1 << (HiveSql.T_OUT - 192)) | (1 << (HiveSql.T_OUTER - 192)) | (1 << (HiveSql.T_OVER - 192)) | (1 << (HiveSql.T_OVERWRITE - 192)) | (1 << (HiveSql.T_OWNER - 192)) | (1 << (HiveSql.T_PACKAGE - 192)) | (1 << (HiveSql.T_PARTITION - 192)) | (1 << (HiveSql.T_PCTFREE - 192)) | (1 << (HiveSql.T_PCTUSED - 192)) | (1 << (HiveSql.T_PRECISION - 192)) | (1 << (HiveSql.T_PRESERVE - 192)) | (1 << (HiveSql.T_PRIMARY - 192)) | (1 << (HiveSql.T_PRINT - 192)) | (1 << (HiveSql.T_PROC - 192)) | (1 << (HiveSql.T_PROCEDURE - 192)) | (1 << (HiveSql.T_QUALIFY - 192)) | (1 << (HiveSql.T_QUERY_BAND - 192)) | (1 << (HiveSql.T_QUIT - 192)) | (1 << (HiveSql.T_QUOTED_IDENTIFIER - 192)) | (1 << (HiveSql.T_RAISE - 192)) | (1 << (HiveSql.T_REAL - 192)) | (1 << (HiveSql.T_REFERENCES - 192)) | (1 << (HiveSql.T_REGEXP - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (HiveSql.T_REPLACE - 224)) | (1 << (HiveSql.T_RESIGNAL - 224)) | (1 << (HiveSql.T_RESTRICT - 224)) | (1 << (HiveSql.T_RESULT - 224)) | (1 << (HiveSql.T_RESULT_SET_LOCATOR - 224)) | (1 << (HiveSql.T_RETURN - 224)) | (1 << (HiveSql.T_RETURNS - 224)) | (1 << (HiveSql.T_REVERSE - 224)) | (1 << (HiveSql.T_RIGHT - 224)) | (1 << (HiveSql.T_RLIKE - 224)) | (1 << (HiveSql.T_ROLE - 224)) | (1 << (HiveSql.T_ROLLBACK - 224)) | (1 << (HiveSql.T_ROW - 224)) | (1 << (HiveSql.T_ROWS - 224)) | (1 << (HiveSql.T_ROW_COUNT - 224)) | (1 << (HiveSql.T_RR - 224)) | (1 << (HiveSql.T_RS - 224)) | (1 << (HiveSql.T_PWD - 224)) | (1 << (HiveSql.T_TRIM - 224)) | (1 << (HiveSql.T_SCHEMA - 224)) | (1 << (HiveSql.T_SECOND - 224)) | (1 << (HiveSql.T_SECONDS - 224)) | (1 << (HiveSql.T_SECURITY - 224)) | (1 << (HiveSql.T_SEGMENT - 224)) | (1 << (HiveSql.T_SEL - 224)) | (1 << (HiveSql.T_SELECT - 224)) | (1 << (HiveSql.T_SET - 224)) | (1 << (HiveSql.T_SESSION - 224)) | (1 << (HiveSql.T_SESSIONS - 224)) | (1 << (HiveSql.T_SETS - 224)) | (1 << (HiveSql.T_SHARE - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (HiveSql.T_SIGNAL - 256)) | (1 << (HiveSql.T_SIMPLE_DOUBLE - 256)) | (1 << (HiveSql.T_SIMPLE_FLOAT - 256)) | (1 << (HiveSql.T_SMALLDATETIME - 256)) | (1 << (HiveSql.T_SMALLINT - 256)) | (1 << (HiveSql.T_SQL - 256)) | (1 << (HiveSql.T_SQLEXCEPTION - 256)) | (1 << (HiveSql.T_SQLINSERT - 256)) | (1 << (HiveSql.T_SQLSTATE - 256)) | (1 << (HiveSql.T_SQLWARNING - 256)) | (1 << (HiveSql.T_STATS - 256)) | (1 << (HiveSql.T_STATISTICS - 256)) | (1 << (HiveSql.T_STEP - 256)) | (1 << (HiveSql.T_STORAGE - 256)) | (1 << (HiveSql.T_STORED - 256)) | (1 << (HiveSql.T_STRING - 256)) | (1 << (HiveSql.T_SUBDIR - 256)) | (1 << (HiveSql.T_SUBSTRING - 256)) | (1 << (HiveSql.T_SUM - 256)) | (1 << (HiveSql.T_SUMMARY - 256)) | (1 << (HiveSql.T_SYS_REFCURSOR - 256)) | (1 << (HiveSql.T_TABLE - 256)) | (1 << (HiveSql.T_TABLESPACE - 256)) | (1 << (HiveSql.T_TEMPORARY - 256)) | (1 << (HiveSql.T_TERMINATED - 256)) | (1 << (HiveSql.T_TEXTIMAGE_ON - 256)) | (1 << (HiveSql.T_THEN - 256)) | (1 << (HiveSql.T_TIMESTAMP - 256)) | (1 << (HiveSql.T_TITLE - 256)) | (1 << (HiveSql.T_TO - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (HiveSql.T_TOP - 288)) | (1 << (HiveSql.T_TRANSACTION - 288)) | (1 << (HiveSql.T_TRUE - 288)) | (1 << (HiveSql.T_TRUNCATE - 288)) | (1 << (HiveSql.T_UNIQUE - 288)) | (1 << (HiveSql.T_UPDATE - 288)) | (1 << (HiveSql.T_UR - 288)) | (1 << (HiveSql.T_USE - 288)) | (1 << (HiveSql.T_USING - 288)) | (1 << (HiveSql.T_VALUE - 288)) | (1 << (HiveSql.T_VALUES - 288)) | (1 << (HiveSql.T_VAR - 288)) | (1 << (HiveSql.T_VARCHAR - 288)) | (1 << (HiveSql.T_VARCHAR2 - 288)) | (1 << (HiveSql.T_VARYING - 288)) | (1 << (HiveSql.T_VOLATILE - 288)) | (1 << (HiveSql.T_WHILE - 288)) | (1 << (HiveSql.T_WITH - 288)) | (1 << (HiveSql.T_WITHOUT - 288)) | (1 << (HiveSql.T_WORK - 288)) | (1 << (HiveSql.T_XACT_ABORT - 288)) | (1 << (HiveSql.T_XML - 288)) | (1 << (HiveSql.T_YES - 288)) | (1 << (HiveSql.T_ACTIVITY_COUNT - 288)) | (1 << (HiveSql.T_CUME_DIST - 288)) | (1 << (HiveSql.T_CURRENT_DATE - 288)) | (1 << (HiveSql.T_CURRENT_TIMESTAMP - 288)) | (1 << (HiveSql.T_CURRENT_USER - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (HiveSql.T_DENSE_RANK - 320)) | (1 << (HiveSql.T_FIRST_VALUE - 320)) | (1 << (HiveSql.T_LAG - 320)) | (1 << (HiveSql.T_LAST_VALUE - 320)) | (1 << (HiveSql.T_LEAD - 320)) | (1 << (HiveSql.T_PART_COUNT - 320)) | (1 << (HiveSql.T_PART_LOC - 320)) | (1 << (HiveSql.T_RANK - 320)) | (1 << (HiveSql.T_ROW_NUMBER - 320)) | (1 << (HiveSql.T_STDEV - 320)) | (1 << (HiveSql.T_SYSDATE - 320)) | (1 << (HiveSql.T_VARIANCE - 320)) | (1 << (HiveSql.T_USER - 320)))) !== 0) || _la === HiveSql.L_ID) {
				{
				{
				this.state = 1450;
				this.package_spec_item();
				this.state = 1451;
				this.match(HiveSql.T_SEMICOLON);
				}
				}
				this.state = 1457;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public package_spec_item(): Package_spec_itemContext {
		let _localctx: Package_spec_itemContext = new Package_spec_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, HiveSql.RULE_package_spec_item);
		let _la: number;
		try {
			this.state = 1471;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 146, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1458;
				this.declare_stmt_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1459;
				this.match(HiveSql.T_FUNCTION);
				this.state = 1460;
				this.ident();
				this.state = 1462;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 144, this._ctx) ) {
				case 1:
					{
					this.state = 1461;
					this.create_routine_params();
					}
					break;
				}
				this.state = 1464;
				this.create_function_return();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1466;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_PROC || _la === HiveSql.T_PROCEDURE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1467;
				this.ident();
				this.state = 1469;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 145, this._ctx) ) {
				case 1:
					{
					this.state = 1468;
					this.create_routine_params();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_package_body_stmt(): Create_package_body_stmtContext {
		let _localctx: Create_package_body_stmtContext = new Create_package_body_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, HiveSql.RULE_create_package_body_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1480;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_ALTER:
				{
				this.state = 1473;
				this.match(HiveSql.T_ALTER);
				}
				break;
			case HiveSql.T_CREATE:
				{
				this.state = 1474;
				this.match(HiveSql.T_CREATE);
				this.state = 1477;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_OR) {
					{
					this.state = 1475;
					this.match(HiveSql.T_OR);
					this.state = 1476;
					this.match(HiveSql.T_REPLACE);
					}
				}

				}
				break;
			case HiveSql.T_REPLACE:
				{
				this.state = 1479;
				this.match(HiveSql.T_REPLACE);
				}
				break;
			case HiveSql.T_PACKAGE:
				break;
			default:
				break;
			}
			this.state = 1482;
			this.match(HiveSql.T_PACKAGE);
			this.state = 1483;
			this.match(HiveSql.T_BODY);
			this.state = 1484;
			this.ident();
			this.state = 1485;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_AS || _la === HiveSql.T_IS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1486;
			this.package_body();
			this.state = 1487;
			this.match(HiveSql.T_END);
			this.state = 1491;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 149, this._ctx) ) {
			case 1:
				{
				this.state = 1488;
				this.ident();
				this.state = 1489;
				this.match(HiveSql.T_SEMICOLON);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public package_body(): Package_bodyContext {
		let _localctx: Package_bodyContext = new Package_bodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, HiveSql.RULE_package_body);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1493;
			this.package_body_item();
			this.state = 1494;
			this.match(HiveSql.T_SEMICOLON);
			this.state = 1500;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveSql.T_ACTION) | (1 << HiveSql.T_ADD2) | (1 << HiveSql.T_ALL) | (1 << HiveSql.T_ALLOCATE) | (1 << HiveSql.T_ALTER) | (1 << HiveSql.T_AND) | (1 << HiveSql.T_ANSI_NULLS) | (1 << HiveSql.T_ANSI_PADDING) | (1 << HiveSql.T_AS) | (1 << HiveSql.T_ASC) | (1 << HiveSql.T_ASSOCIATE) | (1 << HiveSql.T_AT) | (1 << HiveSql.T_AUTO_INCREMENT) | (1 << HiveSql.T_AVG) | (1 << HiveSql.T_BATCHSIZE) | (1 << HiveSql.T_BEGIN) | (1 << HiveSql.T_BETWEEN) | (1 << HiveSql.T_BIGINT) | (1 << HiveSql.T_BINARY_DOUBLE) | (1 << HiveSql.T_BINARY_FLOAT) | (1 << HiveSql.T_BIT) | (1 << HiveSql.T_BODY) | (1 << HiveSql.T_BREAK) | (1 << HiveSql.T_BY) | (1 << HiveSql.T_BYTE) | (1 << HiveSql.T_CALL) | (1 << HiveSql.T_CALLER) | (1 << HiveSql.T_CASCADE) | (1 << HiveSql.T_CASE) | (1 << HiveSql.T_CASESPECIFIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (HiveSql.T_CAST - 32)) | (1 << (HiveSql.T_CHAR - 32)) | (1 << (HiveSql.T_CHARACTER - 32)) | (1 << (HiveSql.T_CHARSET - 32)) | (1 << (HiveSql.T_CLIENT - 32)) | (1 << (HiveSql.T_CLOSE - 32)) | (1 << (HiveSql.T_CLUSTERED - 32)) | (1 << (HiveSql.T_CMP - 32)) | (1 << (HiveSql.T_COLLECT - 32)) | (1 << (HiveSql.T_COLLECTION - 32)) | (1 << (HiveSql.T_COLUMN - 32)) | (1 << (HiveSql.T_COMMENT - 32)) | (1 << (HiveSql.T_CONSTANT - 32)) | (1 << (HiveSql.T_COMMIT - 32)) | (1 << (HiveSql.T_COMPRESS - 32)) | (1 << (HiveSql.T_CONCAT - 32)) | (1 << (HiveSql.T_CONDITION - 32)) | (1 << (HiveSql.T_CONSTRAINT - 32)) | (1 << (HiveSql.T_CONTINUE - 32)) | (1 << (HiveSql.T_COPY - 32)) | (1 << (HiveSql.T_COUNT - 32)) | (1 << (HiveSql.T_COUNT_BIG - 32)) | (1 << (HiveSql.T_CREATE - 32)) | (1 << (HiveSql.T_CREATION - 32)) | (1 << (HiveSql.T_CREATOR - 32)) | (1 << (HiveSql.T_CS - 32)) | (1 << (HiveSql.T_CURRENT - 32)) | (1 << (HiveSql.T_CURRENT_SCHEMA - 32)) | (1 << (HiveSql.T_CURSOR - 32)) | (1 << (HiveSql.T_DATABASE - 32)) | (1 << (HiveSql.T_DATA - 32)) | (1 << (HiveSql.T_DATE - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (HiveSql.T_DATETIME - 64)) | (1 << (HiveSql.T_DAY - 64)) | (1 << (HiveSql.T_DAYS - 64)) | (1 << (HiveSql.T_DEC - 64)) | (1 << (HiveSql.T_DECIMAL - 64)) | (1 << (HiveSql.T_DECLARE - 64)) | (1 << (HiveSql.T_DEFAULT - 64)) | (1 << (HiveSql.T_DEFERRED - 64)) | (1 << (HiveSql.T_DEFINED - 64)) | (1 << (HiveSql.T_DEFINER - 64)) | (1 << (HiveSql.T_DEFINITION - 64)) | (1 << (HiveSql.T_DELETE - 64)) | (1 << (HiveSql.T_DELIMITED - 64)) | (1 << (HiveSql.T_DELIMITER - 64)) | (1 << (HiveSql.T_DESC - 64)) | (1 << (HiveSql.T_DESCRIBE - 64)) | (1 << (HiveSql.T_DIAGNOSTICS - 64)) | (1 << (HiveSql.T_DIR - 64)) | (1 << (HiveSql.T_DIRECTORY - 64)) | (1 << (HiveSql.T_DISTINCT - 64)) | (1 << (HiveSql.T_DISTRIBUTE - 64)) | (1 << (HiveSql.T_DO - 64)) | (1 << (HiveSql.T_DOUBLE - 64)) | (1 << (HiveSql.T_DROP - 64)) | (1 << (HiveSql.T_DYNAMIC - 64)) | (1 << (HiveSql.T_ENABLE - 64)) | (1 << (HiveSql.T_ENGINE - 64)) | (1 << (HiveSql.T_ESCAPED - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (HiveSql.T_EXCEPT - 96)) | (1 << (HiveSql.T_EXEC - 96)) | (1 << (HiveSql.T_EXECUTE - 96)) | (1 << (HiveSql.T_EXCEPTION - 96)) | (1 << (HiveSql.T_EXCLUSIVE - 96)) | (1 << (HiveSql.T_EXISTS - 96)) | (1 << (HiveSql.T_EXIT - 96)) | (1 << (HiveSql.T_FALLBACK - 96)) | (1 << (HiveSql.T_FALSE - 96)) | (1 << (HiveSql.T_FETCH - 96)) | (1 << (HiveSql.T_FIELDS - 96)) | (1 << (HiveSql.T_FILE - 96)) | (1 << (HiveSql.T_FILES - 96)) | (1 << (HiveSql.T_FLOAT - 96)) | (1 << (HiveSql.T_FOR - 96)) | (1 << (HiveSql.T_FOREIGN - 96)) | (1 << (HiveSql.T_FORMAT - 96)) | (1 << (HiveSql.T_FOUND - 96)) | (1 << (HiveSql.T_FROM - 96)) | (1 << (HiveSql.T_FULL - 96)) | (1 << (HiveSql.T_FUNCTION - 96)) | (1 << (HiveSql.T_GET - 96)) | (1 << (HiveSql.T_GLOBAL - 96)) | (1 << (HiveSql.T_GO - 96)) | (1 << (HiveSql.T_GRANT - 96)) | (1 << (HiveSql.T_GROUP - 96)) | (1 << (HiveSql.T_HANDLER - 96)) | (1 << (HiveSql.T_HASH - 96)) | (1 << (HiveSql.T_HAVING - 96)) | (1 << (HiveSql.T_HDFS - 96)) | (1 << (HiveSql.T_HIVE - 96)) | (1 << (HiveSql.T_HOST - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (HiveSql.T_IDENTITY - 128)) | (1 << (HiveSql.T_IF - 128)) | (1 << (HiveSql.T_IGNORE - 128)) | (1 << (HiveSql.T_IMMEDIATE - 128)) | (1 << (HiveSql.T_IN - 128)) | (1 << (HiveSql.T_INCLUDE - 128)) | (1 << (HiveSql.T_INDEX - 128)) | (1 << (HiveSql.T_INITRANS - 128)) | (1 << (HiveSql.T_INNER - 128)) | (1 << (HiveSql.T_INOUT - 128)) | (1 << (HiveSql.T_INSERT - 128)) | (1 << (HiveSql.T_INT - 128)) | (1 << (HiveSql.T_INT2 - 128)) | (1 << (HiveSql.T_INT4 - 128)) | (1 << (HiveSql.T_INT8 - 128)) | (1 << (HiveSql.T_INTEGER - 128)) | (1 << (HiveSql.T_INTERSECT - 128)) | (1 << (HiveSql.T_INTERVAL - 128)) | (1 << (HiveSql.T_INTO - 128)) | (1 << (HiveSql.T_INVOKER - 128)) | (1 << (HiveSql.T_IS - 128)) | (1 << (HiveSql.T_ISOPEN - 128)) | (1 << (HiveSql.T_ITEMS - 128)) | (1 << (HiveSql.T_JOIN - 128)) | (1 << (HiveSql.T_KEEP - 128)) | (1 << (HiveSql.T_KEY - 128)) | (1 << (HiveSql.T_KEYS - 128)) | (1 << (HiveSql.T_LANGUAGE - 128)) | (1 << (HiveSql.T_LEAVE - 128)) | (1 << (HiveSql.T_LEFT - 128)) | (1 << (HiveSql.T_LIKE - 128)) | (1 << (HiveSql.T_LIMIT - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (HiveSql.T_LINES - 160)) | (1 << (HiveSql.T_LOCAL - 160)) | (1 << (HiveSql.T_LOCATION - 160)) | (1 << (HiveSql.T_LOCATOR - 160)) | (1 << (HiveSql.T_LOCATORS - 160)) | (1 << (HiveSql.T_LOCKS - 160)) | (1 << (HiveSql.T_LOG - 160)) | (1 << (HiveSql.T_LOGGED - 160)) | (1 << (HiveSql.T_LOGGING - 160)) | (1 << (HiveSql.T_LOOP - 160)) | (1 << (HiveSql.T_MAP - 160)) | (1 << (HiveSql.T_MATCHED - 160)) | (1 << (HiveSql.T_MAX - 160)) | (1 << (HiveSql.T_MAXTRANS - 160)) | (1 << (HiveSql.T_MERGE - 160)) | (1 << (HiveSql.T_MESSAGE_TEXT - 160)) | (1 << (HiveSql.T_MICROSECOND - 160)) | (1 << (HiveSql.T_MICROSECONDS - 160)) | (1 << (HiveSql.T_MIN - 160)) | (1 << (HiveSql.T_MULTISET - 160)) | (1 << (HiveSql.T_NCHAR - 160)) | (1 << (HiveSql.T_NEW - 160)) | (1 << (HiveSql.T_NVARCHAR - 160)) | (1 << (HiveSql.T_NO - 160)) | (1 << (HiveSql.T_NOCOUNT - 160)) | (1 << (HiveSql.T_NOCOMPRESS - 160)) | (1 << (HiveSql.T_NOLOGGING - 160)) | (1 << (HiveSql.T_NONE - 160)) | (1 << (HiveSql.T_NOT - 160)) | (1 << (HiveSql.T_NOTFOUND - 160)) | (1 << (HiveSql.T_NUMERIC - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (HiveSql.T_NUMBER - 192)) | (1 << (HiveSql.T_OBJECT - 192)) | (1 << (HiveSql.T_OFF - 192)) | (1 << (HiveSql.T_ON - 192)) | (1 << (HiveSql.T_ONLY - 192)) | (1 << (HiveSql.T_OPEN - 192)) | (1 << (HiveSql.T_OR - 192)) | (1 << (HiveSql.T_ORDER - 192)) | (1 << (HiveSql.T_OUT - 192)) | (1 << (HiveSql.T_OUTER - 192)) | (1 << (HiveSql.T_OVER - 192)) | (1 << (HiveSql.T_OVERWRITE - 192)) | (1 << (HiveSql.T_OWNER - 192)) | (1 << (HiveSql.T_PACKAGE - 192)) | (1 << (HiveSql.T_PARTITION - 192)) | (1 << (HiveSql.T_PCTFREE - 192)) | (1 << (HiveSql.T_PCTUSED - 192)) | (1 << (HiveSql.T_PRECISION - 192)) | (1 << (HiveSql.T_PRESERVE - 192)) | (1 << (HiveSql.T_PRIMARY - 192)) | (1 << (HiveSql.T_PRINT - 192)) | (1 << (HiveSql.T_PROC - 192)) | (1 << (HiveSql.T_PROCEDURE - 192)) | (1 << (HiveSql.T_QUALIFY - 192)) | (1 << (HiveSql.T_QUERY_BAND - 192)) | (1 << (HiveSql.T_QUIT - 192)) | (1 << (HiveSql.T_QUOTED_IDENTIFIER - 192)) | (1 << (HiveSql.T_RAISE - 192)) | (1 << (HiveSql.T_REAL - 192)) | (1 << (HiveSql.T_REFERENCES - 192)) | (1 << (HiveSql.T_REGEXP - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (HiveSql.T_REPLACE - 224)) | (1 << (HiveSql.T_RESIGNAL - 224)) | (1 << (HiveSql.T_RESTRICT - 224)) | (1 << (HiveSql.T_RESULT - 224)) | (1 << (HiveSql.T_RESULT_SET_LOCATOR - 224)) | (1 << (HiveSql.T_RETURN - 224)) | (1 << (HiveSql.T_RETURNS - 224)) | (1 << (HiveSql.T_REVERSE - 224)) | (1 << (HiveSql.T_RIGHT - 224)) | (1 << (HiveSql.T_RLIKE - 224)) | (1 << (HiveSql.T_ROLE - 224)) | (1 << (HiveSql.T_ROLLBACK - 224)) | (1 << (HiveSql.T_ROW - 224)) | (1 << (HiveSql.T_ROWS - 224)) | (1 << (HiveSql.T_ROW_COUNT - 224)) | (1 << (HiveSql.T_RR - 224)) | (1 << (HiveSql.T_RS - 224)) | (1 << (HiveSql.T_PWD - 224)) | (1 << (HiveSql.T_TRIM - 224)) | (1 << (HiveSql.T_SCHEMA - 224)) | (1 << (HiveSql.T_SECOND - 224)) | (1 << (HiveSql.T_SECONDS - 224)) | (1 << (HiveSql.T_SECURITY - 224)) | (1 << (HiveSql.T_SEGMENT - 224)) | (1 << (HiveSql.T_SEL - 224)) | (1 << (HiveSql.T_SELECT - 224)) | (1 << (HiveSql.T_SET - 224)) | (1 << (HiveSql.T_SESSION - 224)) | (1 << (HiveSql.T_SESSIONS - 224)) | (1 << (HiveSql.T_SETS - 224)) | (1 << (HiveSql.T_SHARE - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (HiveSql.T_SIGNAL - 256)) | (1 << (HiveSql.T_SIMPLE_DOUBLE - 256)) | (1 << (HiveSql.T_SIMPLE_FLOAT - 256)) | (1 << (HiveSql.T_SMALLDATETIME - 256)) | (1 << (HiveSql.T_SMALLINT - 256)) | (1 << (HiveSql.T_SQL - 256)) | (1 << (HiveSql.T_SQLEXCEPTION - 256)) | (1 << (HiveSql.T_SQLINSERT - 256)) | (1 << (HiveSql.T_SQLSTATE - 256)) | (1 << (HiveSql.T_SQLWARNING - 256)) | (1 << (HiveSql.T_STATS - 256)) | (1 << (HiveSql.T_STATISTICS - 256)) | (1 << (HiveSql.T_STEP - 256)) | (1 << (HiveSql.T_STORAGE - 256)) | (1 << (HiveSql.T_STORED - 256)) | (1 << (HiveSql.T_STRING - 256)) | (1 << (HiveSql.T_SUBDIR - 256)) | (1 << (HiveSql.T_SUBSTRING - 256)) | (1 << (HiveSql.T_SUM - 256)) | (1 << (HiveSql.T_SUMMARY - 256)) | (1 << (HiveSql.T_SYS_REFCURSOR - 256)) | (1 << (HiveSql.T_TABLE - 256)) | (1 << (HiveSql.T_TABLESPACE - 256)) | (1 << (HiveSql.T_TEMPORARY - 256)) | (1 << (HiveSql.T_TERMINATED - 256)) | (1 << (HiveSql.T_TEXTIMAGE_ON - 256)) | (1 << (HiveSql.T_THEN - 256)) | (1 << (HiveSql.T_TIMESTAMP - 256)) | (1 << (HiveSql.T_TITLE - 256)) | (1 << (HiveSql.T_TO - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (HiveSql.T_TOP - 288)) | (1 << (HiveSql.T_TRANSACTION - 288)) | (1 << (HiveSql.T_TRUE - 288)) | (1 << (HiveSql.T_TRUNCATE - 288)) | (1 << (HiveSql.T_UNIQUE - 288)) | (1 << (HiveSql.T_UPDATE - 288)) | (1 << (HiveSql.T_UR - 288)) | (1 << (HiveSql.T_USE - 288)) | (1 << (HiveSql.T_USING - 288)) | (1 << (HiveSql.T_VALUE - 288)) | (1 << (HiveSql.T_VALUES - 288)) | (1 << (HiveSql.T_VAR - 288)) | (1 << (HiveSql.T_VARCHAR - 288)) | (1 << (HiveSql.T_VARCHAR2 - 288)) | (1 << (HiveSql.T_VARYING - 288)) | (1 << (HiveSql.T_VOLATILE - 288)) | (1 << (HiveSql.T_WHILE - 288)) | (1 << (HiveSql.T_WITH - 288)) | (1 << (HiveSql.T_WITHOUT - 288)) | (1 << (HiveSql.T_WORK - 288)) | (1 << (HiveSql.T_XACT_ABORT - 288)) | (1 << (HiveSql.T_XML - 288)) | (1 << (HiveSql.T_YES - 288)) | (1 << (HiveSql.T_ACTIVITY_COUNT - 288)) | (1 << (HiveSql.T_CUME_DIST - 288)) | (1 << (HiveSql.T_CURRENT_DATE - 288)) | (1 << (HiveSql.T_CURRENT_TIMESTAMP - 288)) | (1 << (HiveSql.T_CURRENT_USER - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (HiveSql.T_DENSE_RANK - 320)) | (1 << (HiveSql.T_FIRST_VALUE - 320)) | (1 << (HiveSql.T_LAG - 320)) | (1 << (HiveSql.T_LAST_VALUE - 320)) | (1 << (HiveSql.T_LEAD - 320)) | (1 << (HiveSql.T_PART_COUNT - 320)) | (1 << (HiveSql.T_PART_LOC - 320)) | (1 << (HiveSql.T_RANK - 320)) | (1 << (HiveSql.T_ROW_NUMBER - 320)) | (1 << (HiveSql.T_STDEV - 320)) | (1 << (HiveSql.T_SYSDATE - 320)) | (1 << (HiveSql.T_VARIANCE - 320)) | (1 << (HiveSql.T_USER - 320)))) !== 0) || _la === HiveSql.L_ID) {
				{
				{
				this.state = 1495;
				this.package_body_item();
				this.state = 1496;
				this.match(HiveSql.T_SEMICOLON);
				}
				}
				this.state = 1502;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public package_body_item(): Package_body_itemContext {
		let _localctx: Package_body_itemContext = new Package_body_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, HiveSql.RULE_package_body_item);
		try {
			this.state = 1506;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 151, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1503;
				this.declare_stmt_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1504;
				this.create_function_stmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1505;
				this.create_procedure_stmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_procedure_stmt(): Create_procedure_stmtContext {
		let _localctx: Create_procedure_stmtContext = new Create_procedure_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, HiveSql.RULE_create_procedure_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1515;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_ALTER:
				{
				this.state = 1508;
				this.match(HiveSql.T_ALTER);
				}
				break;
			case HiveSql.T_CREATE:
				{
				this.state = 1509;
				this.match(HiveSql.T_CREATE);
				this.state = 1512;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_OR) {
					{
					this.state = 1510;
					this.match(HiveSql.T_OR);
					this.state = 1511;
					this.match(HiveSql.T_REPLACE);
					}
				}

				}
				break;
			case HiveSql.T_REPLACE:
				{
				this.state = 1514;
				this.match(HiveSql.T_REPLACE);
				}
				break;
			case HiveSql.T_PROC:
			case HiveSql.T_PROCEDURE:
				break;
			default:
				break;
			}
			this.state = 1517;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_PROC || _la === HiveSql.T_PROCEDURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1518;
			this.ident();
			this.state = 1520;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 154, this._ctx) ) {
			case 1:
				{
				this.state = 1519;
				this.create_routine_params();
				}
				break;
			}
			this.state = 1523;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 155, this._ctx) ) {
			case 1:
				{
				this.state = 1522;
				this.create_routine_options();
				}
				break;
			}
			this.state = 1526;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 156, this._ctx) ) {
			case 1:
				{
				this.state = 1525;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_AS || _la === HiveSql.T_IS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 1529;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 157, this._ctx) ) {
			case 1:
				{
				this.state = 1528;
				this.declare_block_inplace();
				}
				break;
			}
			this.state = 1532;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 158, this._ctx) ) {
			case 1:
				{
				this.state = 1531;
				this.label();
				}
				break;
			}
			this.state = 1534;
			this.proc_block();
			this.state = 1538;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 159, this._ctx) ) {
			case 1:
				{
				this.state = 1535;
				this.ident();
				this.state = 1536;
				this.match(HiveSql.T_SEMICOLON);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_routine_params(): Create_routine_paramsContext {
		let _localctx: Create_routine_paramsContext = new Create_routine_paramsContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, HiveSql.RULE_create_routine_params);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1562;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 162, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1540;
				this.match(HiveSql.T_OPEN_P);
				this.state = 1541;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1542;
				this.match(HiveSql.T_OPEN_P);
				this.state = 1543;
				this.create_routine_param_item();
				this.state = 1548;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 1544;
					this.match(HiveSql.T_COMMA);
					this.state = 1545;
					this.create_routine_param_item();
					}
					}
					this.state = 1550;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1551;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1553;
				if (!(this._input.LT(1).text.toUpperCase() !== "IS" &&
				        this._input.LT(1).text.toUpperCase() !== "AS" &&
				        !(this._input.LT(1).text.toUpperCase() ==="DYNAMIC" && this._input.LT(2).text.toUpperCase() === "RESULT")
				        )) {
					throw this.createFailedPredicateException("this._input.LT(1).text.toUpperCase() !== \"IS\" &&\n        this._input.LT(1).text.toUpperCase() !== \"AS\" &&\n        !(this._input.LT(1).text.toUpperCase() ===\"DYNAMIC\" && this._input.LT(2).text.toUpperCase() === \"RESULT\")\n        ");
				}
				this.state = 1554;
				this.create_routine_param_item();
				this.state = 1559;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 161, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1555;
						this.match(HiveSql.T_COMMA);
						this.state = 1556;
						this.create_routine_param_item();
						}
						}
					}
					this.state = 1561;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 161, this._ctx);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_routine_param_item(): Create_routine_param_itemContext {
		let _localctx: Create_routine_param_itemContext = new Create_routine_param_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, HiveSql.RULE_create_routine_param_item);
		try {
			let _alt: number;
			this.state = 1606;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 171, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1569;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 163, this._ctx) ) {
				case 1:
					{
					this.state = 1564;
					this.match(HiveSql.T_IN);
					}
					break;

				case 2:
					{
					this.state = 1565;
					this.match(HiveSql.T_OUT);
					}
					break;

				case 3:
					{
					this.state = 1566;
					this.match(HiveSql.T_INOUT);
					}
					break;

				case 4:
					{
					this.state = 1567;
					this.match(HiveSql.T_IN);
					this.state = 1568;
					this.match(HiveSql.T_OUT);
					}
					break;
				}
				this.state = 1571;
				this.ident();
				this.state = 1572;
				this.dtype();
				this.state = 1574;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 164, this._ctx) ) {
				case 1:
					{
					this.state = 1573;
					this.dtype_len();
					}
					break;
				}
				this.state = 1579;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1576;
						this.dtype_attr();
						}
						}
					}
					this.state = 1581;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);
				}
				this.state = 1583;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 166, this._ctx) ) {
				case 1:
					{
					this.state = 1582;
					this.dtype_default();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1585;
				this.ident();
				this.state = 1591;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 167, this._ctx) ) {
				case 1:
					{
					this.state = 1586;
					this.match(HiveSql.T_IN);
					}
					break;

				case 2:
					{
					this.state = 1587;
					this.match(HiveSql.T_OUT);
					}
					break;

				case 3:
					{
					this.state = 1588;
					this.match(HiveSql.T_INOUT);
					}
					break;

				case 4:
					{
					this.state = 1589;
					this.match(HiveSql.T_IN);
					this.state = 1590;
					this.match(HiveSql.T_OUT);
					}
					break;
				}
				this.state = 1593;
				this.dtype();
				this.state = 1595;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 168, this._ctx) ) {
				case 1:
					{
					this.state = 1594;
					this.dtype_len();
					}
					break;
				}
				this.state = 1600;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1597;
						this.dtype_attr();
						}
						}
					}
					this.state = 1602;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 169, this._ctx);
				}
				this.state = 1604;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 170, this._ctx) ) {
				case 1:
					{
					this.state = 1603;
					this.dtype_default();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_routine_options(): Create_routine_optionsContext {
		let _localctx: Create_routine_optionsContext = new Create_routine_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, HiveSql.RULE_create_routine_options);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1609;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 1608;
					this.create_routine_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1611;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 172, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_routine_option(): Create_routine_optionContext {
		let _localctx: Create_routine_optionContext = new Create_routine_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, HiveSql.RULE_create_routine_option);
		let _la: number;
		try {
			this.state = 1624;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_LANGUAGE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1613;
				this.match(HiveSql.T_LANGUAGE);
				this.state = 1614;
				this.match(HiveSql.T_SQL);
				}
				break;
			case HiveSql.T_SQL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1615;
				this.match(HiveSql.T_SQL);
				this.state = 1616;
				this.match(HiveSql.T_SECURITY);
				this.state = 1617;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_CREATOR || _la === HiveSql.T_DEFINER || _la === HiveSql.T_INVOKER || _la === HiveSql.T_OWNER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case HiveSql.T_DYNAMIC:
			case HiveSql.T_RESULT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1619;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_DYNAMIC) {
					{
					this.state = 1618;
					this.match(HiveSql.T_DYNAMIC);
					}
				}

				this.state = 1621;
				this.match(HiveSql.T_RESULT);
				this.state = 1622;
				this.match(HiveSql.T_SETS);
				this.state = 1623;
				this.match(HiveSql.L_INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_stmt(): Drop_stmtContext {
		let _localctx: Drop_stmtContext = new Drop_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, HiveSql.RULE_drop_stmt);
		let _la: number;
		try {
			this.state = 1640;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 177, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1626;
				this.match(HiveSql.T_DROP);
				this.state = 1627;
				this.match(HiveSql.T_TABLE);
				this.state = 1630;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 175, this._ctx) ) {
				case 1:
					{
					this.state = 1628;
					this.match(HiveSql.T_IF);
					this.state = 1629;
					this.match(HiveSql.T_EXISTS);
					}
					break;
				}
				this.state = 1632;
				this.table_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1633;
				this.match(HiveSql.T_DROP);
				this.state = 1634;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_DATABASE || _la === HiveSql.T_SCHEMA)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1637;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 176, this._ctx) ) {
				case 1:
					{
					this.state = 1635;
					this.match(HiveSql.T_IF);
					this.state = 1636;
					this.match(HiveSql.T_EXISTS);
					}
					break;
				}
				this.state = 1639;
				this.expr(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public end_transaction_stmt(): End_transaction_stmtContext {
		let _localctx: End_transaction_stmtContext = new End_transaction_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, HiveSql.RULE_end_transaction_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1642;
			this.match(HiveSql.T_END);
			this.state = 1643;
			this.match(HiveSql.T_TRANSACTION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exec_stmt(): Exec_stmtContext {
		let _localctx: Exec_stmtContext = new Exec_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, HiveSql.RULE_exec_stmt);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1645;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_EXEC || _la === HiveSql.T_EXECUTE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1647;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 178, this._ctx) ) {
			case 1:
				{
				this.state = 1646;
				this.match(HiveSql.T_IMMEDIATE);
				}
				break;
			}
			this.state = 1649;
			this.expr(0);
			this.state = 1655;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 179, this._ctx) ) {
			case 1:
				{
				this.state = 1650;
				this.match(HiveSql.T_OPEN_P);
				this.state = 1651;
				this.expr_func_params();
				this.state = 1652;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 2:
				{
				this.state = 1654;
				this.expr_func_params();
				}
				break;
			}
			this.state = 1666;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 181, this._ctx) ) {
			case 1:
				{
				this.state = 1657;
				this.match(HiveSql.T_INTO);
				this.state = 1658;
				this.match(HiveSql.L_ID);
				this.state = 1663;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 180, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1659;
						this.match(HiveSql.T_COMMA);
						this.state = 1660;
						this.match(HiveSql.L_ID);
						}
						}
					}
					this.state = 1665;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 180, this._ctx);
				}
				}
				break;
			}
			this.state = 1669;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 182, this._ctx) ) {
			case 1:
				{
				this.state = 1668;
				this.using_clause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public if_stmt(): If_stmtContext {
		let _localctx: If_stmtContext = new If_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, HiveSql.RULE_if_stmt);
		try {
			this.state = 1674;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 183, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1671;
				this.if_plsql_stmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1672;
				this.if_tsql_stmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1673;
				this.if_bteq_stmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public if_plsql_stmt(): If_plsql_stmtContext {
		let _localctx: If_plsql_stmtContext = new If_plsql_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, HiveSql.RULE_if_plsql_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1676;
			this.match(HiveSql.T_IF);
			this.state = 1677;
			this.bool_expr(0);
			this.state = 1678;
			this.match(HiveSql.T_THEN);
			this.state = 1679;
			this.block();
			this.state = 1683;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_ELSEIF || _la === HiveSql.T_ELSIF) {
				{
				{
				this.state = 1680;
				this.elseif_block();
				}
				}
				this.state = 1685;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1687;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_ELSE) {
				{
				this.state = 1686;
				this.else_block();
				}
			}

			this.state = 1689;
			this.match(HiveSql.T_END);
			this.state = 1690;
			this.match(HiveSql.T_IF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public if_tsql_stmt(): If_tsql_stmtContext {
		let _localctx: If_tsql_stmtContext = new If_tsql_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, HiveSql.RULE_if_tsql_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1692;
			this.match(HiveSql.T_IF);
			this.state = 1693;
			this.bool_expr(0);
			this.state = 1694;
			this.single_block_stmt();
			this.state = 1697;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 186, this._ctx) ) {
			case 1:
				{
				this.state = 1695;
				this.match(HiveSql.T_ELSE);
				this.state = 1696;
				this.single_block_stmt();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public if_bteq_stmt(): If_bteq_stmtContext {
		let _localctx: If_bteq_stmtContext = new If_bteq_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, HiveSql.RULE_if_bteq_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1699;
			this.match(HiveSql.T_DOT);
			this.state = 1700;
			this.match(HiveSql.T_IF);
			this.state = 1701;
			this.bool_expr(0);
			this.state = 1702;
			this.match(HiveSql.T_THEN);
			this.state = 1703;
			this.single_block_stmt();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public elseif_block(): Elseif_blockContext {
		let _localctx: Elseif_blockContext = new Elseif_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, HiveSql.RULE_elseif_block);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1705;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_ELSEIF || _la === HiveSql.T_ELSIF)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1706;
			this.bool_expr(0);
			this.state = 1707;
			this.match(HiveSql.T_THEN);
			this.state = 1708;
			this.block();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public else_block(): Else_blockContext {
		let _localctx: Else_blockContext = new Else_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, HiveSql.RULE_else_block);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1710;
			this.match(HiveSql.T_ELSE);
			this.state = 1711;
			this.block();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public include_stmt(): Include_stmtContext {
		let _localctx: Include_stmtContext = new Include_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, HiveSql.RULE_include_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1713;
			this.match(HiveSql.T_INCLUDE);
			this.state = 1716;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 187, this._ctx) ) {
			case 1:
				{
				this.state = 1714;
				this.file_name();
				}
				break;

			case 2:
				{
				this.state = 1715;
				this.expr(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_stmt(): Insert_stmtContext {
		let _localctx: Insert_stmtContext = new Insert_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, HiveSql.RULE_insert_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1718;
			this.match(HiveSql.T_INSERT);
			this.state = 1725;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_OVERWRITE:
				{
				this.state = 1719;
				this.match(HiveSql.T_OVERWRITE);
				this.state = 1720;
				this.match(HiveSql.T_TABLE);
				}
				break;
			case HiveSql.T_INTO:
				{
				this.state = 1721;
				this.match(HiveSql.T_INTO);
				this.state = 1723;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 188, this._ctx) ) {
				case 1:
					{
					this.state = 1722;
					this.match(HiveSql.T_TABLE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1727;
			this.table_name();
			this.state = 1729;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 190, this._ctx) ) {
			case 1:
				{
				this.state = 1728;
				this.insert_stmt_cols();
				}
				break;
			}
			this.state = 1733;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_SEL:
			case HiveSql.T_SELECT:
			case HiveSql.T_WITH:
			case HiveSql.T_OPEN_P:
				{
				this.state = 1731;
				this.select_stmt();
				}
				break;
			case HiveSql.T_VALUES:
				{
				this.state = 1732;
				this.insert_stmt_rows();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_stmt_cols(): Insert_stmt_colsContext {
		let _localctx: Insert_stmt_colsContext = new Insert_stmt_colsContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, HiveSql.RULE_insert_stmt_cols);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1735;
			this.match(HiveSql.T_OPEN_P);
			this.state = 1736;
			this.ident();
			this.state = 1741;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 1737;
				this.match(HiveSql.T_COMMA);
				this.state = 1738;
				this.ident();
				}
				}
				this.state = 1743;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1744;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_stmt_rows(): Insert_stmt_rowsContext {
		let _localctx: Insert_stmt_rowsContext = new Insert_stmt_rowsContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, HiveSql.RULE_insert_stmt_rows);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1746;
			this.match(HiveSql.T_VALUES);
			this.state = 1747;
			this.insert_stmt_row();
			this.state = 1752;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 193, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1748;
					this.match(HiveSql.T_COMMA);
					this.state = 1749;
					this.insert_stmt_row();
					}
					}
				}
				this.state = 1754;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 193, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_stmt_row(): Insert_stmt_rowContext {
		let _localctx: Insert_stmt_rowContext = new Insert_stmt_rowContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, HiveSql.RULE_insert_stmt_row);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1755;
			this.match(HiveSql.T_OPEN_P);
			this.state = 1756;
			this.expr(0);
			this.state = 1761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 1757;
				this.match(HiveSql.T_COMMA);
				this.state = 1758;
				this.expr(0);
				}
				}
				this.state = 1763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1764;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_directory_stmt(): Insert_directory_stmtContext {
		let _localctx: Insert_directory_stmtContext = new Insert_directory_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, HiveSql.RULE_insert_directory_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1766;
			this.match(HiveSql.T_INSERT);
			this.state = 1767;
			this.match(HiveSql.T_OVERWRITE);
			this.state = 1769;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_LOCAL) {
				{
				this.state = 1768;
				this.match(HiveSql.T_LOCAL);
				}
			}

			this.state = 1771;
			this.match(HiveSql.T_DIRECTORY);
			this.state = 1772;
			this.expr_file();
			this.state = 1773;
			this.expr_select();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exit_stmt(): Exit_stmtContext {
		let _localctx: Exit_stmtContext = new Exit_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, HiveSql.RULE_exit_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1775;
			this.match(HiveSql.T_EXIT);
			this.state = 1777;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 196, this._ctx) ) {
			case 1:
				{
				this.state = 1776;
				this.match(HiveSql.L_ID);
				}
				break;
			}
			this.state = 1781;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 197, this._ctx) ) {
			case 1:
				{
				this.state = 1779;
				this.match(HiveSql.T_WHEN);
				this.state = 1780;
				this.bool_expr(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public get_diag_stmt(): Get_diag_stmtContext {
		let _localctx: Get_diag_stmtContext = new Get_diag_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, HiveSql.RULE_get_diag_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1783;
			this.match(HiveSql.T_GET);
			this.state = 1784;
			this.match(HiveSql.T_DIAGNOSTICS);
			this.state = 1785;
			this.get_diag_stmt_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public get_diag_stmt_item(): Get_diag_stmt_itemContext {
		let _localctx: Get_diag_stmt_itemContext = new Get_diag_stmt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, HiveSql.RULE_get_diag_stmt_item);
		try {
			this.state = 1789;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 198, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1787;
				this.get_diag_stmt_exception_item();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1788;
				this.get_diag_stmt_rowcount_item();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public get_diag_stmt_exception_item(): Get_diag_stmt_exception_itemContext {
		let _localctx: Get_diag_stmt_exception_itemContext = new Get_diag_stmt_exception_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, HiveSql.RULE_get_diag_stmt_exception_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1791;
			this.match(HiveSql.T_EXCEPTION);
			this.state = 1792;
			this.match(HiveSql.L_INT);
			this.state = 1793;
			this.ident();
			this.state = 1794;
			this.match(HiveSql.T_EQUAL);
			this.state = 1795;
			this.match(HiveSql.T_MESSAGE_TEXT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public get_diag_stmt_rowcount_item(): Get_diag_stmt_rowcount_itemContext {
		let _localctx: Get_diag_stmt_rowcount_itemContext = new Get_diag_stmt_rowcount_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, HiveSql.RULE_get_diag_stmt_rowcount_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1797;
			this.ident();
			this.state = 1798;
			this.match(HiveSql.T_EQUAL);
			this.state = 1799;
			this.match(HiveSql.T_ROW_COUNT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grant_stmt(): Grant_stmtContext {
		let _localctx: Grant_stmtContext = new Grant_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, HiveSql.RULE_grant_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1801;
			this.match(HiveSql.T_GRANT);
			this.state = 1802;
			this.grant_stmt_item();
			this.state = 1807;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 1803;
				this.match(HiveSql.T_COMMA);
				this.state = 1804;
				this.grant_stmt_item();
				}
				}
				this.state = 1809;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1810;
			this.match(HiveSql.T_TO);
			this.state = 1811;
			this.match(HiveSql.T_ROLE);
			this.state = 1812;
			this.ident();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grant_stmt_item(): Grant_stmt_itemContext {
		let _localctx: Grant_stmt_itemContext = new Grant_stmt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, HiveSql.RULE_grant_stmt_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1814;
			this.match(HiveSql.T_EXECUTE);
			this.state = 1815;
			this.match(HiveSql.T_ON);
			this.state = 1816;
			this.match(HiveSql.T_PROCEDURE);
			this.state = 1817;
			this.ident();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leave_stmt(): Leave_stmtContext {
		let _localctx: Leave_stmtContext = new Leave_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, HiveSql.RULE_leave_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1819;
			this.match(HiveSql.T_LEAVE);
			this.state = 1821;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 200, this._ctx) ) {
			case 1:
				{
				this.state = 1820;
				this.match(HiveSql.L_ID);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public map_object_stmt(): Map_object_stmtContext {
		let _localctx: Map_object_stmtContext = new Map_object_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, HiveSql.RULE_map_object_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1823;
			this.match(HiveSql.T_MAP);
			this.state = 1824;
			this.match(HiveSql.T_OBJECT);
			this.state = 1825;
			this.expr(0);
			this.state = 1828;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 201, this._ctx) ) {
			case 1:
				{
				this.state = 1826;
				this.match(HiveSql.T_TO);
				this.state = 1827;
				this.expr(0);
				}
				break;
			}
			this.state = 1832;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 202, this._ctx) ) {
			case 1:
				{
				this.state = 1830;
				this.match(HiveSql.T_AT);
				this.state = 1831;
				this.expr(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public open_stmt(): Open_stmtContext {
		let _localctx: Open_stmtContext = new Open_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, HiveSql.RULE_open_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1834;
			this.match(HiveSql.T_OPEN);
			this.state = 1835;
			this.match(HiveSql.L_ID);
			this.state = 1841;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 204, this._ctx) ) {
			case 1:
				{
				this.state = 1836;
				this.match(HiveSql.T_FOR);
				this.state = 1839;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 203, this._ctx) ) {
				case 1:
					{
					this.state = 1837;
					this.select_stmt();
					}
					break;

				case 2:
					{
					this.state = 1838;
					this.expr(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fetch_stmt(): Fetch_stmtContext {
		let _localctx: Fetch_stmtContext = new Fetch_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, HiveSql.RULE_fetch_stmt);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1843;
			this.match(HiveSql.T_FETCH);
			this.state = 1845;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_FROM) {
				{
				this.state = 1844;
				this.match(HiveSql.T_FROM);
				}
			}

			this.state = 1847;
			this.match(HiveSql.L_ID);
			this.state = 1848;
			this.match(HiveSql.T_INTO);
			this.state = 1849;
			this.match(HiveSql.L_ID);
			this.state = 1854;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 206, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1850;
					this.match(HiveSql.T_COMMA);
					this.state = 1851;
					this.match(HiveSql.L_ID);
					}
					}
				}
				this.state = 1856;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 206, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collect_stats_stmt(): Collect_stats_stmtContext {
		let _localctx: Collect_stats_stmtContext = new Collect_stats_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, HiveSql.RULE_collect_stats_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1857;
			this.match(HiveSql.T_COLLECT);
			this.state = 1858;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_STATS || _la === HiveSql.T_STATISTICS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1859;
			this.match(HiveSql.T_ON);
			this.state = 1860;
			this.table_name();
			this.state = 1862;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 207, this._ctx) ) {
			case 1:
				{
				this.state = 1861;
				this.collect_stats_clause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collect_stats_clause(): Collect_stats_clauseContext {
		let _localctx: Collect_stats_clauseContext = new Collect_stats_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, HiveSql.RULE_collect_stats_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1864;
			this.match(HiveSql.T_COLUMN);
			this.state = 1865;
			this.match(HiveSql.T_OPEN_P);
			this.state = 1866;
			this.ident();
			this.state = 1871;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 1867;
				this.match(HiveSql.T_COMMA);
				this.state = 1868;
				this.ident();
				}
				}
				this.state = 1873;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1874;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public close_stmt(): Close_stmtContext {
		let _localctx: Close_stmtContext = new Close_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, HiveSql.RULE_close_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1876;
			this.match(HiveSql.T_CLOSE);
			this.state = 1877;
			this.match(HiveSql.L_ID);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cmp_stmt(): Cmp_stmtContext {
		let _localctx: Cmp_stmtContext = new Cmp_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, HiveSql.RULE_cmp_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1879;
			this.match(HiveSql.T_CMP);
			this.state = 1880;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_ROW_COUNT || _la === HiveSql.T_SUM)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1881;
			this.cmp_source();
			this.state = 1882;
			this.match(HiveSql.T_COMMA);
			this.state = 1883;
			this.cmp_source();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cmp_source(): Cmp_sourceContext {
		let _localctx: Cmp_sourceContext = new Cmp_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, HiveSql.RULE_cmp_source);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1893;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_ACTION:
			case HiveSql.T_ADD2:
			case HiveSql.T_ALL:
			case HiveSql.T_ALLOCATE:
			case HiveSql.T_ALTER:
			case HiveSql.T_AND:
			case HiveSql.T_ANSI_NULLS:
			case HiveSql.T_ANSI_PADDING:
			case HiveSql.T_AS:
			case HiveSql.T_ASC:
			case HiveSql.T_ASSOCIATE:
			case HiveSql.T_AT:
			case HiveSql.T_AUTO_INCREMENT:
			case HiveSql.T_AVG:
			case HiveSql.T_BATCHSIZE:
			case HiveSql.T_BEGIN:
			case HiveSql.T_BETWEEN:
			case HiveSql.T_BIGINT:
			case HiveSql.T_BINARY_DOUBLE:
			case HiveSql.T_BINARY_FLOAT:
			case HiveSql.T_BIT:
			case HiveSql.T_BODY:
			case HiveSql.T_BREAK:
			case HiveSql.T_BY:
			case HiveSql.T_BYTE:
			case HiveSql.T_CALL:
			case HiveSql.T_CALLER:
			case HiveSql.T_CASCADE:
			case HiveSql.T_CASE:
			case HiveSql.T_CASESPECIFIC:
			case HiveSql.T_CAST:
			case HiveSql.T_CHAR:
			case HiveSql.T_CHARACTER:
			case HiveSql.T_CHARSET:
			case HiveSql.T_CLIENT:
			case HiveSql.T_CLOSE:
			case HiveSql.T_CLUSTERED:
			case HiveSql.T_CMP:
			case HiveSql.T_COLLECT:
			case HiveSql.T_COLLECTION:
			case HiveSql.T_COLUMN:
			case HiveSql.T_COMMENT:
			case HiveSql.T_CONSTANT:
			case HiveSql.T_COMMIT:
			case HiveSql.T_COMPRESS:
			case HiveSql.T_CONCAT:
			case HiveSql.T_CONDITION:
			case HiveSql.T_CONSTRAINT:
			case HiveSql.T_CONTINUE:
			case HiveSql.T_COPY:
			case HiveSql.T_COUNT:
			case HiveSql.T_COUNT_BIG:
			case HiveSql.T_CREATE:
			case HiveSql.T_CREATION:
			case HiveSql.T_CREATOR:
			case HiveSql.T_CS:
			case HiveSql.T_CURRENT:
			case HiveSql.T_CURRENT_SCHEMA:
			case HiveSql.T_CURSOR:
			case HiveSql.T_DATABASE:
			case HiveSql.T_DATA:
			case HiveSql.T_DATE:
			case HiveSql.T_DATETIME:
			case HiveSql.T_DAY:
			case HiveSql.T_DAYS:
			case HiveSql.T_DEC:
			case HiveSql.T_DECIMAL:
			case HiveSql.T_DECLARE:
			case HiveSql.T_DEFAULT:
			case HiveSql.T_DEFERRED:
			case HiveSql.T_DEFINED:
			case HiveSql.T_DEFINER:
			case HiveSql.T_DEFINITION:
			case HiveSql.T_DELETE:
			case HiveSql.T_DELIMITED:
			case HiveSql.T_DELIMITER:
			case HiveSql.T_DESC:
			case HiveSql.T_DESCRIBE:
			case HiveSql.T_DIAGNOSTICS:
			case HiveSql.T_DIR:
			case HiveSql.T_DIRECTORY:
			case HiveSql.T_DISTINCT:
			case HiveSql.T_DISTRIBUTE:
			case HiveSql.T_DO:
			case HiveSql.T_DOUBLE:
			case HiveSql.T_DROP:
			case HiveSql.T_DYNAMIC:
			case HiveSql.T_ENABLE:
			case HiveSql.T_ENGINE:
			case HiveSql.T_ESCAPED:
			case HiveSql.T_EXCEPT:
			case HiveSql.T_EXEC:
			case HiveSql.T_EXECUTE:
			case HiveSql.T_EXCEPTION:
			case HiveSql.T_EXCLUSIVE:
			case HiveSql.T_EXISTS:
			case HiveSql.T_EXIT:
			case HiveSql.T_FALLBACK:
			case HiveSql.T_FALSE:
			case HiveSql.T_FETCH:
			case HiveSql.T_FIELDS:
			case HiveSql.T_FILE:
			case HiveSql.T_FILES:
			case HiveSql.T_FLOAT:
			case HiveSql.T_FOR:
			case HiveSql.T_FOREIGN:
			case HiveSql.T_FORMAT:
			case HiveSql.T_FOUND:
			case HiveSql.T_FROM:
			case HiveSql.T_FULL:
			case HiveSql.T_FUNCTION:
			case HiveSql.T_GET:
			case HiveSql.T_GLOBAL:
			case HiveSql.T_GO:
			case HiveSql.T_GRANT:
			case HiveSql.T_GROUP:
			case HiveSql.T_HANDLER:
			case HiveSql.T_HASH:
			case HiveSql.T_HAVING:
			case HiveSql.T_HDFS:
			case HiveSql.T_HIVE:
			case HiveSql.T_HOST:
			case HiveSql.T_IDENTITY:
			case HiveSql.T_IF:
			case HiveSql.T_IGNORE:
			case HiveSql.T_IMMEDIATE:
			case HiveSql.T_IN:
			case HiveSql.T_INCLUDE:
			case HiveSql.T_INDEX:
			case HiveSql.T_INITRANS:
			case HiveSql.T_INNER:
			case HiveSql.T_INOUT:
			case HiveSql.T_INSERT:
			case HiveSql.T_INT:
			case HiveSql.T_INT2:
			case HiveSql.T_INT4:
			case HiveSql.T_INT8:
			case HiveSql.T_INTEGER:
			case HiveSql.T_INTERSECT:
			case HiveSql.T_INTERVAL:
			case HiveSql.T_INTO:
			case HiveSql.T_INVOKER:
			case HiveSql.T_IS:
			case HiveSql.T_ISOPEN:
			case HiveSql.T_ITEMS:
			case HiveSql.T_JOIN:
			case HiveSql.T_KEEP:
			case HiveSql.T_KEY:
			case HiveSql.T_KEYS:
			case HiveSql.T_LANGUAGE:
			case HiveSql.T_LEAVE:
			case HiveSql.T_LEFT:
			case HiveSql.T_LIKE:
			case HiveSql.T_LIMIT:
			case HiveSql.T_LINES:
			case HiveSql.T_LOCAL:
			case HiveSql.T_LOCATION:
			case HiveSql.T_LOCATOR:
			case HiveSql.T_LOCATORS:
			case HiveSql.T_LOCKS:
			case HiveSql.T_LOG:
			case HiveSql.T_LOGGED:
			case HiveSql.T_LOGGING:
			case HiveSql.T_LOOP:
			case HiveSql.T_MAP:
			case HiveSql.T_MATCHED:
			case HiveSql.T_MAX:
			case HiveSql.T_MAXTRANS:
			case HiveSql.T_MERGE:
			case HiveSql.T_MESSAGE_TEXT:
			case HiveSql.T_MICROSECOND:
			case HiveSql.T_MICROSECONDS:
			case HiveSql.T_MIN:
			case HiveSql.T_MULTISET:
			case HiveSql.T_NCHAR:
			case HiveSql.T_NEW:
			case HiveSql.T_NVARCHAR:
			case HiveSql.T_NO:
			case HiveSql.T_NOCOUNT:
			case HiveSql.T_NOCOMPRESS:
			case HiveSql.T_NOLOGGING:
			case HiveSql.T_NONE:
			case HiveSql.T_NOT:
			case HiveSql.T_NOTFOUND:
			case HiveSql.T_NUMERIC:
			case HiveSql.T_NUMBER:
			case HiveSql.T_OBJECT:
			case HiveSql.T_OFF:
			case HiveSql.T_ON:
			case HiveSql.T_ONLY:
			case HiveSql.T_OPEN:
			case HiveSql.T_OR:
			case HiveSql.T_ORDER:
			case HiveSql.T_OUT:
			case HiveSql.T_OUTER:
			case HiveSql.T_OVER:
			case HiveSql.T_OVERWRITE:
			case HiveSql.T_OWNER:
			case HiveSql.T_PACKAGE:
			case HiveSql.T_PARTITION:
			case HiveSql.T_PCTFREE:
			case HiveSql.T_PCTUSED:
			case HiveSql.T_PRECISION:
			case HiveSql.T_PRESERVE:
			case HiveSql.T_PRIMARY:
			case HiveSql.T_PRINT:
			case HiveSql.T_PROC:
			case HiveSql.T_PROCEDURE:
			case HiveSql.T_QUALIFY:
			case HiveSql.T_QUERY_BAND:
			case HiveSql.T_QUIT:
			case HiveSql.T_QUOTED_IDENTIFIER:
			case HiveSql.T_RAISE:
			case HiveSql.T_REAL:
			case HiveSql.T_REFERENCES:
			case HiveSql.T_REGEXP:
			case HiveSql.T_REPLACE:
			case HiveSql.T_RESIGNAL:
			case HiveSql.T_RESTRICT:
			case HiveSql.T_RESULT:
			case HiveSql.T_RESULT_SET_LOCATOR:
			case HiveSql.T_RETURN:
			case HiveSql.T_RETURNS:
			case HiveSql.T_REVERSE:
			case HiveSql.T_RIGHT:
			case HiveSql.T_RLIKE:
			case HiveSql.T_ROLE:
			case HiveSql.T_ROLLBACK:
			case HiveSql.T_ROW:
			case HiveSql.T_ROWS:
			case HiveSql.T_ROW_COUNT:
			case HiveSql.T_RR:
			case HiveSql.T_RS:
			case HiveSql.T_PWD:
			case HiveSql.T_TRIM:
			case HiveSql.T_SCHEMA:
			case HiveSql.T_SECOND:
			case HiveSql.T_SECONDS:
			case HiveSql.T_SECURITY:
			case HiveSql.T_SEGMENT:
			case HiveSql.T_SEL:
			case HiveSql.T_SELECT:
			case HiveSql.T_SET:
			case HiveSql.T_SESSION:
			case HiveSql.T_SESSIONS:
			case HiveSql.T_SETS:
			case HiveSql.T_SHARE:
			case HiveSql.T_SIGNAL:
			case HiveSql.T_SIMPLE_DOUBLE:
			case HiveSql.T_SIMPLE_FLOAT:
			case HiveSql.T_SMALLDATETIME:
			case HiveSql.T_SMALLINT:
			case HiveSql.T_SQL:
			case HiveSql.T_SQLEXCEPTION:
			case HiveSql.T_SQLINSERT:
			case HiveSql.T_SQLSTATE:
			case HiveSql.T_SQLWARNING:
			case HiveSql.T_STATS:
			case HiveSql.T_STATISTICS:
			case HiveSql.T_STEP:
			case HiveSql.T_STORAGE:
			case HiveSql.T_STORED:
			case HiveSql.T_STRING:
			case HiveSql.T_SUBDIR:
			case HiveSql.T_SUBSTRING:
			case HiveSql.T_SUM:
			case HiveSql.T_SUMMARY:
			case HiveSql.T_SYS_REFCURSOR:
			case HiveSql.T_TABLE:
			case HiveSql.T_TABLESPACE:
			case HiveSql.T_TEMPORARY:
			case HiveSql.T_TERMINATED:
			case HiveSql.T_TEXTIMAGE_ON:
			case HiveSql.T_THEN:
			case HiveSql.T_TIMESTAMP:
			case HiveSql.T_TITLE:
			case HiveSql.T_TO:
			case HiveSql.T_TOP:
			case HiveSql.T_TRANSACTION:
			case HiveSql.T_TRUE:
			case HiveSql.T_TRUNCATE:
			case HiveSql.T_UNIQUE:
			case HiveSql.T_UPDATE:
			case HiveSql.T_UR:
			case HiveSql.T_USE:
			case HiveSql.T_USING:
			case HiveSql.T_VALUE:
			case HiveSql.T_VALUES:
			case HiveSql.T_VAR:
			case HiveSql.T_VARCHAR:
			case HiveSql.T_VARCHAR2:
			case HiveSql.T_VARYING:
			case HiveSql.T_VOLATILE:
			case HiveSql.T_WHILE:
			case HiveSql.T_WITH:
			case HiveSql.T_WITHOUT:
			case HiveSql.T_WORK:
			case HiveSql.T_XACT_ABORT:
			case HiveSql.T_XML:
			case HiveSql.T_YES:
			case HiveSql.T_ACTIVITY_COUNT:
			case HiveSql.T_CUME_DIST:
			case HiveSql.T_CURRENT_DATE:
			case HiveSql.T_CURRENT_TIMESTAMP:
			case HiveSql.T_CURRENT_USER:
			case HiveSql.T_DENSE_RANK:
			case HiveSql.T_FIRST_VALUE:
			case HiveSql.T_LAG:
			case HiveSql.T_LAST_VALUE:
			case HiveSql.T_LEAD:
			case HiveSql.T_PART_COUNT:
			case HiveSql.T_PART_LOC:
			case HiveSql.T_RANK:
			case HiveSql.T_ROW_NUMBER:
			case HiveSql.T_STDEV:
			case HiveSql.T_SYSDATE:
			case HiveSql.T_VARIANCE:
			case HiveSql.T_USER:
			case HiveSql.L_ID:
				{
				this.state = 1885;
				this.table_name();
				this.state = 1887;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 209, this._ctx) ) {
				case 1:
					{
					this.state = 1886;
					this.where_clause();
					}
					break;
				}
				}
				break;
			case HiveSql.T_OPEN_P:
				{
				this.state = 1889;
				this.match(HiveSql.T_OPEN_P);
				this.state = 1890;
				this.select_stmt();
				this.state = 1891;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1897;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 211, this._ctx) ) {
			case 1:
				{
				this.state = 1895;
				this.match(HiveSql.T_AT);
				this.state = 1896;
				this.ident();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_from_local_stmt(): Copy_from_local_stmtContext {
		let _localctx: Copy_from_local_stmtContext = new Copy_from_local_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, HiveSql.RULE_copy_from_local_stmt);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1899;
			this.match(HiveSql.T_COPY);
			this.state = 1900;
			this.match(HiveSql.T_FROM);
			this.state = 1901;
			this.match(HiveSql.T_LOCAL);
			this.state = 1902;
			this.copy_source();
			this.state = 1907;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 1903;
				this.match(HiveSql.T_COMMA);
				this.state = 1904;
				this.copy_source();
				}
				}
				this.state = 1909;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1910;
			this.match(HiveSql.T_TO);
			this.state = 1911;
			this.copy_target();
			this.state = 1915;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1912;
					this.copy_file_option();
					}
					}
				}
				this.state = 1917;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_stmt(): Copy_stmtContext {
		let _localctx: Copy_stmtContext = new Copy_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, HiveSql.RULE_copy_stmt);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1918;
			this.match(HiveSql.T_COPY);
			this.state = 1924;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_ACTION:
			case HiveSql.T_ADD2:
			case HiveSql.T_ALL:
			case HiveSql.T_ALLOCATE:
			case HiveSql.T_ALTER:
			case HiveSql.T_AND:
			case HiveSql.T_ANSI_NULLS:
			case HiveSql.T_ANSI_PADDING:
			case HiveSql.T_AS:
			case HiveSql.T_ASC:
			case HiveSql.T_ASSOCIATE:
			case HiveSql.T_AT:
			case HiveSql.T_AUTO_INCREMENT:
			case HiveSql.T_AVG:
			case HiveSql.T_BATCHSIZE:
			case HiveSql.T_BEGIN:
			case HiveSql.T_BETWEEN:
			case HiveSql.T_BIGINT:
			case HiveSql.T_BINARY_DOUBLE:
			case HiveSql.T_BINARY_FLOAT:
			case HiveSql.T_BIT:
			case HiveSql.T_BODY:
			case HiveSql.T_BREAK:
			case HiveSql.T_BY:
			case HiveSql.T_BYTE:
			case HiveSql.T_CALL:
			case HiveSql.T_CALLER:
			case HiveSql.T_CASCADE:
			case HiveSql.T_CASE:
			case HiveSql.T_CASESPECIFIC:
			case HiveSql.T_CAST:
			case HiveSql.T_CHAR:
			case HiveSql.T_CHARACTER:
			case HiveSql.T_CHARSET:
			case HiveSql.T_CLIENT:
			case HiveSql.T_CLOSE:
			case HiveSql.T_CLUSTERED:
			case HiveSql.T_CMP:
			case HiveSql.T_COLLECT:
			case HiveSql.T_COLLECTION:
			case HiveSql.T_COLUMN:
			case HiveSql.T_COMMENT:
			case HiveSql.T_CONSTANT:
			case HiveSql.T_COMMIT:
			case HiveSql.T_COMPRESS:
			case HiveSql.T_CONCAT:
			case HiveSql.T_CONDITION:
			case HiveSql.T_CONSTRAINT:
			case HiveSql.T_CONTINUE:
			case HiveSql.T_COPY:
			case HiveSql.T_COUNT:
			case HiveSql.T_COUNT_BIG:
			case HiveSql.T_CREATE:
			case HiveSql.T_CREATION:
			case HiveSql.T_CREATOR:
			case HiveSql.T_CS:
			case HiveSql.T_CURRENT:
			case HiveSql.T_CURRENT_SCHEMA:
			case HiveSql.T_CURSOR:
			case HiveSql.T_DATABASE:
			case HiveSql.T_DATA:
			case HiveSql.T_DATE:
			case HiveSql.T_DATETIME:
			case HiveSql.T_DAY:
			case HiveSql.T_DAYS:
			case HiveSql.T_DEC:
			case HiveSql.T_DECIMAL:
			case HiveSql.T_DECLARE:
			case HiveSql.T_DEFAULT:
			case HiveSql.T_DEFERRED:
			case HiveSql.T_DEFINED:
			case HiveSql.T_DEFINER:
			case HiveSql.T_DEFINITION:
			case HiveSql.T_DELETE:
			case HiveSql.T_DELIMITED:
			case HiveSql.T_DELIMITER:
			case HiveSql.T_DESC:
			case HiveSql.T_DESCRIBE:
			case HiveSql.T_DIAGNOSTICS:
			case HiveSql.T_DIR:
			case HiveSql.T_DIRECTORY:
			case HiveSql.T_DISTINCT:
			case HiveSql.T_DISTRIBUTE:
			case HiveSql.T_DO:
			case HiveSql.T_DOUBLE:
			case HiveSql.T_DROP:
			case HiveSql.T_DYNAMIC:
			case HiveSql.T_ENABLE:
			case HiveSql.T_ENGINE:
			case HiveSql.T_ESCAPED:
			case HiveSql.T_EXCEPT:
			case HiveSql.T_EXEC:
			case HiveSql.T_EXECUTE:
			case HiveSql.T_EXCEPTION:
			case HiveSql.T_EXCLUSIVE:
			case HiveSql.T_EXISTS:
			case HiveSql.T_EXIT:
			case HiveSql.T_FALLBACK:
			case HiveSql.T_FALSE:
			case HiveSql.T_FETCH:
			case HiveSql.T_FIELDS:
			case HiveSql.T_FILE:
			case HiveSql.T_FILES:
			case HiveSql.T_FLOAT:
			case HiveSql.T_FOR:
			case HiveSql.T_FOREIGN:
			case HiveSql.T_FORMAT:
			case HiveSql.T_FOUND:
			case HiveSql.T_FROM:
			case HiveSql.T_FULL:
			case HiveSql.T_FUNCTION:
			case HiveSql.T_GET:
			case HiveSql.T_GLOBAL:
			case HiveSql.T_GO:
			case HiveSql.T_GRANT:
			case HiveSql.T_GROUP:
			case HiveSql.T_HANDLER:
			case HiveSql.T_HASH:
			case HiveSql.T_HAVING:
			case HiveSql.T_HDFS:
			case HiveSql.T_HIVE:
			case HiveSql.T_HOST:
			case HiveSql.T_IDENTITY:
			case HiveSql.T_IF:
			case HiveSql.T_IGNORE:
			case HiveSql.T_IMMEDIATE:
			case HiveSql.T_IN:
			case HiveSql.T_INCLUDE:
			case HiveSql.T_INDEX:
			case HiveSql.T_INITRANS:
			case HiveSql.T_INNER:
			case HiveSql.T_INOUT:
			case HiveSql.T_INSERT:
			case HiveSql.T_INT:
			case HiveSql.T_INT2:
			case HiveSql.T_INT4:
			case HiveSql.T_INT8:
			case HiveSql.T_INTEGER:
			case HiveSql.T_INTERSECT:
			case HiveSql.T_INTERVAL:
			case HiveSql.T_INTO:
			case HiveSql.T_INVOKER:
			case HiveSql.T_IS:
			case HiveSql.T_ISOPEN:
			case HiveSql.T_ITEMS:
			case HiveSql.T_JOIN:
			case HiveSql.T_KEEP:
			case HiveSql.T_KEY:
			case HiveSql.T_KEYS:
			case HiveSql.T_LANGUAGE:
			case HiveSql.T_LEAVE:
			case HiveSql.T_LEFT:
			case HiveSql.T_LIKE:
			case HiveSql.T_LIMIT:
			case HiveSql.T_LINES:
			case HiveSql.T_LOCAL:
			case HiveSql.T_LOCATION:
			case HiveSql.T_LOCATOR:
			case HiveSql.T_LOCATORS:
			case HiveSql.T_LOCKS:
			case HiveSql.T_LOG:
			case HiveSql.T_LOGGED:
			case HiveSql.T_LOGGING:
			case HiveSql.T_LOOP:
			case HiveSql.T_MAP:
			case HiveSql.T_MATCHED:
			case HiveSql.T_MAX:
			case HiveSql.T_MAXTRANS:
			case HiveSql.T_MERGE:
			case HiveSql.T_MESSAGE_TEXT:
			case HiveSql.T_MICROSECOND:
			case HiveSql.T_MICROSECONDS:
			case HiveSql.T_MIN:
			case HiveSql.T_MULTISET:
			case HiveSql.T_NCHAR:
			case HiveSql.T_NEW:
			case HiveSql.T_NVARCHAR:
			case HiveSql.T_NO:
			case HiveSql.T_NOCOUNT:
			case HiveSql.T_NOCOMPRESS:
			case HiveSql.T_NOLOGGING:
			case HiveSql.T_NONE:
			case HiveSql.T_NOT:
			case HiveSql.T_NOTFOUND:
			case HiveSql.T_NUMERIC:
			case HiveSql.T_NUMBER:
			case HiveSql.T_OBJECT:
			case HiveSql.T_OFF:
			case HiveSql.T_ON:
			case HiveSql.T_ONLY:
			case HiveSql.T_OPEN:
			case HiveSql.T_OR:
			case HiveSql.T_ORDER:
			case HiveSql.T_OUT:
			case HiveSql.T_OUTER:
			case HiveSql.T_OVER:
			case HiveSql.T_OVERWRITE:
			case HiveSql.T_OWNER:
			case HiveSql.T_PACKAGE:
			case HiveSql.T_PARTITION:
			case HiveSql.T_PCTFREE:
			case HiveSql.T_PCTUSED:
			case HiveSql.T_PRECISION:
			case HiveSql.T_PRESERVE:
			case HiveSql.T_PRIMARY:
			case HiveSql.T_PRINT:
			case HiveSql.T_PROC:
			case HiveSql.T_PROCEDURE:
			case HiveSql.T_QUALIFY:
			case HiveSql.T_QUERY_BAND:
			case HiveSql.T_QUIT:
			case HiveSql.T_QUOTED_IDENTIFIER:
			case HiveSql.T_RAISE:
			case HiveSql.T_REAL:
			case HiveSql.T_REFERENCES:
			case HiveSql.T_REGEXP:
			case HiveSql.T_REPLACE:
			case HiveSql.T_RESIGNAL:
			case HiveSql.T_RESTRICT:
			case HiveSql.T_RESULT:
			case HiveSql.T_RESULT_SET_LOCATOR:
			case HiveSql.T_RETURN:
			case HiveSql.T_RETURNS:
			case HiveSql.T_REVERSE:
			case HiveSql.T_RIGHT:
			case HiveSql.T_RLIKE:
			case HiveSql.T_ROLE:
			case HiveSql.T_ROLLBACK:
			case HiveSql.T_ROW:
			case HiveSql.T_ROWS:
			case HiveSql.T_ROW_COUNT:
			case HiveSql.T_RR:
			case HiveSql.T_RS:
			case HiveSql.T_PWD:
			case HiveSql.T_TRIM:
			case HiveSql.T_SCHEMA:
			case HiveSql.T_SECOND:
			case HiveSql.T_SECONDS:
			case HiveSql.T_SECURITY:
			case HiveSql.T_SEGMENT:
			case HiveSql.T_SEL:
			case HiveSql.T_SELECT:
			case HiveSql.T_SET:
			case HiveSql.T_SESSION:
			case HiveSql.T_SESSIONS:
			case HiveSql.T_SETS:
			case HiveSql.T_SHARE:
			case HiveSql.T_SIGNAL:
			case HiveSql.T_SIMPLE_DOUBLE:
			case HiveSql.T_SIMPLE_FLOAT:
			case HiveSql.T_SMALLDATETIME:
			case HiveSql.T_SMALLINT:
			case HiveSql.T_SQL:
			case HiveSql.T_SQLEXCEPTION:
			case HiveSql.T_SQLINSERT:
			case HiveSql.T_SQLSTATE:
			case HiveSql.T_SQLWARNING:
			case HiveSql.T_STATS:
			case HiveSql.T_STATISTICS:
			case HiveSql.T_STEP:
			case HiveSql.T_STORAGE:
			case HiveSql.T_STORED:
			case HiveSql.T_STRING:
			case HiveSql.T_SUBDIR:
			case HiveSql.T_SUBSTRING:
			case HiveSql.T_SUM:
			case HiveSql.T_SUMMARY:
			case HiveSql.T_SYS_REFCURSOR:
			case HiveSql.T_TABLE:
			case HiveSql.T_TABLESPACE:
			case HiveSql.T_TEMPORARY:
			case HiveSql.T_TERMINATED:
			case HiveSql.T_TEXTIMAGE_ON:
			case HiveSql.T_THEN:
			case HiveSql.T_TIMESTAMP:
			case HiveSql.T_TITLE:
			case HiveSql.T_TO:
			case HiveSql.T_TOP:
			case HiveSql.T_TRANSACTION:
			case HiveSql.T_TRUE:
			case HiveSql.T_TRUNCATE:
			case HiveSql.T_UNIQUE:
			case HiveSql.T_UPDATE:
			case HiveSql.T_UR:
			case HiveSql.T_USE:
			case HiveSql.T_USING:
			case HiveSql.T_VALUE:
			case HiveSql.T_VALUES:
			case HiveSql.T_VAR:
			case HiveSql.T_VARCHAR:
			case HiveSql.T_VARCHAR2:
			case HiveSql.T_VARYING:
			case HiveSql.T_VOLATILE:
			case HiveSql.T_WHILE:
			case HiveSql.T_WITH:
			case HiveSql.T_WITHOUT:
			case HiveSql.T_WORK:
			case HiveSql.T_XACT_ABORT:
			case HiveSql.T_XML:
			case HiveSql.T_YES:
			case HiveSql.T_ACTIVITY_COUNT:
			case HiveSql.T_CUME_DIST:
			case HiveSql.T_CURRENT_DATE:
			case HiveSql.T_CURRENT_TIMESTAMP:
			case HiveSql.T_CURRENT_USER:
			case HiveSql.T_DENSE_RANK:
			case HiveSql.T_FIRST_VALUE:
			case HiveSql.T_LAG:
			case HiveSql.T_LAST_VALUE:
			case HiveSql.T_LEAD:
			case HiveSql.T_PART_COUNT:
			case HiveSql.T_PART_LOC:
			case HiveSql.T_RANK:
			case HiveSql.T_ROW_NUMBER:
			case HiveSql.T_STDEV:
			case HiveSql.T_SYSDATE:
			case HiveSql.T_VARIANCE:
			case HiveSql.T_USER:
			case HiveSql.L_ID:
				{
				this.state = 1919;
				this.table_name();
				}
				break;
			case HiveSql.T_OPEN_P:
				{
				this.state = 1920;
				this.match(HiveSql.T_OPEN_P);
				this.state = 1921;
				this.select_stmt();
				this.state = 1922;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1926;
			this.match(HiveSql.T_TO);
			this.state = 1928;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 215, this._ctx) ) {
			case 1:
				{
				this.state = 1927;
				this.match(HiveSql.T_HDFS);
				}
				break;
			}
			this.state = 1930;
			this.copy_target();
			this.state = 1934;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 216, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1931;
					this.copy_option();
					}
					}
				}
				this.state = 1936;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 216, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_source(): Copy_sourceContext {
		let _localctx: Copy_sourceContext = new Copy_sourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, HiveSql.RULE_copy_source);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1939;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 217, this._ctx) ) {
			case 1:
				{
				this.state = 1937;
				this.file_name();
				}
				break;

			case 2:
				{
				this.state = 1938;
				this.expr(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_target(): Copy_targetContext {
		let _localctx: Copy_targetContext = new Copy_targetContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, HiveSql.RULE_copy_target);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1943;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 218, this._ctx) ) {
			case 1:
				{
				this.state = 1941;
				this.file_name();
				}
				break;

			case 2:
				{
				this.state = 1942;
				this.expr(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_option(): Copy_optionContext {
		let _localctx: Copy_optionContext = new Copy_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, HiveSql.RULE_copy_option);
		try {
			this.state = 1953;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_AT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1945;
				this.match(HiveSql.T_AT);
				this.state = 1946;
				this.ident();
				}
				break;
			case HiveSql.T_BATCHSIZE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1947;
				this.match(HiveSql.T_BATCHSIZE);
				this.state = 1948;
				this.expr(0);
				}
				break;
			case HiveSql.T_DELIMITER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1949;
				this.match(HiveSql.T_DELIMITER);
				this.state = 1950;
				this.expr(0);
				}
				break;
			case HiveSql.T_SQLINSERT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1951;
				this.match(HiveSql.T_SQLINSERT);
				this.state = 1952;
				this.ident();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_file_option(): Copy_file_optionContext {
		let _localctx: Copy_file_optionContext = new Copy_file_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, HiveSql.RULE_copy_file_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1955;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_DELETE || _la === HiveSql.T_IGNORE || _la === HiveSql.T_OVERWRITE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commit_stmt(): Commit_stmtContext {
		let _localctx: Commit_stmtContext = new Commit_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, HiveSql.RULE_commit_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1957;
			this.match(HiveSql.T_COMMIT);
			this.state = 1959;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 220, this._ctx) ) {
			case 1:
				{
				this.state = 1958;
				this.match(HiveSql.T_WORK);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_index_stmt(): Create_index_stmtContext {
		let _localctx: Create_index_stmtContext = new Create_index_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, HiveSql.RULE_create_index_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1961;
			this.match(HiveSql.T_CREATE);
			this.state = 1963;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_UNIQUE) {
				{
				this.state = 1962;
				this.match(HiveSql.T_UNIQUE);
				}
			}

			this.state = 1965;
			this.match(HiveSql.T_INDEX);
			this.state = 1966;
			this.ident();
			this.state = 1967;
			this.match(HiveSql.T_ON);
			this.state = 1968;
			this.table_name();
			this.state = 1969;
			this.match(HiveSql.T_OPEN_P);
			this.state = 1970;
			this.create_index_col();
			this.state = 1975;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 1971;
				this.match(HiveSql.T_COMMA);
				this.state = 1972;
				this.create_index_col();
				}
				}
				this.state = 1977;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1978;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_index_col(): Create_index_colContext {
		let _localctx: Create_index_colContext = new Create_index_colContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, HiveSql.RULE_create_index_col);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1980;
			this.ident();
			this.state = 1982;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_ASC || _la === HiveSql.T_DESC) {
				{
				this.state = 1981;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_ASC || _la === HiveSql.T_DESC)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_storage_clause(): Index_storage_clauseContext {
		let _localctx: Index_storage_clauseContext = new Index_storage_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, HiveSql.RULE_index_storage_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1984;
			this.index_mssql_storage_clause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_mssql_storage_clause(): Index_mssql_storage_clauseContext {
		let _localctx: Index_mssql_storage_clauseContext = new Index_mssql_storage_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, HiveSql.RULE_index_mssql_storage_clause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1986;
			this.match(HiveSql.T_WITH);
			this.state = 1987;
			this.match(HiveSql.T_OPEN_P);
			this.state = 1988;
			this.ident();
			this.state = 1989;
			this.match(HiveSql.T_EQUAL);
			this.state = 1990;
			this.ident();
			this.state = 1998;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 1991;
				this.match(HiveSql.T_COMMA);
				this.state = 1992;
				this.ident();
				this.state = 1993;
				this.match(HiveSql.T_EQUAL);
				this.state = 1994;
				this.ident();
				}
				}
				this.state = 2000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2001;
			this.match(HiveSql.T_CLOSE_P);
			this.state = 2005;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 225, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2002;
					this.create_table_options_mssql_item();
					}
					}
				}
				this.state = 2007;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 225, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public print_stmt(): Print_stmtContext {
		let _localctx: Print_stmtContext = new Print_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, HiveSql.RULE_print_stmt);
		try {
			this.state = 2015;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 226, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2008;
				this.match(HiveSql.T_PRINT);
				this.state = 2009;
				this.expr(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2010;
				this.match(HiveSql.T_PRINT);
				this.state = 2011;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2012;
				this.expr(0);
				this.state = 2013;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public quit_stmt(): Quit_stmtContext {
		let _localctx: Quit_stmtContext = new Quit_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, HiveSql.RULE_quit_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2018;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_DOT) {
				{
				this.state = 2017;
				this.match(HiveSql.T_DOT);
				}
			}

			this.state = 2020;
			this.match(HiveSql.T_QUIT);
			this.state = 2022;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 228, this._ctx) ) {
			case 1:
				{
				this.state = 2021;
				this.expr(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public raise_stmt(): Raise_stmtContext {
		let _localctx: Raise_stmtContext = new Raise_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, HiveSql.RULE_raise_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2024;
			this.match(HiveSql.T_RAISE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resignal_stmt(): Resignal_stmtContext {
		let _localctx: Resignal_stmtContext = new Resignal_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, HiveSql.RULE_resignal_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2026;
			this.match(HiveSql.T_RESIGNAL);
			this.state = 2038;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 231, this._ctx) ) {
			case 1:
				{
				this.state = 2027;
				this.match(HiveSql.T_SQLSTATE);
				this.state = 2029;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 229, this._ctx) ) {
				case 1:
					{
					this.state = 2028;
					this.match(HiveSql.T_VALUE);
					}
					break;
				}
				this.state = 2031;
				this.expr(0);
				this.state = 2036;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 230, this._ctx) ) {
				case 1:
					{
					this.state = 2032;
					this.match(HiveSql.T_SET);
					this.state = 2033;
					this.match(HiveSql.T_MESSAGE_TEXT);
					this.state = 2034;
					this.match(HiveSql.T_EQUAL);
					this.state = 2035;
					this.expr(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public return_stmt(): Return_stmtContext {
		let _localctx: Return_stmtContext = new Return_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, HiveSql.RULE_return_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2040;
			this.match(HiveSql.T_RETURN);
			this.state = 2042;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 232, this._ctx) ) {
			case 1:
				{
				this.state = 2041;
				this.expr(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollback_stmt(): Rollback_stmtContext {
		let _localctx: Rollback_stmtContext = new Rollback_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, HiveSql.RULE_rollback_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2044;
			this.match(HiveSql.T_ROLLBACK);
			this.state = 2046;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 233, this._ctx) ) {
			case 1:
				{
				this.state = 2045;
				this.match(HiveSql.T_WORK);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_session_option(): Set_session_optionContext {
		let _localctx: Set_session_optionContext = new Set_session_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, HiveSql.RULE_set_session_option);
		try {
			this.state = 2051;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_CURRENT:
			case HiveSql.T_CURRENT_SCHEMA:
			case HiveSql.T_SCHEMA:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2048;
				this.set_current_schema_option();
				}
				break;
			case HiveSql.T_ANSI_NULLS:
			case HiveSql.T_ANSI_PADDING:
			case HiveSql.T_NOCOUNT:
			case HiveSql.T_QUOTED_IDENTIFIER:
			case HiveSql.T_XACT_ABORT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2049;
				this.set_mssql_session_option();
				}
				break;
			case HiveSql.T_QUERY_BAND:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2050;
				this.set_teradata_session_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_current_schema_option(): Set_current_schema_optionContext {
		let _localctx: Set_current_schema_optionContext = new Set_current_schema_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, HiveSql.RULE_set_current_schema_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2058;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_CURRENT:
			case HiveSql.T_SCHEMA:
				{
				{
				this.state = 2054;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_CURRENT) {
					{
					this.state = 2053;
					this.match(HiveSql.T_CURRENT);
					}
				}

				this.state = 2056;
				this.match(HiveSql.T_SCHEMA);
				}
				}
				break;
			case HiveSql.T_CURRENT_SCHEMA:
				{
				this.state = 2057;
				this.match(HiveSql.T_CURRENT_SCHEMA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2061;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_EQUAL) {
				{
				this.state = 2060;
				this.match(HiveSql.T_EQUAL);
				}
			}

			this.state = 2063;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_mssql_session_option(): Set_mssql_session_optionContext {
		let _localctx: Set_mssql_session_optionContext = new Set_mssql_session_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, HiveSql.RULE_set_mssql_session_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2065;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_ANSI_NULLS || _la === HiveSql.T_ANSI_PADDING || _la === HiveSql.T_NOCOUNT || _la === HiveSql.T_QUOTED_IDENTIFIER || _la === HiveSql.T_XACT_ABORT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2066;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_OFF || _la === HiveSql.T_ON)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_teradata_session_option(): Set_teradata_session_optionContext {
		let _localctx: Set_teradata_session_optionContext = new Set_teradata_session_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, HiveSql.RULE_set_teradata_session_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2068;
			this.match(HiveSql.T_QUERY_BAND);
			this.state = 2069;
			this.match(HiveSql.T_EQUAL);
			this.state = 2072;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 238, this._ctx) ) {
			case 1:
				{
				this.state = 2070;
				this.expr(0);
				}
				break;

			case 2:
				{
				this.state = 2071;
				this.match(HiveSql.T_NONE);
				}
				break;
			}
			this.state = 2075;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_UPDATE) {
				{
				this.state = 2074;
				this.match(HiveSql.T_UPDATE);
				}
			}

			this.state = 2077;
			this.match(HiveSql.T_FOR);
			this.state = 2078;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_SESSION || _la === HiveSql.T_TRANSACTION)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signal_stmt(): Signal_stmtContext {
		let _localctx: Signal_stmtContext = new Signal_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, HiveSql.RULE_signal_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2080;
			this.match(HiveSql.T_SIGNAL);
			this.state = 2081;
			this.ident();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public summary_stmt(): Summary_stmtContext {
		let _localctx: Summary_stmtContext = new Summary_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, HiveSql.RULE_summary_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2083;
			this.match(HiveSql.T_SUMMARY);
			this.state = 2086;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_TOP) {
				{
				this.state = 2084;
				this.match(HiveSql.T_TOP);
				this.state = 2085;
				this.expr(0);
				}
			}

			this.state = 2088;
			this.match(HiveSql.T_FOR);
			this.state = 2098;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 243, this._ctx) ) {
			case 1:
				{
				this.state = 2089;
				this.select_stmt();
				}
				break;

			case 2:
				{
				this.state = 2090;
				this.table_name();
				this.state = 2092;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 241, this._ctx) ) {
				case 1:
					{
					this.state = 2091;
					this.where_clause();
					}
					break;
				}
				this.state = 2096;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 242, this._ctx) ) {
				case 1:
					{
					this.state = 2094;
					this.match(HiveSql.T_LIMIT);
					this.state = 2095;
					this.expr(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truncate_stmt(): Truncate_stmtContext {
		let _localctx: Truncate_stmtContext = new Truncate_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, HiveSql.RULE_truncate_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2100;
			this.match(HiveSql.T_TRUNCATE);
			this.state = 2102;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 244, this._ctx) ) {
			case 1:
				{
				this.state = 2101;
				this.match(HiveSql.T_TABLE);
				}
				break;
			}
			this.state = 2104;
			this.table_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public use_stmt(): Use_stmtContext {
		let _localctx: Use_stmtContext = new Use_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, HiveSql.RULE_use_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2106;
			this.match(HiveSql.T_USE);
			this.state = 2107;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public values_into_stmt(): Values_into_stmtContext {
		let _localctx: Values_into_stmtContext = new Values_into_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, HiveSql.RULE_values_into_stmt);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2109;
			this.match(HiveSql.T_VALUES);
			this.state = 2111;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 245, this._ctx) ) {
			case 1:
				{
				this.state = 2110;
				this.match(HiveSql.T_OPEN_P);
				}
				break;
			}
			this.state = 2113;
			this.expr(0);
			this.state = 2118;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 2114;
				this.match(HiveSql.T_COMMA);
				this.state = 2115;
				this.expr(0);
				}
				}
				this.state = 2120;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2122;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_CLOSE_P) {
				{
				this.state = 2121;
				this.match(HiveSql.T_CLOSE_P);
				}
			}

			this.state = 2124;
			this.match(HiveSql.T_INTO);
			this.state = 2126;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_OPEN_P) {
				{
				this.state = 2125;
				this.match(HiveSql.T_OPEN_P);
				}
			}

			this.state = 2128;
			this.ident();
			this.state = 2133;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2129;
					this.match(HiveSql.T_COMMA);
					this.state = 2130;
					this.ident();
					}
					}
				}
				this.state = 2135;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);
			}
			this.state = 2137;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 250, this._ctx) ) {
			case 1:
				{
				this.state = 2136;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public while_stmt(): While_stmtContext {
		let _localctx: While_stmtContext = new While_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, HiveSql.RULE_while_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2139;
			this.match(HiveSql.T_WHILE);
			this.state = 2140;
			this.bool_expr(0);
			this.state = 2141;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_BEGIN || _la === HiveSql.T_DO || _la === HiveSql.T_LOOP || _la === HiveSql.T_THEN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2142;
			this.block();
			this.state = 2143;
			this.match(HiveSql.T_END);
			this.state = 2145;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 251, this._ctx) ) {
			case 1:
				{
				this.state = 2144;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_LOOP || _la === HiveSql.T_WHILE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_cursor_stmt(): For_cursor_stmtContext {
		let _localctx: For_cursor_stmtContext = new For_cursor_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, HiveSql.RULE_for_cursor_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2147;
			this.match(HiveSql.T_FOR);
			this.state = 2148;
			this.match(HiveSql.L_ID);
			this.state = 2149;
			this.match(HiveSql.T_IN);
			this.state = 2151;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 252, this._ctx) ) {
			case 1:
				{
				this.state = 2150;
				this.match(HiveSql.T_OPEN_P);
				}
				break;
			}
			this.state = 2153;
			this.select_stmt();
			this.state = 2155;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_CLOSE_P) {
				{
				this.state = 2154;
				this.match(HiveSql.T_CLOSE_P);
				}
			}

			this.state = 2157;
			this.match(HiveSql.T_LOOP);
			this.state = 2158;
			this.block();
			this.state = 2159;
			this.match(HiveSql.T_END);
			this.state = 2160;
			this.match(HiveSql.T_LOOP);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_range_stmt(): For_range_stmtContext {
		let _localctx: For_range_stmtContext = new For_range_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, HiveSql.RULE_for_range_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2162;
			this.match(HiveSql.T_FOR);
			this.state = 2163;
			this.match(HiveSql.L_ID);
			this.state = 2164;
			this.match(HiveSql.T_IN);
			this.state = 2166;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 254, this._ctx) ) {
			case 1:
				{
				this.state = 2165;
				this.match(HiveSql.T_REVERSE);
				}
				break;
			}
			this.state = 2168;
			this.expr(0);
			this.state = 2169;
			this.match(HiveSql.T_DOT2);
			this.state = 2170;
			this.expr(0);
			this.state = 2173;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_BY || _la === HiveSql.T_STEP) {
				{
				this.state = 2171;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_BY || _la === HiveSql.T_STEP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2172;
				this.expr(0);
				}
			}

			this.state = 2175;
			this.match(HiveSql.T_LOOP);
			this.state = 2176;
			this.block();
			this.state = 2177;
			this.match(HiveSql.T_END);
			this.state = 2178;
			this.match(HiveSql.T_LOOP);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public label(): LabelContext {
		let _localctx: LabelContext = new LabelContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, HiveSql.RULE_label);
		try {
			this.state = 2186;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.L_LABEL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2180;
				this.match(HiveSql.L_LABEL);
				}
				break;
			case HiveSql.T_LESS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2181;
				this.match(HiveSql.T_LESS);
				this.state = 2182;
				this.match(HiveSql.T_LESS);
				this.state = 2183;
				this.match(HiveSql.L_ID);
				this.state = 2184;
				this.match(HiveSql.T_GREATER);
				this.state = 2185;
				this.match(HiveSql.T_GREATER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using_clause(): Using_clauseContext {
		let _localctx: Using_clauseContext = new Using_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, HiveSql.RULE_using_clause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2188;
			this.match(HiveSql.T_USING);
			this.state = 2189;
			this.expr(0);
			this.state = 2194;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2190;
					this.match(HiveSql.T_COMMA);
					this.state = 2191;
					this.expr(0);
					}
					}
				}
				this.state = 2196;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 257, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_stmt(): Select_stmtContext {
		let _localctx: Select_stmtContext = new Select_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, HiveSql.RULE_select_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2198;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_WITH) {
				{
				this.state = 2197;
				this.cte_select_stmt();
				}
			}

			this.state = 2200;
			this.fullselect_stmt();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cte_select_stmt(): Cte_select_stmtContext {
		let _localctx: Cte_select_stmtContext = new Cte_select_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, HiveSql.RULE_cte_select_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2202;
			this.match(HiveSql.T_WITH);
			this.state = 2203;
			this.cte_select_stmt_item();
			this.state = 2208;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 2204;
				this.match(HiveSql.T_COMMA);
				this.state = 2205;
				this.cte_select_stmt_item();
				}
				}
				this.state = 2210;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cte_select_stmt_item(): Cte_select_stmt_itemContext {
		let _localctx: Cte_select_stmt_itemContext = new Cte_select_stmt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, HiveSql.RULE_cte_select_stmt_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2211;
			this.ident();
			this.state = 2213;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_OPEN_P) {
				{
				this.state = 2212;
				this.cte_select_cols();
				}
			}

			this.state = 2215;
			this.match(HiveSql.T_AS);
			this.state = 2216;
			this.match(HiveSql.T_OPEN_P);
			this.state = 2217;
			this.fullselect_stmt();
			this.state = 2218;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cte_select_cols(): Cte_select_colsContext {
		let _localctx: Cte_select_colsContext = new Cte_select_colsContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, HiveSql.RULE_cte_select_cols);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2220;
			this.match(HiveSql.T_OPEN_P);
			this.state = 2221;
			this.ident();
			this.state = 2226;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 2222;
				this.match(HiveSql.T_COMMA);
				this.state = 2223;
				this.ident();
				}
				}
				this.state = 2228;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2229;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fullselect_stmt(): Fullselect_stmtContext {
		let _localctx: Fullselect_stmtContext = new Fullselect_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, HiveSql.RULE_fullselect_stmt);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2231;
			this.fullselect_stmt_item();
			this.state = 2237;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 262, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2232;
					this.fullselect_set_clause();
					this.state = 2233;
					this.fullselect_stmt_item();
					}
					}
				}
				this.state = 2239;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 262, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fullselect_stmt_item(): Fullselect_stmt_itemContext {
		let _localctx: Fullselect_stmt_itemContext = new Fullselect_stmt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, HiveSql.RULE_fullselect_stmt_item);
		try {
			this.state = 2245;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_SEL:
			case HiveSql.T_SELECT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2240;
				this.subselect_stmt();
				}
				break;
			case HiveSql.T_OPEN_P:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2241;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2242;
				this.fullselect_stmt();
				this.state = 2243;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fullselect_set_clause(): Fullselect_set_clauseContext {
		let _localctx: Fullselect_set_clauseContext = new Fullselect_set_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, HiveSql.RULE_fullselect_set_clause);
		let _la: number;
		try {
			this.state = 2259;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_UNION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2247;
				this.match(HiveSql.T_UNION);
				this.state = 2249;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_ALL) {
					{
					this.state = 2248;
					this.match(HiveSql.T_ALL);
					}
				}

				}
				break;
			case HiveSql.T_EXCEPT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2251;
				this.match(HiveSql.T_EXCEPT);
				this.state = 2253;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_ALL) {
					{
					this.state = 2252;
					this.match(HiveSql.T_ALL);
					}
				}

				}
				break;
			case HiveSql.T_INTERSECT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2255;
				this.match(HiveSql.T_INTERSECT);
				this.state = 2257;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_ALL) {
					{
					this.state = 2256;
					this.match(HiveSql.T_ALL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subselect_stmt(): Subselect_stmtContext {
		let _localctx: Subselect_stmtContext = new Subselect_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, HiveSql.RULE_subselect_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2261;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_SEL || _la === HiveSql.T_SELECT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2262;
			this.select_list();
			this.state = 2264;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 268, this._ctx) ) {
			case 1:
				{
				this.state = 2263;
				this.into_clause();
				}
				break;
			}
			this.state = 2267;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 269, this._ctx) ) {
			case 1:
				{
				this.state = 2266;
				this.from_clause();
				}
				break;
			}
			this.state = 2270;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 270, this._ctx) ) {
			case 1:
				{
				this.state = 2269;
				this.where_clause();
				}
				break;
			}
			this.state = 2273;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 271, this._ctx) ) {
			case 1:
				{
				this.state = 2272;
				this.group_by_clause();
				}
				break;
			}
			this.state = 2277;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 272, this._ctx) ) {
			case 1:
				{
				this.state = 2275;
				this.having_clause();
				}
				break;

			case 2:
				{
				this.state = 2276;
				this.qualify_clause();
				}
				break;
			}
			this.state = 2280;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 273, this._ctx) ) {
			case 1:
				{
				this.state = 2279;
				this.order_by_clause();
				}
				break;
			}
			this.state = 2283;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 274, this._ctx) ) {
			case 1:
				{
				this.state = 2282;
				this.select_options();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_list(): Select_listContext {
		let _localctx: Select_listContext = new Select_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, HiveSql.RULE_select_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2286;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 275, this._ctx) ) {
			case 1:
				{
				this.state = 2285;
				this.select_list_set();
				}
				break;
			}
			this.state = 2289;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 276, this._ctx) ) {
			case 1:
				{
				this.state = 2288;
				this.select_list_limit();
				}
				break;
			}
			this.state = 2291;
			this.select_list_item();
			this.state = 2296;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2292;
					this.match(HiveSql.T_COMMA);
					this.state = 2293;
					this.select_list_item();
					}
					}
				}
				this.state = 2298;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 277, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_list_set(): Select_list_setContext {
		let _localctx: Select_list_setContext = new Select_list_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, HiveSql.RULE_select_list_set);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2299;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_ALL || _la === HiveSql.T_DISTINCT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_list_limit(): Select_list_limitContext {
		let _localctx: Select_list_limitContext = new Select_list_limitContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, HiveSql.RULE_select_list_limit);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2301;
			this.match(HiveSql.T_TOP);
			this.state = 2302;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_list_item(): Select_list_itemContext {
		let _localctx: Select_list_itemContext = new Select_list_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, HiveSql.RULE_select_list_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2314;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 280, this._ctx) ) {
			case 1:
				{
				this.state = 2307;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 278, this._ctx) ) {
				case 1:
					{
					this.state = 2304;
					this.ident();
					this.state = 2305;
					this.match(HiveSql.T_EQUAL);
					}
					break;
				}
				this.state = 2309;
				this.expr(0);
				this.state = 2311;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 279, this._ctx) ) {
				case 1:
					{
					this.state = 2310;
					this.select_list_alias();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 2313;
				this.select_list_asterisk();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_list_alias(): Select_list_aliasContext {
		let _localctx: Select_list_aliasContext = new Select_list_aliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, HiveSql.RULE_select_list_alias);
		try {
			this.state = 2325;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 282, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2316;
				if (!(this._input.LT(1).text.toUpperCase() !== "INTO" && this._input.LT(1).text.toUpperCase() !== "FROM")) {
					throw this.createFailedPredicateException("this._input.LT(1).text.toUpperCase() !== \"INTO\" && this._input.LT(1).text.toUpperCase() !== \"FROM\"");
				}
				this.state = 2318;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 281, this._ctx) ) {
				case 1:
					{
					this.state = 2317;
					this.match(HiveSql.T_AS);
					}
					break;
				}
				this.state = 2320;
				this.ident();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2321;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2322;
				this.match(HiveSql.T_TITLE);
				this.state = 2323;
				this.match(HiveSql.L_S_STRING);
				this.state = 2324;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_list_asterisk(): Select_list_asteriskContext {
		let _localctx: Select_list_asteriskContext = new Select_list_asteriskContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, HiveSql.RULE_select_list_asterisk);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2329;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.L_ID) {
				{
				this.state = 2327;
				this.match(HiveSql.L_ID);
				this.state = 2328;
				this.match(HiveSql.T_DOT);
				}
			}

			this.state = 2331;
			this.match(HiveSql.T_MUL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public into_clause(): Into_clauseContext {
		let _localctx: Into_clauseContext = new Into_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, HiveSql.RULE_into_clause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2333;
			this.match(HiveSql.T_INTO);
			this.state = 2334;
			this.ident();
			this.state = 2339;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 284, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2335;
					this.match(HiveSql.T_COMMA);
					this.state = 2336;
					this.ident();
					}
					}
				}
				this.state = 2341;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 284, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_clause(): From_clauseContext {
		let _localctx: From_clauseContext = new From_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, HiveSql.RULE_from_clause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2342;
			this.match(HiveSql.T_FROM);
			this.state = 2343;
			this.from_table_clause();
			this.state = 2347;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2344;
					this.from_join_clause();
					}
					}
				}
				this.state = 2349;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 285, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_table_clause(): From_table_clauseContext {
		let _localctx: From_table_clauseContext = new From_table_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, HiveSql.RULE_from_table_clause);
		try {
			this.state = 2353;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 286, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2350;
				this.from_table_name_clause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2351;
				this.from_subselect_clause();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2352;
				this.from_table_values_clause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_table_name_clause(): From_table_name_clauseContext {
		let _localctx: From_table_name_clauseContext = new From_table_name_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, HiveSql.RULE_from_table_name_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2355;
			this.table_name();
			this.state = 2357;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 287, this._ctx) ) {
			case 1:
				{
				this.state = 2356;
				this.from_alias_clause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_subselect_clause(): From_subselect_clauseContext {
		let _localctx: From_subselect_clauseContext = new From_subselect_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, HiveSql.RULE_from_subselect_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2359;
			this.match(HiveSql.T_OPEN_P);
			this.state = 2360;
			this.select_stmt();
			this.state = 2361;
			this.match(HiveSql.T_CLOSE_P);
			this.state = 2363;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 288, this._ctx) ) {
			case 1:
				{
				this.state = 2362;
				this.from_alias_clause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_join_clause(): From_join_clauseContext {
		let _localctx: From_join_clauseContext = new From_join_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, HiveSql.RULE_from_join_clause);
		try {
			this.state = 2372;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_COMMA:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2365;
				this.match(HiveSql.T_COMMA);
				this.state = 2366;
				this.from_table_clause();
				}
				break;
			case HiveSql.T_FULL:
			case HiveSql.T_INNER:
			case HiveSql.T_JOIN:
			case HiveSql.T_LEFT:
			case HiveSql.T_RIGHT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2367;
				this.from_join_type_clause();
				this.state = 2368;
				this.from_table_clause();
				this.state = 2369;
				this.match(HiveSql.T_ON);
				this.state = 2370;
				this.bool_expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_join_type_clause(): From_join_type_clauseContext {
		let _localctx: From_join_type_clauseContext = new From_join_type_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, HiveSql.RULE_from_join_type_clause);
		let _la: number;
		try {
			this.state = 2383;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_INNER:
			case HiveSql.T_JOIN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2375;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_INNER) {
					{
					this.state = 2374;
					this.match(HiveSql.T_INNER);
					}
				}

				this.state = 2377;
				this.match(HiveSql.T_JOIN);
				}
				break;
			case HiveSql.T_FULL:
			case HiveSql.T_LEFT:
			case HiveSql.T_RIGHT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2378;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_FULL || _la === HiveSql.T_LEFT || _la === HiveSql.T_RIGHT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2380;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_OUTER) {
					{
					this.state = 2379;
					this.match(HiveSql.T_OUTER);
					}
				}

				this.state = 2382;
				this.match(HiveSql.T_JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_table_values_clause(): From_table_values_clauseContext {
		let _localctx: From_table_values_clauseContext = new From_table_values_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, HiveSql.RULE_from_table_values_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2385;
			this.match(HiveSql.T_TABLE);
			this.state = 2386;
			this.match(HiveSql.T_OPEN_P);
			this.state = 2387;
			this.match(HiveSql.T_VALUES);
			this.state = 2388;
			this.from_table_values_row();
			this.state = 2393;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 2389;
				this.match(HiveSql.T_COMMA);
				this.state = 2390;
				this.from_table_values_row();
				}
				}
				this.state = 2395;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2396;
			this.match(HiveSql.T_CLOSE_P);
			this.state = 2398;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 294, this._ctx) ) {
			case 1:
				{
				this.state = 2397;
				this.from_alias_clause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_table_values_row(): From_table_values_rowContext {
		let _localctx: From_table_values_rowContext = new From_table_values_rowContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, HiveSql.RULE_from_table_values_row);
		let _la: number;
		try {
			this.state = 2412;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 296, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2400;
				this.expr(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2401;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2402;
				this.expr(0);
				this.state = 2407;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 2403;
					this.match(HiveSql.T_COMMA);
					this.state = 2404;
					this.expr(0);
					}
					}
					this.state = 2409;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2410;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_alias_clause(): From_alias_clauseContext {
		let _localctx: From_alias_clauseContext = new From_alias_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, HiveSql.RULE_from_alias_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2414;
			if (!(this._input.LT(1).text.toUpperCase() !== "EXEC" &&
			        this._input.LT(1).text.toUpperCase() !== "EXECUTE" &&
			        this._input.LT(1).text.toUpperCase() !== "INNER" &&
			        this._input.LT(1).text.toUpperCase() !== "LEFT" &&
			        this._input.LT(1).text.toUpperCase() !== "GROUP" &&
			        this._input.LT(1).text.toUpperCase() !== "ORDER" &&
			        this._input.LT(1).text.toUpperCase() !== "LIMIT" &&
			        this._input.LT(1).text.toUpperCase() !== "WITH" &&
			        this._input.LT(1).text.toUpperCase() !== "JOIN")) {
				throw this.createFailedPredicateException("this._input.LT(1).text.toUpperCase() !== \"EXEC\" &&\n        this._input.LT(1).text.toUpperCase() !== \"EXECUTE\" &&\n        this._input.LT(1).text.toUpperCase() !== \"INNER\" &&\n        this._input.LT(1).text.toUpperCase() !== \"LEFT\" &&\n        this._input.LT(1).text.toUpperCase() !== \"GROUP\" &&\n        this._input.LT(1).text.toUpperCase() !== \"ORDER\" &&\n        this._input.LT(1).text.toUpperCase() !== \"LIMIT\" &&\n        this._input.LT(1).text.toUpperCase() !== \"WITH\" &&\n        this._input.LT(1).text.toUpperCase() !== \"JOIN\"");
			}
			this.state = 2416;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 297, this._ctx) ) {
			case 1:
				{
				this.state = 2415;
				this.match(HiveSql.T_AS);
				}
				break;
			}
			this.state = 2418;
			this.ident();
			this.state = 2429;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 299, this._ctx) ) {
			case 1:
				{
				this.state = 2419;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2420;
				this.match(HiveSql.L_ID);
				this.state = 2425;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 2421;
					this.match(HiveSql.T_COMMA);
					this.state = 2422;
					this.match(HiveSql.L_ID);
					}
					}
					this.state = 2427;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2428;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_name(): Table_nameContext {
		let _localctx: Table_nameContext = new Table_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, HiveSql.RULE_table_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2431;
			this.ident();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public where_clause(): Where_clauseContext {
		let _localctx: Where_clauseContext = new Where_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, HiveSql.RULE_where_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2433;
			this.match(HiveSql.T_WHERE);
			this.state = 2434;
			this.bool_expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_by_clause(): Group_by_clauseContext {
		let _localctx: Group_by_clauseContext = new Group_by_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, HiveSql.RULE_group_by_clause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2436;
			this.match(HiveSql.T_GROUP);
			this.state = 2437;
			this.match(HiveSql.T_BY);
			this.state = 2438;
			this.expr(0);
			this.state = 2443;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2439;
					this.match(HiveSql.T_COMMA);
					this.state = 2440;
					this.expr(0);
					}
					}
				}
				this.state = 2445;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 300, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public having_clause(): Having_clauseContext {
		let _localctx: Having_clauseContext = new Having_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, HiveSql.RULE_having_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2446;
			this.match(HiveSql.T_HAVING);
			this.state = 2447;
			this.bool_expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualify_clause(): Qualify_clauseContext {
		let _localctx: Qualify_clauseContext = new Qualify_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, HiveSql.RULE_qualify_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2449;
			this.match(HiveSql.T_QUALIFY);
			this.state = 2450;
			this.bool_expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public order_by_clause(): Order_by_clauseContext {
		let _localctx: Order_by_clauseContext = new Order_by_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, HiveSql.RULE_order_by_clause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2452;
			this.match(HiveSql.T_ORDER);
			this.state = 2453;
			this.match(HiveSql.T_BY);
			this.state = 2454;
			this.expr(0);
			this.state = 2456;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 301, this._ctx) ) {
			case 1:
				{
				this.state = 2455;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_ASC || _la === HiveSql.T_DESC)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 2465;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2458;
					this.match(HiveSql.T_COMMA);
					this.state = 2459;
					this.expr(0);
					this.state = 2461;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 302, this._ctx) ) {
					case 1:
						{
						this.state = 2460;
						_la = this._input.LA(1);
						if (!(_la === HiveSql.T_ASC || _la === HiveSql.T_DESC)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					}
					}
					}
				}
				this.state = 2467;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 303, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_options(): Select_optionsContext {
		let _localctx: Select_optionsContext = new Select_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, HiveSql.RULE_select_options);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2469;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2468;
					this.select_options_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2471;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 304, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_options_item(): Select_options_itemContext {
		let _localctx: Select_options_itemContext = new Select_options_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, HiveSql.RULE_select_options_item);
		let _la: number;
		try {
			this.state = 2484;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_LIMIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2473;
				this.match(HiveSql.T_LIMIT);
				this.state = 2474;
				this.expr(0);
				}
				break;
			case HiveSql.T_WITH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2475;
				this.match(HiveSql.T_WITH);
				this.state = 2476;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_CS || _la === HiveSql.T_RR || _la === HiveSql.T_RS || _la === HiveSql.T_UR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2482;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 305, this._ctx) ) {
				case 1:
					{
					this.state = 2477;
					this.match(HiveSql.T_USE);
					this.state = 2478;
					this.match(HiveSql.T_AND);
					this.state = 2479;
					this.match(HiveSql.T_KEEP);
					this.state = 2480;
					_la = this._input.LA(1);
					if (!(_la === HiveSql.T_EXCLUSIVE || _la === HiveSql.T_SHARE || _la === HiveSql.T_UPDATE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2481;
					this.match(HiveSql.T_LOCKS);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public update_stmt(): Update_stmtContext {
		let _localctx: Update_stmtContext = new Update_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, HiveSql.RULE_update_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2486;
			this.match(HiveSql.T_UPDATE);
			this.state = 2487;
			this.update_table();
			this.state = 2488;
			this.match(HiveSql.T_SET);
			this.state = 2489;
			this.update_assignment();
			this.state = 2491;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 307, this._ctx) ) {
			case 1:
				{
				this.state = 2490;
				this.where_clause();
				}
				break;
			}
			this.state = 2494;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 308, this._ctx) ) {
			case 1:
				{
				this.state = 2493;
				this.update_upsert();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public update_assignment(): Update_assignmentContext {
		let _localctx: Update_assignmentContext = new Update_assignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, HiveSql.RULE_update_assignment);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2496;
			this.assignment_stmt_item();
			this.state = 2501;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2497;
					this.match(HiveSql.T_COMMA);
					this.state = 2498;
					this.assignment_stmt_item();
					}
					}
				}
				this.state = 2503;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public update_table(): Update_tableContext {
		let _localctx: Update_tableContext = new Update_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, HiveSql.RULE_update_table);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2512;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_ACTION:
			case HiveSql.T_ADD2:
			case HiveSql.T_ALL:
			case HiveSql.T_ALLOCATE:
			case HiveSql.T_ALTER:
			case HiveSql.T_AND:
			case HiveSql.T_ANSI_NULLS:
			case HiveSql.T_ANSI_PADDING:
			case HiveSql.T_AS:
			case HiveSql.T_ASC:
			case HiveSql.T_ASSOCIATE:
			case HiveSql.T_AT:
			case HiveSql.T_AUTO_INCREMENT:
			case HiveSql.T_AVG:
			case HiveSql.T_BATCHSIZE:
			case HiveSql.T_BEGIN:
			case HiveSql.T_BETWEEN:
			case HiveSql.T_BIGINT:
			case HiveSql.T_BINARY_DOUBLE:
			case HiveSql.T_BINARY_FLOAT:
			case HiveSql.T_BIT:
			case HiveSql.T_BODY:
			case HiveSql.T_BREAK:
			case HiveSql.T_BY:
			case HiveSql.T_BYTE:
			case HiveSql.T_CALL:
			case HiveSql.T_CALLER:
			case HiveSql.T_CASCADE:
			case HiveSql.T_CASE:
			case HiveSql.T_CASESPECIFIC:
			case HiveSql.T_CAST:
			case HiveSql.T_CHAR:
			case HiveSql.T_CHARACTER:
			case HiveSql.T_CHARSET:
			case HiveSql.T_CLIENT:
			case HiveSql.T_CLOSE:
			case HiveSql.T_CLUSTERED:
			case HiveSql.T_CMP:
			case HiveSql.T_COLLECT:
			case HiveSql.T_COLLECTION:
			case HiveSql.T_COLUMN:
			case HiveSql.T_COMMENT:
			case HiveSql.T_CONSTANT:
			case HiveSql.T_COMMIT:
			case HiveSql.T_COMPRESS:
			case HiveSql.T_CONCAT:
			case HiveSql.T_CONDITION:
			case HiveSql.T_CONSTRAINT:
			case HiveSql.T_CONTINUE:
			case HiveSql.T_COPY:
			case HiveSql.T_COUNT:
			case HiveSql.T_COUNT_BIG:
			case HiveSql.T_CREATE:
			case HiveSql.T_CREATION:
			case HiveSql.T_CREATOR:
			case HiveSql.T_CS:
			case HiveSql.T_CURRENT:
			case HiveSql.T_CURRENT_SCHEMA:
			case HiveSql.T_CURSOR:
			case HiveSql.T_DATABASE:
			case HiveSql.T_DATA:
			case HiveSql.T_DATE:
			case HiveSql.T_DATETIME:
			case HiveSql.T_DAY:
			case HiveSql.T_DAYS:
			case HiveSql.T_DEC:
			case HiveSql.T_DECIMAL:
			case HiveSql.T_DECLARE:
			case HiveSql.T_DEFAULT:
			case HiveSql.T_DEFERRED:
			case HiveSql.T_DEFINED:
			case HiveSql.T_DEFINER:
			case HiveSql.T_DEFINITION:
			case HiveSql.T_DELETE:
			case HiveSql.T_DELIMITED:
			case HiveSql.T_DELIMITER:
			case HiveSql.T_DESC:
			case HiveSql.T_DESCRIBE:
			case HiveSql.T_DIAGNOSTICS:
			case HiveSql.T_DIR:
			case HiveSql.T_DIRECTORY:
			case HiveSql.T_DISTINCT:
			case HiveSql.T_DISTRIBUTE:
			case HiveSql.T_DO:
			case HiveSql.T_DOUBLE:
			case HiveSql.T_DROP:
			case HiveSql.T_DYNAMIC:
			case HiveSql.T_ENABLE:
			case HiveSql.T_ENGINE:
			case HiveSql.T_ESCAPED:
			case HiveSql.T_EXCEPT:
			case HiveSql.T_EXEC:
			case HiveSql.T_EXECUTE:
			case HiveSql.T_EXCEPTION:
			case HiveSql.T_EXCLUSIVE:
			case HiveSql.T_EXISTS:
			case HiveSql.T_EXIT:
			case HiveSql.T_FALLBACK:
			case HiveSql.T_FALSE:
			case HiveSql.T_FETCH:
			case HiveSql.T_FIELDS:
			case HiveSql.T_FILE:
			case HiveSql.T_FILES:
			case HiveSql.T_FLOAT:
			case HiveSql.T_FOR:
			case HiveSql.T_FOREIGN:
			case HiveSql.T_FORMAT:
			case HiveSql.T_FOUND:
			case HiveSql.T_FROM:
			case HiveSql.T_FULL:
			case HiveSql.T_FUNCTION:
			case HiveSql.T_GET:
			case HiveSql.T_GLOBAL:
			case HiveSql.T_GO:
			case HiveSql.T_GRANT:
			case HiveSql.T_GROUP:
			case HiveSql.T_HANDLER:
			case HiveSql.T_HASH:
			case HiveSql.T_HAVING:
			case HiveSql.T_HDFS:
			case HiveSql.T_HIVE:
			case HiveSql.T_HOST:
			case HiveSql.T_IDENTITY:
			case HiveSql.T_IF:
			case HiveSql.T_IGNORE:
			case HiveSql.T_IMMEDIATE:
			case HiveSql.T_IN:
			case HiveSql.T_INCLUDE:
			case HiveSql.T_INDEX:
			case HiveSql.T_INITRANS:
			case HiveSql.T_INNER:
			case HiveSql.T_INOUT:
			case HiveSql.T_INSERT:
			case HiveSql.T_INT:
			case HiveSql.T_INT2:
			case HiveSql.T_INT4:
			case HiveSql.T_INT8:
			case HiveSql.T_INTEGER:
			case HiveSql.T_INTERSECT:
			case HiveSql.T_INTERVAL:
			case HiveSql.T_INTO:
			case HiveSql.T_INVOKER:
			case HiveSql.T_IS:
			case HiveSql.T_ISOPEN:
			case HiveSql.T_ITEMS:
			case HiveSql.T_JOIN:
			case HiveSql.T_KEEP:
			case HiveSql.T_KEY:
			case HiveSql.T_KEYS:
			case HiveSql.T_LANGUAGE:
			case HiveSql.T_LEAVE:
			case HiveSql.T_LEFT:
			case HiveSql.T_LIKE:
			case HiveSql.T_LIMIT:
			case HiveSql.T_LINES:
			case HiveSql.T_LOCAL:
			case HiveSql.T_LOCATION:
			case HiveSql.T_LOCATOR:
			case HiveSql.T_LOCATORS:
			case HiveSql.T_LOCKS:
			case HiveSql.T_LOG:
			case HiveSql.T_LOGGED:
			case HiveSql.T_LOGGING:
			case HiveSql.T_LOOP:
			case HiveSql.T_MAP:
			case HiveSql.T_MATCHED:
			case HiveSql.T_MAX:
			case HiveSql.T_MAXTRANS:
			case HiveSql.T_MERGE:
			case HiveSql.T_MESSAGE_TEXT:
			case HiveSql.T_MICROSECOND:
			case HiveSql.T_MICROSECONDS:
			case HiveSql.T_MIN:
			case HiveSql.T_MULTISET:
			case HiveSql.T_NCHAR:
			case HiveSql.T_NEW:
			case HiveSql.T_NVARCHAR:
			case HiveSql.T_NO:
			case HiveSql.T_NOCOUNT:
			case HiveSql.T_NOCOMPRESS:
			case HiveSql.T_NOLOGGING:
			case HiveSql.T_NONE:
			case HiveSql.T_NOT:
			case HiveSql.T_NOTFOUND:
			case HiveSql.T_NUMERIC:
			case HiveSql.T_NUMBER:
			case HiveSql.T_OBJECT:
			case HiveSql.T_OFF:
			case HiveSql.T_ON:
			case HiveSql.T_ONLY:
			case HiveSql.T_OPEN:
			case HiveSql.T_OR:
			case HiveSql.T_ORDER:
			case HiveSql.T_OUT:
			case HiveSql.T_OUTER:
			case HiveSql.T_OVER:
			case HiveSql.T_OVERWRITE:
			case HiveSql.T_OWNER:
			case HiveSql.T_PACKAGE:
			case HiveSql.T_PARTITION:
			case HiveSql.T_PCTFREE:
			case HiveSql.T_PCTUSED:
			case HiveSql.T_PRECISION:
			case HiveSql.T_PRESERVE:
			case HiveSql.T_PRIMARY:
			case HiveSql.T_PRINT:
			case HiveSql.T_PROC:
			case HiveSql.T_PROCEDURE:
			case HiveSql.T_QUALIFY:
			case HiveSql.T_QUERY_BAND:
			case HiveSql.T_QUIT:
			case HiveSql.T_QUOTED_IDENTIFIER:
			case HiveSql.T_RAISE:
			case HiveSql.T_REAL:
			case HiveSql.T_REFERENCES:
			case HiveSql.T_REGEXP:
			case HiveSql.T_REPLACE:
			case HiveSql.T_RESIGNAL:
			case HiveSql.T_RESTRICT:
			case HiveSql.T_RESULT:
			case HiveSql.T_RESULT_SET_LOCATOR:
			case HiveSql.T_RETURN:
			case HiveSql.T_RETURNS:
			case HiveSql.T_REVERSE:
			case HiveSql.T_RIGHT:
			case HiveSql.T_RLIKE:
			case HiveSql.T_ROLE:
			case HiveSql.T_ROLLBACK:
			case HiveSql.T_ROW:
			case HiveSql.T_ROWS:
			case HiveSql.T_ROW_COUNT:
			case HiveSql.T_RR:
			case HiveSql.T_RS:
			case HiveSql.T_PWD:
			case HiveSql.T_TRIM:
			case HiveSql.T_SCHEMA:
			case HiveSql.T_SECOND:
			case HiveSql.T_SECONDS:
			case HiveSql.T_SECURITY:
			case HiveSql.T_SEGMENT:
			case HiveSql.T_SEL:
			case HiveSql.T_SELECT:
			case HiveSql.T_SET:
			case HiveSql.T_SESSION:
			case HiveSql.T_SESSIONS:
			case HiveSql.T_SETS:
			case HiveSql.T_SHARE:
			case HiveSql.T_SIGNAL:
			case HiveSql.T_SIMPLE_DOUBLE:
			case HiveSql.T_SIMPLE_FLOAT:
			case HiveSql.T_SMALLDATETIME:
			case HiveSql.T_SMALLINT:
			case HiveSql.T_SQL:
			case HiveSql.T_SQLEXCEPTION:
			case HiveSql.T_SQLINSERT:
			case HiveSql.T_SQLSTATE:
			case HiveSql.T_SQLWARNING:
			case HiveSql.T_STATS:
			case HiveSql.T_STATISTICS:
			case HiveSql.T_STEP:
			case HiveSql.T_STORAGE:
			case HiveSql.T_STORED:
			case HiveSql.T_STRING:
			case HiveSql.T_SUBDIR:
			case HiveSql.T_SUBSTRING:
			case HiveSql.T_SUM:
			case HiveSql.T_SUMMARY:
			case HiveSql.T_SYS_REFCURSOR:
			case HiveSql.T_TABLE:
			case HiveSql.T_TABLESPACE:
			case HiveSql.T_TEMPORARY:
			case HiveSql.T_TERMINATED:
			case HiveSql.T_TEXTIMAGE_ON:
			case HiveSql.T_THEN:
			case HiveSql.T_TIMESTAMP:
			case HiveSql.T_TITLE:
			case HiveSql.T_TO:
			case HiveSql.T_TOP:
			case HiveSql.T_TRANSACTION:
			case HiveSql.T_TRUE:
			case HiveSql.T_TRUNCATE:
			case HiveSql.T_UNIQUE:
			case HiveSql.T_UPDATE:
			case HiveSql.T_UR:
			case HiveSql.T_USE:
			case HiveSql.T_USING:
			case HiveSql.T_VALUE:
			case HiveSql.T_VALUES:
			case HiveSql.T_VAR:
			case HiveSql.T_VARCHAR:
			case HiveSql.T_VARCHAR2:
			case HiveSql.T_VARYING:
			case HiveSql.T_VOLATILE:
			case HiveSql.T_WHILE:
			case HiveSql.T_WITH:
			case HiveSql.T_WITHOUT:
			case HiveSql.T_WORK:
			case HiveSql.T_XACT_ABORT:
			case HiveSql.T_XML:
			case HiveSql.T_YES:
			case HiveSql.T_ACTIVITY_COUNT:
			case HiveSql.T_CUME_DIST:
			case HiveSql.T_CURRENT_DATE:
			case HiveSql.T_CURRENT_TIMESTAMP:
			case HiveSql.T_CURRENT_USER:
			case HiveSql.T_DENSE_RANK:
			case HiveSql.T_FIRST_VALUE:
			case HiveSql.T_LAG:
			case HiveSql.T_LAST_VALUE:
			case HiveSql.T_LEAD:
			case HiveSql.T_PART_COUNT:
			case HiveSql.T_PART_LOC:
			case HiveSql.T_RANK:
			case HiveSql.T_ROW_NUMBER:
			case HiveSql.T_STDEV:
			case HiveSql.T_SYSDATE:
			case HiveSql.T_VARIANCE:
			case HiveSql.T_USER:
			case HiveSql.L_ID:
				{
				this.state = 2504;
				this.table_name();
				this.state = 2506;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 310, this._ctx) ) {
				case 1:
					{
					this.state = 2505;
					this.from_clause();
					}
					break;
				}
				}
				break;
			case HiveSql.T_OPEN_P:
				{
				this.state = 2508;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2509;
				this.select_stmt();
				this.state = 2510;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2518;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 313, this._ctx) ) {
			case 1:
				{
				this.state = 2515;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 312, this._ctx) ) {
				case 1:
					{
					this.state = 2514;
					this.match(HiveSql.T_AS);
					}
					break;
				}
				this.state = 2517;
				this.ident();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public update_upsert(): Update_upsertContext {
		let _localctx: Update_upsertContext = new Update_upsertContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, HiveSql.RULE_update_upsert);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2520;
			this.match(HiveSql.T_ELSE);
			this.state = 2521;
			this.insert_stmt();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public merge_stmt(): Merge_stmtContext {
		let _localctx: Merge_stmtContext = new Merge_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, HiveSql.RULE_merge_stmt);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2523;
			this.match(HiveSql.T_MERGE);
			this.state = 2524;
			this.match(HiveSql.T_INTO);
			this.state = 2525;
			this.merge_table();
			this.state = 2526;
			this.match(HiveSql.T_USING);
			this.state = 2527;
			this.merge_table();
			this.state = 2528;
			this.match(HiveSql.T_ON);
			this.state = 2529;
			this.bool_expr(0);
			this.state = 2531;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2530;
					this.merge_condition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2533;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 314, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public merge_table(): Merge_tableContext {
		let _localctx: Merge_tableContext = new Merge_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, HiveSql.RULE_merge_table);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2540;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_ACTION:
			case HiveSql.T_ADD2:
			case HiveSql.T_ALL:
			case HiveSql.T_ALLOCATE:
			case HiveSql.T_ALTER:
			case HiveSql.T_AND:
			case HiveSql.T_ANSI_NULLS:
			case HiveSql.T_ANSI_PADDING:
			case HiveSql.T_AS:
			case HiveSql.T_ASC:
			case HiveSql.T_ASSOCIATE:
			case HiveSql.T_AT:
			case HiveSql.T_AUTO_INCREMENT:
			case HiveSql.T_AVG:
			case HiveSql.T_BATCHSIZE:
			case HiveSql.T_BEGIN:
			case HiveSql.T_BETWEEN:
			case HiveSql.T_BIGINT:
			case HiveSql.T_BINARY_DOUBLE:
			case HiveSql.T_BINARY_FLOAT:
			case HiveSql.T_BIT:
			case HiveSql.T_BODY:
			case HiveSql.T_BREAK:
			case HiveSql.T_BY:
			case HiveSql.T_BYTE:
			case HiveSql.T_CALL:
			case HiveSql.T_CALLER:
			case HiveSql.T_CASCADE:
			case HiveSql.T_CASE:
			case HiveSql.T_CASESPECIFIC:
			case HiveSql.T_CAST:
			case HiveSql.T_CHAR:
			case HiveSql.T_CHARACTER:
			case HiveSql.T_CHARSET:
			case HiveSql.T_CLIENT:
			case HiveSql.T_CLOSE:
			case HiveSql.T_CLUSTERED:
			case HiveSql.T_CMP:
			case HiveSql.T_COLLECT:
			case HiveSql.T_COLLECTION:
			case HiveSql.T_COLUMN:
			case HiveSql.T_COMMENT:
			case HiveSql.T_CONSTANT:
			case HiveSql.T_COMMIT:
			case HiveSql.T_COMPRESS:
			case HiveSql.T_CONCAT:
			case HiveSql.T_CONDITION:
			case HiveSql.T_CONSTRAINT:
			case HiveSql.T_CONTINUE:
			case HiveSql.T_COPY:
			case HiveSql.T_COUNT:
			case HiveSql.T_COUNT_BIG:
			case HiveSql.T_CREATE:
			case HiveSql.T_CREATION:
			case HiveSql.T_CREATOR:
			case HiveSql.T_CS:
			case HiveSql.T_CURRENT:
			case HiveSql.T_CURRENT_SCHEMA:
			case HiveSql.T_CURSOR:
			case HiveSql.T_DATABASE:
			case HiveSql.T_DATA:
			case HiveSql.T_DATE:
			case HiveSql.T_DATETIME:
			case HiveSql.T_DAY:
			case HiveSql.T_DAYS:
			case HiveSql.T_DEC:
			case HiveSql.T_DECIMAL:
			case HiveSql.T_DECLARE:
			case HiveSql.T_DEFAULT:
			case HiveSql.T_DEFERRED:
			case HiveSql.T_DEFINED:
			case HiveSql.T_DEFINER:
			case HiveSql.T_DEFINITION:
			case HiveSql.T_DELETE:
			case HiveSql.T_DELIMITED:
			case HiveSql.T_DELIMITER:
			case HiveSql.T_DESC:
			case HiveSql.T_DESCRIBE:
			case HiveSql.T_DIAGNOSTICS:
			case HiveSql.T_DIR:
			case HiveSql.T_DIRECTORY:
			case HiveSql.T_DISTINCT:
			case HiveSql.T_DISTRIBUTE:
			case HiveSql.T_DO:
			case HiveSql.T_DOUBLE:
			case HiveSql.T_DROP:
			case HiveSql.T_DYNAMIC:
			case HiveSql.T_ENABLE:
			case HiveSql.T_ENGINE:
			case HiveSql.T_ESCAPED:
			case HiveSql.T_EXCEPT:
			case HiveSql.T_EXEC:
			case HiveSql.T_EXECUTE:
			case HiveSql.T_EXCEPTION:
			case HiveSql.T_EXCLUSIVE:
			case HiveSql.T_EXISTS:
			case HiveSql.T_EXIT:
			case HiveSql.T_FALLBACK:
			case HiveSql.T_FALSE:
			case HiveSql.T_FETCH:
			case HiveSql.T_FIELDS:
			case HiveSql.T_FILE:
			case HiveSql.T_FILES:
			case HiveSql.T_FLOAT:
			case HiveSql.T_FOR:
			case HiveSql.T_FOREIGN:
			case HiveSql.T_FORMAT:
			case HiveSql.T_FOUND:
			case HiveSql.T_FROM:
			case HiveSql.T_FULL:
			case HiveSql.T_FUNCTION:
			case HiveSql.T_GET:
			case HiveSql.T_GLOBAL:
			case HiveSql.T_GO:
			case HiveSql.T_GRANT:
			case HiveSql.T_GROUP:
			case HiveSql.T_HANDLER:
			case HiveSql.T_HASH:
			case HiveSql.T_HAVING:
			case HiveSql.T_HDFS:
			case HiveSql.T_HIVE:
			case HiveSql.T_HOST:
			case HiveSql.T_IDENTITY:
			case HiveSql.T_IF:
			case HiveSql.T_IGNORE:
			case HiveSql.T_IMMEDIATE:
			case HiveSql.T_IN:
			case HiveSql.T_INCLUDE:
			case HiveSql.T_INDEX:
			case HiveSql.T_INITRANS:
			case HiveSql.T_INNER:
			case HiveSql.T_INOUT:
			case HiveSql.T_INSERT:
			case HiveSql.T_INT:
			case HiveSql.T_INT2:
			case HiveSql.T_INT4:
			case HiveSql.T_INT8:
			case HiveSql.T_INTEGER:
			case HiveSql.T_INTERSECT:
			case HiveSql.T_INTERVAL:
			case HiveSql.T_INTO:
			case HiveSql.T_INVOKER:
			case HiveSql.T_IS:
			case HiveSql.T_ISOPEN:
			case HiveSql.T_ITEMS:
			case HiveSql.T_JOIN:
			case HiveSql.T_KEEP:
			case HiveSql.T_KEY:
			case HiveSql.T_KEYS:
			case HiveSql.T_LANGUAGE:
			case HiveSql.T_LEAVE:
			case HiveSql.T_LEFT:
			case HiveSql.T_LIKE:
			case HiveSql.T_LIMIT:
			case HiveSql.T_LINES:
			case HiveSql.T_LOCAL:
			case HiveSql.T_LOCATION:
			case HiveSql.T_LOCATOR:
			case HiveSql.T_LOCATORS:
			case HiveSql.T_LOCKS:
			case HiveSql.T_LOG:
			case HiveSql.T_LOGGED:
			case HiveSql.T_LOGGING:
			case HiveSql.T_LOOP:
			case HiveSql.T_MAP:
			case HiveSql.T_MATCHED:
			case HiveSql.T_MAX:
			case HiveSql.T_MAXTRANS:
			case HiveSql.T_MERGE:
			case HiveSql.T_MESSAGE_TEXT:
			case HiveSql.T_MICROSECOND:
			case HiveSql.T_MICROSECONDS:
			case HiveSql.T_MIN:
			case HiveSql.T_MULTISET:
			case HiveSql.T_NCHAR:
			case HiveSql.T_NEW:
			case HiveSql.T_NVARCHAR:
			case HiveSql.T_NO:
			case HiveSql.T_NOCOUNT:
			case HiveSql.T_NOCOMPRESS:
			case HiveSql.T_NOLOGGING:
			case HiveSql.T_NONE:
			case HiveSql.T_NOT:
			case HiveSql.T_NOTFOUND:
			case HiveSql.T_NUMERIC:
			case HiveSql.T_NUMBER:
			case HiveSql.T_OBJECT:
			case HiveSql.T_OFF:
			case HiveSql.T_ON:
			case HiveSql.T_ONLY:
			case HiveSql.T_OPEN:
			case HiveSql.T_OR:
			case HiveSql.T_ORDER:
			case HiveSql.T_OUT:
			case HiveSql.T_OUTER:
			case HiveSql.T_OVER:
			case HiveSql.T_OVERWRITE:
			case HiveSql.T_OWNER:
			case HiveSql.T_PACKAGE:
			case HiveSql.T_PARTITION:
			case HiveSql.T_PCTFREE:
			case HiveSql.T_PCTUSED:
			case HiveSql.T_PRECISION:
			case HiveSql.T_PRESERVE:
			case HiveSql.T_PRIMARY:
			case HiveSql.T_PRINT:
			case HiveSql.T_PROC:
			case HiveSql.T_PROCEDURE:
			case HiveSql.T_QUALIFY:
			case HiveSql.T_QUERY_BAND:
			case HiveSql.T_QUIT:
			case HiveSql.T_QUOTED_IDENTIFIER:
			case HiveSql.T_RAISE:
			case HiveSql.T_REAL:
			case HiveSql.T_REFERENCES:
			case HiveSql.T_REGEXP:
			case HiveSql.T_REPLACE:
			case HiveSql.T_RESIGNAL:
			case HiveSql.T_RESTRICT:
			case HiveSql.T_RESULT:
			case HiveSql.T_RESULT_SET_LOCATOR:
			case HiveSql.T_RETURN:
			case HiveSql.T_RETURNS:
			case HiveSql.T_REVERSE:
			case HiveSql.T_RIGHT:
			case HiveSql.T_RLIKE:
			case HiveSql.T_ROLE:
			case HiveSql.T_ROLLBACK:
			case HiveSql.T_ROW:
			case HiveSql.T_ROWS:
			case HiveSql.T_ROW_COUNT:
			case HiveSql.T_RR:
			case HiveSql.T_RS:
			case HiveSql.T_PWD:
			case HiveSql.T_TRIM:
			case HiveSql.T_SCHEMA:
			case HiveSql.T_SECOND:
			case HiveSql.T_SECONDS:
			case HiveSql.T_SECURITY:
			case HiveSql.T_SEGMENT:
			case HiveSql.T_SEL:
			case HiveSql.T_SELECT:
			case HiveSql.T_SET:
			case HiveSql.T_SESSION:
			case HiveSql.T_SESSIONS:
			case HiveSql.T_SETS:
			case HiveSql.T_SHARE:
			case HiveSql.T_SIGNAL:
			case HiveSql.T_SIMPLE_DOUBLE:
			case HiveSql.T_SIMPLE_FLOAT:
			case HiveSql.T_SMALLDATETIME:
			case HiveSql.T_SMALLINT:
			case HiveSql.T_SQL:
			case HiveSql.T_SQLEXCEPTION:
			case HiveSql.T_SQLINSERT:
			case HiveSql.T_SQLSTATE:
			case HiveSql.T_SQLWARNING:
			case HiveSql.T_STATS:
			case HiveSql.T_STATISTICS:
			case HiveSql.T_STEP:
			case HiveSql.T_STORAGE:
			case HiveSql.T_STORED:
			case HiveSql.T_STRING:
			case HiveSql.T_SUBDIR:
			case HiveSql.T_SUBSTRING:
			case HiveSql.T_SUM:
			case HiveSql.T_SUMMARY:
			case HiveSql.T_SYS_REFCURSOR:
			case HiveSql.T_TABLE:
			case HiveSql.T_TABLESPACE:
			case HiveSql.T_TEMPORARY:
			case HiveSql.T_TERMINATED:
			case HiveSql.T_TEXTIMAGE_ON:
			case HiveSql.T_THEN:
			case HiveSql.T_TIMESTAMP:
			case HiveSql.T_TITLE:
			case HiveSql.T_TO:
			case HiveSql.T_TOP:
			case HiveSql.T_TRANSACTION:
			case HiveSql.T_TRUE:
			case HiveSql.T_TRUNCATE:
			case HiveSql.T_UNIQUE:
			case HiveSql.T_UPDATE:
			case HiveSql.T_UR:
			case HiveSql.T_USE:
			case HiveSql.T_USING:
			case HiveSql.T_VALUE:
			case HiveSql.T_VALUES:
			case HiveSql.T_VAR:
			case HiveSql.T_VARCHAR:
			case HiveSql.T_VARCHAR2:
			case HiveSql.T_VARYING:
			case HiveSql.T_VOLATILE:
			case HiveSql.T_WHILE:
			case HiveSql.T_WITH:
			case HiveSql.T_WITHOUT:
			case HiveSql.T_WORK:
			case HiveSql.T_XACT_ABORT:
			case HiveSql.T_XML:
			case HiveSql.T_YES:
			case HiveSql.T_ACTIVITY_COUNT:
			case HiveSql.T_CUME_DIST:
			case HiveSql.T_CURRENT_DATE:
			case HiveSql.T_CURRENT_TIMESTAMP:
			case HiveSql.T_CURRENT_USER:
			case HiveSql.T_DENSE_RANK:
			case HiveSql.T_FIRST_VALUE:
			case HiveSql.T_LAG:
			case HiveSql.T_LAST_VALUE:
			case HiveSql.T_LEAD:
			case HiveSql.T_PART_COUNT:
			case HiveSql.T_PART_LOC:
			case HiveSql.T_RANK:
			case HiveSql.T_ROW_NUMBER:
			case HiveSql.T_STDEV:
			case HiveSql.T_SYSDATE:
			case HiveSql.T_VARIANCE:
			case HiveSql.T_USER:
			case HiveSql.L_ID:
				{
				this.state = 2535;
				this.table_name();
				}
				break;
			case HiveSql.T_OPEN_P:
				{
				{
				this.state = 2536;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2537;
				this.select_stmt();
				this.state = 2538;
				this.match(HiveSql.T_CLOSE_P);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2546;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 317, this._ctx) ) {
			case 1:
				{
				this.state = 2543;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 316, this._ctx) ) {
				case 1:
					{
					this.state = 2542;
					this.match(HiveSql.T_AS);
					}
					break;
				}
				this.state = 2545;
				this.ident();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public merge_condition(): Merge_conditionContext {
		let _localctx: Merge_conditionContext = new Merge_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, HiveSql.RULE_merge_condition);
		let _la: number;
		try {
			this.state = 2561;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_WHEN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2548;
				this.match(HiveSql.T_WHEN);
				this.state = 2550;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_NOT) {
					{
					this.state = 2549;
					this.match(HiveSql.T_NOT);
					}
				}

				this.state = 2552;
				this.match(HiveSql.T_MATCHED);
				this.state = 2555;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_AND) {
					{
					this.state = 2553;
					this.match(HiveSql.T_AND);
					this.state = 2554;
					this.bool_expr(0);
					}
				}

				this.state = 2557;
				this.match(HiveSql.T_THEN);
				this.state = 2558;
				this.merge_action();
				}
				break;
			case HiveSql.T_ELSE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2559;
				this.match(HiveSql.T_ELSE);
				this.state = 2560;
				this.match(HiveSql.T_IGNORE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public merge_action(): Merge_actionContext {
		let _localctx: Merge_actionContext = new Merge_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, HiveSql.RULE_merge_action);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2583;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_INSERT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2563;
				this.match(HiveSql.T_INSERT);
				this.state = 2565;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_OPEN_P) {
					{
					this.state = 2564;
					this.insert_stmt_cols();
					}
				}

				this.state = 2567;
				this.match(HiveSql.T_VALUES);
				this.state = 2568;
				this.insert_stmt_row();
				}
				break;
			case HiveSql.T_UPDATE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2569;
				this.match(HiveSql.T_UPDATE);
				this.state = 2570;
				this.match(HiveSql.T_SET);
				this.state = 2571;
				this.assignment_stmt_item();
				this.state = 2576;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 322, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2572;
						this.match(HiveSql.T_COMMA);
						this.state = 2573;
						this.assignment_stmt_item();
						}
						}
					}
					this.state = 2578;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 322, this._ctx);
				}
				this.state = 2580;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 323, this._ctx) ) {
				case 1:
					{
					this.state = 2579;
					this.where_clause();
					}
					break;
				}
				}
				break;
			case HiveSql.T_DELETE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2582;
				this.match(HiveSql.T_DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delete_stmt(): Delete_stmtContext {
		let _localctx: Delete_stmtContext = new Delete_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, HiveSql.RULE_delete_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2585;
			this.match(HiveSql.T_DELETE);
			this.state = 2587;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 325, this._ctx) ) {
			case 1:
				{
				this.state = 2586;
				this.match(HiveSql.T_FROM);
				}
				break;
			}
			this.state = 2589;
			this.table_name();
			this.state = 2591;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 326, this._ctx) ) {
			case 1:
				{
				this.state = 2590;
				this.delete_alias();
				}
				break;
			}
			this.state = 2595;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 327, this._ctx) ) {
			case 1:
				{
				this.state = 2593;
				this.where_clause();
				}
				break;

			case 2:
				{
				this.state = 2594;
				this.match(HiveSql.T_ALL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delete_alias(): Delete_aliasContext {
		let _localctx: Delete_aliasContext = new Delete_aliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, HiveSql.RULE_delete_alias);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2597;
			if (!(this._input.LT(1).text.toUpperCase() !== "ALL")) {
				throw this.createFailedPredicateException("this._input.LT(1).text.toUpperCase() !== \"ALL\"");
			}
			this.state = 2599;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 328, this._ctx) ) {
			case 1:
				{
				this.state = 2598;
				this.match(HiveSql.T_AS);
				}
				break;
			}
			this.state = 2601;
			this.ident();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public describe_stmt(): Describe_stmtContext {
		let _localctx: Describe_stmtContext = new Describe_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, HiveSql.RULE_describe_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2603;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_DESC || _la === HiveSql.T_DESCRIBE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2605;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 329, this._ctx) ) {
			case 1:
				{
				this.state = 2604;
				this.match(HiveSql.T_TABLE);
				}
				break;
			}
			this.state = 2607;
			this.table_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public bool_expr(): Bool_exprContext;
	public bool_expr(_p: number): Bool_exprContext;
	// @RuleVersion(0)
	public bool_expr(_p?: number): Bool_exprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Bool_exprContext = new Bool_exprContext(this._ctx, _parentState);
		let _prevctx: Bool_exprContext = _localctx;
		let _startState: number = 366;
		this.enterRecursionRule(_localctx, 366, HiveSql.RULE_bool_expr, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2618;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 331, this._ctx) ) {
			case 1:
				{
				this.state = 2611;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_NOT) {
					{
					this.state = 2610;
					this.match(HiveSql.T_NOT);
					}
				}

				this.state = 2613;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2614;
				this.bool_expr(0);
				this.state = 2615;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 2:
				{
				this.state = 2617;
				this.bool_expr_atom();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 2626;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 332, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new Bool_exprContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, HiveSql.RULE_bool_expr);
					this.state = 2620;
					if (!(this.precpred(this._ctx, 2))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
					}
					this.state = 2621;
					this.bool_expr_logical_operator();
					this.state = 2622;
					this.bool_expr(3);
					}
					}
				}
				this.state = 2628;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 332, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bool_expr_atom(): Bool_expr_atomContext {
		let _localctx: Bool_expr_atomContext = new Bool_expr_atomContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, HiveSql.RULE_bool_expr_atom);
		try {
			this.state = 2632;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 333, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2629;
				this.bool_expr_unary();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2630;
				this.bool_expr_binary();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2631;
				this.expr(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bool_expr_unary(): Bool_expr_unaryContext {
		let _localctx: Bool_expr_unaryContext = new Bool_expr_unaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, HiveSql.RULE_bool_expr_unary);
		let _la: number;
		try {
			this.state = 2657;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 336, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2634;
				this.expr(0);
				this.state = 2635;
				this.match(HiveSql.T_IS);
				this.state = 2637;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_NOT) {
					{
					this.state = 2636;
					this.match(HiveSql.T_NOT);
					}
				}

				this.state = 2639;
				this.match(HiveSql.T_NULL);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2641;
				this.expr(0);
				this.state = 2642;
				this.match(HiveSql.T_BETWEEN);
				this.state = 2643;
				this.expr(0);
				this.state = 2644;
				this.match(HiveSql.T_AND);
				this.state = 2645;
				this.expr(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_NOT) {
					{
					this.state = 2647;
					this.match(HiveSql.T_NOT);
					}
				}

				this.state = 2650;
				this.match(HiveSql.T_EXISTS);
				this.state = 2651;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2652;
				this.select_stmt();
				this.state = 2653;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2655;
				this.bool_expr_single_in();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2656;
				this.bool_expr_multi_in();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bool_expr_single_in(): Bool_expr_single_inContext {
		let _localctx: Bool_expr_single_inContext = new Bool_expr_single_inContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, HiveSql.RULE_bool_expr_single_in);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2659;
			this.expr(0);
			this.state = 2661;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_NOT) {
				{
				this.state = 2660;
				this.match(HiveSql.T_NOT);
				}
			}

			this.state = 2663;
			this.match(HiveSql.T_IN);
			this.state = 2664;
			this.match(HiveSql.T_OPEN_P);
			this.state = 2674;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 339, this._ctx) ) {
			case 1:
				{
				{
				this.state = 2665;
				this.expr(0);
				this.state = 2670;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 2666;
					this.match(HiveSql.T_COMMA);
					this.state = 2667;
					this.expr(0);
					}
					}
					this.state = 2672;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				}
				break;

			case 2:
				{
				this.state = 2673;
				this.select_stmt();
				}
				break;
			}
			this.state = 2676;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bool_expr_multi_in(): Bool_expr_multi_inContext {
		let _localctx: Bool_expr_multi_inContext = new Bool_expr_multi_inContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, HiveSql.RULE_bool_expr_multi_in);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2678;
			this.match(HiveSql.T_OPEN_P);
			this.state = 2679;
			this.expr(0);
			this.state = 2684;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 2680;
				this.match(HiveSql.T_COMMA);
				this.state = 2681;
				this.expr(0);
				}
				}
				this.state = 2686;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2687;
			this.match(HiveSql.T_CLOSE_P);
			this.state = 2689;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_NOT) {
				{
				this.state = 2688;
				this.match(HiveSql.T_NOT);
				}
			}

			this.state = 2691;
			this.match(HiveSql.T_IN);
			this.state = 2692;
			this.match(HiveSql.T_OPEN_P);
			this.state = 2693;
			this.select_stmt();
			this.state = 2694;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bool_expr_binary(): Bool_expr_binaryContext {
		let _localctx: Bool_expr_binaryContext = new Bool_expr_binaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, HiveSql.RULE_bool_expr_binary);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2696;
			this.expr(0);
			this.state = 2697;
			this.bool_expr_binary_operator();
			this.state = 2698;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bool_expr_logical_operator(): Bool_expr_logical_operatorContext {
		let _localctx: Bool_expr_logical_operatorContext = new Bool_expr_logical_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, HiveSql.RULE_bool_expr_logical_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2700;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_AND || _la === HiveSql.T_OR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bool_expr_binary_operator(): Bool_expr_binary_operatorContext {
		let _localctx: Bool_expr_binary_operatorContext = new Bool_expr_binary_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, HiveSql.RULE_bool_expr_binary_operator);
		let _la: number;
		try {
			this.state = 2714;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_EQUAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2702;
				this.match(HiveSql.T_EQUAL);
				}
				break;
			case HiveSql.T_EQUAL2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2703;
				this.match(HiveSql.T_EQUAL2);
				}
				break;
			case HiveSql.T_NOTEQUAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2704;
				this.match(HiveSql.T_NOTEQUAL);
				}
				break;
			case HiveSql.T_NOTEQUAL2:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2705;
				this.match(HiveSql.T_NOTEQUAL2);
				}
				break;
			case HiveSql.T_LESS:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2706;
				this.match(HiveSql.T_LESS);
				}
				break;
			case HiveSql.T_LESSEQUAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2707;
				this.match(HiveSql.T_LESSEQUAL);
				}
				break;
			case HiveSql.T_GREATER:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2708;
				this.match(HiveSql.T_GREATER);
				}
				break;
			case HiveSql.T_GREATEREQUAL:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2709;
				this.match(HiveSql.T_GREATEREQUAL);
				}
				break;
			case HiveSql.T_LIKE:
			case HiveSql.T_NOT:
			case HiveSql.T_REGEXP:
			case HiveSql.T_RLIKE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_NOT) {
					{
					this.state = 2710;
					this.match(HiveSql.T_NOT);
					}
				}

				this.state = 2713;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_LIKE || _la === HiveSql.T_REGEXP || _la === HiveSql.T_RLIKE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public expr(): ExprContext;
	public expr(_p: number): ExprContext;
	// @RuleVersion(0)
	public expr(_p?: number): ExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExprContext = new ExprContext(this._ctx, _parentState);
		let _prevctx: ExprContext = _localctx;
		let _startState: number = 382;
		this.enterRecursionRule(_localctx, 382, HiveSql.RULE_expr, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2733;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 344, this._ctx) ) {
			case 1:
				{
				this.state = 2717;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2718;
				this.select_stmt();
				this.state = 2719;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 2:
				{
				this.state = 2721;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2722;
				this.expr(0);
				this.state = 2723;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 3:
				{
				this.state = 2725;
				this.expr_interval();
				}
				break;

			case 4:
				{
				this.state = 2726;
				this.expr_concat();
				}
				break;

			case 5:
				{
				this.state = 2727;
				this.expr_case();
				}
				break;

			case 6:
				{
				this.state = 2728;
				this.expr_cursor_attribute();
				}
				break;

			case 7:
				{
				this.state = 2729;
				this.expr_agg_window_func();
				}
				break;

			case 8:
				{
				this.state = 2730;
				this.expr_spec_func();
				}
				break;

			case 9:
				{
				this.state = 2731;
				this.expr_func();
				}
				break;

			case 10:
				{
				this.state = 2732;
				this.expr_atom();
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 2751;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 2749;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 345, this._ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveSql.RULE_expr);
						this.state = 2735;
						if (!(this.precpred(this._ctx, 14))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 14)");
						}
						this.state = 2736;
						this.match(HiveSql.T_MUL);
						this.state = 2737;
						this.expr(15);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveSql.RULE_expr);
						this.state = 2738;
						if (!(this.precpred(this._ctx, 13))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 13)");
						}
						this.state = 2739;
						this.match(HiveSql.T_DIV);
						this.state = 2740;
						this.expr(14);
						}
						break;

					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveSql.RULE_expr);
						this.state = 2741;
						if (!(this.precpred(this._ctx, 12))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 12)");
						}
						this.state = 2742;
						this.match(HiveSql.T_ADD);
						this.state = 2743;
						this.expr(13);
						}
						break;

					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveSql.RULE_expr);
						this.state = 2744;
						if (!(this.precpred(this._ctx, 11))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 11)");
						}
						this.state = 2745;
						this.match(HiveSql.T_SUB);
						this.state = 2746;
						this.expr(12);
						}
						break;

					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, HiveSql.RULE_expr);
						this.state = 2747;
						if (!(this.precpred(this._ctx, 15))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 15)");
						}
						this.state = 2748;
						this.interval_item();
						}
						break;
					}
					}
				}
				this.state = 2753;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_atom(): Expr_atomContext {
		let _localctx: Expr_atomContext = new Expr_atomContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, HiveSql.RULE_expr_atom);
		try {
			this.state = 2762;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 347, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2754;
				this.date_literal();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2755;
				this.timestamp_literal();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2756;
				this.bool_literal();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2757;
				this.ident();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2758;
				this.string();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2759;
				this.dec_number();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2760;
				this.int_number();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2761;
				this.null_const();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_interval(): Expr_intervalContext {
		let _localctx: Expr_intervalContext = new Expr_intervalContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, HiveSql.RULE_expr_interval);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2764;
			this.match(HiveSql.T_INTERVAL);
			this.state = 2765;
			this.expr(0);
			this.state = 2766;
			this.interval_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interval_item(): Interval_itemContext {
		let _localctx: Interval_itemContext = new Interval_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, HiveSql.RULE_interval_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2768;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_DAY || _la === HiveSql.T_DAYS || _la === HiveSql.T_MICROSECOND || _la === HiveSql.T_MICROSECONDS || _la === HiveSql.T_SECOND || _la === HiveSql.T_SECONDS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_concat(): Expr_concatContext {
		let _localctx: Expr_concatContext = new Expr_concatContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, HiveSql.RULE_expr_concat);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2770;
			this.expr_concat_item();
			this.state = 2771;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_CONCAT || _la === HiveSql.T_PIPE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2772;
			this.expr_concat_item();
			this.state = 2777;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2773;
					_la = this._input.LA(1);
					if (!(_la === HiveSql.T_CONCAT || _la === HiveSql.T_PIPE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2774;
					this.expr_concat_item();
					}
					}
				}
				this.state = 2779;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 348, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_concat_item(): Expr_concat_itemContext {
		let _localctx: Expr_concat_itemContext = new Expr_concat_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, HiveSql.RULE_expr_concat_item);
		try {
			this.state = 2789;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 349, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2780;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2781;
				this.expr(0);
				this.state = 2782;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2784;
				this.expr_case();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2785;
				this.expr_agg_window_func();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2786;
				this.expr_spec_func();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2787;
				this.expr_func();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2788;
				this.expr_atom();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_case(): Expr_caseContext {
		let _localctx: Expr_caseContext = new Expr_caseContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, HiveSql.RULE_expr_case);
		try {
			this.state = 2793;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 350, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2791;
				this.expr_case_simple();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2792;
				this.expr_case_searched();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_case_simple(): Expr_case_simpleContext {
		let _localctx: Expr_case_simpleContext = new Expr_case_simpleContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, HiveSql.RULE_expr_case_simple);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2795;
			this.match(HiveSql.T_CASE);
			this.state = 2796;
			this.expr(0);
			this.state = 2802;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2797;
				this.match(HiveSql.T_WHEN);
				this.state = 2798;
				this.expr(0);
				this.state = 2799;
				this.match(HiveSql.T_THEN);
				this.state = 2800;
				this.expr(0);
				}
				}
				this.state = 2804;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === HiveSql.T_WHEN);
			this.state = 2808;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_ELSE) {
				{
				this.state = 2806;
				this.match(HiveSql.T_ELSE);
				this.state = 2807;
				this.expr(0);
				}
			}

			this.state = 2810;
			this.match(HiveSql.T_END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_case_searched(): Expr_case_searchedContext {
		let _localctx: Expr_case_searchedContext = new Expr_case_searchedContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, HiveSql.RULE_expr_case_searched);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2812;
			this.match(HiveSql.T_CASE);
			this.state = 2818;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2813;
				this.match(HiveSql.T_WHEN);
				this.state = 2814;
				this.bool_expr(0);
				this.state = 2815;
				this.match(HiveSql.T_THEN);
				this.state = 2816;
				this.expr(0);
				}
				}
				this.state = 2820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === HiveSql.T_WHEN);
			this.state = 2824;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_ELSE) {
				{
				this.state = 2822;
				this.match(HiveSql.T_ELSE);
				this.state = 2823;
				this.expr(0);
				}
			}

			this.state = 2826;
			this.match(HiveSql.T_END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_cursor_attribute(): Expr_cursor_attributeContext {
		let _localctx: Expr_cursor_attributeContext = new Expr_cursor_attributeContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, HiveSql.RULE_expr_cursor_attribute);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2828;
			this.ident();
			this.state = 2829;
			this.match(HiveSql.T_PRECENT);
			this.state = 2830;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_FOUND || _la === HiveSql.T_ISOPEN || _la === HiveSql.T_NOTFOUND)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_agg_window_func(): Expr_agg_window_funcContext {
		let _localctx: Expr_agg_window_funcContext = new Expr_agg_window_funcContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, HiveSql.RULE_expr_agg_window_func);
		let _la: number;
		try {
			this.state = 2984;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_AVG:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2832;
				this.match(HiveSql.T_AVG);
				this.state = 2833;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2835;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 355, this._ctx) ) {
				case 1:
					{
					this.state = 2834;
					this.expr_func_all_distinct();
					}
					break;
				}
				this.state = 2837;
				this.expr(0);
				this.state = 2838;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2840;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 356, this._ctx) ) {
				case 1:
					{
					this.state = 2839;
					this.expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case HiveSql.T_COUNT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2842;
				this.match(HiveSql.T_COUNT);
				this.state = 2843;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2849;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveSql.T_ACTION:
				case HiveSql.T_ADD2:
				case HiveSql.T_ALL:
				case HiveSql.T_ALLOCATE:
				case HiveSql.T_ALTER:
				case HiveSql.T_AND:
				case HiveSql.T_ANSI_NULLS:
				case HiveSql.T_ANSI_PADDING:
				case HiveSql.T_AS:
				case HiveSql.T_ASC:
				case HiveSql.T_ASSOCIATE:
				case HiveSql.T_AT:
				case HiveSql.T_AUTO_INCREMENT:
				case HiveSql.T_AVG:
				case HiveSql.T_BATCHSIZE:
				case HiveSql.T_BEGIN:
				case HiveSql.T_BETWEEN:
				case HiveSql.T_BIGINT:
				case HiveSql.T_BINARY_DOUBLE:
				case HiveSql.T_BINARY_FLOAT:
				case HiveSql.T_BIT:
				case HiveSql.T_BODY:
				case HiveSql.T_BREAK:
				case HiveSql.T_BY:
				case HiveSql.T_BYTE:
				case HiveSql.T_CALL:
				case HiveSql.T_CALLER:
				case HiveSql.T_CASCADE:
				case HiveSql.T_CASE:
				case HiveSql.T_CASESPECIFIC:
				case HiveSql.T_CAST:
				case HiveSql.T_CHAR:
				case HiveSql.T_CHARACTER:
				case HiveSql.T_CHARSET:
				case HiveSql.T_CLIENT:
				case HiveSql.T_CLOSE:
				case HiveSql.T_CLUSTERED:
				case HiveSql.T_CMP:
				case HiveSql.T_COLLECT:
				case HiveSql.T_COLLECTION:
				case HiveSql.T_COLUMN:
				case HiveSql.T_COMMENT:
				case HiveSql.T_CONSTANT:
				case HiveSql.T_COMMIT:
				case HiveSql.T_COMPRESS:
				case HiveSql.T_CONCAT:
				case HiveSql.T_CONDITION:
				case HiveSql.T_CONSTRAINT:
				case HiveSql.T_CONTINUE:
				case HiveSql.T_COPY:
				case HiveSql.T_COUNT:
				case HiveSql.T_COUNT_BIG:
				case HiveSql.T_CREATE:
				case HiveSql.T_CREATION:
				case HiveSql.T_CREATOR:
				case HiveSql.T_CS:
				case HiveSql.T_CURRENT:
				case HiveSql.T_CURRENT_SCHEMA:
				case HiveSql.T_CURSOR:
				case HiveSql.T_DATABASE:
				case HiveSql.T_DATA:
				case HiveSql.T_DATE:
				case HiveSql.T_DATETIME:
				case HiveSql.T_DAY:
				case HiveSql.T_DAYS:
				case HiveSql.T_DEC:
				case HiveSql.T_DECIMAL:
				case HiveSql.T_DECLARE:
				case HiveSql.T_DEFAULT:
				case HiveSql.T_DEFERRED:
				case HiveSql.T_DEFINED:
				case HiveSql.T_DEFINER:
				case HiveSql.T_DEFINITION:
				case HiveSql.T_DELETE:
				case HiveSql.T_DELIMITED:
				case HiveSql.T_DELIMITER:
				case HiveSql.T_DESC:
				case HiveSql.T_DESCRIBE:
				case HiveSql.T_DIAGNOSTICS:
				case HiveSql.T_DIR:
				case HiveSql.T_DIRECTORY:
				case HiveSql.T_DISTINCT:
				case HiveSql.T_DISTRIBUTE:
				case HiveSql.T_DO:
				case HiveSql.T_DOUBLE:
				case HiveSql.T_DROP:
				case HiveSql.T_DYNAMIC:
				case HiveSql.T_ENABLE:
				case HiveSql.T_ENGINE:
				case HiveSql.T_ESCAPED:
				case HiveSql.T_EXCEPT:
				case HiveSql.T_EXEC:
				case HiveSql.T_EXECUTE:
				case HiveSql.T_EXCEPTION:
				case HiveSql.T_EXCLUSIVE:
				case HiveSql.T_EXISTS:
				case HiveSql.T_EXIT:
				case HiveSql.T_FALLBACK:
				case HiveSql.T_FALSE:
				case HiveSql.T_FETCH:
				case HiveSql.T_FIELDS:
				case HiveSql.T_FILE:
				case HiveSql.T_FILES:
				case HiveSql.T_FLOAT:
				case HiveSql.T_FOR:
				case HiveSql.T_FOREIGN:
				case HiveSql.T_FORMAT:
				case HiveSql.T_FOUND:
				case HiveSql.T_FROM:
				case HiveSql.T_FULL:
				case HiveSql.T_FUNCTION:
				case HiveSql.T_GET:
				case HiveSql.T_GLOBAL:
				case HiveSql.T_GO:
				case HiveSql.T_GRANT:
				case HiveSql.T_GROUP:
				case HiveSql.T_HANDLER:
				case HiveSql.T_HASH:
				case HiveSql.T_HAVING:
				case HiveSql.T_HDFS:
				case HiveSql.T_HIVE:
				case HiveSql.T_HOST:
				case HiveSql.T_IDENTITY:
				case HiveSql.T_IF:
				case HiveSql.T_IGNORE:
				case HiveSql.T_IMMEDIATE:
				case HiveSql.T_IN:
				case HiveSql.T_INCLUDE:
				case HiveSql.T_INDEX:
				case HiveSql.T_INITRANS:
				case HiveSql.T_INNER:
				case HiveSql.T_INOUT:
				case HiveSql.T_INSERT:
				case HiveSql.T_INT:
				case HiveSql.T_INT2:
				case HiveSql.T_INT4:
				case HiveSql.T_INT8:
				case HiveSql.T_INTEGER:
				case HiveSql.T_INTERSECT:
				case HiveSql.T_INTERVAL:
				case HiveSql.T_INTO:
				case HiveSql.T_INVOKER:
				case HiveSql.T_IS:
				case HiveSql.T_ISOPEN:
				case HiveSql.T_ITEMS:
				case HiveSql.T_JOIN:
				case HiveSql.T_KEEP:
				case HiveSql.T_KEY:
				case HiveSql.T_KEYS:
				case HiveSql.T_LANGUAGE:
				case HiveSql.T_LEAVE:
				case HiveSql.T_LEFT:
				case HiveSql.T_LIKE:
				case HiveSql.T_LIMIT:
				case HiveSql.T_LINES:
				case HiveSql.T_LOCAL:
				case HiveSql.T_LOCATION:
				case HiveSql.T_LOCATOR:
				case HiveSql.T_LOCATORS:
				case HiveSql.T_LOCKS:
				case HiveSql.T_LOG:
				case HiveSql.T_LOGGED:
				case HiveSql.T_LOGGING:
				case HiveSql.T_LOOP:
				case HiveSql.T_MAP:
				case HiveSql.T_MATCHED:
				case HiveSql.T_MAX:
				case HiveSql.T_MAXTRANS:
				case HiveSql.T_MERGE:
				case HiveSql.T_MESSAGE_TEXT:
				case HiveSql.T_MICROSECOND:
				case HiveSql.T_MICROSECONDS:
				case HiveSql.T_MIN:
				case HiveSql.T_MULTISET:
				case HiveSql.T_NCHAR:
				case HiveSql.T_NEW:
				case HiveSql.T_NVARCHAR:
				case HiveSql.T_NO:
				case HiveSql.T_NOCOUNT:
				case HiveSql.T_NOCOMPRESS:
				case HiveSql.T_NOLOGGING:
				case HiveSql.T_NONE:
				case HiveSql.T_NOT:
				case HiveSql.T_NOTFOUND:
				case HiveSql.T_NULL:
				case HiveSql.T_NUMERIC:
				case HiveSql.T_NUMBER:
				case HiveSql.T_OBJECT:
				case HiveSql.T_OFF:
				case HiveSql.T_ON:
				case HiveSql.T_ONLY:
				case HiveSql.T_OPEN:
				case HiveSql.T_OR:
				case HiveSql.T_ORDER:
				case HiveSql.T_OUT:
				case HiveSql.T_OUTER:
				case HiveSql.T_OVER:
				case HiveSql.T_OVERWRITE:
				case HiveSql.T_OWNER:
				case HiveSql.T_PACKAGE:
				case HiveSql.T_PARTITION:
				case HiveSql.T_PCTFREE:
				case HiveSql.T_PCTUSED:
				case HiveSql.T_PRECISION:
				case HiveSql.T_PRESERVE:
				case HiveSql.T_PRIMARY:
				case HiveSql.T_PRINT:
				case HiveSql.T_PROC:
				case HiveSql.T_PROCEDURE:
				case HiveSql.T_QUALIFY:
				case HiveSql.T_QUERY_BAND:
				case HiveSql.T_QUIT:
				case HiveSql.T_QUOTED_IDENTIFIER:
				case HiveSql.T_RAISE:
				case HiveSql.T_REAL:
				case HiveSql.T_REFERENCES:
				case HiveSql.T_REGEXP:
				case HiveSql.T_REPLACE:
				case HiveSql.T_RESIGNAL:
				case HiveSql.T_RESTRICT:
				case HiveSql.T_RESULT:
				case HiveSql.T_RESULT_SET_LOCATOR:
				case HiveSql.T_RETURN:
				case HiveSql.T_RETURNS:
				case HiveSql.T_REVERSE:
				case HiveSql.T_RIGHT:
				case HiveSql.T_RLIKE:
				case HiveSql.T_ROLE:
				case HiveSql.T_ROLLBACK:
				case HiveSql.T_ROW:
				case HiveSql.T_ROWS:
				case HiveSql.T_ROW_COUNT:
				case HiveSql.T_RR:
				case HiveSql.T_RS:
				case HiveSql.T_PWD:
				case HiveSql.T_TRIM:
				case HiveSql.T_SCHEMA:
				case HiveSql.T_SECOND:
				case HiveSql.T_SECONDS:
				case HiveSql.T_SECURITY:
				case HiveSql.T_SEGMENT:
				case HiveSql.T_SEL:
				case HiveSql.T_SELECT:
				case HiveSql.T_SET:
				case HiveSql.T_SESSION:
				case HiveSql.T_SESSIONS:
				case HiveSql.T_SETS:
				case HiveSql.T_SHARE:
				case HiveSql.T_SIGNAL:
				case HiveSql.T_SIMPLE_DOUBLE:
				case HiveSql.T_SIMPLE_FLOAT:
				case HiveSql.T_SMALLDATETIME:
				case HiveSql.T_SMALLINT:
				case HiveSql.T_SQL:
				case HiveSql.T_SQLEXCEPTION:
				case HiveSql.T_SQLINSERT:
				case HiveSql.T_SQLSTATE:
				case HiveSql.T_SQLWARNING:
				case HiveSql.T_STATS:
				case HiveSql.T_STATISTICS:
				case HiveSql.T_STEP:
				case HiveSql.T_STORAGE:
				case HiveSql.T_STORED:
				case HiveSql.T_STRING:
				case HiveSql.T_SUBDIR:
				case HiveSql.T_SUBSTRING:
				case HiveSql.T_SUM:
				case HiveSql.T_SUMMARY:
				case HiveSql.T_SYS_REFCURSOR:
				case HiveSql.T_TABLE:
				case HiveSql.T_TABLESPACE:
				case HiveSql.T_TEMPORARY:
				case HiveSql.T_TERMINATED:
				case HiveSql.T_TEXTIMAGE_ON:
				case HiveSql.T_THEN:
				case HiveSql.T_TIMESTAMP:
				case HiveSql.T_TITLE:
				case HiveSql.T_TO:
				case HiveSql.T_TOP:
				case HiveSql.T_TRANSACTION:
				case HiveSql.T_TRUE:
				case HiveSql.T_TRUNCATE:
				case HiveSql.T_UNIQUE:
				case HiveSql.T_UPDATE:
				case HiveSql.T_UR:
				case HiveSql.T_USE:
				case HiveSql.T_USING:
				case HiveSql.T_VALUE:
				case HiveSql.T_VALUES:
				case HiveSql.T_VAR:
				case HiveSql.T_VARCHAR:
				case HiveSql.T_VARCHAR2:
				case HiveSql.T_VARYING:
				case HiveSql.T_VOLATILE:
				case HiveSql.T_WHILE:
				case HiveSql.T_WITH:
				case HiveSql.T_WITHOUT:
				case HiveSql.T_WORK:
				case HiveSql.T_XACT_ABORT:
				case HiveSql.T_XML:
				case HiveSql.T_YES:
				case HiveSql.T_ACTIVITY_COUNT:
				case HiveSql.T_CUME_DIST:
				case HiveSql.T_CURRENT_DATE:
				case HiveSql.T_CURRENT_TIMESTAMP:
				case HiveSql.T_CURRENT_USER:
				case HiveSql.T_DENSE_RANK:
				case HiveSql.T_FIRST_VALUE:
				case HiveSql.T_LAG:
				case HiveSql.T_LAST_VALUE:
				case HiveSql.T_LEAD:
				case HiveSql.T_MAX_PART_STRING:
				case HiveSql.T_MIN_PART_STRING:
				case HiveSql.T_MAX_PART_INT:
				case HiveSql.T_MIN_PART_INT:
				case HiveSql.T_MAX_PART_DATE:
				case HiveSql.T_MIN_PART_DATE:
				case HiveSql.T_PART_COUNT:
				case HiveSql.T_PART_LOC:
				case HiveSql.T_RANK:
				case HiveSql.T_ROW_NUMBER:
				case HiveSql.T_STDEV:
				case HiveSql.T_SYSDATE:
				case HiveSql.T_VARIANCE:
				case HiveSql.T_USER:
				case HiveSql.T_ADD:
				case HiveSql.T_OPEN_P:
				case HiveSql.T_SUB:
				case HiveSql.L_ID:
				case HiveSql.L_S_STRING:
				case HiveSql.L_D_STRING:
				case HiveSql.L_INT:
				case HiveSql.L_DEC:
					{
					{
					this.state = 2845;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 357, this._ctx) ) {
					case 1:
						{
						this.state = 2844;
						this.expr_func_all_distinct();
						}
						break;
					}
					this.state = 2847;
					this.expr(0);
					}
					}
					break;
				case HiveSql.T_MUL:
					{
					this.state = 2848;
					this.match(HiveSql.T_MUL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2851;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2853;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 359, this._ctx) ) {
				case 1:
					{
					this.state = 2852;
					this.expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case HiveSql.T_COUNT_BIG:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2855;
				this.match(HiveSql.T_COUNT_BIG);
				this.state = 2856;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2862;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveSql.T_ACTION:
				case HiveSql.T_ADD2:
				case HiveSql.T_ALL:
				case HiveSql.T_ALLOCATE:
				case HiveSql.T_ALTER:
				case HiveSql.T_AND:
				case HiveSql.T_ANSI_NULLS:
				case HiveSql.T_ANSI_PADDING:
				case HiveSql.T_AS:
				case HiveSql.T_ASC:
				case HiveSql.T_ASSOCIATE:
				case HiveSql.T_AT:
				case HiveSql.T_AUTO_INCREMENT:
				case HiveSql.T_AVG:
				case HiveSql.T_BATCHSIZE:
				case HiveSql.T_BEGIN:
				case HiveSql.T_BETWEEN:
				case HiveSql.T_BIGINT:
				case HiveSql.T_BINARY_DOUBLE:
				case HiveSql.T_BINARY_FLOAT:
				case HiveSql.T_BIT:
				case HiveSql.T_BODY:
				case HiveSql.T_BREAK:
				case HiveSql.T_BY:
				case HiveSql.T_BYTE:
				case HiveSql.T_CALL:
				case HiveSql.T_CALLER:
				case HiveSql.T_CASCADE:
				case HiveSql.T_CASE:
				case HiveSql.T_CASESPECIFIC:
				case HiveSql.T_CAST:
				case HiveSql.T_CHAR:
				case HiveSql.T_CHARACTER:
				case HiveSql.T_CHARSET:
				case HiveSql.T_CLIENT:
				case HiveSql.T_CLOSE:
				case HiveSql.T_CLUSTERED:
				case HiveSql.T_CMP:
				case HiveSql.T_COLLECT:
				case HiveSql.T_COLLECTION:
				case HiveSql.T_COLUMN:
				case HiveSql.T_COMMENT:
				case HiveSql.T_CONSTANT:
				case HiveSql.T_COMMIT:
				case HiveSql.T_COMPRESS:
				case HiveSql.T_CONCAT:
				case HiveSql.T_CONDITION:
				case HiveSql.T_CONSTRAINT:
				case HiveSql.T_CONTINUE:
				case HiveSql.T_COPY:
				case HiveSql.T_COUNT:
				case HiveSql.T_COUNT_BIG:
				case HiveSql.T_CREATE:
				case HiveSql.T_CREATION:
				case HiveSql.T_CREATOR:
				case HiveSql.T_CS:
				case HiveSql.T_CURRENT:
				case HiveSql.T_CURRENT_SCHEMA:
				case HiveSql.T_CURSOR:
				case HiveSql.T_DATABASE:
				case HiveSql.T_DATA:
				case HiveSql.T_DATE:
				case HiveSql.T_DATETIME:
				case HiveSql.T_DAY:
				case HiveSql.T_DAYS:
				case HiveSql.T_DEC:
				case HiveSql.T_DECIMAL:
				case HiveSql.T_DECLARE:
				case HiveSql.T_DEFAULT:
				case HiveSql.T_DEFERRED:
				case HiveSql.T_DEFINED:
				case HiveSql.T_DEFINER:
				case HiveSql.T_DEFINITION:
				case HiveSql.T_DELETE:
				case HiveSql.T_DELIMITED:
				case HiveSql.T_DELIMITER:
				case HiveSql.T_DESC:
				case HiveSql.T_DESCRIBE:
				case HiveSql.T_DIAGNOSTICS:
				case HiveSql.T_DIR:
				case HiveSql.T_DIRECTORY:
				case HiveSql.T_DISTINCT:
				case HiveSql.T_DISTRIBUTE:
				case HiveSql.T_DO:
				case HiveSql.T_DOUBLE:
				case HiveSql.T_DROP:
				case HiveSql.T_DYNAMIC:
				case HiveSql.T_ENABLE:
				case HiveSql.T_ENGINE:
				case HiveSql.T_ESCAPED:
				case HiveSql.T_EXCEPT:
				case HiveSql.T_EXEC:
				case HiveSql.T_EXECUTE:
				case HiveSql.T_EXCEPTION:
				case HiveSql.T_EXCLUSIVE:
				case HiveSql.T_EXISTS:
				case HiveSql.T_EXIT:
				case HiveSql.T_FALLBACK:
				case HiveSql.T_FALSE:
				case HiveSql.T_FETCH:
				case HiveSql.T_FIELDS:
				case HiveSql.T_FILE:
				case HiveSql.T_FILES:
				case HiveSql.T_FLOAT:
				case HiveSql.T_FOR:
				case HiveSql.T_FOREIGN:
				case HiveSql.T_FORMAT:
				case HiveSql.T_FOUND:
				case HiveSql.T_FROM:
				case HiveSql.T_FULL:
				case HiveSql.T_FUNCTION:
				case HiveSql.T_GET:
				case HiveSql.T_GLOBAL:
				case HiveSql.T_GO:
				case HiveSql.T_GRANT:
				case HiveSql.T_GROUP:
				case HiveSql.T_HANDLER:
				case HiveSql.T_HASH:
				case HiveSql.T_HAVING:
				case HiveSql.T_HDFS:
				case HiveSql.T_HIVE:
				case HiveSql.T_HOST:
				case HiveSql.T_IDENTITY:
				case HiveSql.T_IF:
				case HiveSql.T_IGNORE:
				case HiveSql.T_IMMEDIATE:
				case HiveSql.T_IN:
				case HiveSql.T_INCLUDE:
				case HiveSql.T_INDEX:
				case HiveSql.T_INITRANS:
				case HiveSql.T_INNER:
				case HiveSql.T_INOUT:
				case HiveSql.T_INSERT:
				case HiveSql.T_INT:
				case HiveSql.T_INT2:
				case HiveSql.T_INT4:
				case HiveSql.T_INT8:
				case HiveSql.T_INTEGER:
				case HiveSql.T_INTERSECT:
				case HiveSql.T_INTERVAL:
				case HiveSql.T_INTO:
				case HiveSql.T_INVOKER:
				case HiveSql.T_IS:
				case HiveSql.T_ISOPEN:
				case HiveSql.T_ITEMS:
				case HiveSql.T_JOIN:
				case HiveSql.T_KEEP:
				case HiveSql.T_KEY:
				case HiveSql.T_KEYS:
				case HiveSql.T_LANGUAGE:
				case HiveSql.T_LEAVE:
				case HiveSql.T_LEFT:
				case HiveSql.T_LIKE:
				case HiveSql.T_LIMIT:
				case HiveSql.T_LINES:
				case HiveSql.T_LOCAL:
				case HiveSql.T_LOCATION:
				case HiveSql.T_LOCATOR:
				case HiveSql.T_LOCATORS:
				case HiveSql.T_LOCKS:
				case HiveSql.T_LOG:
				case HiveSql.T_LOGGED:
				case HiveSql.T_LOGGING:
				case HiveSql.T_LOOP:
				case HiveSql.T_MAP:
				case HiveSql.T_MATCHED:
				case HiveSql.T_MAX:
				case HiveSql.T_MAXTRANS:
				case HiveSql.T_MERGE:
				case HiveSql.T_MESSAGE_TEXT:
				case HiveSql.T_MICROSECOND:
				case HiveSql.T_MICROSECONDS:
				case HiveSql.T_MIN:
				case HiveSql.T_MULTISET:
				case HiveSql.T_NCHAR:
				case HiveSql.T_NEW:
				case HiveSql.T_NVARCHAR:
				case HiveSql.T_NO:
				case HiveSql.T_NOCOUNT:
				case HiveSql.T_NOCOMPRESS:
				case HiveSql.T_NOLOGGING:
				case HiveSql.T_NONE:
				case HiveSql.T_NOT:
				case HiveSql.T_NOTFOUND:
				case HiveSql.T_NULL:
				case HiveSql.T_NUMERIC:
				case HiveSql.T_NUMBER:
				case HiveSql.T_OBJECT:
				case HiveSql.T_OFF:
				case HiveSql.T_ON:
				case HiveSql.T_ONLY:
				case HiveSql.T_OPEN:
				case HiveSql.T_OR:
				case HiveSql.T_ORDER:
				case HiveSql.T_OUT:
				case HiveSql.T_OUTER:
				case HiveSql.T_OVER:
				case HiveSql.T_OVERWRITE:
				case HiveSql.T_OWNER:
				case HiveSql.T_PACKAGE:
				case HiveSql.T_PARTITION:
				case HiveSql.T_PCTFREE:
				case HiveSql.T_PCTUSED:
				case HiveSql.T_PRECISION:
				case HiveSql.T_PRESERVE:
				case HiveSql.T_PRIMARY:
				case HiveSql.T_PRINT:
				case HiveSql.T_PROC:
				case HiveSql.T_PROCEDURE:
				case HiveSql.T_QUALIFY:
				case HiveSql.T_QUERY_BAND:
				case HiveSql.T_QUIT:
				case HiveSql.T_QUOTED_IDENTIFIER:
				case HiveSql.T_RAISE:
				case HiveSql.T_REAL:
				case HiveSql.T_REFERENCES:
				case HiveSql.T_REGEXP:
				case HiveSql.T_REPLACE:
				case HiveSql.T_RESIGNAL:
				case HiveSql.T_RESTRICT:
				case HiveSql.T_RESULT:
				case HiveSql.T_RESULT_SET_LOCATOR:
				case HiveSql.T_RETURN:
				case HiveSql.T_RETURNS:
				case HiveSql.T_REVERSE:
				case HiveSql.T_RIGHT:
				case HiveSql.T_RLIKE:
				case HiveSql.T_ROLE:
				case HiveSql.T_ROLLBACK:
				case HiveSql.T_ROW:
				case HiveSql.T_ROWS:
				case HiveSql.T_ROW_COUNT:
				case HiveSql.T_RR:
				case HiveSql.T_RS:
				case HiveSql.T_PWD:
				case HiveSql.T_TRIM:
				case HiveSql.T_SCHEMA:
				case HiveSql.T_SECOND:
				case HiveSql.T_SECONDS:
				case HiveSql.T_SECURITY:
				case HiveSql.T_SEGMENT:
				case HiveSql.T_SEL:
				case HiveSql.T_SELECT:
				case HiveSql.T_SET:
				case HiveSql.T_SESSION:
				case HiveSql.T_SESSIONS:
				case HiveSql.T_SETS:
				case HiveSql.T_SHARE:
				case HiveSql.T_SIGNAL:
				case HiveSql.T_SIMPLE_DOUBLE:
				case HiveSql.T_SIMPLE_FLOAT:
				case HiveSql.T_SMALLDATETIME:
				case HiveSql.T_SMALLINT:
				case HiveSql.T_SQL:
				case HiveSql.T_SQLEXCEPTION:
				case HiveSql.T_SQLINSERT:
				case HiveSql.T_SQLSTATE:
				case HiveSql.T_SQLWARNING:
				case HiveSql.T_STATS:
				case HiveSql.T_STATISTICS:
				case HiveSql.T_STEP:
				case HiveSql.T_STORAGE:
				case HiveSql.T_STORED:
				case HiveSql.T_STRING:
				case HiveSql.T_SUBDIR:
				case HiveSql.T_SUBSTRING:
				case HiveSql.T_SUM:
				case HiveSql.T_SUMMARY:
				case HiveSql.T_SYS_REFCURSOR:
				case HiveSql.T_TABLE:
				case HiveSql.T_TABLESPACE:
				case HiveSql.T_TEMPORARY:
				case HiveSql.T_TERMINATED:
				case HiveSql.T_TEXTIMAGE_ON:
				case HiveSql.T_THEN:
				case HiveSql.T_TIMESTAMP:
				case HiveSql.T_TITLE:
				case HiveSql.T_TO:
				case HiveSql.T_TOP:
				case HiveSql.T_TRANSACTION:
				case HiveSql.T_TRUE:
				case HiveSql.T_TRUNCATE:
				case HiveSql.T_UNIQUE:
				case HiveSql.T_UPDATE:
				case HiveSql.T_UR:
				case HiveSql.T_USE:
				case HiveSql.T_USING:
				case HiveSql.T_VALUE:
				case HiveSql.T_VALUES:
				case HiveSql.T_VAR:
				case HiveSql.T_VARCHAR:
				case HiveSql.T_VARCHAR2:
				case HiveSql.T_VARYING:
				case HiveSql.T_VOLATILE:
				case HiveSql.T_WHILE:
				case HiveSql.T_WITH:
				case HiveSql.T_WITHOUT:
				case HiveSql.T_WORK:
				case HiveSql.T_XACT_ABORT:
				case HiveSql.T_XML:
				case HiveSql.T_YES:
				case HiveSql.T_ACTIVITY_COUNT:
				case HiveSql.T_CUME_DIST:
				case HiveSql.T_CURRENT_DATE:
				case HiveSql.T_CURRENT_TIMESTAMP:
				case HiveSql.T_CURRENT_USER:
				case HiveSql.T_DENSE_RANK:
				case HiveSql.T_FIRST_VALUE:
				case HiveSql.T_LAG:
				case HiveSql.T_LAST_VALUE:
				case HiveSql.T_LEAD:
				case HiveSql.T_MAX_PART_STRING:
				case HiveSql.T_MIN_PART_STRING:
				case HiveSql.T_MAX_PART_INT:
				case HiveSql.T_MIN_PART_INT:
				case HiveSql.T_MAX_PART_DATE:
				case HiveSql.T_MIN_PART_DATE:
				case HiveSql.T_PART_COUNT:
				case HiveSql.T_PART_LOC:
				case HiveSql.T_RANK:
				case HiveSql.T_ROW_NUMBER:
				case HiveSql.T_STDEV:
				case HiveSql.T_SYSDATE:
				case HiveSql.T_VARIANCE:
				case HiveSql.T_USER:
				case HiveSql.T_ADD:
				case HiveSql.T_OPEN_P:
				case HiveSql.T_SUB:
				case HiveSql.L_ID:
				case HiveSql.L_S_STRING:
				case HiveSql.L_D_STRING:
				case HiveSql.L_INT:
				case HiveSql.L_DEC:
					{
					{
					this.state = 2858;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 360, this._ctx) ) {
					case 1:
						{
						this.state = 2857;
						this.expr_func_all_distinct();
						}
						break;
					}
					this.state = 2860;
					this.expr(0);
					}
					}
					break;
				case HiveSql.T_MUL:
					{
					this.state = 2861;
					this.match(HiveSql.T_MUL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2864;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2866;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 362, this._ctx) ) {
				case 1:
					{
					this.state = 2865;
					this.expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case HiveSql.T_CUME_DIST:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2868;
				this.match(HiveSql.T_CUME_DIST);
				this.state = 2869;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2870;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2871;
				this.expr_func_over_clause();
				}
				break;
			case HiveSql.T_DENSE_RANK:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2872;
				this.match(HiveSql.T_DENSE_RANK);
				this.state = 2873;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2874;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2875;
				this.expr_func_over_clause();
				}
				break;
			case HiveSql.T_FIRST_VALUE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2876;
				this.match(HiveSql.T_FIRST_VALUE);
				this.state = 2877;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2878;
				this.expr(0);
				this.state = 2879;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2880;
				this.expr_func_over_clause();
				}
				break;
			case HiveSql.T_LAG:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2882;
				this.match(HiveSql.T_LAG);
				this.state = 2883;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2884;
				this.expr(0);
				this.state = 2891;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_COMMA) {
					{
					this.state = 2885;
					this.match(HiveSql.T_COMMA);
					this.state = 2886;
					this.expr(0);
					this.state = 2889;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === HiveSql.T_COMMA) {
						{
						this.state = 2887;
						this.match(HiveSql.T_COMMA);
						this.state = 2888;
						this.expr(0);
						}
					}

					}
				}

				this.state = 2893;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2894;
				this.expr_func_over_clause();
				}
				break;
			case HiveSql.T_LAST_VALUE:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2896;
				this.match(HiveSql.T_LAST_VALUE);
				this.state = 2897;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2898;
				this.expr(0);
				this.state = 2899;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2900;
				this.expr_func_over_clause();
				}
				break;
			case HiveSql.T_LEAD:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2902;
				this.match(HiveSql.T_LEAD);
				this.state = 2903;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2904;
				this.expr(0);
				this.state = 2911;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_COMMA) {
					{
					this.state = 2905;
					this.match(HiveSql.T_COMMA);
					this.state = 2906;
					this.expr(0);
					this.state = 2909;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === HiveSql.T_COMMA) {
						{
						this.state = 2907;
						this.match(HiveSql.T_COMMA);
						this.state = 2908;
						this.expr(0);
						}
					}

					}
				}

				this.state = 2913;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2914;
				this.expr_func_over_clause();
				}
				break;
			case HiveSql.T_MAX:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2916;
				this.match(HiveSql.T_MAX);
				this.state = 2917;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2919;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 367, this._ctx) ) {
				case 1:
					{
					this.state = 2918;
					this.expr_func_all_distinct();
					}
					break;
				}
				this.state = 2921;
				this.expr(0);
				this.state = 2922;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2924;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 368, this._ctx) ) {
				case 1:
					{
					this.state = 2923;
					this.expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case HiveSql.T_MIN:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2926;
				this.match(HiveSql.T_MIN);
				this.state = 2927;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2929;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 369, this._ctx) ) {
				case 1:
					{
					this.state = 2928;
					this.expr_func_all_distinct();
					}
					break;
				}
				this.state = 2931;
				this.expr(0);
				this.state = 2932;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2934;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 370, this._ctx) ) {
				case 1:
					{
					this.state = 2933;
					this.expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case HiveSql.T_RANK:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2936;
				this.match(HiveSql.T_RANK);
				this.state = 2937;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2938;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2939;
				this.expr_func_over_clause();
				}
				break;
			case HiveSql.T_ROW_NUMBER:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2940;
				this.match(HiveSql.T_ROW_NUMBER);
				this.state = 2941;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2942;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2943;
				this.expr_func_over_clause();
				}
				break;
			case HiveSql.T_STDEV:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2944;
				this.match(HiveSql.T_STDEV);
				this.state = 2945;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2947;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 371, this._ctx) ) {
				case 1:
					{
					this.state = 2946;
					this.expr_func_all_distinct();
					}
					break;
				}
				this.state = 2949;
				this.expr(0);
				this.state = 2950;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2952;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 372, this._ctx) ) {
				case 1:
					{
					this.state = 2951;
					this.expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case HiveSql.T_SUM:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 2954;
				this.match(HiveSql.T_SUM);
				this.state = 2955;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2957;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 373, this._ctx) ) {
				case 1:
					{
					this.state = 2956;
					this.expr_func_all_distinct();
					}
					break;
				}
				this.state = 2959;
				this.expr(0);
				this.state = 2960;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2962;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 374, this._ctx) ) {
				case 1:
					{
					this.state = 2961;
					this.expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case HiveSql.T_VAR:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 2964;
				this.match(HiveSql.T_VAR);
				this.state = 2965;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2967;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 375, this._ctx) ) {
				case 1:
					{
					this.state = 2966;
					this.expr_func_all_distinct();
					}
					break;
				}
				this.state = 2969;
				this.expr(0);
				this.state = 2970;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2972;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 376, this._ctx) ) {
				case 1:
					{
					this.state = 2971;
					this.expr_func_over_clause();
					}
					break;
				}
				}
				break;
			case HiveSql.T_VARIANCE:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 2974;
				this.match(HiveSql.T_VARIANCE);
				this.state = 2975;
				this.match(HiveSql.T_OPEN_P);
				this.state = 2977;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 377, this._ctx) ) {
				case 1:
					{
					this.state = 2976;
					this.expr_func_all_distinct();
					}
					break;
				}
				this.state = 2979;
				this.expr(0);
				this.state = 2980;
				this.match(HiveSql.T_CLOSE_P);
				this.state = 2982;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 378, this._ctx) ) {
				case 1:
					{
					this.state = 2981;
					this.expr_func_over_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_func_all_distinct(): Expr_func_all_distinctContext {
		let _localctx: Expr_func_all_distinctContext = new Expr_func_all_distinctContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, HiveSql.RULE_expr_func_all_distinct);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2986;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_ALL || _la === HiveSql.T_DISTINCT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_func_over_clause(): Expr_func_over_clauseContext {
		let _localctx: Expr_func_over_clauseContext = new Expr_func_over_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, HiveSql.RULE_expr_func_over_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2988;
			this.match(HiveSql.T_OVER);
			this.state = 2989;
			this.match(HiveSql.T_OPEN_P);
			this.state = 2991;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_PARTITION) {
				{
				this.state = 2990;
				this.expr_func_partition_by_clause();
				}
			}

			this.state = 2994;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_ORDER) {
				{
				this.state = 2993;
				this.order_by_clause();
				}
			}

			this.state = 2996;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_func_partition_by_clause(): Expr_func_partition_by_clauseContext {
		let _localctx: Expr_func_partition_by_clauseContext = new Expr_func_partition_by_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, HiveSql.RULE_expr_func_partition_by_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2998;
			this.match(HiveSql.T_PARTITION);
			this.state = 2999;
			this.match(HiveSql.T_BY);
			this.state = 3000;
			this.expr(0);
			this.state = 3005;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === HiveSql.T_COMMA) {
				{
				{
				this.state = 3001;
				this.match(HiveSql.T_COMMA);
				this.state = 3002;
				this.expr(0);
				}
				}
				this.state = 3007;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_spec_func(): Expr_spec_funcContext {
		let _localctx: Expr_spec_funcContext = new Expr_spec_funcContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, HiveSql.RULE_expr_spec_func);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3208;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 403, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3008;
				this.match(HiveSql.T_ACTIVITY_COUNT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3009;
				this.match(HiveSql.T_CAST);
				this.state = 3010;
				this.match(HiveSql.T_OPEN_P);
				this.state = 3011;
				this.expr(0);
				this.state = 3012;
				this.match(HiveSql.T_AS);
				this.state = 3013;
				this.dtype();
				this.state = 3015;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_OPEN_P) {
					{
					this.state = 3014;
					this.dtype_len();
					}
				}

				this.state = 3017;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3019;
				this.match(HiveSql.T_COUNT);
				this.state = 3020;
				this.match(HiveSql.T_OPEN_P);
				this.state = 3023;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveSql.T_ACTION:
				case HiveSql.T_ADD2:
				case HiveSql.T_ALL:
				case HiveSql.T_ALLOCATE:
				case HiveSql.T_ALTER:
				case HiveSql.T_AND:
				case HiveSql.T_ANSI_NULLS:
				case HiveSql.T_ANSI_PADDING:
				case HiveSql.T_AS:
				case HiveSql.T_ASC:
				case HiveSql.T_ASSOCIATE:
				case HiveSql.T_AT:
				case HiveSql.T_AUTO_INCREMENT:
				case HiveSql.T_AVG:
				case HiveSql.T_BATCHSIZE:
				case HiveSql.T_BEGIN:
				case HiveSql.T_BETWEEN:
				case HiveSql.T_BIGINT:
				case HiveSql.T_BINARY_DOUBLE:
				case HiveSql.T_BINARY_FLOAT:
				case HiveSql.T_BIT:
				case HiveSql.T_BODY:
				case HiveSql.T_BREAK:
				case HiveSql.T_BY:
				case HiveSql.T_BYTE:
				case HiveSql.T_CALL:
				case HiveSql.T_CALLER:
				case HiveSql.T_CASCADE:
				case HiveSql.T_CASE:
				case HiveSql.T_CASESPECIFIC:
				case HiveSql.T_CAST:
				case HiveSql.T_CHAR:
				case HiveSql.T_CHARACTER:
				case HiveSql.T_CHARSET:
				case HiveSql.T_CLIENT:
				case HiveSql.T_CLOSE:
				case HiveSql.T_CLUSTERED:
				case HiveSql.T_CMP:
				case HiveSql.T_COLLECT:
				case HiveSql.T_COLLECTION:
				case HiveSql.T_COLUMN:
				case HiveSql.T_COMMENT:
				case HiveSql.T_CONSTANT:
				case HiveSql.T_COMMIT:
				case HiveSql.T_COMPRESS:
				case HiveSql.T_CONCAT:
				case HiveSql.T_CONDITION:
				case HiveSql.T_CONSTRAINT:
				case HiveSql.T_CONTINUE:
				case HiveSql.T_COPY:
				case HiveSql.T_COUNT:
				case HiveSql.T_COUNT_BIG:
				case HiveSql.T_CREATE:
				case HiveSql.T_CREATION:
				case HiveSql.T_CREATOR:
				case HiveSql.T_CS:
				case HiveSql.T_CURRENT:
				case HiveSql.T_CURRENT_SCHEMA:
				case HiveSql.T_CURSOR:
				case HiveSql.T_DATABASE:
				case HiveSql.T_DATA:
				case HiveSql.T_DATE:
				case HiveSql.T_DATETIME:
				case HiveSql.T_DAY:
				case HiveSql.T_DAYS:
				case HiveSql.T_DEC:
				case HiveSql.T_DECIMAL:
				case HiveSql.T_DECLARE:
				case HiveSql.T_DEFAULT:
				case HiveSql.T_DEFERRED:
				case HiveSql.T_DEFINED:
				case HiveSql.T_DEFINER:
				case HiveSql.T_DEFINITION:
				case HiveSql.T_DELETE:
				case HiveSql.T_DELIMITED:
				case HiveSql.T_DELIMITER:
				case HiveSql.T_DESC:
				case HiveSql.T_DESCRIBE:
				case HiveSql.T_DIAGNOSTICS:
				case HiveSql.T_DIR:
				case HiveSql.T_DIRECTORY:
				case HiveSql.T_DISTINCT:
				case HiveSql.T_DISTRIBUTE:
				case HiveSql.T_DO:
				case HiveSql.T_DOUBLE:
				case HiveSql.T_DROP:
				case HiveSql.T_DYNAMIC:
				case HiveSql.T_ENABLE:
				case HiveSql.T_ENGINE:
				case HiveSql.T_ESCAPED:
				case HiveSql.T_EXCEPT:
				case HiveSql.T_EXEC:
				case HiveSql.T_EXECUTE:
				case HiveSql.T_EXCEPTION:
				case HiveSql.T_EXCLUSIVE:
				case HiveSql.T_EXISTS:
				case HiveSql.T_EXIT:
				case HiveSql.T_FALLBACK:
				case HiveSql.T_FALSE:
				case HiveSql.T_FETCH:
				case HiveSql.T_FIELDS:
				case HiveSql.T_FILE:
				case HiveSql.T_FILES:
				case HiveSql.T_FLOAT:
				case HiveSql.T_FOR:
				case HiveSql.T_FOREIGN:
				case HiveSql.T_FORMAT:
				case HiveSql.T_FOUND:
				case HiveSql.T_FROM:
				case HiveSql.T_FULL:
				case HiveSql.T_FUNCTION:
				case HiveSql.T_GET:
				case HiveSql.T_GLOBAL:
				case HiveSql.T_GO:
				case HiveSql.T_GRANT:
				case HiveSql.T_GROUP:
				case HiveSql.T_HANDLER:
				case HiveSql.T_HASH:
				case HiveSql.T_HAVING:
				case HiveSql.T_HDFS:
				case HiveSql.T_HIVE:
				case HiveSql.T_HOST:
				case HiveSql.T_IDENTITY:
				case HiveSql.T_IF:
				case HiveSql.T_IGNORE:
				case HiveSql.T_IMMEDIATE:
				case HiveSql.T_IN:
				case HiveSql.T_INCLUDE:
				case HiveSql.T_INDEX:
				case HiveSql.T_INITRANS:
				case HiveSql.T_INNER:
				case HiveSql.T_INOUT:
				case HiveSql.T_INSERT:
				case HiveSql.T_INT:
				case HiveSql.T_INT2:
				case HiveSql.T_INT4:
				case HiveSql.T_INT8:
				case HiveSql.T_INTEGER:
				case HiveSql.T_INTERSECT:
				case HiveSql.T_INTERVAL:
				case HiveSql.T_INTO:
				case HiveSql.T_INVOKER:
				case HiveSql.T_IS:
				case HiveSql.T_ISOPEN:
				case HiveSql.T_ITEMS:
				case HiveSql.T_JOIN:
				case HiveSql.T_KEEP:
				case HiveSql.T_KEY:
				case HiveSql.T_KEYS:
				case HiveSql.T_LANGUAGE:
				case HiveSql.T_LEAVE:
				case HiveSql.T_LEFT:
				case HiveSql.T_LIKE:
				case HiveSql.T_LIMIT:
				case HiveSql.T_LINES:
				case HiveSql.T_LOCAL:
				case HiveSql.T_LOCATION:
				case HiveSql.T_LOCATOR:
				case HiveSql.T_LOCATORS:
				case HiveSql.T_LOCKS:
				case HiveSql.T_LOG:
				case HiveSql.T_LOGGED:
				case HiveSql.T_LOGGING:
				case HiveSql.T_LOOP:
				case HiveSql.T_MAP:
				case HiveSql.T_MATCHED:
				case HiveSql.T_MAX:
				case HiveSql.T_MAXTRANS:
				case HiveSql.T_MERGE:
				case HiveSql.T_MESSAGE_TEXT:
				case HiveSql.T_MICROSECOND:
				case HiveSql.T_MICROSECONDS:
				case HiveSql.T_MIN:
				case HiveSql.T_MULTISET:
				case HiveSql.T_NCHAR:
				case HiveSql.T_NEW:
				case HiveSql.T_NVARCHAR:
				case HiveSql.T_NO:
				case HiveSql.T_NOCOUNT:
				case HiveSql.T_NOCOMPRESS:
				case HiveSql.T_NOLOGGING:
				case HiveSql.T_NONE:
				case HiveSql.T_NOT:
				case HiveSql.T_NOTFOUND:
				case HiveSql.T_NULL:
				case HiveSql.T_NUMERIC:
				case HiveSql.T_NUMBER:
				case HiveSql.T_OBJECT:
				case HiveSql.T_OFF:
				case HiveSql.T_ON:
				case HiveSql.T_ONLY:
				case HiveSql.T_OPEN:
				case HiveSql.T_OR:
				case HiveSql.T_ORDER:
				case HiveSql.T_OUT:
				case HiveSql.T_OUTER:
				case HiveSql.T_OVER:
				case HiveSql.T_OVERWRITE:
				case HiveSql.T_OWNER:
				case HiveSql.T_PACKAGE:
				case HiveSql.T_PARTITION:
				case HiveSql.T_PCTFREE:
				case HiveSql.T_PCTUSED:
				case HiveSql.T_PRECISION:
				case HiveSql.T_PRESERVE:
				case HiveSql.T_PRIMARY:
				case HiveSql.T_PRINT:
				case HiveSql.T_PROC:
				case HiveSql.T_PROCEDURE:
				case HiveSql.T_QUALIFY:
				case HiveSql.T_QUERY_BAND:
				case HiveSql.T_QUIT:
				case HiveSql.T_QUOTED_IDENTIFIER:
				case HiveSql.T_RAISE:
				case HiveSql.T_REAL:
				case HiveSql.T_REFERENCES:
				case HiveSql.T_REGEXP:
				case HiveSql.T_REPLACE:
				case HiveSql.T_RESIGNAL:
				case HiveSql.T_RESTRICT:
				case HiveSql.T_RESULT:
				case HiveSql.T_RESULT_SET_LOCATOR:
				case HiveSql.T_RETURN:
				case HiveSql.T_RETURNS:
				case HiveSql.T_REVERSE:
				case HiveSql.T_RIGHT:
				case HiveSql.T_RLIKE:
				case HiveSql.T_ROLE:
				case HiveSql.T_ROLLBACK:
				case HiveSql.T_ROW:
				case HiveSql.T_ROWS:
				case HiveSql.T_ROW_COUNT:
				case HiveSql.T_RR:
				case HiveSql.T_RS:
				case HiveSql.T_PWD:
				case HiveSql.T_TRIM:
				case HiveSql.T_SCHEMA:
				case HiveSql.T_SECOND:
				case HiveSql.T_SECONDS:
				case HiveSql.T_SECURITY:
				case HiveSql.T_SEGMENT:
				case HiveSql.T_SEL:
				case HiveSql.T_SELECT:
				case HiveSql.T_SET:
				case HiveSql.T_SESSION:
				case HiveSql.T_SESSIONS:
				case HiveSql.T_SETS:
				case HiveSql.T_SHARE:
				case HiveSql.T_SIGNAL:
				case HiveSql.T_SIMPLE_DOUBLE:
				case HiveSql.T_SIMPLE_FLOAT:
				case HiveSql.T_SMALLDATETIME:
				case HiveSql.T_SMALLINT:
				case HiveSql.T_SQL:
				case HiveSql.T_SQLEXCEPTION:
				case HiveSql.T_SQLINSERT:
				case HiveSql.T_SQLSTATE:
				case HiveSql.T_SQLWARNING:
				case HiveSql.T_STATS:
				case HiveSql.T_STATISTICS:
				case HiveSql.T_STEP:
				case HiveSql.T_STORAGE:
				case HiveSql.T_STORED:
				case HiveSql.T_STRING:
				case HiveSql.T_SUBDIR:
				case HiveSql.T_SUBSTRING:
				case HiveSql.T_SUM:
				case HiveSql.T_SUMMARY:
				case HiveSql.T_SYS_REFCURSOR:
				case HiveSql.T_TABLE:
				case HiveSql.T_TABLESPACE:
				case HiveSql.T_TEMPORARY:
				case HiveSql.T_TERMINATED:
				case HiveSql.T_TEXTIMAGE_ON:
				case HiveSql.T_THEN:
				case HiveSql.T_TIMESTAMP:
				case HiveSql.T_TITLE:
				case HiveSql.T_TO:
				case HiveSql.T_TOP:
				case HiveSql.T_TRANSACTION:
				case HiveSql.T_TRUE:
				case HiveSql.T_TRUNCATE:
				case HiveSql.T_UNIQUE:
				case HiveSql.T_UPDATE:
				case HiveSql.T_UR:
				case HiveSql.T_USE:
				case HiveSql.T_USING:
				case HiveSql.T_VALUE:
				case HiveSql.T_VALUES:
				case HiveSql.T_VAR:
				case HiveSql.T_VARCHAR:
				case HiveSql.T_VARCHAR2:
				case HiveSql.T_VARYING:
				case HiveSql.T_VOLATILE:
				case HiveSql.T_WHILE:
				case HiveSql.T_WITH:
				case HiveSql.T_WITHOUT:
				case HiveSql.T_WORK:
				case HiveSql.T_XACT_ABORT:
				case HiveSql.T_XML:
				case HiveSql.T_YES:
				case HiveSql.T_ACTIVITY_COUNT:
				case HiveSql.T_CUME_DIST:
				case HiveSql.T_CURRENT_DATE:
				case HiveSql.T_CURRENT_TIMESTAMP:
				case HiveSql.T_CURRENT_USER:
				case HiveSql.T_DENSE_RANK:
				case HiveSql.T_FIRST_VALUE:
				case HiveSql.T_LAG:
				case HiveSql.T_LAST_VALUE:
				case HiveSql.T_LEAD:
				case HiveSql.T_MAX_PART_STRING:
				case HiveSql.T_MIN_PART_STRING:
				case HiveSql.T_MAX_PART_INT:
				case HiveSql.T_MIN_PART_INT:
				case HiveSql.T_MAX_PART_DATE:
				case HiveSql.T_MIN_PART_DATE:
				case HiveSql.T_PART_COUNT:
				case HiveSql.T_PART_LOC:
				case HiveSql.T_RANK:
				case HiveSql.T_ROW_NUMBER:
				case HiveSql.T_STDEV:
				case HiveSql.T_SYSDATE:
				case HiveSql.T_VARIANCE:
				case HiveSql.T_USER:
				case HiveSql.T_ADD:
				case HiveSql.T_OPEN_P:
				case HiveSql.T_SUB:
				case HiveSql.L_ID:
				case HiveSql.L_S_STRING:
				case HiveSql.L_D_STRING:
				case HiveSql.L_INT:
				case HiveSql.L_DEC:
					{
					this.state = 3021;
					this.expr(0);
					}
					break;
				case HiveSql.T_MUL:
					{
					this.state = 3022;
					this.match(HiveSql.T_MUL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3025;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3026;
				this.match(HiveSql.T_CURRENT_DATE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3027;
				this.match(HiveSql.T_CURRENT);
				this.state = 3028;
				this.match(HiveSql.T_DATE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3032;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveSql.T_CURRENT_TIMESTAMP:
					{
					this.state = 3029;
					this.match(HiveSql.T_CURRENT_TIMESTAMP);
					}
					break;
				case HiveSql.T_CURRENT:
					{
					this.state = 3030;
					this.match(HiveSql.T_CURRENT);
					this.state = 3031;
					this.match(HiveSql.T_TIMESTAMP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3038;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 386, this._ctx) ) {
				case 1:
					{
					this.state = 3034;
					this.match(HiveSql.T_OPEN_P);
					this.state = 3035;
					this.expr(0);
					this.state = 3036;
					this.match(HiveSql.T_CLOSE_P);
					}
					break;
				}
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3040;
				this.match(HiveSql.T_CURRENT_USER);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3041;
				this.match(HiveSql.T_CURRENT);
				this.state = 3042;
				this.match(HiveSql.T_USER);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3043;
				this.match(HiveSql.T_MAX_PART_STRING);
				this.state = 3044;
				this.match(HiveSql.T_OPEN_P);
				this.state = 3045;
				this.expr(0);
				this.state = 3058;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_COMMA) {
					{
					this.state = 3046;
					this.match(HiveSql.T_COMMA);
					this.state = 3047;
					this.expr(0);
					this.state = 3055;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === HiveSql.T_COMMA) {
						{
						{
						this.state = 3048;
						this.match(HiveSql.T_COMMA);
						this.state = 3049;
						this.expr(0);
						this.state = 3050;
						this.match(HiveSql.T_EQUAL);
						this.state = 3051;
						this.expr(0);
						}
						}
						this.state = 3057;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3060;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3062;
				this.match(HiveSql.T_MIN_PART_STRING);
				this.state = 3063;
				this.match(HiveSql.T_OPEN_P);
				this.state = 3064;
				this.expr(0);
				this.state = 3077;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_COMMA) {
					{
					this.state = 3065;
					this.match(HiveSql.T_COMMA);
					this.state = 3066;
					this.expr(0);
					this.state = 3074;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === HiveSql.T_COMMA) {
						{
						{
						this.state = 3067;
						this.match(HiveSql.T_COMMA);
						this.state = 3068;
						this.expr(0);
						this.state = 3069;
						this.match(HiveSql.T_EQUAL);
						this.state = 3070;
						this.expr(0);
						}
						}
						this.state = 3076;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3079;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3081;
				this.match(HiveSql.T_MAX_PART_INT);
				this.state = 3082;
				this.match(HiveSql.T_OPEN_P);
				this.state = 3083;
				this.expr(0);
				this.state = 3096;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_COMMA) {
					{
					this.state = 3084;
					this.match(HiveSql.T_COMMA);
					this.state = 3085;
					this.expr(0);
					this.state = 3093;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === HiveSql.T_COMMA) {
						{
						{
						this.state = 3086;
						this.match(HiveSql.T_COMMA);
						this.state = 3087;
						this.expr(0);
						this.state = 3088;
						this.match(HiveSql.T_EQUAL);
						this.state = 3089;
						this.expr(0);
						}
						}
						this.state = 3095;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3098;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3100;
				this.match(HiveSql.T_MIN_PART_INT);
				this.state = 3101;
				this.match(HiveSql.T_OPEN_P);
				this.state = 3102;
				this.expr(0);
				this.state = 3115;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_COMMA) {
					{
					this.state = 3103;
					this.match(HiveSql.T_COMMA);
					this.state = 3104;
					this.expr(0);
					this.state = 3112;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === HiveSql.T_COMMA) {
						{
						{
						this.state = 3105;
						this.match(HiveSql.T_COMMA);
						this.state = 3106;
						this.expr(0);
						this.state = 3107;
						this.match(HiveSql.T_EQUAL);
						this.state = 3108;
						this.expr(0);
						}
						}
						this.state = 3114;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3117;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3119;
				this.match(HiveSql.T_MAX_PART_DATE);
				this.state = 3120;
				this.match(HiveSql.T_OPEN_P);
				this.state = 3121;
				this.expr(0);
				this.state = 3134;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_COMMA) {
					{
					this.state = 3122;
					this.match(HiveSql.T_COMMA);
					this.state = 3123;
					this.expr(0);
					this.state = 3131;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === HiveSql.T_COMMA) {
						{
						{
						this.state = 3124;
						this.match(HiveSql.T_COMMA);
						this.state = 3125;
						this.expr(0);
						this.state = 3126;
						this.match(HiveSql.T_EQUAL);
						this.state = 3127;
						this.expr(0);
						}
						}
						this.state = 3133;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3136;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3138;
				this.match(HiveSql.T_MIN_PART_DATE);
				this.state = 3139;
				this.match(HiveSql.T_OPEN_P);
				this.state = 3140;
				this.expr(0);
				this.state = 3153;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_COMMA) {
					{
					this.state = 3141;
					this.match(HiveSql.T_COMMA);
					this.state = 3142;
					this.expr(0);
					this.state = 3150;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === HiveSql.T_COMMA) {
						{
						{
						this.state = 3143;
						this.match(HiveSql.T_COMMA);
						this.state = 3144;
						this.expr(0);
						this.state = 3145;
						this.match(HiveSql.T_EQUAL);
						this.state = 3146;
						this.expr(0);
						}
						}
						this.state = 3152;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 3155;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 3157;
				this.match(HiveSql.T_PART_COUNT);
				this.state = 3158;
				this.match(HiveSql.T_OPEN_P);
				this.state = 3159;
				this.expr(0);
				this.state = 3167;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === HiveSql.T_COMMA) {
					{
					{
					this.state = 3160;
					this.match(HiveSql.T_COMMA);
					this.state = 3161;
					this.expr(0);
					this.state = 3162;
					this.match(HiveSql.T_EQUAL);
					this.state = 3163;
					this.expr(0);
					}
					}
					this.state = 3169;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3170;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 3172;
				this.match(HiveSql.T_PART_LOC);
				this.state = 3173;
				this.match(HiveSql.T_OPEN_P);
				this.state = 3174;
				this.expr(0);
				this.state = 3180;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3175;
						this.match(HiveSql.T_COMMA);
						this.state = 3176;
						this.expr(0);
						this.state = 3177;
						this.match(HiveSql.T_EQUAL);
						this.state = 3178;
						this.expr(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3182;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 3186;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_COMMA) {
					{
					this.state = 3184;
					this.match(HiveSql.T_COMMA);
					this.state = 3185;
					this.expr(0);
					}
				}

				this.state = 3188;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 3190;
				this.match(HiveSql.T_TRIM);
				this.state = 3191;
				this.match(HiveSql.T_OPEN_P);
				this.state = 3192;
				this.expr(0);
				this.state = 3193;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 3195;
				this.match(HiveSql.T_SUBSTRING);
				this.state = 3196;
				this.match(HiveSql.T_OPEN_P);
				this.state = 3197;
				this.expr(0);
				this.state = 3198;
				this.match(HiveSql.T_FROM);
				this.state = 3199;
				this.expr(0);
				this.state = 3202;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_FOR) {
					{
					this.state = 3200;
					this.match(HiveSql.T_FOR);
					this.state = 3201;
					this.expr(0);
					}
				}

				this.state = 3204;
				this.match(HiveSql.T_CLOSE_P);
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 3206;
				this.match(HiveSql.T_SYSDATE);
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 3207;
				this.match(HiveSql.T_USER);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_func(): Expr_funcContext {
		let _localctx: Expr_funcContext = new Expr_funcContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, HiveSql.RULE_expr_func);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3210;
			this.ident();
			this.state = 3211;
			this.match(HiveSql.T_OPEN_P);
			this.state = 3213;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 404, this._ctx) ) {
			case 1:
				{
				this.state = 3212;
				this.expr_func_params();
				}
				break;
			}
			this.state = 3215;
			this.match(HiveSql.T_CLOSE_P);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_func_params(): Expr_func_paramsContext {
		let _localctx: Expr_func_paramsContext = new Expr_func_paramsContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, HiveSql.RULE_expr_func_params);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3217;
			this.func_param();
			this.state = 3222;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3218;
					this.match(HiveSql.T_COMMA);
					this.state = 3219;
					this.func_param();
					}
					}
				}
				this.state = 3224;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 405, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_param(): Func_paramContext {
		let _localctx: Func_paramContext = new Func_paramContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, HiveSql.RULE_func_param);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3225;
			if (!(this._input.LT(1).text.toUpperCase() !== "INTO")) {
				throw this.createFailedPredicateException("this._input.LT(1).text.toUpperCase() !== \"INTO\"");
			}
			this.state = 3231;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 407, this._ctx) ) {
			case 1:
				{
				this.state = 3226;
				this.ident();
				this.state = 3227;
				this.match(HiveSql.T_EQUAL);
				this.state = 3229;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === HiveSql.T_GREATER) {
					{
					this.state = 3228;
					this.match(HiveSql.T_GREATER);
					}
				}

				}
				break;
			}
			this.state = 3233;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_select(): Expr_selectContext {
		let _localctx: Expr_selectContext = new Expr_selectContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, HiveSql.RULE_expr_select);
		try {
			this.state = 3237;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 408, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3235;
				this.select_stmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3236;
				this.expr(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_file(): Expr_fileContext {
		let _localctx: Expr_fileContext = new Expr_fileContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, HiveSql.RULE_expr_file);
		try {
			this.state = 3241;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 409, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3239;
				this.file_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3240;
				this.expr(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hive(): HiveContext {
		let _localctx: HiveContext = new HiveContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, HiveSql.RULE_hive);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3243;
			this.match(HiveSql.T_HIVE);
			this.state = 3247;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3244;
					this.hive_item();
					}
					}
				}
				this.state = 3249;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hive_item(): Hive_itemContext {
		let _localctx: Hive_itemContext = new Hive_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, HiveSql.RULE_hive_item);
		try {
			this.state = 3262;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 411, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3250;
				this.match(HiveSql.T_SUB);
				this.state = 3251;
				this.ident();
				this.state = 3252;
				this.expr(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3254;
				this.match(HiveSql.T_SUB);
				this.state = 3255;
				this.ident();
				this.state = 3256;
				this.match(HiveSql.L_ID);
				this.state = 3257;
				this.match(HiveSql.T_EQUAL);
				this.state = 3258;
				this.expr(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3260;
				this.match(HiveSql.T_SUB);
				this.state = 3261;
				this.ident();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public host(): HostContext {
		let _localctx: HostContext = new HostContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, HiveSql.RULE_host);
		try {
			this.state = 3269;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.T_NOTE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3264;
				this.match(HiveSql.T_NOTE);
				this.state = 3265;
				this.host_cmd();
				this.state = 3266;
				this.match(HiveSql.T_SEMICOLON);
				}
				break;
			case HiveSql.T_HOST:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3268;
				this.host_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public host_cmd(): Host_cmdContext {
		let _localctx: Host_cmdContext = new Host_cmdContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, HiveSql.RULE_host_cmd);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3274;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
			while (_alt !== 1 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1 + 1) {
					{
					{
					this.state = 3271;
					this.matchWildcard();
					}
					}
				}
				this.state = 3276;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public host_stmt(): Host_stmtContext {
		let _localctx: Host_stmtContext = new Host_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, HiveSql.RULE_host_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3277;
			this.match(HiveSql.T_HOST);
			this.state = 3278;
			this.expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_name(): File_nameContext {
		let _localctx: File_nameContext = new File_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, HiveSql.RULE_file_name);
		try {
			let _alt: number;
			this.state = 3294;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.L_FILE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3280;
				this.match(HiveSql.L_FILE);
				}
				break;
			case HiveSql.T_ACTION:
			case HiveSql.T_ADD2:
			case HiveSql.T_ALL:
			case HiveSql.T_ALLOCATE:
			case HiveSql.T_ALTER:
			case HiveSql.T_AND:
			case HiveSql.T_ANSI_NULLS:
			case HiveSql.T_ANSI_PADDING:
			case HiveSql.T_AS:
			case HiveSql.T_ASC:
			case HiveSql.T_ASSOCIATE:
			case HiveSql.T_AT:
			case HiveSql.T_AUTO_INCREMENT:
			case HiveSql.T_AVG:
			case HiveSql.T_BATCHSIZE:
			case HiveSql.T_BEGIN:
			case HiveSql.T_BETWEEN:
			case HiveSql.T_BIGINT:
			case HiveSql.T_BINARY_DOUBLE:
			case HiveSql.T_BINARY_FLOAT:
			case HiveSql.T_BIT:
			case HiveSql.T_BODY:
			case HiveSql.T_BREAK:
			case HiveSql.T_BY:
			case HiveSql.T_BYTE:
			case HiveSql.T_CALL:
			case HiveSql.T_CALLER:
			case HiveSql.T_CASCADE:
			case HiveSql.T_CASE:
			case HiveSql.T_CASESPECIFIC:
			case HiveSql.T_CAST:
			case HiveSql.T_CHAR:
			case HiveSql.T_CHARACTER:
			case HiveSql.T_CHARSET:
			case HiveSql.T_CLIENT:
			case HiveSql.T_CLOSE:
			case HiveSql.T_CLUSTERED:
			case HiveSql.T_CMP:
			case HiveSql.T_COLLECT:
			case HiveSql.T_COLLECTION:
			case HiveSql.T_COLUMN:
			case HiveSql.T_COMMENT:
			case HiveSql.T_CONSTANT:
			case HiveSql.T_COMMIT:
			case HiveSql.T_COMPRESS:
			case HiveSql.T_CONCAT:
			case HiveSql.T_CONDITION:
			case HiveSql.T_CONSTRAINT:
			case HiveSql.T_CONTINUE:
			case HiveSql.T_COPY:
			case HiveSql.T_COUNT:
			case HiveSql.T_COUNT_BIG:
			case HiveSql.T_CREATE:
			case HiveSql.T_CREATION:
			case HiveSql.T_CREATOR:
			case HiveSql.T_CS:
			case HiveSql.T_CURRENT:
			case HiveSql.T_CURRENT_SCHEMA:
			case HiveSql.T_CURSOR:
			case HiveSql.T_DATABASE:
			case HiveSql.T_DATA:
			case HiveSql.T_DATE:
			case HiveSql.T_DATETIME:
			case HiveSql.T_DAY:
			case HiveSql.T_DAYS:
			case HiveSql.T_DEC:
			case HiveSql.T_DECIMAL:
			case HiveSql.T_DECLARE:
			case HiveSql.T_DEFAULT:
			case HiveSql.T_DEFERRED:
			case HiveSql.T_DEFINED:
			case HiveSql.T_DEFINER:
			case HiveSql.T_DEFINITION:
			case HiveSql.T_DELETE:
			case HiveSql.T_DELIMITED:
			case HiveSql.T_DELIMITER:
			case HiveSql.T_DESC:
			case HiveSql.T_DESCRIBE:
			case HiveSql.T_DIAGNOSTICS:
			case HiveSql.T_DIR:
			case HiveSql.T_DIRECTORY:
			case HiveSql.T_DISTINCT:
			case HiveSql.T_DISTRIBUTE:
			case HiveSql.T_DO:
			case HiveSql.T_DOUBLE:
			case HiveSql.T_DROP:
			case HiveSql.T_DYNAMIC:
			case HiveSql.T_ENABLE:
			case HiveSql.T_ENGINE:
			case HiveSql.T_ESCAPED:
			case HiveSql.T_EXCEPT:
			case HiveSql.T_EXEC:
			case HiveSql.T_EXECUTE:
			case HiveSql.T_EXCEPTION:
			case HiveSql.T_EXCLUSIVE:
			case HiveSql.T_EXISTS:
			case HiveSql.T_EXIT:
			case HiveSql.T_FALLBACK:
			case HiveSql.T_FALSE:
			case HiveSql.T_FETCH:
			case HiveSql.T_FIELDS:
			case HiveSql.T_FILE:
			case HiveSql.T_FILES:
			case HiveSql.T_FLOAT:
			case HiveSql.T_FOR:
			case HiveSql.T_FOREIGN:
			case HiveSql.T_FORMAT:
			case HiveSql.T_FOUND:
			case HiveSql.T_FROM:
			case HiveSql.T_FULL:
			case HiveSql.T_FUNCTION:
			case HiveSql.T_GET:
			case HiveSql.T_GLOBAL:
			case HiveSql.T_GO:
			case HiveSql.T_GRANT:
			case HiveSql.T_GROUP:
			case HiveSql.T_HANDLER:
			case HiveSql.T_HASH:
			case HiveSql.T_HAVING:
			case HiveSql.T_HDFS:
			case HiveSql.T_HIVE:
			case HiveSql.T_HOST:
			case HiveSql.T_IDENTITY:
			case HiveSql.T_IF:
			case HiveSql.T_IGNORE:
			case HiveSql.T_IMMEDIATE:
			case HiveSql.T_IN:
			case HiveSql.T_INCLUDE:
			case HiveSql.T_INDEX:
			case HiveSql.T_INITRANS:
			case HiveSql.T_INNER:
			case HiveSql.T_INOUT:
			case HiveSql.T_INSERT:
			case HiveSql.T_INT:
			case HiveSql.T_INT2:
			case HiveSql.T_INT4:
			case HiveSql.T_INT8:
			case HiveSql.T_INTEGER:
			case HiveSql.T_INTERSECT:
			case HiveSql.T_INTERVAL:
			case HiveSql.T_INTO:
			case HiveSql.T_INVOKER:
			case HiveSql.T_IS:
			case HiveSql.T_ISOPEN:
			case HiveSql.T_ITEMS:
			case HiveSql.T_JOIN:
			case HiveSql.T_KEEP:
			case HiveSql.T_KEY:
			case HiveSql.T_KEYS:
			case HiveSql.T_LANGUAGE:
			case HiveSql.T_LEAVE:
			case HiveSql.T_LEFT:
			case HiveSql.T_LIKE:
			case HiveSql.T_LIMIT:
			case HiveSql.T_LINES:
			case HiveSql.T_LOCAL:
			case HiveSql.T_LOCATION:
			case HiveSql.T_LOCATOR:
			case HiveSql.T_LOCATORS:
			case HiveSql.T_LOCKS:
			case HiveSql.T_LOG:
			case HiveSql.T_LOGGED:
			case HiveSql.T_LOGGING:
			case HiveSql.T_LOOP:
			case HiveSql.T_MAP:
			case HiveSql.T_MATCHED:
			case HiveSql.T_MAX:
			case HiveSql.T_MAXTRANS:
			case HiveSql.T_MERGE:
			case HiveSql.T_MESSAGE_TEXT:
			case HiveSql.T_MICROSECOND:
			case HiveSql.T_MICROSECONDS:
			case HiveSql.T_MIN:
			case HiveSql.T_MULTISET:
			case HiveSql.T_NCHAR:
			case HiveSql.T_NEW:
			case HiveSql.T_NVARCHAR:
			case HiveSql.T_NO:
			case HiveSql.T_NOCOUNT:
			case HiveSql.T_NOCOMPRESS:
			case HiveSql.T_NOLOGGING:
			case HiveSql.T_NONE:
			case HiveSql.T_NOT:
			case HiveSql.T_NOTFOUND:
			case HiveSql.T_NUMERIC:
			case HiveSql.T_NUMBER:
			case HiveSql.T_OBJECT:
			case HiveSql.T_OFF:
			case HiveSql.T_ON:
			case HiveSql.T_ONLY:
			case HiveSql.T_OPEN:
			case HiveSql.T_OR:
			case HiveSql.T_ORDER:
			case HiveSql.T_OUT:
			case HiveSql.T_OUTER:
			case HiveSql.T_OVER:
			case HiveSql.T_OVERWRITE:
			case HiveSql.T_OWNER:
			case HiveSql.T_PACKAGE:
			case HiveSql.T_PARTITION:
			case HiveSql.T_PCTFREE:
			case HiveSql.T_PCTUSED:
			case HiveSql.T_PRECISION:
			case HiveSql.T_PRESERVE:
			case HiveSql.T_PRIMARY:
			case HiveSql.T_PRINT:
			case HiveSql.T_PROC:
			case HiveSql.T_PROCEDURE:
			case HiveSql.T_QUALIFY:
			case HiveSql.T_QUERY_BAND:
			case HiveSql.T_QUIT:
			case HiveSql.T_QUOTED_IDENTIFIER:
			case HiveSql.T_RAISE:
			case HiveSql.T_REAL:
			case HiveSql.T_REFERENCES:
			case HiveSql.T_REGEXP:
			case HiveSql.T_REPLACE:
			case HiveSql.T_RESIGNAL:
			case HiveSql.T_RESTRICT:
			case HiveSql.T_RESULT:
			case HiveSql.T_RESULT_SET_LOCATOR:
			case HiveSql.T_RETURN:
			case HiveSql.T_RETURNS:
			case HiveSql.T_REVERSE:
			case HiveSql.T_RIGHT:
			case HiveSql.T_RLIKE:
			case HiveSql.T_ROLE:
			case HiveSql.T_ROLLBACK:
			case HiveSql.T_ROW:
			case HiveSql.T_ROWS:
			case HiveSql.T_ROW_COUNT:
			case HiveSql.T_RR:
			case HiveSql.T_RS:
			case HiveSql.T_PWD:
			case HiveSql.T_TRIM:
			case HiveSql.T_SCHEMA:
			case HiveSql.T_SECOND:
			case HiveSql.T_SECONDS:
			case HiveSql.T_SECURITY:
			case HiveSql.T_SEGMENT:
			case HiveSql.T_SEL:
			case HiveSql.T_SELECT:
			case HiveSql.T_SET:
			case HiveSql.T_SESSION:
			case HiveSql.T_SESSIONS:
			case HiveSql.T_SETS:
			case HiveSql.T_SHARE:
			case HiveSql.T_SIGNAL:
			case HiveSql.T_SIMPLE_DOUBLE:
			case HiveSql.T_SIMPLE_FLOAT:
			case HiveSql.T_SMALLDATETIME:
			case HiveSql.T_SMALLINT:
			case HiveSql.T_SQL:
			case HiveSql.T_SQLEXCEPTION:
			case HiveSql.T_SQLINSERT:
			case HiveSql.T_SQLSTATE:
			case HiveSql.T_SQLWARNING:
			case HiveSql.T_STATS:
			case HiveSql.T_STATISTICS:
			case HiveSql.T_STEP:
			case HiveSql.T_STORAGE:
			case HiveSql.T_STORED:
			case HiveSql.T_STRING:
			case HiveSql.T_SUBDIR:
			case HiveSql.T_SUBSTRING:
			case HiveSql.T_SUM:
			case HiveSql.T_SUMMARY:
			case HiveSql.T_SYS_REFCURSOR:
			case HiveSql.T_TABLE:
			case HiveSql.T_TABLESPACE:
			case HiveSql.T_TEMPORARY:
			case HiveSql.T_TERMINATED:
			case HiveSql.T_TEXTIMAGE_ON:
			case HiveSql.T_THEN:
			case HiveSql.T_TIMESTAMP:
			case HiveSql.T_TITLE:
			case HiveSql.T_TO:
			case HiveSql.T_TOP:
			case HiveSql.T_TRANSACTION:
			case HiveSql.T_TRUE:
			case HiveSql.T_TRUNCATE:
			case HiveSql.T_UNIQUE:
			case HiveSql.T_UPDATE:
			case HiveSql.T_UR:
			case HiveSql.T_USE:
			case HiveSql.T_USING:
			case HiveSql.T_VALUE:
			case HiveSql.T_VALUES:
			case HiveSql.T_VAR:
			case HiveSql.T_VARCHAR:
			case HiveSql.T_VARCHAR2:
			case HiveSql.T_VARYING:
			case HiveSql.T_VOLATILE:
			case HiveSql.T_WHILE:
			case HiveSql.T_WITH:
			case HiveSql.T_WITHOUT:
			case HiveSql.T_WORK:
			case HiveSql.T_XACT_ABORT:
			case HiveSql.T_XML:
			case HiveSql.T_YES:
			case HiveSql.T_ACTIVITY_COUNT:
			case HiveSql.T_CUME_DIST:
			case HiveSql.T_CURRENT_DATE:
			case HiveSql.T_CURRENT_TIMESTAMP:
			case HiveSql.T_CURRENT_USER:
			case HiveSql.T_DENSE_RANK:
			case HiveSql.T_FIRST_VALUE:
			case HiveSql.T_LAG:
			case HiveSql.T_LAST_VALUE:
			case HiveSql.T_LEAD:
			case HiveSql.T_PART_COUNT:
			case HiveSql.T_PART_LOC:
			case HiveSql.T_RANK:
			case HiveSql.T_ROW_NUMBER:
			case HiveSql.T_STDEV:
			case HiveSql.T_SYSDATE:
			case HiveSql.T_VARIANCE:
			case HiveSql.T_USER:
			case HiveSql.T_DIV:
			case HiveSql.T_DOT:
			case HiveSql.L_ID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3284;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case HiveSql.T_DIV:
					{
					this.state = 3281;
					this.match(HiveSql.T_DIV);
					}
					break;
				case HiveSql.T_DOT:
					{
					this.state = 3282;
					this.match(HiveSql.T_DOT);
					this.state = 3283;
					this.match(HiveSql.T_DIV);
					}
					break;
				case HiveSql.T_ACTION:
				case HiveSql.T_ADD2:
				case HiveSql.T_ALL:
				case HiveSql.T_ALLOCATE:
				case HiveSql.T_ALTER:
				case HiveSql.T_AND:
				case HiveSql.T_ANSI_NULLS:
				case HiveSql.T_ANSI_PADDING:
				case HiveSql.T_AS:
				case HiveSql.T_ASC:
				case HiveSql.T_ASSOCIATE:
				case HiveSql.T_AT:
				case HiveSql.T_AUTO_INCREMENT:
				case HiveSql.T_AVG:
				case HiveSql.T_BATCHSIZE:
				case HiveSql.T_BEGIN:
				case HiveSql.T_BETWEEN:
				case HiveSql.T_BIGINT:
				case HiveSql.T_BINARY_DOUBLE:
				case HiveSql.T_BINARY_FLOAT:
				case HiveSql.T_BIT:
				case HiveSql.T_BODY:
				case HiveSql.T_BREAK:
				case HiveSql.T_BY:
				case HiveSql.T_BYTE:
				case HiveSql.T_CALL:
				case HiveSql.T_CALLER:
				case HiveSql.T_CASCADE:
				case HiveSql.T_CASE:
				case HiveSql.T_CASESPECIFIC:
				case HiveSql.T_CAST:
				case HiveSql.T_CHAR:
				case HiveSql.T_CHARACTER:
				case HiveSql.T_CHARSET:
				case HiveSql.T_CLIENT:
				case HiveSql.T_CLOSE:
				case HiveSql.T_CLUSTERED:
				case HiveSql.T_CMP:
				case HiveSql.T_COLLECT:
				case HiveSql.T_COLLECTION:
				case HiveSql.T_COLUMN:
				case HiveSql.T_COMMENT:
				case HiveSql.T_CONSTANT:
				case HiveSql.T_COMMIT:
				case HiveSql.T_COMPRESS:
				case HiveSql.T_CONCAT:
				case HiveSql.T_CONDITION:
				case HiveSql.T_CONSTRAINT:
				case HiveSql.T_CONTINUE:
				case HiveSql.T_COPY:
				case HiveSql.T_COUNT:
				case HiveSql.T_COUNT_BIG:
				case HiveSql.T_CREATE:
				case HiveSql.T_CREATION:
				case HiveSql.T_CREATOR:
				case HiveSql.T_CS:
				case HiveSql.T_CURRENT:
				case HiveSql.T_CURRENT_SCHEMA:
				case HiveSql.T_CURSOR:
				case HiveSql.T_DATABASE:
				case HiveSql.T_DATA:
				case HiveSql.T_DATE:
				case HiveSql.T_DATETIME:
				case HiveSql.T_DAY:
				case HiveSql.T_DAYS:
				case HiveSql.T_DEC:
				case HiveSql.T_DECIMAL:
				case HiveSql.T_DECLARE:
				case HiveSql.T_DEFAULT:
				case HiveSql.T_DEFERRED:
				case HiveSql.T_DEFINED:
				case HiveSql.T_DEFINER:
				case HiveSql.T_DEFINITION:
				case HiveSql.T_DELETE:
				case HiveSql.T_DELIMITED:
				case HiveSql.T_DELIMITER:
				case HiveSql.T_DESC:
				case HiveSql.T_DESCRIBE:
				case HiveSql.T_DIAGNOSTICS:
				case HiveSql.T_DIR:
				case HiveSql.T_DIRECTORY:
				case HiveSql.T_DISTINCT:
				case HiveSql.T_DISTRIBUTE:
				case HiveSql.T_DO:
				case HiveSql.T_DOUBLE:
				case HiveSql.T_DROP:
				case HiveSql.T_DYNAMIC:
				case HiveSql.T_ENABLE:
				case HiveSql.T_ENGINE:
				case HiveSql.T_ESCAPED:
				case HiveSql.T_EXCEPT:
				case HiveSql.T_EXEC:
				case HiveSql.T_EXECUTE:
				case HiveSql.T_EXCEPTION:
				case HiveSql.T_EXCLUSIVE:
				case HiveSql.T_EXISTS:
				case HiveSql.T_EXIT:
				case HiveSql.T_FALLBACK:
				case HiveSql.T_FALSE:
				case HiveSql.T_FETCH:
				case HiveSql.T_FIELDS:
				case HiveSql.T_FILE:
				case HiveSql.T_FILES:
				case HiveSql.T_FLOAT:
				case HiveSql.T_FOR:
				case HiveSql.T_FOREIGN:
				case HiveSql.T_FORMAT:
				case HiveSql.T_FOUND:
				case HiveSql.T_FROM:
				case HiveSql.T_FULL:
				case HiveSql.T_FUNCTION:
				case HiveSql.T_GET:
				case HiveSql.T_GLOBAL:
				case HiveSql.T_GO:
				case HiveSql.T_GRANT:
				case HiveSql.T_GROUP:
				case HiveSql.T_HANDLER:
				case HiveSql.T_HASH:
				case HiveSql.T_HAVING:
				case HiveSql.T_HDFS:
				case HiveSql.T_HIVE:
				case HiveSql.T_HOST:
				case HiveSql.T_IDENTITY:
				case HiveSql.T_IF:
				case HiveSql.T_IGNORE:
				case HiveSql.T_IMMEDIATE:
				case HiveSql.T_IN:
				case HiveSql.T_INCLUDE:
				case HiveSql.T_INDEX:
				case HiveSql.T_INITRANS:
				case HiveSql.T_INNER:
				case HiveSql.T_INOUT:
				case HiveSql.T_INSERT:
				case HiveSql.T_INT:
				case HiveSql.T_INT2:
				case HiveSql.T_INT4:
				case HiveSql.T_INT8:
				case HiveSql.T_INTEGER:
				case HiveSql.T_INTERSECT:
				case HiveSql.T_INTERVAL:
				case HiveSql.T_INTO:
				case HiveSql.T_INVOKER:
				case HiveSql.T_IS:
				case HiveSql.T_ISOPEN:
				case HiveSql.T_ITEMS:
				case HiveSql.T_JOIN:
				case HiveSql.T_KEEP:
				case HiveSql.T_KEY:
				case HiveSql.T_KEYS:
				case HiveSql.T_LANGUAGE:
				case HiveSql.T_LEAVE:
				case HiveSql.T_LEFT:
				case HiveSql.T_LIKE:
				case HiveSql.T_LIMIT:
				case HiveSql.T_LINES:
				case HiveSql.T_LOCAL:
				case HiveSql.T_LOCATION:
				case HiveSql.T_LOCATOR:
				case HiveSql.T_LOCATORS:
				case HiveSql.T_LOCKS:
				case HiveSql.T_LOG:
				case HiveSql.T_LOGGED:
				case HiveSql.T_LOGGING:
				case HiveSql.T_LOOP:
				case HiveSql.T_MAP:
				case HiveSql.T_MATCHED:
				case HiveSql.T_MAX:
				case HiveSql.T_MAXTRANS:
				case HiveSql.T_MERGE:
				case HiveSql.T_MESSAGE_TEXT:
				case HiveSql.T_MICROSECOND:
				case HiveSql.T_MICROSECONDS:
				case HiveSql.T_MIN:
				case HiveSql.T_MULTISET:
				case HiveSql.T_NCHAR:
				case HiveSql.T_NEW:
				case HiveSql.T_NVARCHAR:
				case HiveSql.T_NO:
				case HiveSql.T_NOCOUNT:
				case HiveSql.T_NOCOMPRESS:
				case HiveSql.T_NOLOGGING:
				case HiveSql.T_NONE:
				case HiveSql.T_NOT:
				case HiveSql.T_NOTFOUND:
				case HiveSql.T_NUMERIC:
				case HiveSql.T_NUMBER:
				case HiveSql.T_OBJECT:
				case HiveSql.T_OFF:
				case HiveSql.T_ON:
				case HiveSql.T_ONLY:
				case HiveSql.T_OPEN:
				case HiveSql.T_OR:
				case HiveSql.T_ORDER:
				case HiveSql.T_OUT:
				case HiveSql.T_OUTER:
				case HiveSql.T_OVER:
				case HiveSql.T_OVERWRITE:
				case HiveSql.T_OWNER:
				case HiveSql.T_PACKAGE:
				case HiveSql.T_PARTITION:
				case HiveSql.T_PCTFREE:
				case HiveSql.T_PCTUSED:
				case HiveSql.T_PRECISION:
				case HiveSql.T_PRESERVE:
				case HiveSql.T_PRIMARY:
				case HiveSql.T_PRINT:
				case HiveSql.T_PROC:
				case HiveSql.T_PROCEDURE:
				case HiveSql.T_QUALIFY:
				case HiveSql.T_QUERY_BAND:
				case HiveSql.T_QUIT:
				case HiveSql.T_QUOTED_IDENTIFIER:
				case HiveSql.T_RAISE:
				case HiveSql.T_REAL:
				case HiveSql.T_REFERENCES:
				case HiveSql.T_REGEXP:
				case HiveSql.T_REPLACE:
				case HiveSql.T_RESIGNAL:
				case HiveSql.T_RESTRICT:
				case HiveSql.T_RESULT:
				case HiveSql.T_RESULT_SET_LOCATOR:
				case HiveSql.T_RETURN:
				case HiveSql.T_RETURNS:
				case HiveSql.T_REVERSE:
				case HiveSql.T_RIGHT:
				case HiveSql.T_RLIKE:
				case HiveSql.T_ROLE:
				case HiveSql.T_ROLLBACK:
				case HiveSql.T_ROW:
				case HiveSql.T_ROWS:
				case HiveSql.T_ROW_COUNT:
				case HiveSql.T_RR:
				case HiveSql.T_RS:
				case HiveSql.T_PWD:
				case HiveSql.T_TRIM:
				case HiveSql.T_SCHEMA:
				case HiveSql.T_SECOND:
				case HiveSql.T_SECONDS:
				case HiveSql.T_SECURITY:
				case HiveSql.T_SEGMENT:
				case HiveSql.T_SEL:
				case HiveSql.T_SELECT:
				case HiveSql.T_SET:
				case HiveSql.T_SESSION:
				case HiveSql.T_SESSIONS:
				case HiveSql.T_SETS:
				case HiveSql.T_SHARE:
				case HiveSql.T_SIGNAL:
				case HiveSql.T_SIMPLE_DOUBLE:
				case HiveSql.T_SIMPLE_FLOAT:
				case HiveSql.T_SMALLDATETIME:
				case HiveSql.T_SMALLINT:
				case HiveSql.T_SQL:
				case HiveSql.T_SQLEXCEPTION:
				case HiveSql.T_SQLINSERT:
				case HiveSql.T_SQLSTATE:
				case HiveSql.T_SQLWARNING:
				case HiveSql.T_STATS:
				case HiveSql.T_STATISTICS:
				case HiveSql.T_STEP:
				case HiveSql.T_STORAGE:
				case HiveSql.T_STORED:
				case HiveSql.T_STRING:
				case HiveSql.T_SUBDIR:
				case HiveSql.T_SUBSTRING:
				case HiveSql.T_SUM:
				case HiveSql.T_SUMMARY:
				case HiveSql.T_SYS_REFCURSOR:
				case HiveSql.T_TABLE:
				case HiveSql.T_TABLESPACE:
				case HiveSql.T_TEMPORARY:
				case HiveSql.T_TERMINATED:
				case HiveSql.T_TEXTIMAGE_ON:
				case HiveSql.T_THEN:
				case HiveSql.T_TIMESTAMP:
				case HiveSql.T_TITLE:
				case HiveSql.T_TO:
				case HiveSql.T_TOP:
				case HiveSql.T_TRANSACTION:
				case HiveSql.T_TRUE:
				case HiveSql.T_TRUNCATE:
				case HiveSql.T_UNIQUE:
				case HiveSql.T_UPDATE:
				case HiveSql.T_UR:
				case HiveSql.T_USE:
				case HiveSql.T_USING:
				case HiveSql.T_VALUE:
				case HiveSql.T_VALUES:
				case HiveSql.T_VAR:
				case HiveSql.T_VARCHAR:
				case HiveSql.T_VARCHAR2:
				case HiveSql.T_VARYING:
				case HiveSql.T_VOLATILE:
				case HiveSql.T_WHILE:
				case HiveSql.T_WITH:
				case HiveSql.T_WITHOUT:
				case HiveSql.T_WORK:
				case HiveSql.T_XACT_ABORT:
				case HiveSql.T_XML:
				case HiveSql.T_YES:
				case HiveSql.T_ACTIVITY_COUNT:
				case HiveSql.T_CUME_DIST:
				case HiveSql.T_CURRENT_DATE:
				case HiveSql.T_CURRENT_TIMESTAMP:
				case HiveSql.T_CURRENT_USER:
				case HiveSql.T_DENSE_RANK:
				case HiveSql.T_FIRST_VALUE:
				case HiveSql.T_LAG:
				case HiveSql.T_LAST_VALUE:
				case HiveSql.T_LEAD:
				case HiveSql.T_PART_COUNT:
				case HiveSql.T_PART_LOC:
				case HiveSql.T_RANK:
				case HiveSql.T_ROW_NUMBER:
				case HiveSql.T_STDEV:
				case HiveSql.T_SYSDATE:
				case HiveSql.T_VARIANCE:
				case HiveSql.T_USER:
				case HiveSql.L_ID:
					break;
				default:
					break;
				}
				this.state = 3286;
				this.ident();
				this.state = 3291;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3287;
						this.match(HiveSql.T_DIV);
						this.state = 3288;
						this.ident();
						}
						}
					}
					this.state = 3293;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 415, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public date_literal(): Date_literalContext {
		let _localctx: Date_literalContext = new Date_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, HiveSql.RULE_date_literal);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3296;
			this.match(HiveSql.T_DATE);
			this.state = 3297;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public timestamp_literal(): Timestamp_literalContext {
		let _localctx: Timestamp_literalContext = new Timestamp_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, HiveSql.RULE_timestamp_literal);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3299;
			this.match(HiveSql.T_TIMESTAMP);
			this.state = 3300;
			this.string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ident(): IdentContext {
		let _localctx: IdentContext = new IdentContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, HiveSql.RULE_ident);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3304;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.L_ID:
				{
				this.state = 3302;
				this.match(HiveSql.L_ID);
				}
				break;
			case HiveSql.T_ACTION:
			case HiveSql.T_ADD2:
			case HiveSql.T_ALL:
			case HiveSql.T_ALLOCATE:
			case HiveSql.T_ALTER:
			case HiveSql.T_AND:
			case HiveSql.T_ANSI_NULLS:
			case HiveSql.T_ANSI_PADDING:
			case HiveSql.T_AS:
			case HiveSql.T_ASC:
			case HiveSql.T_ASSOCIATE:
			case HiveSql.T_AT:
			case HiveSql.T_AUTO_INCREMENT:
			case HiveSql.T_AVG:
			case HiveSql.T_BATCHSIZE:
			case HiveSql.T_BEGIN:
			case HiveSql.T_BETWEEN:
			case HiveSql.T_BIGINT:
			case HiveSql.T_BINARY_DOUBLE:
			case HiveSql.T_BINARY_FLOAT:
			case HiveSql.T_BIT:
			case HiveSql.T_BODY:
			case HiveSql.T_BREAK:
			case HiveSql.T_BY:
			case HiveSql.T_BYTE:
			case HiveSql.T_CALL:
			case HiveSql.T_CALLER:
			case HiveSql.T_CASCADE:
			case HiveSql.T_CASE:
			case HiveSql.T_CASESPECIFIC:
			case HiveSql.T_CAST:
			case HiveSql.T_CHAR:
			case HiveSql.T_CHARACTER:
			case HiveSql.T_CHARSET:
			case HiveSql.T_CLIENT:
			case HiveSql.T_CLOSE:
			case HiveSql.T_CLUSTERED:
			case HiveSql.T_CMP:
			case HiveSql.T_COLLECT:
			case HiveSql.T_COLLECTION:
			case HiveSql.T_COLUMN:
			case HiveSql.T_COMMENT:
			case HiveSql.T_CONSTANT:
			case HiveSql.T_COMMIT:
			case HiveSql.T_COMPRESS:
			case HiveSql.T_CONCAT:
			case HiveSql.T_CONDITION:
			case HiveSql.T_CONSTRAINT:
			case HiveSql.T_CONTINUE:
			case HiveSql.T_COPY:
			case HiveSql.T_COUNT:
			case HiveSql.T_COUNT_BIG:
			case HiveSql.T_CREATE:
			case HiveSql.T_CREATION:
			case HiveSql.T_CREATOR:
			case HiveSql.T_CS:
			case HiveSql.T_CURRENT:
			case HiveSql.T_CURRENT_SCHEMA:
			case HiveSql.T_CURSOR:
			case HiveSql.T_DATABASE:
			case HiveSql.T_DATA:
			case HiveSql.T_DATE:
			case HiveSql.T_DATETIME:
			case HiveSql.T_DAY:
			case HiveSql.T_DAYS:
			case HiveSql.T_DEC:
			case HiveSql.T_DECIMAL:
			case HiveSql.T_DECLARE:
			case HiveSql.T_DEFAULT:
			case HiveSql.T_DEFERRED:
			case HiveSql.T_DEFINED:
			case HiveSql.T_DEFINER:
			case HiveSql.T_DEFINITION:
			case HiveSql.T_DELETE:
			case HiveSql.T_DELIMITED:
			case HiveSql.T_DELIMITER:
			case HiveSql.T_DESC:
			case HiveSql.T_DESCRIBE:
			case HiveSql.T_DIAGNOSTICS:
			case HiveSql.T_DIR:
			case HiveSql.T_DIRECTORY:
			case HiveSql.T_DISTINCT:
			case HiveSql.T_DISTRIBUTE:
			case HiveSql.T_DO:
			case HiveSql.T_DOUBLE:
			case HiveSql.T_DROP:
			case HiveSql.T_DYNAMIC:
			case HiveSql.T_ENABLE:
			case HiveSql.T_ENGINE:
			case HiveSql.T_ESCAPED:
			case HiveSql.T_EXCEPT:
			case HiveSql.T_EXEC:
			case HiveSql.T_EXECUTE:
			case HiveSql.T_EXCEPTION:
			case HiveSql.T_EXCLUSIVE:
			case HiveSql.T_EXISTS:
			case HiveSql.T_EXIT:
			case HiveSql.T_FALLBACK:
			case HiveSql.T_FALSE:
			case HiveSql.T_FETCH:
			case HiveSql.T_FIELDS:
			case HiveSql.T_FILE:
			case HiveSql.T_FILES:
			case HiveSql.T_FLOAT:
			case HiveSql.T_FOR:
			case HiveSql.T_FOREIGN:
			case HiveSql.T_FORMAT:
			case HiveSql.T_FOUND:
			case HiveSql.T_FROM:
			case HiveSql.T_FULL:
			case HiveSql.T_FUNCTION:
			case HiveSql.T_GET:
			case HiveSql.T_GLOBAL:
			case HiveSql.T_GO:
			case HiveSql.T_GRANT:
			case HiveSql.T_GROUP:
			case HiveSql.T_HANDLER:
			case HiveSql.T_HASH:
			case HiveSql.T_HAVING:
			case HiveSql.T_HDFS:
			case HiveSql.T_HIVE:
			case HiveSql.T_HOST:
			case HiveSql.T_IDENTITY:
			case HiveSql.T_IF:
			case HiveSql.T_IGNORE:
			case HiveSql.T_IMMEDIATE:
			case HiveSql.T_IN:
			case HiveSql.T_INCLUDE:
			case HiveSql.T_INDEX:
			case HiveSql.T_INITRANS:
			case HiveSql.T_INNER:
			case HiveSql.T_INOUT:
			case HiveSql.T_INSERT:
			case HiveSql.T_INT:
			case HiveSql.T_INT2:
			case HiveSql.T_INT4:
			case HiveSql.T_INT8:
			case HiveSql.T_INTEGER:
			case HiveSql.T_INTERSECT:
			case HiveSql.T_INTERVAL:
			case HiveSql.T_INTO:
			case HiveSql.T_INVOKER:
			case HiveSql.T_IS:
			case HiveSql.T_ISOPEN:
			case HiveSql.T_ITEMS:
			case HiveSql.T_JOIN:
			case HiveSql.T_KEEP:
			case HiveSql.T_KEY:
			case HiveSql.T_KEYS:
			case HiveSql.T_LANGUAGE:
			case HiveSql.T_LEAVE:
			case HiveSql.T_LEFT:
			case HiveSql.T_LIKE:
			case HiveSql.T_LIMIT:
			case HiveSql.T_LINES:
			case HiveSql.T_LOCAL:
			case HiveSql.T_LOCATION:
			case HiveSql.T_LOCATOR:
			case HiveSql.T_LOCATORS:
			case HiveSql.T_LOCKS:
			case HiveSql.T_LOG:
			case HiveSql.T_LOGGED:
			case HiveSql.T_LOGGING:
			case HiveSql.T_LOOP:
			case HiveSql.T_MAP:
			case HiveSql.T_MATCHED:
			case HiveSql.T_MAX:
			case HiveSql.T_MAXTRANS:
			case HiveSql.T_MERGE:
			case HiveSql.T_MESSAGE_TEXT:
			case HiveSql.T_MICROSECOND:
			case HiveSql.T_MICROSECONDS:
			case HiveSql.T_MIN:
			case HiveSql.T_MULTISET:
			case HiveSql.T_NCHAR:
			case HiveSql.T_NEW:
			case HiveSql.T_NVARCHAR:
			case HiveSql.T_NO:
			case HiveSql.T_NOCOUNT:
			case HiveSql.T_NOCOMPRESS:
			case HiveSql.T_NOLOGGING:
			case HiveSql.T_NONE:
			case HiveSql.T_NOT:
			case HiveSql.T_NOTFOUND:
			case HiveSql.T_NUMERIC:
			case HiveSql.T_NUMBER:
			case HiveSql.T_OBJECT:
			case HiveSql.T_OFF:
			case HiveSql.T_ON:
			case HiveSql.T_ONLY:
			case HiveSql.T_OPEN:
			case HiveSql.T_OR:
			case HiveSql.T_ORDER:
			case HiveSql.T_OUT:
			case HiveSql.T_OUTER:
			case HiveSql.T_OVER:
			case HiveSql.T_OVERWRITE:
			case HiveSql.T_OWNER:
			case HiveSql.T_PACKAGE:
			case HiveSql.T_PARTITION:
			case HiveSql.T_PCTFREE:
			case HiveSql.T_PCTUSED:
			case HiveSql.T_PRECISION:
			case HiveSql.T_PRESERVE:
			case HiveSql.T_PRIMARY:
			case HiveSql.T_PRINT:
			case HiveSql.T_PROC:
			case HiveSql.T_PROCEDURE:
			case HiveSql.T_QUALIFY:
			case HiveSql.T_QUERY_BAND:
			case HiveSql.T_QUIT:
			case HiveSql.T_QUOTED_IDENTIFIER:
			case HiveSql.T_RAISE:
			case HiveSql.T_REAL:
			case HiveSql.T_REFERENCES:
			case HiveSql.T_REGEXP:
			case HiveSql.T_REPLACE:
			case HiveSql.T_RESIGNAL:
			case HiveSql.T_RESTRICT:
			case HiveSql.T_RESULT:
			case HiveSql.T_RESULT_SET_LOCATOR:
			case HiveSql.T_RETURN:
			case HiveSql.T_RETURNS:
			case HiveSql.T_REVERSE:
			case HiveSql.T_RIGHT:
			case HiveSql.T_RLIKE:
			case HiveSql.T_ROLE:
			case HiveSql.T_ROLLBACK:
			case HiveSql.T_ROW:
			case HiveSql.T_ROWS:
			case HiveSql.T_ROW_COUNT:
			case HiveSql.T_RR:
			case HiveSql.T_RS:
			case HiveSql.T_PWD:
			case HiveSql.T_TRIM:
			case HiveSql.T_SCHEMA:
			case HiveSql.T_SECOND:
			case HiveSql.T_SECONDS:
			case HiveSql.T_SECURITY:
			case HiveSql.T_SEGMENT:
			case HiveSql.T_SEL:
			case HiveSql.T_SELECT:
			case HiveSql.T_SET:
			case HiveSql.T_SESSION:
			case HiveSql.T_SESSIONS:
			case HiveSql.T_SETS:
			case HiveSql.T_SHARE:
			case HiveSql.T_SIGNAL:
			case HiveSql.T_SIMPLE_DOUBLE:
			case HiveSql.T_SIMPLE_FLOAT:
			case HiveSql.T_SMALLDATETIME:
			case HiveSql.T_SMALLINT:
			case HiveSql.T_SQL:
			case HiveSql.T_SQLEXCEPTION:
			case HiveSql.T_SQLINSERT:
			case HiveSql.T_SQLSTATE:
			case HiveSql.T_SQLWARNING:
			case HiveSql.T_STATS:
			case HiveSql.T_STATISTICS:
			case HiveSql.T_STEP:
			case HiveSql.T_STORAGE:
			case HiveSql.T_STORED:
			case HiveSql.T_STRING:
			case HiveSql.T_SUBDIR:
			case HiveSql.T_SUBSTRING:
			case HiveSql.T_SUM:
			case HiveSql.T_SUMMARY:
			case HiveSql.T_SYS_REFCURSOR:
			case HiveSql.T_TABLE:
			case HiveSql.T_TABLESPACE:
			case HiveSql.T_TEMPORARY:
			case HiveSql.T_TERMINATED:
			case HiveSql.T_TEXTIMAGE_ON:
			case HiveSql.T_THEN:
			case HiveSql.T_TIMESTAMP:
			case HiveSql.T_TITLE:
			case HiveSql.T_TO:
			case HiveSql.T_TOP:
			case HiveSql.T_TRANSACTION:
			case HiveSql.T_TRUE:
			case HiveSql.T_TRUNCATE:
			case HiveSql.T_UNIQUE:
			case HiveSql.T_UPDATE:
			case HiveSql.T_UR:
			case HiveSql.T_USE:
			case HiveSql.T_USING:
			case HiveSql.T_VALUE:
			case HiveSql.T_VALUES:
			case HiveSql.T_VAR:
			case HiveSql.T_VARCHAR:
			case HiveSql.T_VARCHAR2:
			case HiveSql.T_VARYING:
			case HiveSql.T_VOLATILE:
			case HiveSql.T_WHILE:
			case HiveSql.T_WITH:
			case HiveSql.T_WITHOUT:
			case HiveSql.T_WORK:
			case HiveSql.T_XACT_ABORT:
			case HiveSql.T_XML:
			case HiveSql.T_YES:
			case HiveSql.T_ACTIVITY_COUNT:
			case HiveSql.T_CUME_DIST:
			case HiveSql.T_CURRENT_DATE:
			case HiveSql.T_CURRENT_TIMESTAMP:
			case HiveSql.T_CURRENT_USER:
			case HiveSql.T_DENSE_RANK:
			case HiveSql.T_FIRST_VALUE:
			case HiveSql.T_LAG:
			case HiveSql.T_LAST_VALUE:
			case HiveSql.T_LEAD:
			case HiveSql.T_PART_COUNT:
			case HiveSql.T_PART_LOC:
			case HiveSql.T_RANK:
			case HiveSql.T_ROW_NUMBER:
			case HiveSql.T_STDEV:
			case HiveSql.T_SYSDATE:
			case HiveSql.T_VARIANCE:
			case HiveSql.T_USER:
				{
				this.state = 3303;
				this.non_reserved_words();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3313;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3306;
					this.match(HiveSql.T_DOT);
					this.state = 3309;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case HiveSql.L_ID:
						{
						this.state = 3307;
						this.match(HiveSql.L_ID);
						}
						break;
					case HiveSql.T_ACTION:
					case HiveSql.T_ADD2:
					case HiveSql.T_ALL:
					case HiveSql.T_ALLOCATE:
					case HiveSql.T_ALTER:
					case HiveSql.T_AND:
					case HiveSql.T_ANSI_NULLS:
					case HiveSql.T_ANSI_PADDING:
					case HiveSql.T_AS:
					case HiveSql.T_ASC:
					case HiveSql.T_ASSOCIATE:
					case HiveSql.T_AT:
					case HiveSql.T_AUTO_INCREMENT:
					case HiveSql.T_AVG:
					case HiveSql.T_BATCHSIZE:
					case HiveSql.T_BEGIN:
					case HiveSql.T_BETWEEN:
					case HiveSql.T_BIGINT:
					case HiveSql.T_BINARY_DOUBLE:
					case HiveSql.T_BINARY_FLOAT:
					case HiveSql.T_BIT:
					case HiveSql.T_BODY:
					case HiveSql.T_BREAK:
					case HiveSql.T_BY:
					case HiveSql.T_BYTE:
					case HiveSql.T_CALL:
					case HiveSql.T_CALLER:
					case HiveSql.T_CASCADE:
					case HiveSql.T_CASE:
					case HiveSql.T_CASESPECIFIC:
					case HiveSql.T_CAST:
					case HiveSql.T_CHAR:
					case HiveSql.T_CHARACTER:
					case HiveSql.T_CHARSET:
					case HiveSql.T_CLIENT:
					case HiveSql.T_CLOSE:
					case HiveSql.T_CLUSTERED:
					case HiveSql.T_CMP:
					case HiveSql.T_COLLECT:
					case HiveSql.T_COLLECTION:
					case HiveSql.T_COLUMN:
					case HiveSql.T_COMMENT:
					case HiveSql.T_CONSTANT:
					case HiveSql.T_COMMIT:
					case HiveSql.T_COMPRESS:
					case HiveSql.T_CONCAT:
					case HiveSql.T_CONDITION:
					case HiveSql.T_CONSTRAINT:
					case HiveSql.T_CONTINUE:
					case HiveSql.T_COPY:
					case HiveSql.T_COUNT:
					case HiveSql.T_COUNT_BIG:
					case HiveSql.T_CREATE:
					case HiveSql.T_CREATION:
					case HiveSql.T_CREATOR:
					case HiveSql.T_CS:
					case HiveSql.T_CURRENT:
					case HiveSql.T_CURRENT_SCHEMA:
					case HiveSql.T_CURSOR:
					case HiveSql.T_DATABASE:
					case HiveSql.T_DATA:
					case HiveSql.T_DATE:
					case HiveSql.T_DATETIME:
					case HiveSql.T_DAY:
					case HiveSql.T_DAYS:
					case HiveSql.T_DEC:
					case HiveSql.T_DECIMAL:
					case HiveSql.T_DECLARE:
					case HiveSql.T_DEFAULT:
					case HiveSql.T_DEFERRED:
					case HiveSql.T_DEFINED:
					case HiveSql.T_DEFINER:
					case HiveSql.T_DEFINITION:
					case HiveSql.T_DELETE:
					case HiveSql.T_DELIMITED:
					case HiveSql.T_DELIMITER:
					case HiveSql.T_DESC:
					case HiveSql.T_DESCRIBE:
					case HiveSql.T_DIAGNOSTICS:
					case HiveSql.T_DIR:
					case HiveSql.T_DIRECTORY:
					case HiveSql.T_DISTINCT:
					case HiveSql.T_DISTRIBUTE:
					case HiveSql.T_DO:
					case HiveSql.T_DOUBLE:
					case HiveSql.T_DROP:
					case HiveSql.T_DYNAMIC:
					case HiveSql.T_ENABLE:
					case HiveSql.T_ENGINE:
					case HiveSql.T_ESCAPED:
					case HiveSql.T_EXCEPT:
					case HiveSql.T_EXEC:
					case HiveSql.T_EXECUTE:
					case HiveSql.T_EXCEPTION:
					case HiveSql.T_EXCLUSIVE:
					case HiveSql.T_EXISTS:
					case HiveSql.T_EXIT:
					case HiveSql.T_FALLBACK:
					case HiveSql.T_FALSE:
					case HiveSql.T_FETCH:
					case HiveSql.T_FIELDS:
					case HiveSql.T_FILE:
					case HiveSql.T_FILES:
					case HiveSql.T_FLOAT:
					case HiveSql.T_FOR:
					case HiveSql.T_FOREIGN:
					case HiveSql.T_FORMAT:
					case HiveSql.T_FOUND:
					case HiveSql.T_FROM:
					case HiveSql.T_FULL:
					case HiveSql.T_FUNCTION:
					case HiveSql.T_GET:
					case HiveSql.T_GLOBAL:
					case HiveSql.T_GO:
					case HiveSql.T_GRANT:
					case HiveSql.T_GROUP:
					case HiveSql.T_HANDLER:
					case HiveSql.T_HASH:
					case HiveSql.T_HAVING:
					case HiveSql.T_HDFS:
					case HiveSql.T_HIVE:
					case HiveSql.T_HOST:
					case HiveSql.T_IDENTITY:
					case HiveSql.T_IF:
					case HiveSql.T_IGNORE:
					case HiveSql.T_IMMEDIATE:
					case HiveSql.T_IN:
					case HiveSql.T_INCLUDE:
					case HiveSql.T_INDEX:
					case HiveSql.T_INITRANS:
					case HiveSql.T_INNER:
					case HiveSql.T_INOUT:
					case HiveSql.T_INSERT:
					case HiveSql.T_INT:
					case HiveSql.T_INT2:
					case HiveSql.T_INT4:
					case HiveSql.T_INT8:
					case HiveSql.T_INTEGER:
					case HiveSql.T_INTERSECT:
					case HiveSql.T_INTERVAL:
					case HiveSql.T_INTO:
					case HiveSql.T_INVOKER:
					case HiveSql.T_IS:
					case HiveSql.T_ISOPEN:
					case HiveSql.T_ITEMS:
					case HiveSql.T_JOIN:
					case HiveSql.T_KEEP:
					case HiveSql.T_KEY:
					case HiveSql.T_KEYS:
					case HiveSql.T_LANGUAGE:
					case HiveSql.T_LEAVE:
					case HiveSql.T_LEFT:
					case HiveSql.T_LIKE:
					case HiveSql.T_LIMIT:
					case HiveSql.T_LINES:
					case HiveSql.T_LOCAL:
					case HiveSql.T_LOCATION:
					case HiveSql.T_LOCATOR:
					case HiveSql.T_LOCATORS:
					case HiveSql.T_LOCKS:
					case HiveSql.T_LOG:
					case HiveSql.T_LOGGED:
					case HiveSql.T_LOGGING:
					case HiveSql.T_LOOP:
					case HiveSql.T_MAP:
					case HiveSql.T_MATCHED:
					case HiveSql.T_MAX:
					case HiveSql.T_MAXTRANS:
					case HiveSql.T_MERGE:
					case HiveSql.T_MESSAGE_TEXT:
					case HiveSql.T_MICROSECOND:
					case HiveSql.T_MICROSECONDS:
					case HiveSql.T_MIN:
					case HiveSql.T_MULTISET:
					case HiveSql.T_NCHAR:
					case HiveSql.T_NEW:
					case HiveSql.T_NVARCHAR:
					case HiveSql.T_NO:
					case HiveSql.T_NOCOUNT:
					case HiveSql.T_NOCOMPRESS:
					case HiveSql.T_NOLOGGING:
					case HiveSql.T_NONE:
					case HiveSql.T_NOT:
					case HiveSql.T_NOTFOUND:
					case HiveSql.T_NUMERIC:
					case HiveSql.T_NUMBER:
					case HiveSql.T_OBJECT:
					case HiveSql.T_OFF:
					case HiveSql.T_ON:
					case HiveSql.T_ONLY:
					case HiveSql.T_OPEN:
					case HiveSql.T_OR:
					case HiveSql.T_ORDER:
					case HiveSql.T_OUT:
					case HiveSql.T_OUTER:
					case HiveSql.T_OVER:
					case HiveSql.T_OVERWRITE:
					case HiveSql.T_OWNER:
					case HiveSql.T_PACKAGE:
					case HiveSql.T_PARTITION:
					case HiveSql.T_PCTFREE:
					case HiveSql.T_PCTUSED:
					case HiveSql.T_PRECISION:
					case HiveSql.T_PRESERVE:
					case HiveSql.T_PRIMARY:
					case HiveSql.T_PRINT:
					case HiveSql.T_PROC:
					case HiveSql.T_PROCEDURE:
					case HiveSql.T_QUALIFY:
					case HiveSql.T_QUERY_BAND:
					case HiveSql.T_QUIT:
					case HiveSql.T_QUOTED_IDENTIFIER:
					case HiveSql.T_RAISE:
					case HiveSql.T_REAL:
					case HiveSql.T_REFERENCES:
					case HiveSql.T_REGEXP:
					case HiveSql.T_REPLACE:
					case HiveSql.T_RESIGNAL:
					case HiveSql.T_RESTRICT:
					case HiveSql.T_RESULT:
					case HiveSql.T_RESULT_SET_LOCATOR:
					case HiveSql.T_RETURN:
					case HiveSql.T_RETURNS:
					case HiveSql.T_REVERSE:
					case HiveSql.T_RIGHT:
					case HiveSql.T_RLIKE:
					case HiveSql.T_ROLE:
					case HiveSql.T_ROLLBACK:
					case HiveSql.T_ROW:
					case HiveSql.T_ROWS:
					case HiveSql.T_ROW_COUNT:
					case HiveSql.T_RR:
					case HiveSql.T_RS:
					case HiveSql.T_PWD:
					case HiveSql.T_TRIM:
					case HiveSql.T_SCHEMA:
					case HiveSql.T_SECOND:
					case HiveSql.T_SECONDS:
					case HiveSql.T_SECURITY:
					case HiveSql.T_SEGMENT:
					case HiveSql.T_SEL:
					case HiveSql.T_SELECT:
					case HiveSql.T_SET:
					case HiveSql.T_SESSION:
					case HiveSql.T_SESSIONS:
					case HiveSql.T_SETS:
					case HiveSql.T_SHARE:
					case HiveSql.T_SIGNAL:
					case HiveSql.T_SIMPLE_DOUBLE:
					case HiveSql.T_SIMPLE_FLOAT:
					case HiveSql.T_SMALLDATETIME:
					case HiveSql.T_SMALLINT:
					case HiveSql.T_SQL:
					case HiveSql.T_SQLEXCEPTION:
					case HiveSql.T_SQLINSERT:
					case HiveSql.T_SQLSTATE:
					case HiveSql.T_SQLWARNING:
					case HiveSql.T_STATS:
					case HiveSql.T_STATISTICS:
					case HiveSql.T_STEP:
					case HiveSql.T_STORAGE:
					case HiveSql.T_STORED:
					case HiveSql.T_STRING:
					case HiveSql.T_SUBDIR:
					case HiveSql.T_SUBSTRING:
					case HiveSql.T_SUM:
					case HiveSql.T_SUMMARY:
					case HiveSql.T_SYS_REFCURSOR:
					case HiveSql.T_TABLE:
					case HiveSql.T_TABLESPACE:
					case HiveSql.T_TEMPORARY:
					case HiveSql.T_TERMINATED:
					case HiveSql.T_TEXTIMAGE_ON:
					case HiveSql.T_THEN:
					case HiveSql.T_TIMESTAMP:
					case HiveSql.T_TITLE:
					case HiveSql.T_TO:
					case HiveSql.T_TOP:
					case HiveSql.T_TRANSACTION:
					case HiveSql.T_TRUE:
					case HiveSql.T_TRUNCATE:
					case HiveSql.T_UNIQUE:
					case HiveSql.T_UPDATE:
					case HiveSql.T_UR:
					case HiveSql.T_USE:
					case HiveSql.T_USING:
					case HiveSql.T_VALUE:
					case HiveSql.T_VALUES:
					case HiveSql.T_VAR:
					case HiveSql.T_VARCHAR:
					case HiveSql.T_VARCHAR2:
					case HiveSql.T_VARYING:
					case HiveSql.T_VOLATILE:
					case HiveSql.T_WHILE:
					case HiveSql.T_WITH:
					case HiveSql.T_WITHOUT:
					case HiveSql.T_WORK:
					case HiveSql.T_XACT_ABORT:
					case HiveSql.T_XML:
					case HiveSql.T_YES:
					case HiveSql.T_ACTIVITY_COUNT:
					case HiveSql.T_CUME_DIST:
					case HiveSql.T_CURRENT_DATE:
					case HiveSql.T_CURRENT_TIMESTAMP:
					case HiveSql.T_CURRENT_USER:
					case HiveSql.T_DENSE_RANK:
					case HiveSql.T_FIRST_VALUE:
					case HiveSql.T_LAG:
					case HiveSql.T_LAST_VALUE:
					case HiveSql.T_LEAD:
					case HiveSql.T_PART_COUNT:
					case HiveSql.T_PART_LOC:
					case HiveSql.T_RANK:
					case HiveSql.T_ROW_NUMBER:
					case HiveSql.T_STDEV:
					case HiveSql.T_SYSDATE:
					case HiveSql.T_VARIANCE:
					case HiveSql.T_USER:
						{
						this.state = 3308;
						this.non_reserved_words();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 3315;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 419, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public string(): StringContext {
		let _localctx: StringContext = new StringContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, HiveSql.RULE_string);
		try {
			this.state = 3318;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case HiveSql.L_S_STRING:
				_localctx = new Single_quotedStringContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3316;
				this.match(HiveSql.L_S_STRING);
				}
				break;
			case HiveSql.L_D_STRING:
				_localctx = new Double_quotedStringContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3317;
				this.match(HiveSql.L_D_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public int_number(): Int_numberContext {
		let _localctx: Int_numberContext = new Int_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, HiveSql.RULE_int_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3321;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_ADD || _la === HiveSql.T_SUB) {
				{
				this.state = 3320;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_ADD || _la === HiveSql.T_SUB)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3323;
			this.match(HiveSql.L_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dec_number(): Dec_numberContext {
		let _localctx: Dec_numberContext = new Dec_numberContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, HiveSql.RULE_dec_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3326;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === HiveSql.T_ADD || _la === HiveSql.T_SUB) {
				{
				this.state = 3325;
				_la = this._input.LA(1);
				if (!(_la === HiveSql.T_ADD || _la === HiveSql.T_SUB)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3328;
			this.match(HiveSql.L_DEC);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bool_literal(): Bool_literalContext {
		let _localctx: Bool_literalContext = new Bool_literalContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, HiveSql.RULE_bool_literal);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3330;
			_la = this._input.LA(1);
			if (!(_la === HiveSql.T_FALSE || _la === HiveSql.T_TRUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public null_const(): Null_constContext {
		let _localctx: Null_constContext = new Null_constContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, HiveSql.RULE_null_const);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3332;
			this.match(HiveSql.T_NULL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public non_reserved_words(): Non_reserved_wordsContext {
		let _localctx: Non_reserved_wordsContext = new Non_reserved_wordsContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, HiveSql.RULE_non_reserved_words);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3334;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << HiveSql.T_ACTION) | (1 << HiveSql.T_ADD2) | (1 << HiveSql.T_ALL) | (1 << HiveSql.T_ALLOCATE) | (1 << HiveSql.T_ALTER) | (1 << HiveSql.T_AND) | (1 << HiveSql.T_ANSI_NULLS) | (1 << HiveSql.T_ANSI_PADDING) | (1 << HiveSql.T_AS) | (1 << HiveSql.T_ASC) | (1 << HiveSql.T_ASSOCIATE) | (1 << HiveSql.T_AT) | (1 << HiveSql.T_AUTO_INCREMENT) | (1 << HiveSql.T_AVG) | (1 << HiveSql.T_BATCHSIZE) | (1 << HiveSql.T_BEGIN) | (1 << HiveSql.T_BETWEEN) | (1 << HiveSql.T_BIGINT) | (1 << HiveSql.T_BINARY_DOUBLE) | (1 << HiveSql.T_BINARY_FLOAT) | (1 << HiveSql.T_BIT) | (1 << HiveSql.T_BODY) | (1 << HiveSql.T_BREAK) | (1 << HiveSql.T_BY) | (1 << HiveSql.T_BYTE) | (1 << HiveSql.T_CALL) | (1 << HiveSql.T_CALLER) | (1 << HiveSql.T_CASCADE) | (1 << HiveSql.T_CASE) | (1 << HiveSql.T_CASESPECIFIC))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (HiveSql.T_CAST - 32)) | (1 << (HiveSql.T_CHAR - 32)) | (1 << (HiveSql.T_CHARACTER - 32)) | (1 << (HiveSql.T_CHARSET - 32)) | (1 << (HiveSql.T_CLIENT - 32)) | (1 << (HiveSql.T_CLOSE - 32)) | (1 << (HiveSql.T_CLUSTERED - 32)) | (1 << (HiveSql.T_CMP - 32)) | (1 << (HiveSql.T_COLLECT - 32)) | (1 << (HiveSql.T_COLLECTION - 32)) | (1 << (HiveSql.T_COLUMN - 32)) | (1 << (HiveSql.T_COMMENT - 32)) | (1 << (HiveSql.T_CONSTANT - 32)) | (1 << (HiveSql.T_COMMIT - 32)) | (1 << (HiveSql.T_COMPRESS - 32)) | (1 << (HiveSql.T_CONCAT - 32)) | (1 << (HiveSql.T_CONDITION - 32)) | (1 << (HiveSql.T_CONSTRAINT - 32)) | (1 << (HiveSql.T_CONTINUE - 32)) | (1 << (HiveSql.T_COPY - 32)) | (1 << (HiveSql.T_COUNT - 32)) | (1 << (HiveSql.T_COUNT_BIG - 32)) | (1 << (HiveSql.T_CREATE - 32)) | (1 << (HiveSql.T_CREATION - 32)) | (1 << (HiveSql.T_CREATOR - 32)) | (1 << (HiveSql.T_CS - 32)) | (1 << (HiveSql.T_CURRENT - 32)) | (1 << (HiveSql.T_CURRENT_SCHEMA - 32)) | (1 << (HiveSql.T_CURSOR - 32)) | (1 << (HiveSql.T_DATABASE - 32)) | (1 << (HiveSql.T_DATA - 32)) | (1 << (HiveSql.T_DATE - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (HiveSql.T_DATETIME - 64)) | (1 << (HiveSql.T_DAY - 64)) | (1 << (HiveSql.T_DAYS - 64)) | (1 << (HiveSql.T_DEC - 64)) | (1 << (HiveSql.T_DECIMAL - 64)) | (1 << (HiveSql.T_DECLARE - 64)) | (1 << (HiveSql.T_DEFAULT - 64)) | (1 << (HiveSql.T_DEFERRED - 64)) | (1 << (HiveSql.T_DEFINED - 64)) | (1 << (HiveSql.T_DEFINER - 64)) | (1 << (HiveSql.T_DEFINITION - 64)) | (1 << (HiveSql.T_DELETE - 64)) | (1 << (HiveSql.T_DELIMITED - 64)) | (1 << (HiveSql.T_DELIMITER - 64)) | (1 << (HiveSql.T_DESC - 64)) | (1 << (HiveSql.T_DESCRIBE - 64)) | (1 << (HiveSql.T_DIAGNOSTICS - 64)) | (1 << (HiveSql.T_DIR - 64)) | (1 << (HiveSql.T_DIRECTORY - 64)) | (1 << (HiveSql.T_DISTINCT - 64)) | (1 << (HiveSql.T_DISTRIBUTE - 64)) | (1 << (HiveSql.T_DO - 64)) | (1 << (HiveSql.T_DOUBLE - 64)) | (1 << (HiveSql.T_DROP - 64)) | (1 << (HiveSql.T_DYNAMIC - 64)) | (1 << (HiveSql.T_ENABLE - 64)) | (1 << (HiveSql.T_ENGINE - 64)) | (1 << (HiveSql.T_ESCAPED - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (HiveSql.T_EXCEPT - 96)) | (1 << (HiveSql.T_EXEC - 96)) | (1 << (HiveSql.T_EXECUTE - 96)) | (1 << (HiveSql.T_EXCEPTION - 96)) | (1 << (HiveSql.T_EXCLUSIVE - 96)) | (1 << (HiveSql.T_EXISTS - 96)) | (1 << (HiveSql.T_EXIT - 96)) | (1 << (HiveSql.T_FALLBACK - 96)) | (1 << (HiveSql.T_FALSE - 96)) | (1 << (HiveSql.T_FETCH - 96)) | (1 << (HiveSql.T_FIELDS - 96)) | (1 << (HiveSql.T_FILE - 96)) | (1 << (HiveSql.T_FILES - 96)) | (1 << (HiveSql.T_FLOAT - 96)) | (1 << (HiveSql.T_FOR - 96)) | (1 << (HiveSql.T_FOREIGN - 96)) | (1 << (HiveSql.T_FORMAT - 96)) | (1 << (HiveSql.T_FOUND - 96)) | (1 << (HiveSql.T_FROM - 96)) | (1 << (HiveSql.T_FULL - 96)) | (1 << (HiveSql.T_FUNCTION - 96)) | (1 << (HiveSql.T_GET - 96)) | (1 << (HiveSql.T_GLOBAL - 96)) | (1 << (HiveSql.T_GO - 96)) | (1 << (HiveSql.T_GRANT - 96)) | (1 << (HiveSql.T_GROUP - 96)) | (1 << (HiveSql.T_HANDLER - 96)) | (1 << (HiveSql.T_HASH - 96)) | (1 << (HiveSql.T_HAVING - 96)) | (1 << (HiveSql.T_HDFS - 96)) | (1 << (HiveSql.T_HIVE - 96)) | (1 << (HiveSql.T_HOST - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (HiveSql.T_IDENTITY - 128)) | (1 << (HiveSql.T_IF - 128)) | (1 << (HiveSql.T_IGNORE - 128)) | (1 << (HiveSql.T_IMMEDIATE - 128)) | (1 << (HiveSql.T_IN - 128)) | (1 << (HiveSql.T_INCLUDE - 128)) | (1 << (HiveSql.T_INDEX - 128)) | (1 << (HiveSql.T_INITRANS - 128)) | (1 << (HiveSql.T_INNER - 128)) | (1 << (HiveSql.T_INOUT - 128)) | (1 << (HiveSql.T_INSERT - 128)) | (1 << (HiveSql.T_INT - 128)) | (1 << (HiveSql.T_INT2 - 128)) | (1 << (HiveSql.T_INT4 - 128)) | (1 << (HiveSql.T_INT8 - 128)) | (1 << (HiveSql.T_INTEGER - 128)) | (1 << (HiveSql.T_INTERSECT - 128)) | (1 << (HiveSql.T_INTERVAL - 128)) | (1 << (HiveSql.T_INTO - 128)) | (1 << (HiveSql.T_INVOKER - 128)) | (1 << (HiveSql.T_IS - 128)) | (1 << (HiveSql.T_ISOPEN - 128)) | (1 << (HiveSql.T_ITEMS - 128)) | (1 << (HiveSql.T_JOIN - 128)) | (1 << (HiveSql.T_KEEP - 128)) | (1 << (HiveSql.T_KEY - 128)) | (1 << (HiveSql.T_KEYS - 128)) | (1 << (HiveSql.T_LANGUAGE - 128)) | (1 << (HiveSql.T_LEAVE - 128)) | (1 << (HiveSql.T_LEFT - 128)) | (1 << (HiveSql.T_LIKE - 128)) | (1 << (HiveSql.T_LIMIT - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (HiveSql.T_LINES - 160)) | (1 << (HiveSql.T_LOCAL - 160)) | (1 << (HiveSql.T_LOCATION - 160)) | (1 << (HiveSql.T_LOCATOR - 160)) | (1 << (HiveSql.T_LOCATORS - 160)) | (1 << (HiveSql.T_LOCKS - 160)) | (1 << (HiveSql.T_LOG - 160)) | (1 << (HiveSql.T_LOGGED - 160)) | (1 << (HiveSql.T_LOGGING - 160)) | (1 << (HiveSql.T_LOOP - 160)) | (1 << (HiveSql.T_MAP - 160)) | (1 << (HiveSql.T_MATCHED - 160)) | (1 << (HiveSql.T_MAX - 160)) | (1 << (HiveSql.T_MAXTRANS - 160)) | (1 << (HiveSql.T_MERGE - 160)) | (1 << (HiveSql.T_MESSAGE_TEXT - 160)) | (1 << (HiveSql.T_MICROSECOND - 160)) | (1 << (HiveSql.T_MICROSECONDS - 160)) | (1 << (HiveSql.T_MIN - 160)) | (1 << (HiveSql.T_MULTISET - 160)) | (1 << (HiveSql.T_NCHAR - 160)) | (1 << (HiveSql.T_NEW - 160)) | (1 << (HiveSql.T_NVARCHAR - 160)) | (1 << (HiveSql.T_NO - 160)) | (1 << (HiveSql.T_NOCOUNT - 160)) | (1 << (HiveSql.T_NOCOMPRESS - 160)) | (1 << (HiveSql.T_NOLOGGING - 160)) | (1 << (HiveSql.T_NONE - 160)) | (1 << (HiveSql.T_NOT - 160)) | (1 << (HiveSql.T_NOTFOUND - 160)) | (1 << (HiveSql.T_NUMERIC - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (HiveSql.T_NUMBER - 192)) | (1 << (HiveSql.T_OBJECT - 192)) | (1 << (HiveSql.T_OFF - 192)) | (1 << (HiveSql.T_ON - 192)) | (1 << (HiveSql.T_ONLY - 192)) | (1 << (HiveSql.T_OPEN - 192)) | (1 << (HiveSql.T_OR - 192)) | (1 << (HiveSql.T_ORDER - 192)) | (1 << (HiveSql.T_OUT - 192)) | (1 << (HiveSql.T_OUTER - 192)) | (1 << (HiveSql.T_OVER - 192)) | (1 << (HiveSql.T_OVERWRITE - 192)) | (1 << (HiveSql.T_OWNER - 192)) | (1 << (HiveSql.T_PACKAGE - 192)) | (1 << (HiveSql.T_PARTITION - 192)) | (1 << (HiveSql.T_PCTFREE - 192)) | (1 << (HiveSql.T_PCTUSED - 192)) | (1 << (HiveSql.T_PRECISION - 192)) | (1 << (HiveSql.T_PRESERVE - 192)) | (1 << (HiveSql.T_PRIMARY - 192)) | (1 << (HiveSql.T_PRINT - 192)) | (1 << (HiveSql.T_PROC - 192)) | (1 << (HiveSql.T_PROCEDURE - 192)) | (1 << (HiveSql.T_QUALIFY - 192)) | (1 << (HiveSql.T_QUERY_BAND - 192)) | (1 << (HiveSql.T_QUIT - 192)) | (1 << (HiveSql.T_QUOTED_IDENTIFIER - 192)) | (1 << (HiveSql.T_RAISE - 192)) | (1 << (HiveSql.T_REAL - 192)) | (1 << (HiveSql.T_REFERENCES - 192)) | (1 << (HiveSql.T_REGEXP - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (HiveSql.T_REPLACE - 224)) | (1 << (HiveSql.T_RESIGNAL - 224)) | (1 << (HiveSql.T_RESTRICT - 224)) | (1 << (HiveSql.T_RESULT - 224)) | (1 << (HiveSql.T_RESULT_SET_LOCATOR - 224)) | (1 << (HiveSql.T_RETURN - 224)) | (1 << (HiveSql.T_RETURNS - 224)) | (1 << (HiveSql.T_REVERSE - 224)) | (1 << (HiveSql.T_RIGHT - 224)) | (1 << (HiveSql.T_RLIKE - 224)) | (1 << (HiveSql.T_ROLE - 224)) | (1 << (HiveSql.T_ROLLBACK - 224)) | (1 << (HiveSql.T_ROW - 224)) | (1 << (HiveSql.T_ROWS - 224)) | (1 << (HiveSql.T_ROW_COUNT - 224)) | (1 << (HiveSql.T_RR - 224)) | (1 << (HiveSql.T_RS - 224)) | (1 << (HiveSql.T_PWD - 224)) | (1 << (HiveSql.T_TRIM - 224)) | (1 << (HiveSql.T_SCHEMA - 224)) | (1 << (HiveSql.T_SECOND - 224)) | (1 << (HiveSql.T_SECONDS - 224)) | (1 << (HiveSql.T_SECURITY - 224)) | (1 << (HiveSql.T_SEGMENT - 224)) | (1 << (HiveSql.T_SEL - 224)) | (1 << (HiveSql.T_SELECT - 224)) | (1 << (HiveSql.T_SET - 224)) | (1 << (HiveSql.T_SESSION - 224)) | (1 << (HiveSql.T_SESSIONS - 224)) | (1 << (HiveSql.T_SETS - 224)) | (1 << (HiveSql.T_SHARE - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (HiveSql.T_SIGNAL - 256)) | (1 << (HiveSql.T_SIMPLE_DOUBLE - 256)) | (1 << (HiveSql.T_SIMPLE_FLOAT - 256)) | (1 << (HiveSql.T_SMALLDATETIME - 256)) | (1 << (HiveSql.T_SMALLINT - 256)) | (1 << (HiveSql.T_SQL - 256)) | (1 << (HiveSql.T_SQLEXCEPTION - 256)) | (1 << (HiveSql.T_SQLINSERT - 256)) | (1 << (HiveSql.T_SQLSTATE - 256)) | (1 << (HiveSql.T_SQLWARNING - 256)) | (1 << (HiveSql.T_STATS - 256)) | (1 << (HiveSql.T_STATISTICS - 256)) | (1 << (HiveSql.T_STEP - 256)) | (1 << (HiveSql.T_STORAGE - 256)) | (1 << (HiveSql.T_STORED - 256)) | (1 << (HiveSql.T_STRING - 256)) | (1 << (HiveSql.T_SUBDIR - 256)) | (1 << (HiveSql.T_SUBSTRING - 256)) | (1 << (HiveSql.T_SUM - 256)) | (1 << (HiveSql.T_SUMMARY - 256)) | (1 << (HiveSql.T_SYS_REFCURSOR - 256)) | (1 << (HiveSql.T_TABLE - 256)) | (1 << (HiveSql.T_TABLESPACE - 256)) | (1 << (HiveSql.T_TEMPORARY - 256)) | (1 << (HiveSql.T_TERMINATED - 256)) | (1 << (HiveSql.T_TEXTIMAGE_ON - 256)) | (1 << (HiveSql.T_THEN - 256)) | (1 << (HiveSql.T_TIMESTAMP - 256)) | (1 << (HiveSql.T_TITLE - 256)) | (1 << (HiveSql.T_TO - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (HiveSql.T_TOP - 288)) | (1 << (HiveSql.T_TRANSACTION - 288)) | (1 << (HiveSql.T_TRUE - 288)) | (1 << (HiveSql.T_TRUNCATE - 288)) | (1 << (HiveSql.T_UNIQUE - 288)) | (1 << (HiveSql.T_UPDATE - 288)) | (1 << (HiveSql.T_UR - 288)) | (1 << (HiveSql.T_USE - 288)) | (1 << (HiveSql.T_USING - 288)) | (1 << (HiveSql.T_VALUE - 288)) | (1 << (HiveSql.T_VALUES - 288)) | (1 << (HiveSql.T_VAR - 288)) | (1 << (HiveSql.T_VARCHAR - 288)) | (1 << (HiveSql.T_VARCHAR2 - 288)) | (1 << (HiveSql.T_VARYING - 288)) | (1 << (HiveSql.T_VOLATILE - 288)) | (1 << (HiveSql.T_WHILE - 288)) | (1 << (HiveSql.T_WITH - 288)) | (1 << (HiveSql.T_WITHOUT - 288)) | (1 << (HiveSql.T_WORK - 288)) | (1 << (HiveSql.T_XACT_ABORT - 288)) | (1 << (HiveSql.T_XML - 288)) | (1 << (HiveSql.T_YES - 288)) | (1 << (HiveSql.T_ACTIVITY_COUNT - 288)) | (1 << (HiveSql.T_CUME_DIST - 288)) | (1 << (HiveSql.T_CURRENT_DATE - 288)) | (1 << (HiveSql.T_CURRENT_TIMESTAMP - 288)) | (1 << (HiveSql.T_CURRENT_USER - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (HiveSql.T_DENSE_RANK - 320)) | (1 << (HiveSql.T_FIRST_VALUE - 320)) | (1 << (HiveSql.T_LAG - 320)) | (1 << (HiveSql.T_LAST_VALUE - 320)) | (1 << (HiveSql.T_LEAD - 320)) | (1 << (HiveSql.T_PART_COUNT - 320)) | (1 << (HiveSql.T_PART_LOC - 320)) | (1 << (HiveSql.T_RANK - 320)) | (1 << (HiveSql.T_ROW_NUMBER - 320)) | (1 << (HiveSql.T_STDEV - 320)) | (1 << (HiveSql.T_SYSDATE - 320)) | (1 << (HiveSql.T_VARIANCE - 320)) | (1 << (HiveSql.T_USER - 320)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 4:
			return this.block_end_sempred(_localctx as Block_endContext, predIndex);

		case 11:
			return this.expr_stmt_sempred(_localctx as Expr_stmtContext, predIndex);

		case 74:
			return this.create_routine_params_sempred(_localctx as Create_routine_paramsContext, predIndex);

		case 152:
			return this.select_list_alias_sempred(_localctx as Select_list_aliasContext, predIndex);

		case 163:
			return this.from_alias_clause_sempred(_localctx as From_alias_clauseContext, predIndex);

		case 181:
			return this.delete_alias_sempred(_localctx as Delete_aliasContext, predIndex);

		case 183:
			return this.bool_expr_sempred(_localctx as Bool_exprContext, predIndex);

		case 191:
			return this.expr_sempred(_localctx as ExprContext, predIndex);

		case 208:
			return this.func_param_sempred(_localctx as Func_paramContext, predIndex);
		}
		return true;
	}
	private block_end_sempred(_localctx: Block_endContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this._input.LT(2).text.toUpperCase() !== "TRANSACTION";
		}
		return true;
	}
	private expr_stmt_sempred(_localctx: Expr_stmtContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this._input.LT(1).text.toUpperCase() !== "GO";
		}
		return true;
	}
	private create_routine_params_sempred(_localctx: Create_routine_paramsContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this._input.LT(1).text.toUpperCase() !== "IS" &&
		        this._input.LT(1).text.toUpperCase() !== "AS" &&
		        !(this._input.LT(1).text.toUpperCase() ==="DYNAMIC" && this._input.LT(2).text.toUpperCase() === "RESULT")
		        ;
		}
		return true;
	}
	private select_list_alias_sempred(_localctx: Select_list_aliasContext, predIndex: number): boolean {
		switch (predIndex) {
		case 3:
			return this._input.LT(1).text.toUpperCase() !== "INTO" && this._input.LT(1).text.toUpperCase() !== "FROM";
		}
		return true;
	}
	private from_alias_clause_sempred(_localctx: From_alias_clauseContext, predIndex: number): boolean {
		switch (predIndex) {
		case 4:
			return this._input.LT(1).text.toUpperCase() !== "EXEC" &&
		        this._input.LT(1).text.toUpperCase() !== "EXECUTE" &&
		        this._input.LT(1).text.toUpperCase() !== "INNER" &&
		        this._input.LT(1).text.toUpperCase() !== "LEFT" &&
		        this._input.LT(1).text.toUpperCase() !== "GROUP" &&
		        this._input.LT(1).text.toUpperCase() !== "ORDER" &&
		        this._input.LT(1).text.toUpperCase() !== "LIMIT" &&
		        this._input.LT(1).text.toUpperCase() !== "WITH" &&
		        this._input.LT(1).text.toUpperCase() !== "JOIN";
		}
		return true;
	}
	private delete_alias_sempred(_localctx: Delete_aliasContext, predIndex: number): boolean {
		switch (predIndex) {
		case 5:
			return this._input.LT(1).text.toUpperCase() !== "ALL";
		}
		return true;
	}
	private bool_expr_sempred(_localctx: Bool_exprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 6:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private expr_sempred(_localctx: ExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 7:
			return this.precpred(this._ctx, 14);

		case 8:
			return this.precpred(this._ctx, 13);

		case 9:
			return this.precpred(this._ctx, 12);

		case 10:
			return this.precpred(this._ctx, 11);

		case 11:
			return this.precpred(this._ctx, 15);
		}
		return true;
	}
	private func_param_sempred(_localctx: Func_paramContext, predIndex: number): boolean {
		switch (predIndex) {
		case 12:
			return this._input.LT(1).text.toUpperCase() !== "INTO";
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 7;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u017A\u0D0B\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x03\x02\x03\x02\x03\x02\x03" +
		"\x03\x03\x03\x05\x03\u01CC\n\x03\x03\x03\x05\x03\u01CF\n\x03\x06\x03\u01D1" +
		"\n\x03\r\x03\x0E\x03\u01D2\x03\x04\x05\x04\u01D6\n\x04\x03\x04\x03\x04" +
		"\x03\x04\x05\x04\u01DB\n\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x05" +
		"\x05\u01E2\n\x05\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05\u01E8\n\x05\x05" +
		"\x05\u01EA\n\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x06\x07\u01F1" +
		"\n\x07\r\x07\x0E\x07\u01F2\x03\x07\x05\x07\u01F6\n\x07\x05\x07\u01F8\n" +
		"\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x05\b\u0237\n\b\x03\t\x03\t\x03\n\x03\n\x06\n\u023D\n\n" +
		"\r\n\x0E\n\u023E\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\r" +
		"\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x05\x0E\u024F\n\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x07\x0E\u0254\n\x0E\f\x0E\x0E\x0E\u0257\v\x0E\x05\x0E\u0259\n" +
		"\x0E\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u025E\n\x0F\x03\x10\x03\x10\x05\x10" +
		"\u0262\n\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05" +
		"\x10\u026B\n\x10\x03\x10\x03\x10\x03\x10\x05\x10\u0270\n\x10\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x07\x11\u0276\n\x11\f\x11\x0E\x11\u0279\v\x11\x03" +
		"\x11\x03\x11\x05\x11\u027D\n\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x07\x11\u0284\n\x11\f\x11\x0E\x11\u0287\v\x11\x03\x11\x03\x11\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x07\x12\u0290\n\x12\f\x12\x0E\x12\u0293" +
		"\v\x12\x03\x12\x03\x12\x05\x12\u0297\n\x12\x03\x12\x05\x12\u029A\n\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x05\x13\u02A8\n\x13\x03\x13\x03\x13\x03\x14\x03" +
		"\x14\x03\x14\x05\x14\u02AF\n\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
		"\x07\x14\u02B6\n\x14\f\x14\x0E\x14\u02B9\v\x14\x03\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17" +
		"\x03\x17\x03\x17\x05\x17\u02C9\n\x17\x03\x17\x03\x17\x05\x17\u02CD\n\x17" +
		"\x03\x18\x03\x18\x03\x18\x03\x18\x07\x18\u02D3\n\x18\f\x18\x0E\x18\u02D6" +
		"\v\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x07\x19\u02DE\n" +
		"\x19\f\x19\x0E\x19\u02E1\v\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x07\x1A\u02E8\n\x1A\f\x1A\x0E\x1A\u02EB\v\x1A\x03\x1B\x03\x1B\x03\x1B" +
		"\x03\x1B\x03\x1B\x05\x1B\u02F2\n\x1B\x03\x1C\x03\x1C\x03\x1C\x07\x1C\u02F7" +
		"\n\x1C\f\x1C\x0E\x1C\u02FA\v\x1C\x03\x1C\x05\x1C\u02FD\n\x1C\x03\x1C\x03" +
		"\x1C\x05\x1C\u0301\n\x1C\x03\x1C\x07\x1C\u0304\n\x1C\f\x1C\x0E\x1C\u0307" +
		"\v\x1C\x03\x1C\x05\x1C\u030A\n\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u030F" +
		"\n\x1C\x03\x1C\x03\x1C\x05\x1C\u0313\n\x1C\x03\x1C\x03\x1C\x05\x1C\u0317" +
		"\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E" +
		"\x05\x1E\u0321\n\x1E\x03\x1E\x03\x1E\x05\x1E\u0325\n\x1E\x03\x1E\x03\x1E" +
		"\x03\x1E\x05\x1E\u032A\n\x1E\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u032F\n\x1F" +
		"\x03\x1F\x03\x1F\x05\x1F\u0333\n\x1F\x03 \x03 \x03 \x03!\x03!\x03!\x03" +
		"!\x03!\x03!\x03!\x03!\x05!\u0340\n!\x03!\x03!\x03\"\x05\"\u0345\n\"\x03" +
		"\"\x03\"\x03\"\x03\"\x05\"\u034B\n\"\x03\"\x03\"\x03#\x03#\x03#\x03#\x03" +
		"#\x05#\u0354\n#\x03#\x03#\x05#\u0358\n#\x03#\x03#\x03$\x03$\x03$\x03$" +
		"\x05$\u0360\n$\x03$\x05$\u0363\n$\x03$\x03$\x03$\x05$\u0368\n$\x03$\x03" +
		"$\x03%\x05%\u036D\n%\x03%\x03%\x03%\x03%\x03%\x05%\u0374\n%\x03%\x03%" +
		"\x03%\x03%\x03%\x05%\u037B\n%\x03%\x05%\u037E\n%\x03&\x03&\x03&\x07&\u0383" +
		"\n&\f&\x0E&\u0386\v&\x03\'\x03\'\x03\'\x05\'\u038B\n\'\x03\'\x07\'\u038E" +
		"\n\'\f\'\x0E\'\u0391\v\'\x03\'\x07\'\u0394\n\'\f\'\x0E\'\u0397\v\'\x03" +
		"\'\x03\'\x05\'\u039B\n\'\x03\'\x05\'\u039E\n\'\x03(\x03(\x03)\x03)\x05" +
		")\u03A4\n)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x07)\u03B0" +
		"\n)\f)\x0E)\u03B3\v)\x03)\x03)\x03)\x03)\x03)\x07)\u03BA\n)\f)\x0E)\u03BD" +
		"\v)\x03)\x03)\x03)\x05)\u03C2\n)\x03*\x03*\x03*\x05*\u03C7\n*\x03*\x03" +
		"*\x03*\x05*\u03CC\n*\x03*\x03*\x03*\x05*\u03D1\n*\x07*\u03D3\n*\f*\x0E" +
		"*\u03D6\v*\x03*\x03*\x05*\u03DA\n*\x03*\x05*\u03DD\n*\x03*\x03*\x03*\x03" +
		"*\x03*\x03*\x07*\u03E5\n*\f*\x0E*\u03E8\v*\x03*\x03*\x03*\x03*\x03*\x03" +
		"*\x03*\x07*\u03F1\n*\f*\x0E*\u03F4\v*\x03*\x03*\x07*\u03F8\n*\f*\x0E*" +
		"\u03FB\v*\x05*\u03FD\n*\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03" +
		"+\x05+\u0409\n+\x03,\x06,\u040C\n,\r,\x0E,\u040D\x03-\x03-\x03-\x05-\u0413" +
		"\n-\x03.\x05.\u0416\n.\x03.\x03.\x03/\x06/\u041B\n/\r/\x0E/\u041C\x03" +
		"0\x030\x030\x030\x030\x030\x030\x030\x030\x030\x050\u0429\n0\x031\x03" +
		"1\x031\x031\x031\x031\x031\x031\x031\x031\x031\x061\u0436\n1\r1\x0E1\u0437" +
		"\x031\x031\x031\x051\u043D\n1\x032\x052\u0440\n2\x032\x032\x032\x032\x03" +
		"2\x032\x032\x032\x032\x032\x032\x072\u044D\n2\f2\x0E2\u0450\v2\x032\x03" +
		"2\x032\x052\u0455\n2\x032\x032\x032\x032\x032\x032\x032\x032\x032\x05" +
		"2\u0460\n2\x033\x053\u0463\n3\x033\x033\x033\x033\x033\x033\x073\u046B" +
		"\n3\f3\x0E3\u046E\v3\x033\x033\x033\x033\x053\u0474\n3\x034\x034\x034" +
		"\x034\x054\u047A\n4\x035\x035\x035\x035\x075\u0480\n5\f5\x0E5\u0483\v" +
		"5\x036\x036\x036\x036\x036\x036\x036\x056\u048C\n6\x036\x036\x036\x03" +
		"6\x036\x036\x036\x036\x036\x036\x036\x036\x036\x036\x036\x036\x036\x03" +
		"6\x056\u04A0\n6\x037\x037\x037\x037\x057\u04A6\n7\x038\x038\x058\u04AA" +
		"\n8\x038\x038\x038\x058\u04AF\n8\x038\x038\x058\u04B3\n8\x038\x038\x03" +
		"8\x058\u04B8\n8\x038\x058\u04BB\n8\x038\x038\x038\x058\u04C0\n8\x038\x05" +
		"8\u04C3\n8\x039\x039\x039\x039\x039\x03:\x03:\x03;\x03;\x03;\x05;\u04CF" +
		"\n;\x03;\x03;\x03<\x03<\x03<\x05<\u04D6\n<\x03<\x03<\x03<\x05<\u04DB\n" +
		"<\x03<\x03<\x03<\x05<\u04E0\n<\x07<\u04E2\n<\f<\x0E<\u04E5\v<\x03<\x03" +
		"<\x05<\u04E9\n<\x03<\x05<\u04EC\n<\x03<\x03<\x03<\x03<\x03<\x03<\x07<" +
		"\u04F4\n<\f<\x0E<\u04F7\v<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x07<\u0500" +
		"\n<\f<\x0E<\u0503\v<\x03<\x03<\x07<\u0507\n<\f<\x0E<\u050A\v<\x03<\x03" +
		"<\x03<\x03<\x03<\x05<\u0511\n<\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03" +
		"=\x03=\x03=\x03=\x03=\x05=\u051F\n=\x03=\x03=\x03=\x03=\x03=\x03=\x03" +
		"=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03" +
		"=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x05=\u053E\n=\x05=\u0540\n=" +
		"\x03>\x03>\x03>\x05>\u0545\n>\x03>\x03>\x05>\u0549\n>\x03>\x03>\x03?\x05" +
		"?\u054E\n?\x03?\x03?\x03?\x03?\x03?\x05?\u0555\n?\x03?\x05?\u0558\n?\x03" +
		"@\x05@\u055B\n@\x03@\x03@\x03@\x05@\u0560\n@\x03@\x03@\x05@\u0564\n@\x05" +
		"@\u0566\n@\x03A\x03A\x03A\x03A\x03A\x05A\u056D\nA\x03A\x03A\x07A\u0571" +
		"\nA\fA\x0EA\u0574\vA\x03B\x03B\x03B\x03B\x05B\u057A\nB\x03C\x03C\x03C" +
		"\x03C\x05C\u0580\nC\x03C\x05C\u0583\nC\x03C\x03C\x03C\x05C\u0588\nC\x03" +
		"C\x03C\x05C\u058C\nC\x03C\x05C\u058F\nC\x03C\x03C\x03D\x03D\x03D\x05D" +
		"\u0596\nD\x03E\x03E\x03E\x03E\x05E\u059C\nE\x03E\x05E\u059F\nE\x03E\x03" +
		"E\x03E\x03E\x03E\x03E\x03E\x03E\x05E\u05A9\nE\x03F\x03F\x03F\x03F\x03" +
		"F\x07F\u05B0\nF\fF\x0EF\u05B3\vF\x03G\x03G\x03G\x03G\x05G\u05B9\nG\x03" +
		"G\x03G\x03G\x03G\x03G\x05G\u05C0\nG\x05G\u05C2\nG\x03H\x03H\x03H\x03H" +
		"\x05H\u05C8\nH\x03H\x05H\u05CB\nH\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03" +
		"H\x03H\x05H\u05D6\nH\x03I\x03I\x03I\x03I\x03I\x07I\u05DD\nI\fI\x0EI\u05E0" +
		"\vI\x03J\x03J\x03J\x05J\u05E5\nJ\x03K\x03K\x03K\x03K\x05K\u05EB\nK\x03" +
		"K\x05K\u05EE\nK\x03K\x03K\x03K\x05K\u05F3\nK\x03K\x05K\u05F6\nK\x03K\x05" +
		"K\u05F9\nK\x03K\x05K\u05FC\nK\x03K\x05K\u05FF\nK\x03K\x03K\x03K\x03K\x05" +
		"K\u0605\nK\x03L\x03L\x03L\x03L\x03L\x03L\x07L\u060D\nL\fL\x0EL\u0610\v" +
		"L\x03L\x03L\x03L\x03L\x03L\x03L\x07L\u0618\nL\fL\x0EL\u061B\vL\x05L\u061D" +
		"\nL\x03M\x03M\x03M\x03M\x03M\x05M\u0624\nM\x03M\x03M\x03M\x05M\u0629\n" +
		"M\x03M\x07M\u062C\nM\fM\x0EM\u062F\vM\x03M\x05M\u0632\nM\x03M\x03M\x03" +
		"M\x03M\x03M\x03M\x05M\u063A\nM\x03M\x03M\x05M\u063E\nM\x03M\x07M\u0641" +
		"\nM\fM\x0EM\u0644\vM\x03M\x05M\u0647\nM\x05M\u0649\nM\x03N\x06N\u064C" +
		"\nN\rN\x0EN\u064D\x03O\x03O\x03O\x03O\x03O\x03O\x05O\u0656\nO\x03O\x03" +
		"O\x03O\x05O\u065B\nO\x03P\x03P\x03P\x03P\x05P\u0661\nP\x03P\x03P\x03P" +
		"\x03P\x03P\x05P\u0668\nP\x03P\x05P\u066B\nP\x03Q\x03Q\x03Q\x03R\x03R\x05" +
		"R\u0672\nR\x03R\x03R\x03R\x03R\x03R\x03R\x05R\u067A\nR\x03R\x03R\x03R" +
		"\x03R\x07R\u0680\nR\fR\x0ER\u0683\vR\x05R\u0685\nR\x03R\x05R\u0688\nR" +
		"\x03S\x03S\x03S\x05S\u068D\nS\x03T\x03T\x03T\x03T\x03T\x07T\u0694\nT\f" +
		"T\x0ET\u0697\vT\x03T\x05T\u069A\nT\x03T\x03T\x03T\x03U\x03U\x03U\x03U" +
		"\x03U\x05U\u06A4\nU\x03V\x03V\x03V\x03V\x03V\x03V\x03W\x03W\x03W\x03W" +
		"\x03W\x03X\x03X\x03X\x03Y\x03Y\x03Y\x05Y\u06B7\nY\x03Z\x03Z\x03Z\x03Z" +
		"\x03Z\x05Z\u06BE\nZ\x05Z\u06C0\nZ\x03Z\x03Z\x05Z\u06C4\nZ\x03Z\x03Z\x05" +
		"Z\u06C8\nZ\x03[\x03[\x03[\x03[\x07[\u06CE\n[\f[\x0E[\u06D1\v[\x03[\x03" +
		"[\x03\\\x03\\\x03\\\x03\\\x07\\\u06D9\n\\\f\\\x0E\\\u06DC\v\\\x03]\x03" +
		"]\x03]\x03]\x07]\u06E2\n]\f]\x0E]\u06E5\v]\x03]\x03]\x03^\x03^\x03^\x05" +
		"^\u06EC\n^\x03^\x03^\x03^\x03^\x03_\x03_\x05_\u06F4\n_\x03_\x03_\x05_" +
		"\u06F8\n_\x03`\x03`\x03`\x03`\x03a\x03a\x05a\u0700\na\x03b\x03b\x03b\x03" +
		"b\x03b\x03b\x03c\x03c\x03c\x03c\x03d\x03d\x03d\x03d\x07d\u0710\nd\fd\x0E" +
		"d\u0713\vd\x03d\x03d\x03d\x03d\x03e\x03e\x03e\x03e\x03e\x03f\x03f\x05" +
		"f\u0720\nf\x03g\x03g\x03g\x03g\x03g\x05g\u0727\ng\x03g\x03g\x05g\u072B" +
		"\ng\x03h\x03h\x03h\x03h\x03h\x05h\u0732\nh\x05h\u0734\nh\x03i\x03i\x05" +
		"i\u0738\ni\x03i\x03i\x03i\x03i\x03i\x07i\u073F\ni\fi\x0Ei\u0742\vi\x03" +
		"j\x03j\x03j\x03j\x03j\x05j\u0749\nj\x03k\x03k\x03k\x03k\x03k\x07k\u0750" +
		"\nk\fk\x0Ek\u0753\vk\x03k\x03k\x03l\x03l\x03l\x03m\x03m\x03m\x03m\x03" +
		"m\x03m\x03n\x03n\x05n\u0762\nn\x03n\x03n\x03n\x03n\x05n\u0768\nn\x03n" +
		"\x03n\x05n\u076C\nn\x03o\x03o\x03o\x03o\x03o\x03o\x07o\u0774\no\fo\x0E" +
		"o\u0777\vo\x03o\x03o\x03o\x07o\u077C\no\fo\x0Eo\u077F\vo\x03p\x03p\x03" +
		"p\x03p\x03p\x03p\x05p\u0787\np\x03p\x03p\x05p\u078B\np\x03p\x03p\x07p" +
		"\u078F\np\fp\x0Ep\u0792\vp\x03q\x03q\x05q\u0796\nq\x03r\x03r\x05r\u079A" +
		"\nr\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x03s\x05s\u07A4\ns\x03t\x03t\x03" +
		"u\x03u\x05u\u07AA\nu\x03v\x03v\x05v\u07AE\nv\x03v\x03v\x03v\x03v\x03v" +
		"\x03v\x03v\x03v\x07v\u07B8\nv\fv\x0Ev\u07BB\vv\x03v\x03v\x03w\x03w\x05" +
		"w\u07C1\nw\x03x\x03x\x03y\x03y\x03y\x03y\x03y\x03y\x03y\x03y\x03y\x03" +
		"y\x07y\u07CF\ny\fy\x0Ey\u07D2\vy\x03y\x03y\x07y\u07D6\ny\fy\x0Ey\u07D9" +
		"\vy\x03z\x03z\x03z\x03z\x03z\x03z\x03z\x05z\u07E2\nz\x03{\x05{\u07E5\n" +
		"{\x03{\x03{\x05{\u07E9\n{\x03|\x03|\x03}\x03}\x03}\x05}\u07F0\n}\x03}" +
		"\x03}\x03}\x03}\x03}\x05}\u07F7\n}\x05}\u07F9\n}\x03~\x03~\x05~\u07FD" +
		"\n~\x03\x7F\x03\x7F\x05\x7F\u0801\n\x7F\x03\x80\x03\x80\x03\x80\x05\x80" +
		"\u0806\n\x80\x03\x81\x05\x81\u0809\n\x81\x03\x81\x03\x81\x05\x81\u080D" +
		"\n\x81\x03\x81\x05\x81\u0810\n\x81\x03\x81\x03\x81\x03\x82\x03\x82\x03" +
		"\x82\x03\x83\x03\x83\x03\x83\x03\x83\x05\x83\u081B\n\x83\x03\x83\x05\x83" +
		"\u081E\n\x83\x03\x83\x03\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x85\x03" +
		"\x85\x03\x85\x05\x85\u0829\n\x85\x03\x85\x03\x85\x03\x85\x03\x85\x05\x85" +
		"\u082F\n\x85\x03\x85\x03\x85\x05\x85\u0833\n\x85\x05\x85\u0835\n\x85\x03" +
		"\x86\x03\x86\x05\x86\u0839\n\x86\x03\x86\x03\x86\x03\x87\x03\x87\x03\x87" +
		"\x03\x88\x03\x88\x05\x88\u0842\n\x88\x03\x88\x03\x88\x03\x88\x07\x88\u0847" +
		"\n\x88\f\x88\x0E\x88\u084A\v\x88\x03\x88\x05\x88\u084D\n\x88\x03\x88\x03" +
		"\x88\x05\x88\u0851\n\x88\x03\x88\x03\x88\x03\x88\x07\x88\u0856\n\x88\f" +
		"\x88\x0E\x88\u0859\v\x88\x03\x88\x05\x88\u085C\n\x88\x03\x89\x03\x89\x03" +
		"\x89\x03\x89\x03\x89\x03\x89\x05\x89\u0864\n\x89\x03\x8A\x03\x8A\x03\x8A" +
		"\x03\x8A\x05\x8A\u086A\n\x8A\x03\x8A\x03\x8A\x05\x8A\u086E\n\x8A\x03\x8A" +
		"\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x05\x8B" +
		"\u0879\n\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x05\x8B\u0880\n\x8B" +
		"\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C" +
		"\x03\x8C\x03\x8C\x05\x8C\u088D\n\x8C\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x07" +
		"\x8D\u0893\n\x8D\f\x8D\x0E\x8D\u0896\v\x8D\x03\x8E\x05\x8E\u0899\n\x8E" +
		"\x03\x8E\x03\x8E\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x07\x8F\u08A1\n\x8F\f" +
		"\x8F\x0E\x8F\u08A4\v\x8F\x03\x90\x03\x90\x05\x90\u08A8\n\x90\x03\x90\x03" +
		"\x90\x03\x90\x03\x90\x03\x90\x03\x91\x03\x91\x03\x91\x03\x91\x07\x91\u08B3" +
		"\n\x91\f\x91\x0E\x91\u08B6\v\x91\x03\x91\x03\x91\x03\x92\x03\x92\x03\x92" +
		"\x03\x92\x07\x92\u08BE\n\x92\f\x92\x0E\x92\u08C1\v\x92\x03\x93\x03\x93" +
		"\x03\x93\x03\x93\x03\x93\x05\x93\u08C8\n\x93\x03\x94\x03\x94\x05\x94\u08CC" +
		"\n\x94\x03\x94\x03\x94\x05\x94\u08D0\n\x94\x03\x94\x03\x94\x05\x94\u08D4" +
		"\n\x94\x05\x94\u08D6\n\x94\x03\x95\x03\x95\x03\x95\x05\x95\u08DB\n\x95" +
		"\x03\x95\x05\x95\u08DE\n\x95\x03\x95\x05\x95\u08E1\n\x95\x03\x95\x05\x95" +
		"\u08E4\n\x95\x03\x95\x03\x95\x05\x95\u08E8\n\x95\x03\x95\x05\x95\u08EB" +
		"\n\x95\x03\x95\x05\x95\u08EE\n\x95\x03\x96\x05\x96\u08F1\n\x96\x03\x96" +
		"\x05\x96\u08F4\n\x96\x03\x96\x03\x96\x03\x96\x07\x96\u08F9\n\x96\f\x96" +
		"\x0E\x96\u08FC\v\x96\x03\x97\x03\x97\x03\x98\x03\x98\x03\x98\x03\x99\x03" +
		"\x99\x03\x99\x05\x99\u0906\n\x99\x03\x99\x03\x99\x05\x99\u090A\n\x99\x03" +
		"\x99\x05\x99\u090D\n\x99\x03\x9A\x03\x9A\x05\x9A\u0911\n\x9A\x03\x9A\x03" +
		"\x9A\x03\x9A";
	private static readonly _serializedATNSegment1: string =
		"\x03\x9A\x03\x9A\x05\x9A\u0918\n\x9A\x03\x9B\x03\x9B\x05\x9B\u091C\n\x9B" +
		"\x03\x9B\x03\x9B\x03\x9C\x03\x9C\x03\x9C\x03\x9C\x07\x9C\u0924\n\x9C\f" +
		"\x9C\x0E\x9C\u0927\v\x9C\x03\x9D\x03\x9D\x03\x9D\x07\x9D\u092C\n\x9D\f" +
		"\x9D\x0E\x9D\u092F\v\x9D\x03\x9E\x03\x9E\x03\x9E\x05\x9E\u0934\n\x9E\x03" +
		"\x9F\x03\x9F\x05\x9F\u0938\n\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x05\xA0" +
		"\u093E\n\xA0\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x05" +
		"\xA1\u0947\n\xA1\x03\xA2\x05\xA2\u094A\n\xA2\x03\xA2\x03\xA2\x03\xA2\x05" +
		"\xA2\u094F\n\xA2\x03\xA2\x05\xA2\u0952\n\xA2\x03\xA3\x03\xA3\x03\xA3\x03" +
		"\xA3\x03\xA3\x03\xA3\x07\xA3\u095A\n\xA3\f\xA3\x0E\xA3\u095D\v\xA3\x03" +
		"\xA3\x03\xA3\x05\xA3\u0961\n\xA3\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4" +
		"\x07\xA4\u0968\n\xA4\f\xA4\x0E\xA4\u096B\v\xA4\x03\xA4\x03\xA4\x05\xA4" +
		"\u096F\n\xA4\x03\xA5\x03\xA5\x05\xA5\u0973\n\xA5\x03\xA5\x03\xA5\x03\xA5" +
		"\x03\xA5\x03\xA5\x07\xA5\u097A\n\xA5\f\xA5\x0E\xA5\u097D\v\xA5\x03\xA5" +
		"\x05\xA5\u0980\n\xA5\x03\xA6\x03\xA6\x03\xA7\x03\xA7\x03\xA7\x03\xA8\x03" +
		"\xA8\x03\xA8\x03\xA8\x03\xA8\x07\xA8\u098C\n\xA8\f\xA8\x0E\xA8\u098F\v" +
		"\xA8\x03\xA9\x03\xA9\x03\xA9\x03\xAA\x03\xAA\x03\xAA\x03\xAB\x03\xAB\x03" +
		"\xAB\x03\xAB\x05\xAB\u099B\n\xAB\x03\xAB\x03\xAB\x03\xAB\x05\xAB\u09A0" +
		"\n\xAB\x07\xAB\u09A2\n\xAB\f\xAB\x0E\xAB\u09A5\v\xAB\x03\xAC\x06\xAC\u09A8" +
		"\n\xAC\r\xAC\x0E\xAC\u09A9\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03" +
		"\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u09B5\n\xAD\x05\xAD\u09B7\n\xAD\x03" +
		"\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x05\xAE\u09BE\n\xAE\x03\xAE\x05\xAE" +
		"\u09C1\n\xAE\x03\xAF\x03\xAF\x03\xAF\x07\xAF\u09C6\n\xAF\f\xAF\x0E\xAF" +
		"\u09C9\v\xAF\x03\xB0\x03\xB0\x05\xB0\u09CD\n\xB0\x03\xB0\x03\xB0\x03\xB0" +
		"\x03\xB0\x05\xB0\u09D3\n\xB0\x03\xB0\x05\xB0\u09D6\n\xB0\x03\xB0\x05\xB0" +
		"\u09D9\n\xB0\x03\xB1\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03" +
		"\xB2\x03\xB2\x03\xB2\x03\xB2\x06\xB2\u09E6\n\xB2\r\xB2\x0E\xB2\u09E7\x03" +
		"\xB3\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x05\xB3\u09EF\n\xB3\x03\xB3\x05\xB3" +
		"\u09F2\n\xB3\x03\xB3\x05\xB3\u09F5\n\xB3\x03\xB4\x03\xB4\x05\xB4\u09F9" +
		"\n\xB4\x03\xB4\x03\xB4\x03\xB4\x05\xB4\u09FE\n\xB4\x03\xB4\x03\xB4\x03" +
		"\xB4\x03\xB4\x05\xB4\u0A04\n\xB4\x03\xB5\x03\xB5\x05\xB5\u0A08\n\xB5\x03" +
		"\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x07\xB5\u0A11\n\xB5" +
		"\f\xB5\x0E\xB5\u0A14\v\xB5\x03\xB5\x05\xB5\u0A17\n\xB5\x03\xB5\x05\xB5" +
		"\u0A1A\n\xB5\x03\xB6\x03\xB6\x05\xB6\u0A1E\n\xB6\x03\xB6\x03\xB6\x05\xB6" +
		"\u0A22\n\xB6\x03\xB6\x03\xB6\x05\xB6\u0A26\n\xB6\x03\xB7\x03\xB7\x05\xB7" +
		"\u0A2A\n\xB7\x03\xB7\x03\xB7\x03\xB8\x03\xB8\x05\xB8\u0A30\n\xB8\x03\xB8" +
		"\x03\xB8\x03\xB9\x03\xB9\x05\xB9\u0A36\n\xB9\x03\xB9\x03\xB9\x03\xB9\x03" +
		"\xB9\x03\xB9\x05\xB9\u0A3D\n\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x07\xB9" +
		"\u0A43\n\xB9\f\xB9\x0E\xB9\u0A46\v\xB9\x03\xBA\x03\xBA\x03\xBA\x05\xBA" +
		"\u0A4B\n\xBA\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u0A50\n\xBB\x03\xBB\x03\xBB" +
		"\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u0A5B" +
		"\n\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB\x05\xBB" +
		"\u0A64\n\xBB\x03\xBC\x03\xBC\x05\xBC\u0A68\n\xBC\x03\xBC\x03\xBC\x03\xBC" +
		"\x03\xBC\x03\xBC\x07\xBC\u0A6F\n\xBC\f\xBC\x0E\xBC\u0A72\v\xBC\x03\xBC" +
		"\x05\xBC\u0A75\n\xBC\x03\xBC\x03\xBC\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x07" +
		"\xBD\u0A7D\n\xBD\f\xBD\x0E\xBD\u0A80\v\xBD\x03\xBD\x03\xBD\x05\xBD\u0A84" +
		"\n\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBE\x03\xBE\x03\xBE" +
		"\x03\xBE\x03\xBF\x03\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0" +
		"\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u0A9A\n\xC0\x03\xC0\x05\xC0\u0A9D\n\xC0" +
		"\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1" +
		"\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x05\xC1" +
		"\u0AB0\n\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03" +
		"\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x07\xC1\u0AC0\n\xC1" +
		"\f\xC1\x0E\xC1\u0AC3\v\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03" +
		"\xC2\x03\xC2\x03\xC2\x05\xC2\u0ACD\n\xC2\x03\xC3\x03\xC3\x03\xC3\x03\xC3" +
		"\x03\xC4\x03\xC4\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x07\xC5\u0ADA" +
		"\n\xC5\f\xC5\x0E\xC5\u0ADD\v\xC5\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6" +
		"\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x05\xC6\u0AE8\n\xC6\x03\xC7\x03\xC7\x05" +
		"\xC7\u0AEC\n\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8\x03\xC8" +
		"\x06\xC8\u0AF5\n\xC8\r\xC8\x0E\xC8\u0AF6\x03\xC8\x03\xC8\x05\xC8\u0AFB" +
		"\n\xC8\x03\xC8\x03\xC8\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9" +
		"\x06\xC9\u0B05\n\xC9\r\xC9\x0E\xC9\u0B06\x03\xC9\x03\xC9\x05\xC9\u0B0B" +
		"\n\xC9\x03\xC9\x03\xC9\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCB\x03\xCB" +
		"\x03\xCB\x05\xCB\u0B16\n\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0B1B\n\xCB" +
		"\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0B20\n\xCB\x03\xCB\x03\xCB\x05\xCB\u0B24" +
		"\n\xCB\x03\xCB\x03\xCB\x05\xCB\u0B28\n\xCB\x03\xCB\x03\xCB\x03\xCB\x05" +
		"\xCB\u0B2D\n\xCB\x03\xCB\x03\xCB\x05\xCB\u0B31\n\xCB\x03\xCB\x03\xCB\x05" +
		"\xCB\u0B35\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
		"\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
		"\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0B4C\n\xCB\x05\xCB\u0B4E" +
		"\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
		"\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB" +
		"\u0B60\n\xCB\x05\xCB\u0B62\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
		"\x03\xCB\x05\xCB\u0B6A\n\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0B6F\n\xCB" +
		"\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0B74\n\xCB\x03\xCB\x03\xCB\x03\xCB\x05" +
		"\xCB\u0B79\n\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB" +
		"\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0B86\n\xCB\x03\xCB\x03\xCB\x03" +
		"\xCB\x05\xCB\u0B8B\n\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0B90\n\xCB\x03" +
		"\xCB\x03\xCB\x03\xCB\x05\xCB\u0B95\n\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB" +
		"\u0B9A\n\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0B9F\n\xCB\x03\xCB\x03\xCB" +
		"\x03\xCB\x05\xCB\u0BA4\n\xCB\x03\xCB\x03\xCB\x03\xCB\x05\xCB\u0BA9\n\xCB" +
		"\x05\xCB\u0BAB\n\xCB\x03\xCC\x03\xCC\x03\xCD\x03\xCD\x03\xCD\x05\xCD\u0BB2" +
		"\n\xCD\x03\xCD\x05\xCD\u0BB5\n\xCD\x03\xCD\x03\xCD\x03\xCE\x03\xCE\x03" +
		"\xCE\x03\xCE\x03\xCE\x07\xCE\u0BBE\n\xCE\f\xCE\x0E\xCE\u0BC1\v\xCE\x03" +
		"\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x05\xCF\u0BCA\n\xCF" +
		"\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x05\xCF\u0BD2\n\xCF\x03" +
		"\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x05\xCF\u0BDB\n\xCF" +
		"\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x05\xCF\u0BE1\n\xCF\x03\xCF\x03\xCF\x03" +
		"\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03" +
		"\xCF\x03\xCF\x07\xCF\u0BF0\n\xCF\f\xCF\x0E\xCF\u0BF3\v\xCF\x05\xCF\u0BF5" +
		"\n\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF" +
		"\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x07\xCF\u0C03\n\xCF\f\xCF\x0E\xCF\u0C06" +
		"\v\xCF\x05\xCF\u0C08\n\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03" +
		"\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x07\xCF\u0C16\n\xCF" +
		"\f\xCF\x0E\xCF\u0C19\v\xCF\x05\xCF\u0C1B\n\xCF\x03\xCF\x03\xCF\x03\xCF" +
		"\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF" +
		"\x07\xCF\u0C29\n\xCF\f\xCF\x0E\xCF\u0C2C\v\xCF\x05\xCF\u0C2E\n\xCF\x03" +
		"\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03" +
		"\xCF\x03\xCF\x03\xCF\x07\xCF\u0C3C\n\xCF\f\xCF\x0E\xCF\u0C3F\v\xCF\x05" +
		"\xCF\u0C41\n\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF" +
		"\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x07\xCF\u0C4F\n\xCF\f\xCF\x0E" +
		"\xCF\u0C52\v\xCF\x05\xCF\u0C54\n\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03" +
		"\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x07\xCF\u0C60\n\xCF\f\xCF" +
		"\x0E\xCF\u0C63\v\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03" +
		"\xCF\x03\xCF\x03\xCF\x03\xCF\x06\xCF\u0C6F\n\xCF\r\xCF\x0E\xCF\u0C70\x03" +
		"\xCF\x03\xCF\x05\xCF\u0C75\n\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF" +
		"\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF" +
		"\x05\xCF\u0C85\n\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x05\xCF\u0C8B\n\xCF" +
		"\x03\xD0\x03\xD0\x03\xD0\x05\xD0\u0C90\n\xD0\x03\xD0\x03\xD0\x03\xD1\x03" +
		"\xD1\x03\xD1\x07\xD1\u0C97\n\xD1\f\xD1\x0E\xD1\u0C9A\v\xD1\x03\xD2\x03" +
		"\xD2\x03\xD2\x03\xD2\x05\xD2\u0CA0\n\xD2\x05\xD2\u0CA2\n\xD2\x03\xD2\x03" +
		"\xD2\x03\xD3\x03\xD3\x05\xD3\u0CA8\n\xD3\x03\xD4\x03\xD4\x05\xD4\u0CAC" +
		"\n\xD4\x03\xD5\x03\xD5\x07\xD5\u0CB0\n\xD5\f\xD5\x0E\xD5\u0CB3\v\xD5\x03" +
		"\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03" +
		"\xD6\x03\xD6\x03\xD6\x05\xD6\u0CC1\n\xD6\x03\xD7\x03\xD7\x03\xD7\x03\xD7" +
		"\x03\xD7\x05\xD7\u0CC8\n\xD7\x03\xD8\x07\xD8\u0CCB\n\xD8\f\xD8\x0E\xD8" +
		"\u0CCE\v\xD8\x03\xD9\x03\xD9\x03\xD9\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x05" +
		"\xDA\u0CD7\n\xDA\x03\xDA\x03\xDA\x03\xDA\x07\xDA\u0CDC\n\xDA\f\xDA\x0E" +
		"\xDA\u0CDF\v\xDA\x05\xDA\u0CE1\n\xDA\x03\xDB\x03\xDB\x03\xDB\x03\xDC\x03" +
		"\xDC\x03\xDC\x03\xDD\x03\xDD\x05\xDD\u0CEB\n\xDD\x03\xDD\x03\xDD\x03\xDD" +
		"\x05\xDD\u0CF0\n\xDD\x07\xDD\u0CF2\n\xDD\f\xDD\x0E\xDD\u0CF5\v\xDD\x03" +
		"\xDE\x03\xDE\x05\xDE\u0CF9\n\xDE\x03\xDF\x05\xDF\u0CFC\n\xDF\x03\xDF\x03" +
		"\xDF\x03\xE0\x05\xE0\u0D01\n\xE0\x03\xE0\x03\xE0\x03\xE1\x03\xE1\x03\xE2" +
		"\x03\xE2\x03\xE3\x03\xE3\x03\xE3\x03\u0CCC\x02\x04\u0170\u0180\xE4\x02" +
		"\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02" +
		"\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02" +
		",\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02" +
		"H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02" +
		"d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02" +
		"\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02" +
		"\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02" +
		"\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02" +
		"\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02" +
		"\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02" +
		"\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02" +
		"\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02" +
		"\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C" +
		"\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A" +
		"\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128" +
		"\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136" +
		"\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144" +
		"\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152" +
		"\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160" +
		"\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\u016E" +
		"\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02\u017A\x02\u017C" +
		"\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02\u0188\x02\u018A" +
		"\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02\u0196\x02\u0198" +
		"\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6" +
		"\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4" +
		"\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0\x02\u01C2" +
		"\x02\u01C4\x02\x023\x06\x02\u0159\u0159\u015E\u015E\u0168\u0168\u016F" +
		"\u016F\x04\x02__\u0134\u0134\x03\x02\xA5\xA6\x05\x02\v\vpp\x96\x96\x04" +
		"\x02\x1E\x1E&&\x04\x0244hh\x04\x02\xB5\xB5\xFD\xFD\x04\x02\f\fPP\x04\x02" +
		"MM\u0129\u0129\x04\x02ii\xA8\xA8\x04\x02MM\xD5\xD5\x04\x02II\x85\x85\x05" +
		"\x02\x89\x89\xAF\xAF\xD1\xD2\x04\x02\xAA\xAA\xBC\xBC\x04\x02\xB9\xB9\u013C" +
		"\u013C\x04\x02\xF0\xF0\u0126\u0126\x04\x02\xAE\xAE\u0174\u0174\x04\x02" +
		"\x1C\x1C##\x04\x02!!;;\x04\x02??\xF6\xF6\x04\x02\v\v\x96\x96\x03\x02\xE7" +
		"\xE8\x03\x02\xD8\xD9\x06\x02::KK\x95\x95\xCE\xCE\x03\x02cd\x03\x02\\]" +
		"\x03\x02\u010D\u010E\x04\x02\xF1\xF1\u0115\u0115\x05\x02MM\x84\x84\xCD" +
		"\xCD\x06\x02\t\n\xBA\xBA\xDD\xDD\u013A\u013A\x03\x02\xC4\xC5\x04\x02\xFE" +
		"\xFE\u0123\u0123\x06\x02\x12\x12WW\xAB\xAB\u011D\u011D\x04\x02\xAB\xAB" +
		"\u0136\u0136\x04\x02\x1B\x1B\u010F\u010F\x03\x02\xFB\xFC\x04\x02\x05\x05" +
		"UU\x05\x02uu\x9F\x9F\xEA\xEA\x05\x02;;\xF2\xF3\u012A\u012A\x05\x02ff\u0101" +
		"\u0101\u0129\u0129\x03\x02PQ\x04\x02\b\b\xC8\xC8\x05\x02\xA0\xA0\xE1\xE1" +
		"\xEB\xEB\x05\x02CD\xB2\xB3\xF7\xF8\x04\x0211\u0158\u0158\x05\x02ss\x97" +
		"\x97\xBF\xBF\x04\x02\u0155\u0155\u0170\u0170\x04\x02jj\u0124\u0124\x0E" +
		"\x02\x03\x16\x18Z^^`\xBF\xC1\xD2\xD4\xEF\xF1\u0104\u0106\u011E\u0120\u0125" +
		"\u0128\u0133\u0136\u0146\u014D\u0154\x02\u0EB3\x02\u01C6\x03\x02\x02\x02" +
		"\x04\u01D0\x03\x02\x02\x02\x06\u01D5\x03\x02\x02\x02\b\u01E9\x03\x02\x02" +
		"\x02\n\u01EB\x03\x02\x02\x02\f\u01F7\x03\x02\x02\x02\x0E\u0236\x03\x02" +
		"\x02\x02\x10\u0238\x03\x02\x02\x02\x12\u023A\x03\x02\x02\x02\x14\u0240" +
		"\x03\x02\x02\x02\x16\u0246\x03\x02\x02\x02\x18\u0248\x03\x02\x02\x02\x1A" +
		"\u0258\x03\x02\x02\x02\x1C\u025D\x03\x02\x02\x02\x1E\u026F\x03\x02\x02" +
		"\x02 \u0271\x03\x02\x02\x02\"\u0296\x03\x02\x02\x02$\u02A0\x03\x02\x02" +
		"\x02&\u02AB\x03\x02\x02\x02(\u02BF\x03\x02\x02\x02*\u02C2\x03\x02\x02" +
		"\x02,\u02C4\x03\x02\x02\x02.\u02CE\x03\x02\x02\x020\u02D7\x03\x02\x02" +
		"\x022\u02E2\x03\x02\x02\x024\u02F1\x03\x02\x02\x026\u0316\x03\x02\x02" +
		"\x028\u0318\x03\x02\x02\x02:\u0320\x03\x02\x02\x02<\u032B\x03\x02\x02" +
		"\x02>\u0334\x03\x02\x02\x02@\u0337\x03\x02\x02\x02B\u0344\x03\x02\x02" +
		"\x02D\u034E\x03\x02\x02\x02F\u035B\x03\x02\x02\x02H\u037A\x03\x02\x02" +
		"\x02J\u037F\x03\x02\x02\x02L\u039D\x03\x02\x02\x02N\u039F\x03\x02\x02" +
		"\x02P\u03C1\x03\x02\x02\x02R\u03FC\x03\x02\x02\x02T\u03FE\x03\x02\x02" +
		"\x02V\u040B\x03\x02\x02\x02X\u0412\x03\x02\x02\x02Z\u0415\x03\x02\x02" +
		"\x02\\\u041A\x03\x02\x02\x02^\u0428\x03\x02\x02\x02`\u043C\x03\x02\x02" +
		"\x02b\u045F\x03\x02\x02\x02d\u0473\x03\x02\x02\x02f\u0479\x03\x02\x02" +
		"\x02h\u047B\x03\x02\x02\x02j\u049F\x03\x02\x02\x02l\u04A5\x03\x02\x02" +
		"\x02n\u04C2\x03\x02\x02\x02p\u04C4\x03\x02\x02\x02r\u04C9\x03\x02\x02" +
		"\x02t\u04CB\x03\x02\x02\x02v\u0510\x03\x02\x02\x02x\u053F\x03\x02\x02" +
		"\x02z\u0541\x03\x02\x02\x02|\u0557\x03\x02\x02\x02~\u0565\x03\x02\x02" +
		"\x02\x80\u0567\x03\x02\x02\x02\x82\u0579\x03\x02\x02\x02\x84\u0582\x03" +
		"\x02\x02\x02\x86\u0592\x03\x02\x02\x02\x88\u059E\x03\x02\x02\x02\x8A\u05AA" +
		"\x03\x02\x02\x02\x8C\u05C1\x03\x02\x02\x02\x8E\u05CA\x03\x02\x02\x02\x90" +
		"\u05D7\x03\x02\x02\x02\x92\u05E4\x03\x02\x02\x02\x94\u05ED\x03\x02\x02" +
		"\x02\x96\u061C\x03\x02\x02\x02\x98\u0648\x03\x02\x02\x02\x9A\u064B\x03" +
		"\x02\x02\x02\x9C\u065A\x03\x02\x02\x02\x9E\u066A\x03\x02\x02\x02\xA0\u066C" +
		"\x03\x02\x02\x02\xA2\u066F\x03\x02\x02\x02\xA4\u068C\x03\x02\x02\x02\xA6" +
		"\u068E\x03\x02\x02\x02\xA8\u069E\x03\x02\x02\x02\xAA\u06A5\x03\x02\x02" +
		"\x02\xAC\u06AB\x03\x02\x02\x02\xAE\u06B0\x03\x02\x02\x02\xB0\u06B3\x03" +
		"\x02\x02\x02\xB2\u06B8\x03\x02\x02\x02\xB4\u06C9\x03\x02\x02\x02\xB6\u06D4" +
		"\x03\x02\x02\x02\xB8\u06DD\x03\x02\x02\x02\xBA\u06E8\x03\x02\x02\x02\xBC" +
		"\u06F1\x03\x02\x02\x02\xBE\u06F9\x03\x02\x02\x02\xC0\u06FF\x03\x02\x02" +
		"\x02\xC2\u0701\x03\x02\x02\x02\xC4\u0707\x03\x02\x02\x02\xC6\u070B\x03" +
		"\x02\x02\x02\xC8\u0718\x03\x02\x02\x02\xCA\u071D\x03\x02\x02\x02\xCC\u0721" +
		"\x03\x02\x02\x02\xCE\u072C\x03\x02\x02\x02\xD0\u0735\x03\x02\x02\x02\xD2" +
		"\u0743\x03\x02\x02\x02\xD4\u074A\x03\x02\x02\x02\xD6\u0756\x03\x02\x02" +
		"\x02\xD8\u0759\x03\x02\x02\x02\xDA\u0767\x03\x02\x02\x02\xDC\u076D\x03" +
		"\x02\x02\x02\xDE\u0780\x03\x02\x02\x02\xE0\u0795\x03\x02\x02\x02\xE2\u0799" +
		"\x03\x02\x02\x02\xE4\u07A3\x03\x02\x02\x02\xE6\u07A5\x03\x02\x02\x02\xE8" +
		"\u07A7\x03\x02\x02\x02\xEA\u07AB\x03\x02\x02\x02\xEC\u07BE\x03\x02\x02" +
		"\x02\xEE\u07C2\x03\x02\x02\x02\xF0\u07C4\x03\x02\x02\x02\xF2\u07E1\x03" +
		"\x02\x02\x02\xF4\u07E4\x03\x02\x02\x02\xF6\u07EA\x03\x02\x02\x02\xF8\u07EC" +
		"\x03\x02\x02\x02\xFA\u07FA\x03\x02\x02\x02\xFC\u07FE\x03\x02\x02\x02\xFE" +
		"\u0805\x03\x02\x02\x02\u0100\u080C\x03\x02\x02\x02\u0102\u0813\x03\x02" +
		"\x02\x02\u0104\u0816\x03\x02\x02\x02\u0106\u0822\x03\x02\x02\x02\u0108" +
		"\u0825\x03\x02\x02\x02\u010A\u0836\x03\x02\x02\x02\u010C\u083C\x03\x02" +
		"\x02\x02\u010E\u083F\x03\x02\x02\x02\u0110\u085D\x03\x02\x02\x02\u0112" +
		"\u0865\x03\x02\x02\x02\u0114\u0874\x03\x02\x02\x02\u0116\u088C\x03\x02" +
		"\x02\x02\u0118\u088E\x03\x02\x02\x02\u011A\u0898\x03\x02\x02\x02\u011C" +
		"\u089C\x03\x02\x02\x02\u011E\u08A5\x03\x02\x02\x02\u0120\u08AE\x03\x02" +
		"\x02\x02\u0122\u08B9\x03\x02\x02\x02\u0124\u08C7\x03\x02\x02\x02\u0126" +
		"\u08D5\x03\x02\x02\x02\u0128\u08D7\x03\x02\x02\x02\u012A\u08F0\x03\x02" +
		"\x02\x02\u012C\u08FD\x03\x02\x02\x02\u012E\u08FF\x03\x02\x02\x02\u0130" +
		"\u090C\x03\x02\x02\x02\u0132\u0917\x03\x02\x02\x02\u0134\u091B\x03\x02" +
		"\x02\x02\u0136\u091F\x03\x02\x02\x02\u0138\u0928\x03\x02\x02\x02\u013A" +
		"\u0933\x03\x02\x02\x02\u013C\u0935\x03\x02\x02\x02\u013E\u0939\x03\x02" +
		"\x02\x02\u0140\u0946\x03\x02\x02\x02\u0142\u0951\x03\x02\x02\x02\u0144" +
		"\u0953\x03\x02\x02\x02\u0146\u096E\x03\x02\x02\x02\u0148\u0970\x03\x02" +
		"\x02\x02\u014A\u0981\x03\x02\x02\x02\u014C\u0983\x03\x02\x02\x02\u014E" +
		"\u0986\x03\x02\x02\x02\u0150\u0990\x03\x02\x02\x02\u0152\u0993\x03\x02" +
		"\x02\x02\u0154\u0996\x03\x02\x02\x02\u0156\u09A7\x03\x02\x02\x02\u0158" +
		"\u09B6\x03\x02\x02\x02\u015A\u09B8\x03\x02\x02\x02\u015C\u09C2\x03\x02" +
		"\x02\x02\u015E\u09D2\x03\x02\x02\x02\u0160\u09DA\x03\x02\x02\x02\u0162" +
		"\u09DD\x03\x02\x02\x02\u0164\u09EE\x03\x02\x02\x02\u0166\u0A03\x03\x02" +
		"\x02\x02\u0168\u0A19\x03\x02\x02\x02\u016A\u0A1B\x03\x02\x02\x02\u016C" +
		"\u0A27\x03\x02\x02\x02\u016E\u0A2D\x03\x02\x02\x02\u0170\u0A3C\x03\x02" +
		"\x02\x02\u0172\u0A4A\x03\x02\x02\x02\u0174\u0A63\x03\x02\x02\x02\u0176" +
		"\u0A65\x03\x02\x02\x02\u0178\u0A78\x03\x02\x02\x02\u017A\u0A8A\x03\x02" +
		"\x02\x02\u017C\u0A8E\x03\x02\x02\x02\u017E\u0A9C\x03\x02\x02\x02\u0180" +
		"\u0AAF\x03\x02\x02\x02\u0182\u0ACC\x03\x02\x02\x02\u0184\u0ACE\x03\x02" +
		"\x02\x02\u0186\u0AD2\x03\x02\x02\x02\u0188\u0AD4\x03\x02\x02\x02\u018A" +
		"\u0AE7\x03\x02\x02\x02\u018C\u0AEB\x03\x02\x02\x02\u018E\u0AED\x03\x02" +
		"\x02\x02\u0190\u0AFE\x03\x02\x02\x02\u0192\u0B0E\x03\x02\x02\x02\u0194" +
		"\u0BAA\x03\x02\x02\x02\u0196\u0BAC\x03\x02\x02\x02\u0198\u0BAE\x03\x02" +
		"\x02\x02\u019A\u0BB8\x03\x02\x02\x02\u019C\u0C8A\x03\x02\x02\x02\u019E" +
		"\u0C8C\x03\x02\x02\x02\u01A0\u0C93\x03\x02\x02\x02\u01A2\u0C9B\x03\x02" +
		"\x02\x02\u01A4\u0CA7\x03\x02\x02\x02\u01A6\u0CAB\x03\x02\x02\x02\u01A8" +
		"\u0CAD\x03\x02\x02\x02\u01AA\u0CC0\x03\x02\x02\x02\u01AC\u0CC7\x03\x02" +
		"\x02\x02\u01AE\u0CCC\x03\x02\x02\x02\u01B0\u0CCF\x03\x02\x02\x02\u01B2" +
		"\u0CE0\x03\x02\x02\x02\u01B4\u0CE2\x03\x02\x02\x02\u01B6\u0CE5\x03\x02" +
		"\x02\x02\u01B8\u0CEA\x03\x02\x02\x02\u01BA\u0CF8\x03\x02\x02\x02\u01BC" +
		"\u0CFB\x03\x02\x02\x02\u01BE\u0D00\x03\x02\x02\x02\u01C0\u0D04\x03\x02" +
		"\x02\x02\u01C2\u0D06\x03\x02\x02\x02\u01C4\u0D08\x03\x02\x02\x02\u01C6" +
		"\u01C7\x05\x04\x03\x02\u01C7\u01C8\x07\x02\x02\x03\u01C8\x03\x03\x02\x02" +
		"\x02\u01C9\u01CC\x05\x06\x04\x02\u01CA\u01CC\x05\x0E\b\x02\u01CB\u01C9" +
		"\x03\x02\x02\x02\u01CB\u01CA\x03\x02\x02\x02\u01CC\u01CE\x03\x02\x02\x02" +
		"\u01CD\u01CF\x07y\x02\x02\u01CE\u01CD\x03\x02\x02\x02\u01CE\u01CF\x03" +
		"\x02\x02\x02\u01CF\u01D1\x03\x02\x02\x02\u01D0\u01CB\x03\x02\x02\x02\u01D1" +
		"\u01D2\x03\x02\x02\x02\u01D2\u01D0\x03\x02\x02\x02\u01D2\u01D3\x03\x02" +
		"\x02\x02\u01D3\x05\x03\x02\x02\x02\u01D4\u01D6\x050\x19\x02\u01D5\u01D4" +
		"\x03\x02\x02\x02\u01D5\u01D6\x03\x02\x02\x02\u01D6\u01D7\x03\x02\x02\x02" +
		"\u01D7\u01D8\x07\x12\x02\x02\u01D8\u01DA\x05\x04\x03\x02\u01D9\u01DB\x05" +
		"\x12\n\x02\u01DA\u01D9\x03\x02\x02\x02\u01DA\u01DB\x03\x02\x02\x02\u01DB" +
		"\u01DC\x03\x02\x02\x02\u01DC\u01DD\x05\n\x06\x02\u01DD\x07\x03\x02\x02" +
		"\x02\u01DE\u01DF\x07\x12\x02\x02\u01DF\u01E1\x05\x04\x03\x02\u01E0\u01E2" +
		"\x05\x12\n\x02\u01E1\u01E0\x03\x02\x02\x02\u01E1\u01E2\x03\x02\x02\x02" +
		"\u01E2\u01E3\x03\x02\x02\x02\u01E3\u01E4\x05\n\x06\x02\u01E4\u01EA\x03" +
		"\x02\x02\x02\u01E5\u01E7\x05\x0E\b\x02\u01E6\u01E8\x07\u016F\x02\x02\u01E7" +
		"\u01E6\x03\x02\x02\x02\u01E7\u01E8\x03\x02\x02\x02\u01E8\u01EA\x03\x02" +
		"\x02\x02\u01E9\u01DE\x03\x02\x02\x02\u01E9\u01E5\x03\x02\x02\x02\u01EA" +
		"\t\x03\x02\x02\x02\u01EB\u01EC\x06\x06\x02\x02\u01EC\u01ED\x07_\x02\x02" +
		"\u01ED\v\x03\x02\x02\x02\u01EE\u01F8\x05\x06\x04\x02\u01EF\u01F1\x05\x0E" +
		"\b\x02\u01F0\u01EF\x03\x02\x02\x02\u01F1\u01F2\x03\x02\x02\x02\u01F2\u01F0" +
		"\x03\x02\x02\x02\u01F2\u01F3\x03\x02\x02\x02\u01F3\u01F5\x03\x02\x02\x02" +
		"\u01F4\u01F6\x07y\x02\x02\u01F5\u01F4\x03\x02\x02\x02\u01F5\u01F6\x03" +
		"\x02\x02\x02\u01F6\u01F8\x03\x02\x02\x02\u01F7\u01EE\x03\x02\x02\x02\u01F7" +
		"\u01F0\x03\x02\x02\x02\u01F8\r\x03\x02\x02\x02\u01F9\u0237\x05\x1A\x0E" +
		"\x02\u01FA\u0237\x05$\x13\x02\u01FB\u0237\x05p9\x02\u01FC\u0237\x05&\x14" +
		"\x02\u01FD\u0237\x05(\x15\x02\u01FE\u0237\x05*\x16\x02\u01FF\u0237\x05" +
		",\x17\x02\u0200\u0237\x05\xD2j\x02\u0201\u0237\x05\xD6l\x02\u0202\u0237" +
		"\x05\xD8m\x02\u0203\u0237\x05\xDCo\x02\u0204\u0237\x05\xDEp\x02\u0205" +
		"\u0237\x05\xE8u\x02\u0206\u0237\x05\x80A\x02\u0207\u0237\x05\x84C\x02" +
		"\u0208\u0237\x05\xEAv\x02\u0209\u0237\x05F$\x02\u020A\u0237\x05\x88E\x02" +
		"\u020B\u0237\x05\x8EH\x02\u020C\u0237\x05\x94K\x02\u020D\u0237\x05D#\x02" +
		"\u020E\u0237\x05.\x18\x02\u020F\u0237\x05\u016A\xB6\x02\u0210\u0237\x05" +
		"\u016E\xB8\x02\u0211\u0237\x05\x9EP\x02\u0212\u0237\x05\xA0Q\x02\u0213" +
		"\u0237\x05\xA2R\x02\u0214\u0237\x05\xBC_\x02\u0215\u0237\x05\xD0i\x02" +
		"\u0216\u0237\x05\u0112\x8A\x02\u0217\u0237\x05\u0114\x8B\x02\u0218\u0237" +
		"\x05\xA4S\x02\u0219\u0237\x05\xB0Y\x02\u021A\u0237\x05\xB2Z\x02\u021B" +
		"\u0237\x05\xBA^\x02\u021C\u0237\x05\xBE`\x02\u021D\u0237\x05\xC6d\x02" +
		"\u021E\u0237\x05\xCAf\x02\u021F\u0237\x05\xCCg\x02\u0220\u0237\x05\u0162" +
		"\xB2\x02\u0221\u0237\x05\xCEh\x02\u0222\u0237\x05\xF2z\x02\u0223\u0237" +
		"\x05\xF4{\x02\u0224\u0237\x05\xF6|\x02\u0225\u0237\x05\xF8}\x02\u0226" +
		"\u0237\x05\xFA~\x02\u0227\u0237\x05";
	private static readonly _serializedATNSegment2: string =
		"\xFC\x7F\x02\u0228\u0237\x05\u011A\x8E\x02\u0229\u0237\x05\u0106\x84\x02" +
		"\u022A\u0237\x05\u0108\x85\x02\u022B\u0237\x05\u015A\xAE\x02\u022C\u0237" +
		"\x05\u010C\x87\x02\u022D\u0237\x05\u010A\x86\x02\u022E\u0237\x05\u010E" +
		"\x88\x02\u022F\u0237\x05\u0110\x89\x02\u0230\u0237\x05\u0116\x8C\x02\u0231" +
		"\u0237\x05\u01A8\xD5\x02\u0232\u0237\x05\u01AC\xD7\x02\u0233\u0237\x05" +
		"\x16\f\x02\u0234\u0237\x05\x18\r\x02\u0235\u0237\x05\x10\t\x02\u0236\u01F9" +
		"\x03\x02\x02\x02\u0236\u01FA\x03\x02\x02\x02\u0236\u01FB\x03\x02\x02\x02" +
		"\u0236\u01FC\x03\x02\x02\x02\u0236\u01FD\x03\x02\x02\x02\u0236\u01FE\x03" +
		"\x02\x02\x02\u0236\u01FF\x03\x02\x02\x02\u0236\u0200\x03\x02\x02\x02\u0236" +
		"\u0201\x03\x02\x02\x02\u0236\u0202\x03\x02\x02\x02\u0236\u0203\x03\x02" +
		"\x02\x02\u0236\u0204\x03\x02\x02\x02\u0236\u0205\x03\x02\x02\x02\u0236" +
		"\u0206\x03\x02\x02\x02\u0236\u0207\x03\x02\x02\x02\u0236\u0208\x03\x02" +
		"\x02\x02\u0236\u0209\x03\x02\x02\x02\u0236\u020A\x03\x02\x02\x02\u0236" +
		"\u020B\x03\x02\x02\x02\u0236\u020C\x03\x02\x02\x02\u0236\u020D\x03\x02" +
		"\x02\x02\u0236\u020E\x03\x02\x02\x02\u0236\u020F\x03\x02\x02\x02\u0236" +
		"\u0210\x03\x02\x02\x02\u0236\u0211\x03\x02\x02\x02\u0236\u0212\x03\x02" +
		"\x02\x02\u0236\u0213\x03\x02\x02\x02\u0236\u0214\x03\x02\x02\x02\u0236" +
		"\u0215\x03\x02\x02\x02\u0236\u0216\x03\x02\x02\x02\u0236\u0217\x03\x02" +
		"\x02\x02\u0236\u0218\x03\x02\x02\x02\u0236\u0219\x03\x02\x02\x02\u0236" +
		"\u021A\x03\x02\x02\x02\u0236\u021B\x03\x02\x02\x02\u0236\u021C\x03\x02" +
		"\x02\x02\u0236\u021D\x03\x02\x02\x02\u0236\u021E\x03\x02\x02\x02\u0236" +
		"\u021F\x03\x02\x02\x02\u0236\u0220\x03\x02\x02\x02\u0236\u0221\x03\x02" +
		"\x02\x02\u0236\u0222\x03\x02\x02\x02\u0236\u0223\x03\x02\x02\x02\u0236" +
		"\u0224\x03\x02\x02\x02\u0236\u0225\x03\x02\x02\x02\u0236\u0226\x03\x02" +
		"\x02\x02\u0236\u0227\x03\x02\x02\x02\u0236\u0228\x03\x02\x02\x02\u0236" +
		"\u0229\x03\x02\x02\x02\u0236\u022A\x03\x02\x02\x02\u0236\u022B\x03\x02" +
		"\x02\x02\u0236\u022C\x03\x02\x02\x02\u0236\u022D\x03\x02\x02\x02\u0236" +
		"\u022E\x03\x02\x02\x02\u0236\u022F\x03\x02\x02\x02\u0236\u0230\x03\x02" +
		"\x02\x02\u0236\u0231\x03\x02\x02\x02\u0236\u0232\x03\x02\x02\x02\u0236" +
		"\u0233\x03\x02\x02\x02\u0236\u0234\x03\x02\x02\x02\u0236\u0235\x03\x02" +
		"\x02\x02\u0237\x0F\x03\x02\x02\x02\u0238\u0239\t\x02\x02\x02\u0239\x11" +
		"\x03\x02\x02\x02\u023A\u023C\x07e\x02\x02\u023B\u023D\x05\x14\v\x02\u023C" +
		"\u023B\x03\x02\x02\x02\u023D\u023E\x03\x02\x02\x02\u023E\u023C\x03\x02" +
		"\x02\x02\u023E\u023F\x03\x02\x02\x02\u023F\x13\x03\x02\x02\x02\u0240\u0241" +
		"\x07\u0134\x02\x02\u0241\u0242\x07\u0171\x02\x02\u0242\u0243\x07\u011D" +
		"\x02\x02\u0243\u0244\x05\x04\x03\x02\u0244\u0245\n\x03\x02\x02\u0245\x15" +
		"\x03\x02\x02\x02\u0246\u0247\x07\xC0\x02\x02\u0247\x17\x03\x02\x02\x02" +
		"\u0248\u0249\x06\r\x03\x02\u0249\u024A\x05\u0180\xC1\x02\u024A\x19\x03" +
		"\x02\x02\x02\u024B\u024C\x07\xFD\x02\x02\u024C\u0259\x05\xFE\x80\x02\u024D" +
		"\u024F\x07\xFD\x02\x02\u024E\u024D\x03\x02\x02\x02\u024E\u024F\x03\x02" +
		"\x02\x02\u024F\u0250\x03\x02\x02\x02\u0250\u0255\x05\x1C\x0F\x02\u0251" +
		"\u0252\x07\u0157\x02\x02\u0252\u0254\x05\x1C\x0F\x02\u0253\u0251\x03\x02" +
		"\x02\x02\u0254\u0257\x03\x02\x02\x02\u0255\u0253\x03\x02\x02\x02\u0255" +
		"\u0256\x03\x02\x02\x02\u0256\u0259\x03\x02\x02\x02\u0257\u0255\x03\x02" +
		"\x02\x02\u0258\u024B\x03\x02\x02\x02\u0258\u024E\x03\x02\x02\x02\u0259" +
		"\x1B\x03\x02\x02\x02\u025A\u025E\x05\x1E\x10\x02\u025B\u025E\x05 \x11" +
		"\x02\u025C\u025E\x05\"\x12\x02\u025D\u025A\x03\x02\x02\x02\u025D\u025B" +
		"\x03\x02\x02\x02\u025D\u025C\x03\x02\x02\x02\u025E\x1D\x03\x02\x02\x02" +
		"\u025F\u0261\x05\u01B8\xDD\x02\u0260\u0262\x07\u0156\x02\x02\u0261\u0260" +
		"\x03\x02\x02\x02\u0261\u0262\x03\x02\x02\x02\u0262\u0263\x03\x02\x02\x02" +
		"\u0263\u0264\x07\u015C\x02\x02\u0264\u0265\x05\u0180\xC1\x02\u0265\u0270" +
		"\x03\x02\x02\x02\u0266\u0267\x07\u016A\x02\x02\u0267\u0268\x05\u01B8\xDD" +
		"\x02\u0268\u026A\x07\u016D\x02\x02\u0269\u026B\x07\u0156\x02\x02\u026A" +
		"\u0269\x03\x02\x02\x02\u026A\u026B\x03\x02\x02\x02\u026B\u026C\x03\x02" +
		"\x02\x02\u026C\u026D\x07\u015C\x02\x02\u026D\u026E\x05\u0180\xC1\x02\u026E" +
		"\u0270\x03\x02\x02\x02\u026F\u025F\x03\x02\x02\x02\u026F\u0266\x03\x02" +
		"\x02\x02\u0270\x1F\x03\x02\x02\x02\u0271\u0272\x07\u016A\x02\x02\u0272" +
		"\u0277\x05\u01B8\xDD\x02\u0273\u0274\x07\u0157\x02\x02\u0274\u0276\x05" +
		"\u01B8\xDD\x02\u0275\u0273\x03\x02\x02\x02\u0276\u0279\x03\x02\x02\x02" +
		"\u0277\u0275\x03\x02\x02\x02\u0277\u0278\x03\x02\x02\x02\u0278\u027A\x03" +
		"\x02\x02\x02\u0279\u0277\x03\x02\x02\x02\u027A\u027C\x07\u016D\x02\x02" +
		"\u027B\u027D\x07\u0156\x02\x02\u027C\u027B\x03\x02\x02\x02\u027C\u027D" +
		"\x03\x02\x02\x02\u027D\u027E\x03\x02\x02\x02\u027E\u027F\x07\u015C\x02" +
		"\x02\u027F\u0280\x07\u016A\x02\x02\u0280\u0285\x05\u0180\xC1\x02\u0281" +
		"\u0282\x07\u0157\x02\x02\u0282\u0284\x05\u0180\xC1\x02\u0283\u0281\x03" +
		"\x02\x02\x02\u0284\u0287\x03\x02\x02\x02\u0285\u0283\x03\x02\x02\x02\u0285" +
		"\u0286\x03\x02\x02\x02\u0286\u0288\x03\x02\x02\x02\u0287\u0285\x03\x02" +
		"\x02\x02\u0288\u0289\x07\u016D\x02\x02\u0289!\x03\x02\x02\x02\u028A\u0297" +
		"\x05\u01B8\xDD\x02\u028B\u028C\x07\u016A\x02\x02\u028C\u0291\x05\u01B8" +
		"\xDD\x02\u028D\u028E\x07\u0157\x02\x02\u028E\u0290\x05\u01B8\xDD\x02\u028F" +
		"\u028D\x03\x02\x02\x02\u0290\u0293\x03\x02\x02\x02\u0291\u028F\x03\x02" +
		"\x02\x02\u0291\u0292\x03\x02\x02\x02\u0292\u0294\x03\x02\x02\x02\u0293" +
		"\u0291\x03\x02\x02\x02\u0294\u0295\x07\u016D\x02\x02\u0295\u0297\x03\x02" +
		"\x02\x02\u0296\u028A\x03\x02\x02\x02\u0296\u028B\x03\x02\x02\x02\u0297" +
		"\u0299\x03\x02\x02\x02\u0298\u029A\x07\u0156\x02\x02\u0299\u0298\x03\x02" +
		"\x02\x02\u0299\u029A\x03\x02\x02\x02\u029A\u029B\x03\x02\x02\x02\u029B" +
		"\u029C\x07\u015C\x02\x02\u029C\u029D\x07\u016A\x02\x02\u029D\u029E\x05" +
		"\u011A\x8E\x02\u029E\u029F\x07\u016D\x02\x02\u029F#\x03\x02\x02\x02\u02A0" +
		"\u02A1\x07\x06\x02\x02\u02A1\u02A2\x05\u01B8\xDD\x02\u02A2\u02A3\x07>" +
		"\x02\x02\u02A3\u02A7\x07p\x02\x02\u02A4\u02A5\x07\xE5\x02\x02\u02A5\u02A8" +
		"\x07\xFD\x02\x02\u02A6\u02A8\x07\xD9\x02\x02\u02A7\u02A4\x03\x02\x02\x02" +
		"\u02A7\u02A6\x03\x02\x02\x02\u02A8\u02A9\x03\x02\x02\x02\u02A9\u02AA\x05" +
		"\u01B8\xDD\x02\u02AA%\x03\x02\x02\x02\u02AB\u02AE\x07\r\x02\x02\u02AC" +
		"\u02AD\x07\xE5\x02\x02\u02AD\u02AF\x07\xFD\x02\x02\u02AE\u02AC\x03\x02" +
		"\x02\x02\u02AE\u02AF\x03\x02\x02\x02\u02AF\u02B0\x03\x02\x02\x02\u02B0" +
		"\u02B1\t\x04\x02\x02\u02B1\u02B2\x07\u016A\x02\x02\u02B2\u02B7\x05\u01B8" +
		"\xDD\x02\u02B3\u02B4\x07\u0157\x02\x02\u02B4\u02B6\x05\u01B8\xDD\x02\u02B5" +
		"\u02B3\x03\x02\x02\x02\u02B6\u02B9\x03\x02\x02\x02\u02B7\u02B5\x03\x02" +
		"\x02\x02\u02B7\u02B8\x03\x02\x02\x02\u02B8\u02BA\x03\x02\x02\x02\u02B9" +
		"\u02B7\x03\x02\x02\x02\u02BA\u02BB\x07\u016D\x02\x02\u02BB\u02BC\x07\u0137" +
		"\x02\x02\u02BC\u02BD\x07\xD9\x02\x02\u02BD\u02BE\x05\u01B8\xDD\x02\u02BE" +
		"\'\x03\x02\x02\x02\u02BF\u02C0\x07\x12\x02\x02\u02C0\u02C1\x07\u0123\x02" +
		"\x02\u02C1)\x03\x02\x02\x02\u02C2\u02C3\x07\x1A\x02\x02\u02C3+\x03\x02" +
		"\x02\x02\u02C4\u02C5\x07\x1D\x02\x02\u02C5\u02CC\x05\u01B8\xDD\x02\u02C6" +
		"\u02C8\x07\u016A\x02\x02\u02C7\u02C9\x05\u01A0\xD1\x02\u02C8\u02C7\x03" +
		"\x02\x02\x02\u02C8\u02C9\x03\x02\x02\x02\u02C9\u02CA\x03\x02\x02\x02\u02CA" +
		"\u02CD\x07\u016D\x02\x02\u02CB\u02CD\x05\u01A0\xD1\x02\u02CC\u02C6\x03" +
		"\x02\x02\x02\u02CC\u02CB\x03\x02\x02\x02\u02CC\u02CD\x03\x02\x02\x02\u02CD" +
		"-\x03\x02\x02\x02\u02CE\u02CF\x07G\x02\x02\u02CF\u02D4\x054\x1B\x02\u02D0" +
		"\u02D1\x07\u0157\x02\x02\u02D1\u02D3\x054\x1B\x02\u02D2\u02D0\x03\x02" +
		"\x02\x02\u02D3\u02D6\x03\x02\x02\x02\u02D4\u02D2\x03\x02\x02\x02\u02D4" +
		"\u02D5\x03\x02\x02\x02\u02D5/\x03\x02\x02\x02\u02D6\u02D4\x03\x02\x02" +
		"\x02\u02D7\u02D8\x07G\x02\x02\u02D8\u02D9\x054\x1B\x02\u02D9\u02DF\x07" +
		"\u016F\x02\x02\u02DA\u02DB\x054\x1B\x02\u02DB\u02DC\x07\u016F\x02\x02" +
		"\u02DC\u02DE\x03\x02\x02\x02\u02DD\u02DA\x03\x02\x02\x02\u02DE\u02E1\x03" +
		"\x02\x02\x02\u02DF\u02DD\x03\x02\x02\x02\u02DF\u02E0\x03\x02\x02\x02\u02E0" +
		"1\x03\x02\x02\x02\u02E1\u02DF\x03\x02\x02\x02\u02E2\u02E3\x054\x1B\x02" +
		"\u02E3\u02E9\x07\u016F\x02\x02\u02E4\u02E5\x054\x1B\x02\u02E5\u02E6\x07" +
		"\u016F\x02\x02\u02E6\u02E8\x03\x02\x02\x02\u02E7\u02E4\x03\x02\x02\x02" +
		"\u02E8\u02EB\x03\x02\x02\x02\u02E9\u02E7\x03\x02\x02\x02\u02E9\u02EA\x03" +
		"\x02\x02\x02\u02EA3\x03\x02\x02\x02\u02EB\u02E9\x03\x02\x02\x02\u02EC" +
		"\u02F2\x05:\x1E\x02\u02ED\u02F2\x058\x1D\x02\u02EE\u02F2\x05@!\x02\u02EF" +
		"\u02F2\x056\x1C\x02\u02F0\u02F2\x05B\"\x02\u02F1\u02EC\x03\x02\x02\x02" +
		"\u02F1\u02ED\x03\x02\x02\x02\u02F1\u02EE\x03\x02\x02\x02\u02F1\u02EF\x03" +
		"\x02\x02\x02\u02F1\u02F0\x03\x02\x02\x02\u02F25\x03\x02\x02\x02\u02F3" +
		"\u02F8\x05\u01B8\xDD\x02\u02F4\u02F5\x07\u0157\x02\x02\u02F5\u02F7\x05" +
		"\u01B8\xDD\x02\u02F6\u02F4\x03\x02\x02\x02\u02F7\u02FA\x03\x02\x02\x02" +
		"\u02F8\u02F6\x03\x02\x02\x02\u02F8\u02F9\x03\x02\x02\x02\u02F9\u02FC\x03" +
		"\x02\x02\x02\u02FA\u02F8\x03\x02\x02\x02\u02FB\u02FD\x07\v\x02\x02\u02FC" +
		"\u02FB\x03\x02\x02\x02\u02FC\u02FD\x03\x02\x02\x02\u02FD\u02FE\x03\x02" +
		"\x02\x02\u02FE\u0300\x05x=\x02\u02FF\u0301\x05z>\x02\u0300\u02FF\x03\x02" +
		"\x02\x02\u0300\u0301\x03\x02\x02\x02\u0301\u0305\x03\x02\x02\x02\u0302" +
		"\u0304\x05|?\x02\u0303\u0302\x03\x02\x02\x02\u0304\u0307\x03\x02\x02\x02" +
		"\u0305\u0303\x03\x02\x02\x02\u0305\u0306\x03\x02\x02\x02\u0306\u0309\x03" +
		"\x02\x02\x02\u0307\u0305\x03\x02\x02\x02\u0308\u030A\x05~@\x02\u0309\u0308" +
		"\x03\x02\x02\x02\u0309\u030A\x03\x02\x02\x02\u030A\u0317\x03\x02\x02\x02" +
		"\u030B\u030C\x05\u01B8\xDD\x02\u030C\u030E\x07.\x02\x02\u030D\u030F\x07" +
		"\v\x02\x02\u030E\u030D\x03\x02\x02\x02\u030E\u030F\x03\x02\x02\x02\u030F" +
		"\u0310\x03\x02\x02\x02\u0310\u0312\x05x=\x02\u0311\u0313\x05z>\x02\u0312" +
		"\u0311\x03\x02\x02\x02\u0312\u0313\x03\x02\x02\x02\u0313\u0314\x03\x02" +
		"\x02\x02\u0314\u0315\x05~@\x02\u0315\u0317\x03\x02\x02\x02\u0316\u02F3" +
		"\x03\x02\x02\x02\u0316\u030B\x03\x02\x02\x02\u03177\x03\x02\x02\x02\u0318" +
		"\u0319\x05\u01B8\xDD\x02\u0319\u031A\x072\x02\x02\u031A9\x03\x02\x02\x02" +
		"\u031B\u031C\x07>\x02\x02\u031C\u0321\x05\u01B8\xDD\x02\u031D\u031E\x05" +
		"\u01B8\xDD\x02\u031E\u031F\x07>\x02\x02\u031F\u0321\x03\x02\x02\x02\u0320" +
		"\u031B\x03\x02\x02\x02\u0320\u031D\x03\x02\x02\x02\u0321\u0324\x03\x02" +
		"\x02\x02\u0322\u0325\x05<\x1F\x02\u0323\u0325\x05> \x02\u0324\u0322\x03" +
		"\x02\x02\x02\u0324\u0323\x03\x02\x02\x02\u0324\u0325\x03\x02\x02\x02\u0325" +
		"\u0326\x03\x02\x02\x02\u0326\u0329\t\x05\x02\x02\u0327\u032A\x05\u011A" +
		"\x8E\x02\u0328\u032A\x05\u0180\xC1\x02\u0329\u0327\x03\x02\x02\x02\u0329" +
		"\u0328\x03\x02\x02\x02\u032A;\x03\x02\x02\x02\u032B\u032C\x07\u0137\x02" +
		"\x02\u032C\u032E\x07\xE7\x02\x02\u032D\u032F\x07\xC6\x02\x02\u032E\u032D" +
		"\x03\x02\x02\x02\u032E\u032F\x03\x02\x02\x02\u032F\u0332\x03\x02\x02\x02" +
		"\u0330\u0331\x07\u0121\x02\x02\u0331\u0333\t\x06\x02\x02\u0332\u0330\x03" +
		"\x02\x02\x02\u0332\u0333\x03\x02\x02\x02\u0333=\x03\x02\x02\x02\u0334" +
		"\u0335\x07\u0138\x02\x02\u0335\u0336\x07\xE7\x02\x02\u0336?\x03\x02\x02" +
		"\x02\u0337\u0338\t\x07\x02\x02\u0338\u0339\x07|\x02\x02\u0339\u033F\x07" +
		"p\x02\x02\u033A\u0340\x07\u0109\x02\x02\u033B\u0340\x07\u010C\x02\x02" +
		"\u033C\u033D\x07\xBE\x02\x02\u033D\u0340\x07s\x02\x02\u033E\u0340\x05" +
		"\u01B8\xDD\x02\u033F\u033A\x03\x02\x02\x02\u033F\u033B\x03\x02\x02\x02" +
		"\u033F\u033C\x03\x02\x02\x02\u033F\u033E\x03\x02\x02\x02\u0340\u0341\x03" +
		"\x02\x02\x02\u0341\u0342\x05\b\x05\x02\u0342A\x03\x02\x02\x02\u0343\u0345" +
		"\x07x\x02\x02\u0344\u0343\x03\x02\x02\x02\u0344\u0345\x03\x02\x02\x02" +
		"\u0345\u0346\x03\x02\x02\x02\u0346\u0347\x07\u011A\x02\x02\u0347\u0348" +
		"\x07\u0118\x02\x02\u0348\u034A\x05\u01B8\xDD\x02\u0349\u034B\x05V,\x02" +
		"\u034A\u0349\x03\x02\x02\x02\u034A\u034B\x03\x02\x02\x02\u034B\u034C\x03" +
		"\x02\x02\x02\u034C\u034D\x05H%\x02\u034DC\x03\x02\x02\x02\u034E\u034F" +
		"\x078\x02\x02\u034F\u0353\x07\u0118\x02\x02\u0350\u0351\x07\x83\x02\x02" +
		"\u0351\u0352\x07\xBE\x02\x02\u0352\u0354\x07g\x02\x02\u0353\u0350\x03" +
		"\x02\x02\x02\u0353\u0354\x03\x02\x02\x02\u0354\u0355\x03\x02\x02\x02\u0355" +
		"\u0357\x05\u014A\xA6\x02\u0356\u0358\x05V,\x02\u0357\u0356\x03\x02\x02" +
		"\x02\u0357\u0358\x03\x02\x02\x02\u0358\u0359\x03\x02\x02\x02\u0359\u035A" +
		"\x05H%\x02\u035AE\x03\x02\x02\x02\u035B\u0362\x078\x02\x02\u035C\u035D" +
		"\x07\xA3\x02\x02\u035D\u0363\x07\u011A\x02\x02\u035E\u0360\t\b\x02\x02" +
		"\u035F\u035E\x03\x02\x02\x02\u035F\u0360\x03\x02\x02\x02\u0360\u0361\x03" +
		"\x02\x02\x02\u0361\u0363\x07\u0133\x02\x02\u0362\u035C\x03\x02\x02\x02" +
		"\u0362\u035F\x03\x02\x02\x02\u0363\u0364\x03\x02\x02\x02\u0364\u0365\x07" +
		"\u0118\x02\x02\u0365\u0367\x05\u01B8\xDD\x02\u0366\u0368\x05V,\x02\u0367" +
		"\u0366\x03\x02\x02\x02\u0367\u0368\x03\x02\x02\x02\u0368\u0369\x03\x02" +
		"\x02\x02\u0369\u036A\x05H%\x02\u036AG\x03\x02\x02\x02\u036B\u036D\x07" +
		"\v\x02\x02\u036C\u036B\x03\x02\x02\x02\u036C\u036D\x03\x02\x02\x02\u036D" +
		"\u036E\x03\x02\x02\x02\u036E\u036F\x07\u016A\x02\x02\u036F\u0370\x05\u011A" +
		"\x8E\x02\u0370\u0371\x07\u016D\x02\x02\u0371\u037B\x03\x02\x02\x02\u0372" +
		"\u0374\x07\v\x02\x02\u0373\u0372\x03\x02\x02\x02\u0373\u0374\x03\x02\x02" +
		"\x02\u0374\u0375\x03\x02\x02\x02\u0375\u037B\x05\u011A\x8E\x02\u0376\u0377" +
		"\x07\u016A\x02\x02\u0377\u0378\x05J&\x02\u0378\u0379\x07\u016D\x02\x02" +
		"\u0379\u037B\x03\x02\x02\x02\u037A\u036C\x03\x02\x02\x02\u037A\u0373\x03" +
		"\x02\x02\x02\u037A\u0376\x03\x02\x02\x02\u037B\u037D\x03\x02\x02\x02\u037C" +
		"\u037E\x05\\/\x02\u037D\u037C\x03\x02\x02\x02\u037D\u037E\x03\x02\x02" +
		"\x02\u037EI\x03\x02\x02\x02\u037F\u0384\x05L\'\x02\u0380\u0381\x07\u0157" +
		"\x02\x02\u0381\u0383\x05L\'\x02\u0382\u0380\x03\x02\x02\x02\u0383\u0386" +
		"\x03\x02\x02\x02\u0384\u0382\x03\x02\x02\x02\u0384\u0385\x03\x02\x02\x02" +
		"\u0385K\x03\x02\x02\x02\u0386\u0384\x03\x02\x02\x02\u0387\u0388\x05N(" +
		"\x02\u0388\u038A\x05x=\x02\u0389\u038B\x05z>\x02\u038A\u0389\x03\x02\x02" +
		"\x02\u038A\u038B\x03\x02\x02\x02\u038B\u038F\x03\x02\x02\x02\u038C\u038E" +
		"\x05|?\x02\u038D\u038C\x03\x02\x02\x02\u038E\u0391\x03\x02\x02\x02\u038F" +
		"\u038D\x03\x02\x02\x02\u038F\u0390\x03\x02\x02\x02\u0390\u0395\x03\x02" +
		"\x02\x02\u0391\u038F\x03\x02\x02\x02\u0392\u0394\x05P)\x02\u0393\u0392" +
		"\x03\x02\x02\x02\u0394\u0397\x03\x02\x02\x02\u0395\u0393\x03\x02\x02\x02" +
		"\u0395\u0396\x03\x02\x02\x02\u0396\u039E\x03\x02\x02\x02\u0397\u0395\x03" +
		"\x02\x02\x02\u0398\u0399\x073\x02\x02\u0399\u039B\x05\u01B8\xDD\x02\u039A" +
		"\u0398\x03\x02\x02\x02\u039A\u039B\x03\x02\x02\x02\u039B\u039C\x03\x02" +
		"\x02\x02\u039C\u039E\x05R*\x02\u039D\u0387\x03\x02\x02\x02\u039D\u039A" +
		"\x03\x02\x02\x02\u039EM\x03\x02\x02\x02\u039F\u03A0\x05\u01B8\xDD\x02" +
		"\u03A0O\x03\x02\x02\x02\u03A1\u03C2\x05~@\x02\u03A2\u03A4\x07\xBE\x02" +
		"\x02\u03A3\u03A2\x03\x02\x02\x02\u03A3\u03A4\x03\x02\x02\x02\u03A4\u03A5" +
		"\x03\x02\x02\x02\u03A5\u03C2\x07\xC0\x02\x02\u03A6\u03A7\x07\xD6\x02\x02" +
		"\u03A7\u03C2\x07\x9B\x02\x02\u03A8\u03C2\x07\u0128\x02\x02\u03A9\u03AA" +
		"\x07\xE0\x02\x02\u03AA\u03AB\x05\u014A\xA6\x02\u03AB\u03AC\x07\u016A\x02" +
		"\x02\u03AC\u03AD\x05\u01B8\xDD\x02\u03AD\u03B1\x07\u016D\x02\x02\u03AE" +
		"\u03B0\x05T+\x02\u03AF\u03AE\x03\x02\x02\x02\u03B0\u03B3\x03\x02\x02\x02" +
		"\u03B1\u03AF\x03\x02\x02\x02\u03B1\u03B2\x03\x02\x02\x02\u03B2\u03C2\x03" +
		"\x02\x02\x02\u03B3\u03B1\x03\x02\x02\x02\u03B4\u03B5\x07\x82\x02\x02\u03B5" +
		"\u03B6\x07\u016A\x02\x02\u03B6\u03BB\x07\u0174\x02\x02\u03B7\u03B8\x07" +
		"\u0157\x02\x02\u03B8\u03BA\x07\u0174\x02\x02\u03B9\u03B7\x03\x02\x02\x02" +
		"\u03BA\u03BD\x03\x02\x02\x02\u03BB\u03B9\x03\x02\x02\x02\u03BB\u03BC\x03" +
		"\x02\x02\x02\u03BC\u03BE\x03\x02\x02\x02\u03BD\u03BB\x03\x02\x02\x02\u03BE" +
		"\u03C2\x07\u016D\x02\x02\u03BF\u03C2\x07\x0F\x02\x02\u03C0\u03C2\x07^" +
		"\x02\x02\u03C1\u03A1\x03\x02\x02\x02\u03C1\u03A3\x03\x02\x02\x02\u03C1" +
		"\u03A6\x03\x02\x02\x02\u03C1\u03A8\x03\x02\x02\x02\u03C1\u03A9\x03\x02" +
		"\x02\x02\u03C1\u03B4\x03\x02\x02\x02\u03C1\u03BF\x03\x02\x02\x02\u03C1" +
		"\u03C0\x03\x02\x02\x02\u03C2Q\x03\x02\x02\x02\u03C3\u03C4\x07\xD6\x02" +
		"\x02\u03C4\u03C6\x07\x9B\x02\x02\u03C5\u03C7\x07(\x02\x02\u03C6\u03C5" +
		"\x03\x02\x02\x02\u03C6\u03C7\x03\x02\x02\x02\u03C7\u03C8\x03\x02\x02\x02" +
		"\u03C8\u03C9\x07\u016A\x02\x02\u03C9\u03CB\x05\u01B8\xDD\x02\u03CA\u03CC" +
		"\t\t\x02\x02\u03CB\u03CA\x03\x02\x02\x02\u03CB\u03CC\x03\x02\x02\x02\u03CC" +
		"\u03D4\x03\x02\x02\x02\u03CD\u03CE\x07\u0157\x02\x02\u03CE\u03D0\x05\u01B8" +
		"\xDD\x02\u03CF\u03D1\t\t\x02\x02\u03D0\u03CF\x03\x02\x02\x02\u03D0\u03D1" +
		"\x03\x02\x02\x02\u03D1\u03D3\x03\x02\x02\x02\u03D2\u03CD\x03\x02\x02\x02" +
		"\u03D3\u03D6\x03\x02\x02\x02\u03D4\u03D2\x03\x02\x02\x02\u03D4\u03D5\x03" +
		"\x02\x02\x02\u03D5\u03D7\x03\x02\x02\x02\u03D6\u03D4\x03\x02\x02\x02\u03D7" +
		"\u03D9\x07\u016D\x02\x02\u03D8\u03DA\x07^\x02\x02\u03D9\u03D8\x03\x02" +
		"\x02\x02\u03D9\u03DA\x03\x02\x02\x02\u03DA\u03DC\x03\x02\x02\x02\u03DB" +
		"\u03DD\x05\xEEx\x02\u03DC\u03DB\x03\x02\x02\x02\u03DC\u03DD\x03\x02\x02" +
		"\x02\u03DD\u03FD\x03\x02\x02\x02\u03DE\u03DF\x07q\x02\x02\u03DF\u03E0" +
		"\x07\x9B\x02\x02\u03E0\u03E1\x07\u016A\x02\x02\u03E1\u03E6\x05\u01B8\xDD" +
		"\x02\u03E2\u03E3\x07\u0157\x02\x02\u03E3\u03E5\x05\u01B8\xDD\x02\u03E4" +
		"\u03E2\x03\x02\x02\x02\u03E5\u03E8\x03\x02\x02\x02\u03E6\u03E4\x03\x02" +
		"\x02\x02\u03E6\u03E7\x03\x02\x02\x02\u03E7\u03E9\x03\x02\x02\x02\u03E8" +
		"\u03E6\x03\x02\x02\x02\u03E9\u03EA\x07\u016D\x02\x02\u03EA\u03EB\x07\xE0" +
		"\x02\x02\u03EB\u03EC\x05\u014A\xA6\x02\u03EC\u03ED\x07\u016A\x02\x02\u03ED" +
		"\u03F2\x05\u01B8\xDD\x02\u03EE\u03EF\x07\u0157\x02\x02\u03EF\u03F1\x05" +
		"\u01B8\xDD\x02\u03F0\u03EE\x03\x02\x02\x02\u03F1\u03F4\x03\x02\x02\x02" +
		"\u03F2\u03F0\x03\x02\x02\x02\u03F2\u03F3\x03\x02\x02\x02\u03F3\u03F5\x03" +
		"\x02\x02\x02\u03F4\u03F2\x03\x02\x02\x02\u03F5\u03F9\x07\u016D\x02\x02" +
		"\u03F6\u03F8\x05T+\x02\u03F7\u03F6\x03\x02\x02\x02\u03F8\u03FB\x03\x02" +
		"\x02\x02\u03F9\u03F7\x03\x02\x02\x02\u03F9\u03FA\x03\x02\x02\x02\u03FA" +
		"\u03FD\x03\x02\x02\x02\u03FB\u03F9\x03\x02\x02\x02\u03FC\u03C3\x03\x02" +
		"\x02\x02\u03FC\u03DE\x03\x02\x02\x02\u03FDS\x03\x02\x02\x02\u03FE\u03FF" +
		"\x07\xC5\x02\x02\u03FF\u0408\t\n\x02\x02\u0400\u0401\x07\xB9\x02\x02\u0401" +
		"\u0409\x07\x03\x02\x02\u0402\u0409\x07\xE4\x02\x02\u0403\u0404\x07\xFD" +
		"\x02\x02\u0404\u0409\x07\xC0\x02\x02\u0405\u0406\x07\xFD\x02\x02\u0406" +
		"\u0409\x07H\x02\x02\u0407\u0409\x07\x1F\x02\x02\u0408\u0400\x03\x02\x02" +
		"\x02\u0408\u0402\x03\x02\x02\x02\u0408\u0403\x03\x02\x02\x02\u0408\u0405" +
		"\x03\x02\x02\x02\u0408\u0407\x03\x02\x02\x02\u0409U\x03\x02\x02\x02\u040A" +
		"\u040C\x05X-\x02\u040B\u040A\x03\x02\x02\x02\u040C\u040D\x03\x02\x02\x02" +
		"\u040D\u040B\x03\x02\x02\x02\u040D\u040E\x03\x02\x02\x02\u040EW\x03\x02" +
		"\x02\x02\u040F\u0410\x07\u0157\x02\x02\u0410\u0413\x05Z.\x02\u0411\u0413" +
		"\x05f4\x02\u0412\u040F\x03\x02\x02\x02\u0412\u0411\x03\x02\x02\x02\u0413" +
		"Y\x03\x02\x02\x02\u0414\u0416\x07\xB9\x02\x02\u0415\u0414\x03\x02\x02" +
		"\x02\u0415\u0416\x03\x02\x02\x02\u0416\u0417\x03\x02\x02\x02\u0417\u0418" +
		"\t\v\x02\x02\u0418[\x03\x02\x02\x02\u0419\u041B\x05^0\x02\u041A\u0419" +
		"\x03\x02\x02\x02\u041B\u041C\x03\x02\x02\x02\u041C\u041A\x03\x02\x02\x02" +
		"\u041C\u041D\x03\x02\x02\x02\u041D]\x03\x02\x02\x02\u041E\u041F\x07\xC5" +
		"\x02\x02\u041F\u0420\x07/\x02\x02\u0420\u0421\t\f\x02\x02\u0421\u0429" +
		"\x07\xEF\x02\x02\u0422\u0429\x05`1\x02\u0423\u0429\x05b2\x02\u0424\u0429" +
		"\x05d3\x02\u0425\u0429\x05f4\x02\u0426\u0429\x05l7\x02\u0427\u0429\x05" +
		"n8\x02\u0428\u041E\x03\x02\x02\x02\u0428\u0422\x03\x02\x02\x02\u0428\u0423" +
		"\x03\x02\x02\x02\u0428\u0424\x03\x02\x02\x02\u0428\u0425\x03\x02\x02\x02" +
		"\u0428\u0426\x03\x02\x02\x02\u0428\u0427\x03\x02\x02\x02\u0429_\x03\x02" +
		"\x02\x02\u042A\u042B\x07\xFA\x02\x02\u042B\u042C\x079\x02\x02\u042C\u043D" +
		"\t\r\x02\x02\u042D\u042E\t\x0E\x02\x02\u042E\u043D\x07\u0174\x02\x02\u042F" +
		"\u043D\x07\xBB\x02\x02\u0430\u043D\t\x0F\x02\x02\u0431\u0432\x07\u0110" +
		"\x02\x02\u0432\u0435\x07\u016A\x02\x02\u0433\u0436\x05\u01B8\xDD\x02\u0434" +
		"\u0436\x07\u0174\x02\x02\u0435\u0433\x03\x02\x02\x02\u0435\u0434\x03\x02" +
		"\x02\x02\u0436\u0437\x03\x02\x02\x02\u0437\u0435\x03\x02\x02\x02\u0437" +
		"\u0438\x03\x02\x02\x02\u0438\u0439\x03\x02\x02\x02\u0439\u043D\x07\u016D" +
		"\x02\x02\u043A\u043B\x07\u0119\x02\x02\u043B\u043D\x05\u01B8\xDD\x02\u043C" +
		"\u042A\x03\x02\x02\x02\u043C\u042D\x03\x02\x02\x02\u043C\u042F\x03\x02" +
		"\x02\x02\u043C\u0430\x03\x02\x02\x02\u043C\u0431\x03\x02\x02\x02\u043C" +
		"\u043A\x03\x02\x02\x02\u043Da\x03\x02\x02\x02\u043E\u0440\x07\x88\x02" +
		"\x02\u043F\u043E\x03\x02\x02\x02\u043F\u0440\x03\x02\x02\x02\u0440\u0441" +
		"\x03\x02\x02\x02\u0441\u0442\x07\x86\x02\x02\u0442\u0460\x05\u01B8\xDD" +
		"\x02\u0443\u0444\x07\u0137\x02\x02\u0444\u0460\x07\xE2\x02\x02\u0445\u0446" +
		"\x07V\x02\x02\u0446\u0447\x07\x1B\x02\x02\u0447\u0448\x07}\x02\x02\u0448" +
		"\u0449\x07\u016A\x02\x02\u0449\u044E\x05\u01B8\xDD\x02\u044A\u044B\x07" +
		"\u0157\x02\x02\u044B\u044D\x05\u01B8\xDD\x02\u044C\u044A\x03\x02\x02\x02" +
		"\u044D\u0450\x03\x02\x02\x02\u044E\u044C\x03\x02\x02\x02\u044E\u044F\x03" +
		"\x02\x02\x02\u044F\u0451\x03\x02\x02\x02\u0450\u044E\x03\x02\x02\x02\u0451" +
		"\u0452\x07\u016D\x02\x02\u0452\u0460\x03\x02\x02\x02\u0453\u0455\x07\xBE" +
		"\x02\x02\u0454\u0453\x03\x02\x02\x02\u0454\u0455\x03\x02\x02\x02\u0455" +
		"\u0456\x03\x02\x02\x02\u0456\u0460\x07\xA9\x02\x02\u0457\u0458\x070\x02" +
		"\x02\u0458\u0460\t\x10\x02\x02\u0459\u045A\x07L\x02\x02\u045A\u0460\x07" +
		"\xC6\x02\x02\u045B\u045C\x07\u0137\x02\x02\u045C\u045D\x07\xE4\x02\x02" +
		"\u045D\u045E\x07\xC5\x02\x02\u045E\u0460\x07Y\x02\x02\u045F\u043F\x03" +
		"\x02\x02\x02\u045F\u0443\x03\x02\x02\x02\u045F\u0445\x03\x02\x02\x02\u045F" +
		"\u0454\x03\x02\x02\x02\u045F\u0457\x03\x02\x02\x02\u045F\u0459\x03\x02" +
		"\x02\x02\u045F\u045B\x03\x02\x02\x02\u0460c\x03\x02\x02\x02\u0461\u0463" +
		"\x07\u0128\x02\x02\u0462\u0461\x03\x02\x02\x02\u0462\u0463\x03\x02\x02" +
		"\x02\u0463\u0464\x03\x02\x02\x02\u0464\u0465\x07\xD6\x02\x02\u0465\u0466" +
		"\x07\x88\x02\x02\u0466\u0467\x07\u016A\x02\x02\u0467\u046C\x05\u01B8\xDD" +
		"\x02\u0468\u0469\x07\u0157\x02\x02\u0469\u046B\x05\u01B8\xDD\x02\u046A" +
		"\u0468\x03\x02\x02\x02\u046B\u046E\x03\x02\x02\x02\u046C\u046A\x03\x02" +
		"\x02\x02\u046C\u046D\x03\x02\x02\x02\u046D\u046F\x03\x02\x02\x02\u046E" +
		"\u046C\x03\x02\x02\x02\u046F\u0470\x07\u016D\x02\x02\u0470\u0474\x03\x02" +
		"\x02\x02\u0471\u0472\x07\u0137\x02\x02\u0472\u0474\x07@\x02\x02\u0473" +
		"\u0462\x03\x02\x02\x02\u0473\u0471\x03\x02\x02\x02\u0474e\x03\x02\x02" +
		"\x02\u0475\u047A\x05h5\x02\u0476\u0477\x07\u0111\x02\x02\u0477\u0478\x07" +
		"\v\x02\x02\u0478\u047A\x05\u01B8\xDD\x02\u0479\u0475\x03\x02\x02\x02\u0479" +
		"\u0476\x03\x02\x02\x02\u047Ag\x03\x02\x02\x02\u047B\u047C\x07\xEE\x02" +
		"\x02\u047C\u047D\x07r\x02\x02\u047D\u0481\x07N\x02\x02\u047E\u0480\x05" +
		"j6\x02\u047F\u047E\x03\x02\x02\x02\u0480\u0483\x03\x02\x02\x02\u0481\u047F" +
		"\x03\x02\x02\x02\u0481\u0482\x03\x02\x02\x02\u0482i\x03\x02\x02\x02\u0483" +
		"\u0481\x03\x02\x02\x02\u0484\u0485\x07l\x02\x02\u0485\u0486\x07\u011B" +
		"\x02\x02\u0486\u0487\x07\x1B\x02\x02\u0487\u048B\x05\u0180\xC1\x02\u0488" +
		"\u0489\x07a\x02\x02\u0489\u048A\x07\x1B\x02\x02\u048A\u048C\x05\u0180" +
		"\xC1\x02\u048B\u0488\x03\x02\x02\x02\u048B\u048C\x03\x02\x02\x02\u048C" +
		"\u04A0\x03\x02\x02\x02\u048D\u048E\x07+\x02\x02\u048E\u048F\x07\x98\x02" +
		"\x02\u048F\u0490\x07\u011B\x02\x02\u0490\u0491\x07\x1B\x02\x02\u0491\u04A0" +
		"\x05\u0180\xC1\x02\u0492\u0493\x07\xAC\x02\x02\u0493\u0494\x07\x9C\x02" +
		"\x02\u0494\u0495\x07\u011B\x02\x02\u0495\u0496\x07\x1B\x02\x02\u0496\u04A0" +
		"\x05\u0180\xC1\x02\u0497\u0498\x07\xA2\x02\x02\u0498\u0499\x07\u011B\x02" +
		"\x02\u0499\u049A\x07\x1B\x02\x02\u049A\u04A0\x05\u0180\xC1\x02\u049B\u049C" +
		"\x07\xC0\x02\x02\u049C\u049D\x07J\x02\x02\u049D\u049E\x07\v\x02\x02\u049E" +
		"\u04A0\x05\u0180\xC1\x02\u049F\u0484\x03\x02\x02\x02\u049F\u048D\x03\x02" +
		"\x02\x02\u049F\u0492\x03\x02\x02\x02\u049F\u0497\x03\x02\x02\x02\u049F" +
		"\u049B\x03\x02\x02\x02\u04A0k\x03\x02\x02\x02\u04A1\u04A2\x07\xC5\x02" +
		"\x02\u04A2\u04A6\x05\u01B8\xDD\x02\u04A3\u04A4\x07\u011C\x02\x02\u04A4" +
		"\u04A6\x05\u01B8\xDD\x02\u04A5\u04A1\x03\x02\x02\x02\u04A5\u04A3\x03\x02" +
		"\x02\x02\u04A6m\x03\x02\x02\x02\u04A7\u04A9\x07\x0F\x02\x02\u04A8\u04AA" +
		"\x07\u015C\x02\x02\u04A9\u04A8\x03\x02\x02\x02\u04A9\u04AA\x03\x02\x02" +
		"\x02\u04AA\u04AB\x03\x02\x02\x02\u04AB\u04C3\x05\u0180\xC1\x02\u04AC\u04AE" +
		"\x07-\x02\x02\u04AD\u04AF\x07\u015C\x02\x02\u04AE\u04AD\x03\x02\x02\x02" +
		"\u04AE\u04AF\x03\x02\x02";
	private static readonly _serializedATNSegment3: string =
		"\x02\u04AF\u04B0\x03\x02\x02\x02\u04B0\u04C3\x05\u0180\xC1\x02\u04B1\u04B3" +
		"\x07H\x02\x02\u04B2\u04B1\x03\x02\x02\x02\u04B2\u04B3\x03\x02\x02\x02" +
		"\u04B3\u04B7\x03\x02\x02\x02\u04B4\u04B5\x07$\x02\x02\u04B5\u04B8\x07" +
		"\xFD\x02\x02\u04B6\u04B8\x07%\x02\x02\u04B7\u04B4\x03\x02\x02\x02\u04B7" +
		"\u04B6\x03\x02\x02\x02\u04B8\u04BA\x03\x02\x02\x02\u04B9\u04BB\x07\u015C" +
		"\x02\x02\u04BA\u04B9\x03\x02\x02\x02\u04BA\u04BB\x03\x02\x02\x02\u04BB" +
		"\u04BC\x03\x02\x02\x02\u04BC\u04C3\x05\u0180\xC1\x02\u04BD\u04BF\x07`" +
		"\x02\x02\u04BE\u04C0\x07\u015C\x02\x02\u04BF\u04BE\x03\x02\x02\x02\u04BF" +
		"\u04C0\x03\x02\x02\x02\u04C0\u04C1\x03\x02\x02\x02\u04C1\u04C3\x05\u0180" +
		"\xC1\x02\u04C2\u04A7\x03\x02\x02\x02\u04C2\u04AC\x03\x02\x02\x02\u04C2" +
		"\u04B2\x03\x02\x02\x02\u04C2\u04BD\x03\x02\x02\x02\u04C3o\x03\x02\x02" +
		"\x02\u04C4\u04C5\x07\x07\x02\x02\u04C5\u04C6\x07\u0118\x02\x02\u04C6\u04C7" +
		"\x05\u014A\xA6\x02\u04C7\u04C8\x05r:\x02\u04C8q\x03\x02\x02\x02\u04C9" +
		"\u04CA\x05t;\x02\u04CAs\x03\x02\x02\x02\u04CB\u04CE\x07\x04\x02\x02\u04CC" +
		"\u04CD\x073\x02\x02\u04CD\u04CF\x05\u01B8\xDD\x02\u04CE\u04CC\x03\x02" +
		"\x02\x02\u04CE\u04CF\x03\x02\x02\x02\u04CF\u04D0\x03\x02\x02\x02\u04D0" +
		"\u04D1\x05v<\x02\u04D1u\x03\x02\x02\x02\u04D2\u04D3\x07\xD6\x02\x02\u04D3" +
		"\u04D5\x07\x9B\x02\x02\u04D4\u04D6\x07(\x02\x02\u04D5\u04D4\x03\x02\x02" +
		"\x02\u04D5\u04D6\x03\x02\x02\x02\u04D6\u04D7\x03\x02\x02\x02\u04D7\u04D8" +
		"\x07\u016A\x02\x02\u04D8\u04DA\x05\u01B8\xDD\x02\u04D9\u04DB\t\t\x02\x02" +
		"\u04DA\u04D9\x03\x02\x02\x02\u04DA\u04DB\x03\x02\x02\x02\u04DB\u04E3\x03" +
		"\x02\x02\x02\u04DC\u04DD\x07\u0157\x02\x02\u04DD\u04DF\x05\u01B8\xDD\x02" +
		"\u04DE\u04E0\t\t\x02\x02\u04DF\u04DE\x03\x02\x02\x02\u04DF\u04E0\x03\x02" +
		"\x02\x02\u04E0\u04E2\x03\x02\x02\x02\u04E1\u04DC\x03\x02\x02\x02\u04E2" +
		"\u04E5\x03\x02\x02\x02\u04E3\u04E1\x03\x02\x02\x02\u04E3\u04E4\x03\x02" +
		"\x02\x02\u04E4\u04E6\x03\x02\x02\x02\u04E5\u04E3\x03\x02\x02\x02\u04E6" +
		"\u04E8\x07\u016D\x02\x02\u04E7\u04E9\x07^\x02\x02\u04E8\u04E7\x03\x02" +
		"\x02\x02\u04E8\u04E9\x03\x02\x02\x02\u04E9\u04EB\x03\x02\x02\x02\u04EA" +
		"\u04EC\x05\xEEx\x02\u04EB\u04EA\x03\x02\x02\x02\u04EB\u04EC\x03\x02\x02" +
		"\x02\u04EC\u0511\x03\x02\x02\x02\u04ED\u04EE\x07q\x02\x02\u04EE\u04EF" +
		"\x07\x9B\x02\x02\u04EF\u04F0\x07\u016A\x02\x02\u04F0\u04F5\x05\u01B8\xDD" +
		"\x02\u04F1\u04F2\x07\u0157\x02\x02\u04F2\u04F4\x05\u01B8\xDD\x02\u04F3" +
		"\u04F1\x03\x02\x02\x02\u04F4\u04F7\x03\x02\x02\x02\u04F5\u04F3\x03\x02" +
		"\x02\x02\u04F5\u04F6\x03\x02\x02\x02\u04F6\u04F8\x03\x02\x02\x02\u04F7" +
		"\u04F5\x03\x02\x02\x02\u04F8\u04F9\x07\u016D\x02\x02\u04F9\u04FA\x07\xE0" +
		"\x02\x02\u04FA\u04FB\x05\u014A\xA6\x02\u04FB\u04FC\x07\u016A\x02\x02\u04FC" +
		"\u0501\x05\u01B8\xDD\x02\u04FD\u04FE\x07\u0157\x02\x02\u04FE\u0500\x05" +
		"\u01B8\xDD\x02\u04FF\u04FD\x03\x02\x02\x02\u0500\u0503\x03\x02\x02\x02" +
		"\u0501\u04FF\x03\x02\x02\x02\u0501\u0502\x03\x02\x02\x02\u0502\u0504\x03" +
		"\x02\x02\x02\u0503\u0501\x03\x02\x02\x02\u0504\u0508\x07\u016D\x02\x02" +
		"\u0505\u0507\x05T+\x02\u0506\u0505\x03\x02\x02\x02\u0507\u050A\x03\x02" +
		"\x02\x02\u0508\u0506\x03\x02\x02\x02\u0508\u0509\x03\x02\x02\x02\u0509" +
		"\u0511\x03\x02\x02\x02\u050A\u0508\x03\x02\x02\x02\u050B\u050C\x07H\x02" +
		"\x02\u050C\u050D\x05\u0180\xC1\x02\u050D\u050E\x07p\x02\x02\u050E\u050F" +
		"\x05\u01B8\xDD\x02\u050F\u0511\x03\x02\x02\x02\u0510\u04D2\x03\x02\x02" +
		"\x02\u0510\u04ED\x03\x02\x02\x02\u0510\u050B\x03\x02\x02\x02\u0511w\x03" +
		"\x02\x02\x02\u0512\u0540\x07#\x02\x02\u0513\u0540\x07\x14\x02\x02\u0514" +
		"\u0540\x07\x15\x02\x02\u0515\u0540\x07\x16\x02\x02\u0516\u0540\x07\x17" +
		"\x02\x02\u0517\u0540\x07\x18\x02\x02\u0518\u0540\x07A\x02\x02\u0519\u0540" +
		"\x07B\x02\x02\u051A\u0540\x07E\x02\x02\u051B\u0540\x07F\x02\x02\u051C" +
		"\u051E\x07X\x02\x02\u051D\u051F\x07\xD4\x02\x02\u051E\u051D\x03\x02\x02" +
		"\x02\u051E\u051F\x03\x02\x02\x02\u051F\u0540\x03\x02\x02\x02\u0520\u0540" +
		"\x07o\x02\x02\u0521\u0540\x07\x8D\x02\x02\u0522\u0540\x07\x8E\x02\x02" +
		"\u0523\u0540\x07\x8F\x02\x02\u0524\u0540\x07\x90\x02\x02\u0525\u0540\x07" +
		"\x91\x02\x02\u0526\u0540\x07\xB6\x02\x02\u0527\u0540\x07\xB8\x02\x02\u0528" +
		"\u0540\x07\xC2\x02\x02\u0529\u0540\x07\xC1\x02\x02\u052A\u0540\x07\xD3" +
		"\x02\x02\u052B\u0540\x07\xDF\x02\x02\u052C\u052D\x07\xE6\x02\x02\u052D" +
		"\u0540\x07\u0132\x02\x02\u052E\u0540\x07\u0104\x02\x02\u052F\u0540\x07" +
		"\u0103\x02\x02\u0530\u0540\x07\u0105\x02\x02\u0531\u0540\x07\u0107\x02" +
		"\x02\u0532\u0540\x07\u0106\x02\x02\u0533\u0540\x07\u0112\x02\x02\u0534" +
		"\u0540\x07\u0117\x02\x02\u0535\u0540\x07\u011E\x02\x02\u0536\u0540\x07" +
		"\u011F\x02\x02\u0537\u0540\x07\u0130\x02\x02\u0538\u0540\x07\u0131\x02" +
		"\x02\u0539\u0540\x07\u013B\x02\x02\u053A\u053D\x05\u01B8\xDD\x02\u053B" +
		"\u053C\x07\u0167\x02\x02\u053C\u053E\t\x11\x02\x02\u053D\u053B\x03\x02" +
		"\x02\x02\u053D\u053E\x03\x02\x02\x02\u053E\u0540\x03\x02\x02\x02\u053F" +
		"\u0512\x03\x02\x02\x02\u053F\u0513\x03\x02\x02\x02\u053F\u0514\x03\x02" +
		"\x02\x02\u053F\u0515\x03\x02\x02\x02\u053F\u0516\x03\x02\x02\x02\u053F" +
		"\u0517\x03\x02\x02\x02\u053F\u0518\x03\x02\x02\x02\u053F\u0519\x03\x02" +
		"\x02\x02\u053F\u051A\x03\x02\x02\x02\u053F\u051B\x03\x02\x02\x02\u053F" +
		"\u051C\x03\x02\x02\x02\u053F\u0520\x03\x02\x02\x02\u053F\u0521\x03\x02" +
		"\x02\x02\u053F\u0522\x03\x02\x02\x02\u053F\u0523\x03\x02\x02\x02\u053F" +
		"\u0524\x03\x02\x02\x02\u053F\u0525\x03\x02\x02\x02\u053F\u0526\x03\x02" +
		"\x02\x02\u053F\u0527\x03\x02\x02\x02\u053F\u0528\x03\x02\x02\x02\u053F" +
		"\u0529\x03\x02\x02\x02\u053F\u052A\x03\x02\x02\x02\u053F\u052B\x03\x02" +
		"\x02\x02\u053F\u052C\x03\x02\x02\x02\u053F\u052E\x03\x02\x02\x02\u053F" +
		"\u052F\x03\x02\x02\x02\u053F\u0530\x03\x02\x02\x02\u053F\u0531\x03\x02" +
		"\x02\x02\u053F\u0532\x03\x02\x02\x02\u053F\u0533\x03\x02\x02\x02\u053F" +
		"\u0534\x03\x02\x02\x02\u053F\u0535\x03\x02\x02\x02\u053F\u0536\x03\x02" +
		"\x02\x02\u053F\u0537\x03\x02\x02\x02\u053F\u0538\x03\x02\x02\x02\u053F" +
		"\u0539\x03\x02\x02\x02\u053F\u053A\x03\x02\x02\x02\u0540y\x03\x02\x02" +
		"\x02\u0541\u0542\x07\u016A\x02\x02\u0542\u0544\t\x12\x02\x02\u0543\u0545" +
		"\t\x13\x02\x02\u0544\u0543\x03\x02\x02\x02\u0544\u0545\x03\x02\x02\x02" +
		"\u0545\u0548\x03\x02\x02\x02\u0546\u0547\x07\u0157\x02\x02\u0547\u0549" +
		"\x07\u0174\x02\x02\u0548\u0546\x03\x02\x02\x02\u0548\u0549\x03\x02\x02" +
		"\x02\u0549\u054A\x03\x02\x02\x02\u054A\u054B\x07\u016D\x02\x02\u054B{" +
		"\x03\x02\x02\x02\u054C\u054E\x07\xBE\x02\x02\u054D\u054C\x03\x02\x02\x02" +
		"\u054D\u054E\x03\x02\x02\x02\u054E\u054F\x03\x02\x02\x02\u054F\u0558\x07" +
		"\xC0\x02\x02\u0550\u0551\x07$\x02\x02\u0551\u0552\x07\xFD\x02\x02\u0552" +
		"\u0558\x05\u01B8\xDD\x02\u0553\u0555\x07\xBE\x02\x02\u0554\u0553\x03\x02" +
		"\x02\x02\u0554\u0555\x03\x02\x02\x02\u0555\u0556\x03\x02\x02\x02\u0556" +
		"\u0558\t\x14\x02\x02\u0557\u054D\x03\x02\x02\x02\u0557\u0550\x03\x02\x02" +
		"\x02\u0557\u0554\x03\x02\x02\x02\u0558}\x03\x02\x02\x02\u0559\u055B\x07" +
		"\u0156\x02\x02\u055A\u0559\x03\x02\x02\x02\u055A\u055B\x03\x02\x02\x02" +
		"\u055B\u055C\x03\x02\x02\x02\u055C\u055D\x07\u015C\x02\x02\u055D\u0566" +
		"\x05\u0180\xC1\x02\u055E\u0560\x07\u0137\x02\x02\u055F\u055E\x03\x02\x02" +
		"\x02\u055F\u0560\x03\x02\x02\x02\u0560\u0561\x03\x02\x02\x02\u0561\u0563" +
		"\x07H\x02\x02\u0562\u0564\x05\u0180\xC1\x02\u0563\u0562\x03\x02\x02\x02" +
		"\u0563\u0564\x03\x02\x02\x02\u0564\u0566\x03\x02\x02\x02\u0565\u055A\x03" +
		"\x02\x02\x02\u0565\u055F\x03\x02\x02\x02\u0566\x7F\x03\x02\x02\x02\u0567" +
		"\u0568\x078\x02\x02\u0568\u056C\t\x15\x02\x02\u0569\u056A\x07\x83\x02" +
		"\x02\u056A\u056B\x07\xBE\x02\x02\u056B\u056D\x07g\x02\x02\u056C\u0569" +
		"\x03\x02\x02\x02\u056C\u056D\x03\x02\x02\x02\u056D\u056E\x03\x02\x02\x02" +
		"\u056E\u0572\x05\u0180\xC1\x02\u056F\u0571\x05\x82B\x02\u0570\u056F\x03" +
		"\x02\x02\x02\u0571\u0574\x03\x02\x02\x02\u0572\u0570\x03\x02\x02\x02\u0572" +
		"\u0573\x03\x02\x02\x02\u0573\x81\x03\x02\x02\x02\u0574\u0572\x03\x02\x02" +
		"\x02\u0575\u0576\x07-\x02\x02\u0576\u057A\x05\u0180\xC1\x02\u0577\u0578" +
		"\x07\xA4\x02\x02\u0578\u057A\x05\u0180\xC1\x02\u0579\u0575\x03\x02\x02" +
		"\x02\u0579\u0577\x03\x02\x02\x02\u057A\x83\x03\x02\x02\x02\u057B\u0583" +
		"\x07\x07\x02\x02\u057C\u057F\x078\x02\x02\u057D\u057E\x07\xC8\x02\x02" +
		"\u057E\u0580\x07\xE2\x02\x02\u057F\u057D\x03\x02\x02\x02\u057F\u0580\x03" +
		"\x02\x02\x02\u0580\u0583\x03\x02\x02\x02\u0581\u0583\x07\xE2\x02\x02\u0582" +
		"\u057B\x03\x02\x02\x02\u0582\u057C\x03\x02\x02\x02\u0582\u0581\x03\x02" +
		"\x02\x02\u0582\u0583\x03\x02\x02\x02\u0583\u0584\x03\x02\x02\x02\u0584" +
		"\u0585\x07v\x02\x02\u0585\u0587\x05\u01B8\xDD\x02\u0586\u0588\x05\x96" +
		"L\x02\u0587\u0586\x03\x02\x02\x02\u0587\u0588\x03\x02\x02\x02\u0588\u0589" +
		"\x03\x02\x02\x02\u0589\u058B\x05\x86D\x02\u058A\u058C\t\x16\x02\x02\u058B" +
		"\u058A\x03\x02\x02\x02\u058B\u058C\x03\x02\x02\x02\u058C\u058E\x03\x02" +
		"\x02\x02\u058D\u058F\x052\x1A\x02\u058E\u058D\x03\x02\x02\x02\u058E\u058F" +
		"\x03\x02\x02\x02\u058F\u0590\x03\x02\x02\x02\u0590\u0591\x05\b\x05\x02" +
		"\u0591\x85\x03\x02\x02\x02\u0592\u0593\t\x17\x02\x02\u0593\u0595\x05x" +
		"=\x02\u0594\u0596\x05z>\x02\u0595\u0594\x03\x02\x02\x02\u0595\u0596\x03" +
		"\x02\x02\x02\u0596\x87\x03\x02\x02\x02\u0597\u059F\x07\x07\x02\x02\u0598" +
		"\u059B\x078\x02\x02\u0599\u059A\x07\xC8\x02\x02\u059A\u059C\x07\xE2\x02" +
		"\x02\u059B\u0599\x03\x02\x02\x02\u059B\u059C\x03\x02\x02\x02\u059C\u059F" +
		"\x03\x02\x02\x02\u059D\u059F\x07\xE2\x02\x02\u059E\u0597\x03\x02\x02\x02" +
		"\u059E\u0598\x03\x02\x02\x02\u059E\u059D\x03\x02\x02\x02\u059E\u059F\x03" +
		"\x02\x02\x02\u059F\u05A0\x03\x02\x02\x02\u05A0\u05A1\x07\xCF\x02\x02\u05A1" +
		"\u05A2\x05\u01B8\xDD\x02\u05A2\u05A3\t\x16\x02\x02\u05A3\u05A4\x05\x8A" +
		"F\x02\u05A4\u05A8\x07_\x02\x02\u05A5\u05A6\x05\u01B8\xDD\x02\u05A6\u05A7" +
		"\x07\u016F\x02\x02\u05A7\u05A9\x03\x02\x02\x02\u05A8\u05A5\x03\x02\x02" +
		"\x02\u05A8\u05A9\x03\x02\x02\x02\u05A9\x89\x03\x02\x02\x02\u05AA\u05AB" +
		"\x05\x8CG\x02\u05AB\u05B1\x07\u016F\x02\x02\u05AC\u05AD\x05\x8CG\x02\u05AD" +
		"\u05AE\x07\u016F\x02\x02\u05AE\u05B0\x03\x02\x02\x02\u05AF\u05AC\x03\x02" +
		"\x02\x02\u05B0\u05B3\x03\x02\x02\x02\u05B1\u05AF\x03\x02\x02\x02\u05B1" +
		"\u05B2\x03\x02\x02\x02\u05B2\x8B\x03\x02\x02\x02\u05B3\u05B1\x03\x02\x02" +
		"\x02\u05B4\u05C2\x054\x1B\x02\u05B5\u05B6\x07v\x02\x02\u05B6\u05B8\x05" +
		"\u01B8\xDD\x02\u05B7\u05B9\x05\x96L\x02\u05B8\u05B7\x03\x02\x02\x02\u05B8" +
		"\u05B9\x03\x02\x02\x02\u05B9\u05BA\x03\x02\x02\x02\u05BA\u05BB\x05\x86" +
		"D\x02\u05BB\u05C2\x03\x02\x02\x02\u05BC\u05BD\t\x18\x02\x02\u05BD\u05BF" +
		"\x05\u01B8\xDD\x02\u05BE\u05C0\x05\x96L\x02\u05BF\u05BE\x03\x02\x02\x02" +
		"\u05BF\u05C0\x03\x02\x02\x02\u05C0\u05C2\x03\x02\x02\x02\u05C1\u05B4\x03" +
		"\x02\x02\x02\u05C1\u05B5\x03\x02\x02\x02\u05C1\u05BC\x03\x02\x02\x02\u05C2" +
		"\x8D\x03\x02\x02\x02\u05C3\u05CB\x07\x07\x02\x02\u05C4\u05C7\x078\x02" +
		"\x02\u05C5\u05C6\x07\xC8\x02\x02\u05C6\u05C8\x07\xE2\x02\x02\u05C7\u05C5" +
		"\x03\x02\x02\x02\u05C7\u05C8\x03\x02\x02\x02\u05C8\u05CB\x03\x02\x02\x02" +
		"\u05C9\u05CB\x07\xE2\x02\x02\u05CA\u05C3\x03\x02\x02\x02\u05CA\u05C4\x03" +
		"\x02\x02\x02\u05CA\u05C9\x03\x02\x02\x02\u05CA\u05CB\x03\x02\x02\x02\u05CB" +
		"\u05CC\x03\x02\x02\x02\u05CC\u05CD\x07\xCF\x02\x02\u05CD\u05CE\x07\x19" +
		"\x02\x02\u05CE\u05CF\x05\u01B8\xDD\x02\u05CF\u05D0\t\x16\x02\x02\u05D0" +
		"\u05D1\x05\x90I\x02\u05D1\u05D5\x07_\x02\x02\u05D2\u05D3\x05\u01B8\xDD" +
		"\x02\u05D3\u05D4\x07\u016F\x02\x02\u05D4\u05D6\x03\x02\x02\x02\u05D5\u05D2" +
		"\x03\x02\x02\x02\u05D5\u05D6\x03\x02\x02\x02\u05D6\x8F\x03\x02\x02\x02" +
		"\u05D7\u05D8\x05\x92J\x02\u05D8\u05DE\x07\u016F\x02\x02\u05D9\u05DA\x05" +
		"\x92J\x02\u05DA\u05DB\x07\u016F\x02\x02\u05DB\u05DD\x03\x02\x02\x02\u05DC" +
		"\u05D9\x03\x02\x02\x02\u05DD\u05E0\x03\x02\x02\x02\u05DE\u05DC\x03\x02" +
		"\x02\x02\u05DE\u05DF\x03\x02\x02\x02\u05DF\x91\x03\x02\x02\x02\u05E0\u05DE" +
		"\x03\x02\x02\x02\u05E1\u05E5\x054\x1B\x02\u05E2\u05E5\x05\x84C\x02\u05E3" +
		"\u05E5\x05\x94K\x02\u05E4\u05E1\x03\x02\x02\x02\u05E4\u05E2\x03\x02\x02" +
		"\x02\u05E4\u05E3\x03\x02\x02\x02\u05E5\x93\x03\x02\x02\x02\u05E6\u05EE" +
		"\x07\x07\x02\x02\u05E7\u05EA\x078\x02\x02\u05E8\u05E9\x07\xC8\x02\x02" +
		"\u05E9\u05EB\x07\xE2\x02\x02\u05EA\u05E8\x03\x02\x02\x02\u05EA\u05EB\x03" +
		"\x02\x02\x02\u05EB\u05EE\x03\x02\x02\x02\u05EC\u05EE\x07\xE2\x02\x02\u05ED" +
		"\u05E6\x03\x02\x02\x02\u05ED\u05E7\x03\x02\x02\x02\u05ED\u05EC\x03\x02" +
		"\x02\x02\u05ED\u05EE\x03\x02\x02\x02\u05EE\u05EF\x03\x02\x02\x02\u05EF" +
		"\u05F0\t\x18\x02\x02\u05F0\u05F2\x05\u01B8\xDD\x02\u05F1\u05F3\x05\x96" +
		"L\x02\u05F2\u05F1\x03\x02\x02\x02\u05F2\u05F3\x03\x02\x02\x02\u05F3\u05F5" +
		"\x03\x02\x02\x02\u05F4\u05F6\x05\x9AN\x02\u05F5\u05F4\x03\x02\x02\x02" +
		"\u05F5\u05F6\x03\x02\x02\x02\u05F6\u05F8\x03\x02\x02\x02\u05F7\u05F9\t" +
		"\x16\x02\x02\u05F8\u05F7\x03\x02\x02\x02\u05F8\u05F9\x03\x02\x02\x02\u05F9" +
		"\u05FB\x03\x02\x02\x02\u05FA\u05FC\x052\x1A\x02\u05FB\u05FA\x03\x02\x02" +
		"\x02\u05FB\u05FC\x03\x02\x02\x02\u05FC\u05FE\x03\x02\x02\x02\u05FD\u05FF" +
		"\x05\u0116\x8C\x02\u05FE\u05FD\x03\x02\x02\x02\u05FE\u05FF\x03\x02\x02" +
		"\x02\u05FF\u0600\x03\x02\x02\x02\u0600\u0604\x05\f\x07\x02\u0601\u0602" +
		"\x05\u01B8\xDD\x02\u0602\u0603\x07\u016F\x02\x02\u0603\u0605\x03\x02\x02" +
		"\x02\u0604\u0601\x03\x02\x02\x02\u0604\u0605\x03\x02\x02\x02\u0605\x95" +
		"\x03\x02\x02\x02\u0606\u0607\x07\u016A\x02\x02\u0607\u061D\x07\u016D\x02" +
		"\x02\u0608\u0609\x07\u016A\x02\x02\u0609\u060E\x05\x98M\x02\u060A\u060B" +
		"\x07\u0157\x02\x02\u060B\u060D\x05\x98M\x02\u060C\u060A\x03\x02\x02\x02" +
		"\u060D\u0610\x03\x02\x02\x02\u060E\u060C\x03\x02\x02\x02\u060E\u060F\x03" +
		"\x02\x02\x02\u060F\u0611\x03\x02\x02\x02\u0610\u060E\x03\x02\x02\x02\u0611" +
		"\u0612\x07\u016D\x02\x02\u0612\u061D\x03\x02\x02\x02\u0613\u0614\x06L" +
		"\x04\x02\u0614\u0619\x05\x98M\x02\u0615\u0616\x07\u0157\x02\x02\u0616" +
		"\u0618\x05\x98M\x02\u0617\u0615\x03\x02\x02\x02\u0618\u061B\x03\x02\x02" +
		"\x02\u0619\u0617\x03\x02\x02\x02\u0619\u061A\x03\x02\x02\x02\u061A\u061D" +
		"\x03\x02\x02\x02\u061B\u0619\x03\x02\x02\x02\u061C\u0606\x03\x02\x02\x02" +
		"\u061C\u0608\x03\x02\x02\x02\u061C\u0613\x03\x02\x02\x02\u061D\x97\x03" +
		"\x02\x02\x02\u061E\u0624\x07\x86\x02\x02\u061F\u0624\x07\xCA\x02\x02\u0620" +
		"\u0624\x07\x8B\x02\x02\u0621\u0622\x07\x86\x02\x02\u0622\u0624\x07\xCA" +
		"\x02\x02\u0623\u061E\x03\x02\x02\x02\u0623\u061F\x03\x02\x02\x02\u0623" +
		"\u0620\x03\x02\x02\x02\u0623\u0621\x03\x02\x02\x02\u0623\u0624\x03\x02" +
		"\x02\x02\u0624\u0625\x03\x02\x02\x02\u0625\u0626\x05\u01B8\xDD\x02\u0626" +
		"\u0628\x05x=\x02\u0627\u0629\x05z>\x02\u0628\u0627\x03\x02\x02\x02\u0628" +
		"\u0629\x03\x02\x02\x02\u0629\u062D\x03\x02\x02\x02\u062A\u062C\x05|?\x02" +
		"\u062B\u062A\x03\x02\x02\x02\u062C\u062F\x03\x02\x02\x02\u062D\u062B\x03" +
		"\x02\x02\x02\u062D\u062E\x03\x02\x02\x02\u062E\u0631\x03\x02\x02\x02\u062F" +
		"\u062D\x03\x02\x02\x02\u0630\u0632\x05~@\x02\u0631\u0630\x03\x02\x02\x02" +
		"\u0631\u0632\x03\x02\x02\x02\u0632\u0649\x03\x02\x02\x02\u0633\u0639\x05" +
		"\u01B8\xDD\x02\u0634\u063A\x07\x86\x02\x02\u0635\u063A\x07\xCA\x02\x02" +
		"\u0636\u063A\x07\x8B\x02\x02\u0637\u0638\x07\x86\x02\x02\u0638\u063A\x07" +
		"\xCA\x02\x02\u0639\u0634\x03\x02\x02\x02\u0639\u0635\x03\x02\x02\x02\u0639" +
		"\u0636\x03\x02\x02\x02\u0639\u0637\x03\x02\x02\x02\u0639\u063A\x03\x02" +
		"\x02\x02\u063A\u063B\x03\x02\x02\x02\u063B\u063D\x05x=\x02\u063C\u063E" +
		"\x05z>\x02\u063D\u063C\x03\x02\x02\x02\u063D\u063E\x03\x02\x02\x02\u063E" +
		"\u0642\x03\x02\x02\x02\u063F\u0641\x05|?\x02\u0640\u063F\x03\x02\x02\x02" +
		"\u0641\u0644\x03\x02\x02\x02\u0642\u0640\x03\x02\x02\x02\u0642\u0643\x03" +
		"\x02\x02\x02\u0643\u0646\x03\x02\x02\x02\u0644\u0642\x03\x02\x02\x02\u0645" +
		"\u0647\x05~@\x02\u0646\u0645\x03\x02\x02\x02\u0646\u0647\x03\x02\x02\x02" +
		"\u0647\u0649\x03\x02\x02\x02\u0648\u0623\x03\x02\x02\x02\u0648\u0633\x03" +
		"\x02\x02\x02\u0649\x99\x03\x02\x02\x02\u064A\u064C\x05\x9CO\x02\u064B" +
		"\u064A\x03\x02\x02\x02\u064C\u064D\x03\x02\x02\x02\u064D\u064B\x03\x02" +
		"\x02\x02\u064D\u064E\x03\x02\x02\x02\u064E\x9B\x03\x02\x02\x02\u064F\u0650" +
		"\x07\x9D\x02\x02\u0650\u065B\x07\u0108\x02\x02\u0651\u0652\x07\u0108\x02" +
		"\x02\u0652\u0653\x07\xF9\x02\x02\u0653\u065B\t\x19\x02\x02\u0654\u0656" +
		"\x07Z\x02\x02\u0655\u0654\x03\x02\x02\x02\u0655\u0656\x03\x02\x02\x02" +
		"\u0656\u0657\x03\x02\x02\x02\u0657\u0658\x07\xE5\x02\x02\u0658\u0659\x07" +
		"\u0100\x02\x02\u0659\u065B\x07\u0174\x02\x02\u065A\u064F\x03\x02\x02\x02" +
		"\u065A\u0651\x03\x02\x02\x02\u065A\u0655\x03\x02\x02\x02\u065B\x9D\x03" +
		"\x02\x02\x02\u065C\u065D\x07Y\x02\x02\u065D\u0660\x07\u0118\x02\x02\u065E" +
		"\u065F\x07\x83\x02\x02\u065F\u0661\x07g\x02\x02\u0660\u065E\x03\x02\x02" +
		"\x02\u0660\u0661\x03\x02\x02\x02\u0661\u0662\x03\x02\x02\x02\u0662\u066B" +
		"\x05\u014A\xA6\x02\u0663\u0664\x07Y\x02\x02\u0664\u0667\t\x15\x02\x02" +
		"\u0665\u0666\x07\x83\x02\x02\u0666\u0668\x07g\x02\x02\u0667\u0665\x03" +
		"\x02\x02\x02\u0667\u0668\x03\x02\x02\x02\u0668\u0669\x03\x02\x02\x02\u0669" +
		"\u066B\x05\u0180\xC1\x02\u066A\u065C\x03\x02\x02\x02\u066A\u0663\x03\x02" +
		"\x02\x02\u066B\x9F\x03\x02\x02\x02\u066C\u066D\x07_\x02\x02\u066D\u066E" +
		"\x07\u0123\x02\x02\u066E\xA1\x03\x02\x02\x02\u066F\u0671\t\x1A\x02\x02" +
		"\u0670\u0672\x07\x85\x02\x02\u0671\u0670\x03\x02\x02\x02\u0671\u0672\x03" +
		"\x02\x02\x02\u0672\u0673\x03\x02\x02\x02\u0673\u0679\x05\u0180\xC1\x02" +
		"\u0674\u0675\x07\u016A\x02\x02\u0675\u0676\x05\u01A0\xD1\x02\u0676\u0677" +
		"\x07\u016D\x02\x02\u0677\u067A\x03\x02\x02\x02\u0678\u067A\x05\u01A0\xD1" +
		"\x02\u0679\u0674\x03\x02\x02\x02\u0679\u0678\x03\x02\x02\x02\u0679\u067A" +
		"\x03\x02\x02\x02\u067A\u0684\x03\x02\x02\x02\u067B\u067C\x07\x94\x02\x02" +
		"\u067C\u0681\x07\u0171\x02\x02\u067D\u067E\x07\u0157\x02\x02\u067E\u0680" +
		"\x07\u0171\x02\x02\u067F\u067D\x03\x02\x02\x02\u0680\u0683\x03\x02\x02" +
		"\x02\u0681\u067F\x03\x02\x02\x02\u0681\u0682\x03\x02\x02\x02\u0682\u0685" +
		"\x03\x02\x02\x02\u0683\u0681\x03\x02\x02\x02\u0684\u067B\x03\x02\x02\x02" +
		"\u0684\u0685\x03\x02\x02\x02\u0685\u0687\x03\x02\x02\x02\u0686\u0688\x05" +
		"\u0118\x8D\x02\u0687\u0686\x03\x02\x02\x02\u0687\u0688\x03\x02\x02\x02" +
		"\u0688\xA3\x03\x02\x02\x02\u0689\u068D\x05\xA6T\x02\u068A\u068D\x05\xA8" +
		"U\x02\u068B\u068D\x05\xAAV\x02\u068C\u0689\x03\x02\x02\x02\u068C\u068A" +
		"\x03\x02\x02\x02\u068C\u068B\x03\x02\x02\x02\u068D\xA5\x03\x02\x02\x02" +
		"\u068E\u068F\x07\x83\x02\x02\u068F\u0690\x05\u0170\xB9\x02\u0690\u0691" +
		"\x07\u011D\x02\x02\u0691\u0695\x05\x04\x03\x02\u0692\u0694\x05\xACW\x02" +
		"\u0693\u0692\x03\x02\x02\x02\u0694\u0697\x03\x02\x02\x02\u0695\u0693\x03" +
		"\x02\x02\x02\u0695\u0696\x03\x02\x02\x02\u0696\u0699\x03\x02\x02\x02\u0697" +
		"\u0695\x03\x02\x02\x02\u0698\u069A\x05\xAEX\x02\u0699\u0698\x03\x02\x02" +
		"\x02\u0699\u069A\x03\x02\x02\x02\u069A\u069B\x03\x02\x02\x02\u069B\u069C" +
		"\x07_\x02\x02\u069C\u069D\x07\x83\x02\x02\u069D\xA7\x03\x02\x02\x02\u069E" +
		"\u069F\x07\x83\x02\x02\u069F\u06A0\x05\u0170\xB9\x02\u06A0\u06A3\x05\b" +
		"\x05\x02\u06A1\u06A2\x07[\x02\x02\u06A2\u06A4\x05\b\x05\x02\u06A3\u06A1" +
		"\x03\x02\x02\x02\u06A3\u06A4\x03\x02\x02\x02\u06A4\xA9\x03\x02\x02\x02" +
		"\u06A5\u06A6\x07\u015A\x02\x02\u06A6\u06A7\x07\x83\x02\x02\u06A7\u06A8" +
		"\x05\u0170\xB9\x02\u06A8\u06A9\x07\u011D\x02\x02\u06A9\u06AA\x05\b\x05" +
		"\x02\u06AA\xAB\x03\x02\x02\x02\u06AB\u06AC\t\x1B\x02\x02\u06AC\u06AD\x05" +
		"\u0170\xB9\x02\u06AD\u06AE\x07\u011D\x02\x02\u06AE\u06AF\x05\x04\x03\x02" +
		"\u06AF\xAD\x03\x02\x02\x02\u06B0\u06B1\x07[\x02\x02\u06B1\u06B2\x05\x04" +
		"\x03\x02\u06B2\xAF\x03\x02\x02\x02\u06B3\u06B6\x07\x87\x02\x02\u06B4\u06B7" +
		"\x05\u01B2\xDA\x02\u06B5\u06B7\x05\u0180\xC1\x02\u06B6\u06B4\x03\x02\x02" +
		"\x02\u06B6\u06B5\x03\x02\x02\x02\u06B7\xB1\x03\x02\x02\x02\u06B8\u06BF" +
		"\x07\x8C\x02\x02\u06B9\u06BA\x07\xCD\x02\x02\u06BA\u06C0\x07\u0118\x02" +
		"\x02\u06BB\u06BD\x07\x94\x02\x02\u06BC\u06BE\x07\u0118\x02\x02\u06BD\u06BC" +
		"\x03\x02\x02\x02\u06BD\u06BE\x03\x02\x02\x02\u06BE\u06C0\x03\x02\x02\x02" +
		"\u06BF\u06B9\x03\x02\x02\x02\u06BF\u06BB\x03\x02\x02\x02\u06C0\u06C1\x03" +
		"\x02\x02\x02\u06C1\u06C3\x05\u014A\xA6\x02\u06C2\u06C4\x05\xB4[\x02\u06C3" +
		"\u06C2\x03\x02\x02\x02\u06C3\u06C4\x03\x02\x02\x02\u06C4\u06C7\x03\x02" +
		"\x02\x02\u06C5\u06C8\x05\u011A\x8E\x02\u06C6\u06C8\x05\xB6\\\x02\u06C7" +
		"\u06C5\x03\x02\x02\x02\u06C7\u06C6\x03\x02\x02\x02\u06C8\xB3\x03\x02\x02" +
		"\x02\u06C9\u06CA\x07\u016A\x02\x02\u06CA\u06CF\x05\u01B8\xDD\x02\u06CB" +
		"\u06CC\x07\u0157\x02\x02\u06CC\u06CE\x05\u01B8\xDD\x02\u06CD\u06CB\x03" +
		"\x02\x02\x02\u06CE\u06D1\x03\x02\x02\x02\u06CF\u06CD\x03\x02\x02\x02\u06CF" +
		"\u06D0\x03\x02\x02\x02\u06D0\u06D2\x03\x02\x02\x02\u06D1\u06CF\x03\x02" +
		"\x02\x02\u06D2\u06D3\x07\u016D\x02\x02\u06D3\xB5\x03\x02\x02\x02\u06D4" +
		"\u06D5\x07\u012E\x02\x02\u06D5\u06DA\x05\xB8]\x02\u06D6\u06D7\x07\u0157" +
		"\x02\x02\u06D7\u06D9\x05\xB8]\x02\u06D8\u06D6\x03\x02\x02\x02\u06D9\u06DC" +
		"\x03\x02\x02\x02\u06DA\u06D8\x03\x02\x02\x02\u06DA\u06DB\x03\x02\x02\x02" +
		"\u06DB\xB7\x03\x02\x02\x02\u06DC\u06DA\x03\x02\x02\x02\u06DD\u06DE\x07" +
		"\u016A\x02\x02\u06DE\u06E3\x05\u0180\xC1\x02\u06DF\u06E0\x07\u0157\x02" +
		"\x02\u06E0\u06E2\x05\u0180\xC1\x02\u06E1\u06DF\x03\x02\x02\x02\u06E2\u06E5" +
		"\x03\x02\x02\x02\u06E3\u06E1\x03\x02\x02\x02\u06E3\u06E4\x03\x02\x02\x02" +
		"\u06E4\u06E6\x03\x02\x02\x02\u06E5\u06E3\x03\x02\x02\x02\u06E6\u06E7\x07" +
		"\u016D\x02\x02\u06E7\xB9\x03\x02\x02\x02\u06E8\u06E9\x07\x8C\x02\x02\u06E9" +
		"\u06EB\x07\xCD\x02\x02\u06EA\u06EC\x07\xA3\x02\x02\u06EB\u06EA\x03\x02" +
		"\x02\x02\u06EB\u06EC\x03\x02\x02\x02\u06EC\u06ED\x03\x02\x02\x02\u06ED" +
		"\u06EE\x07T\x02\x02\u06EE\u06EF\x05\u01A6\xD4\x02\u06EF\u06F0\x05\u01A4" +
		"\xD3\x02\u06F0\xBB\x03\x02\x02\x02\u06F1\u06F3\x07h\x02\x02\u06F2\u06F4" +
		"\x07\u0171\x02\x02\u06F3\u06F2\x03\x02\x02\x02\u06F3\u06F4\x03\x02\x02" +
		"\x02\u06F4\u06F7\x03\x02\x02\x02\u06F5\u06F6\x07\u0134\x02\x02\u06F6\u06F8" +
		"\x05\u0170\xB9\x02\u06F7\u06F5\x03\x02\x02\x02\u06F7\u06F8\x03\x02\x02" +
		"\x02\u06F8\xBD\x03\x02\x02\x02\u06F9\u06FA\x07w\x02\x02\u06FA\u06FB\x07" +
		"R\x02\x02\u06FB\u06FC\x05\xC0a\x02\u06FC\xBF\x03\x02\x02\x02\u06FD\u0700" +
		"\x05\xC2b\x02\u06FE\u0700\x05\xC4c\x02\u06FF\u06FD\x03\x02\x02\x02\u06FF" +
		"\u06FE\x03\x02\x02\x02\u0700\xC1\x03\x02\x02\x02\u0701\u0702\x07e\x02" +
		"\x02\u0702\u0703\x07\u0174\x02\x02\u0703\u0704\x05\u01B8\xDD\x02\u0704" +
		"\u0705\x07\u015C\x02\x02\u0705\u0706\x07\xB1\x02\x02\u0706\xC3\x03\x02" +
		"\x02\x02\u0707\u0708\x05\u01B8\xDD\x02\u0708\u0709\x07\u015C\x02\x02\u0709" +
		"\u070A\x07\xF1\x02\x02\u070A\xC5\x03\x02\x02\x02\u070B\u070C\x07z\x02" +
		"\x02\u070C\u0711\x05\xC8e\x02\u070D\u070E\x07\u0157\x02\x02\u070E\u0710" +
		"\x05\xC8e\x02\u070F\u070D\x03\x02\x02\x02\u0710\u0713\x03\x02\x02\x02" +
		"\u0711\u070F\x03\x02\x02\x02\u0711\u0712\x03\x02\x02\x02\u0712\u0714\x03" +
		"\x02\x02\x02\u0713\u0711\x03\x02\x02\x02\u0714\u0715\x07\u0121\x02\x02" +
		"\u0715\u0716\x07\xEC\x02\x02\u0716\u0717\x05\u01B8\xDD\x02\u0717\xC7\x03" +
		"\x02\x02\x02\u0718\u0719\x07d\x02\x02\u0719\u071A\x07\xC5\x02\x02\u071A" +
		"\u071B\x07\xD9\x02\x02\u071B\u071C\x05\u01B8\xDD\x02\u071C\xC9\x03\x02" +
		"\x02\x02\u071D\u071F\x07\x9E\x02\x02\u071E\u0720\x07\u0171\x02\x02\u071F" +
		"\u071E\x03\x02\x02\x02\u071F\u0720\x03\x02\x02\x02\u0720\xCB\x03\x02\x02" +
		"\x02\u0721\u0722\x07\xAC\x02\x02\u0722\u0723\x07\xC3\x02\x02\u0723\u0726" +
		"\x05\u0180\xC1\x02\u0724\u0725\x07\u0121\x02\x02\u0725\u0727\x05\u0180" +
		"\xC1\x02\u0726\u0724\x03\x02\x02\x02\u0726\u0727\x03\x02\x02\x02\u0727" +
		"\u072A\x03\x02\x02\x02\u0728\u0729\x07\x0E\x02\x02\u0729\u072B\x05\u0180" +
		"\xC1\x02\u072A\u0728\x03\x02\x02\x02\u072A\u072B\x03\x02\x02\x02\u072B" +
		"\xCD\x03\x02\x02\x02\u072C\u072D\x07\xC7\x02\x02\u072D\u0733\x07\u0171" +
		"\x02\x02\u072E\u0731\x07p\x02\x02\u072F\u0732\x05\u011A\x8E\x02\u0730" +
		"\u0732\x05\u0180\xC1\x02\u0731\u072F\x03\x02\x02\x02\u0731\u0730\x03\x02" +
		"\x02\x02\u0732\u0734\x03\x02\x02\x02\u0733\u072E\x03\x02\x02\x02\u0733" +
		"\u0734\x03\x02\x02\x02\u0734\xCF\x03\x02\x02\x02\u0735\u0737\x07k\x02" +
		"\x02\u0736\u0738\x07t\x02\x02\u0737\u0736\x03\x02\x02\x02\u0737\u0738" +
		"\x03\x02\x02\x02\u0738\u0739\x03\x02\x02\x02\u0739\u073A\x07\u0171\x02" +
		"\x02\u073A\u073B\x07\x94\x02\x02\u073B\u0740\x07\u0171\x02\x02\u073C\u073D" +
		"\x07\u0157\x02\x02\u073D\u073F\x07\u0171\x02\x02\u073E\u073C\x03\x02\x02" +
		"\x02\u073F\u0742\x03\x02\x02\x02\u0740\u073E\x03\x02\x02\x02\u0740\u0741" +
		"\x03\x02\x02\x02\u0741\xD1\x03\x02\x02\x02\u0742\u0740\x03\x02\x02\x02" +
		"\u0743\u0744\x07*\x02\x02\u0744\u0745\t\x1C\x02\x02\u0745\u0746\x07\xC5" +
		"\x02\x02\u0746\u0748\x05\u014A\xA6\x02\u0747\u0749\x05\xD4k\x02\u0748" +
		"\u0747\x03\x02\x02\x02\u0748\u0749\x03\x02\x02\x02\u0749\xD3\x03\x02\x02" +
		"\x02\u074A\u074B\x07,\x02\x02\u074B\u074C\x07\u016A\x02\x02\u074C";
	private static readonly _serializedATNSegment4: string =
		"\u0751\x05\u01B8\xDD\x02\u074D\u074E\x07\u0157\x02\x02\u074E\u0750\x05" +
		"\u01B8\xDD\x02\u074F\u074D\x03\x02\x02\x02\u0750\u0753\x03\x02\x02\x02" +
		"\u0751\u074F\x03\x02\x02\x02\u0751\u0752\x03\x02\x02\x02\u0752\u0754\x03" +
		"\x02\x02\x02\u0753\u0751\x03\x02\x02\x02\u0754\u0755\x07\u016D\x02\x02" +
		"\u0755\xD5\x03\x02\x02\x02\u0756\u0757\x07\'\x02\x02\u0757\u0758\x07\u0171" +
		"\x02\x02\u0758\xD7\x03\x02\x02\x02\u0759\u075A\x07)\x02\x02\u075A\u075B" +
		"\t\x1D\x02\x02\u075B\u075C\x05\xDAn\x02\u075C\u075D\x07\u0157\x02\x02" +
		"\u075D\u075E\x05\xDAn\x02\u075E\xD9\x03\x02\x02\x02\u075F\u0761\x05\u014A" +
		"\xA6\x02\u0760\u0762\x05\u014C\xA7\x02\u0761\u0760\x03\x02\x02\x02\u0761" +
		"\u0762\x03\x02\x02\x02\u0762\u0768\x03\x02\x02\x02\u0763\u0764\x07\u016A" +
		"\x02\x02\u0764\u0765\x05\u011A\x8E\x02\u0765\u0766\x07\u016D\x02\x02\u0766" +
		"\u0768\x03\x02\x02\x02\u0767\u075F\x03\x02\x02\x02\u0767\u0763\x03\x02" +
		"\x02\x02\u0768\u076B\x03\x02\x02\x02\u0769\u076A\x07\x0E\x02\x02\u076A" +
		"\u076C\x05\u01B8\xDD\x02\u076B\u0769\x03\x02\x02\x02\u076B\u076C\x03\x02" +
		"\x02\x02\u076C\xDB\x03\x02\x02\x02\u076D\u076E\x075\x02\x02\u076E\u076F" +
		"\x07t\x02\x02\u076F\u0770\x07\xA3\x02\x02\u0770\u0775\x05\xE0q\x02\u0771" +
		"\u0772\x07\u0157\x02\x02\u0772\u0774\x05\xE0q\x02\u0773\u0771\x03\x02" +
		"\x02\x02\u0774\u0777\x03\x02\x02\x02\u0775\u0773\x03\x02\x02\x02\u0775" +
		"\u0776\x03\x02\x02\x02\u0776\u0778\x03\x02\x02\x02\u0777\u0775\x03\x02" +
		"\x02\x02\u0778\u0779\x07\u0121\x02\x02\u0779\u077D\x05\xE2r\x02\u077A" +
		"\u077C\x05\xE6t\x02\u077B\u077A\x03\x02\x02\x02\u077C\u077F\x03\x02\x02" +
		"\x02\u077D\u077B\x03\x02\x02\x02\u077D\u077E\x03\x02\x02\x02\u077E\xDD" +
		"\x03\x02\x02\x02\u077F\u077D\x03\x02\x02\x02\u0780\u0786\x075\x02\x02" +
		"\u0781\u0787\x05\u014A\xA6\x02\u0782\u0783\x07\u016A\x02\x02\u0783\u0784" +
		"\x05\u011A\x8E\x02\u0784\u0785\x07\u016D\x02\x02\u0785\u0787\x03\x02\x02" +
		"\x02\u0786\u0781\x03\x02\x02\x02\u0786\u0782\x03\x02\x02\x02\u0787\u0788" +
		"\x03\x02\x02\x02\u0788\u078A\x07\u0121\x02\x02\u0789\u078B\x07\x7F\x02" +
		"\x02\u078A\u0789\x03\x02\x02\x02\u078A\u078B\x03\x02\x02\x02\u078B\u078C" +
		"\x03\x02\x02\x02\u078C\u0790\x05\xE2r\x02\u078D\u078F\x05\xE4s\x02\u078E" +
		"\u078D\x03\x02\x02\x02\u078F\u0792\x03\x02\x02\x02\u0790\u078E\x03\x02" +
		"\x02\x02\u0790\u0791\x03\x02\x02\x02\u0791\xDF\x03\x02\x02\x02\u0792\u0790" +
		"\x03\x02\x02\x02\u0793\u0796\x05\u01B2\xDA\x02\u0794\u0796\x05\u0180\xC1" +
		"\x02\u0795\u0793\x03\x02\x02\x02\u0795\u0794\x03\x02\x02\x02\u0796\xE1" +
		"\x03\x02\x02\x02\u0797\u079A\x05\u01B2\xDA\x02\u0798\u079A\x05\u0180\xC1" +
		"\x02\u0799\u0797\x03\x02\x02\x02\u0799\u0798\x03\x02\x02\x02\u079A\xE3" +
		"\x03\x02\x02\x02\u079B\u079C\x07\x0E\x02\x02\u079C\u07A4\x05\u01B8\xDD" +
		"\x02\u079D\u079E\x07\x11\x02\x02\u079E\u07A4\x05\u0180\xC1\x02\u079F\u07A0" +
		"\x07O\x02\x02\u07A0\u07A4\x05\u0180\xC1\x02\u07A1\u07A2\x07\u010A\x02" +
		"\x02\u07A2\u07A4\x05\u01B8\xDD\x02\u07A3\u079B\x03\x02\x02\x02\u07A3\u079D" +
		"\x03\x02\x02\x02\u07A3\u079F\x03\x02\x02\x02\u07A3\u07A1\x03\x02\x02\x02" +
		"\u07A4\xE5\x03\x02\x02\x02\u07A5\u07A6\t\x1E\x02\x02\u07A6\xE7\x03\x02" +
		"\x02\x02\u07A7\u07A9\x07/\x02\x02\u07A8\u07AA\x07\u0139\x02\x02\u07A9" +
		"\u07A8\x03\x02\x02\x02\u07A9\u07AA\x03\x02\x02\x02\u07AA\xE9\x03\x02\x02" +
		"\x02\u07AB\u07AD\x078\x02\x02\u07AC\u07AE\x07\u0128\x02\x02\u07AD\u07AC" +
		"\x03\x02\x02\x02\u07AD\u07AE\x03\x02\x02\x02\u07AE\u07AF\x03\x02\x02\x02" +
		"\u07AF\u07B0\x07\x88\x02\x02\u07B0\u07B1\x05\u01B8\xDD\x02\u07B1\u07B2" +
		"\x07\xC5\x02\x02\u07B2\u07B3\x05\u014A\xA6\x02\u07B3\u07B4\x07\u016A\x02" +
		"\x02\u07B4\u07B9\x05\xECw\x02\u07B5\u07B6\x07\u0157\x02\x02\u07B6\u07B8" +
		"\x05\xECw\x02\u07B7\u07B5\x03\x02\x02\x02\u07B8\u07BB\x03\x02\x02\x02" +
		"\u07B9\u07B7\x03\x02\x02\x02\u07B9\u07BA\x03\x02\x02\x02\u07BA\u07BC\x03" +
		"\x02\x02\x02\u07BB\u07B9\x03\x02\x02\x02\u07BC\u07BD\x07\u016D\x02\x02" +
		"\u07BD\xEB\x03\x02\x02\x02\u07BE\u07C0\x05\u01B8\xDD\x02\u07BF\u07C1\t" +
		"\t\x02\x02\u07C0\u07BF\x03\x02\x02\x02\u07C0\u07C1\x03\x02\x02\x02\u07C1" +
		"\xED\x03\x02\x02\x02\u07C2\u07C3\x05\xF0y\x02\u07C3\xEF\x03\x02\x02\x02" +
		"\u07C4\u07C5\x07\u0137\x02\x02\u07C5\u07C6\x07\u016A\x02\x02\u07C6\u07C7" +
		"\x05\u01B8\xDD\x02\u07C7\u07C8\x07\u015C\x02\x02\u07C8\u07D0\x05\u01B8" +
		"\xDD\x02\u07C9\u07CA\x07\u0157\x02\x02\u07CA\u07CB\x05\u01B8\xDD\x02\u07CB" +
		"\u07CC\x07\u015C\x02\x02\u07CC\u07CD\x05\u01B8\xDD\x02\u07CD\u07CF\x03" +
		"\x02\x02\x02\u07CE\u07C9\x03\x02\x02\x02\u07CF\u07D2\x03\x02\x02\x02\u07D0" +
		"\u07CE\x03\x02\x02\x02\u07D0\u07D1\x03\x02\x02\x02\u07D1\u07D3\x03\x02" +
		"\x02\x02\u07D2\u07D0\x03\x02\x02\x02\u07D3\u07D7\x07\u016D\x02\x02\u07D4" +
		"\u07D6\x05l7\x02\u07D5\u07D4\x03\x02\x02\x02\u07D6\u07D9\x03\x02\x02\x02" +
		"\u07D7\u07D5\x03\x02\x02\x02\u07D7\u07D8\x03\x02\x02\x02\u07D8\xF1\x03" +
		"\x02\x02\x02\u07D9\u07D7\x03\x02\x02\x02\u07DA\u07DB\x07\xD7\x02\x02\u07DB" +
		"\u07E2\x05\u0180\xC1\x02\u07DC\u07DD\x07\xD7\x02\x02\u07DD\u07DE\x07\u016A" +
		"\x02\x02\u07DE\u07DF\x05\u0180\xC1\x02\u07DF\u07E0\x07\u016D\x02\x02\u07E0" +
		"\u07E2\x03\x02\x02\x02\u07E1\u07DA\x03\x02\x02\x02\u07E1\u07DC\x03\x02" +
		"\x02\x02\u07E2\xF3\x03\x02\x02\x02\u07E3\u07E5\x07\u015A\x02\x02\u07E4" +
		"\u07E3\x03\x02\x02\x02\u07E4\u07E5\x03\x02\x02\x02\u07E5\u07E6\x03\x02" +
		"\x02\x02\u07E6\u07E8\x07\xDC\x02\x02\u07E7\u07E9\x05\u0180\xC1\x02\u07E8" +
		"\u07E7\x03\x02\x02\x02\u07E8\u07E9\x03\x02\x02\x02\u07E9\xF5\x03\x02\x02" +
		"\x02\u07EA\u07EB\x07\xDE\x02\x02\u07EB\xF7\x03\x02\x02\x02\u07EC\u07F8" +
		"\x07\xE3\x02\x02\u07ED\u07EF\x07\u010B\x02\x02\u07EE\u07F0\x07\u012D\x02" +
		"\x02\u07EF\u07EE\x03\x02\x02\x02\u07EF\u07F0\x03\x02\x02\x02\u07F0\u07F1" +
		"\x03\x02\x02\x02\u07F1\u07F6\x05\u0180\xC1\x02\u07F2\u07F3\x07\xFD\x02" +
		"\x02\u07F3\u07F4\x07\xB1\x02\x02\u07F4\u07F5\x07\u015C\x02\x02\u07F5\u07F7" +
		"\x05\u0180\xC1\x02\u07F6\u07F2\x03\x02\x02\x02\u07F6\u07F7\x03\x02\x02" +
		"\x02\u07F7\u07F9\x03\x02\x02\x02\u07F8\u07ED\x03\x02\x02\x02\u07F8\u07F9" +
		"\x03\x02\x02\x02\u07F9\xF9\x03\x02\x02\x02\u07FA\u07FC\x07\xE7\x02\x02" +
		"\u07FB\u07FD\x05\u0180\xC1\x02\u07FC\u07FB\x03\x02\x02\x02\u07FC\u07FD" +
		"\x03\x02\x02\x02\u07FD\xFB\x03\x02\x02\x02\u07FE\u0800\x07\xED\x02\x02" +
		"\u07FF\u0801\x07\u0139\x02\x02\u0800\u07FF\x03\x02\x02\x02\u0800\u0801" +
		"\x03\x02\x02\x02\u0801\xFD\x03\x02\x02\x02\u0802\u0806\x05\u0100\x81\x02" +
		"\u0803\u0806\x05\u0102\x82\x02\u0804\u0806\x05\u0104\x83\x02\u0805\u0802" +
		"\x03\x02\x02\x02\u0805\u0803\x03\x02\x02\x02\u0805\u0804\x03\x02\x02\x02" +
		"\u0806\xFF\x03\x02\x02\x02\u0807\u0809\x07<\x02\x02\u0808\u0807\x03\x02" +
		"\x02\x02\u0808\u0809\x03\x02\x02\x02\u0809\u080A\x03\x02\x02\x02\u080A" +
		"\u080D\x07\xF6\x02\x02\u080B\u080D\x07=\x02\x02\u080C\u0808\x03\x02\x02" +
		"\x02\u080C\u080B\x03\x02\x02\x02\u080D\u080F\x03\x02\x02\x02\u080E\u0810" +
		"\x07\u015C\x02\x02\u080F\u080E\x03\x02\x02\x02\u080F\u0810\x03\x02\x02" +
		"\x02\u0810\u0811\x03\x02\x02\x02\u0811\u0812\x05\u0180\xC1\x02\u0812\u0101" +
		"\x03\x02\x02\x02\u0813\u0814\t\x1F\x02\x02\u0814\u0815\t \x02\x02\u0815" +
		"\u0103\x03\x02\x02\x02\u0816\u0817\x07\xDB\x02\x02\u0817\u081A\x07\u015C" +
		"\x02\x02\u0818\u081B\x05\u0180\xC1\x02\u0819\u081B\x07\xBD\x02\x02\u081A" +
		"\u0818\x03\x02\x02\x02\u081A\u0819\x03\x02\x02\x02\u081B\u081D\x03\x02" +
		"\x02\x02\u081C\u081E\x07\u0129\x02\x02\u081D\u081C\x03\x02\x02\x02\u081D" +
		"\u081E\x03\x02\x02\x02\u081E\u081F\x03\x02\x02\x02\u081F\u0820\x07p\x02" +
		"\x02\u0820\u0821\t!\x02\x02\u0821\u0105\x03\x02\x02\x02\u0822\u0823\x07" +
		"\u0102\x02\x02\u0823\u0824\x05\u01B8\xDD\x02\u0824\u0107\x03\x02\x02\x02" +
		"\u0825\u0828\x07\u0116\x02\x02\u0826\u0827\x07\u0122\x02\x02\u0827\u0829" +
		"\x05\u0180\xC1\x02\u0828\u0826\x03\x02\x02\x02\u0828\u0829\x03\x02\x02" +
		"\x02\u0829\u082A\x03\x02\x02\x02\u082A\u0834\x07p\x02\x02\u082B\u0835" +
		"\x05\u011A\x8E\x02\u082C\u082E\x05\u014A\xA6\x02\u082D\u082F\x05\u014C" +
		"\xA7\x02\u082E\u082D\x03\x02\x02\x02\u082E\u082F\x03\x02\x02\x02\u082F" +
		"\u0832\x03\x02\x02\x02\u0830\u0831\x07\xA1\x02\x02\u0831\u0833\x05\u0180" +
		"\xC1\x02\u0832\u0830\x03\x02\x02\x02\u0832\u0833\x03\x02\x02\x02\u0833" +
		"\u0835\x03\x02\x02\x02\u0834\u082B\x03\x02\x02\x02\u0834\u082C\x03\x02" +
		"\x02\x02\u0835\u0109\x03\x02\x02\x02\u0836\u0838\x07\u0125\x02\x02\u0837" +
		"\u0839\x07\u0118\x02\x02\u0838\u0837\x03\x02\x02\x02\u0838\u0839\x03\x02" +
		"\x02\x02\u0839\u083A\x03\x02\x02\x02\u083A\u083B\x05\u014A\xA6\x02\u083B" +
		"\u010B\x03\x02\x02\x02\u083C\u083D\x07\u012B\x02\x02\u083D\u083E\x05\u0180" +
		"\xC1\x02\u083E\u010D\x03\x02\x02\x02\u083F\u0841\x07\u012E\x02\x02\u0840" +
		"\u0842\x07\u016A\x02\x02\u0841\u0840\x03\x02\x02\x02\u0841\u0842\x03\x02" +
		"\x02\x02\u0842\u0843\x03\x02\x02\x02\u0843\u0848\x05\u0180\xC1\x02\u0844" +
		"\u0845\x07\u0157\x02\x02\u0845\u0847\x05\u0180\xC1\x02\u0846\u0844\x03" +
		"\x02\x02\x02\u0847\u084A\x03\x02\x02\x02\u0848\u0846\x03\x02\x02\x02\u0848" +
		"\u0849\x03\x02\x02\x02\u0849\u084C\x03\x02\x02\x02\u084A\u0848\x03\x02" +
		"\x02\x02\u084B\u084D\x07\u016D\x02\x02\u084C\u084B\x03\x02\x02\x02\u084C" +
		"\u084D\x03\x02\x02\x02\u084D\u084E\x03\x02\x02\x02\u084E\u0850\x07\x94" +
		"\x02\x02\u084F\u0851\x07\u016A\x02\x02\u0850\u084F\x03\x02\x02\x02\u0850" +
		"\u0851\x03\x02\x02\x02\u0851\u0852\x03\x02\x02\x02\u0852\u0857\x05\u01B8" +
		"\xDD\x02\u0853\u0854\x07\u0157\x02\x02\u0854\u0856\x05\u01B8\xDD\x02\u0855" +
		"\u0853\x03\x02\x02\x02\u0856\u0859\x03\x02\x02\x02\u0857\u0855\x03\x02" +
		"\x02\x02\u0857\u0858\x03\x02\x02\x02\u0858\u085B\x03\x02\x02\x02\u0859" +
		"\u0857\x03\x02\x02\x02\u085A\u085C\x07\u016D\x02\x02\u085B\u085A\x03\x02" +
		"\x02\x02\u085B\u085C\x03\x02\x02\x02\u085C\u010F\x03\x02\x02\x02\u085D" +
		"\u085E\x07\u0136\x02\x02\u085E\u085F\x05\u0170\xB9\x02\u085F\u0860\t\"" +
		"\x02\x02\u0860\u0861\x05\x04\x03\x02\u0861\u0863\x07_\x02\x02\u0862\u0864" +
		"\t#\x02\x02\u0863\u0862\x03\x02\x02\x02\u0863\u0864\x03\x02\x02\x02\u0864" +
		"\u0111\x03\x02\x02\x02\u0865\u0866\x07p\x02\x02\u0866\u0867\x07\u0171" +
		"\x02\x02\u0867\u0869\x07\x86\x02\x02\u0868\u086A\x07\u016A\x02\x02\u0869" +
		"\u0868\x03\x02\x02\x02\u0869\u086A\x03\x02\x02\x02\u086A\u086B\x03\x02" +
		"\x02\x02\u086B\u086D\x05\u011A\x8E\x02\u086C\u086E\x07\u016D\x02\x02\u086D" +
		"\u086C\x03\x02\x02\x02\u086D\u086E\x03\x02\x02\x02\u086E\u086F\x03\x02" +
		"\x02\x02\u086F\u0870\x07\xAB\x02\x02\u0870\u0871\x05\x04\x03\x02\u0871" +
		"\u0872\x07_\x02\x02\u0872\u0873\x07\xAB\x02\x02\u0873\u0113\x03\x02\x02" +
		"\x02\u0874\u0875\x07p\x02\x02\u0875\u0876\x07\u0171\x02\x02\u0876\u0878" +
		"\x07\x86\x02\x02\u0877\u0879\x07\xE9\x02\x02\u0878\u0877\x03\x02\x02\x02" +
		"\u0878\u0879\x03\x02\x02\x02\u0879\u087A\x03\x02\x02\x02\u087A\u087B\x05" +
		"\u0180\xC1\x02\u087B\u087C\x07\u015B\x02\x02\u087C\u087F\x05\u0180\xC1" +
		"\x02\u087D\u087E\t$\x02\x02\u087E\u0880\x05\u0180\xC1\x02\u087F\u087D" +
		"\x03\x02\x02\x02\u087F\u0880\x03\x02\x02\x02\u0880\u0881\x03\x02\x02\x02" +
		"\u0881\u0882\x07\xAB\x02\x02\u0882\u0883\x05\x04\x03\x02\u0883\u0884\x07" +
		"_\x02\x02\u0884\u0885\x07\xAB\x02\x02\u0885\u0115\x03\x02\x02\x02\u0886" +
		"\u088D\x07\u017A\x02\x02\u0887\u0888\x07\u0164\x02\x02\u0888\u0889\x07" +
		"\u0164\x02\x02\u0889\u088A\x07\u0171\x02\x02\u088A\u088B\x07\u0162\x02" +
		"\x02\u088B\u088D\x07\u0162\x02\x02\u088C\u0886\x03\x02\x02\x02\u088C\u0887" +
		"\x03\x02\x02\x02\u088D\u0117\x03\x02\x02\x02\u088E\u088F\x07\u012C\x02" +
		"\x02\u088F\u0894\x05\u0180\xC1\x02\u0890\u0891\x07\u0157\x02\x02\u0891" +
		"\u0893\x05\u0180\xC1\x02\u0892\u0890\x03\x02\x02\x02\u0893\u0896\x03\x02" +
		"\x02\x02\u0894\u0892\x03\x02\x02\x02\u0894\u0895\x03\x02\x02\x02\u0895" +
		"\u0119\x03\x02\x02\x02\u0896\u0894\x03\x02\x02\x02\u0897\u0899\x05\u011C" +
		"\x8F\x02\u0898\u0897\x03\x02\x02\x02\u0898\u0899\x03\x02\x02\x02\u0899" +
		"\u089A\x03\x02\x02\x02\u089A\u089B\x05\u0122\x92\x02\u089B\u011B\x03\x02" +
		"\x02\x02\u089C\u089D\x07\u0137\x02\x02\u089D\u08A2\x05\u011E\x90\x02\u089E" +
		"\u089F\x07\u0157\x02\x02\u089F\u08A1\x05\u011E\x90\x02\u08A0\u089E\x03" +
		"\x02\x02\x02\u08A1\u08A4\x03\x02\x02\x02\u08A2\u08A0\x03\x02\x02\x02\u08A2" +
		"\u08A3\x03\x02\x02\x02\u08A3\u011D\x03\x02\x02\x02\u08A4\u08A2\x03\x02" +
		"\x02\x02\u08A5\u08A7\x05\u01B8\xDD\x02\u08A6\u08A8\x05\u0120\x91\x02\u08A7" +
		"\u08A6\x03\x02\x02\x02\u08A7\u08A8\x03\x02\x02\x02\u08A8\u08A9\x03\x02" +
		"\x02\x02\u08A9\u08AA\x07\v\x02\x02\u08AA\u08AB\x07\u016A\x02\x02\u08AB" +
		"\u08AC\x05\u0122\x92\x02\u08AC\u08AD\x07\u016D\x02\x02\u08AD\u011F\x03" +
		"\x02\x02\x02\u08AE\u08AF\x07\u016A\x02\x02\u08AF\u08B4\x05\u01B8\xDD\x02" +
		"\u08B0\u08B1\x07\u0157\x02\x02\u08B1\u08B3\x05\u01B8\xDD\x02\u08B2\u08B0" +
		"\x03\x02\x02\x02\u08B3\u08B6\x03\x02\x02\x02\u08B4\u08B2\x03\x02\x02\x02" +
		"\u08B4\u08B5\x03\x02\x02\x02\u08B5\u08B7\x03\x02\x02\x02\u08B6\u08B4\x03" +
		"\x02\x02\x02\u08B7\u08B8\x07\u016D\x02\x02\u08B8\u0121\x03\x02\x02\x02" +
		"\u08B9\u08BF\x05\u0124\x93\x02\u08BA\u08BB\x05\u0126\x94\x02\u08BB\u08BC" +
		"\x05\u0124\x93\x02\u08BC\u08BE\x03\x02\x02\x02\u08BD\u08BA\x03\x02\x02" +
		"\x02\u08BE\u08C1\x03\x02\x02\x02\u08BF\u08BD\x03\x02\x02\x02\u08BF\u08C0" +
		"\x03\x02\x02\x02\u08C0\u0123\x03\x02\x02\x02\u08C1\u08BF\x03\x02\x02\x02" +
		"\u08C2\u08C8\x05\u0128\x95\x02\u08C3\u08C4\x07\u016A\x02\x02\u08C4\u08C5" +
		"\x05\u0122\x92\x02\u08C5\u08C6\x07\u016D\x02\x02\u08C6\u08C8\x03\x02\x02" +
		"\x02\u08C7\u08C2\x03\x02\x02\x02\u08C7\u08C3\x03\x02\x02\x02\u08C8\u0125" +
		"\x03\x02\x02\x02\u08C9\u08CB\x07\u0127\x02\x02\u08CA\u08CC\x07\x05\x02" +
		"\x02\u08CB\u08CA\x03\x02\x02\x02\u08CB\u08CC\x03\x02\x02\x02\u08CC\u08D6" +
		"\x03\x02\x02\x02\u08CD\u08CF\x07b\x02\x02\u08CE\u08D0\x07\x05\x02\x02" +
		"\u08CF\u08CE\x03\x02\x02\x02\u08CF\u08D0\x03\x02\x02\x02\u08D0\u08D6\x03" +
		"\x02\x02\x02\u08D1\u08D3\x07\x92\x02\x02\u08D2\u08D4\x07\x05\x02\x02\u08D3" +
		"\u08D2\x03\x02\x02\x02\u08D3\u08D4\x03\x02\x02\x02\u08D4\u08D6\x03\x02" +
		"\x02\x02\u08D5\u08C9\x03\x02\x02\x02\u08D5\u08CD\x03\x02\x02\x02\u08D5" +
		"\u08D1\x03\x02\x02\x02\u08D6\u0127\x03\x02\x02\x02\u08D7\u08D8\t%\x02" +
		"\x02\u08D8\u08DA\x05\u012A\x96\x02\u08D9\u08DB\x05\u0136\x9C\x02\u08DA" +
		"\u08D9\x03\x02\x02\x02\u08DA\u08DB\x03\x02\x02\x02\u08DB\u08DD\x03\x02" +
		"\x02\x02\u08DC\u08DE\x05\u0138\x9D\x02\u08DD\u08DC\x03\x02\x02\x02\u08DD" +
		"\u08DE\x03\x02\x02\x02\u08DE\u08E0\x03\x02\x02\x02\u08DF\u08E1\x05\u014C" +
		"\xA7\x02\u08E0\u08DF\x03\x02\x02\x02\u08E0\u08E1\x03\x02\x02\x02\u08E1" +
		"\u08E3\x03\x02\x02\x02\u08E2\u08E4\x05\u014E\xA8\x02\u08E3\u08E2\x03\x02" +
		"\x02\x02\u08E3\u08E4\x03\x02\x02\x02\u08E4\u08E7\x03\x02\x02\x02\u08E5" +
		"\u08E8\x05\u0150\xA9\x02\u08E6\u08E8\x05\u0152\xAA\x02\u08E7\u08E5\x03" +
		"\x02\x02\x02\u08E7\u08E6\x03\x02\x02\x02\u08E7\u08E8\x03\x02\x02\x02\u08E8" +
		"\u08EA\x03\x02\x02\x02\u08E9\u08EB\x05\u0154\xAB\x02\u08EA\u08E9\x03\x02" +
		"\x02\x02\u08EA\u08EB\x03\x02\x02\x02\u08EB\u08ED\x03\x02\x02\x02\u08EC" +
		"\u08EE\x05\u0156\xAC\x02\u08ED\u08EC\x03\x02\x02\x02\u08ED\u08EE\x03\x02" +
		"\x02\x02\u08EE\u0129\x03\x02\x02\x02\u08EF\u08F1\x05\u012C\x97\x02\u08F0" +
		"\u08EF\x03\x02\x02\x02\u08F0\u08F1\x03\x02\x02\x02\u08F1\u08F3\x03\x02" +
		"\x02\x02\u08F2\u08F4\x05\u012E\x98\x02\u08F3\u08F2\x03\x02\x02\x02\u08F3" +
		"\u08F4\x03\x02\x02\x02\u08F4\u08F5\x03\x02\x02\x02\u08F5\u08FA\x05\u0130" +
		"\x99\x02\u08F6\u08F7\x07\u0157\x02\x02\u08F7\u08F9\x05\u0130\x99\x02\u08F8" +
		"\u08F6\x03\x02\x02\x02\u08F9\u08FC\x03\x02\x02\x02\u08FA\u08F8\x03\x02" +
		"\x02\x02\u08FA\u08FB\x03\x02\x02\x02\u08FB\u012B\x03\x02\x02\x02\u08FC" +
		"\u08FA\x03\x02\x02\x02\u08FD\u08FE\t&\x02\x02\u08FE\u012D\x03\x02\x02" +
		"\x02\u08FF\u0900\x07\u0122\x02\x02\u0900\u0901\x05\u0180\xC1\x02\u0901" +
		"\u012F\x03\x02\x02\x02\u0902\u0903\x05\u01B8\xDD\x02\u0903\u0904\x07\u015C" +
		"\x02\x02\u0904\u0906\x03\x02\x02\x02\u0905\u0902\x03\x02\x02\x02\u0905" +
		"\u0906\x03\x02\x02\x02\u0906\u0907\x03\x02\x02\x02\u0907\u0909\x05\u0180" +
		"\xC1\x02\u0908\u090A\x05\u0132\x9A\x02\u0909\u0908\x03\x02\x02\x02\u0909" +
		"\u090A\x03\x02\x02\x02\u090A\u090D\x03\x02\x02\x02\u090B\u090D\x05\u0134" +
		"\x9B\x02\u090C\u0905\x03\x02\x02\x02\u090C\u090B\x03\x02\x02\x02\u090D" +
		"\u0131\x03\x02\x02\x02\u090E\u0910\x06\x9A\x05\x02\u090F\u0911\x07\v\x02" +
		"\x02\u0910\u090F\x03\x02\x02\x02\u0910\u0911\x03\x02\x02\x02\u0911\u0912" +
		"\x03\x02\x02\x02\u0912\u0918\x05\u01B8\xDD\x02\u0913\u0914\x07\u016A\x02" +
		"\x02\u0914\u0915\x07\u0120\x02\x02\u0915\u0916\x07\u0172\x02\x02\u0916" +
		"\u0918\x07\u016D\x02\x02\u0917\u090E\x03\x02\x02\x02\u0917\u0913\x03\x02" +
		"\x02\x02\u0918\u0133\x03\x02\x02\x02\u0919\u091A\x07\u0171\x02\x02\u091A" +
		"\u091C\x07\u015A\x02\x02\u091B\u0919\x03\x02\x02\x02\u091B\u091C\x03\x02" +
		"\x02\x02\u091C\u091D\x03\x02\x02\x02\u091D\u091E\x07\u0166\x02\x02\u091E" +
		"\u0135\x03\x02\x02\x02\u091F\u0920\x07\x94\x02\x02\u0920\u0925\x05\u01B8" +
		"\xDD\x02\u0921\u0922\x07\u0157\x02\x02\u0922\u0924\x05\u01B8\xDD\x02\u0923" +
		"\u0921\x03\x02\x02\x02\u0924\u0927\x03\x02\x02\x02\u0925\u0923\x03\x02" +
		"\x02\x02\u0925\u0926\x03\x02\x02\x02\u0926\u0137\x03\x02\x02\x02\u0927" +
		"\u0925\x03\x02\x02\x02\u0928\u0929\x07t\x02\x02\u0929\u092D\x05\u013A" +
		"\x9E\x02\u092A\u092C\x05\u0140\xA1\x02\u092B\u092A\x03\x02\x02\x02\u092C" +
		"\u092F\x03\x02\x02\x02\u092D\u092B\x03\x02\x02\x02\u092D\u092E\x03\x02" +
		"\x02\x02\u092E\u0139\x03\x02\x02\x02\u092F\u092D\x03\x02\x02\x02\u0930" +
		"\u0934\x05\u013C\x9F\x02\u0931\u0934\x05\u013E\xA0\x02\u0932\u0934\x05" +
		"\u0144\xA3\x02\u0933\u0930\x03\x02\x02\x02\u0933\u0931\x03\x02\x02\x02" +
		"\u0933\u0932\x03\x02\x02\x02\u0934\u013B\x03\x02\x02\x02\u0935\u0937\x05" +
		"\u014A\xA6\x02\u0936\u0938\x05\u0148\xA5\x02\u0937\u0936\x03\x02\x02\x02" +
		"\u0937\u0938\x03\x02\x02\x02\u0938\u013D\x03\x02\x02\x02\u0939\u093A\x07" +
		"\u016A\x02\x02\u093A\u093B\x05\u011A\x8E\x02\u093B\u093D\x07\u016D\x02" +
		"\x02\u093C\u093E\x05\u0148\xA5\x02\u093D\u093C\x03\x02\x02\x02\u093D\u093E" +
		"\x03\x02\x02\x02\u093E\u013F\x03\x02\x02\x02\u093F\u0940\x07\u0157\x02" +
		"\x02\u0940\u0947\x05\u013A\x9E\x02\u0941\u0942\x05\u0142\xA2\x02\u0942" +
		"\u0943\x05\u013A\x9E\x02\u0943\u0944\x07\xC5\x02\x02\u0944\u0945\x05\u0170" +
		"\xB9\x02\u0945\u0947\x03\x02\x02\x02\u0946\u093F\x03\x02\x02\x02\u0946" +
		"\u0941\x03\x02\x02\x02\u0947\u0141\x03\x02\x02\x02\u0948\u094A\x07\x8A" +
		"\x02\x02\u0949\u0948\x03\x02\x02\x02\u0949\u094A\x03\x02\x02\x02\u094A" +
		"\u094B\x03\x02\x02\x02\u094B\u0952\x07\x99\x02\x02\u094C\u094E\t\'\x02" +
		"\x02\u094D\u094F\x07\xCB\x02\x02\u094E\u094D\x03\x02\x02\x02\u094E\u094F" +
		"\x03\x02\x02\x02\u094F\u0950\x03\x02\x02\x02\u0950\u0952\x07\x99\x02\x02" +
		"\u0951\u0949\x03\x02\x02\x02\u0951\u094C\x03\x02\x02\x02\u0952\u0143\x03" +
		"\x02\x02\x02\u0953\u0954\x07\u0118\x02\x02\u0954\u0955\x07\u016A\x02\x02" +
		"\u0955\u0956\x07\u012E\x02\x02\u0956\u095B\x05\u0146\xA4\x02\u0957\u0958" +
		"\x07\u0157\x02\x02\u0958\u095A\x05\u0146\xA4\x02\u0959\u0957\x03\x02\x02" +
		"\x02\u095A\u095D\x03\x02\x02\x02\u095B\u0959\x03\x02\x02\x02\u095B\u095C" +
		"\x03\x02\x02\x02\u095C\u095E\x03\x02\x02\x02\u095D\u095B\x03\x02\x02\x02" +
		"\u095E\u0960\x07\u016D\x02\x02\u095F\u0961\x05\u0148\xA5\x02\u0960\u095F" +
		"\x03\x02\x02\x02\u0960\u0961\x03\x02\x02\x02\u0961\u0145\x03\x02\x02\x02" +
		"\u0962\u096F\x05\u0180\xC1\x02\u0963\u0964\x07\u016A\x02\x02\u0964\u0969" +
		"\x05\u0180\xC1\x02\u0965\u0966\x07\u0157\x02\x02\u0966\u0968\x05\u0180" +
		"\xC1\x02\u0967\u0965\x03\x02\x02\x02\u0968\u096B\x03\x02\x02\x02\u0969" +
		"\u0967\x03\x02\x02\x02\u0969\u096A\x03\x02\x02\x02\u096A\u096C\x03\x02" +
		"\x02\x02\u096B\u0969\x03\x02\x02\x02\u096C\u096D\x07\u016D\x02\x02\u096D" +
		"\u096F\x03\x02\x02\x02\u096E\u0962\x03\x02\x02\x02\u096E\u0963\x03\x02" +
		"\x02\x02\u096F\u0147\x03\x02\x02\x02\u0970\u0972\x06\xA5\x06\x02\u0971" +
		"\u0973\x07\v\x02\x02\u0972\u0971\x03\x02\x02\x02\u0972\u0973\x03\x02\x02" +
		"\x02\u0973\u0974\x03\x02\x02\x02\u0974\u097F\x05\u01B8\xDD\x02\u0975\u0976" +
		"\x07\u016A\x02\x02\u0976\u097B\x07\u0171\x02\x02\u0977\u0978\x07\u0157" +
		"\x02\x02\u0978\u097A\x07\u0171\x02\x02\u0979\u0977\x03\x02\x02\x02\u097A" +
		"\u097D\x03\x02\x02\x02\u097B\u0979\x03\x02\x02\x02\u097B\u097C\x03\x02" +
		"\x02\x02\u097C\u097E\x03\x02\x02\x02\u097D\u097B\x03\x02\x02\x02\u097E" +
		"\u0980\x07\u016D\x02\x02\u097F\u0975\x03\x02\x02\x02\u097F\u0980\x03\x02" +
		"\x02\x02\u0980\u0149\x03\x02\x02\x02\u0981\u0982\x05\u01B8\xDD\x02\u0982" +
		"\u014B\x03\x02\x02\x02\u0983\u0984\x07\u0135\x02\x02\u0984\u0985\x05\u0170" +
		"\xB9\x02\u0985\u014D\x03\x02\x02\x02\u0986\u0987\x07{\x02\x02\u0987\u0988" +
		"\x07\x1B\x02\x02\u0988\u098D\x05\u0180\xC1\x02\u0989\u098A\x07\u0157\x02" +
		"\x02\u098A\u098C\x05\u0180\xC1\x02\u098B\u0989\x03\x02\x02\x02\u098C\u098F" +
		"\x03\x02\x02\x02\u098D\u098B\x03\x02\x02\x02\u098D\u098E\x03\x02\x02\x02" +
		"\u098E\u014F\x03\x02\x02\x02\u098F\u098D\x03\x02\x02\x02\u0990\u0991\x07" +
		"~\x02\x02\u0991\u0992\x05\u0170\xB9\x02\u0992\u0151\x03\x02\x02\x02\u0993" +
		"\u0994\x07\xDA\x02\x02\u0994\u0995\x05\u0170\xB9\x02\u0995\u0153\x03\x02" +
		"\x02\x02\u0996\u0997\x07\xC9\x02\x02\u0997\u0998\x07\x1B\x02\x02\u0998" +
		"\u099A\x05\u0180\xC1\x02\u0999\u099B\t\t\x02\x02\u099A\u0999\x03\x02\x02" +
		"\x02\u099A\u099B\x03\x02\x02\x02\u099B\u09A3\x03\x02\x02\x02\u099C\u099D" +
		"\x07\u0157\x02\x02\u099D\u099F\x05\u0180\xC1\x02\u099E\u09A0\t\t\x02\x02" +
		"\u099F\u099E\x03\x02\x02\x02\u099F\u09A0\x03\x02\x02\x02\u09A0\u09A2\x03" +
		"\x02\x02\x02\u09A1\u099C\x03\x02\x02\x02\u09A2\u09A5\x03\x02\x02\x02\u09A3" +
		"\u09A1\x03\x02\x02\x02\u09A3\u09A4\x03\x02\x02\x02\u09A4\u0155\x03\x02" +
		"\x02\x02\u09A5\u09A3\x03\x02\x02\x02\u09A6\u09A8\x05\u0158\xAD\x02\u09A7" +
		"\u09A6\x03\x02\x02\x02\u09A8\u09A9\x03\x02\x02\x02\u09A9\u09A7\x03\x02" +
		"\x02\x02\u09A9\u09AA\x03\x02\x02\x02\u09AA\u0157\x03\x02\x02\x02\u09AB" +
		"\u09AC\x07\xA1\x02\x02\u09AC\u09B7\x05\u0180\xC1\x02\u09AD\u09AE\x07\u0137" +
		"\x02\x02\u09AE\u09B4\t(\x02\x02\u09AF\u09B0\x07\u012B\x02\x02\u09B0\u09B1" +
		"\x07\b\x02\x02\u09B1\u09B2\x07\x9A\x02\x02\u09B2\u09B3\t)\x02\x02\u09B3" +
		"\u09B5\x07\xA7\x02\x02\u09B4\u09AF\x03\x02\x02\x02\u09B4\u09B5\x03\x02" +
		"\x02\x02\u09B5\u09B7\x03\x02\x02\x02\u09B6\u09AB\x03\x02\x02\x02\u09B6" +
		"\u09AD\x03\x02\x02\x02\u09B7\u0159\x03\x02\x02\x02\u09B8\u09B9\x07\u0129" +
		"\x02\x02\u09B9\u09BA\x05\u015E\xB0\x02\u09BA\u09BB\x07\xFD\x02\x02\u09BB" +
		"\u09BD\x05\u015C\xAF\x02\u09BC\u09BE\x05\u014C\xA7\x02\u09BD\u09BC\x03" +
		"\x02\x02\x02\u09BD\u09BE\x03\x02\x02\x02\u09BE\u09C0\x03\x02\x02\x02\u09BF" +
		"\u09C1\x05\u0160\xB1\x02\u09C0\u09BF\x03\x02\x02\x02\u09C0\u09C1\x03\x02" +
		"\x02\x02\u09C1\u015B\x03\x02\x02\x02\u09C2\u09C7\x05\x1C\x0F\x02\u09C3" +
		"\u09C4\x07\u0157\x02\x02\u09C4\u09C6\x05\x1C\x0F\x02\u09C5\u09C3\x03\x02" +
		"\x02\x02\u09C6\u09C9\x03\x02\x02\x02\u09C7\u09C5\x03\x02\x02\x02\u09C7" +
		"\u09C8\x03\x02\x02\x02\u09C8\u015D\x03\x02\x02\x02\u09C9\u09C7\x03\x02" +
		"\x02\x02\u09CA\u09CC\x05\u014A\xA6\x02\u09CB\u09CD\x05\u0138\x9D\x02\u09CC" +
		"\u09CB\x03\x02\x02\x02\u09CC\u09CD\x03\x02\x02\x02\u09CD\u09D3\x03\x02" +
		"\x02\x02\u09CE\u09CF\x07\u016A\x02\x02\u09CF\u09D0\x05\u011A\x8E\x02\u09D0" +
		"\u09D1\x07\u016D\x02\x02\u09D1\u09D3\x03\x02\x02\x02\u09D2\u09CA\x03\x02" +
		"\x02\x02\u09D2\u09CE\x03\x02\x02\x02\u09D3\u09D8\x03\x02\x02\x02\u09D4" +
		"\u09D6\x07\v\x02\x02\u09D5\u09D4\x03\x02\x02\x02\u09D5\u09D6\x03\x02\x02" +
		"\x02\u09D6\u09D7\x03\x02\x02\x02\u09D7\u09D9\x05\u01B8\xDD\x02\u09D8\u09D5" +
		"\x03\x02\x02\x02\u09D8\u09D9\x03\x02\x02\x02\u09D9\u015F\x03\x02\x02\x02" +
		"\u09DA\u09DB\x07[\x02\x02\u09DB\u09DC\x05\xB2Z\x02\u09DC\u0161\x03\x02" +
		"\x02\x02\u09DD\u09DE\x07\xB0\x02\x02\u09DE\u09DF\x07\x94\x02\x02\u09DF" +
		"\u09E0\x05\u0164\xB3\x02\u09E0\u09E1\x07\u012C\x02\x02\u09E1\u09E2\x05" +
		"\u0164\xB3\x02\u09E2\u09E3\x07\xC5\x02\x02\u09E3\u09E5\x05\u0170\xB9\x02" +
		"\u09E4\u09E6\x05\u0166\xB4\x02\u09E5\u09E4\x03\x02\x02\x02\u09E6\u09E7" +
		"\x03\x02\x02\x02\u09E7\u09E5\x03\x02\x02\x02\u09E7\u09E8\x03\x02\x02\x02" +
		"\u09E8\u0163\x03\x02\x02\x02\u09E9\u09EF\x05\u014A\xA6\x02\u09EA\u09EB" +
		"\x07\u016A\x02\x02\u09EB\u09EC\x05\u011A\x8E\x02\u09EC\u09ED\x07\u016D" +
		"\x02\x02\u09ED\u09EF\x03\x02\x02\x02\u09EE\u09E9\x03\x02\x02\x02\u09EE" +
		"\u09EA\x03\x02\x02\x02\u09EF\u09F4\x03\x02\x02\x02\u09F0\u09F2\x07\v\x02" +
		"\x02\u09F1\u09F0\x03\x02\x02\x02\u09F1\u09F2\x03\x02\x02\x02\u09F2\u09F3" +
		"\x03\x02\x02\x02\u09F3\u09F5\x05\u01B8\xDD\x02\u09F4\u09F1\x03\x02\x02" +
		"\x02\u09F4\u09F5\x03\x02\x02\x02\u09F5\u0165\x03\x02\x02\x02\u09F6\u09F8" +
		"\x07\u0134\x02\x02\u09F7\u09F9\x07\xBE\x02\x02\u09F8\u09F7\x03\x02\x02" +
		"\x02\u09F8\u09F9\x03\x02\x02\x02\u09F9\u09FA\x03\x02\x02\x02\u09FA\u09FD" +
		"\x07\xAD\x02\x02\u09FB\u09FC\x07\b\x02\x02\u09FC\u09FE\x05\u0170\xB9\x02" +
		"\u09FD\u09FB\x03\x02\x02\x02\u09FD\u09FE\x03\x02\x02\x02\u09FE\u09FF\x03" +
		"\x02\x02\x02\u09FF\u0A00\x07\u011D\x02\x02\u0A00\u0A04\x05\u0168\xB5\x02" +
		"\u0A01\u0A02\x07[\x02\x02\u0A02\u0A04\x07\x84\x02\x02\u0A03\u09F6\x03" +
		"\x02\x02\x02\u0A03\u0A01\x03\x02\x02\x02\u0A04\u0167\x03\x02\x02\x02\u0A05" +
		"\u0A07\x07\x8C\x02\x02\u0A06\u0A08\x05\xB4[\x02\u0A07\u0A06\x03\x02\x02" +
		"\x02\u0A07\u0A08\x03\x02\x02\x02\u0A08\u0A09\x03\x02\x02\x02\u0A09\u0A0A" +
		"\x07\u012E\x02\x02\u0A0A\u0A1A\x05\xB8]\x02\u0A0B\u0A0C\x07\u0129\x02" +
		"\x02\u0A0C\u0A0D\x07\xFD\x02\x02\u0A0D\u0A12\x05\x1C\x0F\x02\u0A0E\u0A0F" +
		"\x07\u0157\x02\x02\u0A0F\u0A11\x05\x1C\x0F\x02\u0A10\u0A0E\x03\x02\x02" +
		"\x02\u0A11\u0A14\x03\x02\x02\x02\u0A12\u0A10\x03\x02\x02\x02\u0A12\u0A13" +
		"\x03\x02\x02\x02\u0A13\u0A16\x03\x02\x02\x02\u0A14\u0A12\x03";
	private static readonly _serializedATNSegment5: string =
		"\x02\x02\x02\u0A15\u0A17\x05\u014C\xA7\x02\u0A16\u0A15\x03\x02\x02\x02" +
		"\u0A16\u0A17\x03\x02\x02\x02\u0A17\u0A1A\x03\x02\x02\x02\u0A18\u0A1A\x07" +
		"M\x02\x02\u0A19\u0A05\x03\x02\x02\x02\u0A19\u0A0B\x03\x02\x02\x02\u0A19" +
		"\u0A18\x03\x02\x02\x02\u0A1A\u0169\x03\x02\x02\x02\u0A1B\u0A1D\x07M\x02" +
		"\x02\u0A1C\u0A1E\x07t\x02\x02\u0A1D\u0A1C\x03\x02\x02\x02\u0A1D\u0A1E" +
		"\x03\x02\x02\x02\u0A1E\u0A1F\x03\x02\x02\x02\u0A1F\u0A21\x05\u014A\xA6" +
		"\x02\u0A20\u0A22\x05\u016C\xB7\x02\u0A21\u0A20\x03\x02\x02\x02\u0A21\u0A22" +
		"\x03\x02\x02\x02\u0A22\u0A25\x03\x02\x02\x02\u0A23\u0A26\x05\u014C\xA7" +
		"\x02\u0A24\u0A26\x07\x05\x02\x02\u0A25\u0A23\x03\x02\x02\x02\u0A25\u0A24" +
		"\x03\x02\x02\x02\u0A25\u0A26\x03\x02\x02\x02\u0A26\u016B\x03\x02\x02\x02" +
		"\u0A27\u0A29\x06\xB7\x07\x02\u0A28\u0A2A\x07\v\x02\x02\u0A29\u0A28\x03" +
		"\x02\x02\x02\u0A29\u0A2A\x03\x02\x02\x02\u0A2A\u0A2B\x03\x02\x02\x02\u0A2B" +
		"\u0A2C\x05\u01B8\xDD\x02\u0A2C\u016D\x03\x02\x02\x02\u0A2D\u0A2F\t*\x02" +
		"\x02\u0A2E\u0A30\x07\u0118\x02\x02\u0A2F\u0A2E\x03\x02\x02\x02\u0A2F\u0A30" +
		"\x03\x02\x02\x02\u0A30\u0A31\x03\x02\x02\x02\u0A31\u0A32\x05\u014A\xA6" +
		"\x02\u0A32\u016F\x03\x02\x02\x02\u0A33\u0A35\b\xB9\x01\x02\u0A34\u0A36" +
		"\x07\xBE\x02\x02\u0A35\u0A34\x03\x02\x02\x02\u0A35\u0A36\x03\x02\x02\x02" +
		"\u0A36\u0A37\x03\x02\x02\x02\u0A37\u0A38\x07\u016A\x02\x02\u0A38\u0A39" +
		"\x05\u0170\xB9\x02\u0A39\u0A3A\x07\u016D\x02\x02\u0A3A\u0A3D\x03\x02\x02" +
		"\x02\u0A3B\u0A3D\x05\u0172\xBA\x02\u0A3C\u0A33\x03\x02\x02\x02\u0A3C\u0A3B" +
		"\x03\x02\x02\x02\u0A3D\u0A44\x03\x02\x02\x02\u0A3E\u0A3F\f\x04\x02\x02" +
		"\u0A3F\u0A40\x05\u017C\xBF\x02\u0A40\u0A41\x05\u0170\xB9\x05\u0A41\u0A43" +
		"\x03\x02\x02\x02\u0A42\u0A3E\x03\x02\x02\x02\u0A43\u0A46\x03\x02\x02\x02" +
		"\u0A44\u0A42\x03\x02\x02\x02\u0A44\u0A45\x03\x02\x02\x02\u0A45\u0171\x03" +
		"\x02\x02\x02\u0A46\u0A44\x03\x02\x02\x02\u0A47\u0A4B\x05\u0174\xBB\x02" +
		"\u0A48\u0A4B\x05\u017A\xBE\x02\u0A49\u0A4B\x05\u0180\xC1\x02\u0A4A\u0A47" +
		"\x03\x02\x02\x02\u0A4A\u0A48\x03\x02\x02\x02\u0A4A\u0A49\x03\x02\x02\x02" +
		"\u0A4B\u0173\x03\x02\x02\x02\u0A4C\u0A4D\x05\u0180\xC1\x02\u0A4D\u0A4F" +
		"\x07\x96\x02\x02\u0A4E\u0A50\x07\xBE\x02\x02\u0A4F\u0A4E\x03\x02\x02\x02" +
		"\u0A4F\u0A50\x03\x02\x02\x02\u0A50\u0A51\x03\x02\x02\x02\u0A51\u0A52\x07" +
		"\xC0\x02\x02\u0A52\u0A64\x03\x02\x02\x02\u0A53\u0A54\x05\u0180\xC1\x02" +
		"\u0A54\u0A55\x07\x13\x02\x02\u0A55\u0A56\x05\u0180\xC1\x02\u0A56\u0A57" +
		"\x07\b\x02\x02\u0A57\u0A58\x05\u0180\xC1\x02\u0A58\u0A64\x03\x02\x02\x02" +
		"\u0A59\u0A5B\x07\xBE\x02\x02\u0A5A\u0A59\x03\x02\x02\x02\u0A5A\u0A5B\x03" +
		"\x02\x02\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C\u0A5D\x07g\x02\x02\u0A5D" +
		"\u0A5E\x07\u016A\x02\x02\u0A5E\u0A5F\x05\u011A\x8E\x02\u0A5F\u0A60\x07" +
		"\u016D\x02\x02\u0A60\u0A64\x03\x02\x02\x02\u0A61\u0A64\x05\u0176\xBC\x02" +
		"\u0A62\u0A64\x05\u0178\xBD\x02\u0A63\u0A4C\x03\x02\x02\x02\u0A63\u0A53" +
		"\x03\x02\x02\x02\u0A63\u0A5A\x03\x02\x02\x02\u0A63\u0A61\x03\x02\x02\x02" +
		"\u0A63\u0A62\x03\x02\x02\x02\u0A64\u0175\x03\x02\x02\x02\u0A65\u0A67\x05" +
		"\u0180\xC1\x02\u0A66\u0A68\x07\xBE\x02\x02\u0A67\u0A66\x03\x02\x02\x02" +
		"\u0A67\u0A68\x03\x02\x02\x02\u0A68\u0A69\x03\x02\x02\x02\u0A69\u0A6A\x07" +
		"\x86\x02\x02\u0A6A\u0A74\x07\u016A\x02\x02\u0A6B\u0A70\x05\u0180\xC1\x02" +
		"\u0A6C\u0A6D\x07\u0157\x02\x02\u0A6D\u0A6F\x05\u0180\xC1\x02\u0A6E\u0A6C" +
		"\x03\x02\x02\x02\u0A6F\u0A72\x03\x02\x02\x02\u0A70\u0A6E\x03\x02\x02\x02" +
		"\u0A70\u0A71\x03\x02\x02\x02\u0A71\u0A75\x03\x02\x02\x02\u0A72\u0A70\x03" +
		"\x02\x02\x02\u0A73\u0A75\x05\u011A\x8E\x02\u0A74\u0A6B\x03\x02\x02\x02" +
		"\u0A74\u0A73\x03\x02\x02\x02\u0A75\u0A76\x03\x02\x02\x02\u0A76\u0A77\x07" +
		"\u016D\x02\x02\u0A77\u0177\x03\x02\x02\x02\u0A78\u0A79\x07\u016A\x02\x02" +
		"\u0A79\u0A7E\x05\u0180\xC1\x02\u0A7A\u0A7B\x07\u0157\x02\x02\u0A7B\u0A7D" +
		"\x05\u0180\xC1\x02\u0A7C\u0A7A\x03\x02\x02\x02\u0A7D\u0A80\x03\x02\x02" +
		"\x02\u0A7E\u0A7C\x03\x02\x02\x02\u0A7E\u0A7F\x03\x02\x02\x02\u0A7F\u0A81" +
		"\x03\x02\x02\x02\u0A80\u0A7E\x03\x02\x02\x02\u0A81\u0A83\x07\u016D\x02" +
		"\x02\u0A82\u0A84\x07\xBE\x02\x02\u0A83\u0A82\x03\x02\x02\x02\u0A83\u0A84" +
		"\x03\x02\x02\x02\u0A84\u0A85\x03\x02\x02\x02\u0A85\u0A86\x07\x86\x02\x02" +
		"\u0A86\u0A87\x07\u016A\x02\x02\u0A87\u0A88\x05\u011A\x8E\x02\u0A88\u0A89" +
		"\x07\u016D\x02\x02\u0A89\u0179\x03\x02\x02\x02\u0A8A\u0A8B\x05\u0180\xC1" +
		"\x02\u0A8B\u0A8C\x05\u017E\xC0\x02\u0A8C\u0A8D\x05\u0180\xC1\x02\u0A8D" +
		"\u017B\x03\x02\x02\x02\u0A8E\u0A8F\t+\x02\x02\u0A8F\u017D\x03\x02\x02" +
		"\x02\u0A90\u0A9D\x07\u015C\x02\x02\u0A91\u0A9D\x07\u015D\x02\x02\u0A92" +
		"\u0A9D\x07\u0160\x02\x02\u0A93\u0A9D\x07\u0161\x02\x02\u0A94\u0A9D\x07" +
		"\u0164\x02\x02\u0A95\u0A9D\x07\u0165\x02\x02\u0A96\u0A9D\x07\u0162\x02" +
		"\x02\u0A97\u0A9D\x07\u0163\x02\x02\u0A98\u0A9A\x07\xBE\x02\x02\u0A99\u0A98" +
		"\x03\x02\x02\x02\u0A99\u0A9A\x03\x02\x02\x02\u0A9A\u0A9B\x03\x02\x02\x02" +
		"\u0A9B\u0A9D\t,\x02\x02\u0A9C\u0A90\x03\x02\x02\x02\u0A9C\u0A91\x03\x02" +
		"\x02\x02\u0A9C\u0A92\x03\x02\x02\x02\u0A9C\u0A93\x03\x02\x02\x02\u0A9C" +
		"\u0A94\x03\x02\x02\x02\u0A9C\u0A95\x03\x02\x02\x02\u0A9C\u0A96\x03\x02" +
		"\x02\x02\u0A9C\u0A97\x03\x02\x02\x02\u0A9C\u0A99\x03\x02\x02\x02\u0A9D" +
		"\u017F\x03\x02\x02\x02\u0A9E\u0A9F\b\xC1\x01\x02\u0A9F\u0AA0\x07\u016A" +
		"\x02\x02\u0AA0\u0AA1\x05\u011A\x8E\x02\u0AA1\u0AA2\x07\u016D\x02\x02\u0AA2" +
		"\u0AB0\x03\x02\x02\x02\u0AA3\u0AA4\x07\u016A\x02\x02\u0AA4\u0AA5\x05\u0180" +
		"\xC1\x02\u0AA5\u0AA6\x07\u016D\x02\x02\u0AA6\u0AB0\x03\x02\x02\x02\u0AA7" +
		"\u0AB0\x05\u0184\xC3\x02\u0AA8\u0AB0\x05\u0188\xC5\x02\u0AA9\u0AB0\x05" +
		"\u018C\xC7\x02\u0AAA\u0AB0\x05\u0192\xCA\x02\u0AAB\u0AB0\x05\u0194\xCB" +
		"\x02\u0AAC\u0AB0\x05\u019C\xCF\x02\u0AAD\u0AB0\x05\u019E\xD0\x02\u0AAE" +
		"\u0AB0\x05\u0182\xC2\x02\u0AAF\u0A9E\x03\x02\x02\x02\u0AAF\u0AA3\x03\x02" +
		"\x02\x02\u0AAF\u0AA7\x03\x02\x02\x02\u0AAF\u0AA8\x03\x02\x02\x02\u0AAF" +
		"\u0AA9\x03\x02\x02\x02\u0AAF\u0AAA\x03\x02\x02\x02\u0AAF\u0AAB\x03\x02" +
		"\x02\x02\u0AAF\u0AAC\x03\x02\x02\x02\u0AAF\u0AAD\x03\x02\x02\x02\u0AAF" +
		"\u0AAE\x03\x02\x02\x02\u0AB0\u0AC1\x03\x02\x02\x02\u0AB1\u0AB2\f\x10\x02" +
		"\x02\u0AB2\u0AB3\x07\u0166\x02\x02\u0AB3\u0AC0\x05\u0180\xC1\x11\u0AB4" +
		"\u0AB5\f\x0F\x02\x02\u0AB5\u0AB6\x07\u0159\x02\x02\u0AB6\u0AC0\x05\u0180" +
		"\xC1\x10\u0AB7\u0AB8\f\x0E\x02\x02\u0AB8\u0AB9\x07\u0155\x02\x02\u0AB9" +
		"\u0AC0\x05\u0180\xC1\x0F\u0ABA\u0ABB\f\r\x02\x02\u0ABB\u0ABC\x07\u0170" +
		"\x02\x02\u0ABC\u0AC0\x05\u0180\xC1\x0E\u0ABD\u0ABE\f\x11\x02\x02\u0ABE" +
		"\u0AC0\x05\u0186\xC4\x02\u0ABF\u0AB1\x03\x02\x02\x02\u0ABF\u0AB4\x03\x02" +
		"\x02\x02\u0ABF\u0AB7\x03\x02\x02\x02\u0ABF\u0ABA\x03\x02\x02\x02\u0ABF" +
		"\u0ABD\x03\x02\x02\x02\u0AC0\u0AC3\x03\x02\x02\x02\u0AC1\u0ABF\x03\x02" +
		"\x02\x02\u0AC1\u0AC2\x03\x02\x02\x02\u0AC2\u0181\x03\x02\x02\x02\u0AC3" +
		"\u0AC1\x03\x02\x02\x02\u0AC4\u0ACD\x05\u01B4\xDB\x02\u0AC5\u0ACD\x05\u01B6" +
		"\xDC\x02\u0AC6\u0ACD\x05\u01C0\xE1\x02\u0AC7\u0ACD\x05\u01B8\xDD\x02\u0AC8" +
		"\u0ACD\x05\u01BA\xDE\x02\u0AC9\u0ACD\x05\u01BE\xE0\x02\u0ACA\u0ACD\x05" +
		"\u01BC\xDF\x02\u0ACB\u0ACD\x05\u01C2\xE2\x02\u0ACC\u0AC4\x03\x02\x02\x02" +
		"\u0ACC\u0AC5\x03\x02\x02\x02\u0ACC\u0AC6\x03\x02\x02\x02\u0ACC\u0AC7\x03" +
		"\x02\x02\x02\u0ACC\u0AC8\x03\x02\x02\x02\u0ACC\u0AC9\x03\x02\x02\x02\u0ACC" +
		"\u0ACA\x03\x02\x02\x02\u0ACC\u0ACB\x03\x02\x02\x02\u0ACD\u0183\x03\x02" +
		"\x02\x02\u0ACE\u0ACF\x07\x93\x02\x02\u0ACF\u0AD0\x05\u0180\xC1\x02\u0AD0" +
		"\u0AD1\x05\u0186\xC4\x02\u0AD1\u0185\x03\x02\x02\x02\u0AD2\u0AD3\t-\x02" +
		"\x02\u0AD3\u0187\x03\x02\x02\x02\u0AD4\u0AD5\x05\u018A\xC6\x02\u0AD5\u0AD6" +
		"\t.\x02\x02\u0AD6\u0ADB\x05\u018A\xC6\x02\u0AD7\u0AD8\t.\x02\x02\u0AD8" +
		"\u0ADA\x05\u018A\xC6\x02\u0AD9\u0AD7\x03\x02\x02\x02\u0ADA\u0ADD\x03\x02" +
		"\x02\x02\u0ADB\u0AD9\x03\x02\x02\x02\u0ADB\u0ADC\x03\x02\x02\x02\u0ADC" +
		"\u0189\x03\x02\x02\x02\u0ADD\u0ADB\x03\x02\x02\x02\u0ADE\u0ADF\x07\u016A" +
		"\x02\x02\u0ADF\u0AE0\x05\u0180\xC1\x02\u0AE0\u0AE1\x07\u016D\x02\x02\u0AE1" +
		"\u0AE8\x03\x02\x02\x02\u0AE2\u0AE8\x05\u018C\xC7\x02\u0AE3\u0AE8\x05\u0194" +
		"\xCB\x02\u0AE4\u0AE8\x05\u019C\xCF\x02\u0AE5\u0AE8\x05\u019E\xD0\x02\u0AE6" +
		"\u0AE8\x05\u0182\xC2\x02\u0AE7\u0ADE\x03\x02\x02\x02\u0AE7\u0AE2\x03\x02" +
		"\x02\x02\u0AE7\u0AE3\x03\x02\x02\x02\u0AE7\u0AE4\x03\x02\x02\x02\u0AE7" +
		"\u0AE5\x03\x02\x02\x02\u0AE7\u0AE6\x03\x02\x02\x02\u0AE8\u018B\x03\x02" +
		"\x02\x02\u0AE9\u0AEC\x05\u018E\xC8\x02\u0AEA\u0AEC\x05\u0190\xC9\x02\u0AEB" +
		"\u0AE9\x03\x02\x02\x02\u0AEB\u0AEA\x03\x02\x02\x02\u0AEC\u018D\x03\x02" +
		"\x02\x02\u0AED\u0AEE\x07 \x02\x02\u0AEE\u0AF4\x05\u0180\xC1\x02\u0AEF" +
		"\u0AF0\x07\u0134\x02\x02\u0AF0\u0AF1\x05\u0180\xC1\x02\u0AF1\u0AF2\x07" +
		"\u011D\x02\x02\u0AF2\u0AF3\x05\u0180\xC1\x02\u0AF3\u0AF5\x03\x02\x02\x02" +
		"\u0AF4\u0AEF\x03\x02\x02\x02\u0AF5\u0AF6\x03\x02\x02\x02\u0AF6\u0AF4\x03" +
		"\x02\x02\x02\u0AF6\u0AF7\x03\x02\x02\x02\u0AF7\u0AFA\x03\x02\x02\x02\u0AF8" +
		"\u0AF9\x07[\x02\x02\u0AF9\u0AFB\x05\u0180\xC1\x02\u0AFA\u0AF8\x03\x02" +
		"\x02\x02\u0AFA\u0AFB\x03\x02\x02\x02\u0AFB\u0AFC\x03\x02\x02\x02\u0AFC" +
		"\u0AFD\x07_\x02\x02\u0AFD\u018F\x03\x02\x02\x02\u0AFE\u0B04\x07 \x02\x02" +
		"\u0AFF\u0B00\x07\u0134\x02\x02\u0B00\u0B01\x05\u0170\xB9\x02\u0B01\u0B02" +
		"\x07\u011D\x02\x02\u0B02\u0B03\x05\u0180\xC1\x02\u0B03\u0B05\x03\x02\x02" +
		"\x02\u0B04\u0AFF\x03\x02\x02\x02\u0B05\u0B06\x03\x02\x02\x02\u0B06\u0B04" +
		"\x03\x02\x02\x02\u0B06\u0B07\x03\x02\x02\x02\u0B07\u0B0A\x03\x02\x02\x02" +
		"\u0B08\u0B09\x07[\x02\x02\u0B09\u0B0B\x05\u0180\xC1\x02\u0B0A\u0B08\x03" +
		"\x02\x02\x02\u0B0A\u0B0B\x03\x02\x02\x02\u0B0B\u0B0C\x03\x02\x02\x02\u0B0C" +
		"\u0B0D\x07_\x02\x02\u0B0D\u0191\x03\x02\x02\x02\u0B0E\u0B0F\x05\u01B8" +
		"\xDD\x02\u0B0F\u0B10\x07\u0167\x02\x02\u0B10\u0B11\t/\x02\x02\u0B11\u0193" +
		"\x03\x02\x02\x02\u0B12\u0B13\x07\x10\x02\x02\u0B13\u0B15\x07\u016A\x02" +
		"\x02\u0B14\u0B16\x05\u0196\xCC\x02\u0B15\u0B14\x03\x02\x02\x02\u0B15\u0B16" +
		"\x03\x02\x02\x02\u0B16\u0B17\x03\x02\x02\x02\u0B17\u0B18\x05\u0180\xC1" +
		"\x02\u0B18\u0B1A\x07\u016D\x02\x02\u0B19\u0B1B\x05\u0198\xCD\x02\u0B1A" +
		"\u0B19\x03\x02\x02\x02\u0B1A\u0B1B\x03\x02\x02\x02\u0B1B\u0BAB\x03\x02" +
		"\x02\x02\u0B1C\u0B1D\x076\x02\x02\u0B1D\u0B23\x07\u016A\x02\x02\u0B1E" +
		"\u0B20\x05\u0196\xCC\x02\u0B1F\u0B1E\x03\x02\x02\x02\u0B1F\u0B20\x03\x02" +
		"\x02\x02\u0B20\u0B21\x03\x02\x02\x02\u0B21\u0B24\x05\u0180\xC1\x02\u0B22" +
		"\u0B24\x07\u0166\x02\x02\u0B23\u0B1F\x03\x02\x02\x02\u0B23\u0B22\x03\x02" +
		"\x02\x02\u0B24\u0B25\x03\x02\x02\x02\u0B25\u0B27\x07\u016D\x02\x02\u0B26" +
		"\u0B28\x05\u0198\xCD\x02\u0B27\u0B26\x03\x02\x02\x02\u0B27\u0B28\x03\x02" +
		"\x02\x02\u0B28\u0BAB\x03\x02\x02\x02\u0B29\u0B2A\x077\x02\x02\u0B2A\u0B30" +
		"\x07\u016A\x02\x02\u0B2B\u0B2D\x05\u0196\xCC\x02\u0B2C\u0B2B\x03\x02\x02" +
		"\x02\u0B2C\u0B2D\x03\x02\x02\x02\u0B2D\u0B2E\x03\x02\x02\x02\u0B2E\u0B31" +
		"\x05\u0180\xC1\x02\u0B2F\u0B31\x07\u0166\x02\x02\u0B30\u0B2C\x03\x02\x02" +
		"\x02\u0B30\u0B2F\x03\x02\x02\x02\u0B31\u0B32\x03\x02\x02\x02\u0B32\u0B34" +
		"\x07\u016D\x02\x02\u0B33\u0B35\x05\u0198\xCD\x02\u0B34\u0B33\x03\x02\x02" +
		"\x02\u0B34\u0B35\x03\x02\x02\x02\u0B35\u0BAB\x03\x02\x02\x02\u0B36\u0B37" +
		"\x07\u013E\x02\x02\u0B37\u0B38\x07\u016A\x02\x02\u0B38\u0B39\x07\u016D" +
		"\x02\x02\u0B39\u0BAB\x05\u0198\xCD\x02\u0B3A\u0B3B\x07\u0142\x02\x02\u0B3B" +
		"\u0B3C\x07\u016A\x02\x02\u0B3C\u0B3D\x07\u016D\x02\x02\u0B3D\u0BAB\x05" +
		"\u0198\xCD\x02\u0B3E\u0B3F\x07\u0143\x02\x02\u0B3F\u0B40\x07\u016A\x02" +
		"\x02\u0B40\u0B41\x05\u0180\xC1\x02\u0B41\u0B42\x07\u016D\x02\x02\u0B42" +
		"\u0B43\x05\u0198\xCD\x02\u0B43\u0BAB\x03\x02\x02\x02\u0B44\u0B45\x07\u0144" +
		"\x02\x02\u0B45\u0B46\x07\u016A\x02\x02\u0B46\u0B4D\x05\u0180\xC1\x02\u0B47" +
		"\u0B48\x07\u0157\x02\x02\u0B48\u0B4B\x05\u0180\xC1\x02\u0B49\u0B4A\x07" +
		"\u0157\x02\x02\u0B4A\u0B4C\x05\u0180\xC1\x02\u0B4B\u0B49\x03\x02\x02\x02" +
		"\u0B4B\u0B4C\x03\x02\x02\x02\u0B4C\u0B4E\x03\x02\x02\x02\u0B4D\u0B47\x03" +
		"\x02\x02\x02\u0B4D\u0B4E\x03\x02\x02\x02\u0B4E\u0B4F\x03\x02\x02\x02\u0B4F" +
		"\u0B50\x07\u016D\x02\x02\u0B50\u0B51\x05\u0198\xCD\x02\u0B51\u0BAB\x03" +
		"\x02\x02\x02\u0B52\u0B53\x07\u0145\x02\x02\u0B53\u0B54\x07\u016A\x02\x02" +
		"\u0B54\u0B55\x05\u0180\xC1\x02\u0B55\u0B56\x07\u016D\x02\x02\u0B56\u0B57" +
		"\x05\u0198\xCD\x02\u0B57\u0BAB\x03\x02\x02\x02\u0B58\u0B59\x07\u0146\x02" +
		"\x02\u0B59\u0B5A\x07\u016A\x02\x02\u0B5A\u0B61\x05\u0180\xC1\x02\u0B5B" +
		"\u0B5C\x07\u0157\x02\x02\u0B5C\u0B5F\x05\u0180\xC1\x02\u0B5D\u0B5E\x07" +
		"\u0157\x02\x02\u0B5E\u0B60\x05\u0180\xC1\x02\u0B5F\u0B5D\x03\x02\x02\x02" +
		"\u0B5F\u0B60\x03\x02\x02\x02\u0B60\u0B62\x03\x02\x02\x02\u0B61\u0B5B\x03" +
		"\x02\x02\x02\u0B61\u0B62\x03\x02\x02\x02\u0B62\u0B63\x03\x02\x02\x02\u0B63" +
		"\u0B64\x07\u016D\x02\x02\u0B64\u0B65\x05\u0198\xCD\x02\u0B65\u0BAB\x03" +
		"\x02\x02\x02\u0B66\u0B67\x07\xAE\x02\x02\u0B67\u0B69\x07\u016A\x02\x02" +
		"\u0B68\u0B6A\x05\u0196\xCC\x02\u0B69\u0B68\x03\x02\x02\x02\u0B69\u0B6A" +
		"\x03\x02\x02\x02\u0B6A\u0B6B\x03\x02\x02\x02\u0B6B\u0B6C\x05\u0180\xC1" +
		"\x02\u0B6C\u0B6E\x07\u016D\x02\x02\u0B6D\u0B6F\x05\u0198\xCD\x02\u0B6E" +
		"\u0B6D\x03\x02\x02\x02\u0B6E\u0B6F\x03\x02\x02\x02\u0B6F\u0BAB\x03\x02" +
		"\x02\x02\u0B70\u0B71\x07\xB4\x02\x02\u0B71\u0B73\x07\u016A\x02\x02\u0B72" +
		"\u0B74\x05\u0196\xCC\x02\u0B73\u0B72\x03\x02\x02\x02\u0B73\u0B74\x03\x02" +
		"\x02\x02\u0B74\u0B75\x03\x02\x02\x02\u0B75\u0B76\x05\u0180\xC1\x02\u0B76" +
		"\u0B78\x07\u016D\x02\x02\u0B77\u0B79\x05\u0198\xCD\x02\u0B78\u0B77\x03" +
		"\x02\x02\x02\u0B78\u0B79\x03\x02\x02\x02\u0B79\u0BAB\x03\x02\x02\x02\u0B7A" +
		"\u0B7B\x07\u014F\x02\x02\u0B7B\u0B7C\x07\u016A\x02\x02\u0B7C\u0B7D\x07" +
		"\u016D\x02\x02\u0B7D\u0BAB\x05\u0198\xCD\x02\u0B7E\u0B7F\x07\u0150\x02" +
		"\x02\u0B7F\u0B80\x07\u016A\x02\x02\u0B80\u0B81\x07\u016D\x02\x02\u0B81" +
		"\u0BAB\x05\u0198\xCD\x02\u0B82\u0B83\x07\u0151\x02\x02\u0B83\u0B85\x07" +
		"\u016A\x02\x02\u0B84\u0B86\x05\u0196\xCC\x02\u0B85\u0B84\x03\x02\x02\x02" +
		"\u0B85\u0B86\x03\x02\x02\x02\u0B86\u0B87\x03\x02\x02\x02\u0B87\u0B88\x05" +
		"\u0180\xC1\x02\u0B88\u0B8A\x07\u016D\x02\x02\u0B89\u0B8B\x05\u0198\xCD" +
		"\x02\u0B8A\u0B89\x03\x02\x02\x02\u0B8A\u0B8B\x03\x02\x02\x02\u0B8B\u0BAB" +
		"\x03\x02\x02\x02\u0B8C\u0B8D\x07\u0115\x02\x02\u0B8D\u0B8F\x07\u016A\x02" +
		"\x02\u0B8E\u0B90\x05\u0196\xCC\x02\u0B8F\u0B8E\x03\x02\x02\x02\u0B8F\u0B90" +
		"\x03\x02\x02\x02\u0B90\u0B91\x03\x02\x02\x02\u0B91\u0B92\x05\u0180\xC1" +
		"\x02\u0B92\u0B94\x07\u016D\x02\x02\u0B93\u0B95\x05\u0198\xCD\x02\u0B94" +
		"\u0B93\x03\x02\x02\x02\u0B94\u0B95\x03\x02\x02\x02\u0B95\u0BAB\x03\x02" +
		"\x02\x02\u0B96\u0B97\x07\u012F\x02\x02\u0B97\u0B99\x07\u016A\x02\x02\u0B98" +
		"\u0B9A\x05\u0196\xCC\x02\u0B99\u0B98\x03\x02\x02\x02\u0B99\u0B9A\x03\x02" +
		"\x02\x02\u0B9A\u0B9B\x03\x02\x02\x02\u0B9B\u0B9C\x05\u0180\xC1\x02\u0B9C" +
		"\u0B9E\x07\u016D\x02\x02\u0B9D\u0B9F\x05\u0198\xCD\x02\u0B9E\u0B9D\x03" +
		"\x02\x02\x02\u0B9E\u0B9F\x03\x02\x02\x02\u0B9F\u0BAB\x03\x02\x02\x02\u0BA0" +
		"\u0BA1\x07\u0153\x02\x02\u0BA1\u0BA3\x07\u016A\x02\x02\u0BA2\u0BA4\x05" +
		"\u0196\xCC\x02\u0BA3\u0BA2\x03\x02\x02\x02\u0BA3\u0BA4\x03\x02\x02\x02" +
		"\u0BA4\u0BA5\x03\x02\x02\x02\u0BA5\u0BA6\x05\u0180\xC1\x02\u0BA6\u0BA8" +
		"\x07\u016D\x02\x02\u0BA7\u0BA9\x05\u0198\xCD\x02\u0BA8\u0BA7\x03\x02\x02" +
		"\x02\u0BA8\u0BA9\x03\x02\x02\x02\u0BA9\u0BAB\x03\x02\x02\x02\u0BAA\u0B12" +
		"\x03\x02\x02\x02\u0BAA\u0B1C\x03\x02\x02\x02\u0BAA\u0B29\x03\x02\x02\x02" +
		"\u0BAA\u0B36\x03\x02\x02\x02\u0BAA\u0B3A\x03\x02\x02\x02\u0BAA\u0B3E\x03" +
		"\x02\x02\x02\u0BAA\u0B44\x03\x02\x02\x02\u0BAA\u0B52\x03\x02\x02\x02\u0BAA" +
		"\u0B58\x03\x02\x02\x02\u0BAA\u0B66\x03\x02\x02\x02\u0BAA\u0B70\x03\x02" +
		"\x02\x02\u0BAA\u0B7A\x03\x02\x02\x02\u0BAA\u0B7E\x03\x02\x02\x02\u0BAA" +
		"\u0B82\x03\x02\x02\x02\u0BAA\u0B8C\x03\x02\x02\x02\u0BAA\u0B96\x03\x02" +
		"\x02\x02\u0BAA\u0BA0\x03\x02\x02\x02\u0BAB\u0195\x03\x02\x02\x02\u0BAC" +
		"\u0BAD\t&\x02\x02\u0BAD\u0197\x03\x02\x02\x02\u0BAE\u0BAF\x07\xCC\x02" +
		"\x02\u0BAF\u0BB1\x07\u016A\x02\x02\u0BB0\u0BB2\x05\u019A\xCE\x02\u0BB1" +
		"\u0BB0\x03\x02\x02\x02\u0BB1\u0BB2\x03\x02\x02\x02\u0BB2\u0BB4\x03\x02" +
		"\x02\x02\u0BB3\u0BB5\x05\u0154\xAB\x02\u0BB4\u0BB3\x03\x02\x02\x02\u0BB4" +
		"\u0BB5\x03\x02\x02\x02\u0BB5\u0BB6\x03\x02\x02\x02\u0BB6\u0BB7\x07\u016D" +
		"\x02\x02\u0BB7\u0199\x03\x02\x02\x02\u0BB8\u0BB9\x07\xD0\x02\x02\u0BB9" +
		"\u0BBA\x07\x1B\x02\x02\u0BBA\u0BBF\x05\u0180\xC1\x02\u0BBB\u0BBC\x07\u0157" +
		"\x02\x02\u0BBC\u0BBE\x05\u0180\xC1\x02\u0BBD\u0BBB\x03\x02\x02\x02\u0BBE" +
		"\u0BC1\x03\x02\x02\x02\u0BBF\u0BBD\x03\x02\x02\x02\u0BBF\u0BC0\x03\x02" +
		"\x02\x02\u0BC0\u019B\x03\x02\x02\x02\u0BC1\u0BBF\x03\x02\x02\x02\u0BC2" +
		"\u0C8B\x07\u013D\x02\x02\u0BC3\u0BC4\x07\"\x02\x02\u0BC4\u0BC5\x07\u016A" +
		"\x02\x02\u0BC5\u0BC6\x05\u0180\xC1\x02\u0BC6\u0BC7\x07\v\x02\x02\u0BC7" +
		"\u0BC9\x05x=\x02\u0BC8\u0BCA\x05z>\x02\u0BC9\u0BC8\x03\x02\x02\x02\u0BC9" +
		"\u0BCA\x03\x02\x02\x02\u0BCA\u0BCB\x03\x02\x02\x02\u0BCB\u0BCC\x07\u016D" +
		"\x02\x02\u0BCC\u0C8B\x03\x02\x02\x02\u0BCD\u0BCE\x076\x02\x02\u0BCE\u0BD1" +
		"\x07\u016A\x02\x02\u0BCF\u0BD2\x05\u0180\xC1\x02\u0BD0\u0BD2\x07\u0166" +
		"\x02\x02\u0BD1\u0BCF\x03\x02\x02\x02\u0BD1\u0BD0\x03\x02\x02\x02\u0BD2" +
		"\u0BD3\x03\x02\x02\x02\u0BD3\u0C8B\x07\u016D\x02\x02\u0BD4\u0C8B\x07\u013F" +
		"\x02\x02\u0BD5\u0BD6\x07<\x02\x02\u0BD6\u0C8B\x07A\x02\x02\u0BD7\u0BDB" +
		"\x07\u0140\x02\x02\u0BD8\u0BD9\x07<\x02\x02\u0BD9\u0BDB\x07\u011E\x02" +
		"\x02\u0BDA\u0BD7\x03\x02\x02\x02\u0BDA\u0BD8\x03\x02\x02\x02\u0BDB\u0BE0" +
		"\x03\x02\x02\x02\u0BDC\u0BDD\x07\u016A\x02\x02\u0BDD\u0BDE\x05\u0180\xC1" +
		"\x02\u0BDE\u0BDF\x07\u016D\x02\x02\u0BDF\u0BE1\x03\x02\x02\x02\u0BE0\u0BDC" +
		"\x03\x02\x02\x02\u0BE0\u0BE1\x03\x02\x02\x02\u0BE1\u0C8B\x03\x02\x02\x02" +
		"\u0BE2\u0C8B\x07\u0141\x02\x02\u0BE3\u0BE4\x07<\x02\x02\u0BE4\u0C8B\x07" +
		"\u0154\x02\x02\u0BE5\u0BE6\x07\u0147\x02\x02\u0BE6\u0BE7\x07\u016A\x02" +
		"\x02\u0BE7\u0BF4\x05\u0180\xC1\x02\u0BE8\u0BE9\x07\u0157\x02\x02\u0BE9" +
		"\u0BF1\x05\u0180\xC1\x02\u0BEA\u0BEB\x07\u0157\x02\x02\u0BEB\u0BEC\x05" +
		"\u0180\xC1\x02\u0BEC\u0BED\x07\u015C\x02\x02\u0BED\u0BEE\x05\u0180\xC1" +
		"\x02\u0BEE\u0BF0\x03\x02\x02\x02\u0BEF\u0BEA\x03\x02\x02\x02\u0BF0\u0BF3" +
		"\x03\x02\x02\x02\u0BF1\u0BEF\x03\x02\x02\x02\u0BF1\u0BF2\x03\x02\x02\x02" +
		"\u0BF2\u0BF5\x03\x02\x02\x02\u0BF3\u0BF1\x03\x02\x02\x02\u0BF4\u0BE8\x03" +
		"\x02\x02\x02\u0BF4\u0BF5\x03\x02\x02\x02\u0BF5\u0BF6\x03\x02\x02\x02\u0BF6" +
		"\u0BF7\x07\u016D\x02\x02\u0BF7\u0C8B\x03\x02\x02\x02\u0BF8\u0BF9\x07\u0148" +
		"\x02\x02\u0BF9\u0BFA\x07\u016A\x02\x02\u0BFA\u0C07\x05\u0180\xC1\x02\u0BFB" +
		"\u0BFC\x07\u0157\x02\x02\u0BFC\u0C04\x05\u0180\xC1\x02\u0BFD\u0BFE\x07" +
		"\u0157\x02\x02\u0BFE\u0BFF\x05\u0180\xC1\x02\u0BFF\u0C00\x07\u015C\x02" +
		"\x02\u0C00\u0C01\x05\u0180\xC1\x02\u0C01\u0C03\x03\x02\x02\x02\u0C02\u0BFD" +
		"\x03\x02\x02\x02\u0C03\u0C06\x03\x02\x02\x02\u0C04\u0C02\x03\x02\x02\x02" +
		"\u0C04\u0C05\x03\x02\x02\x02\u0C05\u0C08\x03\x02\x02\x02\u0C06\u0C04\x03" +
		"\x02\x02\x02\u0C07\u0BFB\x03\x02\x02\x02\u0C07\u0C08\x03\x02\x02\x02\u0C08" +
		"\u0C09\x03\x02\x02\x02\u0C09\u0C0A\x07\u016D\x02\x02\u0C0A\u0C8B\x03\x02" +
		"\x02\x02\u0C0B\u0C0C\x07\u0149\x02\x02\u0C0C\u0C0D\x07\u016A\x02\x02\u0C0D" +
		"\u0C1A\x05\u0180\xC1\x02\u0C0E\u0C0F\x07\u0157\x02\x02\u0C0F\u0C17\x05" +
		"\u0180\xC1\x02\u0C10\u0C11\x07\u0157\x02\x02\u0C11\u0C12\x05\u0180\xC1" +
		"\x02\u0C12\u0C13\x07\u015C\x02\x02\u0C13\u0C14\x05\u0180\xC1\x02\u0C14" +
		"\u0C16\x03\x02\x02\x02\u0C15\u0C10\x03\x02\x02\x02\u0C16\u0C19\x03\x02" +
		"\x02\x02\u0C17\u0C15\x03\x02\x02\x02\u0C17\u0C18\x03\x02\x02\x02\u0C18" +
		"\u0C1B\x03\x02\x02\x02\u0C19\u0C17\x03\x02\x02\x02\u0C1A\u0C0E\x03\x02" +
		"\x02\x02\u0C1A\u0C1B\x03\x02\x02\x02\u0C1B\u0C1C\x03\x02\x02\x02\u0C1C" +
		"\u0C1D\x07\u016D\x02\x02\u0C1D\u0C8B\x03\x02\x02\x02\u0C1E\u0C1F\x07\u014A" +
		"\x02\x02\u0C1F\u0C20\x07\u016A\x02\x02\u0C20\u0C2D\x05\u0180\xC1\x02\u0C21" +
		"\u0C22\x07\u0157\x02\x02\u0C22\u0C2A\x05\u0180\xC1\x02\u0C23\u0C24\x07" +
		"\u0157\x02\x02\u0C24\u0C25\x05\u0180\xC1\x02\u0C25\u0C26\x07\u015C\x02" +
		"\x02\u0C26\u0C27\x05\u0180\xC1\x02\u0C27\u0C29\x03\x02\x02\x02\u0C28\u0C23" +
		"\x03\x02\x02\x02\u0C29\u0C2C\x03\x02\x02\x02\u0C2A\u0C28\x03\x02\x02\x02" +
		"\u0C2A\u0C2B\x03\x02\x02\x02\u0C2B\u0C2E\x03\x02\x02\x02\u0C2C\u0C2A\x03" +
		"\x02\x02\x02\u0C2D\u0C21\x03\x02\x02\x02\u0C2D\u0C2E\x03\x02\x02\x02\u0C2E" +
		"\u0C2F\x03\x02\x02\x02\u0C2F\u0C30\x07\u016D\x02\x02\u0C30\u0C8B\x03\x02" +
		"\x02\x02\u0C31\u0C32\x07\u014B\x02\x02\u0C32\u0C33\x07\u016A\x02\x02\u0C33" +
		"\u0C40\x05\u0180\xC1\x02\u0C34\u0C35\x07\u0157\x02\x02\u0C35\u0C3D\x05" +
		"\u0180\xC1\x02\u0C36\u0C37\x07\u0157\x02\x02\u0C37\u0C38\x05\u0180\xC1" +
		"\x02\u0C38\u0C39\x07\u015C\x02\x02\u0C39\u0C3A\x05\u0180\xC1\x02\u0C3A" +
		"\u0C3C\x03\x02\x02\x02\u0C3B\u0C36\x03\x02\x02\x02\u0C3C\u0C3F\x03\x02" +
		"\x02\x02\u0C3D\u0C3B\x03\x02\x02\x02\u0C3D\u0C3E\x03\x02\x02\x02\u0C3E" +
		"\u0C41\x03\x02\x02\x02\u0C3F\u0C3D\x03\x02\x02\x02\u0C40\u0C34\x03\x02" +
		"\x02\x02\u0C40\u0C41\x03\x02\x02\x02\u0C41\u0C42\x03\x02\x02\x02\u0C42" +
		"\u0C43\x07\u016D\x02\x02\u0C43\u0C8B\x03\x02\x02\x02\u0C44\u0C45\x07\u014C" +
		"\x02\x02\u0C45\u0C46\x07\u016A\x02\x02\u0C46\u0C53\x05\u0180\xC1\x02\u0C47" +
		"\u0C48\x07\u0157\x02\x02\u0C48\u0C50\x05\u0180\xC1\x02\u0C49\u0C4A\x07" +
		"\u0157\x02\x02\u0C4A\u0C4B\x05\u0180\xC1\x02\u0C4B\u0C4C\x07\u015C\x02" +
		"\x02\u0C4C\u0C4D\x05\u0180\xC1\x02\u0C4D\u0C4F\x03\x02\x02\x02\u0C4E\u0C49" +
		"\x03\x02\x02\x02\u0C4F\u0C52\x03\x02\x02\x02\u0C50\u0C4E\x03\x02\x02\x02" +
		"\u0C50\u0C51\x03\x02\x02\x02\u0C51\u0C54\x03\x02\x02\x02\u0C52\u0C50\x03" +
		"\x02\x02\x02\u0C53\u0C47\x03\x02\x02\x02\u0C53\u0C54\x03\x02\x02\x02\u0C54" +
		"\u0C55\x03\x02\x02\x02\u0C55\u0C56\x07\u016D\x02\x02\u0C56\u0C8B\x03\x02" +
		"\x02\x02\u0C57\u0C58\x07\u014D\x02\x02\u0C58\u0C59\x07\u016A\x02\x02\u0C59" +
		"\u0C61\x05\u0180\xC1\x02\u0C5A\u0C5B\x07\u0157\x02\x02\u0C5B\u0C5C\x05" +
		"\u0180\xC1\x02\u0C5C\u0C5D\x07\u015C\x02\x02\u0C5D\u0C5E\x05\u0180\xC1" +
		"\x02\u0C5E\u0C60\x03\x02\x02\x02\u0C5F\u0C5A\x03\x02\x02\x02\u0C60\u0C63" +
		"\x03\x02\x02\x02\u0C61\u0C5F\x03\x02\x02\x02\u0C61\u0C62\x03\x02\x02\x02" +
		"\u0C62\u0C64\x03\x02\x02\x02\u0C63\u0C61\x03\x02\x02\x02\u0C64\u0C65\x07" +
		"\u016D\x02\x02\u0C65\u0C8B\x03\x02\x02\x02\u0C66\u0C67\x07\u014E\x02\x02" +
		"\u0C67\u0C68\x07\u016A\x02\x02\u0C68\u0C6E\x05\u0180\xC1\x02\u0C69\u0C6A" +
		"\x07\u0157\x02\x02\u0C6A\u0C6B\x05\u0180\xC1\x02\u0C6B\u0C6C\x07\u015C" +
		"\x02\x02\u0C6C\u0C6D\x05\u0180\xC1\x02\u0C6D\u0C6F\x03\x02\x02\x02\u0C6E" +
		"\u0C69\x03\x02\x02\x02\u0C6F\u0C70\x03\x02\x02\x02\u0C70\u0C6E\x03\x02" +
		"\x02\x02\u0C70\u0C71\x03\x02\x02\x02\u0C71\u0C74\x03\x02\x02\x02\u0C72" +
		"\u0C73\x07\u0157\x02\x02\u0C73\u0C75\x05\u0180\xC1\x02\u0C74\u0C72\x03" +
		"\x02\x02\x02\u0C74\u0C75\x03\x02\x02\x02\u0C75\u0C76\x03\x02\x02\x02\u0C76" +
		"\u0C77\x07\u016D\x02\x02\u0C77\u0C8B\x03\x02\x02\x02\u0C78\u0C79\x07\xF5" +
		"\x02\x02\u0C79\u0C7A\x07\u016A\x02\x02\u0C7A\u0C7B\x05\u0180\xC1\x02\u0C7B" +
		"\u0C7C\x07\u016D\x02\x02\u0C7C\u0C8B\x03\x02\x02\x02\u0C7D\u0C7E\x07\u0114" +
		"\x02\x02\u0C7E\u0C7F\x07\u016A\x02\x02\u0C7F\u0C80\x05\u0180\xC1\x02\u0C80" +
		"\u0C81\x07t\x02\x02\u0C81\u0C84\x05\u0180\xC1\x02\u0C82\u0C83\x07p\x02" +
		"\x02\u0C83\u0C85\x05\u0180\xC1\x02\u0C84\u0C82\x03\x02\x02\x02\u0C84\u0C85" +
		"\x03\x02\x02\x02\u0C85\u0C86\x03\x02\x02\x02\u0C86\u0C87\x07\u016D\x02" +
		"\x02\u0C87\u0C8B\x03\x02\x02\x02\u0C88\u0C8B\x07\u0152\x02\x02\u0C89\u0C8B" +
		"\x07\u0154\x02\x02\u0C8A\u0BC2\x03\x02\x02\x02\u0C8A\u0BC3\x03\x02\x02" +
		"\x02\u0C8A\u0BCD\x03\x02\x02\x02\u0C8A\u0BD4\x03\x02\x02\x02\u0C8A\u0BD5" +
		"\x03\x02\x02\x02\u0C8A\u0BDA\x03\x02\x02\x02\u0C8A\u0BE2\x03\x02\x02\x02" +
		"\u0C8A\u0BE3\x03\x02\x02\x02\u0C8A\u0BE5\x03\x02\x02\x02\u0C8A\u0BF8\x03" +
		"\x02\x02\x02\u0C8A\u0C0B\x03\x02\x02\x02\u0C8A\u0C1E\x03\x02\x02\x02\u0C8A" +
		"\u0C31\x03\x02\x02\x02\u0C8A\u0C44\x03\x02\x02\x02\u0C8A\u0C57\x03\x02" +
		"\x02\x02\u0C8A\u0C66\x03\x02\x02\x02\u0C8A\u0C78\x03\x02\x02\x02\u0C8A" +
		"\u0C7D\x03\x02\x02\x02\u0C8A\u0C88\x03\x02\x02\x02\u0C8A\u0C89\x03\x02" +
		"\x02\x02\u0C8B\u019D\x03\x02\x02\x02\u0C8C\u0C8D\x05\u01B8\xDD\x02\u0C8D" +
		"\u0C8F\x07\u016A\x02\x02\u0C8E\u0C90\x05\u01A0\xD1\x02\u0C8F\u0C8E\x03" +
		"\x02\x02\x02\u0C8F\u0C90\x03\x02\x02\x02\u0C90\u0C91\x03\x02\x02\x02\u0C91" +
		"\u0C92\x07\u016D\x02\x02\u0C92\u019F\x03\x02\x02\x02\u0C93\u0C98\x05\u01A2" +
		"\xD2\x02\u0C94\u0C95\x07\u0157\x02\x02\u0C95\u0C97\x05\u01A2\xD2\x02\u0C96" +
		"\u0C94\x03\x02\x02\x02\u0C97\u0C9A\x03\x02\x02\x02\u0C98\u0C96\x03\x02" +
		"\x02\x02\u0C98\u0C99\x03\x02\x02\x02\u0C99\u01A1\x03\x02\x02\x02\u0C9A" +
		"\u0C98\x03\x02\x02\x02\u0C9B\u0CA1\x06\xD2\x0E\x02\u0C9C\u0C9D\x05\u01B8" +
		"\xDD\x02\u0C9D\u0C9F\x07\u015C\x02\x02\u0C9E\u0CA0\x07\u0162\x02\x02\u0C9F" +
		"\u0C9E\x03\x02\x02\x02\u0C9F\u0CA0\x03\x02\x02\x02\u0CA0\u0CA2\x03\x02" +
		"\x02\x02\u0CA1\u0C9C\x03\x02\x02\x02\u0CA1\u0CA2\x03\x02\x02\x02\u0CA2" +
		"\u0CA3\x03\x02\x02\x02\u0CA3\u0CA4\x05\u0180\xC1\x02\u0CA4\u01A3\x03\x02" +
		"\x02\x02\u0CA5\u0CA8\x05\u011A\x8E\x02\u0CA6\u0CA8\x05\u0180\xC1\x02\u0CA7" +
		"\u0CA5\x03\x02\x02\x02\u0CA7\u0CA6\x03\x02\x02\x02\u0CA8\u01A5\x03\x02" +
		"\x02\x02\u0CA9\u0CAC\x05\u01B2\xDA\x02\u0CAA\u0CAC\x05\u0180\xC1\x02\u0CAB" +
		"\u0CA9\x03\x02\x02\x02\u0CAB\u0CAA\x03\x02\x02\x02\u0CAC\u01A7\x03\x02" +
		"\x02\x02\u0CAD\u0CB1\x07\x80\x02\x02\u0CAE\u0CB0\x05\u01AA\xD6\x02\u0CAF" +
		"\u0CAE\x03\x02\x02\x02\u0CB0\u0CB3\x03\x02\x02\x02\u0CB1\u0CAF\x03\x02" +
		"\x02\x02\u0CB1\u0CB2\x03\x02\x02\x02\u0CB2\u01A9\x03\x02\x02\x02\u0CB3" +
		"\u0CB1\x03\x02\x02\x02\u0CB4\u0CB5\x07\u0170\x02\x02\u0CB5\u0CB6\x05\u01B8" +
		"\xDD\x02\u0CB6\u0CB7\x05\u0180\xC1\x02\u0CB7\u0CC1\x03\x02\x02\x02\u0CB8" +
		"\u0CB9\x07\u0170\x02\x02\u0CB9\u0CBA\x05\u01B8\xDD\x02\u0CBA\u0CBB\x07" +
		"\u0171\x02";
	private static readonly _serializedATNSegment6: string =
		"\x02\u0CBB\u0CBC\x07\u015C\x02\x02\u0CBC\u0CBD\x05\u0180\xC1\x02\u0CBD" +
		"\u0CC1\x03\x02\x02\x02\u0CBE\u0CBF\x07\u0170\x02\x02\u0CBF\u0CC1\x05\u01B8" +
		"\xDD\x02\u0CC0\u0CB4\x03\x02\x02\x02\u0CC0\u0CB8\x03\x02\x02\x02\u0CC0" +
		"\u0CBE\x03\x02\x02\x02\u0CC1\u01AB\x03\x02\x02\x02\u0CC2\u0CC3\x07\u015F" +
		"\x02\x02\u0CC3\u0CC4\x05\u01AE\xD8\x02\u0CC4\u0CC5\x07\u016F\x02\x02\u0CC5" +
		"\u0CC8\x03\x02\x02\x02\u0CC6\u0CC8\x05\u01B0\xD9\x02\u0CC7\u0CC2\x03\x02" +
		"\x02\x02\u0CC7\u0CC6\x03\x02\x02\x02\u0CC8\u01AD\x03\x02\x02\x02\u0CC9" +
		"\u0CCB\v\x02\x02\x02\u0CCA\u0CC9\x03\x02\x02\x02\u0CCB\u0CCE\x03\x02\x02" +
		"\x02\u0CCC\u0CCD\x03\x02\x02\x02\u0CCC\u0CCA\x03\x02\x02\x02\u0CCD\u01AF" +
		"\x03\x02\x02\x02\u0CCE\u0CCC\x03\x02\x02\x02\u0CCF\u0CD0\x07\x81\x02\x02" +
		"\u0CD0\u0CD1\x05\u0180\xC1\x02\u0CD1\u01B1\x03\x02\x02\x02\u0CD2\u0CE1" +
		"\x07\u0179\x02\x02\u0CD3\u0CD7\x07\u0159\x02\x02\u0CD4\u0CD5\x07\u015A" +
		"\x02\x02\u0CD5\u0CD7\x07\u0159\x02\x02\u0CD6\u0CD3\x03\x02\x02\x02\u0CD6" +
		"\u0CD4\x03\x02\x02\x02\u0CD6\u0CD7\x03\x02\x02\x02\u0CD7\u0CD8\x03\x02" +
		"\x02\x02\u0CD8\u0CDD\x05\u01B8\xDD\x02\u0CD9\u0CDA\x07\u0159\x02\x02\u0CDA" +
		"\u0CDC\x05\u01B8\xDD\x02\u0CDB\u0CD9\x03\x02\x02\x02\u0CDC\u0CDF\x03\x02" +
		"\x02\x02\u0CDD\u0CDB\x03\x02\x02\x02\u0CDD\u0CDE\x03\x02\x02\x02\u0CDE" +
		"\u0CE1\x03\x02\x02\x02\u0CDF\u0CDD\x03\x02\x02\x02\u0CE0\u0CD2\x03\x02" +
		"\x02\x02\u0CE0\u0CD6\x03\x02\x02\x02\u0CE1\u01B3\x03\x02\x02\x02\u0CE2" +
		"\u0CE3\x07A\x02\x02\u0CE3\u0CE4\x05\u01BA\xDE\x02\u0CE4\u01B5\x03\x02" +
		"\x02\x02\u0CE5\u0CE6\x07\u011E\x02\x02\u0CE6\u0CE7\x05\u01BA\xDE\x02\u0CE7" +
		"\u01B7\x03\x02\x02\x02\u0CE8\u0CEB\x07\u0171\x02\x02\u0CE9\u0CEB\x05\u01C4" +
		"\xE3\x02\u0CEA\u0CE8\x03\x02\x02\x02\u0CEA\u0CE9\x03\x02\x02\x02\u0CEB" +
		"\u0CF3\x03\x02\x02\x02\u0CEC\u0CEF\x07\u015A\x02\x02\u0CED\u0CF0\x07\u0171" +
		"\x02\x02\u0CEE\u0CF0\x05\u01C4\xE3\x02\u0CEF\u0CED\x03\x02\x02\x02\u0CEF" +
		"\u0CEE\x03\x02\x02\x02\u0CF0\u0CF2\x03\x02\x02\x02\u0CF1\u0CEC\x03\x02" +
		"\x02\x02\u0CF2\u0CF5\x03\x02\x02\x02\u0CF3\u0CF1\x03\x02\x02\x02\u0CF3" +
		"\u0CF4\x03\x02\x02\x02\u0CF4\u01B9\x03\x02\x02\x02\u0CF5\u0CF3\x03\x02" +
		"\x02\x02\u0CF6\u0CF9\x07\u0172\x02\x02\u0CF7\u0CF9\x07\u0173\x02\x02\u0CF8" +
		"\u0CF6\x03\x02\x02\x02\u0CF8\u0CF7\x03\x02\x02\x02\u0CF9\u01BB\x03\x02" +
		"\x02\x02\u0CFA\u0CFC\t0\x02\x02\u0CFB\u0CFA\x03\x02\x02\x02\u0CFB\u0CFC" +
		"\x03\x02\x02\x02\u0CFC\u0CFD\x03\x02\x02\x02\u0CFD\u0CFE\x07\u0174\x02" +
		"\x02\u0CFE\u01BD\x03\x02\x02\x02\u0CFF\u0D01\t0\x02\x02\u0D00\u0CFF\x03" +
		"\x02\x02\x02\u0D00\u0D01\x03\x02\x02\x02\u0D01\u0D02\x03\x02\x02\x02\u0D02" +
		"\u0D03\x07\u0175\x02\x02\u0D03\u01BF\x03\x02\x02\x02\u0D04\u0D05\t1\x02" +
		"\x02\u0D05\u01C1\x03\x02\x02\x02\u0D06\u0D07\x07\xC0\x02\x02\u0D07\u01C3" +
		"\x03\x02\x02\x02\u0D08\u0D09\t2\x02\x02\u0D09\u01C5\x03\x02\x02\x02\u01A9" +
		"\u01CB\u01CE\u01D2\u01D5\u01DA\u01E1\u01E7\u01E9\u01F2\u01F5\u01F7\u0236" +
		"\u023E\u024E\u0255\u0258\u025D\u0261\u026A\u026F\u0277\u027C\u0285\u0291" +
		"\u0296\u0299\u02A7\u02AE\u02B7\u02C8\u02CC\u02D4\u02DF\u02E9\u02F1\u02F8" +
		"\u02FC\u0300\u0305\u0309\u030E\u0312\u0316\u0320\u0324\u0329\u032E\u0332" +
		"\u033F\u0344\u034A\u0353\u0357\u035F\u0362\u0367\u036C\u0373\u037A\u037D" +
		"\u0384\u038A\u038F\u0395\u039A\u039D\u03A3\u03B1\u03BB\u03C1\u03C6\u03CB" +
		"\u03D0\u03D4\u03D9\u03DC\u03E6\u03F2\u03F9\u03FC\u0408\u040D\u0412\u0415" +
		"\u041C\u0428\u0435\u0437\u043C\u043F\u044E\u0454\u045F\u0462\u046C\u0473" +
		"\u0479\u0481\u048B\u049F\u04A5\u04A9\u04AE\u04B2\u04B7\u04BA\u04BF\u04C2" +
		"\u04CE\u04D5\u04DA\u04DF\u04E3\u04E8\u04EB\u04F5\u0501\u0508\u0510\u051E" +
		"\u053D\u053F\u0544\u0548\u054D\u0554\u0557\u055A\u055F\u0563\u0565\u056C" +
		"\u0572\u0579\u057F\u0582\u0587\u058B\u058E\u0595\u059B\u059E\u05A8\u05B1" +
		"\u05B8\u05BF\u05C1\u05C7\u05CA\u05D5\u05DE\u05E4\u05EA\u05ED\u05F2\u05F5" +
		"\u05F8\u05FB\u05FE\u0604\u060E\u0619\u061C\u0623\u0628\u062D\u0631\u0639" +
		"\u063D\u0642\u0646\u0648\u064D\u0655\u065A\u0660\u0667\u066A\u0671\u0679" +
		"\u0681\u0684\u0687\u068C\u0695\u0699\u06A3\u06B6\u06BD\u06BF\u06C3\u06C7" +
		"\u06CF\u06DA\u06E3\u06EB\u06F3\u06F7\u06FF\u0711\u071F\u0726\u072A\u0731" +
		"\u0733\u0737\u0740\u0748\u0751\u0761\u0767\u076B\u0775\u077D\u0786\u078A" +
		"\u0790\u0795\u0799\u07A3\u07A9\u07AD\u07B9\u07C0\u07D0\u07D7\u07E1\u07E4" +
		"\u07E8\u07EF\u07F6\u07F8\u07FC\u0800\u0805\u0808\u080C\u080F\u081A\u081D" +
		"\u0828\u082E\u0832\u0834\u0838\u0841\u0848\u084C\u0850\u0857\u085B\u0863" +
		"\u0869\u086D\u0878\u087F\u088C\u0894\u0898\u08A2\u08A7\u08B4\u08BF\u08C7" +
		"\u08CB\u08CF\u08D3\u08D5\u08DA\u08DD\u08E0\u08E3\u08E7\u08EA\u08ED\u08F0" +
		"\u08F3\u08FA\u0905\u0909\u090C\u0910\u0917\u091B\u0925\u092D\u0933\u0937" +
		"\u093D\u0946\u0949\u094E\u0951\u095B\u0960\u0969\u096E\u0972\u097B\u097F" +
		"\u098D\u099A\u099F\u09A3\u09A9\u09B4\u09B6\u09BD\u09C0\u09C7\u09CC\u09D2" +
		"\u09D5\u09D8\u09E7\u09EE\u09F1\u09F4\u09F8\u09FD\u0A03\u0A07\u0A12\u0A16" +
		"\u0A19\u0A1D\u0A21\u0A25\u0A29\u0A2F\u0A35\u0A3C\u0A44\u0A4A\u0A4F\u0A5A" +
		"\u0A63\u0A67\u0A70\u0A74\u0A7E\u0A83\u0A99\u0A9C\u0AAF\u0ABF\u0AC1\u0ACC" +
		"\u0ADB\u0AE7\u0AEB\u0AF6\u0AFA\u0B06\u0B0A\u0B15\u0B1A\u0B1F\u0B23\u0B27" +
		"\u0B2C\u0B30\u0B34\u0B4B\u0B4D\u0B5F\u0B61\u0B69\u0B6E\u0B73\u0B78\u0B85" +
		"\u0B8A\u0B8F\u0B94\u0B99\u0B9E\u0BA3\u0BA8\u0BAA\u0BB1\u0BB4\u0BBF\u0BC9" +
		"\u0BD1\u0BDA\u0BE0\u0BF1\u0BF4\u0C04\u0C07\u0C17\u0C1A\u0C2A\u0C2D\u0C3D" +
		"\u0C40\u0C50\u0C53\u0C61\u0C70\u0C74\u0C84\u0C8A\u0C8F\u0C98\u0C9F\u0CA1" +
		"\u0CA7\u0CAB\u0CB1\u0CC0\u0CC7\u0CCC\u0CD6\u0CDD\u0CE0\u0CEA\u0CEF\u0CF3" +
		"\u0CF8\u0CFB\u0D00";
	public static readonly _serializedATN: string = Utils.join(
		[
			HiveSql._serializedATNSegment0,
			HiveSql._serializedATNSegment1,
			HiveSql._serializedATNSegment2,
			HiveSql._serializedATNSegment3,
			HiveSql._serializedATNSegment4,
			HiveSql._serializedATNSegment5,
			HiveSql._serializedATNSegment6,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!HiveSql.__ATN) {
			HiveSql.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(HiveSql._serializedATN));
		}

		return HiveSql.__ATN;
	}

}

export class ProgramContext extends ParserRuleContext {
	public block(): BlockContext {
		return this.getRuleContext(0, BlockContext);
	}
	public EOF(): TerminalNode { return this.getToken(HiveSql.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_program; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterProgram) {
			listener.enterProgram(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitProgram) {
			listener.exitProgram(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitProgram) {
			return visitor.visitProgram(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockContext extends ParserRuleContext {
	public begin_end_block(): Begin_end_blockContext[];
	public begin_end_block(i: number): Begin_end_blockContext;
	public begin_end_block(i?: number): Begin_end_blockContext | Begin_end_blockContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Begin_end_blockContext);
		} else {
			return this.getRuleContext(i, Begin_end_blockContext);
		}
	}
	public stmt(): StmtContext[];
	public stmt(i: number): StmtContext;
	public stmt(i?: number): StmtContext | StmtContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StmtContext);
		} else {
			return this.getRuleContext(i, StmtContext);
		}
	}
	public T_GO(): TerminalNode[];
	public T_GO(i: number): TerminalNode;
	public T_GO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_GO);
		} else {
			return this.getToken(HiveSql.T_GO, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_block; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBlock) {
			listener.enterBlock(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBlock) {
			listener.exitBlock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBlock) {
			return visitor.visitBlock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Begin_end_blockContext extends ParserRuleContext {
	public T_BEGIN(): TerminalNode { return this.getToken(HiveSql.T_BEGIN, 0); }
	public block(): BlockContext {
		return this.getRuleContext(0, BlockContext);
	}
	public block_end(): Block_endContext {
		return this.getRuleContext(0, Block_endContext);
	}
	public declare_block(): Declare_blockContext | undefined {
		return this.tryGetRuleContext(0, Declare_blockContext);
	}
	public exception_block(): Exception_blockContext | undefined {
		return this.tryGetRuleContext(0, Exception_blockContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_begin_end_block; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBegin_end_block) {
			listener.enterBegin_end_block(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBegin_end_block) {
			listener.exitBegin_end_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBegin_end_block) {
			return visitor.visitBegin_end_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Single_block_stmtContext extends ParserRuleContext {
	public T_BEGIN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BEGIN, 0); }
	public block(): BlockContext | undefined {
		return this.tryGetRuleContext(0, BlockContext);
	}
	public block_end(): Block_endContext | undefined {
		return this.tryGetRuleContext(0, Block_endContext);
	}
	public exception_block(): Exception_blockContext | undefined {
		return this.tryGetRuleContext(0, Exception_blockContext);
	}
	public stmt(): StmtContext | undefined {
		return this.tryGetRuleContext(0, StmtContext);
	}
	public T_SEMICOLON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SEMICOLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_single_block_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSingle_block_stmt) {
			listener.enterSingle_block_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSingle_block_stmt) {
			listener.exitSingle_block_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSingle_block_stmt) {
			return visitor.visitSingle_block_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Block_endContext extends ParserRuleContext {
	public T_END(): TerminalNode { return this.getToken(HiveSql.T_END, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_block_end; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBlock_end) {
			listener.enterBlock_end(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBlock_end) {
			listener.exitBlock_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBlock_end) {
			return visitor.visitBlock_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Proc_blockContext extends ParserRuleContext {
	public begin_end_block(): Begin_end_blockContext | undefined {
		return this.tryGetRuleContext(0, Begin_end_blockContext);
	}
	public stmt(): StmtContext[];
	public stmt(i: number): StmtContext;
	public stmt(i?: number): StmtContext | StmtContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StmtContext);
		} else {
			return this.getRuleContext(i, StmtContext);
		}
	}
	public T_GO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_GO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_proc_block; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterProc_block) {
			listener.enterProc_block(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitProc_block) {
			listener.exitProc_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitProc_block) {
			return visitor.visitProc_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StmtContext extends ParserRuleContext {
	public assignment_stmt(): Assignment_stmtContext | undefined {
		return this.tryGetRuleContext(0, Assignment_stmtContext);
	}
	public allocate_cursor_stmt(): Allocate_cursor_stmtContext | undefined {
		return this.tryGetRuleContext(0, Allocate_cursor_stmtContext);
	}
	public alter_table_stmt(): Alter_table_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_table_stmtContext);
	}
	public associate_locator_stmt(): Associate_locator_stmtContext | undefined {
		return this.tryGetRuleContext(0, Associate_locator_stmtContext);
	}
	public begin_transaction_stmt(): Begin_transaction_stmtContext | undefined {
		return this.tryGetRuleContext(0, Begin_transaction_stmtContext);
	}
	public break_stmt(): Break_stmtContext | undefined {
		return this.tryGetRuleContext(0, Break_stmtContext);
	}
	public call_stmt(): Call_stmtContext | undefined {
		return this.tryGetRuleContext(0, Call_stmtContext);
	}
	public collect_stats_stmt(): Collect_stats_stmtContext | undefined {
		return this.tryGetRuleContext(0, Collect_stats_stmtContext);
	}
	public close_stmt(): Close_stmtContext | undefined {
		return this.tryGetRuleContext(0, Close_stmtContext);
	}
	public cmp_stmt(): Cmp_stmtContext | undefined {
		return this.tryGetRuleContext(0, Cmp_stmtContext);
	}
	public copy_from_local_stmt(): Copy_from_local_stmtContext | undefined {
		return this.tryGetRuleContext(0, Copy_from_local_stmtContext);
	}
	public copy_stmt(): Copy_stmtContext | undefined {
		return this.tryGetRuleContext(0, Copy_stmtContext);
	}
	public commit_stmt(): Commit_stmtContext | undefined {
		return this.tryGetRuleContext(0, Commit_stmtContext);
	}
	public create_database_stmt(): Create_database_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_database_stmtContext);
	}
	public create_function_stmt(): Create_function_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_function_stmtContext);
	}
	public create_index_stmt(): Create_index_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_index_stmtContext);
	}
	public create_local_temp_table_stmt(): Create_local_temp_table_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_local_temp_table_stmtContext);
	}
	public create_package_stmt(): Create_package_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_package_stmtContext);
	}
	public create_package_body_stmt(): Create_package_body_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_package_body_stmtContext);
	}
	public create_procedure_stmt(): Create_procedure_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_procedure_stmtContext);
	}
	public create_table_stmt(): Create_table_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_table_stmtContext);
	}
	public declare_stmt(): Declare_stmtContext | undefined {
		return this.tryGetRuleContext(0, Declare_stmtContext);
	}
	public delete_stmt(): Delete_stmtContext | undefined {
		return this.tryGetRuleContext(0, Delete_stmtContext);
	}
	public describe_stmt(): Describe_stmtContext | undefined {
		return this.tryGetRuleContext(0, Describe_stmtContext);
	}
	public drop_stmt(): Drop_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_stmtContext);
	}
	public end_transaction_stmt(): End_transaction_stmtContext | undefined {
		return this.tryGetRuleContext(0, End_transaction_stmtContext);
	}
	public exec_stmt(): Exec_stmtContext | undefined {
		return this.tryGetRuleContext(0, Exec_stmtContext);
	}
	public exit_stmt(): Exit_stmtContext | undefined {
		return this.tryGetRuleContext(0, Exit_stmtContext);
	}
	public fetch_stmt(): Fetch_stmtContext | undefined {
		return this.tryGetRuleContext(0, Fetch_stmtContext);
	}
	public for_cursor_stmt(): For_cursor_stmtContext | undefined {
		return this.tryGetRuleContext(0, For_cursor_stmtContext);
	}
	public for_range_stmt(): For_range_stmtContext | undefined {
		return this.tryGetRuleContext(0, For_range_stmtContext);
	}
	public if_stmt(): If_stmtContext | undefined {
		return this.tryGetRuleContext(0, If_stmtContext);
	}
	public include_stmt(): Include_stmtContext | undefined {
		return this.tryGetRuleContext(0, Include_stmtContext);
	}
	public insert_stmt(): Insert_stmtContext | undefined {
		return this.tryGetRuleContext(0, Insert_stmtContext);
	}
	public insert_directory_stmt(): Insert_directory_stmtContext | undefined {
		return this.tryGetRuleContext(0, Insert_directory_stmtContext);
	}
	public get_diag_stmt(): Get_diag_stmtContext | undefined {
		return this.tryGetRuleContext(0, Get_diag_stmtContext);
	}
	public grant_stmt(): Grant_stmtContext | undefined {
		return this.tryGetRuleContext(0, Grant_stmtContext);
	}
	public leave_stmt(): Leave_stmtContext | undefined {
		return this.tryGetRuleContext(0, Leave_stmtContext);
	}
	public map_object_stmt(): Map_object_stmtContext | undefined {
		return this.tryGetRuleContext(0, Map_object_stmtContext);
	}
	public merge_stmt(): Merge_stmtContext | undefined {
		return this.tryGetRuleContext(0, Merge_stmtContext);
	}
	public open_stmt(): Open_stmtContext | undefined {
		return this.tryGetRuleContext(0, Open_stmtContext);
	}
	public print_stmt(): Print_stmtContext | undefined {
		return this.tryGetRuleContext(0, Print_stmtContext);
	}
	public quit_stmt(): Quit_stmtContext | undefined {
		return this.tryGetRuleContext(0, Quit_stmtContext);
	}
	public raise_stmt(): Raise_stmtContext | undefined {
		return this.tryGetRuleContext(0, Raise_stmtContext);
	}
	public resignal_stmt(): Resignal_stmtContext | undefined {
		return this.tryGetRuleContext(0, Resignal_stmtContext);
	}
	public return_stmt(): Return_stmtContext | undefined {
		return this.tryGetRuleContext(0, Return_stmtContext);
	}
	public rollback_stmt(): Rollback_stmtContext | undefined {
		return this.tryGetRuleContext(0, Rollback_stmtContext);
	}
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public signal_stmt(): Signal_stmtContext | undefined {
		return this.tryGetRuleContext(0, Signal_stmtContext);
	}
	public summary_stmt(): Summary_stmtContext | undefined {
		return this.tryGetRuleContext(0, Summary_stmtContext);
	}
	public update_stmt(): Update_stmtContext | undefined {
		return this.tryGetRuleContext(0, Update_stmtContext);
	}
	public use_stmt(): Use_stmtContext | undefined {
		return this.tryGetRuleContext(0, Use_stmtContext);
	}
	public truncate_stmt(): Truncate_stmtContext | undefined {
		return this.tryGetRuleContext(0, Truncate_stmtContext);
	}
	public values_into_stmt(): Values_into_stmtContext | undefined {
		return this.tryGetRuleContext(0, Values_into_stmtContext);
	}
	public while_stmt(): While_stmtContext | undefined {
		return this.tryGetRuleContext(0, While_stmtContext);
	}
	public label(): LabelContext | undefined {
		return this.tryGetRuleContext(0, LabelContext);
	}
	public hive(): HiveContext | undefined {
		return this.tryGetRuleContext(0, HiveContext);
	}
	public host(): HostContext | undefined {
		return this.tryGetRuleContext(0, HostContext);
	}
	public null_stmt(): Null_stmtContext | undefined {
		return this.tryGetRuleContext(0, Null_stmtContext);
	}
	public expr_stmt(): Expr_stmtContext | undefined {
		return this.tryGetRuleContext(0, Expr_stmtContext);
	}
	public semicolon_stmt(): Semicolon_stmtContext | undefined {
		return this.tryGetRuleContext(0, Semicolon_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterStmt) {
			listener.enterStmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitStmt) {
			listener.exitStmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitStmt) {
			return visitor.visitStmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Semicolon_stmtContext extends ParserRuleContext {
	public T_SEMICOLON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SEMICOLON, 0); }
	public T_CALLS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CALLS, 0); }
	public T_SHARP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SHARP, 0); }
	public T_DIV(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DIV, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_semicolon_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSemicolon_stmt) {
			listener.enterSemicolon_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSemicolon_stmt) {
			listener.exitSemicolon_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSemicolon_stmt) {
			return visitor.visitSemicolon_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exception_blockContext extends ParserRuleContext {
	public T_EXCEPTION(): TerminalNode { return this.getToken(HiveSql.T_EXCEPTION, 0); }
	public exception_block_item(): Exception_block_itemContext[];
	public exception_block_item(i: number): Exception_block_itemContext;
	public exception_block_item(i?: number): Exception_block_itemContext | Exception_block_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Exception_block_itemContext);
		} else {
			return this.getRuleContext(i, Exception_block_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_exception_block; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterException_block) {
			listener.enterException_block(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitException_block) {
			listener.exitException_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitException_block) {
			return visitor.visitException_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exception_block_itemContext extends ParserRuleContext {
	public T_WHEN(): TerminalNode[];
	public T_WHEN(i: number): TerminalNode;
	public T_WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_WHEN);
		} else {
			return this.getToken(HiveSql.T_WHEN, i);
		}
	}
	public L_ID(): TerminalNode { return this.getToken(HiveSql.L_ID, 0); }
	public T_THEN(): TerminalNode { return this.getToken(HiveSql.T_THEN, 0); }
	public block(): BlockContext {
		return this.getRuleContext(0, BlockContext);
	}
	public T_END(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_END, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_exception_block_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterException_block_item) {
			listener.enterException_block_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitException_block_item) {
			listener.exitException_block_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitException_block_item) {
			return visitor.visitException_block_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Null_stmtContext extends ParserRuleContext {
	public T_NULL(): TerminalNode { return this.getToken(HiveSql.T_NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_null_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterNull_stmt) {
			listener.enterNull_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitNull_stmt) {
			listener.exitNull_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitNull_stmt) {
			return visitor.visitNull_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_stmtContext extends ParserRuleContext {
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_stmt) {
			listener.enterExpr_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_stmt) {
			listener.exitExpr_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_stmt) {
			return visitor.visitExpr_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assignment_stmtContext extends ParserRuleContext {
	public T_SET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SET, 0); }
	public set_session_option(): Set_session_optionContext | undefined {
		return this.tryGetRuleContext(0, Set_session_optionContext);
	}
	public assignment_stmt_item(): Assignment_stmt_itemContext[];
	public assignment_stmt_item(i: number): Assignment_stmt_itemContext;
	public assignment_stmt_item(i?: number): Assignment_stmt_itemContext | Assignment_stmt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Assignment_stmt_itemContext);
		} else {
			return this.getRuleContext(i, Assignment_stmt_itemContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_assignment_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterAssignment_stmt) {
			listener.enterAssignment_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitAssignment_stmt) {
			listener.exitAssignment_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitAssignment_stmt) {
			return visitor.visitAssignment_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assignment_stmt_itemContext extends ParserRuleContext {
	public assignment_stmt_single_item(): Assignment_stmt_single_itemContext | undefined {
		return this.tryGetRuleContext(0, Assignment_stmt_single_itemContext);
	}
	public assignment_stmt_multiple_item(): Assignment_stmt_multiple_itemContext | undefined {
		return this.tryGetRuleContext(0, Assignment_stmt_multiple_itemContext);
	}
	public assignment_stmt_select_item(): Assignment_stmt_select_itemContext | undefined {
		return this.tryGetRuleContext(0, Assignment_stmt_select_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_assignment_stmt_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterAssignment_stmt_item) {
			listener.enterAssignment_stmt_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitAssignment_stmt_item) {
			listener.exitAssignment_stmt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitAssignment_stmt_item) {
			return visitor.visitAssignment_stmt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assignment_stmt_single_itemContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_EQUAL(): TerminalNode { return this.getToken(HiveSql.T_EQUAL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public T_COLON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COLON, 0); }
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_assignment_stmt_single_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterAssignment_stmt_single_item) {
			listener.enterAssignment_stmt_single_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitAssignment_stmt_single_item) {
			listener.exitAssignment_stmt_single_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitAssignment_stmt_single_item) {
			return visitor.visitAssignment_stmt_single_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assignment_stmt_multiple_itemContext extends ParserRuleContext {
	public T_OPEN_P(): TerminalNode[];
	public T_OPEN_P(i: number): TerminalNode;
	public T_OPEN_P(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_OPEN_P);
		} else {
			return this.getToken(HiveSql.T_OPEN_P, i);
		}
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_CLOSE_P(): TerminalNode[];
	public T_CLOSE_P(i: number): TerminalNode;
	public T_CLOSE_P(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_CLOSE_P);
		} else {
			return this.getToken(HiveSql.T_CLOSE_P, i);
		}
	}
	public T_EQUAL(): TerminalNode { return this.getToken(HiveSql.T_EQUAL, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public T_COLON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_assignment_stmt_multiple_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterAssignment_stmt_multiple_item) {
			listener.enterAssignment_stmt_multiple_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitAssignment_stmt_multiple_item) {
			listener.exitAssignment_stmt_multiple_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitAssignment_stmt_multiple_item) {
			return visitor.visitAssignment_stmt_multiple_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assignment_stmt_select_itemContext extends ParserRuleContext {
	public T_EQUAL(): TerminalNode { return this.getToken(HiveSql.T_EQUAL, 0); }
	public T_OPEN_P(): TerminalNode[];
	public T_OPEN_P(i: number): TerminalNode;
	public T_OPEN_P(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_OPEN_P);
		} else {
			return this.getToken(HiveSql.T_OPEN_P, i);
		}
	}
	public select_stmt(): Select_stmtContext {
		return this.getRuleContext(0, Select_stmtContext);
	}
	public T_CLOSE_P(): TerminalNode[];
	public T_CLOSE_P(i: number): TerminalNode;
	public T_CLOSE_P(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_CLOSE_P);
		} else {
			return this.getToken(HiveSql.T_CLOSE_P, i);
		}
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_COLON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COLON, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_assignment_stmt_select_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterAssignment_stmt_select_item) {
			listener.enterAssignment_stmt_select_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitAssignment_stmt_select_item) {
			listener.exitAssignment_stmt_select_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitAssignment_stmt_select_item) {
			return visitor.visitAssignment_stmt_select_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Allocate_cursor_stmtContext extends ParserRuleContext {
	public T_ALLOCATE(): TerminalNode { return this.getToken(HiveSql.T_ALLOCATE, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_CURSOR(): TerminalNode { return this.getToken(HiveSql.T_CURSOR, 0); }
	public T_FOR(): TerminalNode { return this.getToken(HiveSql.T_FOR, 0); }
	public T_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PROCEDURE, 0); }
	public T_RESULT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RESULT, 0); }
	public T_SET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_allocate_cursor_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterAllocate_cursor_stmt) {
			listener.enterAllocate_cursor_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitAllocate_cursor_stmt) {
			listener.exitAllocate_cursor_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitAllocate_cursor_stmt) {
			return visitor.visitAllocate_cursor_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Associate_locator_stmtContext extends ParserRuleContext {
	public T_ASSOCIATE(): TerminalNode { return this.getToken(HiveSql.T_ASSOCIATE, 0); }
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public T_WITH(): TerminalNode { return this.getToken(HiveSql.T_WITH, 0); }
	public T_PROCEDURE(): TerminalNode { return this.getToken(HiveSql.T_PROCEDURE, 0); }
	public T_LOCATOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOCATOR, 0); }
	public T_LOCATORS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOCATORS, 0); }
	public T_RESULT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RESULT, 0); }
	public T_SET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SET, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_associate_locator_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterAssociate_locator_stmt) {
			listener.enterAssociate_locator_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitAssociate_locator_stmt) {
			listener.exitAssociate_locator_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitAssociate_locator_stmt) {
			return visitor.visitAssociate_locator_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Begin_transaction_stmtContext extends ParserRuleContext {
	public T_BEGIN(): TerminalNode { return this.getToken(HiveSql.T_BEGIN, 0); }
	public T_TRANSACTION(): TerminalNode { return this.getToken(HiveSql.T_TRANSACTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_begin_transaction_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBegin_transaction_stmt) {
			listener.enterBegin_transaction_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBegin_transaction_stmt) {
			listener.exitBegin_transaction_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBegin_transaction_stmt) {
			return visitor.visitBegin_transaction_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Break_stmtContext extends ParserRuleContext {
	public T_BREAK(): TerminalNode { return this.getToken(HiveSql.T_BREAK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_break_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBreak_stmt) {
			listener.enterBreak_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBreak_stmt) {
			listener.exitBreak_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBreak_stmt) {
			return visitor.visitBreak_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Call_stmtContext extends ParserRuleContext {
	public T_CALL(): TerminalNode { return this.getToken(HiveSql.T_CALL, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public expr_func_params(): Expr_func_paramsContext | undefined {
		return this.tryGetRuleContext(0, Expr_func_paramsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_call_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCall_stmt) {
			listener.enterCall_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCall_stmt) {
			listener.exitCall_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCall_stmt) {
			return visitor.visitCall_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_stmtContext extends ParserRuleContext {
	public T_DECLARE(): TerminalNode { return this.getToken(HiveSql.T_DECLARE, 0); }
	public declare_stmt_item(): Declare_stmt_itemContext[];
	public declare_stmt_item(i: number): Declare_stmt_itemContext;
	public declare_stmt_item(i?: number): Declare_stmt_itemContext | Declare_stmt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declare_stmt_itemContext);
		} else {
			return this.getRuleContext(i, Declare_stmt_itemContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_declare_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDeclare_stmt) {
			listener.enterDeclare_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDeclare_stmt) {
			listener.exitDeclare_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDeclare_stmt) {
			return visitor.visitDeclare_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_blockContext extends ParserRuleContext {
	public T_DECLARE(): TerminalNode { return this.getToken(HiveSql.T_DECLARE, 0); }
	public declare_stmt_item(): Declare_stmt_itemContext[];
	public declare_stmt_item(i: number): Declare_stmt_itemContext;
	public declare_stmt_item(i?: number): Declare_stmt_itemContext | Declare_stmt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declare_stmt_itemContext);
		} else {
			return this.getRuleContext(i, Declare_stmt_itemContext);
		}
	}
	public T_SEMICOLON(): TerminalNode[];
	public T_SEMICOLON(i: number): TerminalNode;
	public T_SEMICOLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_SEMICOLON);
		} else {
			return this.getToken(HiveSql.T_SEMICOLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_declare_block; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDeclare_block) {
			listener.enterDeclare_block(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDeclare_block) {
			listener.exitDeclare_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDeclare_block) {
			return visitor.visitDeclare_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_block_inplaceContext extends ParserRuleContext {
	public declare_stmt_item(): Declare_stmt_itemContext[];
	public declare_stmt_item(i: number): Declare_stmt_itemContext;
	public declare_stmt_item(i?: number): Declare_stmt_itemContext | Declare_stmt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Declare_stmt_itemContext);
		} else {
			return this.getRuleContext(i, Declare_stmt_itemContext);
		}
	}
	public T_SEMICOLON(): TerminalNode[];
	public T_SEMICOLON(i: number): TerminalNode;
	public T_SEMICOLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_SEMICOLON);
		} else {
			return this.getToken(HiveSql.T_SEMICOLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_declare_block_inplace; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDeclare_block_inplace) {
			listener.enterDeclare_block_inplace(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDeclare_block_inplace) {
			listener.exitDeclare_block_inplace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDeclare_block_inplace) {
			return visitor.visitDeclare_block_inplace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_stmt_itemContext extends ParserRuleContext {
	public declare_cursor_item(): Declare_cursor_itemContext | undefined {
		return this.tryGetRuleContext(0, Declare_cursor_itemContext);
	}
	public declare_condition_item(): Declare_condition_itemContext | undefined {
		return this.tryGetRuleContext(0, Declare_condition_itemContext);
	}
	public declare_handler_item(): Declare_handler_itemContext | undefined {
		return this.tryGetRuleContext(0, Declare_handler_itemContext);
	}
	public declare_var_item(): Declare_var_itemContext | undefined {
		return this.tryGetRuleContext(0, Declare_var_itemContext);
	}
	public declare_temporary_table_item(): Declare_temporary_table_itemContext | undefined {
		return this.tryGetRuleContext(0, Declare_temporary_table_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_declare_stmt_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDeclare_stmt_item) {
			listener.enterDeclare_stmt_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDeclare_stmt_item) {
			listener.exitDeclare_stmt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDeclare_stmt_item) {
			return visitor.visitDeclare_stmt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_var_itemContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public dtype(): DtypeContext {
		return this.getRuleContext(0, DtypeContext);
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	public dtype_len(): Dtype_lenContext | undefined {
		return this.tryGetRuleContext(0, Dtype_lenContext);
	}
	public dtype_attr(): Dtype_attrContext[];
	public dtype_attr(i: number): Dtype_attrContext;
	public dtype_attr(i?: number): Dtype_attrContext | Dtype_attrContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Dtype_attrContext);
		} else {
			return this.getRuleContext(i, Dtype_attrContext);
		}
	}
	public dtype_default(): Dtype_defaultContext | undefined {
		return this.tryGetRuleContext(0, Dtype_defaultContext);
	}
	public T_CONSTANT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CONSTANT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_declare_var_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDeclare_var_item) {
			listener.enterDeclare_var_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDeclare_var_item) {
			listener.exitDeclare_var_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDeclare_var_item) {
			return visitor.visitDeclare_var_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_condition_itemContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_CONDITION(): TerminalNode { return this.getToken(HiveSql.T_CONDITION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_declare_condition_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDeclare_condition_item) {
			listener.enterDeclare_condition_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDeclare_condition_item) {
			listener.exitDeclare_condition_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDeclare_condition_item) {
			return visitor.visitDeclare_condition_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_cursor_itemContext extends ParserRuleContext {
	public T_IS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IS, 0); }
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	public T_FOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FOR, 0); }
	public T_CURSOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURSOR, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public cursor_with_return(): Cursor_with_returnContext | undefined {
		return this.tryGetRuleContext(0, Cursor_with_returnContext);
	}
	public cursor_without_return(): Cursor_without_returnContext | undefined {
		return this.tryGetRuleContext(0, Cursor_without_returnContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_declare_cursor_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDeclare_cursor_item) {
			listener.enterDeclare_cursor_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDeclare_cursor_item) {
			listener.exitDeclare_cursor_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDeclare_cursor_item) {
			return visitor.visitDeclare_cursor_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cursor_with_returnContext extends ParserRuleContext {
	public T_WITH(): TerminalNode { return this.getToken(HiveSql.T_WITH, 0); }
	public T_RETURN(): TerminalNode { return this.getToken(HiveSql.T_RETURN, 0); }
	public T_ONLY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ONLY, 0); }
	public T_TO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TO, 0); }
	public T_CALLER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CALLER, 0); }
	public T_CLIENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLIENT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_cursor_with_return; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCursor_with_return) {
			listener.enterCursor_with_return(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCursor_with_return) {
			listener.exitCursor_with_return(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCursor_with_return) {
			return visitor.visitCursor_with_return(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cursor_without_returnContext extends ParserRuleContext {
	public T_WITHOUT(): TerminalNode { return this.getToken(HiveSql.T_WITHOUT, 0); }
	public T_RETURN(): TerminalNode { return this.getToken(HiveSql.T_RETURN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_cursor_without_return; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCursor_without_return) {
			listener.enterCursor_without_return(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCursor_without_return) {
			listener.exitCursor_without_return(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCursor_without_return) {
			return visitor.visitCursor_without_return(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_handler_itemContext extends ParserRuleContext {
	public T_HANDLER(): TerminalNode { return this.getToken(HiveSql.T_HANDLER, 0); }
	public T_FOR(): TerminalNode { return this.getToken(HiveSql.T_FOR, 0); }
	public single_block_stmt(): Single_block_stmtContext {
		return this.getRuleContext(0, Single_block_stmtContext);
	}
	public T_CONTINUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CONTINUE, 0); }
	public T_EXIT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXIT, 0); }
	public T_SQLEXCEPTION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SQLEXCEPTION, 0); }
	public T_SQLWARNING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SQLWARNING, 0); }
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	public T_FOUND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FOUND, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_declare_handler_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDeclare_handler_item) {
			listener.enterDeclare_handler_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDeclare_handler_item) {
			listener.exitDeclare_handler_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDeclare_handler_item) {
			return visitor.visitDeclare_handler_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_temporary_table_itemContext extends ParserRuleContext {
	public T_TEMPORARY(): TerminalNode { return this.getToken(HiveSql.T_TEMPORARY, 0); }
	public T_TABLE(): TerminalNode { return this.getToken(HiveSql.T_TABLE, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public create_table_definition(): Create_table_definitionContext {
		return this.getRuleContext(0, Create_table_definitionContext);
	}
	public T_GLOBAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_GLOBAL, 0); }
	public create_table_preoptions(): Create_table_preoptionsContext | undefined {
		return this.tryGetRuleContext(0, Create_table_preoptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_declare_temporary_table_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDeclare_temporary_table_item) {
			listener.enterDeclare_temporary_table_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDeclare_temporary_table_item) {
			listener.exitDeclare_temporary_table_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDeclare_temporary_table_item) {
			return visitor.visitDeclare_temporary_table_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_stmtContext extends ParserRuleContext {
	public T_CREATE(): TerminalNode { return this.getToken(HiveSql.T_CREATE, 0); }
	public T_TABLE(): TerminalNode { return this.getToken(HiveSql.T_TABLE, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public create_table_definition(): Create_table_definitionContext {
		return this.getRuleContext(0, Create_table_definitionContext);
	}
	public T_IF(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IF, 0); }
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	public T_EXISTS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXISTS, 0); }
	public create_table_preoptions(): Create_table_preoptionsContext | undefined {
		return this.tryGetRuleContext(0, Create_table_preoptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_stmt) {
			listener.enterCreate_table_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_stmt) {
			listener.exitCreate_table_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_stmt) {
			return visitor.visitCreate_table_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_local_temp_table_stmtContext extends ParserRuleContext {
	public T_CREATE(): TerminalNode { return this.getToken(HiveSql.T_CREATE, 0); }
	public T_TABLE(): TerminalNode { return this.getToken(HiveSql.T_TABLE, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public create_table_definition(): Create_table_definitionContext {
		return this.getRuleContext(0, Create_table_definitionContext);
	}
	public T_LOCAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOCAL, 0); }
	public T_TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TEMPORARY, 0); }
	public T_VOLATILE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VOLATILE, 0); }
	public create_table_preoptions(): Create_table_preoptionsContext | undefined {
		return this.tryGetRuleContext(0, Create_table_preoptionsContext);
	}
	public T_SET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SET, 0); }
	public T_MULTISET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MULTISET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_local_temp_table_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_local_temp_table_stmt) {
			listener.enterCreate_local_temp_table_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_local_temp_table_stmt) {
			listener.exitCreate_local_temp_table_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_local_temp_table_stmt) {
			return visitor.visitCreate_local_temp_table_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_definitionContext extends ParserRuleContext {
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public create_table_columns(): Create_table_columnsContext | undefined {
		return this.tryGetRuleContext(0, Create_table_columnsContext);
	}
	public create_table_options(): Create_table_optionsContext | undefined {
		return this.tryGetRuleContext(0, Create_table_optionsContext);
	}
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_definition; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_definition) {
			listener.enterCreate_table_definition(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_definition) {
			listener.exitCreate_table_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_definition) {
			return visitor.visitCreate_table_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_columnsContext extends ParserRuleContext {
	public create_table_columns_item(): Create_table_columns_itemContext[];
	public create_table_columns_item(i: number): Create_table_columns_itemContext;
	public create_table_columns_item(i?: number): Create_table_columns_itemContext | Create_table_columns_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_table_columns_itemContext);
		} else {
			return this.getRuleContext(i, Create_table_columns_itemContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_columns; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_columns) {
			listener.enterCreate_table_columns(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_columns) {
			listener.exitCreate_table_columns(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_columns) {
			return visitor.visitCreate_table_columns(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_columns_itemContext extends ParserRuleContext {
	public column_name(): Column_nameContext | undefined {
		return this.tryGetRuleContext(0, Column_nameContext);
	}
	public dtype(): DtypeContext | undefined {
		return this.tryGetRuleContext(0, DtypeContext);
	}
	public dtype_len(): Dtype_lenContext | undefined {
		return this.tryGetRuleContext(0, Dtype_lenContext);
	}
	public dtype_attr(): Dtype_attrContext[];
	public dtype_attr(i: number): Dtype_attrContext;
	public dtype_attr(i?: number): Dtype_attrContext | Dtype_attrContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Dtype_attrContext);
		} else {
			return this.getRuleContext(i, Dtype_attrContext);
		}
	}
	public create_table_column_inline_cons(): Create_table_column_inline_consContext[];
	public create_table_column_inline_cons(i: number): Create_table_column_inline_consContext;
	public create_table_column_inline_cons(i?: number): Create_table_column_inline_consContext | Create_table_column_inline_consContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_table_column_inline_consContext);
		} else {
			return this.getRuleContext(i, Create_table_column_inline_consContext);
		}
	}
	public create_table_column_cons(): Create_table_column_consContext | undefined {
		return this.tryGetRuleContext(0, Create_table_column_consContext);
	}
	public T_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CONSTRAINT, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_columns_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_columns_item) {
			listener.enterCreate_table_columns_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_columns_item) {
			listener.exitCreate_table_columns_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_columns_item) {
			return visitor.visitCreate_table_columns_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_nameContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_column_name; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterColumn_name) {
			listener.enterColumn_name(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitColumn_name) {
			listener.exitColumn_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitColumn_name) {
			return visitor.visitColumn_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_column_inline_consContext extends ParserRuleContext {
	public dtype_default(): Dtype_defaultContext | undefined {
		return this.tryGetRuleContext(0, Dtype_defaultContext);
	}
	public T_NULL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NULL, 0); }
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	public T_PRIMARY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PRIMARY, 0); }
	public T_KEY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_KEY, 0); }
	public T_UNIQUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_UNIQUE, 0); }
	public T_REFERENCES(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REFERENCES, 0); }
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public create_table_fk_action(): Create_table_fk_actionContext[];
	public create_table_fk_action(i: number): Create_table_fk_actionContext;
	public create_table_fk_action(i?: number): Create_table_fk_actionContext | Create_table_fk_actionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_table_fk_actionContext);
		} else {
			return this.getRuleContext(i, Create_table_fk_actionContext);
		}
	}
	public T_IDENTITY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IDENTITY, 0); }
	public L_INT(): TerminalNode[];
	public L_INT(i: number): TerminalNode;
	public L_INT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.L_INT);
		} else {
			return this.getToken(HiveSql.L_INT, i);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public T_AUTO_INCREMENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AUTO_INCREMENT, 0); }
	public T_ENABLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ENABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_column_inline_cons; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_column_inline_cons) {
			listener.enterCreate_table_column_inline_cons(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_column_inline_cons) {
			listener.exitCreate_table_column_inline_cons(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_column_inline_cons) {
			return visitor.visitCreate_table_column_inline_cons(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_column_consContext extends ParserRuleContext {
	public T_PRIMARY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PRIMARY, 0); }
	public T_KEY(): TerminalNode { return this.getToken(HiveSql.T_KEY, 0); }
	public T_OPEN_P(): TerminalNode[];
	public T_OPEN_P(i: number): TerminalNode;
	public T_OPEN_P(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_OPEN_P);
		} else {
			return this.getToken(HiveSql.T_OPEN_P, i);
		}
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_CLOSE_P(): TerminalNode[];
	public T_CLOSE_P(i: number): TerminalNode;
	public T_CLOSE_P(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_CLOSE_P);
		} else {
			return this.getToken(HiveSql.T_CLOSE_P, i);
		}
	}
	public T_CLUSTERED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLUSTERED, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public T_ENABLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ENABLE, 0); }
	public index_storage_clause(): Index_storage_clauseContext | undefined {
		return this.tryGetRuleContext(0, Index_storage_clauseContext);
	}
	public T_ASC(): TerminalNode[];
	public T_ASC(i: number): TerminalNode;
	public T_ASC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_ASC);
		} else {
			return this.getToken(HiveSql.T_ASC, i);
		}
	}
	public T_DESC(): TerminalNode[];
	public T_DESC(i: number): TerminalNode;
	public T_DESC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_DESC);
		} else {
			return this.getToken(HiveSql.T_DESC, i);
		}
	}
	public T_FOREIGN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FOREIGN, 0); }
	public T_REFERENCES(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REFERENCES, 0); }
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public create_table_fk_action(): Create_table_fk_actionContext[];
	public create_table_fk_action(i: number): Create_table_fk_actionContext;
	public create_table_fk_action(i?: number): Create_table_fk_actionContext | Create_table_fk_actionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_table_fk_actionContext);
		} else {
			return this.getRuleContext(i, Create_table_fk_actionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_column_cons; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_column_cons) {
			listener.enterCreate_table_column_cons(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_column_cons) {
			listener.exitCreate_table_column_cons(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_column_cons) {
			return visitor.visitCreate_table_column_cons(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_fk_actionContext extends ParserRuleContext {
	public T_ON(): TerminalNode { return this.getToken(HiveSql.T_ON, 0); }
	public T_UPDATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_UPDATE, 0); }
	public T_DELETE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DELETE, 0); }
	public T_NO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NO, 0); }
	public T_ACTION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ACTION, 0); }
	public T_RESTRICT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RESTRICT, 0); }
	public T_SET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SET, 0); }
	public T_NULL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NULL, 0); }
	public T_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFAULT, 0); }
	public T_CASCADE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CASCADE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_fk_action; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_fk_action) {
			listener.enterCreate_table_fk_action(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_fk_action) {
			listener.exitCreate_table_fk_action(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_fk_action) {
			return visitor.visitCreate_table_fk_action(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_preoptionsContext extends ParserRuleContext {
	public create_table_preoptions_item(): Create_table_preoptions_itemContext[];
	public create_table_preoptions_item(i: number): Create_table_preoptions_itemContext;
	public create_table_preoptions_item(i?: number): Create_table_preoptions_itemContext | Create_table_preoptions_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_table_preoptions_itemContext);
		} else {
			return this.getRuleContext(i, Create_table_preoptions_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_preoptions; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_preoptions) {
			listener.enterCreate_table_preoptions(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_preoptions) {
			listener.exitCreate_table_preoptions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_preoptions) {
			return visitor.visitCreate_table_preoptions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_preoptions_itemContext extends ParserRuleContext {
	public T_COMMA(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COMMA, 0); }
	public create_table_preoptions_td_item(): Create_table_preoptions_td_itemContext | undefined {
		return this.tryGetRuleContext(0, Create_table_preoptions_td_itemContext);
	}
	public create_table_options_hive_item(): Create_table_options_hive_itemContext | undefined {
		return this.tryGetRuleContext(0, Create_table_options_hive_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_preoptions_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_preoptions_item) {
			listener.enterCreate_table_preoptions_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_preoptions_item) {
			listener.exitCreate_table_preoptions_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_preoptions_item) {
			return visitor.visitCreate_table_preoptions_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_preoptions_td_itemContext extends ParserRuleContext {
	public T_LOG(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOG, 0); }
	public T_FALLBACK(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FALLBACK, 0); }
	public T_NO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_preoptions_td_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_preoptions_td_item) {
			listener.enterCreate_table_preoptions_td_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_preoptions_td_item) {
			listener.exitCreate_table_preoptions_td_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_preoptions_td_item) {
			return visitor.visitCreate_table_preoptions_td_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_optionsContext extends ParserRuleContext {
	public create_table_options_item(): Create_table_options_itemContext[];
	public create_table_options_item(i: number): Create_table_options_itemContext;
	public create_table_options_item(i?: number): Create_table_options_itemContext | Create_table_options_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_table_options_itemContext);
		} else {
			return this.getRuleContext(i, Create_table_options_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_options; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_options) {
			listener.enterCreate_table_options(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_options) {
			listener.exitCreate_table_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_options) {
			return visitor.visitCreate_table_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_options_itemContext extends ParserRuleContext {
	public T_ON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ON, 0); }
	public T_COMMIT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COMMIT, 0); }
	public T_ROWS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ROWS, 0); }
	public T_DELETE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DELETE, 0); }
	public T_PRESERVE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PRESERVE, 0); }
	public create_table_options_ora_item(): Create_table_options_ora_itemContext | undefined {
		return this.tryGetRuleContext(0, Create_table_options_ora_itemContext);
	}
	public create_table_options_db2_item(): Create_table_options_db2_itemContext | undefined {
		return this.tryGetRuleContext(0, Create_table_options_db2_itemContext);
	}
	public create_table_options_td_item(): Create_table_options_td_itemContext | undefined {
		return this.tryGetRuleContext(0, Create_table_options_td_itemContext);
	}
	public create_table_options_hive_item(): Create_table_options_hive_itemContext | undefined {
		return this.tryGetRuleContext(0, Create_table_options_hive_itemContext);
	}
	public create_table_options_mssql_item(): Create_table_options_mssql_itemContext | undefined {
		return this.tryGetRuleContext(0, Create_table_options_mssql_itemContext);
	}
	public create_table_options_mysql_item(): Create_table_options_mysql_itemContext | undefined {
		return this.tryGetRuleContext(0, Create_table_options_mysql_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_options_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_options_item) {
			listener.enterCreate_table_options_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_options_item) {
			listener.exitCreate_table_options_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_options_item) {
			return visitor.visitCreate_table_options_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_options_ora_itemContext extends ParserRuleContext {
	public T_SEGMENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SEGMENT, 0); }
	public T_CREATION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CREATION, 0); }
	public T_IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IMMEDIATE, 0); }
	public T_DEFERRED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFERRED, 0); }
	public L_INT(): TerminalNode[];
	public L_INT(i: number): TerminalNode;
	public L_INT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.L_INT);
		} else {
			return this.getToken(HiveSql.L_INT, i);
		}
	}
	public T_PCTFREE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PCTFREE, 0); }
	public T_PCTUSED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PCTUSED, 0); }
	public T_INITRANS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INITRANS, 0); }
	public T_MAXTRANS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MAXTRANS, 0); }
	public T_NOCOMPRESS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOCOMPRESS, 0); }
	public T_LOGGING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOGGING, 0); }
	public T_NOLOGGING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOLOGGING, 0); }
	public T_STORAGE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STORAGE, 0); }
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TABLESPACE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_options_ora_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_options_ora_item) {
			listener.enterCreate_table_options_ora_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_options_ora_item) {
			listener.exitCreate_table_options_ora_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_options_ora_item) {
			return visitor.visitCreate_table_options_ora_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_options_db2_itemContext extends ParserRuleContext {
	public T_IN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IN, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_INDEX(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INDEX, 0); }
	public T_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_WITH, 0); }
	public T_REPLACE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REPLACE, 0); }
	public T_DISTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DISTRIBUTE, 0); }
	public T_BY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BY, 0); }
	public T_HASH(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_HASH, 0); }
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public T_LOGGED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOGGED, 0); }
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	public T_COMPRESS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COMPRESS, 0); }
	public T_YES(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_YES, 0); }
	public T_NO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NO, 0); }
	public T_DEFINITION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFINITION, 0); }
	public T_ONLY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ONLY, 0); }
	public T_RESTRICT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RESTRICT, 0); }
	public T_ON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ON, 0); }
	public T_DROP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_options_db2_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_options_db2_item) {
			listener.enterCreate_table_options_db2_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_options_db2_item) {
			listener.exitCreate_table_options_db2_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_options_db2_item) {
			return visitor.visitCreate_table_options_db2_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_options_td_itemContext extends ParserRuleContext {
	public T_PRIMARY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PRIMARY, 0); }
	public T_INDEX(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INDEX, 0); }
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public T_UNIQUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_UNIQUE, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public T_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_WITH, 0); }
	public T_DATA(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DATA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_options_td_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_options_td_item) {
			listener.enterCreate_table_options_td_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_options_td_item) {
			listener.exitCreate_table_options_td_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_options_td_item) {
			return visitor.visitCreate_table_options_td_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_options_hive_itemContext extends ParserRuleContext {
	public create_table_hive_row_format(): Create_table_hive_row_formatContext | undefined {
		return this.tryGetRuleContext(0, Create_table_hive_row_formatContext);
	}
	public T_STORED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STORED, 0); }
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_options_hive_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_options_hive_item) {
			listener.enterCreate_table_options_hive_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_options_hive_item) {
			listener.exitCreate_table_options_hive_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_options_hive_item) {
			return visitor.visitCreate_table_options_hive_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_hive_row_formatContext extends ParserRuleContext {
	public T_ROW(): TerminalNode { return this.getToken(HiveSql.T_ROW, 0); }
	public T_FORMAT(): TerminalNode { return this.getToken(HiveSql.T_FORMAT, 0); }
	public T_DELIMITED(): TerminalNode { return this.getToken(HiveSql.T_DELIMITED, 0); }
	public create_table_hive_row_format_fields(): Create_table_hive_row_format_fieldsContext[];
	public create_table_hive_row_format_fields(i: number): Create_table_hive_row_format_fieldsContext;
	public create_table_hive_row_format_fields(i?: number): Create_table_hive_row_format_fieldsContext | Create_table_hive_row_format_fieldsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_table_hive_row_format_fieldsContext);
		} else {
			return this.getRuleContext(i, Create_table_hive_row_format_fieldsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_hive_row_format; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_hive_row_format) {
			listener.enterCreate_table_hive_row_format(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_hive_row_format) {
			listener.exitCreate_table_hive_row_format(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_hive_row_format) {
			return visitor.visitCreate_table_hive_row_format(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_hive_row_format_fieldsContext extends ParserRuleContext {
	public T_FIELDS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FIELDS, 0); }
	public T_TERMINATED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TERMINATED, 0); }
	public T_BY(): TerminalNode[];
	public T_BY(i: number): TerminalNode;
	public T_BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_BY);
		} else {
			return this.getToken(HiveSql.T_BY, i);
		}
	}
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_ESCAPED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ESCAPED, 0); }
	public T_COLLECTION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COLLECTION, 0); }
	public T_ITEMS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ITEMS, 0); }
	public T_MAP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MAP, 0); }
	public T_KEYS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_KEYS, 0); }
	public T_LINES(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LINES, 0); }
	public T_NULL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NULL, 0); }
	public T_DEFINED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFINED, 0); }
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_hive_row_format_fields; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_hive_row_format_fields) {
			listener.enterCreate_table_hive_row_format_fields(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_hive_row_format_fields) {
			listener.exitCreate_table_hive_row_format_fields(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_hive_row_format_fields) {
			return visitor.visitCreate_table_hive_row_format_fields(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_options_mssql_itemContext extends ParserRuleContext {
	public T_ON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ON, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_TEXTIMAGE_ON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TEXTIMAGE_ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_options_mssql_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_options_mssql_item) {
			listener.enterCreate_table_options_mssql_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_options_mssql_item) {
			listener.exitCreate_table_options_mssql_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_options_mssql_item) {
			return visitor.visitCreate_table_options_mssql_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_options_mysql_itemContext extends ParserRuleContext {
	public T_AUTO_INCREMENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AUTO_INCREMENT, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public T_EQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EQUAL, 0); }
	public T_COMMENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COMMENT, 0); }
	public T_CHARACTER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CHARACTER, 0); }
	public T_SET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SET, 0); }
	public T_CHARSET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CHARSET, 0); }
	public T_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFAULT, 0); }
	public T_ENGINE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ENGINE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_table_options_mysql_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_table_options_mysql_item) {
			listener.enterCreate_table_options_mysql_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_table_options_mysql_item) {
			listener.exitCreate_table_options_mysql_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_table_options_mysql_item) {
			return visitor.visitCreate_table_options_mysql_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_table_stmtContext extends ParserRuleContext {
	public T_ALTER(): TerminalNode { return this.getToken(HiveSql.T_ALTER, 0); }
	public T_TABLE(): TerminalNode { return this.getToken(HiveSql.T_TABLE, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public alter_table_item(): Alter_table_itemContext {
		return this.getRuleContext(0, Alter_table_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_alter_table_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterAlter_table_stmt) {
			listener.enterAlter_table_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitAlter_table_stmt) {
			listener.exitAlter_table_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitAlter_table_stmt) {
			return visitor.visitAlter_table_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_table_itemContext extends ParserRuleContext {
	public alter_table_add_constraint(): Alter_table_add_constraintContext {
		return this.getRuleContext(0, Alter_table_add_constraintContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_alter_table_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterAlter_table_item) {
			listener.enterAlter_table_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitAlter_table_item) {
			listener.exitAlter_table_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitAlter_table_item) {
			return visitor.visitAlter_table_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_table_add_constraintContext extends ParserRuleContext {
	public T_ADD2(): TerminalNode { return this.getToken(HiveSql.T_ADD2, 0); }
	public alter_table_add_constraint_item(): Alter_table_add_constraint_itemContext {
		return this.getRuleContext(0, Alter_table_add_constraint_itemContext);
	}
	public T_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CONSTRAINT, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_alter_table_add_constraint; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterAlter_table_add_constraint) {
			listener.enterAlter_table_add_constraint(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitAlter_table_add_constraint) {
			listener.exitAlter_table_add_constraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitAlter_table_add_constraint) {
			return visitor.visitAlter_table_add_constraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_table_add_constraint_itemContext extends ParserRuleContext {
	public T_PRIMARY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PRIMARY, 0); }
	public T_KEY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_KEY, 0); }
	public T_OPEN_P(): TerminalNode[];
	public T_OPEN_P(i: number): TerminalNode;
	public T_OPEN_P(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_OPEN_P);
		} else {
			return this.getToken(HiveSql.T_OPEN_P, i);
		}
	}
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_CLOSE_P(): TerminalNode[];
	public T_CLOSE_P(i: number): TerminalNode;
	public T_CLOSE_P(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_CLOSE_P);
		} else {
			return this.getToken(HiveSql.T_CLOSE_P, i);
		}
	}
	public T_CLUSTERED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLUSTERED, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public T_ENABLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ENABLE, 0); }
	public index_storage_clause(): Index_storage_clauseContext | undefined {
		return this.tryGetRuleContext(0, Index_storage_clauseContext);
	}
	public T_ASC(): TerminalNode[];
	public T_ASC(i: number): TerminalNode;
	public T_ASC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_ASC);
		} else {
			return this.getToken(HiveSql.T_ASC, i);
		}
	}
	public T_DESC(): TerminalNode[];
	public T_DESC(i: number): TerminalNode;
	public T_DESC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_DESC);
		} else {
			return this.getToken(HiveSql.T_DESC, i);
		}
	}
	public T_FOREIGN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FOREIGN, 0); }
	public T_REFERENCES(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REFERENCES, 0); }
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public create_table_fk_action(): Create_table_fk_actionContext[];
	public create_table_fk_action(i: number): Create_table_fk_actionContext;
	public create_table_fk_action(i?: number): Create_table_fk_actionContext | Create_table_fk_actionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_table_fk_actionContext);
		} else {
			return this.getRuleContext(i, Create_table_fk_actionContext);
		}
	}
	public T_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFAULT, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public T_FOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_alter_table_add_constraint_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterAlter_table_add_constraint_item) {
			listener.enterAlter_table_add_constraint_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitAlter_table_add_constraint_item) {
			listener.exitAlter_table_add_constraint_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitAlter_table_add_constraint_item) {
			return visitor.visitAlter_table_add_constraint_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DtypeContext extends ParserRuleContext {
	public T_CHAR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CHAR, 0); }
	public T_BIGINT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BIGINT, 0); }
	public T_BINARY_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BINARY_DOUBLE, 0); }
	public T_BINARY_FLOAT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BINARY_FLOAT, 0); }
	public T_BINARY_INTEGER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BINARY_INTEGER, 0); }
	public T_BIT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BIT, 0); }
	public T_DATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DATE, 0); }
	public T_DATETIME(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DATETIME, 0); }
	public T_DEC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEC, 0); }
	public T_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DECIMAL, 0); }
	public T_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DOUBLE, 0); }
	public T_PRECISION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PRECISION, 0); }
	public T_FLOAT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FLOAT, 0); }
	public T_INT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INT, 0); }
	public T_INT2(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INT2, 0); }
	public T_INT4(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INT4, 0); }
	public T_INT8(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INT8, 0); }
	public T_INTEGER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INTEGER, 0); }
	public T_NCHAR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NCHAR, 0); }
	public T_NVARCHAR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NVARCHAR, 0); }
	public T_NUMBER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NUMBER, 0); }
	public T_NUMERIC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NUMERIC, 0); }
	public T_PLS_INTEGER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PLS_INTEGER, 0); }
	public T_REAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REAL, 0); }
	public T_RESULT_SET_LOCATOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RESULT_SET_LOCATOR, 0); }
	public T_VARYING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VARYING, 0); }
	public T_SIMPLE_FLOAT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SIMPLE_FLOAT, 0); }
	public T_SIMPLE_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SIMPLE_DOUBLE, 0); }
	public T_SIMPLE_INTEGER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SIMPLE_INTEGER, 0); }
	public T_SMALLINT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SMALLINT, 0); }
	public T_SMALLDATETIME(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SMALLDATETIME, 0); }
	public T_STRING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STRING, 0); }
	public T_SYS_REFCURSOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SYS_REFCURSOR, 0); }
	public T_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TIMESTAMP, 0); }
	public T_TINYINT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TINYINT, 0); }
	public T_VARCHAR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VARCHAR, 0); }
	public T_VARCHAR2(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VARCHAR2, 0); }
	public T_XML(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_XML, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public T_PRECENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PRECENT, 0); }
	public T_TYPE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TYPE, 0); }
	public T_ROWTYPE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ROWTYPE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_dtype; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDtype) {
			listener.enterDtype(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDtype) {
			listener.exitDtype(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDtype) {
			return visitor.visitDtype(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dtype_lenContext extends ParserRuleContext {
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public L_INT(): TerminalNode[];
	public L_INT(i: number): TerminalNode;
	public L_INT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.L_INT);
		} else {
			return this.getToken(HiveSql.L_INT, i);
		}
	}
	public T_MAX(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MAX, 0); }
	public T_COMMA(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COMMA, 0); }
	public T_CHAR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CHAR, 0); }
	public T_BYTE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BYTE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_dtype_len; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDtype_len) {
			listener.enterDtype_len(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDtype_len) {
			listener.exitDtype_len(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDtype_len) {
			return visitor.visitDtype_len(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dtype_attrContext extends ParserRuleContext {
	public T_NULL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NULL, 0); }
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	public T_CHARACTER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CHARACTER, 0); }
	public T_SET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SET, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public T_CASESPECIFIC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CASESPECIFIC, 0); }
	public T_CS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_dtype_attr; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDtype_attr) {
			listener.enterDtype_attr(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDtype_attr) {
			listener.exitDtype_attr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDtype_attr) {
			return visitor.visitDtype_attr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dtype_defaultContext extends ParserRuleContext {
	public T_EQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EQUAL, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public T_COLON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COLON, 0); }
	public T_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFAULT, 0); }
	public T_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_dtype_default; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDtype_default) {
			listener.enterDtype_default(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDtype_default) {
			listener.exitDtype_default(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDtype_default) {
			return visitor.visitDtype_default(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_database_stmtContext extends ParserRuleContext {
	public T_CREATE(): TerminalNode { return this.getToken(HiveSql.T_CREATE, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public T_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DATABASE, 0); }
	public T_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SCHEMA, 0); }
	public T_IF(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IF, 0); }
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	public T_EXISTS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXISTS, 0); }
	public create_database_option(): Create_database_optionContext[];
	public create_database_option(i: number): Create_database_optionContext;
	public create_database_option(i?: number): Create_database_optionContext | Create_database_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_database_optionContext);
		} else {
			return this.getRuleContext(i, Create_database_optionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_database_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_database_stmt) {
			listener.enterCreate_database_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_database_stmt) {
			listener.exitCreate_database_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_database_stmt) {
			return visitor.visitCreate_database_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_database_optionContext extends ParserRuleContext {
	public T_COMMENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COMMENT, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public T_LOCATION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOCATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_database_option; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_database_option) {
			listener.enterCreate_database_option(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_database_option) {
			listener.exitCreate_database_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_database_option) {
			return visitor.visitCreate_database_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_function_stmtContext extends ParserRuleContext {
	public T_FUNCTION(): TerminalNode { return this.getToken(HiveSql.T_FUNCTION, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public create_function_return(): Create_function_returnContext {
		return this.getRuleContext(0, Create_function_returnContext);
	}
	public single_block_stmt(): Single_block_stmtContext {
		return this.getRuleContext(0, Single_block_stmtContext);
	}
	public T_ALTER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ALTER, 0); }
	public T_CREATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CREATE, 0); }
	public T_REPLACE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REPLACE, 0); }
	public create_routine_params(): Create_routine_paramsContext | undefined {
		return this.tryGetRuleContext(0, Create_routine_paramsContext);
	}
	public declare_block_inplace(): Declare_block_inplaceContext | undefined {
		return this.tryGetRuleContext(0, Declare_block_inplaceContext);
	}
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	public T_IS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IS, 0); }
	public T_OR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_function_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_function_stmt) {
			listener.enterCreate_function_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_function_stmt) {
			listener.exitCreate_function_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_function_stmt) {
			return visitor.visitCreate_function_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_function_returnContext extends ParserRuleContext {
	public dtype(): DtypeContext {
		return this.getRuleContext(0, DtypeContext);
	}
	public T_RETURN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RETURN, 0); }
	public T_RETURNS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RETURNS, 0); }
	public dtype_len(): Dtype_lenContext | undefined {
		return this.tryGetRuleContext(0, Dtype_lenContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_function_return; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_function_return) {
			listener.enterCreate_function_return(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_function_return) {
			listener.exitCreate_function_return(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_function_return) {
			return visitor.visitCreate_function_return(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_package_stmtContext extends ParserRuleContext {
	public T_PACKAGE(): TerminalNode { return this.getToken(HiveSql.T_PACKAGE, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public package_spec(): Package_specContext {
		return this.getRuleContext(0, Package_specContext);
	}
	public T_END(): TerminalNode { return this.getToken(HiveSql.T_END, 0); }
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	public T_IS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IS, 0); }
	public T_ALTER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ALTER, 0); }
	public T_CREATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CREATE, 0); }
	public T_REPLACE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REPLACE, 0); }
	public T_SEMICOLON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SEMICOLON, 0); }
	public T_OR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_package_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_package_stmt) {
			listener.enterCreate_package_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_package_stmt) {
			listener.exitCreate_package_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_package_stmt) {
			return visitor.visitCreate_package_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Package_specContext extends ParserRuleContext {
	public package_spec_item(): Package_spec_itemContext[];
	public package_spec_item(i: number): Package_spec_itemContext;
	public package_spec_item(i?: number): Package_spec_itemContext | Package_spec_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Package_spec_itemContext);
		} else {
			return this.getRuleContext(i, Package_spec_itemContext);
		}
	}
	public T_SEMICOLON(): TerminalNode[];
	public T_SEMICOLON(i: number): TerminalNode;
	public T_SEMICOLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_SEMICOLON);
		} else {
			return this.getToken(HiveSql.T_SEMICOLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_package_spec; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterPackage_spec) {
			listener.enterPackage_spec(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitPackage_spec) {
			listener.exitPackage_spec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitPackage_spec) {
			return visitor.visitPackage_spec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Package_spec_itemContext extends ParserRuleContext {
	public declare_stmt_item(): Declare_stmt_itemContext | undefined {
		return this.tryGetRuleContext(0, Declare_stmt_itemContext);
	}
	public T_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FUNCTION, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public create_function_return(): Create_function_returnContext | undefined {
		return this.tryGetRuleContext(0, Create_function_returnContext);
	}
	public create_routine_params(): Create_routine_paramsContext | undefined {
		return this.tryGetRuleContext(0, Create_routine_paramsContext);
	}
	public T_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PROCEDURE, 0); }
	public T_PROC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PROC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_package_spec_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterPackage_spec_item) {
			listener.enterPackage_spec_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitPackage_spec_item) {
			listener.exitPackage_spec_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitPackage_spec_item) {
			return visitor.visitPackage_spec_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_package_body_stmtContext extends ParserRuleContext {
	public T_PACKAGE(): TerminalNode { return this.getToken(HiveSql.T_PACKAGE, 0); }
	public T_BODY(): TerminalNode { return this.getToken(HiveSql.T_BODY, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public package_body(): Package_bodyContext {
		return this.getRuleContext(0, Package_bodyContext);
	}
	public T_END(): TerminalNode { return this.getToken(HiveSql.T_END, 0); }
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	public T_IS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IS, 0); }
	public T_ALTER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ALTER, 0); }
	public T_CREATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CREATE, 0); }
	public T_REPLACE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REPLACE, 0); }
	public T_SEMICOLON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SEMICOLON, 0); }
	public T_OR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_package_body_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_package_body_stmt) {
			listener.enterCreate_package_body_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_package_body_stmt) {
			listener.exitCreate_package_body_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_package_body_stmt) {
			return visitor.visitCreate_package_body_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Package_bodyContext extends ParserRuleContext {
	public package_body_item(): Package_body_itemContext[];
	public package_body_item(i: number): Package_body_itemContext;
	public package_body_item(i?: number): Package_body_itemContext | Package_body_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Package_body_itemContext);
		} else {
			return this.getRuleContext(i, Package_body_itemContext);
		}
	}
	public T_SEMICOLON(): TerminalNode[];
	public T_SEMICOLON(i: number): TerminalNode;
	public T_SEMICOLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_SEMICOLON);
		} else {
			return this.getToken(HiveSql.T_SEMICOLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_package_body; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterPackage_body) {
			listener.enterPackage_body(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitPackage_body) {
			listener.exitPackage_body(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitPackage_body) {
			return visitor.visitPackage_body(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Package_body_itemContext extends ParserRuleContext {
	public declare_stmt_item(): Declare_stmt_itemContext | undefined {
		return this.tryGetRuleContext(0, Declare_stmt_itemContext);
	}
	public create_function_stmt(): Create_function_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_function_stmtContext);
	}
	public create_procedure_stmt(): Create_procedure_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_procedure_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_package_body_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterPackage_body_item) {
			listener.enterPackage_body_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitPackage_body_item) {
			listener.exitPackage_body_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitPackage_body_item) {
			return visitor.visitPackage_body_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_procedure_stmtContext extends ParserRuleContext {
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public proc_block(): Proc_blockContext {
		return this.getRuleContext(0, Proc_blockContext);
	}
	public T_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PROCEDURE, 0); }
	public T_PROC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PROC, 0); }
	public T_ALTER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ALTER, 0); }
	public T_CREATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CREATE, 0); }
	public T_REPLACE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REPLACE, 0); }
	public create_routine_params(): Create_routine_paramsContext | undefined {
		return this.tryGetRuleContext(0, Create_routine_paramsContext);
	}
	public create_routine_options(): Create_routine_optionsContext | undefined {
		return this.tryGetRuleContext(0, Create_routine_optionsContext);
	}
	public declare_block_inplace(): Declare_block_inplaceContext | undefined {
		return this.tryGetRuleContext(0, Declare_block_inplaceContext);
	}
	public label(): LabelContext | undefined {
		return this.tryGetRuleContext(0, LabelContext);
	}
	public T_SEMICOLON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SEMICOLON, 0); }
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	public T_IS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IS, 0); }
	public T_OR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_procedure_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_procedure_stmt) {
			listener.enterCreate_procedure_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_procedure_stmt) {
			listener.exitCreate_procedure_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_procedure_stmt) {
			return visitor.visitCreate_procedure_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_routine_paramsContext extends ParserRuleContext {
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public create_routine_param_item(): Create_routine_param_itemContext[];
	public create_routine_param_item(i: number): Create_routine_param_itemContext;
	public create_routine_param_item(i?: number): Create_routine_param_itemContext | Create_routine_param_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_routine_param_itemContext);
		} else {
			return this.getRuleContext(i, Create_routine_param_itemContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_routine_params; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_routine_params) {
			listener.enterCreate_routine_params(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_routine_params) {
			listener.exitCreate_routine_params(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_routine_params) {
			return visitor.visitCreate_routine_params(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_routine_param_itemContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public dtype(): DtypeContext {
		return this.getRuleContext(0, DtypeContext);
	}
	public T_IN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IN, 0); }
	public T_OUT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OUT, 0); }
	public T_INOUT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INOUT, 0); }
	public dtype_len(): Dtype_lenContext | undefined {
		return this.tryGetRuleContext(0, Dtype_lenContext);
	}
	public dtype_attr(): Dtype_attrContext[];
	public dtype_attr(i: number): Dtype_attrContext;
	public dtype_attr(i?: number): Dtype_attrContext | Dtype_attrContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Dtype_attrContext);
		} else {
			return this.getRuleContext(i, Dtype_attrContext);
		}
	}
	public dtype_default(): Dtype_defaultContext | undefined {
		return this.tryGetRuleContext(0, Dtype_defaultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_routine_param_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_routine_param_item) {
			listener.enterCreate_routine_param_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_routine_param_item) {
			listener.exitCreate_routine_param_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_routine_param_item) {
			return visitor.visitCreate_routine_param_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_routine_optionsContext extends ParserRuleContext {
	public create_routine_option(): Create_routine_optionContext[];
	public create_routine_option(i: number): Create_routine_optionContext;
	public create_routine_option(i?: number): Create_routine_optionContext | Create_routine_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_routine_optionContext);
		} else {
			return this.getRuleContext(i, Create_routine_optionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_routine_options; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_routine_options) {
			listener.enterCreate_routine_options(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_routine_options) {
			listener.exitCreate_routine_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_routine_options) {
			return visitor.visitCreate_routine_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_routine_optionContext extends ParserRuleContext {
	public T_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LANGUAGE, 0); }
	public T_SQL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SQL, 0); }
	public T_SECURITY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SECURITY, 0); }
	public T_CREATOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CREATOR, 0); }
	public T_DEFINER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFINER, 0); }
	public T_INVOKER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INVOKER, 0); }
	public T_OWNER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OWNER, 0); }
	public T_RESULT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RESULT, 0); }
	public T_SETS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SETS, 0); }
	public L_INT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.L_INT, 0); }
	public T_DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DYNAMIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_routine_option; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_routine_option) {
			listener.enterCreate_routine_option(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_routine_option) {
			listener.exitCreate_routine_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_routine_option) {
			return visitor.visitCreate_routine_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_stmtContext extends ParserRuleContext {
	public T_DROP(): TerminalNode { return this.getToken(HiveSql.T_DROP, 0); }
	public T_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TABLE, 0); }
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public T_IF(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IF, 0); }
	public T_EXISTS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXISTS, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public T_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DATABASE, 0); }
	public T_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_drop_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDrop_stmt) {
			listener.enterDrop_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDrop_stmt) {
			listener.exitDrop_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDrop_stmt) {
			return visitor.visitDrop_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class End_transaction_stmtContext extends ParserRuleContext {
	public T_END(): TerminalNode { return this.getToken(HiveSql.T_END, 0); }
	public T_TRANSACTION(): TerminalNode { return this.getToken(HiveSql.T_TRANSACTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_end_transaction_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterEnd_transaction_stmt) {
			listener.enterEnd_transaction_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitEnd_transaction_stmt) {
			listener.exitEnd_transaction_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitEnd_transaction_stmt) {
			return visitor.visitEnd_transaction_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exec_stmtContext extends ParserRuleContext {
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public T_EXEC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXEC, 0); }
	public T_EXECUTE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXECUTE, 0); }
	public T_IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IMMEDIATE, 0); }
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public expr_func_params(): Expr_func_paramsContext | undefined {
		return this.tryGetRuleContext(0, Expr_func_paramsContext);
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public T_INTO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INTO, 0); }
	public L_ID(): TerminalNode[];
	public L_ID(i: number): TerminalNode;
	public L_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.L_ID);
		} else {
			return this.getToken(HiveSql.L_ID, i);
		}
	}
	public using_clause(): Using_clauseContext | undefined {
		return this.tryGetRuleContext(0, Using_clauseContext);
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_exec_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExec_stmt) {
			listener.enterExec_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExec_stmt) {
			listener.exitExec_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExec_stmt) {
			return visitor.visitExec_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class If_stmtContext extends ParserRuleContext {
	public if_plsql_stmt(): If_plsql_stmtContext | undefined {
		return this.tryGetRuleContext(0, If_plsql_stmtContext);
	}
	public if_tsql_stmt(): If_tsql_stmtContext | undefined {
		return this.tryGetRuleContext(0, If_tsql_stmtContext);
	}
	public if_bteq_stmt(): If_bteq_stmtContext | undefined {
		return this.tryGetRuleContext(0, If_bteq_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_if_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterIf_stmt) {
			listener.enterIf_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitIf_stmt) {
			listener.exitIf_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitIf_stmt) {
			return visitor.visitIf_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class If_plsql_stmtContext extends ParserRuleContext {
	public T_IF(): TerminalNode[];
	public T_IF(i: number): TerminalNode;
	public T_IF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_IF);
		} else {
			return this.getToken(HiveSql.T_IF, i);
		}
	}
	public bool_expr(): Bool_exprContext {
		return this.getRuleContext(0, Bool_exprContext);
	}
	public T_THEN(): TerminalNode { return this.getToken(HiveSql.T_THEN, 0); }
	public block(): BlockContext {
		return this.getRuleContext(0, BlockContext);
	}
	public T_END(): TerminalNode { return this.getToken(HiveSql.T_END, 0); }
	public elseif_block(): Elseif_blockContext[];
	public elseif_block(i: number): Elseif_blockContext;
	public elseif_block(i?: number): Elseif_blockContext | Elseif_blockContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Elseif_blockContext);
		} else {
			return this.getRuleContext(i, Elseif_blockContext);
		}
	}
	public else_block(): Else_blockContext | undefined {
		return this.tryGetRuleContext(0, Else_blockContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_if_plsql_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterIf_plsql_stmt) {
			listener.enterIf_plsql_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitIf_plsql_stmt) {
			listener.exitIf_plsql_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitIf_plsql_stmt) {
			return visitor.visitIf_plsql_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class If_tsql_stmtContext extends ParserRuleContext {
	public T_IF(): TerminalNode { return this.getToken(HiveSql.T_IF, 0); }
	public bool_expr(): Bool_exprContext {
		return this.getRuleContext(0, Bool_exprContext);
	}
	public single_block_stmt(): Single_block_stmtContext[];
	public single_block_stmt(i: number): Single_block_stmtContext;
	public single_block_stmt(i?: number): Single_block_stmtContext | Single_block_stmtContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Single_block_stmtContext);
		} else {
			return this.getRuleContext(i, Single_block_stmtContext);
		}
	}
	public T_ELSE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ELSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_if_tsql_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterIf_tsql_stmt) {
			listener.enterIf_tsql_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitIf_tsql_stmt) {
			listener.exitIf_tsql_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitIf_tsql_stmt) {
			return visitor.visitIf_tsql_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class If_bteq_stmtContext extends ParserRuleContext {
	public T_DOT(): TerminalNode { return this.getToken(HiveSql.T_DOT, 0); }
	public T_IF(): TerminalNode { return this.getToken(HiveSql.T_IF, 0); }
	public bool_expr(): Bool_exprContext {
		return this.getRuleContext(0, Bool_exprContext);
	}
	public T_THEN(): TerminalNode { return this.getToken(HiveSql.T_THEN, 0); }
	public single_block_stmt(): Single_block_stmtContext {
		return this.getRuleContext(0, Single_block_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_if_bteq_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterIf_bteq_stmt) {
			listener.enterIf_bteq_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitIf_bteq_stmt) {
			listener.exitIf_bteq_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitIf_bteq_stmt) {
			return visitor.visitIf_bteq_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Elseif_blockContext extends ParserRuleContext {
	public bool_expr(): Bool_exprContext {
		return this.getRuleContext(0, Bool_exprContext);
	}
	public T_THEN(): TerminalNode { return this.getToken(HiveSql.T_THEN, 0); }
	public block(): BlockContext {
		return this.getRuleContext(0, BlockContext);
	}
	public T_ELSIF(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ELSIF, 0); }
	public T_ELSEIF(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ELSEIF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_elseif_block; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterElseif_block) {
			listener.enterElseif_block(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitElseif_block) {
			listener.exitElseif_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitElseif_block) {
			return visitor.visitElseif_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Else_blockContext extends ParserRuleContext {
	public T_ELSE(): TerminalNode { return this.getToken(HiveSql.T_ELSE, 0); }
	public block(): BlockContext {
		return this.getRuleContext(0, BlockContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_else_block; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterElse_block) {
			listener.enterElse_block(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitElse_block) {
			listener.exitElse_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitElse_block) {
			return visitor.visitElse_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Include_stmtContext extends ParserRuleContext {
	public T_INCLUDE(): TerminalNode { return this.getToken(HiveSql.T_INCLUDE, 0); }
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_include_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterInclude_stmt) {
			listener.enterInclude_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitInclude_stmt) {
			listener.exitInclude_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitInclude_stmt) {
			return visitor.visitInclude_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_stmtContext extends ParserRuleContext {
	public T_INSERT(): TerminalNode { return this.getToken(HiveSql.T_INSERT, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public T_OVERWRITE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OVERWRITE, 0); }
	public T_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TABLE, 0); }
	public T_INTO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INTO, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public insert_stmt_rows(): Insert_stmt_rowsContext | undefined {
		return this.tryGetRuleContext(0, Insert_stmt_rowsContext);
	}
	public insert_stmt_cols(): Insert_stmt_colsContext | undefined {
		return this.tryGetRuleContext(0, Insert_stmt_colsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_insert_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterInsert_stmt) {
			listener.enterInsert_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitInsert_stmt) {
			listener.exitInsert_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitInsert_stmt) {
			return visitor.visitInsert_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_stmt_colsContext extends ParserRuleContext {
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_insert_stmt_cols; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterInsert_stmt_cols) {
			listener.enterInsert_stmt_cols(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitInsert_stmt_cols) {
			listener.exitInsert_stmt_cols(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitInsert_stmt_cols) {
			return visitor.visitInsert_stmt_cols(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_stmt_rowsContext extends ParserRuleContext {
	public T_VALUES(): TerminalNode { return this.getToken(HiveSql.T_VALUES, 0); }
	public insert_stmt_row(): Insert_stmt_rowContext[];
	public insert_stmt_row(i: number): Insert_stmt_rowContext;
	public insert_stmt_row(i?: number): Insert_stmt_rowContext | Insert_stmt_rowContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Insert_stmt_rowContext);
		} else {
			return this.getRuleContext(i, Insert_stmt_rowContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_insert_stmt_rows; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterInsert_stmt_rows) {
			listener.enterInsert_stmt_rows(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitInsert_stmt_rows) {
			listener.exitInsert_stmt_rows(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitInsert_stmt_rows) {
			return visitor.visitInsert_stmt_rows(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_stmt_rowContext extends ParserRuleContext {
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_insert_stmt_row; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterInsert_stmt_row) {
			listener.enterInsert_stmt_row(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitInsert_stmt_row) {
			listener.exitInsert_stmt_row(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitInsert_stmt_row) {
			return visitor.visitInsert_stmt_row(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_directory_stmtContext extends ParserRuleContext {
	public T_INSERT(): TerminalNode { return this.getToken(HiveSql.T_INSERT, 0); }
	public T_OVERWRITE(): TerminalNode { return this.getToken(HiveSql.T_OVERWRITE, 0); }
	public T_DIRECTORY(): TerminalNode { return this.getToken(HiveSql.T_DIRECTORY, 0); }
	public expr_file(): Expr_fileContext {
		return this.getRuleContext(0, Expr_fileContext);
	}
	public expr_select(): Expr_selectContext {
		return this.getRuleContext(0, Expr_selectContext);
	}
	public T_LOCAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_insert_directory_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterInsert_directory_stmt) {
			listener.enterInsert_directory_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitInsert_directory_stmt) {
			listener.exitInsert_directory_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitInsert_directory_stmt) {
			return visitor.visitInsert_directory_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exit_stmtContext extends ParserRuleContext {
	public T_EXIT(): TerminalNode { return this.getToken(HiveSql.T_EXIT, 0); }
	public L_ID(): TerminalNode | undefined { return this.tryGetToken(HiveSql.L_ID, 0); }
	public T_WHEN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_WHEN, 0); }
	public bool_expr(): Bool_exprContext | undefined {
		return this.tryGetRuleContext(0, Bool_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_exit_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExit_stmt) {
			listener.enterExit_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExit_stmt) {
			listener.exitExit_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExit_stmt) {
			return visitor.visitExit_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Get_diag_stmtContext extends ParserRuleContext {
	public T_GET(): TerminalNode { return this.getToken(HiveSql.T_GET, 0); }
	public T_DIAGNOSTICS(): TerminalNode { return this.getToken(HiveSql.T_DIAGNOSTICS, 0); }
	public get_diag_stmt_item(): Get_diag_stmt_itemContext {
		return this.getRuleContext(0, Get_diag_stmt_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_get_diag_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterGet_diag_stmt) {
			listener.enterGet_diag_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitGet_diag_stmt) {
			listener.exitGet_diag_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitGet_diag_stmt) {
			return visitor.visitGet_diag_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Get_diag_stmt_itemContext extends ParserRuleContext {
	public get_diag_stmt_exception_item(): Get_diag_stmt_exception_itemContext | undefined {
		return this.tryGetRuleContext(0, Get_diag_stmt_exception_itemContext);
	}
	public get_diag_stmt_rowcount_item(): Get_diag_stmt_rowcount_itemContext | undefined {
		return this.tryGetRuleContext(0, Get_diag_stmt_rowcount_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_get_diag_stmt_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterGet_diag_stmt_item) {
			listener.enterGet_diag_stmt_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitGet_diag_stmt_item) {
			listener.exitGet_diag_stmt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitGet_diag_stmt_item) {
			return visitor.visitGet_diag_stmt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Get_diag_stmt_exception_itemContext extends ParserRuleContext {
	public T_EXCEPTION(): TerminalNode { return this.getToken(HiveSql.T_EXCEPTION, 0); }
	public L_INT(): TerminalNode { return this.getToken(HiveSql.L_INT, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_EQUAL(): TerminalNode { return this.getToken(HiveSql.T_EQUAL, 0); }
	public T_MESSAGE_TEXT(): TerminalNode { return this.getToken(HiveSql.T_MESSAGE_TEXT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_get_diag_stmt_exception_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterGet_diag_stmt_exception_item) {
			listener.enterGet_diag_stmt_exception_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitGet_diag_stmt_exception_item) {
			listener.exitGet_diag_stmt_exception_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitGet_diag_stmt_exception_item) {
			return visitor.visitGet_diag_stmt_exception_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Get_diag_stmt_rowcount_itemContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_EQUAL(): TerminalNode { return this.getToken(HiveSql.T_EQUAL, 0); }
	public T_ROW_COUNT(): TerminalNode { return this.getToken(HiveSql.T_ROW_COUNT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_get_diag_stmt_rowcount_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterGet_diag_stmt_rowcount_item) {
			listener.enterGet_diag_stmt_rowcount_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitGet_diag_stmt_rowcount_item) {
			listener.exitGet_diag_stmt_rowcount_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitGet_diag_stmt_rowcount_item) {
			return visitor.visitGet_diag_stmt_rowcount_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Grant_stmtContext extends ParserRuleContext {
	public T_GRANT(): TerminalNode { return this.getToken(HiveSql.T_GRANT, 0); }
	public grant_stmt_item(): Grant_stmt_itemContext[];
	public grant_stmt_item(i: number): Grant_stmt_itemContext;
	public grant_stmt_item(i?: number): Grant_stmt_itemContext | Grant_stmt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Grant_stmt_itemContext);
		} else {
			return this.getRuleContext(i, Grant_stmt_itemContext);
		}
	}
	public T_TO(): TerminalNode { return this.getToken(HiveSql.T_TO, 0); }
	public T_ROLE(): TerminalNode { return this.getToken(HiveSql.T_ROLE, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_grant_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterGrant_stmt) {
			listener.enterGrant_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitGrant_stmt) {
			listener.exitGrant_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitGrant_stmt) {
			return visitor.visitGrant_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Grant_stmt_itemContext extends ParserRuleContext {
	public T_EXECUTE(): TerminalNode { return this.getToken(HiveSql.T_EXECUTE, 0); }
	public T_ON(): TerminalNode { return this.getToken(HiveSql.T_ON, 0); }
	public T_PROCEDURE(): TerminalNode { return this.getToken(HiveSql.T_PROCEDURE, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_grant_stmt_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterGrant_stmt_item) {
			listener.enterGrant_stmt_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitGrant_stmt_item) {
			listener.exitGrant_stmt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitGrant_stmt_item) {
			return visitor.visitGrant_stmt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Leave_stmtContext extends ParserRuleContext {
	public T_LEAVE(): TerminalNode { return this.getToken(HiveSql.T_LEAVE, 0); }
	public L_ID(): TerminalNode | undefined { return this.tryGetToken(HiveSql.L_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_leave_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterLeave_stmt) {
			listener.enterLeave_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitLeave_stmt) {
			listener.exitLeave_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitLeave_stmt) {
			return visitor.visitLeave_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Map_object_stmtContext extends ParserRuleContext {
	public T_MAP(): TerminalNode { return this.getToken(HiveSql.T_MAP, 0); }
	public T_OBJECT(): TerminalNode { return this.getToken(HiveSql.T_OBJECT, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_TO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TO, 0); }
	public T_AT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_map_object_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterMap_object_stmt) {
			listener.enterMap_object_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitMap_object_stmt) {
			listener.exitMap_object_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitMap_object_stmt) {
			return visitor.visitMap_object_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Open_stmtContext extends ParserRuleContext {
	public T_OPEN(): TerminalNode { return this.getToken(HiveSql.T_OPEN, 0); }
	public L_ID(): TerminalNode { return this.getToken(HiveSql.L_ID, 0); }
	public T_FOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FOR, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_open_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterOpen_stmt) {
			listener.enterOpen_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitOpen_stmt) {
			listener.exitOpen_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitOpen_stmt) {
			return visitor.visitOpen_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fetch_stmtContext extends ParserRuleContext {
	public T_FETCH(): TerminalNode { return this.getToken(HiveSql.T_FETCH, 0); }
	public L_ID(): TerminalNode[];
	public L_ID(i: number): TerminalNode;
	public L_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.L_ID);
		} else {
			return this.getToken(HiveSql.L_ID, i);
		}
	}
	public T_INTO(): TerminalNode { return this.getToken(HiveSql.T_INTO, 0); }
	public T_FROM(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FROM, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_fetch_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFetch_stmt) {
			listener.enterFetch_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFetch_stmt) {
			listener.exitFetch_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFetch_stmt) {
			return visitor.visitFetch_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Collect_stats_stmtContext extends ParserRuleContext {
	public T_COLLECT(): TerminalNode { return this.getToken(HiveSql.T_COLLECT, 0); }
	public T_ON(): TerminalNode { return this.getToken(HiveSql.T_ON, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public T_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STATISTICS, 0); }
	public T_STATS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STATS, 0); }
	public collect_stats_clause(): Collect_stats_clauseContext | undefined {
		return this.tryGetRuleContext(0, Collect_stats_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_collect_stats_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCollect_stats_stmt) {
			listener.enterCollect_stats_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCollect_stats_stmt) {
			listener.exitCollect_stats_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCollect_stats_stmt) {
			return visitor.visitCollect_stats_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Collect_stats_clauseContext extends ParserRuleContext {
	public T_COLUMN(): TerminalNode { return this.getToken(HiveSql.T_COLUMN, 0); }
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_collect_stats_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCollect_stats_clause) {
			listener.enterCollect_stats_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCollect_stats_clause) {
			listener.exitCollect_stats_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCollect_stats_clause) {
			return visitor.visitCollect_stats_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Close_stmtContext extends ParserRuleContext {
	public T_CLOSE(): TerminalNode { return this.getToken(HiveSql.T_CLOSE, 0); }
	public L_ID(): TerminalNode { return this.getToken(HiveSql.L_ID, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_close_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterClose_stmt) {
			listener.enterClose_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitClose_stmt) {
			listener.exitClose_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitClose_stmt) {
			return visitor.visitClose_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cmp_stmtContext extends ParserRuleContext {
	public T_CMP(): TerminalNode { return this.getToken(HiveSql.T_CMP, 0); }
	public cmp_source(): Cmp_sourceContext[];
	public cmp_source(i: number): Cmp_sourceContext;
	public cmp_source(i?: number): Cmp_sourceContext | Cmp_sourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Cmp_sourceContext);
		} else {
			return this.getRuleContext(i, Cmp_sourceContext);
		}
	}
	public T_COMMA(): TerminalNode { return this.getToken(HiveSql.T_COMMA, 0); }
	public T_ROW_COUNT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ROW_COUNT, 0); }
	public T_SUM(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SUM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_cmp_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCmp_stmt) {
			listener.enterCmp_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCmp_stmt) {
			listener.exitCmp_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCmp_stmt) {
			return visitor.visitCmp_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cmp_sourceContext extends ParserRuleContext {
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public T_AT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AT, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_cmp_source; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCmp_source) {
			listener.enterCmp_source(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCmp_source) {
			listener.exitCmp_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCmp_source) {
			return visitor.visitCmp_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_from_local_stmtContext extends ParserRuleContext {
	public T_COPY(): TerminalNode { return this.getToken(HiveSql.T_COPY, 0); }
	public T_FROM(): TerminalNode { return this.getToken(HiveSql.T_FROM, 0); }
	public T_LOCAL(): TerminalNode { return this.getToken(HiveSql.T_LOCAL, 0); }
	public copy_source(): Copy_sourceContext[];
	public copy_source(i: number): Copy_sourceContext;
	public copy_source(i?: number): Copy_sourceContext | Copy_sourceContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Copy_sourceContext);
		} else {
			return this.getRuleContext(i, Copy_sourceContext);
		}
	}
	public T_TO(): TerminalNode { return this.getToken(HiveSql.T_TO, 0); }
	public copy_target(): Copy_targetContext {
		return this.getRuleContext(0, Copy_targetContext);
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public copy_file_option(): Copy_file_optionContext[];
	public copy_file_option(i: number): Copy_file_optionContext;
	public copy_file_option(i?: number): Copy_file_optionContext | Copy_file_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Copy_file_optionContext);
		} else {
			return this.getRuleContext(i, Copy_file_optionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_copy_from_local_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCopy_from_local_stmt) {
			listener.enterCopy_from_local_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCopy_from_local_stmt) {
			listener.exitCopy_from_local_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCopy_from_local_stmt) {
			return visitor.visitCopy_from_local_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_stmtContext extends ParserRuleContext {
	public T_COPY(): TerminalNode { return this.getToken(HiveSql.T_COPY, 0); }
	public T_TO(): TerminalNode { return this.getToken(HiveSql.T_TO, 0); }
	public copy_target(): Copy_targetContext {
		return this.getRuleContext(0, Copy_targetContext);
	}
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public T_HDFS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_HDFS, 0); }
	public copy_option(): Copy_optionContext[];
	public copy_option(i: number): Copy_optionContext;
	public copy_option(i?: number): Copy_optionContext | Copy_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Copy_optionContext);
		} else {
			return this.getRuleContext(i, Copy_optionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_copy_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCopy_stmt) {
			listener.enterCopy_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCopy_stmt) {
			listener.exitCopy_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCopy_stmt) {
			return visitor.visitCopy_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_sourceContext extends ParserRuleContext {
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_copy_source; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCopy_source) {
			listener.enterCopy_source(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCopy_source) {
			listener.exitCopy_source(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCopy_source) {
			return visitor.visitCopy_source(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_targetContext extends ParserRuleContext {
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_copy_target; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCopy_target) {
			listener.enterCopy_target(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCopy_target) {
			listener.exitCopy_target(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCopy_target) {
			return visitor.visitCopy_target(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_optionContext extends ParserRuleContext {
	public T_AT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AT, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public T_BATCHSIZE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BATCHSIZE, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public T_DELIMITER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DELIMITER, 0); }
	public T_SQLINSERT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SQLINSERT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_copy_option; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCopy_option) {
			listener.enterCopy_option(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCopy_option) {
			listener.exitCopy_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCopy_option) {
			return visitor.visitCopy_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_file_optionContext extends ParserRuleContext {
	public T_DELETE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DELETE, 0); }
	public T_IGNORE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IGNORE, 0); }
	public T_OVERWRITE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OVERWRITE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_copy_file_option; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCopy_file_option) {
			listener.enterCopy_file_option(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCopy_file_option) {
			listener.exitCopy_file_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCopy_file_option) {
			return visitor.visitCopy_file_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Commit_stmtContext extends ParserRuleContext {
	public T_COMMIT(): TerminalNode { return this.getToken(HiveSql.T_COMMIT, 0); }
	public T_WORK(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_WORK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_commit_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCommit_stmt) {
			listener.enterCommit_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCommit_stmt) {
			listener.exitCommit_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCommit_stmt) {
			return visitor.visitCommit_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_index_stmtContext extends ParserRuleContext {
	public T_CREATE(): TerminalNode { return this.getToken(HiveSql.T_CREATE, 0); }
	public T_INDEX(): TerminalNode { return this.getToken(HiveSql.T_INDEX, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_ON(): TerminalNode { return this.getToken(HiveSql.T_ON, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public create_index_col(): Create_index_colContext[];
	public create_index_col(i: number): Create_index_colContext;
	public create_index_col(i?: number): Create_index_colContext | Create_index_colContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_index_colContext);
		} else {
			return this.getRuleContext(i, Create_index_colContext);
		}
	}
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public T_UNIQUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_UNIQUE, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_index_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_index_stmt) {
			listener.enterCreate_index_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_index_stmt) {
			listener.exitCreate_index_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_index_stmt) {
			return visitor.visitCreate_index_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_index_colContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_ASC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ASC, 0); }
	public T_DESC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_create_index_col; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCreate_index_col) {
			listener.enterCreate_index_col(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCreate_index_col) {
			listener.exitCreate_index_col(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCreate_index_col) {
			return visitor.visitCreate_index_col(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_storage_clauseContext extends ParserRuleContext {
	public index_mssql_storage_clause(): Index_mssql_storage_clauseContext {
		return this.getRuleContext(0, Index_mssql_storage_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_index_storage_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterIndex_storage_clause) {
			listener.enterIndex_storage_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitIndex_storage_clause) {
			listener.exitIndex_storage_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitIndex_storage_clause) {
			return visitor.visitIndex_storage_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_mssql_storage_clauseContext extends ParserRuleContext {
	public T_WITH(): TerminalNode { return this.getToken(HiveSql.T_WITH, 0); }
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_EQUAL(): TerminalNode[];
	public T_EQUAL(i: number): TerminalNode;
	public T_EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_EQUAL);
		} else {
			return this.getToken(HiveSql.T_EQUAL, i);
		}
	}
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public create_table_options_mssql_item(): Create_table_options_mssql_itemContext[];
	public create_table_options_mssql_item(i: number): Create_table_options_mssql_itemContext;
	public create_table_options_mssql_item(i?: number): Create_table_options_mssql_itemContext | Create_table_options_mssql_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_table_options_mssql_itemContext);
		} else {
			return this.getRuleContext(i, Create_table_options_mssql_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_index_mssql_storage_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterIndex_mssql_storage_clause) {
			listener.enterIndex_mssql_storage_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitIndex_mssql_storage_clause) {
			listener.exitIndex_mssql_storage_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitIndex_mssql_storage_clause) {
			return visitor.visitIndex_mssql_storage_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Print_stmtContext extends ParserRuleContext {
	public T_PRINT(): TerminalNode { return this.getToken(HiveSql.T_PRINT, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_print_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterPrint_stmt) {
			listener.enterPrint_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitPrint_stmt) {
			listener.exitPrint_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitPrint_stmt) {
			return visitor.visitPrint_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Quit_stmtContext extends ParserRuleContext {
	public T_QUIT(): TerminalNode { return this.getToken(HiveSql.T_QUIT, 0); }
	public T_DOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DOT, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_quit_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterQuit_stmt) {
			listener.enterQuit_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitQuit_stmt) {
			listener.exitQuit_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitQuit_stmt) {
			return visitor.visitQuit_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Raise_stmtContext extends ParserRuleContext {
	public T_RAISE(): TerminalNode { return this.getToken(HiveSql.T_RAISE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_raise_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterRaise_stmt) {
			listener.enterRaise_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitRaise_stmt) {
			listener.exitRaise_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitRaise_stmt) {
			return visitor.visitRaise_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Resignal_stmtContext extends ParserRuleContext {
	public T_RESIGNAL(): TerminalNode { return this.getToken(HiveSql.T_RESIGNAL, 0); }
	public T_SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SQLSTATE, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_VALUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VALUE, 0); }
	public T_SET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SET, 0); }
	public T_MESSAGE_TEXT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MESSAGE_TEXT, 0); }
	public T_EQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EQUAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_resignal_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterResignal_stmt) {
			listener.enterResignal_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitResignal_stmt) {
			listener.exitResignal_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitResignal_stmt) {
			return visitor.visitResignal_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Return_stmtContext extends ParserRuleContext {
	public T_RETURN(): TerminalNode { return this.getToken(HiveSql.T_RETURN, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_return_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterReturn_stmt) {
			listener.enterReturn_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitReturn_stmt) {
			listener.exitReturn_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitReturn_stmt) {
			return visitor.visitReturn_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rollback_stmtContext extends ParserRuleContext {
	public T_ROLLBACK(): TerminalNode { return this.getToken(HiveSql.T_ROLLBACK, 0); }
	public T_WORK(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_WORK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_rollback_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterRollback_stmt) {
			listener.enterRollback_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitRollback_stmt) {
			listener.exitRollback_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitRollback_stmt) {
			return visitor.visitRollback_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_session_optionContext extends ParserRuleContext {
	public set_current_schema_option(): Set_current_schema_optionContext | undefined {
		return this.tryGetRuleContext(0, Set_current_schema_optionContext);
	}
	public set_mssql_session_option(): Set_mssql_session_optionContext | undefined {
		return this.tryGetRuleContext(0, Set_mssql_session_optionContext);
	}
	public set_teradata_session_option(): Set_teradata_session_optionContext | undefined {
		return this.tryGetRuleContext(0, Set_teradata_session_optionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_set_session_option; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSet_session_option) {
			listener.enterSet_session_option(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSet_session_option) {
			listener.exitSet_session_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSet_session_option) {
			return visitor.visitSet_session_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_current_schema_optionContext extends ParserRuleContext {
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public T_CURRENT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURRENT_SCHEMA, 0); }
	public T_EQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EQUAL, 0); }
	public T_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SCHEMA, 0); }
	public T_CURRENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURRENT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_set_current_schema_option; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSet_current_schema_option) {
			listener.enterSet_current_schema_option(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSet_current_schema_option) {
			listener.exitSet_current_schema_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSet_current_schema_option) {
			return visitor.visitSet_current_schema_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_mssql_session_optionContext extends ParserRuleContext {
	public T_ANSI_NULLS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ANSI_NULLS, 0); }
	public T_ANSI_PADDING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ANSI_PADDING, 0); }
	public T_NOCOUNT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOCOUNT, 0); }
	public T_QUOTED_IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_QUOTED_IDENTIFIER, 0); }
	public T_XACT_ABORT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_XACT_ABORT, 0); }
	public T_ON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ON, 0); }
	public T_OFF(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OFF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_set_mssql_session_option; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSet_mssql_session_option) {
			listener.enterSet_mssql_session_option(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSet_mssql_session_option) {
			listener.exitSet_mssql_session_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSet_mssql_session_option) {
			return visitor.visitSet_mssql_session_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_teradata_session_optionContext extends ParserRuleContext {
	public T_QUERY_BAND(): TerminalNode { return this.getToken(HiveSql.T_QUERY_BAND, 0); }
	public T_EQUAL(): TerminalNode { return this.getToken(HiveSql.T_EQUAL, 0); }
	public T_FOR(): TerminalNode { return this.getToken(HiveSql.T_FOR, 0); }
	public T_TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TRANSACTION, 0); }
	public T_SESSION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SESSION, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public T_NONE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NONE, 0); }
	public T_UPDATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_UPDATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_set_teradata_session_option; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSet_teradata_session_option) {
			listener.enterSet_teradata_session_option(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSet_teradata_session_option) {
			listener.exitSet_teradata_session_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSet_teradata_session_option) {
			return visitor.visitSet_teradata_session_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Signal_stmtContext extends ParserRuleContext {
	public T_SIGNAL(): TerminalNode { return this.getToken(HiveSql.T_SIGNAL, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_signal_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSignal_stmt) {
			listener.enterSignal_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSignal_stmt) {
			listener.exitSignal_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSignal_stmt) {
			return visitor.visitSignal_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Summary_stmtContext extends ParserRuleContext {
	public T_SUMMARY(): TerminalNode { return this.getToken(HiveSql.T_SUMMARY, 0); }
	public T_FOR(): TerminalNode { return this.getToken(HiveSql.T_FOR, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public T_TOP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TOP, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public T_LIMIT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LIMIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_summary_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSummary_stmt) {
			listener.enterSummary_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSummary_stmt) {
			listener.exitSummary_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSummary_stmt) {
			return visitor.visitSummary_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Truncate_stmtContext extends ParserRuleContext {
	public T_TRUNCATE(): TerminalNode { return this.getToken(HiveSql.T_TRUNCATE, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public T_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_truncate_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterTruncate_stmt) {
			listener.enterTruncate_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitTruncate_stmt) {
			listener.exitTruncate_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitTruncate_stmt) {
			return visitor.visitTruncate_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Use_stmtContext extends ParserRuleContext {
	public T_USE(): TerminalNode { return this.getToken(HiveSql.T_USE, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_use_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterUse_stmt) {
			listener.enterUse_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitUse_stmt) {
			listener.exitUse_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitUse_stmt) {
			return visitor.visitUse_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Values_into_stmtContext extends ParserRuleContext {
	public T_VALUES(): TerminalNode { return this.getToken(HiveSql.T_VALUES, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_INTO(): TerminalNode { return this.getToken(HiveSql.T_INTO, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_OPEN_P(): TerminalNode[];
	public T_OPEN_P(i: number): TerminalNode;
	public T_OPEN_P(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_OPEN_P);
		} else {
			return this.getToken(HiveSql.T_OPEN_P, i);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public T_CLOSE_P(): TerminalNode[];
	public T_CLOSE_P(i: number): TerminalNode;
	public T_CLOSE_P(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_CLOSE_P);
		} else {
			return this.getToken(HiveSql.T_CLOSE_P, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_values_into_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterValues_into_stmt) {
			listener.enterValues_into_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitValues_into_stmt) {
			listener.exitValues_into_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitValues_into_stmt) {
			return visitor.visitValues_into_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class While_stmtContext extends ParserRuleContext {
	public T_WHILE(): TerminalNode[];
	public T_WHILE(i: number): TerminalNode;
	public T_WHILE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_WHILE);
		} else {
			return this.getToken(HiveSql.T_WHILE, i);
		}
	}
	public bool_expr(): Bool_exprContext {
		return this.getRuleContext(0, Bool_exprContext);
	}
	public block(): BlockContext {
		return this.getRuleContext(0, BlockContext);
	}
	public T_END(): TerminalNode { return this.getToken(HiveSql.T_END, 0); }
	public T_DO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DO, 0); }
	public T_LOOP(): TerminalNode[];
	public T_LOOP(i: number): TerminalNode;
	public T_LOOP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_LOOP);
		} else {
			return this.getToken(HiveSql.T_LOOP, i);
		}
	}
	public T_THEN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_THEN, 0); }
	public T_BEGIN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BEGIN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_while_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterWhile_stmt) {
			listener.enterWhile_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitWhile_stmt) {
			listener.exitWhile_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitWhile_stmt) {
			return visitor.visitWhile_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class For_cursor_stmtContext extends ParserRuleContext {
	public T_FOR(): TerminalNode { return this.getToken(HiveSql.T_FOR, 0); }
	public L_ID(): TerminalNode { return this.getToken(HiveSql.L_ID, 0); }
	public T_IN(): TerminalNode { return this.getToken(HiveSql.T_IN, 0); }
	public select_stmt(): Select_stmtContext {
		return this.getRuleContext(0, Select_stmtContext);
	}
	public T_LOOP(): TerminalNode[];
	public T_LOOP(i: number): TerminalNode;
	public T_LOOP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_LOOP);
		} else {
			return this.getToken(HiveSql.T_LOOP, i);
		}
	}
	public block(): BlockContext {
		return this.getRuleContext(0, BlockContext);
	}
	public T_END(): TerminalNode { return this.getToken(HiveSql.T_END, 0); }
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_for_cursor_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFor_cursor_stmt) {
			listener.enterFor_cursor_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFor_cursor_stmt) {
			listener.exitFor_cursor_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFor_cursor_stmt) {
			return visitor.visitFor_cursor_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class For_range_stmtContext extends ParserRuleContext {
	public T_FOR(): TerminalNode { return this.getToken(HiveSql.T_FOR, 0); }
	public L_ID(): TerminalNode { return this.getToken(HiveSql.L_ID, 0); }
	public T_IN(): TerminalNode { return this.getToken(HiveSql.T_IN, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_DOT2(): TerminalNode { return this.getToken(HiveSql.T_DOT2, 0); }
	public T_LOOP(): TerminalNode[];
	public T_LOOP(i: number): TerminalNode;
	public T_LOOP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_LOOP);
		} else {
			return this.getToken(HiveSql.T_LOOP, i);
		}
	}
	public block(): BlockContext {
		return this.getRuleContext(0, BlockContext);
	}
	public T_END(): TerminalNode { return this.getToken(HiveSql.T_END, 0); }
	public T_REVERSE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REVERSE, 0); }
	public T_BY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BY, 0); }
	public T_STEP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STEP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_for_range_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFor_range_stmt) {
			listener.enterFor_range_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFor_range_stmt) {
			listener.exitFor_range_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFor_range_stmt) {
			return visitor.visitFor_range_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelContext extends ParserRuleContext {
	public L_LABEL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.L_LABEL, 0); }
	public T_LESS(): TerminalNode[];
	public T_LESS(i: number): TerminalNode;
	public T_LESS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_LESS);
		} else {
			return this.getToken(HiveSql.T_LESS, i);
		}
	}
	public L_ID(): TerminalNode | undefined { return this.tryGetToken(HiveSql.L_ID, 0); }
	public T_GREATER(): TerminalNode[];
	public T_GREATER(i: number): TerminalNode;
	public T_GREATER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_GREATER);
		} else {
			return this.getToken(HiveSql.T_GREATER, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_label; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterLabel) {
			listener.enterLabel(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitLabel) {
			listener.exitLabel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitLabel) {
			return visitor.visitLabel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Using_clauseContext extends ParserRuleContext {
	public T_USING(): TerminalNode { return this.getToken(HiveSql.T_USING, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_using_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterUsing_clause) {
			listener.enterUsing_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitUsing_clause) {
			listener.exitUsing_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitUsing_clause) {
			return visitor.visitUsing_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_stmtContext extends ParserRuleContext {
	public fullselect_stmt(): Fullselect_stmtContext {
		return this.getRuleContext(0, Fullselect_stmtContext);
	}
	public cte_select_stmt(): Cte_select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Cte_select_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_select_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSelect_stmt) {
			listener.enterSelect_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSelect_stmt) {
			listener.exitSelect_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSelect_stmt) {
			return visitor.visitSelect_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cte_select_stmtContext extends ParserRuleContext {
	public T_WITH(): TerminalNode { return this.getToken(HiveSql.T_WITH, 0); }
	public cte_select_stmt_item(): Cte_select_stmt_itemContext[];
	public cte_select_stmt_item(i: number): Cte_select_stmt_itemContext;
	public cte_select_stmt_item(i?: number): Cte_select_stmt_itemContext | Cte_select_stmt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Cte_select_stmt_itemContext);
		} else {
			return this.getRuleContext(i, Cte_select_stmt_itemContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_cte_select_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCte_select_stmt) {
			listener.enterCte_select_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCte_select_stmt) {
			listener.exitCte_select_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCte_select_stmt) {
			return visitor.visitCte_select_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cte_select_stmt_itemContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_AS(): TerminalNode { return this.getToken(HiveSql.T_AS, 0); }
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public fullselect_stmt(): Fullselect_stmtContext {
		return this.getRuleContext(0, Fullselect_stmtContext);
	}
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public cte_select_cols(): Cte_select_colsContext | undefined {
		return this.tryGetRuleContext(0, Cte_select_colsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_cte_select_stmt_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCte_select_stmt_item) {
			listener.enterCte_select_stmt_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCte_select_stmt_item) {
			listener.exitCte_select_stmt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCte_select_stmt_item) {
			return visitor.visitCte_select_stmt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cte_select_colsContext extends ParserRuleContext {
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_cte_select_cols; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterCte_select_cols) {
			listener.enterCte_select_cols(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitCte_select_cols) {
			listener.exitCte_select_cols(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitCte_select_cols) {
			return visitor.visitCte_select_cols(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fullselect_stmtContext extends ParserRuleContext {
	public fullselect_stmt_item(): Fullselect_stmt_itemContext[];
	public fullselect_stmt_item(i: number): Fullselect_stmt_itemContext;
	public fullselect_stmt_item(i?: number): Fullselect_stmt_itemContext | Fullselect_stmt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Fullselect_stmt_itemContext);
		} else {
			return this.getRuleContext(i, Fullselect_stmt_itemContext);
		}
	}
	public fullselect_set_clause(): Fullselect_set_clauseContext[];
	public fullselect_set_clause(i: number): Fullselect_set_clauseContext;
	public fullselect_set_clause(i?: number): Fullselect_set_clauseContext | Fullselect_set_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Fullselect_set_clauseContext);
		} else {
			return this.getRuleContext(i, Fullselect_set_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_fullselect_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFullselect_stmt) {
			listener.enterFullselect_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFullselect_stmt) {
			listener.exitFullselect_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFullselect_stmt) {
			return visitor.visitFullselect_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fullselect_stmt_itemContext extends ParserRuleContext {
	public subselect_stmt(): Subselect_stmtContext | undefined {
		return this.tryGetRuleContext(0, Subselect_stmtContext);
	}
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public fullselect_stmt(): Fullselect_stmtContext | undefined {
		return this.tryGetRuleContext(0, Fullselect_stmtContext);
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_fullselect_stmt_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFullselect_stmt_item) {
			listener.enterFullselect_stmt_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFullselect_stmt_item) {
			listener.exitFullselect_stmt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFullselect_stmt_item) {
			return visitor.visitFullselect_stmt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fullselect_set_clauseContext extends ParserRuleContext {
	public T_UNION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_UNION, 0); }
	public T_ALL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ALL, 0); }
	public T_EXCEPT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXCEPT, 0); }
	public T_INTERSECT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INTERSECT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_fullselect_set_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFullselect_set_clause) {
			listener.enterFullselect_set_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFullselect_set_clause) {
			listener.exitFullselect_set_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFullselect_set_clause) {
			return visitor.visitFullselect_set_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Subselect_stmtContext extends ParserRuleContext {
	public select_list(): Select_listContext {
		return this.getRuleContext(0, Select_listContext);
	}
	public T_SELECT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SELECT, 0); }
	public T_SEL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SEL, 0); }
	public into_clause(): Into_clauseContext | undefined {
		return this.tryGetRuleContext(0, Into_clauseContext);
	}
	public from_clause(): From_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_clauseContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public group_by_clause(): Group_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Group_by_clauseContext);
	}
	public having_clause(): Having_clauseContext | undefined {
		return this.tryGetRuleContext(0, Having_clauseContext);
	}
	public qualify_clause(): Qualify_clauseContext | undefined {
		return this.tryGetRuleContext(0, Qualify_clauseContext);
	}
	public order_by_clause(): Order_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Order_by_clauseContext);
	}
	public select_options(): Select_optionsContext | undefined {
		return this.tryGetRuleContext(0, Select_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_subselect_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSubselect_stmt) {
			listener.enterSubselect_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSubselect_stmt) {
			listener.exitSubselect_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSubselect_stmt) {
			return visitor.visitSubselect_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_listContext extends ParserRuleContext {
	public select_list_item(): Select_list_itemContext[];
	public select_list_item(i: number): Select_list_itemContext;
	public select_list_item(i?: number): Select_list_itemContext | Select_list_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Select_list_itemContext);
		} else {
			return this.getRuleContext(i, Select_list_itemContext);
		}
	}
	public select_list_set(): Select_list_setContext | undefined {
		return this.tryGetRuleContext(0, Select_list_setContext);
	}
	public select_list_limit(): Select_list_limitContext | undefined {
		return this.tryGetRuleContext(0, Select_list_limitContext);
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_select_list; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSelect_list) {
			listener.enterSelect_list(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSelect_list) {
			listener.exitSelect_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSelect_list) {
			return visitor.visitSelect_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_list_setContext extends ParserRuleContext {
	public T_ALL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ALL, 0); }
	public T_DISTINCT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DISTINCT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_select_list_set; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSelect_list_set) {
			listener.enterSelect_list_set(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSelect_list_set) {
			listener.exitSelect_list_set(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSelect_list_set) {
			return visitor.visitSelect_list_set(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_list_limitContext extends ParserRuleContext {
	public T_TOP(): TerminalNode { return this.getToken(HiveSql.T_TOP, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_select_list_limit; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSelect_list_limit) {
			listener.enterSelect_list_limit(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSelect_list_limit) {
			listener.exitSelect_list_limit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSelect_list_limit) {
			return visitor.visitSelect_list_limit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_list_itemContext extends ParserRuleContext {
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public select_list_asterisk(): Select_list_asteriskContext | undefined {
		return this.tryGetRuleContext(0, Select_list_asteriskContext);
	}
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public T_EQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EQUAL, 0); }
	public select_list_alias(): Select_list_aliasContext | undefined {
		return this.tryGetRuleContext(0, Select_list_aliasContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_select_list_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSelect_list_item) {
			listener.enterSelect_list_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSelect_list_item) {
			listener.exitSelect_list_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSelect_list_item) {
			return visitor.visitSelect_list_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_list_aliasContext extends ParserRuleContext {
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public T_TITLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TITLE, 0); }
	public L_S_STRING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.L_S_STRING, 0); }
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_select_list_alias; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSelect_list_alias) {
			listener.enterSelect_list_alias(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSelect_list_alias) {
			listener.exitSelect_list_alias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSelect_list_alias) {
			return visitor.visitSelect_list_alias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_list_asteriskContext extends ParserRuleContext {
	public T_MUL(): TerminalNode { return this.getToken(HiveSql.T_MUL, 0); }
	public L_ID(): TerminalNode | undefined { return this.tryGetToken(HiveSql.L_ID, 0); }
	public T_DOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_select_list_asterisk; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSelect_list_asterisk) {
			listener.enterSelect_list_asterisk(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSelect_list_asterisk) {
			listener.exitSelect_list_asterisk(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSelect_list_asterisk) {
			return visitor.visitSelect_list_asterisk(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Into_clauseContext extends ParserRuleContext {
	public T_INTO(): TerminalNode { return this.getToken(HiveSql.T_INTO, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_into_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterInto_clause) {
			listener.enterInto_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitInto_clause) {
			listener.exitInto_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitInto_clause) {
			return visitor.visitInto_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_clauseContext extends ParserRuleContext {
	public T_FROM(): TerminalNode { return this.getToken(HiveSql.T_FROM, 0); }
	public from_table_clause(): From_table_clauseContext {
		return this.getRuleContext(0, From_table_clauseContext);
	}
	public from_join_clause(): From_join_clauseContext[];
	public from_join_clause(i: number): From_join_clauseContext;
	public from_join_clause(i?: number): From_join_clauseContext | From_join_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(From_join_clauseContext);
		} else {
			return this.getRuleContext(i, From_join_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_from_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFrom_clause) {
			listener.enterFrom_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFrom_clause) {
			listener.exitFrom_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFrom_clause) {
			return visitor.visitFrom_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_table_clauseContext extends ParserRuleContext {
	public from_table_name_clause(): From_table_name_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_table_name_clauseContext);
	}
	public from_subselect_clause(): From_subselect_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_subselect_clauseContext);
	}
	public from_table_values_clause(): From_table_values_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_table_values_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_from_table_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFrom_table_clause) {
			listener.enterFrom_table_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFrom_table_clause) {
			listener.exitFrom_table_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFrom_table_clause) {
			return visitor.visitFrom_table_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_table_name_clauseContext extends ParserRuleContext {
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public from_alias_clause(): From_alias_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_alias_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_from_table_name_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFrom_table_name_clause) {
			listener.enterFrom_table_name_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFrom_table_name_clause) {
			listener.exitFrom_table_name_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFrom_table_name_clause) {
			return visitor.visitFrom_table_name_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_subselect_clauseContext extends ParserRuleContext {
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public select_stmt(): Select_stmtContext {
		return this.getRuleContext(0, Select_stmtContext);
	}
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public from_alias_clause(): From_alias_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_alias_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_from_subselect_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFrom_subselect_clause) {
			listener.enterFrom_subselect_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFrom_subselect_clause) {
			listener.exitFrom_subselect_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFrom_subselect_clause) {
			return visitor.visitFrom_subselect_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_join_clauseContext extends ParserRuleContext {
	public T_COMMA(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COMMA, 0); }
	public from_table_clause(): From_table_clauseContext {
		return this.getRuleContext(0, From_table_clauseContext);
	}
	public from_join_type_clause(): From_join_type_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_join_type_clauseContext);
	}
	public T_ON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ON, 0); }
	public bool_expr(): Bool_exprContext | undefined {
		return this.tryGetRuleContext(0, Bool_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_from_join_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFrom_join_clause) {
			listener.enterFrom_join_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFrom_join_clause) {
			listener.exitFrom_join_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFrom_join_clause) {
			return visitor.visitFrom_join_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_join_type_clauseContext extends ParserRuleContext {
	public T_JOIN(): TerminalNode { return this.getToken(HiveSql.T_JOIN, 0); }
	public T_INNER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INNER, 0); }
	public T_LEFT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LEFT, 0); }
	public T_RIGHT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RIGHT, 0); }
	public T_FULL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FULL, 0); }
	public T_OUTER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OUTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_from_join_type_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFrom_join_type_clause) {
			listener.enterFrom_join_type_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFrom_join_type_clause) {
			listener.exitFrom_join_type_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFrom_join_type_clause) {
			return visitor.visitFrom_join_type_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_table_values_clauseContext extends ParserRuleContext {
	public T_TABLE(): TerminalNode { return this.getToken(HiveSql.T_TABLE, 0); }
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public T_VALUES(): TerminalNode { return this.getToken(HiveSql.T_VALUES, 0); }
	public from_table_values_row(): From_table_values_rowContext[];
	public from_table_values_row(i: number): From_table_values_rowContext;
	public from_table_values_row(i?: number): From_table_values_rowContext | From_table_values_rowContext[] {
		if (i === undefined) {
			return this.getRuleContexts(From_table_values_rowContext);
		} else {
			return this.getRuleContext(i, From_table_values_rowContext);
		}
	}
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public from_alias_clause(): From_alias_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_alias_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_from_table_values_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFrom_table_values_clause) {
			listener.enterFrom_table_values_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFrom_table_values_clause) {
			listener.exitFrom_table_values_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFrom_table_values_clause) {
			return visitor.visitFrom_table_values_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_table_values_rowContext extends ParserRuleContext {
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_from_table_values_row; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFrom_table_values_row) {
			listener.enterFrom_table_values_row(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFrom_table_values_row) {
			listener.exitFrom_table_values_row(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFrom_table_values_row) {
			return visitor.visitFrom_table_values_row(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_alias_clauseContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public L_ID(): TerminalNode[];
	public L_ID(i: number): TerminalNode;
	public L_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.L_ID);
		} else {
			return this.getToken(HiveSql.L_ID, i);
		}
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_from_alias_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFrom_alias_clause) {
			listener.enterFrom_alias_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFrom_alias_clause) {
			listener.exitFrom_alias_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFrom_alias_clause) {
			return visitor.visitFrom_alias_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_nameContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_table_name; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterTable_name) {
			listener.enterTable_name(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitTable_name) {
			listener.exitTable_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitTable_name) {
			return visitor.visitTable_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Where_clauseContext extends ParserRuleContext {
	public T_WHERE(): TerminalNode { return this.getToken(HiveSql.T_WHERE, 0); }
	public bool_expr(): Bool_exprContext {
		return this.getRuleContext(0, Bool_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_where_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterWhere_clause) {
			listener.enterWhere_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitWhere_clause) {
			listener.exitWhere_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitWhere_clause) {
			return visitor.visitWhere_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Group_by_clauseContext extends ParserRuleContext {
	public T_GROUP(): TerminalNode { return this.getToken(HiveSql.T_GROUP, 0); }
	public T_BY(): TerminalNode { return this.getToken(HiveSql.T_BY, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_group_by_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterGroup_by_clause) {
			listener.enterGroup_by_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitGroup_by_clause) {
			listener.exitGroup_by_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitGroup_by_clause) {
			return visitor.visitGroup_by_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Having_clauseContext extends ParserRuleContext {
	public T_HAVING(): TerminalNode { return this.getToken(HiveSql.T_HAVING, 0); }
	public bool_expr(): Bool_exprContext {
		return this.getRuleContext(0, Bool_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_having_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterHaving_clause) {
			listener.enterHaving_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitHaving_clause) {
			listener.exitHaving_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitHaving_clause) {
			return visitor.visitHaving_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Qualify_clauseContext extends ParserRuleContext {
	public T_QUALIFY(): TerminalNode { return this.getToken(HiveSql.T_QUALIFY, 0); }
	public bool_expr(): Bool_exprContext {
		return this.getRuleContext(0, Bool_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_qualify_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterQualify_clause) {
			listener.enterQualify_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitQualify_clause) {
			listener.exitQualify_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitQualify_clause) {
			return visitor.visitQualify_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Order_by_clauseContext extends ParserRuleContext {
	public T_ORDER(): TerminalNode { return this.getToken(HiveSql.T_ORDER, 0); }
	public T_BY(): TerminalNode { return this.getToken(HiveSql.T_BY, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public T_ASC(): TerminalNode[];
	public T_ASC(i: number): TerminalNode;
	public T_ASC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_ASC);
		} else {
			return this.getToken(HiveSql.T_ASC, i);
		}
	}
	public T_DESC(): TerminalNode[];
	public T_DESC(i: number): TerminalNode;
	public T_DESC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_DESC);
		} else {
			return this.getToken(HiveSql.T_DESC, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_order_by_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterOrder_by_clause) {
			listener.enterOrder_by_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitOrder_by_clause) {
			listener.exitOrder_by_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitOrder_by_clause) {
			return visitor.visitOrder_by_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_optionsContext extends ParserRuleContext {
	public select_options_item(): Select_options_itemContext[];
	public select_options_item(i: number): Select_options_itemContext;
	public select_options_item(i?: number): Select_options_itemContext | Select_options_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Select_options_itemContext);
		} else {
			return this.getRuleContext(i, Select_options_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_select_options; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSelect_options) {
			listener.enterSelect_options(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSelect_options) {
			listener.exitSelect_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSelect_options) {
			return visitor.visitSelect_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_options_itemContext extends ParserRuleContext {
	public T_LIMIT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LIMIT, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public T_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_WITH, 0); }
	public T_RR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RR, 0); }
	public T_RS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RS, 0); }
	public T_CS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CS, 0); }
	public T_UR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_UR, 0); }
	public T_USE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_USE, 0); }
	public T_AND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AND, 0); }
	public T_KEEP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_KEEP, 0); }
	public T_LOCKS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOCKS, 0); }
	public T_EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXCLUSIVE, 0); }
	public T_UPDATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_UPDATE, 0); }
	public T_SHARE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SHARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_select_options_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSelect_options_item) {
			listener.enterSelect_options_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSelect_options_item) {
			listener.exitSelect_options_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSelect_options_item) {
			return visitor.visitSelect_options_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Update_stmtContext extends ParserRuleContext {
	public T_UPDATE(): TerminalNode { return this.getToken(HiveSql.T_UPDATE, 0); }
	public update_table(): Update_tableContext {
		return this.getRuleContext(0, Update_tableContext);
	}
	public T_SET(): TerminalNode { return this.getToken(HiveSql.T_SET, 0); }
	public update_assignment(): Update_assignmentContext {
		return this.getRuleContext(0, Update_assignmentContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public update_upsert(): Update_upsertContext | undefined {
		return this.tryGetRuleContext(0, Update_upsertContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_update_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterUpdate_stmt) {
			listener.enterUpdate_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitUpdate_stmt) {
			listener.exitUpdate_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitUpdate_stmt) {
			return visitor.visitUpdate_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Update_assignmentContext extends ParserRuleContext {
	public assignment_stmt_item(): Assignment_stmt_itemContext[];
	public assignment_stmt_item(i: number): Assignment_stmt_itemContext;
	public assignment_stmt_item(i?: number): Assignment_stmt_itemContext | Assignment_stmt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Assignment_stmt_itemContext);
		} else {
			return this.getRuleContext(i, Assignment_stmt_itemContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_update_assignment; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterUpdate_assignment) {
			listener.enterUpdate_assignment(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitUpdate_assignment) {
			listener.exitUpdate_assignment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitUpdate_assignment) {
			return visitor.visitUpdate_assignment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Update_tableContext extends ParserRuleContext {
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public from_clause(): From_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_clauseContext);
	}
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_update_table; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterUpdate_table) {
			listener.enterUpdate_table(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitUpdate_table) {
			listener.exitUpdate_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitUpdate_table) {
			return visitor.visitUpdate_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Update_upsertContext extends ParserRuleContext {
	public T_ELSE(): TerminalNode { return this.getToken(HiveSql.T_ELSE, 0); }
	public insert_stmt(): Insert_stmtContext {
		return this.getRuleContext(0, Insert_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_update_upsert; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterUpdate_upsert) {
			listener.enterUpdate_upsert(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitUpdate_upsert) {
			listener.exitUpdate_upsert(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitUpdate_upsert) {
			return visitor.visitUpdate_upsert(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Merge_stmtContext extends ParserRuleContext {
	public T_MERGE(): TerminalNode { return this.getToken(HiveSql.T_MERGE, 0); }
	public T_INTO(): TerminalNode { return this.getToken(HiveSql.T_INTO, 0); }
	public merge_table(): Merge_tableContext[];
	public merge_table(i: number): Merge_tableContext;
	public merge_table(i?: number): Merge_tableContext | Merge_tableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Merge_tableContext);
		} else {
			return this.getRuleContext(i, Merge_tableContext);
		}
	}
	public T_USING(): TerminalNode { return this.getToken(HiveSql.T_USING, 0); }
	public T_ON(): TerminalNode { return this.getToken(HiveSql.T_ON, 0); }
	public bool_expr(): Bool_exprContext {
		return this.getRuleContext(0, Bool_exprContext);
	}
	public merge_condition(): Merge_conditionContext[];
	public merge_condition(i: number): Merge_conditionContext;
	public merge_condition(i?: number): Merge_conditionContext | Merge_conditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Merge_conditionContext);
		} else {
			return this.getRuleContext(i, Merge_conditionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_merge_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterMerge_stmt) {
			listener.enterMerge_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitMerge_stmt) {
			listener.exitMerge_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitMerge_stmt) {
			return visitor.visitMerge_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Merge_tableContext extends ParserRuleContext {
	public table_name(): Table_nameContext | undefined {
		return this.tryGetRuleContext(0, Table_nameContext);
	}
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_merge_table; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterMerge_table) {
			listener.enterMerge_table(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitMerge_table) {
			listener.exitMerge_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitMerge_table) {
			return visitor.visitMerge_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Merge_conditionContext extends ParserRuleContext {
	public T_WHEN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_WHEN, 0); }
	public T_MATCHED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MATCHED, 0); }
	public T_THEN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_THEN, 0); }
	public merge_action(): Merge_actionContext | undefined {
		return this.tryGetRuleContext(0, Merge_actionContext);
	}
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	public T_AND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AND, 0); }
	public bool_expr(): Bool_exprContext | undefined {
		return this.tryGetRuleContext(0, Bool_exprContext);
	}
	public T_ELSE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ELSE, 0); }
	public T_IGNORE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IGNORE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_merge_condition; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterMerge_condition) {
			listener.enterMerge_condition(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitMerge_condition) {
			listener.exitMerge_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitMerge_condition) {
			return visitor.visitMerge_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Merge_actionContext extends ParserRuleContext {
	public T_INSERT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INSERT, 0); }
	public T_VALUES(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VALUES, 0); }
	public insert_stmt_row(): Insert_stmt_rowContext | undefined {
		return this.tryGetRuleContext(0, Insert_stmt_rowContext);
	}
	public insert_stmt_cols(): Insert_stmt_colsContext | undefined {
		return this.tryGetRuleContext(0, Insert_stmt_colsContext);
	}
	public T_UPDATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_UPDATE, 0); }
	public T_SET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SET, 0); }
	public assignment_stmt_item(): Assignment_stmt_itemContext[];
	public assignment_stmt_item(i: number): Assignment_stmt_itemContext;
	public assignment_stmt_item(i?: number): Assignment_stmt_itemContext | Assignment_stmt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Assignment_stmt_itemContext);
		} else {
			return this.getRuleContext(i, Assignment_stmt_itemContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public T_DELETE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DELETE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_merge_action; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterMerge_action) {
			listener.enterMerge_action(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitMerge_action) {
			listener.exitMerge_action(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitMerge_action) {
			return visitor.visitMerge_action(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delete_stmtContext extends ParserRuleContext {
	public T_DELETE(): TerminalNode { return this.getToken(HiveSql.T_DELETE, 0); }
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public T_FROM(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FROM, 0); }
	public delete_alias(): Delete_aliasContext | undefined {
		return this.tryGetRuleContext(0, Delete_aliasContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public T_ALL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_delete_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDelete_stmt) {
			listener.enterDelete_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDelete_stmt) {
			listener.exitDelete_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDelete_stmt) {
			return visitor.visitDelete_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delete_aliasContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_delete_alias; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDelete_alias) {
			listener.enterDelete_alias(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDelete_alias) {
			listener.exitDelete_alias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDelete_alias) {
			return visitor.visitDelete_alias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Describe_stmtContext extends ParserRuleContext {
	public table_name(): Table_nameContext {
		return this.getRuleContext(0, Table_nameContext);
	}
	public T_DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DESCRIBE, 0); }
	public T_DESC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DESC, 0); }
	public T_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_describe_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDescribe_stmt) {
			listener.enterDescribe_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDescribe_stmt) {
			listener.exitDescribe_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDescribe_stmt) {
			return visitor.visitDescribe_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bool_exprContext extends ParserRuleContext {
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public bool_expr(): Bool_exprContext[];
	public bool_expr(i: number): Bool_exprContext;
	public bool_expr(i?: number): Bool_exprContext | Bool_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bool_exprContext);
		} else {
			return this.getRuleContext(i, Bool_exprContext);
		}
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	public bool_expr_logical_operator(): Bool_expr_logical_operatorContext | undefined {
		return this.tryGetRuleContext(0, Bool_expr_logical_operatorContext);
	}
	public bool_expr_atom(): Bool_expr_atomContext | undefined {
		return this.tryGetRuleContext(0, Bool_expr_atomContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_bool_expr; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBool_expr) {
			listener.enterBool_expr(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBool_expr) {
			listener.exitBool_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBool_expr) {
			return visitor.visitBool_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bool_expr_atomContext extends ParserRuleContext {
	public bool_expr_unary(): Bool_expr_unaryContext | undefined {
		return this.tryGetRuleContext(0, Bool_expr_unaryContext);
	}
	public bool_expr_binary(): Bool_expr_binaryContext | undefined {
		return this.tryGetRuleContext(0, Bool_expr_binaryContext);
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_bool_expr_atom; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBool_expr_atom) {
			listener.enterBool_expr_atom(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBool_expr_atom) {
			listener.exitBool_expr_atom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBool_expr_atom) {
			return visitor.visitBool_expr_atom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bool_expr_unaryContext extends ParserRuleContext {
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_IS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IS, 0); }
	public T_NULL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NULL, 0); }
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	public T_BETWEEN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BETWEEN, 0); }
	public T_AND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AND, 0); }
	public T_EXISTS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXISTS, 0); }
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public bool_expr_single_in(): Bool_expr_single_inContext | undefined {
		return this.tryGetRuleContext(0, Bool_expr_single_inContext);
	}
	public bool_expr_multi_in(): Bool_expr_multi_inContext | undefined {
		return this.tryGetRuleContext(0, Bool_expr_multi_inContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_bool_expr_unary; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBool_expr_unary) {
			listener.enterBool_expr_unary(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBool_expr_unary) {
			listener.exitBool_expr_unary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBool_expr_unary) {
			return visitor.visitBool_expr_unary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bool_expr_single_inContext extends ParserRuleContext {
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_IN(): TerminalNode { return this.getToken(HiveSql.T_IN, 0); }
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_bool_expr_single_in; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBool_expr_single_in) {
			listener.enterBool_expr_single_in(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBool_expr_single_in) {
			listener.exitBool_expr_single_in(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBool_expr_single_in) {
			return visitor.visitBool_expr_single_in(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bool_expr_multi_inContext extends ParserRuleContext {
	public T_OPEN_P(): TerminalNode[];
	public T_OPEN_P(i: number): TerminalNode;
	public T_OPEN_P(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_OPEN_P);
		} else {
			return this.getToken(HiveSql.T_OPEN_P, i);
		}
	}
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_CLOSE_P(): TerminalNode[];
	public T_CLOSE_P(i: number): TerminalNode;
	public T_CLOSE_P(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_CLOSE_P);
		} else {
			return this.getToken(HiveSql.T_CLOSE_P, i);
		}
	}
	public T_IN(): TerminalNode { return this.getToken(HiveSql.T_IN, 0); }
	public select_stmt(): Select_stmtContext {
		return this.getRuleContext(0, Select_stmtContext);
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_bool_expr_multi_in; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBool_expr_multi_in) {
			listener.enterBool_expr_multi_in(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBool_expr_multi_in) {
			listener.exitBool_expr_multi_in(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBool_expr_multi_in) {
			return visitor.visitBool_expr_multi_in(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bool_expr_binaryContext extends ParserRuleContext {
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public bool_expr_binary_operator(): Bool_expr_binary_operatorContext {
		return this.getRuleContext(0, Bool_expr_binary_operatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_bool_expr_binary; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBool_expr_binary) {
			listener.enterBool_expr_binary(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBool_expr_binary) {
			listener.exitBool_expr_binary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBool_expr_binary) {
			return visitor.visitBool_expr_binary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bool_expr_logical_operatorContext extends ParserRuleContext {
	public T_AND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AND, 0); }
	public T_OR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_bool_expr_logical_operator; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBool_expr_logical_operator) {
			listener.enterBool_expr_logical_operator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBool_expr_logical_operator) {
			listener.exitBool_expr_logical_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBool_expr_logical_operator) {
			return visitor.visitBool_expr_logical_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bool_expr_binary_operatorContext extends ParserRuleContext {
	public T_EQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EQUAL, 0); }
	public T_EQUAL2(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EQUAL2, 0); }
	public T_NOTEQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOTEQUAL, 0); }
	public T_NOTEQUAL2(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOTEQUAL2, 0); }
	public T_LESS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LESS, 0); }
	public T_LESSEQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LESSEQUAL, 0); }
	public T_GREATER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_GREATER, 0); }
	public T_GREATEREQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_GREATEREQUAL, 0); }
	public T_LIKE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LIKE, 0); }
	public T_RLIKE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RLIKE, 0); }
	public T_REGEXP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REGEXP, 0); }
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_bool_expr_binary_operator; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBool_expr_binary_operator) {
			listener.enterBool_expr_binary_operator(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBool_expr_binary_operator) {
			listener.exitBool_expr_binary_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBool_expr_binary_operator) {
			return visitor.visitBool_expr_binary_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExprContext extends ParserRuleContext {
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public interval_item(): Interval_itemContext | undefined {
		return this.tryGetRuleContext(0, Interval_itemContext);
	}
	public T_MUL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MUL, 0); }
	public T_DIV(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DIV, 0); }
	public T_ADD(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ADD, 0); }
	public T_SUB(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SUB, 0); }
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public expr_interval(): Expr_intervalContext | undefined {
		return this.tryGetRuleContext(0, Expr_intervalContext);
	}
	public expr_concat(): Expr_concatContext | undefined {
		return this.tryGetRuleContext(0, Expr_concatContext);
	}
	public expr_case(): Expr_caseContext | undefined {
		return this.tryGetRuleContext(0, Expr_caseContext);
	}
	public expr_cursor_attribute(): Expr_cursor_attributeContext | undefined {
		return this.tryGetRuleContext(0, Expr_cursor_attributeContext);
	}
	public expr_agg_window_func(): Expr_agg_window_funcContext | undefined {
		return this.tryGetRuleContext(0, Expr_agg_window_funcContext);
	}
	public expr_spec_func(): Expr_spec_funcContext | undefined {
		return this.tryGetRuleContext(0, Expr_spec_funcContext);
	}
	public expr_func(): Expr_funcContext | undefined {
		return this.tryGetRuleContext(0, Expr_funcContext);
	}
	public expr_atom(): Expr_atomContext | undefined {
		return this.tryGetRuleContext(0, Expr_atomContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr) {
			listener.enterExpr(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr) {
			listener.exitExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr) {
			return visitor.visitExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_atomContext extends ParserRuleContext {
	public date_literal(): Date_literalContext | undefined {
		return this.tryGetRuleContext(0, Date_literalContext);
	}
	public timestamp_literal(): Timestamp_literalContext | undefined {
		return this.tryGetRuleContext(0, Timestamp_literalContext);
	}
	public bool_literal(): Bool_literalContext | undefined {
		return this.tryGetRuleContext(0, Bool_literalContext);
	}
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public dec_number(): Dec_numberContext | undefined {
		return this.tryGetRuleContext(0, Dec_numberContext);
	}
	public int_number(): Int_numberContext | undefined {
		return this.tryGetRuleContext(0, Int_numberContext);
	}
	public null_const(): Null_constContext | undefined {
		return this.tryGetRuleContext(0, Null_constContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_atom; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_atom) {
			listener.enterExpr_atom(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_atom) {
			listener.exitExpr_atom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_atom) {
			return visitor.visitExpr_atom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_intervalContext extends ParserRuleContext {
	public T_INTERVAL(): TerminalNode { return this.getToken(HiveSql.T_INTERVAL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public interval_item(): Interval_itemContext {
		return this.getRuleContext(0, Interval_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_interval; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_interval) {
			listener.enterExpr_interval(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_interval) {
			listener.exitExpr_interval(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_interval) {
			return visitor.visitExpr_interval(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Interval_itemContext extends ParserRuleContext {
	public T_DAY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DAY, 0); }
	public T_DAYS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DAYS, 0); }
	public T_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MICROSECOND, 0); }
	public T_MICROSECONDS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MICROSECONDS, 0); }
	public T_SECOND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SECOND, 0); }
	public T_SECONDS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SECONDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_interval_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterInterval_item) {
			listener.enterInterval_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitInterval_item) {
			listener.exitInterval_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitInterval_item) {
			return visitor.visitInterval_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_concatContext extends ParserRuleContext {
	public expr_concat_item(): Expr_concat_itemContext[];
	public expr_concat_item(i: number): Expr_concat_itemContext;
	public expr_concat_item(i?: number): Expr_concat_itemContext | Expr_concat_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Expr_concat_itemContext);
		} else {
			return this.getRuleContext(i, Expr_concat_itemContext);
		}
	}
	public T_PIPE(): TerminalNode[];
	public T_PIPE(i: number): TerminalNode;
	public T_PIPE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_PIPE);
		} else {
			return this.getToken(HiveSql.T_PIPE, i);
		}
	}
	public T_CONCAT(): TerminalNode[];
	public T_CONCAT(i: number): TerminalNode;
	public T_CONCAT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_CONCAT);
		} else {
			return this.getToken(HiveSql.T_CONCAT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_concat; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_concat) {
			listener.enterExpr_concat(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_concat) {
			listener.exitExpr_concat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_concat) {
			return visitor.visitExpr_concat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_concat_itemContext extends ParserRuleContext {
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public expr_case(): Expr_caseContext | undefined {
		return this.tryGetRuleContext(0, Expr_caseContext);
	}
	public expr_agg_window_func(): Expr_agg_window_funcContext | undefined {
		return this.tryGetRuleContext(0, Expr_agg_window_funcContext);
	}
	public expr_spec_func(): Expr_spec_funcContext | undefined {
		return this.tryGetRuleContext(0, Expr_spec_funcContext);
	}
	public expr_func(): Expr_funcContext | undefined {
		return this.tryGetRuleContext(0, Expr_funcContext);
	}
	public expr_atom(): Expr_atomContext | undefined {
		return this.tryGetRuleContext(0, Expr_atomContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_concat_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_concat_item) {
			listener.enterExpr_concat_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_concat_item) {
			listener.exitExpr_concat_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_concat_item) {
			return visitor.visitExpr_concat_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_caseContext extends ParserRuleContext {
	public expr_case_simple(): Expr_case_simpleContext | undefined {
		return this.tryGetRuleContext(0, Expr_case_simpleContext);
	}
	public expr_case_searched(): Expr_case_searchedContext | undefined {
		return this.tryGetRuleContext(0, Expr_case_searchedContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_case; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_case) {
			listener.enterExpr_case(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_case) {
			listener.exitExpr_case(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_case) {
			return visitor.visitExpr_case(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_case_simpleContext extends ParserRuleContext {
	public T_CASE(): TerminalNode { return this.getToken(HiveSql.T_CASE, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_END(): TerminalNode { return this.getToken(HiveSql.T_END, 0); }
	public T_WHEN(): TerminalNode[];
	public T_WHEN(i: number): TerminalNode;
	public T_WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_WHEN);
		} else {
			return this.getToken(HiveSql.T_WHEN, i);
		}
	}
	public T_THEN(): TerminalNode[];
	public T_THEN(i: number): TerminalNode;
	public T_THEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_THEN);
		} else {
			return this.getToken(HiveSql.T_THEN, i);
		}
	}
	public T_ELSE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ELSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_case_simple; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_case_simple) {
			listener.enterExpr_case_simple(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_case_simple) {
			listener.exitExpr_case_simple(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_case_simple) {
			return visitor.visitExpr_case_simple(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_case_searchedContext extends ParserRuleContext {
	public T_CASE(): TerminalNode { return this.getToken(HiveSql.T_CASE, 0); }
	public T_END(): TerminalNode { return this.getToken(HiveSql.T_END, 0); }
	public T_WHEN(): TerminalNode[];
	public T_WHEN(i: number): TerminalNode;
	public T_WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_WHEN);
		} else {
			return this.getToken(HiveSql.T_WHEN, i);
		}
	}
	public bool_expr(): Bool_exprContext[];
	public bool_expr(i: number): Bool_exprContext;
	public bool_expr(i?: number): Bool_exprContext | Bool_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bool_exprContext);
		} else {
			return this.getRuleContext(i, Bool_exprContext);
		}
	}
	public T_THEN(): TerminalNode[];
	public T_THEN(i: number): TerminalNode;
	public T_THEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_THEN);
		} else {
			return this.getToken(HiveSql.T_THEN, i);
		}
	}
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_ELSE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ELSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_case_searched; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_case_searched) {
			listener.enterExpr_case_searched(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_case_searched) {
			listener.exitExpr_case_searched(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_case_searched) {
			return visitor.visitExpr_case_searched(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_cursor_attributeContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_PRECENT(): TerminalNode { return this.getToken(HiveSql.T_PRECENT, 0); }
	public T_ISOPEN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ISOPEN, 0); }
	public T_FOUND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FOUND, 0); }
	public T_NOTFOUND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOTFOUND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_cursor_attribute; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_cursor_attribute) {
			listener.enterExpr_cursor_attribute(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_cursor_attribute) {
			listener.exitExpr_cursor_attribute(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_cursor_attribute) {
			return visitor.visitExpr_cursor_attribute(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_agg_window_funcContext extends ParserRuleContext {
	public T_AVG(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AVG, 0); }
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public expr_func_all_distinct(): Expr_func_all_distinctContext | undefined {
		return this.tryGetRuleContext(0, Expr_func_all_distinctContext);
	}
	public expr_func_over_clause(): Expr_func_over_clauseContext | undefined {
		return this.tryGetRuleContext(0, Expr_func_over_clauseContext);
	}
	public T_COUNT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COUNT, 0); }
	public T_MUL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MUL, 0); }
	public T_COUNT_BIG(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COUNT_BIG, 0); }
	public T_CUME_DIST(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CUME_DIST, 0); }
	public T_DENSE_RANK(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DENSE_RANK, 0); }
	public T_FIRST_VALUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FIRST_VALUE, 0); }
	public T_LAG(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LAG, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public T_LAST_VALUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LAST_VALUE, 0); }
	public T_LEAD(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LEAD, 0); }
	public T_MAX(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MAX, 0); }
	public T_MIN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MIN, 0); }
	public T_RANK(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RANK, 0); }
	public T_ROW_NUMBER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ROW_NUMBER, 0); }
	public T_STDEV(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STDEV, 0); }
	public T_SUM(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SUM, 0); }
	public T_VAR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VAR, 0); }
	public T_VARIANCE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VARIANCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_agg_window_func; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_agg_window_func) {
			listener.enterExpr_agg_window_func(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_agg_window_func) {
			listener.exitExpr_agg_window_func(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_agg_window_func) {
			return visitor.visitExpr_agg_window_func(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_func_all_distinctContext extends ParserRuleContext {
	public T_ALL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ALL, 0); }
	public T_DISTINCT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DISTINCT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_func_all_distinct; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_func_all_distinct) {
			listener.enterExpr_func_all_distinct(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_func_all_distinct) {
			listener.exitExpr_func_all_distinct(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_func_all_distinct) {
			return visitor.visitExpr_func_all_distinct(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_func_over_clauseContext extends ParserRuleContext {
	public T_OVER(): TerminalNode { return this.getToken(HiveSql.T_OVER, 0); }
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public expr_func_partition_by_clause(): Expr_func_partition_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Expr_func_partition_by_clauseContext);
	}
	public order_by_clause(): Order_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Order_by_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_func_over_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_func_over_clause) {
			listener.enterExpr_func_over_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_func_over_clause) {
			listener.exitExpr_func_over_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_func_over_clause) {
			return visitor.visitExpr_func_over_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_func_partition_by_clauseContext extends ParserRuleContext {
	public T_PARTITION(): TerminalNode { return this.getToken(HiveSql.T_PARTITION, 0); }
	public T_BY(): TerminalNode { return this.getToken(HiveSql.T_BY, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_func_partition_by_clause; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_func_partition_by_clause) {
			listener.enterExpr_func_partition_by_clause(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_func_partition_by_clause) {
			listener.exitExpr_func_partition_by_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_func_partition_by_clause) {
			return visitor.visitExpr_func_partition_by_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_spec_funcContext extends ParserRuleContext {
	public T_ACTIVITY_COUNT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ACTIVITY_COUNT, 0); }
	public T_CAST(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CAST, 0); }
	public T_OPEN_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN_P, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	public dtype(): DtypeContext | undefined {
		return this.tryGetRuleContext(0, DtypeContext);
	}
	public T_CLOSE_P(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE_P, 0); }
	public dtype_len(): Dtype_lenContext | undefined {
		return this.tryGetRuleContext(0, Dtype_lenContext);
	}
	public T_COUNT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COUNT, 0); }
	public T_MUL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MUL, 0); }
	public T_CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURRENT_DATE, 0); }
	public T_CURRENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURRENT, 0); }
	public T_DATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DATE, 0); }
	public T_CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURRENT_TIMESTAMP, 0); }
	public T_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TIMESTAMP, 0); }
	public T_CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURRENT_USER, 0); }
	public T_USER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_USER, 0); }
	public T_MAX_PART_STRING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MAX_PART_STRING, 0); }
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	public T_EQUAL(): TerminalNode[];
	public T_EQUAL(i: number): TerminalNode;
	public T_EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_EQUAL);
		} else {
			return this.getToken(HiveSql.T_EQUAL, i);
		}
	}
	public T_MIN_PART_STRING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MIN_PART_STRING, 0); }
	public T_MAX_PART_INT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MAX_PART_INT, 0); }
	public T_MIN_PART_INT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MIN_PART_INT, 0); }
	public T_MAX_PART_DATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MAX_PART_DATE, 0); }
	public T_MIN_PART_DATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MIN_PART_DATE, 0); }
	public T_PART_COUNT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PART_COUNT, 0); }
	public T_PART_LOC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PART_LOC, 0); }
	public T_TRIM(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TRIM, 0); }
	public T_SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SUBSTRING, 0); }
	public T_FROM(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FROM, 0); }
	public T_FOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FOR, 0); }
	public T_SYSDATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SYSDATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_spec_func; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_spec_func) {
			listener.enterExpr_spec_func(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_spec_func) {
			listener.exitExpr_spec_func(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_spec_func) {
			return visitor.visitExpr_spec_func(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_funcContext extends ParserRuleContext {
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public T_OPEN_P(): TerminalNode { return this.getToken(HiveSql.T_OPEN_P, 0); }
	public T_CLOSE_P(): TerminalNode { return this.getToken(HiveSql.T_CLOSE_P, 0); }
	public expr_func_params(): Expr_func_paramsContext | undefined {
		return this.tryGetRuleContext(0, Expr_func_paramsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_func; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_func) {
			listener.enterExpr_func(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_func) {
			listener.exitExpr_func(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_func) {
			return visitor.visitExpr_func(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_func_paramsContext extends ParserRuleContext {
	public func_param(): Func_paramContext[];
	public func_param(i: number): Func_paramContext;
	public func_param(i?: number): Func_paramContext | Func_paramContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Func_paramContext);
		} else {
			return this.getRuleContext(i, Func_paramContext);
		}
	}
	public T_COMMA(): TerminalNode[];
	public T_COMMA(i: number): TerminalNode;
	public T_COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_COMMA);
		} else {
			return this.getToken(HiveSql.T_COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_func_params; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_func_params) {
			listener.enterExpr_func_params(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_func_params) {
			listener.exitExpr_func_params(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_func_params) {
			return visitor.visitExpr_func_params(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_paramContext extends ParserRuleContext {
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public ident(): IdentContext | undefined {
		return this.tryGetRuleContext(0, IdentContext);
	}
	public T_EQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EQUAL, 0); }
	public T_GREATER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_GREATER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_func_param; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFunc_param) {
			listener.enterFunc_param(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFunc_param) {
			listener.exitFunc_param(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFunc_param) {
			return visitor.visitFunc_param(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_selectContext extends ParserRuleContext {
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_select; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_select) {
			listener.enterExpr_select(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_select) {
			listener.exitExpr_select(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_select) {
			return visitor.visitExpr_select(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_fileContext extends ParserRuleContext {
	public file_name(): File_nameContext | undefined {
		return this.tryGetRuleContext(0, File_nameContext);
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_expr_file; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterExpr_file) {
			listener.enterExpr_file(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitExpr_file) {
			listener.exitExpr_file(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitExpr_file) {
			return visitor.visitExpr_file(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HiveContext extends ParserRuleContext {
	public T_HIVE(): TerminalNode { return this.getToken(HiveSql.T_HIVE, 0); }
	public hive_item(): Hive_itemContext[];
	public hive_item(i: number): Hive_itemContext;
	public hive_item(i?: number): Hive_itemContext | Hive_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Hive_itemContext);
		} else {
			return this.getRuleContext(i, Hive_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_hive; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterHive) {
			listener.enterHive(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitHive) {
			listener.exitHive(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitHive) {
			return visitor.visitHive(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Hive_itemContext extends ParserRuleContext {
	public T_SUB(): TerminalNode { return this.getToken(HiveSql.T_SUB, 0); }
	public ident(): IdentContext {
		return this.getRuleContext(0, IdentContext);
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public L_ID(): TerminalNode | undefined { return this.tryGetToken(HiveSql.L_ID, 0); }
	public T_EQUAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EQUAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_hive_item; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterHive_item) {
			listener.enterHive_item(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitHive_item) {
			listener.exitHive_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitHive_item) {
			return visitor.visitHive_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HostContext extends ParserRuleContext {
	public T_NOTE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOTE, 0); }
	public host_cmd(): Host_cmdContext | undefined {
		return this.tryGetRuleContext(0, Host_cmdContext);
	}
	public T_SEMICOLON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SEMICOLON, 0); }
	public host_stmt(): Host_stmtContext | undefined {
		return this.tryGetRuleContext(0, Host_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_host; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterHost) {
			listener.enterHost(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitHost) {
			listener.exitHost(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitHost) {
			return visitor.visitHost(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Host_cmdContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_host_cmd; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterHost_cmd) {
			listener.enterHost_cmd(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitHost_cmd) {
			listener.exitHost_cmd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitHost_cmd) {
			return visitor.visitHost_cmd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Host_stmtContext extends ParserRuleContext {
	public T_HOST(): TerminalNode { return this.getToken(HiveSql.T_HOST, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_host_stmt; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterHost_stmt) {
			listener.enterHost_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitHost_stmt) {
			listener.exitHost_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitHost_stmt) {
			return visitor.visitHost_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_nameContext extends ParserRuleContext {
	public L_FILE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.L_FILE, 0); }
	public ident(): IdentContext[];
	public ident(i: number): IdentContext;
	public ident(i?: number): IdentContext | IdentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentContext);
		} else {
			return this.getRuleContext(i, IdentContext);
		}
	}
	public T_DIV(): TerminalNode[];
	public T_DIV(i: number): TerminalNode;
	public T_DIV(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_DIV);
		} else {
			return this.getToken(HiveSql.T_DIV, i);
		}
	}
	public T_DOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_file_name; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterFile_name) {
			listener.enterFile_name(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitFile_name) {
			listener.exitFile_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitFile_name) {
			return visitor.visitFile_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Date_literalContext extends ParserRuleContext {
	public T_DATE(): TerminalNode { return this.getToken(HiveSql.T_DATE, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_date_literal; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDate_literal) {
			listener.enterDate_literal(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDate_literal) {
			listener.exitDate_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDate_literal) {
			return visitor.visitDate_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Timestamp_literalContext extends ParserRuleContext {
	public T_TIMESTAMP(): TerminalNode { return this.getToken(HiveSql.T_TIMESTAMP, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_timestamp_literal; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterTimestamp_literal) {
			listener.enterTimestamp_literal(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitTimestamp_literal) {
			listener.exitTimestamp_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitTimestamp_literal) {
			return visitor.visitTimestamp_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentContext extends ParserRuleContext {
	public L_ID(): TerminalNode[];
	public L_ID(i: number): TerminalNode;
	public L_ID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.L_ID);
		} else {
			return this.getToken(HiveSql.L_ID, i);
		}
	}
	public non_reserved_words(): Non_reserved_wordsContext[];
	public non_reserved_words(i: number): Non_reserved_wordsContext;
	public non_reserved_words(i?: number): Non_reserved_wordsContext | Non_reserved_wordsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Non_reserved_wordsContext);
		} else {
			return this.getRuleContext(i, Non_reserved_wordsContext);
		}
	}
	public T_DOT(): TerminalNode[];
	public T_DOT(i: number): TerminalNode;
	public T_DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(HiveSql.T_DOT);
		} else {
			return this.getToken(HiveSql.T_DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_ident; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterIdent) {
			listener.enterIdent(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitIdent) {
			listener.exitIdent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitIdent) {
			return visitor.visitIdent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_string; }
	public copyFrom(ctx: StringContext): void {
		super.copyFrom(ctx);
	}
}
export class Single_quotedStringContext extends StringContext {
	public L_S_STRING(): TerminalNode { return this.getToken(HiveSql.L_S_STRING, 0); }
	constructor(ctx: StringContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterSingle_quotedString) {
			listener.enterSingle_quotedString(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitSingle_quotedString) {
			listener.exitSingle_quotedString(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitSingle_quotedString) {
			return visitor.visitSingle_quotedString(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class Double_quotedStringContext extends StringContext {
	public L_D_STRING(): TerminalNode { return this.getToken(HiveSql.L_D_STRING, 0); }
	constructor(ctx: StringContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDouble_quotedString) {
			listener.enterDouble_quotedString(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDouble_quotedString) {
			listener.exitDouble_quotedString(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDouble_quotedString) {
			return visitor.visitDouble_quotedString(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Int_numberContext extends ParserRuleContext {
	public L_INT(): TerminalNode { return this.getToken(HiveSql.L_INT, 0); }
	public T_SUB(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SUB, 0); }
	public T_ADD(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ADD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_int_number; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterInt_number) {
			listener.enterInt_number(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitInt_number) {
			listener.exitInt_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitInt_number) {
			return visitor.visitInt_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dec_numberContext extends ParserRuleContext {
	public L_DEC(): TerminalNode { return this.getToken(HiveSql.L_DEC, 0); }
	public T_SUB(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SUB, 0); }
	public T_ADD(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ADD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_dec_number; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterDec_number) {
			listener.enterDec_number(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitDec_number) {
			listener.exitDec_number(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitDec_number) {
			return visitor.visitDec_number(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bool_literalContext extends ParserRuleContext {
	public T_TRUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TRUE, 0); }
	public T_FALSE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_bool_literal; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterBool_literal) {
			listener.enterBool_literal(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitBool_literal) {
			listener.exitBool_literal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitBool_literal) {
			return visitor.visitBool_literal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Null_constContext extends ParserRuleContext {
	public T_NULL(): TerminalNode { return this.getToken(HiveSql.T_NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_null_const; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterNull_const) {
			listener.enterNull_const(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitNull_const) {
			listener.exitNull_const(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitNull_const) {
			return visitor.visitNull_const(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Non_reserved_wordsContext extends ParserRuleContext {
	public T_ACTION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ACTION, 0); }
	public T_ACTIVITY_COUNT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ACTIVITY_COUNT, 0); }
	public T_ADD2(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ADD2, 0); }
	public T_ALL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ALL, 0); }
	public T_ALLOCATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ALLOCATE, 0); }
	public T_ALTER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ALTER, 0); }
	public T_AND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AND, 0); }
	public T_ANSI_NULLS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ANSI_NULLS, 0); }
	public T_ANSI_PADDING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ANSI_PADDING, 0); }
	public T_AS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AS, 0); }
	public T_ASC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ASC, 0); }
	public T_ASSOCIATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ASSOCIATE, 0); }
	public T_AT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AT, 0); }
	public T_AUTO_INCREMENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AUTO_INCREMENT, 0); }
	public T_AVG(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_AVG, 0); }
	public T_BATCHSIZE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BATCHSIZE, 0); }
	public T_BEGIN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BEGIN, 0); }
	public T_BETWEEN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BETWEEN, 0); }
	public T_BIGINT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BIGINT, 0); }
	public T_BINARY_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BINARY_DOUBLE, 0); }
	public T_BINARY_FLOAT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BINARY_FLOAT, 0); }
	public T_BIT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BIT, 0); }
	public T_BODY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BODY, 0); }
	public T_BREAK(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BREAK, 0); }
	public T_BY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BY, 0); }
	public T_BYTE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_BYTE, 0); }
	public T_CALL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CALL, 0); }
	public T_CALLER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CALLER, 0); }
	public T_CASCADE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CASCADE, 0); }
	public T_CASE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CASE, 0); }
	public T_CASESPECIFIC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CASESPECIFIC, 0); }
	public T_CAST(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CAST, 0); }
	public T_CHAR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CHAR, 0); }
	public T_CHARACTER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CHARACTER, 0); }
	public T_CHARSET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CHARSET, 0); }
	public T_CLIENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLIENT, 0); }
	public T_CLOSE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLOSE, 0); }
	public T_CLUSTERED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CLUSTERED, 0); }
	public T_CMP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CMP, 0); }
	public T_COLLECT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COLLECT, 0); }
	public T_COLLECTION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COLLECTION, 0); }
	public T_COLUMN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COLUMN, 0); }
	public T_COMMENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COMMENT, 0); }
	public T_COMPRESS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COMPRESS, 0); }
	public T_CONSTANT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CONSTANT, 0); }
	public T_COPY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COPY, 0); }
	public T_COMMIT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COMMIT, 0); }
	public T_CONCAT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CONCAT, 0); }
	public T_CONDITION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CONDITION, 0); }
	public T_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CONSTRAINT, 0); }
	public T_CONTINUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CONTINUE, 0); }
	public T_COUNT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COUNT, 0); }
	public T_COUNT_BIG(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_COUNT_BIG, 0); }
	public T_CREATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CREATE, 0); }
	public T_CREATION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CREATION, 0); }
	public T_CREATOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CREATOR, 0); }
	public T_CS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CS, 0); }
	public T_CUME_DIST(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CUME_DIST, 0); }
	public T_CURRENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURRENT, 0); }
	public T_CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURRENT_DATE, 0); }
	public T_CURRENT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURRENT_SCHEMA, 0); }
	public T_CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURRENT_TIMESTAMP, 0); }
	public T_CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURRENT_USER, 0); }
	public T_CURSOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_CURSOR, 0); }
	public T_DATA(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DATA, 0); }
	public T_DATABASE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DATABASE, 0); }
	public T_DATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DATE, 0); }
	public T_DATETIME(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DATETIME, 0); }
	public T_DAY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DAY, 0); }
	public T_DAYS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DAYS, 0); }
	public T_DEC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEC, 0); }
	public T_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DECIMAL, 0); }
	public T_DECLARE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DECLARE, 0); }
	public T_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFAULT, 0); }
	public T_DEFERRED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFERRED, 0); }
	public T_DEFINED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFINED, 0); }
	public T_DEFINER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFINER, 0); }
	public T_DEFINITION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DEFINITION, 0); }
	public T_DELETE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DELETE, 0); }
	public T_DELIMITED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DELIMITED, 0); }
	public T_DELIMITER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DELIMITER, 0); }
	public T_DENSE_RANK(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DENSE_RANK, 0); }
	public T_DESC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DESC, 0); }
	public T_DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DESCRIBE, 0); }
	public T_DIAGNOSTICS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DIAGNOSTICS, 0); }
	public T_DIR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DIR, 0); }
	public T_DIRECTORY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DIRECTORY, 0); }
	public T_DISTINCT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DISTINCT, 0); }
	public T_DISTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DISTRIBUTE, 0); }
	public T_DO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DO, 0); }
	public T_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DOUBLE, 0); }
	public T_DROP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DROP, 0); }
	public T_DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_DYNAMIC, 0); }
	public T_ENABLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ENABLE, 0); }
	public T_ENGINE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ENGINE, 0); }
	public T_ESCAPED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ESCAPED, 0); }
	public T_EXCEPT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXCEPT, 0); }
	public T_EXEC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXEC, 0); }
	public T_EXECUTE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXECUTE, 0); }
	public T_EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXCEPTION, 0); }
	public T_EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXCLUSIVE, 0); }
	public T_EXISTS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXISTS, 0); }
	public T_EXIT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_EXIT, 0); }
	public T_FALLBACK(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FALLBACK, 0); }
	public T_FALSE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FALSE, 0); }
	public T_FETCH(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FETCH, 0); }
	public T_FIELDS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FIELDS, 0); }
	public T_FILE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FILE, 0); }
	public T_FILES(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FILES, 0); }
	public T_FIRST_VALUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FIRST_VALUE, 0); }
	public T_FLOAT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FLOAT, 0); }
	public T_FOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FOR, 0); }
	public T_FOREIGN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FOREIGN, 0); }
	public T_FORMAT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FORMAT, 0); }
	public T_FOUND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FOUND, 0); }
	public T_FROM(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FROM, 0); }
	public T_FULL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FULL, 0); }
	public T_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_FUNCTION, 0); }
	public T_GET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_GET, 0); }
	public T_GLOBAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_GLOBAL, 0); }
	public T_GO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_GO, 0); }
	public T_GRANT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_GRANT, 0); }
	public T_GROUP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_GROUP, 0); }
	public T_HANDLER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_HANDLER, 0); }
	public T_HASH(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_HASH, 0); }
	public T_HAVING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_HAVING, 0); }
	public T_HDFS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_HDFS, 0); }
	public T_HIVE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_HIVE, 0); }
	public T_HOST(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_HOST, 0); }
	public T_IDENTITY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IDENTITY, 0); }
	public T_IF(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IF, 0); }
	public T_IGNORE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IGNORE, 0); }
	public T_IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IMMEDIATE, 0); }
	public T_IN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IN, 0); }
	public T_INCLUDE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INCLUDE, 0); }
	public T_INDEX(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INDEX, 0); }
	public T_INITRANS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INITRANS, 0); }
	public T_INNER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INNER, 0); }
	public T_INOUT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INOUT, 0); }
	public T_INSERT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INSERT, 0); }
	public T_INT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INT, 0); }
	public T_INT2(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INT2, 0); }
	public T_INT4(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INT4, 0); }
	public T_INT8(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INT8, 0); }
	public T_INTEGER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INTEGER, 0); }
	public T_INTERSECT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INTERSECT, 0); }
	public T_INTERVAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INTERVAL, 0); }
	public T_INTO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INTO, 0); }
	public T_INVOKER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_INVOKER, 0); }
	public T_ITEMS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ITEMS, 0); }
	public T_IS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_IS, 0); }
	public T_ISOPEN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ISOPEN, 0); }
	public T_JOIN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_JOIN, 0); }
	public T_KEEP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_KEEP, 0); }
	public T_KEY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_KEY, 0); }
	public T_KEYS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_KEYS, 0); }
	public T_LAG(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LAG, 0); }
	public T_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LANGUAGE, 0); }
	public T_LAST_VALUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LAST_VALUE, 0); }
	public T_LEAD(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LEAD, 0); }
	public T_LEAVE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LEAVE, 0); }
	public T_LEFT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LEFT, 0); }
	public T_LIKE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LIKE, 0); }
	public T_LIMIT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LIMIT, 0); }
	public T_LINES(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LINES, 0); }
	public T_LOCAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOCAL, 0); }
	public T_LOCATION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOCATION, 0); }
	public T_LOCATOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOCATOR, 0); }
	public T_LOCATORS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOCATORS, 0); }
	public T_LOCKS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOCKS, 0); }
	public T_LOG(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOG, 0); }
	public T_LOGGED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOGGED, 0); }
	public T_LOGGING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOGGING, 0); }
	public T_LOOP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_LOOP, 0); }
	public T_MAP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MAP, 0); }
	public T_MATCHED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MATCHED, 0); }
	public T_MAX(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MAX, 0); }
	public T_MAXTRANS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MAXTRANS, 0); }
	public T_MERGE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MERGE, 0); }
	public T_MESSAGE_TEXT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MESSAGE_TEXT, 0); }
	public T_MICROSECOND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MICROSECOND, 0); }
	public T_MICROSECONDS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MICROSECONDS, 0); }
	public T_MIN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MIN, 0); }
	public T_MULTISET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_MULTISET, 0); }
	public T_NCHAR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NCHAR, 0); }
	public T_NEW(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NEW, 0); }
	public T_NVARCHAR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NVARCHAR, 0); }
	public T_NO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NO, 0); }
	public T_NOCOMPRESS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOCOMPRESS, 0); }
	public T_NOCOUNT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOCOUNT, 0); }
	public T_NOLOGGING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOLOGGING, 0); }
	public T_NONE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NONE, 0); }
	public T_NOT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOT, 0); }
	public T_NOTFOUND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NOTFOUND, 0); }
	public T_NUMERIC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NUMERIC, 0); }
	public T_NUMBER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_NUMBER, 0); }
	public T_OBJECT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OBJECT, 0); }
	public T_OFF(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OFF, 0); }
	public T_ON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ON, 0); }
	public T_ONLY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ONLY, 0); }
	public T_OPEN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OPEN, 0); }
	public T_OR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OR, 0); }
	public T_ORDER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ORDER, 0); }
	public T_OUT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OUT, 0); }
	public T_OUTER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OUTER, 0); }
	public T_OVER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OVER, 0); }
	public T_OVERWRITE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OVERWRITE, 0); }
	public T_OWNER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_OWNER, 0); }
	public T_PACKAGE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PACKAGE, 0); }
	public T_PART_COUNT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PART_COUNT, 0); }
	public T_PART_LOC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PART_LOC, 0); }
	public T_PARTITION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PARTITION, 0); }
	public T_PCTFREE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PCTFREE, 0); }
	public T_PCTUSED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PCTUSED, 0); }
	public T_PRECISION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PRECISION, 0); }
	public T_PRESERVE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PRESERVE, 0); }
	public T_PRIMARY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PRIMARY, 0); }
	public T_PRINT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PRINT, 0); }
	public T_PROC(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PROC, 0); }
	public T_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PROCEDURE, 0); }
	public T_PWD(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_PWD, 0); }
	public T_QUALIFY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_QUALIFY, 0); }
	public T_QUERY_BAND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_QUERY_BAND, 0); }
	public T_QUIT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_QUIT, 0); }
	public T_QUOTED_IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_QUOTED_IDENTIFIER, 0); }
	public T_RAISE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RAISE, 0); }
	public T_RANK(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RANK, 0); }
	public T_REAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REAL, 0); }
	public T_REFERENCES(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REFERENCES, 0); }
	public T_REGEXP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REGEXP, 0); }
	public T_RR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RR, 0); }
	public T_REPLACE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REPLACE, 0); }
	public T_RESIGNAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RESIGNAL, 0); }
	public T_RESTRICT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RESTRICT, 0); }
	public T_RESULT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RESULT, 0); }
	public T_RESULT_SET_LOCATOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RESULT_SET_LOCATOR, 0); }
	public T_RETURN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RETURN, 0); }
	public T_RETURNS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RETURNS, 0); }
	public T_REVERSE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_REVERSE, 0); }
	public T_RIGHT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RIGHT, 0); }
	public T_RLIKE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RLIKE, 0); }
	public T_RS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_RS, 0); }
	public T_ROLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ROLE, 0); }
	public T_ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ROLLBACK, 0); }
	public T_ROW(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ROW, 0); }
	public T_ROWS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ROWS, 0); }
	public T_ROW_COUNT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ROW_COUNT, 0); }
	public T_ROW_NUMBER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_ROW_NUMBER, 0); }
	public T_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SCHEMA, 0); }
	public T_SECOND(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SECOND, 0); }
	public T_SECONDS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SECONDS, 0); }
	public T_SECURITY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SECURITY, 0); }
	public T_SEGMENT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SEGMENT, 0); }
	public T_SEL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SEL, 0); }
	public T_SELECT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SELECT, 0); }
	public T_SESSION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SESSION, 0); }
	public T_SESSIONS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SESSIONS, 0); }
	public T_SET(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SET, 0); }
	public T_SETS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SETS, 0); }
	public T_SHARE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SHARE, 0); }
	public T_SIGNAL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SIGNAL, 0); }
	public T_SIMPLE_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SIMPLE_DOUBLE, 0); }
	public T_SIMPLE_FLOAT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SIMPLE_FLOAT, 0); }
	public T_SMALLDATETIME(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SMALLDATETIME, 0); }
	public T_SMALLINT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SMALLINT, 0); }
	public T_SQL(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SQL, 0); }
	public T_SQLEXCEPTION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SQLEXCEPTION, 0); }
	public T_SQLINSERT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SQLINSERT, 0); }
	public T_SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SQLSTATE, 0); }
	public T_SQLWARNING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SQLWARNING, 0); }
	public T_STATS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STATS, 0); }
	public T_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STATISTICS, 0); }
	public T_STEP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STEP, 0); }
	public T_STDEV(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STDEV, 0); }
	public T_STORAGE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STORAGE, 0); }
	public T_STORED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STORED, 0); }
	public T_STRING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_STRING, 0); }
	public T_SUBDIR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SUBDIR, 0); }
	public T_SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SUBSTRING, 0); }
	public T_SUM(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SUM, 0); }
	public T_SUMMARY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SUMMARY, 0); }
	public T_SYSDATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SYSDATE, 0); }
	public T_SYS_REFCURSOR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_SYS_REFCURSOR, 0); }
	public T_TABLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TABLE, 0); }
	public T_TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TABLESPACE, 0); }
	public T_TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TEMPORARY, 0); }
	public T_TERMINATED(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TERMINATED, 0); }
	public T_TEXTIMAGE_ON(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TEXTIMAGE_ON, 0); }
	public T_THEN(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_THEN, 0); }
	public T_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TIMESTAMP, 0); }
	public T_TITLE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TITLE, 0); }
	public T_TO(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TO, 0); }
	public T_TOP(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TOP, 0); }
	public T_TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TRANSACTION, 0); }
	public T_TRIM(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TRIM, 0); }
	public T_TRUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TRUE, 0); }
	public T_TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_TRUNCATE, 0); }
	public T_UNIQUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_UNIQUE, 0); }
	public T_UPDATE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_UPDATE, 0); }
	public T_UR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_UR, 0); }
	public T_USE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_USE, 0); }
	public T_USER(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_USER, 0); }
	public T_USING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_USING, 0); }
	public T_VALUE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VALUE, 0); }
	public T_VALUES(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VALUES, 0); }
	public T_VAR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VAR, 0); }
	public T_VARCHAR(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VARCHAR, 0); }
	public T_VARCHAR2(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VARCHAR2, 0); }
	public T_VARYING(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VARYING, 0); }
	public T_VARIANCE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VARIANCE, 0); }
	public T_VOLATILE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_VOLATILE, 0); }
	public T_WHILE(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_WHILE, 0); }
	public T_WITH(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_WITH, 0); }
	public T_WITHOUT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_WITHOUT, 0); }
	public T_WORK(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_WORK, 0); }
	public T_XACT_ABORT(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_XACT_ABORT, 0); }
	public T_XML(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_XML, 0); }
	public T_YES(): TerminalNode | undefined { return this.tryGetToken(HiveSql.T_YES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return HiveSql.RULE_non_reserved_words; }
	// @Override
	public enterRule(listener: HiveSqlListener): void {
		if (listener.enterNon_reserved_words) {
			listener.enterNon_reserved_words(this);
		}
	}
	// @Override
	public exitRule(listener: HiveSqlListener): void {
		if (listener.exitNon_reserved_words) {
			listener.exitNon_reserved_words(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveSqlVisitor<Result>): Result {
		if (visitor.visitNon_reserved_words) {
			return visitor.visitNon_reserved_words(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


