// Generated from /Users/yuwan/Desktop/yuwan/dt-sql-parser/src/grammar/flinksql/FlinkSqlParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var FlinkSqlParserListener = require('./FlinkSqlParserListener').FlinkSqlParserListener;
var FlinkSqlParserVisitor = require('./FlinkSqlParserVisitor').FlinkSqlParserVisitor;

var grammarFileName = "FlinkSqlParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0148\u075a\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0005\u0004",
    "\u0141\n\u0004\u0003\u0004\u0007\u0004\u0144\n\u0004\f\u0004\u000e\u0004",
    "\u0147\u000b\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u0155\n\u0005\u0003\u0006\u0003\u0006",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0005\u0007\u0167\n\u0007\u0003\b\u0003\b\u0005",
    "\b\u016b\n\b\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n",
    "\u0005\n\u0174\n\n\u0003\n\u0003\n\u0003\n\u0005\n\u0179\n\n\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0007\u000b\u017e\n\u000b\f\u000b\u000e\u000b",
    "\u0181\u000b\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0005\r\u0187\n\r",
    "\u0003\r\u0003\r\u0005\r\u018b\n\r\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0007\u000e\u0192\n\u000e\f\u000e\u000e\u000e",
    "\u0195\u000b\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u01a0",
    "\n\u000f\u0003\u000f\u0005\u000f\u01a3\n\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u01aa\n\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005",
    "\u000f\u01b2\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u01b7\n\u000f\u0003\u000f\u0005\u000f\u01ba\n\u000f\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u01c1\n\u0010",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012",
    "\u0005\u0012\u01c9\n\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u01cd",
    "\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u01d9\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u01e1\n\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u01e5\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u01fa\n\u0015",
    "\u0003\u0016\u0003\u0016\u0005\u0016\u01fe\n\u0016\u0003\u0017\u0003",
    "\u0017\u0005\u0017\u0202\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u0206\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0007\u0017\u020d\n\u0017\f\u0017\u000e\u0017\u0210\u000b\u0017",
    "\u0003\u0017\u0003\u0017\u0005\u0017\u0214\n\u0017\u0003\u0017\u0003",
    "\u0017\u0005\u0017\u0218\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u021c\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0220\n\u0017\u0003",
    "\u0017\u0005\u0017\u0223\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u0227\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u022c",
    "\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u0232\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0237",
    "\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u023c\n\u001a",
    "\u0003\u001a\u0005\u001a\u023f\n\u001a\u0003\u001b\u0003\u001b\u0005",
    "\u001b\u0243\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c",
    "\u0248\n\u001c\f\u001c\u000e\u001c\u024b\u000b\u001c\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0005\u001d\u0250\n\u001d\u0003\u001d\u0003\u001d",
    "\u0005\u001d\u0254\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0258",
    "\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u025c\n\u001d\u0003\u001d",
    "\u0003\u001d\u0005\u001d\u0260\n\u001d\u0003\u001d\u0003\u001d\u0005",
    "\u001d\u0264\n\u001d\u0005\u001d\u0266\n\u001d\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0005\u001f\u0270\n\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003",
    " \u0003 \u0005 \u0278\n \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0007#\u028e\n#\f#\u000e#\u0291\u000b",
    "#\u0003#\u0003#\u0003$\u0003$\u0005$\u0297\n$\u0003$\u0003$\u0003$\u0003",
    "$\u0005$\u029d\n$\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0005&\u02a7\n&\u0003&\u0005&\u02aa\n&\u0003\'\u0003\'\u0003(\u0003",
    "(\u0003(\u0003(\u0005(\u02b2\n(\u0003)\u0003)\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003+\u0003+\u0005+\u02be\n+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0005+\u02c7\n+\u0003,\u0003,\u0003-\u0003-\u0003",
    "-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0007",
    "/\u02d7\n/\f/\u000e/\u02da\u000b/\u0003/\u0003/\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00070\u02e4\n0\f0\u000e0\u02e7\u000b0\u0003",
    "0\u00030\u00050\u02eb\n0\u00031\u00031\u00051\u02ef\n1\u00032\u0003",
    "2\u00032\u00032\u00072\u02f5\n2\f2\u000e2\u02f8\u000b2\u00032\u0005",
    "2\u02fb\n2\u00033\u00033\u00034\u00034\u00034\u00034\u00054\u0303\n",
    "4\u00035\u00035\u00035\u00035\u00035\u00036\u00036\u00036\u00056\u030d",
    "\n6\u00036\u00036\u00056\u0311\n6\u00036\u00036\u00037\u00037\u0005",
    "7\u0317\n7\u00037\u00037\u00057\u031b\n7\u00037\u00037\u00057\u031f",
    "\n7\u00037\u00057\u0322\n7\u00037\u00037\u00037\u00038\u00038\u0003",
    "8\u00038\u00058\u032b\n8\u00038\u00038\u00058\u032f\n8\u00038\u0003",
    "8\u00038\u00038\u00038\u00058\u0336\n8\u00038\u00058\u0339\n8\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00079\u0341\n9\f9\u000e9\u0344",
    "\u000b9\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u034d",
    "\n;\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0003>\u0005>\u035c\n>\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003@\u0003@\u0003@\u0003@\u0005@\u0367\n@\u0003@\u0003@\u0005@\u036b",
    "\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u0372\n@\u0003A\u0003",
    "A\u0003A\u0005A\u0377\nA\u0003A\u0003A\u0003B\u0003B\u0005B\u037d\n",
    "B\u0003B\u0003B\u0005B\u0381\nB\u0003B\u0003B\u0003C\u0003C\u0003C\u0005",
    "C\u0388\nC\u0003C\u0003C\u0005C\u038c\nC\u0003D\u0003D\u0005D\u0390",
    "\nD\u0003D\u0003D\u0005D\u0394\nD\u0003D\u0003D\u0003E\u0003E\u0003",
    "E\u0003E\u0005E\u039c\nE\u0003E\u0003E\u0005E\u03a0\nE\u0003E\u0003",
    "E\u0003F\u0005F\u03a5\nF\u0003F\u0003F\u0003F\u0003F\u0005F\u03ab\n",
    "F\u0003G\u0003G\u0003G\u0003G\u0005G\u03b1\nG\u0003G\u0005G\u03b4\n",
    "G\u0003G\u0003G\u0005G\u03b8\nG\u0003H\u0003H\u0003H\u0003I\u0003I\u0003",
    "I\u0003I\u0003J\u0003J\u0003J\u0003J\u0007J\u03c5\nJ\fJ\u000eJ\u03c8",
    "\u000bJ\u0003K\u0003K\u0003K\u0003K\u0007K\u03ce\nK\fK\u000eK\u03d1",
    "\u000bK\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0006L\u03dc\nL\rL\u000eL\u03dd\u0003L\u0003L\u0003M\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0006M\u03e8\nM\rM\u000eM\u03e9\u0003M\u0003",
    "M\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0007N\u03f4\nN\fN\u000e",
    "N\u03f7\u000bN\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0005N\u0401\nN\u0003N\u0005N\u0404\nN\u0003N\u0003N\u0005N\u0408",
    "\nN\u0003N\u0005N\u040b\nN\u0005N\u040d\nN\u0003N\u0003N\u0003N\u0005",
    "N\u0412\nN\u0003N\u0003N\u0005N\u0416\nN\u0003N\u0005N\u0419\nN\u0007",
    "N\u041b\nN\fN\u000eN\u041e\u000bN\u0003O\u0003O\u0003O\u0003O\u0007",
    "O\u0424\nO\fO\u000eO\u0427\u000bO\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0007P\u042e\nP\fP\u000eP\u0431\u000bP\u0003P\u0003P\u0005P\u0435",
    "\nP\u0003P\u0003P\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003R\u0003R\u0003",
    "R\u0005R\u0441\nR\u0003R\u0005R\u0444\nR\u0003R\u0005R\u0447\nR\u0003",
    "R\u0005R\u044a\nR\u0003S\u0003S\u0005S\u044e\nS\u0003S\u0003S\u0003",
    "S\u0003S\u0007S\u0454\nS\fS\u000eS\u0457\u000bS\u0005S\u0459\nS\u0003",
    "T\u0003T\u0005T\u045d\nT\u0003T\u0005T\u0460\nT\u0003U\u0003U\u0003",
    "U\u0003V\u0003V\u0003V\u0003V\u0007V\u0469\nV\fV\u000eV\u046c\u000b",
    "V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u0474\nV\u0003V\u0005",
    "V\u0477\nV\u0003V\u0005V\u047a\nV\u0003V\u0003V\u0003V\u0005V\u047f",
    "\nV\u0007V\u0481\nV\fV\u000eV\u0484\u000bV\u0003W\u0003W\u0005W\u0488",
    "\nW\u0003X\u0005X\u048b\nX\u0003X\u0003X\u0005X\u048f\nX\u0003X\u0005",
    "X\u0492\nX\u0003X\u0005X\u0495\nX\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0007X\u049f\nX\fX\u000eX\u04a2\u000bX\u0003",
    "X\u0003X\u0003X\u0003X\u0005X\u04a8\nX\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0005X\u04b3\nX\u0003Y\u0003Y\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0003\\\u0003\\\u0003\\",
    "\u0003\\\u0003\\\u0003\\\u0003\\\u0007\\\u04c6\n\\\f\\\u000e\\\u04c9",
    "\u000b\\\u0003\\\u0003\\\u0005\\\u04cd\n\\\u0003]\u0003]\u0003]\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0007^\u04d7\n^\f^\u000e^\u04da\u000b",
    "^\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0007_\u04e3\n_\f",
    "_\u000e_\u04e6\u000b_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003",
    "_\u0007_\u04ef\n_\f_\u000e_\u04f2\u000b_\u0003_\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0007_\u04fb\n_\f_\u000e_\u04fe\u000b_\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0007_\u0508\n_\f",
    "_\u000e_\u050b\u000b_\u0003_\u0003_\u0005_\u050f\n_\u0003`\u0003`\u0003",
    "`\u0003a\u0003a\u0003a\u0003a\u0003a\u0007a\u0519\na\fa\u000ea\u051c",
    "\u000ba\u0003b\u0003b\u0005b\u0520\nb\u0003c\u0003c\u0003c\u0005c\u0525",
    "\nc\u0003d\u0003d\u0003d\u0003d\u0007d\u052b\nd\fd\u000ed\u052e\u000b",
    "d\u0003e\u0003e\u0003e\u0003e\u0003f\u0005f\u0535\nf\u0003f\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0007f\u053d\nf\ff\u000ef\u0540\u000bf\u0005",
    "f\u0542\nf\u0003f\u0003f\u0003f\u0003f\u0003f\u0007f\u0549\nf\ff\u000e",
    "f\u054c\u000bf\u0005f\u054e\nf\u0003f\u0005f\u0551\nf\u0003f\u0003f",
    "\u0003g\u0003g\u0005g\u0557\ng\u0003g\u0003g\u0005g\u055b\ng\u0003h",
    "\u0003h\u0003h\u0003h\u0005h\u0561\nh\u0003i\u0003i\u0003i\u0003j\u0003",
    "j\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003",
    "k\u0005k\u0572\nk\u0005k\u0574\nk\u0003k\u0003k\u0003k\u0003k\u0003",
    "k\u0003k\u0007k\u057c\nk\fk\u000ek\u057f\u000bk\u0003l\u0005l\u0582",
    "\nl\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0005l\u058a\nl\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0007l\u0591\nl\fl\u000el\u0594\u000b",
    "l\u0003l\u0003l\u0003l\u0005l\u0599\nl\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0005l\u05a6\nl\u0003l\u0003",
    "l\u0003l\u0005l\u05ab\nl\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0007l\u05b5\nl\fl\u000el\u05b8\u000bl\u0003l\u0003l\u0005",
    "l\u05bc\nl\u0003l\u0005l\u05bf\nl\u0003l\u0003l\u0003l\u0003l\u0005",
    "l\u05c5\nl\u0003l\u0003l\u0003l\u0005l\u05ca\nl\u0003l\u0003l\u0003",
    "l\u0005l\u05cf\nl\u0003l\u0003l\u0003l\u0005l\u05d4\nl\u0003m\u0005",
    "m\u05d7\nm\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0007",
    "m\u05e1\nm\fm\u000em\u05e4\u000bm\u0003m\u0003m\u0005m\u05e8\nm\u0003",
    "m\u0005m\u05eb\nm\u0003m\u0003m\u0005m\u05ef\nm\u0003n\u0003n\u0003",
    "n\u0003n\u0005n\u05f5\nn\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0003n\u0007n\u060a\nn\fn\u000en\u060d\u000bn\u0003o\u0003",
    "o\u0003o\u0006o\u0612\no\ro\u000eo\u0613\u0003o\u0003o\u0005o\u0618",
    "\no\u0003o\u0003o\u0003o\u0003o\u0003o\u0006o\u061f\no\ro\u000eo\u0620",
    "\u0003o\u0003o\u0005o\u0625\no\u0003o\u0003o\u0003o\u0003o\u0003o\u0003",
    "o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0005o\u0635",
    "\no\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0005o\u063e\n",
    "o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003",
    "o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003o\u0003",
    "o\u0003o\u0003o\u0005o\u0656\no\u0003o\u0003o\u0003o\u0007o\u065b\n",
    "o\fo\u000eo\u065e\u000bo\u0005o\u0660\no\u0003o\u0003o\u0003o\u0003",
    "o\u0003o\u0003o\u0003o\u0003o\u0005o\u066a\no\u0003o\u0003o\u0003o\u0003",
    "o\u0003o\u0007o\u0671\no\fo\u000eo\u0674\u000bo\u0003p\u0003p\u0003",
    "q\u0003q\u0003r\u0003r\u0003s\u0003s\u0005s\u067e\ns\u0003t\u0003t\u0003",
    "t\u0005t\u0683\nt\u0003u\u0003u\u0005u\u0687\nu\u0003v\u0003v\u0003",
    "v\u0006v\u068c\nv\rv\u000ev\u068d\u0003w\u0003w\u0003w\u0005w\u0693",
    "\nw\u0003x\u0003x\u0003x\u0003x\u0003x\u0003y\u0005y\u069b\ny\u0003",
    "y\u0003y\u0005y\u069f\ny\u0003z\u0005z\u06a2\nz\u0003z\u0003z\u0005",
    "z\u06a6\nz\u0003{\u0005{\u06a9\n{\u0003{\u0003{\u0005{\u06ad\n{\u0003",
    "|\u0003|\u0003|\u0003}\u0003}\u0006}\u06b4\n}\r}\u000e}\u06b5\u0003",
    "}\u0005}\u06b9\n}\u0003~\u0003~\u0003~\u0003~\u0003\u007f\u0003\u007f",
    "\u0003\u007f\u0007\u007f\u06c2\n\u007f\f\u007f\u000e\u007f\u06c5\u000b",
    "\u007f\u0003\u0080\u0003\u0080\u0005\u0080\u06c9\n\u0080\u0003\u0081",
    "\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u06cf\n\u0081\u0003",
    "\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0003\u0084\u0003\u0084\u0003",
    "\u0084\u0003\u0084\u0003\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0007",
    "\u0085\u06dd\n\u0085\f\u0085\u000e\u0085\u06e0\u000b\u0085\u0003\u0086",
    "\u0003\u0086\u0007\u0086\u06e4\n\u0086\f\u0086\u000e\u0086\u06e7\u000b",
    "\u0086\u0003\u0087\u0003\u0087\u0007\u0087\u06eb\n\u0087\f\u0087\u000e",
    "\u0087\u06ee\u000b\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008a",
    "\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0007\u008b\u06fe\n",
    "\u008b\f\u008b\u000e\u008b\u0701\u000b\u008b\u0003\u008b\u0003\u008b",
    "\u0003\u008c\u0003\u008c\u0005\u008c\u0707\n\u008c\u0003\u008c\u0005",
    "\u008c\u070a\n\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0005\u008d",
    "\u070f\n\u008d\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0005",
    "\u008e\u0715\n\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0003\u008f\u0003\u008f\u0005\u008f\u071d\n\u008f\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0005\u0090\u072d\n\u0090\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0005\u0091\u0736\n",
    "\u0091\u0003\u0092\u0003\u0092\u0003\u0093\u0003\u0093\u0003\u0094\u0003",
    "\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0005\u0095\u0747\n\u0095",
    "\u0003\u0095\u0005\u0095\u074a\n\u0095\u0003\u0096\u0003\u0096\u0003",
    "\u0097\u0003\u0097\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0003",
    "\u009a\u0003\u009a\u0003\u009b\u0003\u009b\u0003\u009c\u0003\u009c\u0003",
    "\u009c\u0004\u06e5\u06ec\u0007\u009a\u00aa\u00d4\u00da\u00dc\u009d\u0002",
    "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e",
    " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc",
    "\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4",
    "\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc",
    "\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114",
    "\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c",
    "\u012e\u0130\u0132\u0134\u0136\u0002)\u0004\u0002&&UU\u0003\u0002XZ",
    "\u0004\u0002\u00c2\u00c2\u00fe\u0100\u0004\u0002\u00c1\u00c1\u00f0\u00f0",
    "\u0004\u0002\u0007\u0007\u001a\u001a\u0004\u0002KKMM\u0004\u0002\b\b",
    "SS\u0003\u0002\u00f7\u00fb\u0005\u0002\u011a\u011a\u011f\u011f\u0122",
    "\u0122\u0007\u0002\u0108\u0108\u010b\u010f\u0113\u0117\u011b\u011d\u0123",
    "\u0123\u0004\u0002\u0110\u0112\u0118\u0119\u0004\u0002\u0109\u0109\u011e",
    "\u011e\u0003\u0002\u00ea\u00eb\u0005\u0002\n\ngg\u00ed\u00ed\u0003\u0002",
    "\u00ea\u00ec\u0004\u0002\u00a8\u00a8\u00ee\u00ef\u0003\u0002\u00f2\u00f4",
    "\u0004\u0002\u00b9\u00b9\u00bb\u00bb\u0004\u0002TT\u008d\u008d\u0004",
    "\u0002jkmm\u0004\u00022356\u0003\u0002%&\u0004\u0002EEGG\u0003\u0002",
    "\n\u000b\u0003\u0002\"#\u0004\u0002\u0128\u0128\u013a\u013b\u0006\u0002",
    "\u0085\u0085\u0138\u0138\u013c\u013c\u013f\u013f\u0004\u0002\u013a\u013b",
    "\u013d\u013d\u0003\u0002\u013a\u013b\u0003\u0002\u0143\u0144\u0004\u0002",
    "\u0143\u0143\u0146\u0146\u0003\u0002\u0146\u0147\u0003\u0002\u0140\u0141",
    "\u0006\u0002\u0085\u0085\u0138\u0138\u013a\u013c\u013e\u013f\u0005\u0002",
    "\u001b\u001b\u0127\u0128\u013a\u013b\u0004\u0002\n\n\f\f\"\u0002\b\b",
    "\u000f\u0013\u0016\u0017\u001c \"\"$&((44:GIILNQRUV[^`bddgillo}\u0081",
    "\u008f\u0091\u00b9\u00bb\u00cc\u00ce\u00d5\u00d7\u00eb\u00ed\u00ee\u00f0",
    "\u00f1\u00fe\u00ff\u0102\u0104\u0108\u0110\u0113\u0115\u0117\u011c\u011e",
    "\u0123\b\u0002/02689jm\u0090\u0090\u00e0\u00e0\u0018\u0002\u0006,..",
    "1177:NQRTV[dgin\u008f\u0091\u00b1\u00b3\u00d5\u00d7\u00df\u00e1\u00eb",
    "\u00ed\u00ee\u00f0\u00f1\u00fe\u00ff\u0101\u0104\u0108\u0110\u0113\u0115",
    "\u0117\u011c\u011e\u0123\u0002\u0801\u0002\u0138\u0003\u0002\u0002\u0002",
    "\u0004\u013b\u0003\u0002\u0002\u0002\u0006\u0145\u0003\u0002\u0002\u0002",
    "\b\u0154\u0003\u0002\u0002\u0002\n\u0156\u0003\u0002\u0002\u0002\f\u0166",
    "\u0003\u0002\u0002\u0002\u000e\u016a\u0003\u0002\u0002\u0002\u0010\u016c",
    "\u0003\u0002\u0002\u0002\u0012\u016f\u0003\u0002\u0002\u0002\u0014\u017a",
    "\u0003\u0002\u0002\u0002\u0016\u0182\u0003\u0002\u0002\u0002\u0018\u018a",
    "\u0003\u0002\u0002\u0002\u001a\u018c\u0003\u0002\u0002\u0002\u001c\u01b9",
    "\u0003\u0002\u0002\u0002\u001e\u01bb\u0003\u0002\u0002\u0002 \u01c2",
    "\u0003\u0002\u0002\u0002\"\u01c6\u0003\u0002\u0002\u0002$\u01ca\u0003",
    "\u0002\u0002\u0002&\u01ce\u0003\u0002\u0002\u0002(\u01f9\u0003\u0002",
    "\u0002\u0002*\u01fd\u0003\u0002\u0002\u0002,\u01ff\u0003\u0002\u0002",
    "\u0002.\u0228\u0003\u0002\u0002\u00020\u0236\u0003\u0002\u0002\u0002",
    "2\u0238\u0003\u0002\u0002\u00024\u0242\u0003\u0002\u0002\u00026\u0244",
    "\u0003\u0002\u0002\u00028\u0265\u0003\u0002\u0002\u0002:\u0267\u0003",
    "\u0002\u0002\u0002<\u026b\u0003\u0002\u0002\u0002>\u0273\u0003\u0002",
    "\u0002\u0002@\u027b\u0003\u0002\u0002\u0002B\u027f\u0003\u0002\u0002",
    "\u0002D\u0286\u0003\u0002\u0002\u0002F\u0296\u0003\u0002\u0002\u0002",
    "H\u029e\u0003\u0002\u0002\u0002J\u02a1\u0003\u0002\u0002\u0002L\u02ab",
    "\u0003\u0002\u0002\u0002N\u02ad\u0003\u0002\u0002\u0002P\u02b3\u0003",
    "\u0002\u0002\u0002R\u02b5\u0003\u0002\u0002\u0002T\u02bd\u0003\u0002",
    "\u0002\u0002V\u02c8\u0003\u0002\u0002\u0002X\u02ca\u0003\u0002\u0002",
    "\u0002Z\u02ce\u0003\u0002\u0002\u0002\\\u02d2\u0003\u0002\u0002\u0002",
    "^\u02ea\u0003\u0002\u0002\u0002`\u02ee\u0003\u0002\u0002\u0002b\u02f0",
    "\u0003\u0002\u0002\u0002d\u02fc\u0003\u0002\u0002\u0002f\u0302\u0003",
    "\u0002\u0002\u0002h\u0304\u0003\u0002\u0002\u0002j\u0309\u0003\u0002",
    "\u0002\u0002l\u0314\u0003\u0002\u0002\u0002n\u0326\u0003\u0002\u0002",
    "\u0002p\u033a\u0003\u0002\u0002\u0002r\u0345\u0003\u0002\u0002\u0002",
    "t\u0347\u0003\u0002\u0002\u0002v\u034e\u0003\u0002\u0002\u0002x\u0352",
    "\u0003\u0002\u0002\u0002z\u0355\u0003\u0002\u0002\u0002|\u035d\u0003",
    "\u0002\u0002\u0002~\u0362\u0003\u0002\u0002\u0002\u0080\u0373\u0003",
    "\u0002\u0002\u0002\u0082\u037a\u0003\u0002\u0002\u0002\u0084\u0384\u0003",
    "\u0002\u0002\u0002\u0086\u038d\u0003\u0002\u0002\u0002\u0088\u0397\u0003",
    "\u0002\u0002\u0002\u008a\u03aa\u0003\u0002\u0002\u0002\u008c\u03ac\u0003",
    "\u0002\u0002\u0002\u008e\u03b9\u0003\u0002\u0002\u0002\u0090\u03bc\u0003",
    "\u0002\u0002\u0002\u0092\u03c0\u0003\u0002\u0002\u0002\u0094\u03c9\u0003",
    "\u0002\u0002\u0002\u0096\u03d4\u0003\u0002\u0002\u0002\u0098\u03e1\u0003",
    "\u0002\u0002\u0002\u009a\u040c\u0003\u0002\u0002\u0002\u009c\u041f\u0003",
    "\u0002\u0002\u0002\u009e\u0428\u0003\u0002\u0002\u0002\u00a0\u043b\u0003",
    "\u0002\u0002\u0002\u00a2\u043d\u0003\u0002\u0002\u0002\u00a4\u044b\u0003",
    "\u0002\u0002\u0002\u00a6\u045a\u0003\u0002\u0002\u0002\u00a8\u0461\u0003",
    "\u0002\u0002\u0002\u00aa\u0464\u0003\u0002\u0002\u0002\u00ac\u0485\u0003",
    "\u0002\u0002\u0002\u00ae\u04b2\u0003\u0002\u0002\u0002\u00b0\u04b4\u0003",
    "\u0002\u0002\u0002\u00b2\u04b6\u0003\u0002\u0002\u0002\u00b4\u04bc\u0003",
    "\u0002\u0002\u0002\u00b6\u04cc\u0003\u0002\u0002\u0002\u00b8\u04ce\u0003",
    "\u0002\u0002\u0002\u00ba\u04d1\u0003\u0002\u0002\u0002\u00bc\u050e\u0003",
    "\u0002\u0002\u0002\u00be\u0510\u0003\u0002\u0002\u0002\u00c0\u0513\u0003",
    "\u0002\u0002\u0002\u00c2\u051d\u0003\u0002\u0002\u0002\u00c4\u0521\u0003",
    "\u0002\u0002\u0002\u00c6\u0526\u0003\u0002\u0002\u0002\u00c8\u052f\u0003",
    "\u0002\u0002\u0002\u00ca\u0534\u0003\u0002\u0002\u0002\u00cc\u0554\u0003",
    "\u0002\u0002\u0002\u00ce\u0560\u0003\u0002\u0002\u0002\u00d0\u0562\u0003",
    "\u0002\u0002\u0002\u00d2\u0565\u0003\u0002\u0002\u0002\u00d4\u0573\u0003",
    "\u0002\u0002\u0002\u00d6\u05d3\u0003\u0002\u0002\u0002\u00d8\u05ee\u0003",
    "\u0002\u0002\u0002\u00da\u05f4\u0003\u0002\u0002\u0002\u00dc\u0669\u0003",
    "\u0002\u0002\u0002\u00de\u0675\u0003\u0002\u0002\u0002\u00e0\u0677\u0003",
    "\u0002\u0002\u0002\u00e2\u0679\u0003\u0002\u0002\u0002\u00e4\u067d\u0003",
    "\u0002\u0002\u0002\u00e6\u067f\u0003\u0002\u0002\u0002\u00e8\u0684\u0003",
    "\u0002\u0002\u0002\u00ea\u068b\u0003\u0002\u0002\u0002\u00ec\u068f\u0003",
    "\u0002\u0002\u0002\u00ee\u0694\u0003\u0002\u0002\u0002\u00f0\u069e\u0003",
    "\u0002\u0002\u0002\u00f2\u06a1\u0003\u0002\u0002\u0002\u00f4\u06a8\u0003",
    "\u0002\u0002\u0002\u00f6\u06ae\u0003\u0002\u0002\u0002\u00f8\u06b8\u0003",
    "\u0002\u0002\u0002\u00fa\u06ba\u0003\u0002\u0002\u0002\u00fc\u06be\u0003",
    "\u0002\u0002\u0002\u00fe\u06c8\u0003\u0002\u0002\u0002\u0100\u06ce\u0003",
    "\u0002\u0002\u0002\u0102\u06d0\u0003\u0002\u0002\u0002\u0104\u06d2\u0003",
    "\u0002\u0002\u0002\u0106\u06d4\u0003\u0002\u0002\u0002\u0108\u06d9\u0003",
    "\u0002\u0002\u0002\u010a\u06e1\u0003\u0002\u0002\u0002\u010c\u06e8\u0003",
    "\u0002\u0002\u0002\u010e\u06ef\u0003\u0002\u0002\u0002\u0110\u06f2\u0003",
    "\u0002\u0002\u0002\u0112\u06f6\u0003\u0002\u0002\u0002\u0114\u06f9\u0003",
    "\u0002\u0002\u0002\u0116\u0704\u0003\u0002\u0002\u0002\u0118\u070e\u0003",
    "\u0002\u0002\u0002\u011a\u0714\u0003\u0002\u0002\u0002\u011c\u071c\u0003",
    "\u0002\u0002\u0002\u011e\u072c\u0003\u0002\u0002\u0002\u0120\u0735\u0003",
    "\u0002\u0002\u0002\u0122\u0737\u0003\u0002\u0002\u0002\u0124\u0739\u0003",
    "\u0002\u0002\u0002\u0126\u073b\u0003\u0002\u0002\u0002\u0128\u0749\u0003",
    "\u0002\u0002\u0002\u012a\u074b\u0003\u0002\u0002\u0002\u012c\u074d\u0003",
    "\u0002\u0002\u0002\u012e\u074f\u0003\u0002\u0002\u0002\u0130\u0751\u0003",
    "\u0002\u0002\u0002\u0132\u0753\u0003\u0002\u0002\u0002\u0134\u0755\u0003",
    "\u0002\u0002\u0002\u0136\u0757\u0003\u0002\u0002\u0002\u0138\u0139\u0005",
    "\u0004\u0003\u0002\u0139\u013a\u0007\u0002\u0002\u0003\u013a\u0003\u0003",
    "\u0002\u0002\u0002\u013b\u013c\u0005\u0006\u0004\u0002\u013c\u013d\u0007",
    "\u0002\u0002\u0003\u013d\u0005\u0003\u0002\u0002\u0002\u013e\u0140\u0005",
    "\b\u0005\u0002\u013f\u0141\u0007\u0132\u0002\u0002\u0140\u013f\u0003",
    "\u0002\u0002\u0002\u0140\u0141\u0003\u0002\u0002\u0002\u0141\u0144\u0003",
    "\u0002\u0002\u0002\u0142\u0144\u0005\n\u0006\u0002\u0143\u013e\u0003",
    "\u0002\u0002\u0002\u0143\u0142\u0003\u0002\u0002\u0002\u0144\u0147\u0003",
    "\u0002\u0002\u0002\u0145\u0143\u0003\u0002\u0002\u0002\u0145\u0146\u0003",
    "\u0002\u0002\u0002\u0146\u0007\u0003\u0002\u0002\u0002\u0147\u0145\u0003",
    "\u0002\u0002\u0002\u0148\u0155\u0005\f\u0007\u0002\u0149\u0155\u0005",
    "\u000e\b\u0002\u014a\u0155\u0005\u0010\t\u0002\u014b\u0155\u0005\u0012",
    "\n\u0002\u014c\u0155\u0005\u0018\r\u0002\u014d\u0155\u0005\u001c\u000f",
    "\u0002\u014e\u0155\u0005\u001e\u0010\u0002\u014f\u0155\u0005 \u0011",
    "\u0002\u0150\u0155\u0005\"\u0012\u0002\u0151\u0155\u0005$\u0013\u0002",
    "\u0152\u0155\u0005&\u0014\u0002\u0153\u0155\u0005(\u0015\u0002\u0154",
    "\u0148\u0003\u0002\u0002\u0002\u0154\u0149\u0003\u0002\u0002\u0002\u0154",
    "\u014a\u0003\u0002\u0002\u0002\u0154\u014b\u0003\u0002\u0002\u0002\u0154",
    "\u014c\u0003\u0002\u0002\u0002\u0154\u014d\u0003\u0002\u0002\u0002\u0154",
    "\u014e\u0003\u0002\u0002\u0002\u0154\u014f\u0003\u0002\u0002\u0002\u0154",
    "\u0150\u0003\u0002\u0002\u0002\u0154\u0151\u0003\u0002\u0002\u0002\u0154",
    "\u0152\u0003\u0002\u0002\u0002\u0154\u0153\u0003\u0002\u0002\u0002\u0155",
    "\t\u0003\u0002\u0002\u0002\u0156\u0157\u0007\u0132\u0002\u0002\u0157",
    "\u000b\u0003\u0002\u0002\u0002\u0158\u0167\u0005*\u0016\u0002\u0159",
    "\u0167\u0005j6\u0002\u015a\u0167\u0005l7\u0002\u015b\u0167\u0005n8\u0002",
    "\u015c\u0167\u0005h5\u0002\u015d\u0167\u0005t;\u0002\u015e\u0167\u0005",
    "z>\u0002\u015f\u0167\u0005|?\u0002\u0160\u0167\u0005~@\u0002\u0161\u0167",
    "\u0005\u0080A\u0002\u0162\u0167\u0005\u0082B\u0002\u0163\u0167\u0005",
    "\u0084C\u0002\u0164\u0167\u0005\u0086D\u0002\u0165\u0167\u0005\u0088",
    "E\u0002\u0166\u0158\u0003\u0002\u0002\u0002\u0166\u0159\u0003\u0002",
    "\u0002\u0002\u0166\u015a\u0003\u0002\u0002\u0002\u0166\u015b\u0003\u0002",
    "\u0002\u0002\u0166\u015c\u0003\u0002\u0002\u0002\u0166\u015d\u0003\u0002",
    "\u0002\u0002\u0166\u015e\u0003\u0002\u0002\u0002\u0166\u015f\u0003\u0002",
    "\u0002\u0002\u0166\u0160\u0003\u0002\u0002\u0002\u0166\u0161\u0003\u0002",
    "\u0002\u0002\u0166\u0162\u0003\u0002\u0002\u0002\u0166\u0163\u0003\u0002",
    "\u0002\u0002\u0166\u0164\u0003\u0002\u0002\u0002\u0166\u0165\u0003\u0002",
    "\u0002\u0002\u0167\r\u0003\u0002\u0002\u0002\u0168\u016b\u0005\u009a",
    "N\u0002\u0169\u016b\u0005\u008aF\u0002\u016a\u0168\u0003\u0002\u0002",
    "\u0002\u016a\u0169\u0003\u0002\u0002\u0002\u016b\u000f\u0003\u0002\u0002",
    "\u0002\u016c\u016d\t\u0002\u0002\u0002\u016d\u016e\u0005\u010a\u0086",
    "\u0002\u016e\u0011\u0003\u0002\u0002\u0002\u016f\u0173\u0007V\u0002",
    "\u0002\u0170\u0174\u0005\u0014\u000b\u0002\u0171\u0172\u0007W\u0002",
    "\u0002\u0172\u0174\u0007\'\u0002\u0002\u0173\u0170\u0003\u0002\u0002",
    "\u0002\u0173\u0171\u0003\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002",
    "\u0002\u0174\u0178\u0003\u0002\u0002\u0002\u0175\u0179\u0005\u000e\b",
    "\u0002\u0176\u0179\u0005\u008cG\u0002\u0177\u0179\u0005\u0098M\u0002",
    "\u0178\u0175\u0003\u0002\u0002\u0002\u0178\u0176\u0003\u0002\u0002\u0002",
    "\u0178\u0177\u0003\u0002\u0002\u0002\u0179\u0013\u0003\u0002\u0002\u0002",
    "\u017a\u017f\u0005\u0016\f\u0002\u017b\u017c\u0007\u0131\u0002\u0002",
    "\u017c\u017e\u0005\u0016\f\u0002\u017d\u017b\u0003\u0002\u0002\u0002",
    "\u017e\u0181\u0003\u0002\u0002\u0002\u017f\u017d\u0003\u0002\u0002\u0002",
    "\u017f\u0180\u0003\u0002\u0002\u0002\u0180\u0015\u0003\u0002\u0002\u0002",
    "\u0181\u017f\u0003\u0002\u0002\u0002\u0182\u0183\t\u0003\u0002\u0002",
    "\u0183\u0017\u0003\u0002\u0002\u0002\u0184\u0186\u0007d\u0002\u0002",
    "\u0185\u0187\u0007\u00f0\u0002\u0002\u0186\u0185\u0003\u0002\u0002\u0002",
    "\u0186\u0187\u0003\u0002\u0002\u0002\u0187\u0188\u0003\u0002\u0002\u0002",
    "\u0188\u018b\u0005\u010a\u0086\u0002\u0189\u018b\u0005\u001a\u000e\u0002",
    "\u018a\u0184\u0003\u0002\u0002\u0002\u018a\u0189\u0003\u0002\u0002\u0002",
    "\u018b\u0019\u0003\u0002\u0002\u0002\u018c\u018d\u0007d\u0002\u0002",
    "\u018d\u018e\u0007f\u0002\u0002\u018e\u0193\u0005\u010a\u0086\u0002",
    "\u018f\u0190\u0007\u0131\u0002\u0002\u0190\u0192\u0005\u010a\u0086\u0002",
    "\u0191\u018f\u0003\u0002\u0002\u0002\u0192\u0195\u0003\u0002\u0002\u0002",
    "\u0193\u0191\u0003\u0002\u0002\u0002\u0193\u0194\u0003\u0002\u0002\u0002",
    "\u0194\u001b\u0003\u0002\u0002\u0002\u0195\u0193\u0003\u0002\u0002\u0002",
    "\u0196\u0197\u0007`\u0002\u0002\u0197\u01ba\t\u0004\u0002\u0002\u0198",
    "\u0199\u0007`\u0002\u0002\u0199\u019a\u0007D\u0002\u0002\u019a\u01ba",
    "\t\u0005\u0002\u0002\u019b\u019c\u0007`\u0002\u0002\u019c\u019f\u0007",
    "a\u0002\u0002\u019d\u019e\t\u0006\u0002\u0002\u019e\u01a0\u0005\u010a",
    "\u0086\u0002\u019f\u019d\u0003\u0002\u0002\u0002\u019f\u01a0\u0003\u0002",
    "\u0002\u0002\u01a0\u01a2\u0003\u0002\u0002\u0002\u01a1\u01a3\u0005\u00d8",
    "m\u0002\u01a2\u01a1\u0003\u0002\u0002\u0002\u01a2\u01a3\u0003\u0002",
    "\u0002\u0002\u01a3\u01ba\u0003\u0002\u0002\u0002\u01a4\u01a5\u0007`",
    "\u0002\u0002\u01a5\u01a6\u0007b\u0002\u0002\u01a6\u01a7\t\u0006\u0002",
    "\u0002\u01a7\u01a9\u0005\u010a\u0086\u0002\u01a8\u01aa\u0005\u00d8m",
    "\u0002\u01a9\u01a8\u0003\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002",
    "\u0002\u01aa\u01ba\u0003\u0002\u0002\u0002\u01ab\u01ac\u0007`\u0002",
    "\u0002\u01ac\u01ad\u0007J\u0002\u0002\u01ad\u01ae\t\u0007\u0002\u0002",
    "\u01ae\u01ba\u0005\u010a\u0086\u0002\u01af\u01b1\u0007`\u0002\u0002",
    "\u01b0\u01b2\u00077\u0002\u0002\u01b1\u01b0\u0003\u0002\u0002\u0002",
    "\u01b1\u01b2\u0003\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002\u0002",
    "\u01b3\u01ba\u0007h\u0002\u0002\u01b4\u01b6\u0007`\u0002\u0002\u01b5",
    "\u01b7\u00076\u0002\u0002\u01b6\u01b5\u0003\u0002\u0002\u0002\u01b6",
    "\u01b7\u0003\u0002\u0002\u0002\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8",
    "\u01ba\u0007f\u0002\u0002\u01b9\u0196\u0003\u0002\u0002\u0002\u01b9",
    "\u0198\u0003\u0002\u0002\u0002\u01b9\u019b\u0003\u0002\u0002\u0002\u01b9",
    "\u01a4\u0003\u0002\u0002\u0002\u01b9\u01ab\u0003\u0002\u0002\u0002\u01b9",
    "\u01af\u0003\u0002\u0002\u0002\u01b9\u01b4\u0003\u0002\u0002\u0002\u01ba",
    "\u001d\u0003\u0002\u0002\u0002\u01bb\u01bc\u0007\u00d5\u0002\u0002\u01bc",
    "\u01bd\u0007e\u0002\u0002\u01bd\u01c0\u0005\u010a\u0086\u0002\u01be",
    "\u01bf\u0007H\u0002\u0002\u01bf\u01c1\u0005\u0114\u008b\u0002\u01c0",
    "\u01be\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002\u01c1",
    "\u001f\u0003\u0002\u0002\u0002\u01c2\u01c3\u0007\u00d6\u0002\u0002\u01c3",
    "\u01c4\u0007e\u0002\u0002\u01c4\u01c5\u0005\u010a\u0086\u0002\u01c5",
    "!\u0003\u0002\u0002\u0002\u01c6\u01c8\u0007u\u0002\u0002\u01c7\u01c9",
    "\u0005\u0116\u008c\u0002\u01c8\u01c7\u0003\u0002\u0002\u0002\u01c8\u01c9",
    "\u0003\u0002\u0002\u0002\u01c9#\u0003\u0002\u0002\u0002\u01ca\u01cc",
    "\u0007v\u0002\u0002\u01cb\u01cd\u0005\u0118\u008d\u0002\u01cc\u01cb",
    "\u0003\u0002\u0002\u0002\u01cc\u01cd\u0003\u0002\u0002\u0002\u01cd%",
    "\u0003\u0002\u0002\u0002\u01ce\u01cf\t\b\u0002\u0002\u01cf\u01d0\u0007",
    "\u00f5\u0002\u0002\u01d0\u01d1\u0005r:\u0002\u01d1\'\u0003\u0002\u0002",
    "\u0002\u01d2\u01d3\u0007\b\u0002\u0002\u01d3\u01d4\u0007\u00f5\u0002",
    "\u0002\u01d4\u01d5\u0007H\u0002\u0002\u01d5\u01d8\u0007\u0148\u0002",
    "\u0002\u01d6\u01d7\u0007\t\u0002\u0002\u01d7\u01d9\u0005\u010a\u0086",
    "\u0002\u01d8\u01d6\u0003\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002",
    "\u0002\u01d9\u01fa\u0003\u0002\u0002\u0002\u01da\u01db\u0007\b\u0002",
    "\u0002\u01db\u01dc\u0007\u00f6\u0002\u0002\u01dc\u01dd\u0007H\u0002",
    "\u0002\u01dd\u01e0\u0007\u0148\u0002\u0002\u01de\u01df\u0007\t\u0002",
    "\u0002\u01df\u01e1\u0005\u010a\u0086\u0002\u01e0\u01de\u0003\u0002\u0002",
    "\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002\u01e1\u01e4\u0003\u0002\u0002",
    "\u0002\u01e2\u01e3\u0007r\u0002\u0002\u01e3\u01e5\u0005\u010a\u0086",
    "\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002",
    "\u0002\u01e5\u01fa\u0003\u0002\u0002\u0002\u01e6\u01e7\u0007\b\u0002",
    "\u0002\u01e7\u01e8\t\t\u0002\u0002\u01e8\u01e9\u0007H\u0002\u0002\u01e9",
    "\u01ea\u0007\u0148\u0002\u0002\u01ea\u01eb\u0007r\u0002\u0002\u01eb",
    "\u01fa\u0005\u010a\u0086\u0002\u01ec\u01ed\u0007\b\u0002\u0002\u01ed",
    "\u01ee\u0007\u00fc\u0002\u0002\u01ee\u01fa\u0007\u0148\u0002\u0002\u01ef",
    "\u01f0\u0007\b\u0002\u0002\u01f0\u01f1\u0007\u00fd\u0002\u0002\u01f1",
    "\u01f2\u0007\u00f6\u0002\u0002\u01f2\u01f3\u0007H\u0002\u0002\u01f3",
    "\u01f4\u0007\u0148\u0002\u0002\u01f4\u01f5\u0007r\u0002\u0002\u01f5",
    "\u01f6\u0005\u010a\u0086\u0002\u01f6\u01f7\u0007\u0102\u0002\u0002\u01f7",
    "\u01f8\u0005\u010a\u0086\u0002\u01f8\u01fa\u0003\u0002\u0002\u0002\u01f9",
    "\u01d2\u0003\u0002\u0002\u0002\u01f9\u01da\u0003\u0002\u0002\u0002\u01f9",
    "\u01e6\u0003\u0002\u0002\u0002\u01f9\u01ec\u0003\u0002\u0002\u0002\u01f9",
    "\u01ef\u0003\u0002\u0002\u0002\u01fa)\u0003\u0002\u0002\u0002\u01fb",
    "\u01fe\u0005,\u0017\u0002\u01fc\u01fe\u0005.\u0018\u0002\u01fd\u01fb",
    "\u0003\u0002\u0002\u0002\u01fd\u01fc\u0003\u0002\u0002\u0002\u01fe+",
    "\u0003\u0002\u0002\u0002\u01ff\u0201\u0007J\u0002\u0002\u0200\u0202",
    "\u0007\u00a7\u0002\u0002\u0201\u0200\u0003\u0002\u0002\u0002\u0201\u0202",
    "\u0003\u0002\u0002\u0002\u0202\u0203\u0003\u0002\u0002\u0002\u0203\u0205",
    "\u0007K\u0002\u0002\u0204\u0206\u0005\u0110\u0089\u0002\u0205\u0204",
    "\u0003\u0002\u0002\u0002\u0205\u0206\u0003\u0002\u0002\u0002\u0206\u0207",
    "\u0003\u0002\u0002\u0002\u0207\u0208\u0005d3\u0002\u0208\u0209\u0007",
    "\u012f\u0002\u0002\u0209\u020e\u00050\u0019\u0002\u020a\u020b\u0007",
    "\u0131\u0002\u0002\u020b\u020d\u00050\u0019\u0002\u020c\u020a\u0003",
    "\u0002\u0002\u0002\u020d\u0210\u0003\u0002\u0002\u0002\u020e\u020c\u0003",
    "\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0213\u0003",
    "\u0002\u0002\u0002\u0210\u020e\u0003\u0002\u0002\u0002\u0211\u0212\u0007",
    "\u0131\u0002\u0002\u0212\u0214\u0005R*\u0002\u0213\u0211\u0003\u0002",
    "\u0002\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214\u0217\u0003\u0002",
    "\u0002\u0002\u0215\u0216\u0007\u0131\u0002\u0002\u0216\u0218\u0005T",
    "+\u0002\u0217\u0215\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002",
    "\u0002\u0002\u0218\u021b\u0003\u0002\u0002\u0002\u0219\u021a\u0007\u0131",
    "\u0002\u0002\u021a\u021c\u0005X-\u0002\u021b\u0219\u0003\u0002\u0002",
    "\u0002\u021b\u021c\u0003\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002",
    "\u0002\u021d\u021f\u0007\u0130\u0002\u0002\u021e\u0220\u0005H%\u0002",
    "\u021f\u021e\u0003\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002",
    "\u0220\u0222\u0003\u0002\u0002\u0002\u0221\u0223\u0005Z.\u0002\u0222",
    "\u0221\u0003\u0002\u0002\u0002\u0222\u0223\u0003\u0002\u0002\u0002\u0223",
    "\u0224\u0003\u0002\u0002\u0002\u0224\u0226\u0005\u010e\u0088\u0002\u0225",
    "\u0227\u0005b2\u0002\u0226\u0225\u0003\u0002\u0002\u0002\u0226\u0227",
    "\u0003\u0002\u0002\u0002\u0227-\u0003\u0002\u0002\u0002\u0228\u0229",
    "\u0007J\u0002\u0002\u0229\u022b\u0007K\u0002\u0002\u022a\u022c\u0005",
    "\u0110\u0089\u0002\u022b\u022a\u0003\u0002\u0002\u0002\u022b\u022c\u0003",
    "\u0002\u0002\u0002\u022c\u022d\u0003\u0002\u0002\u0002\u022d\u022e\u0005",
    "d3\u0002\u022e\u0231\u0005\u010e\u0088\u0002\u022f\u0230\u0007\t\u0002",
    "\u0002\u0230\u0232\u0005\u009aN\u0002\u0231\u022f\u0003\u0002\u0002",
    "\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232/\u0003\u0002\u0002",
    "\u0002\u0233\u0237\u00052\u001a\u0002\u0234\u0237\u0005J&\u0002\u0235",
    "\u0237\u0005N(\u0002\u0236\u0233\u0003\u0002\u0002\u0002\u0236\u0234",
    "\u0003\u0002\u0002\u0002\u0236\u0235\u0003\u0002\u0002\u0002\u02371",
    "\u0003\u0002\u0002\u0002\u0238\u0239\u00054\u001b\u0002\u0239\u023b",
    "\u00058\u001d\u0002\u023a\u023c\u0005F$\u0002\u023b\u023a\u0003\u0002",
    "\u0002\u0002\u023b\u023c\u0003\u0002\u0002\u0002\u023c\u023e\u0003\u0002",
    "\u0002\u0002\u023d\u023f\u0005H%\u0002\u023e\u023d\u0003\u0002\u0002",
    "\u0002\u023e\u023f\u0003\u0002\u0002\u0002\u023f3\u0003\u0002\u0002",
    "\u0002\u0240\u0243\u0005\u010c\u0087\u0002\u0241\u0243\u0005\u00d2j",
    "\u0002\u0242\u0240\u0003\u0002\u0002\u0002\u0242\u0241\u0003\u0002\u0002",
    "\u0002\u02435\u0003\u0002\u0002\u0002\u0244\u0249\u00054\u001b\u0002",
    "\u0245\u0246\u0007\u0131\u0002\u0002\u0246\u0248\u00054\u001b\u0002",
    "\u0247\u0245\u0003\u0002\u0002\u0002\u0248\u024b\u0003\u0002\u0002\u0002",
    "\u0249\u0247\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002\u0002",
    "\u024a7\u0003\u0002\u0002\u0002\u024b\u0249\u0003\u0002\u0002\u0002",
    "\u024c\u0266\t\n\u0002\u0002\u024d\u024f\t\u000b\u0002\u0002\u024e\u0250",
    "\u0005:\u001e\u0002\u024f\u024e\u0003\u0002\u0002\u0002\u024f\u0250",
    "\u0003\u0002\u0002\u0002\u0250\u0266\u0003\u0002\u0002\u0002\u0251\u0253",
    "\t\f\u0002\u0002\u0252\u0254\u0005<\u001f\u0002\u0253\u0252\u0003\u0002",
    "\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002\u0254\u0266\u0003\u0002",
    "\u0002\u0002\u0255\u0257\t\r\u0002\u0002\u0256\u0258\u0005@!\u0002\u0257",
    "\u0256\u0003\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258",
    "\u0266\u0003\u0002\u0002\u0002\u0259\u025b\u0007\u010a\u0002\u0002\u025a",
    "\u025c\u0005B\"\u0002\u025b\u025a\u0003\u0002\u0002\u0002\u025b\u025c",
    "\u0003\u0002\u0002\u0002\u025c\u0266\u0003\u0002\u0002\u0002\u025d\u025f",
    "\u0007\u0121\u0002\u0002\u025e\u0260\u0005D#\u0002\u025f\u025e\u0003",
    "\u0002\u0002\u0002\u025f\u0260\u0003\u0002\u0002\u0002\u0260\u0266\u0003",
    "\u0002\u0002\u0002\u0261\u0263\u0007\u0120\u0002\u0002\u0262\u0264\u0005",
    "> \u0002\u0263\u0262\u0003\u0002\u0002\u0002\u0263\u0264\u0003\u0002",
    "\u0002\u0002\u0264\u0266\u0003\u0002\u0002\u0002\u0265\u024c\u0003\u0002",
    "\u0002\u0002\u0265\u024d\u0003\u0002\u0002\u0002\u0265\u0251\u0003\u0002",
    "\u0002\u0002\u0265\u0255\u0003\u0002\u0002\u0002\u0265\u0259\u0003\u0002",
    "\u0002\u0002\u0265\u025d\u0003\u0002\u0002\u0002\u0265\u0261\u0003\u0002",
    "\u0002\u0002\u02669\u0003\u0002\u0002\u0002\u0267\u0268\u0007\u012f",
    "\u0002\u0002\u0268\u0269\u0005\u012c\u0097\u0002\u0269\u026a\u0007\u0130",
    "\u0002\u0002\u026a;\u0003\u0002\u0002\u0002\u026b\u026c\u0007\u012f",
    "\u0002\u0002\u026c\u026f\u0005\u012c\u0097\u0002\u026d\u026e\u0007\u0131",
    "\u0002\u0002\u026e\u0270\u0005\u012c\u0097\u0002\u026f\u026d\u0003\u0002",
    "\u0002\u0002\u026f\u0270\u0003\u0002\u0002\u0002\u0270\u0271\u0003\u0002",
    "\u0002\u0002\u0271\u0272\u0007\u0130\u0002\u0002\u0272=\u0003\u0002",
    "\u0002\u0002\u0273\u0274\u0007\u012f\u0002\u0002\u0274\u0277\u0005\u012a",
    "\u0096\u0002\u0275\u0276\u0007\u0131\u0002\u0002\u0276\u0278\u0005\u012a",
    "\u0096\u0002\u0277\u0275\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002",
    "\u0002\u0002\u0278\u0279\u0003\u0002\u0002\u0002\u0279\u027a\u0007\u0130",
    "\u0002\u0002\u027a?\u0003\u0002\u0002\u0002\u027b\u027c\u0007\u0126",
    "\u0002\u0002\u027c\u027d\u00058\u001d\u0002\u027d\u027e\u0007\u0125",
    "\u0002\u0002\u027eA\u0003\u0002\u0002\u0002\u027f\u0280\u0007\u0126",
    "\u0002\u0002\u0280\u0281\u00058\u001d\u0002\u0281\u0282\u0007\u0131",
    "\u0002\u0002\u0282\u0283\u00058\u001d\u0002\u0283\u0284\u0003\u0002",
    "\u0002\u0002\u0284\u0285\u0007\u0125\u0002\u0002\u0285C\u0003\u0002",
    "\u0002\u0002\u0286\u0287\u0007\u0126\u0002\u0002\u0287\u0288\u00054",
    "\u001b\u0002\u0288\u028f\u00058\u001d\u0002\u0289\u028a\u0007\u0131",
    "\u0002\u0002\u028a\u028b\u00054\u001b\u0002\u028b\u028c\u00058\u001d",
    "\u0002\u028c\u028e\u0003\u0002\u0002\u0002\u028d\u0289\u0003\u0002\u0002",
    "\u0002\u028e\u0291\u0003\u0002\u0002\u0002\u028f\u028d\u0003\u0002\u0002",
    "\u0002\u028f\u0290\u0003\u0002\u0002\u0002\u0290\u0292\u0003\u0002\u0002",
    "\u0002\u0291\u028f\u0003\u0002\u0002\u0002\u0292\u0293\u0007\u0125\u0002",
    "\u0002\u0293E\u0003\u0002\u0002\u0002\u0294\u0295\u0007\u00ba\u0002",
    "\u0002\u0295\u0297\u0005V,\u0002\u0296\u0294\u0003\u0002\u0002\u0002",
    "\u0296\u0297\u0003\u0002\u0002\u0002\u0297\u0298\u0003\u0002\u0002\u0002",
    "\u0298\u0299\u0007\u0101\u0002\u0002\u0299\u029c\u0007\u0102\u0002\u0002",
    "\u029a\u029b\u0007\u001b\u0002\u0002\u029b\u029d\u0007\u0105\u0002\u0002",
    "\u029c\u029a\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002\u0002\u0002",
    "\u029dG\u0003\u0002\u0002\u0002\u029e\u029f\u0007t\u0002\u0002\u029f",
    "\u02a0\u0007\u0142\u0002\u0002\u02a0I\u0003\u0002\u0002\u0002\u02a1",
    "\u02a2\u00054\u001b\u0002\u02a2\u02a3\u00058\u001d\u0002\u02a3\u02a6",
    "\u0007\u0106\u0002\u0002\u02a4\u02a5\u0007\u0007\u0002\u0002\u02a5\u02a7",
    "\u0005L\'\u0002\u02a6\u02a4\u0003\u0002\u0002\u0002\u02a6\u02a7\u0003",
    "\u0002\u0002\u0002\u02a7\u02a9\u0003\u0002\u0002\u0002\u02a8\u02aa\u0007",
    "\u0107\u0002\u0002\u02a9\u02a8\u0003\u0002\u0002\u0002\u02a9\u02aa\u0003",
    "\u0002\u0002\u0002\u02aaK\u0003\u0002\u0002\u0002\u02ab\u02ac\u0007",
    "\u0142\u0002\u0002\u02acM\u0003\u0002\u0002\u0002\u02ad\u02ae\u0005",
    "4\u001b\u0002\u02ae\u02af\u0007\t\u0002\u0002\u02af\u02b1\u0005P)\u0002",
    "\u02b0\u02b2\u0005H%\u0002\u02b1\u02b0\u0003\u0002\u0002\u0002\u02b1",
    "\u02b2\u0003\u0002\u0002\u0002\u02b2O\u0003\u0002\u0002\u0002\u02b3",
    "\u02b4\u0005\u00d2j\u0002\u02b4Q\u0003\u0002\u0002\u0002\u02b5\u02b6",
    "\u0007\u00e3\u0002\u0002\u02b6\u02b7\u0007\'\u0002\u0002\u02b7\u02b8",
    "\u0005\u00d2j\u0002\u02b8\u02b9\u0007\t\u0002\u0002\u02b9\u02ba\u0005",
    "\u00d2j\u0002\u02baS\u0003\u0002\u0002\u0002\u02bb\u02bc\u0007\u00ba",
    "\u0002\u0002\u02bc\u02be\u0005V,\u0002\u02bd\u02bb\u0003\u0002\u0002",
    "\u0002\u02bd\u02be\u0003\u0002\u0002\u0002\u02be\u02bf\u0003\u0002\u0002",
    "\u0002\u02bf\u02c0\u0007\u0101\u0002\u0002\u02c0\u02c1\u0007\u0102\u0002",
    "\u0002\u02c1\u02c2\u0007\u012f\u0002\u0002\u02c2\u02c3\u00056\u001c",
    "\u0002\u02c3\u02c6\u0007\u0130\u0002\u0002\u02c4\u02c5\u0007\u001b\u0002",
    "\u0002\u02c5\u02c7\u0007\u0105\u0002\u0002\u02c6\u02c4\u0003\u0002\u0002",
    "\u0002\u02c6\u02c7\u0003\u0002\u0002\u0002\u02c7U\u0003\u0002\u0002",
    "\u0002\u02c8\u02c9\u0005\u00fe\u0080\u0002\u02c9W\u0003\u0002\u0002",
    "\u0002\u02ca\u02cb\u0007\u0103\u0002\u0002\u02cb\u02cc\u0007\'\u0002",
    "\u0002\u02cc\u02cd\u0007\u0104\u0002\u0002\u02cdY\u0003\u0002\u0002",
    "\u0002\u02ce\u02cf\u0007\u00c9\u0002\u0002\u02cf\u02d0\u0007\u000f\u0002",
    "\u0002\u02d0\u02d1\u0005\\/\u0002\u02d1[\u0003\u0002\u0002\u0002\u02d2",
    "\u02d3\u0007\u012f\u0002\u0002\u02d3\u02d8\u0005^0\u0002\u02d4\u02d5",
    "\u0007\u0131\u0002\u0002\u02d5\u02d7\u0005^0\u0002\u02d6\u02d4\u0003",
    "\u0002\u0002\u0002\u02d7\u02da\u0003\u0002\u0002\u0002\u02d8\u02d6\u0003",
    "\u0002\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002\u02d9\u02db\u0003",
    "\u0002\u0002\u0002\u02da\u02d8\u0003\u0002\u0002\u0002\u02db\u02dc\u0007",
    "\u0130\u0002\u0002\u02dc]\u0003\u0002\u0002\u0002\u02dd\u02eb\u0005",
    "\u00e4s\u0002\u02de\u02df\u0005\u00fe\u0080\u0002\u02df\u02e0\u0007",
    "\u012f\u0002\u0002\u02e0\u02e5\u0005`1\u0002\u02e1\u02e2\u0007\u0131",
    "\u0002\u0002\u02e2\u02e4\u0005`1\u0002\u02e3\u02e1\u0003\u0002\u0002",
    "\u0002\u02e4\u02e7\u0003\u0002\u0002\u0002\u02e5\u02e3\u0003\u0002\u0002",
    "\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e8\u0003\u0002\u0002",
    "\u0002\u02e7\u02e5\u0003\u0002\u0002\u0002\u02e8\u02e9\u0007\u0130\u0002",
    "\u0002\u02e9\u02eb\u0003\u0002\u0002\u0002\u02ea\u02dd\u0003\u0002\u0002",
    "\u0002\u02ea\u02de\u0003\u0002\u0002\u0002\u02eb_\u0003\u0002\u0002",
    "\u0002\u02ec\u02ef\u0005\u00e4s\u0002\u02ed\u02ef\u0005\u0128\u0095",
    "\u0002\u02ee\u02ec\u0003\u0002\u0002\u0002\u02ee\u02ed\u0003\u0002\u0002",
    "\u0002\u02efa\u0003\u0002\u0002\u0002\u02f0\u02f1\u0007\u001f\u0002",
    "\u0002\u02f1\u02fa\u0005d3\u0002\u02f2\u02f6\u0007\u012f\u0002\u0002",
    "\u02f3\u02f5\u0005f4\u0002\u02f4\u02f3\u0003\u0002\u0002\u0002\u02f5",
    "\u02f8\u0003\u0002\u0002\u0002\u02f6\u02f4\u0003\u0002\u0002\u0002\u02f6",
    "\u02f7\u0003\u0002\u0002\u0002\u02f7\u02f9\u0003\u0002\u0002\u0002\u02f8",
    "\u02f6\u0003\u0002\u0002\u0002\u02f9\u02fb\u0007\u0130\u0002\u0002\u02fa",
    "\u02f2\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003\u0002\u0002\u0002\u02fb",
    "c\u0003\u0002\u0002\u0002\u02fc\u02fd\u0005\u010a\u0086\u0002\u02fd",
    "e\u0003\u0002\u0002\u0002\u02fe\u02ff\t\u000e\u0002\u0002\u02ff\u0303",
    "\t\u000f\u0002\u0002\u0300\u0301\t\u0010\u0002\u0002\u0301\u0303\t\u0011",
    "\u0002\u0002\u0302\u02fe\u0003\u0002\u0002\u0002\u0302\u0300\u0003\u0002",
    "\u0002\u0002\u0303g\u0003\u0002\u0002\u0002\u0304\u0305\u0007J\u0002",
    "\u0002\u0305\u0306\u0007\u00f0\u0002\u0002\u0306\u0307\u0005\u010a\u0086",
    "\u0002\u0307\u0308\u0005\u010e\u0088\u0002\u0308i\u0003\u0002\u0002",
    "\u0002\u0309\u030a\u0007J\u0002\u0002\u030a\u030c\u0007\u00c1\u0002",
    "\u0002\u030b\u030d\u0005\u0110\u0089\u0002\u030c\u030b\u0003\u0002\u0002",
    "\u0002\u030c\u030d\u0003\u0002\u0002\u0002\u030d\u030e\u0003\u0002\u0002",
    "\u0002\u030e\u0310\u0005\u010a\u0086\u0002\u030f\u0311\u0005H%\u0002",
    "\u0310\u030f\u0003\u0002\u0002\u0002\u0310\u0311\u0003\u0002\u0002\u0002",
    "\u0311\u0312\u0003\u0002\u0002\u0002\u0312\u0313\u0005\u010e\u0088\u0002",
    "\u0313k\u0003\u0002\u0002\u0002\u0314\u0316\u0007J\u0002\u0002\u0315",
    "\u0317\u0007\u00a7\u0002\u0002\u0316\u0315\u0003\u0002\u0002\u0002\u0316",
    "\u0317\u0003\u0002\u0002\u0002\u0317\u0318\u0003\u0002\u0002\u0002\u0318",
    "\u031a\u0007M\u0002\u0002\u0319\u031b\u0005\u0110\u0089\u0002\u031a",
    "\u0319\u0003\u0002\u0002\u0002\u031a\u031b\u0003\u0002\u0002\u0002\u031b",
    "\u031c\u0003\u0002\u0002\u0002\u031c\u031e\u0005\u010a\u0086\u0002\u031d",
    "\u031f\u00056\u001c\u0002\u031e\u031d\u0003\u0002\u0002\u0002\u031e",
    "\u031f\u0003\u0002\u0002\u0002\u031f\u0321\u0003\u0002\u0002\u0002\u0320",
    "\u0322\u0005H%\u0002\u0321\u0320\u0003\u0002\u0002\u0002\u0321\u0322",
    "\u0003\u0002\u0002\u0002\u0322\u0323\u0003\u0002\u0002\u0002\u0323\u0324",
    "\u0007\t\u0002\u0002\u0324\u0325\u0005\u009aN\u0002\u0325m\u0003\u0002",
    "\u0002\u0002\u0326\u032a\u0007J\u0002\u0002\u0327\u032b\u0007\u00a7",
    "\u0002\u0002\u0328\u0329\u0007\u00a7\u0002\u0002\u0329\u032b\u0007\u00e9",
    "\u0002\u0002\u032a\u0327\u0003\u0002\u0002\u0002\u032a\u0328\u0003\u0002",
    "\u0002\u0002\u032a\u032b\u0003\u0002\u0002\u0002\u032b\u032c\u0003\u0002",
    "\u0002\u0002\u032c\u032e\u0007\u009e\u0002\u0002\u032d\u032f\u0005\u0110",
    "\u0089\u0002\u032e\u032d\u0003\u0002\u0002\u0002\u032e\u032f\u0003\u0002",
    "\u0002\u0002\u032f\u0330\u0003\u0002\u0002\u0002\u0330\u0331\u0005\u010a",
    "\u0086\u0002\u0331\u0332\u0007\t\u0002\u0002\u0332\u0335\u0005\u00fe",
    "\u0080\u0002\u0333\u0334\u0007\u00f1\u0002\u0002\u0334\u0336\t\u0012",
    "\u0002\u0002\u0335\u0333\u0003\u0002\u0002\u0002\u0335\u0336\u0003\u0002",
    "\u0002\u0002\u0336\u0338\u0003\u0002\u0002\u0002\u0337\u0339\u0005p",
    "9\u0002\u0338\u0337\u0003\u0002\u0002\u0002\u0338\u0339\u0003\u0002",
    "\u0002\u0002\u0339o\u0003\u0002\u0002\u0002\u033a\u033b\u0007\u0090",
    "\u0002\u0002\u033b\u033c\u0007\u00f5\u0002\u0002\u033c\u0342\u0005r",
    ":\u0002\u033d\u033e\u0007\u0131\u0002\u0002\u033e\u033f\u0007\u00f5",
    "\u0002\u0002\u033f\u0341\u0005r:\u0002\u0340\u033d\u0003\u0002\u0002",
    "\u0002\u0341\u0344\u0003\u0002\u0002\u0002\u0342\u0340\u0003\u0002\u0002",
    "\u0002\u0342\u0343\u0003\u0002\u0002\u0002\u0343q\u0003\u0002\u0002",
    "\u0002\u0344\u0342\u0003\u0002\u0002\u0002\u0345\u0346\u0007\u0142\u0002",
    "\u0002\u0346s\u0003\u0002\u0002\u0002\u0347\u0348\u0007q\u0002\u0002",
    "\u0348\u0349\u0007K\u0002\u0002\u0349\u034c\u0005\u010a\u0086\u0002",
    "\u034a\u034d\u0005v<\u0002\u034b\u034d\u0005x=\u0002\u034c\u034a\u0003",
    "\u0002\u0002\u0002\u034c\u034b\u0003\u0002\u0002\u0002\u034du\u0003",
    "\u0002\u0002\u0002\u034e\u034f\u0007r\u0002\u0002\u034f\u0350\u0007",
    "n\u0002\u0002\u0350\u0351\u0005\u010a\u0086\u0002\u0351w\u0003\u0002",
    "\u0002\u0002\u0352\u0353\u0007u\u0002\u0002\u0353\u0354\u0005\u0114",
    "\u008b\u0002\u0354y\u0003\u0002\u0002\u0002\u0355\u0356\u0007q\u0002",
    "\u0002\u0356\u0357\u0007M\u0002\u0002\u0357\u035b\u0005\u010a\u0086",
    "\u0002\u0358\u035c\u0005v<\u0002\u0359\u035a\u0007\t\u0002\u0002\u035a",
    "\u035c\u0005\u009aN\u0002\u035b\u0358\u0003\u0002\u0002\u0002\u035b",
    "\u0359\u0003\u0002\u0002\u0002\u035c{\u0003\u0002\u0002\u0002\u035d",
    "\u035e\u0007q\u0002\u0002\u035e\u035f\u0007\u00c1\u0002\u0002\u035f",
    "\u0360\u0005\u010a\u0086\u0002\u0360\u0361\u0005x=\u0002\u0361}\u0003",
    "\u0002\u0002\u0002\u0362\u0366\u0007q\u0002\u0002\u0363\u0367\u0007",
    "\u00a7\u0002\u0002\u0364\u0365\u0007\u00a7\u0002\u0002\u0365\u0367\u0007",
    "\u00e9\u0002\u0002\u0366\u0363\u0003\u0002\u0002\u0002\u0366\u0364\u0003",
    "\u0002\u0002\u0002\u0366\u0367\u0003\u0002\u0002\u0002\u0367\u0368\u0003",
    "\u0002\u0002\u0002\u0368\u036a\u0007\u009e\u0002\u0002\u0369\u036b\u0005",
    "\u0112\u008a\u0002\u036a\u0369\u0003\u0002\u0002\u0002\u036a\u036b\u0003",
    "\u0002\u0002\u0002\u036b\u036c\u0003\u0002\u0002\u0002\u036c\u036d\u0005",
    "\u010a\u0086\u0002\u036d\u036e\u0007\t\u0002\u0002\u036e\u0371\u0005",
    "\u00fe\u0080\u0002\u036f\u0370\u0007\u00f1\u0002\u0002\u0370\u0372\t",
    "\u0012\u0002\u0002\u0371\u036f\u0003\u0002\u0002\u0002\u0371\u0372\u0003",
    "\u0002\u0002\u0002\u0372\u007f\u0003\u0002\u0002\u0002\u0373\u0374\u0007",
    "i\u0002\u0002\u0374\u0376\u0007\u00f0\u0002\u0002\u0375\u0377\u0005",
    "\u0112\u008a\u0002\u0376\u0375\u0003\u0002\u0002\u0002\u0376\u0377\u0003",
    "\u0002\u0002\u0002\u0377\u0378\u0003\u0002\u0002\u0002\u0378\u0379\u0005",
    "\u010a\u0086\u0002\u0379\u0081\u0003\u0002\u0002\u0002\u037a\u037c\u0007",
    "i\u0002\u0002\u037b\u037d\u0007\u00a7\u0002\u0002\u037c\u037b\u0003",
    "\u0002\u0002\u0002\u037c\u037d\u0003\u0002\u0002\u0002\u037d\u037e\u0003",
    "\u0002\u0002\u0002\u037e\u0380\u0007K\u0002\u0002\u037f\u0381\u0005",
    "\u0112\u008a\u0002\u0380\u037f\u0003\u0002\u0002\u0002\u0380\u0381\u0003",
    "\u0002\u0002\u0002\u0381\u0382\u0003\u0002\u0002\u0002\u0382\u0383\u0005",
    "\u010a\u0086\u0002\u0383\u0083\u0003\u0002\u0002\u0002\u0384\u0385\u0007",
    "i\u0002\u0002\u0385\u0387\u0007\u00c1\u0002\u0002\u0386\u0388\u0005",
    "\u0112\u008a\u0002\u0387\u0386\u0003\u0002\u0002\u0002\u0387\u0388\u0003",
    "\u0002\u0002\u0002\u0388\u0389\u0003\u0002\u0002\u0002\u0389\u038b\u0005",
    "\u010a\u0086\u0002\u038a\u038c\t\u0013\u0002\u0002\u038b\u038a\u0003",
    "\u0002\u0002\u0002\u038b\u038c\u0003\u0002\u0002\u0002\u038c\u0085\u0003",
    "\u0002\u0002\u0002\u038d\u038f\u0007i\u0002\u0002\u038e\u0390\u0007",
    "\u00a7\u0002\u0002\u038f\u038e\u0003\u0002\u0002\u0002\u038f\u0390\u0003",
    "\u0002\u0002\u0002\u0390\u0391\u0003\u0002\u0002\u0002\u0391\u0393\u0007",
    "M\u0002\u0002\u0392\u0394\u0005\u0112\u008a\u0002\u0393\u0392\u0003",
    "\u0002\u0002\u0002\u0393\u0394\u0003\u0002\u0002\u0002\u0394\u0395\u0003",
    "\u0002\u0002\u0002\u0395\u0396\u0005\u010a\u0086\u0002\u0396\u0087\u0003",
    "\u0002\u0002\u0002\u0397\u039b\u0007i\u0002\u0002\u0398\u039c\u0007",
    "\u00a7\u0002\u0002\u0399\u039a\u0007\u00a7\u0002\u0002\u039a\u039c\u0007",
    "\u00e9\u0002\u0002\u039b\u0398\u0003\u0002\u0002\u0002\u039b\u0399\u0003",
    "\u0002\u0002\u0002\u039b\u039c\u0003\u0002\u0002\u0002\u039c\u039d\u0003",
    "\u0002\u0002\u0002\u039d\u039f\u0007\u009e\u0002\u0002\u039e\u03a0\u0005",
    "\u0112\u008a\u0002\u039f\u039e\u0003\u0002\u0002\u0002\u039f\u03a0\u0003",
    "\u0002\u0002\u0002\u03a0\u03a1\u0003\u0002\u0002\u0002\u03a1\u03a2\u0005",
    "\u010a\u0086\u0002\u03a2\u0089\u0003\u0002\u0002\u0002\u03a3\u03a5\u0007",
    "O\u0002\u0002\u03a4\u03a3\u0003\u0002\u0002\u0002\u03a4\u03a5\u0003",
    "\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6\u03ab\u0005",
    "\u008cG\u0002\u03a7\u03ab\u0005\u0096L\u0002\u03a8\u03a9\u0007O\u0002",
    "\u0002\u03a9\u03ab\u0005\u0098M\u0002\u03aa\u03a4\u0003\u0002\u0002",
    "\u0002\u03aa\u03a7\u0003\u0002\u0002\u0002\u03aa\u03a8\u0003\u0002\u0002",
    "\u0002\u03ab\u008b\u0003\u0002\u0002\u0002\u03ac\u03ad\u0007Q\u0002",
    "\u0002\u03ad\u03ae\t\u0014\u0002\u0002\u03ae\u03b7\u0005\u010a\u0086",
    "\u0002\u03af\u03b1\u0005\u008eH\u0002\u03b0\u03af\u0003\u0002\u0002",
    "\u0002\u03b0\u03b1\u0003\u0002\u0002\u0002\u03b1\u03b3\u0003\u0002\u0002",
    "\u0002\u03b2\u03b4\u0005\u0090I\u0002\u03b3\u03b2\u0003\u0002\u0002",
    "\u0002\u03b3\u03b4\u0003\u0002\u0002\u0002\u03b4\u03b5\u0003\u0002\u0002",
    "\u0002\u03b5\u03b8\u0005\u009aN\u0002\u03b6\u03b8\u0005\u0092J\u0002",
    "\u03b7\u03b0\u0003\u0002\u0002\u0002\u03b7\u03b6\u0003\u0002\u0002\u0002",
    "\u03b8\u008d\u0003\u0002\u0002\u0002\u03b9\u03ba\u0007>\u0002\u0002",
    "\u03ba\u03bb\u0005\u0114\u008b\u0002\u03bb\u008f\u0003\u0002\u0002\u0002",
    "\u03bc\u03bd\u0007\u012f\u0002\u0002\u03bd\u03be\u00056\u001c\u0002",
    "\u03be\u03bf\u0007\u0130\u0002\u0002\u03bf\u0091\u0003\u0002\u0002\u0002",
    "\u03c0\u03c1\u0007I\u0002\u0002\u03c1\u03c6\u0005\u0094K\u0002\u03c2",
    "\u03c3\u0007\u0131\u0002\u0002\u03c3\u03c5\u0005\u0094K\u0002\u03c4",
    "\u03c2\u0003\u0002\u0002\u0002\u03c5\u03c8\u0003\u0002\u0002\u0002\u03c6",
    "\u03c4\u0003\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002\u0002\u0002\u03c7",
    "\u0093\u0003\u0002\u0002\u0002\u03c8\u03c6\u0003\u0002\u0002\u0002\u03c9",
    "\u03ca\u0007\u012f\u0002\u0002\u03ca\u03cf\u0005\u0128\u0095\u0002\u03cb",
    "\u03cc\u0007\u0131\u0002\u0002\u03cc\u03ce\u0005\u0128\u0095\u0002\u03cd",
    "\u03cb\u0003\u0002\u0002\u0002\u03ce\u03d1\u0003\u0002\u0002\u0002\u03cf",
    "\u03cd\u0003\u0002\u0002\u0002\u03cf\u03d0\u0003\u0002\u0002\u0002\u03d0",
    "\u03d2\u0003\u0002\u0002\u0002\u03d1\u03cf\u0003\u0002\u0002\u0002\u03d2",
    "\u03d3\u0007\u0130\u0002\u0002\u03d3\u0095\u0003\u0002\u0002\u0002\u03d4",
    "\u03d5\u0007-\u0002\u0002\u03d5\u03d6\u0007P\u0002\u0002\u03d6\u03d7",
    "\u0007u\u0002\u0002\u03d7\u03db\u0007\u0132\u0002\u0002\u03d8\u03d9",
    "\u0005\u008cG\u0002\u03d9\u03da\u0007\u0132\u0002\u0002\u03da\u03dc",
    "\u0003\u0002\u0002\u0002\u03db\u03d8\u0003\u0002\u0002\u0002\u03dc\u03dd",
    "\u0003\u0002\u0002\u0002\u03dd\u03db\u0003\u0002\u0002\u0002\u03dd\u03de",
    "\u0003\u0002\u0002\u0002\u03de\u03df\u0003\u0002\u0002\u0002\u03df\u03e0",
    "\u0007.\u0002\u0002\u03e0\u0097\u0003\u0002\u0002\u0002\u03e1\u03e2",
    "\u0007P\u0002\u0002\u03e2\u03e3\u0007u\u0002\u0002\u03e3\u03e7\u0007",
    "-\u0002\u0002\u03e4\u03e5\u0005\u008cG\u0002\u03e5\u03e6\u0007\u0132",
    "\u0002\u0002\u03e6\u03e8\u0003\u0002\u0002\u0002\u03e7\u03e4\u0003\u0002",
    "\u0002\u0002\u03e8\u03e9\u0003\u0002\u0002\u0002\u03e9\u03e7\u0003\u0002",
    "\u0002\u0002\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea\u03eb\u0003\u0002",
    "\u0002\u0002\u03eb\u03ec\u0007.\u0002\u0002\u03ec\u0099\u0003\u0002",
    "\u0002\u0002\u03ed\u03ee\bN\u0001\u0002\u03ee\u040d\u0005\u009cO\u0002",
    "\u03ef\u03f0\u0007H\u0002\u0002\u03f0\u03f5\u0005\u009eP\u0002\u03f1",
    "\u03f2\u0007\u0131\u0002\u0002\u03f2\u03f4\u0005\u009eP\u0002\u03f3",
    "\u03f1\u0003\u0002\u0002\u0002\u03f4\u03f7\u0003\u0002\u0002\u0002\u03f5",
    "\u03f3\u0003\u0002\u0002\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6",
    "\u03f8\u0003\u0002\u0002\u0002\u03f7\u03f5\u0003\u0002\u0002\u0002\u03f8",
    "\u03f9\u0005\u009aN\u0007\u03f9\u040d\u0003\u0002\u0002\u0002\u03fa",
    "\u03fb\u0007\u012f\u0002\u0002\u03fb\u03fc\u0005\u009aN\u0002\u03fc",
    "\u03fd\u0007\u0130\u0002\u0002\u03fd\u040d\u0003\u0002\u0002\u0002\u03fe",
    "\u0400\u0005\u00a4S\u0002\u03ff\u0401\u0005\u00c0a\u0002\u0400\u03ff",
    "\u0003\u0002\u0002\u0002\u0400\u0401\u0003\u0002\u0002\u0002\u0401\u0403",
    "\u0003\u0002\u0002\u0002\u0402\u0404\u0005\u00c4c\u0002\u0403\u0402",
    "\u0003\u0002\u0002\u0002\u0403\u0404\u0003\u0002\u0002\u0002\u0404\u040d",
    "\u0003\u0002\u0002\u0002\u0405\u0407\u0005\u00a2R\u0002\u0406\u0408",
    "\u0005\u00c0a\u0002\u0407\u0406\u0003\u0002\u0002\u0002\u0407\u0408",
    "\u0003\u0002\u0002\u0002\u0408\u040a\u0003\u0002\u0002\u0002\u0409\u040b",
    "\u0005\u00c4c\u0002\u040a\u0409\u0003\u0002\u0002\u0002\u040a\u040b",
    "\u0003\u0002\u0002\u0002\u040b\u040d\u0003\u0002\u0002\u0002\u040c\u03ed",
    "\u0003\u0002\u0002\u0002\u040c\u03ef\u0003\u0002\u0002\u0002\u040c\u03fa",
    "\u0003\u0002\u0002\u0002\u040c\u03fe\u0003\u0002\u0002\u0002\u040c\u0405",
    "\u0003\u0002\u0002\u0002\u040d\u041c\u0003\u0002\u0002\u0002\u040e\u040f",
    "\f\u0005\u0002\u0002\u040f\u0411\t\u0015\u0002\u0002\u0410\u0412\u0007",
    "\n\u0002\u0002\u0411\u0410\u0003\u0002\u0002\u0002\u0411\u0412\u0003",
    "\u0002\u0002\u0002\u0412\u0413\u0003\u0002\u0002\u0002\u0413\u0415\u0005",
    "\u009aN\u0002\u0414\u0416\u0005\u00c0a\u0002\u0415\u0414\u0003\u0002",
    "\u0002\u0002\u0415\u0416\u0003\u0002\u0002\u0002\u0416\u0418\u0003\u0002",
    "\u0002\u0002\u0417\u0419\u0005\u00c4c\u0002\u0418\u0417\u0003\u0002",
    "\u0002\u0002\u0418\u0419\u0003\u0002\u0002\u0002\u0419\u041b\u0003\u0002",
    "\u0002\u0002\u041a\u040e\u0003\u0002\u0002\u0002\u041b\u041e\u0003\u0002",
    "\u0002\u0002\u041c\u041a\u0003\u0002\u0002\u0002\u041c\u041d\u0003\u0002",
    "\u0002\u0002\u041d\u009b\u0003\u0002\u0002\u0002\u041e\u041c\u0003\u0002",
    "\u0002\u0002\u041f\u0420\u0007I\u0002\u0002\u0420\u0425\u0005\u00d2",
    "j\u0002\u0421\u0422\u0007\u0131\u0002\u0002\u0422\u0424\u0005\u00d2",
    "j\u0002\u0423\u0421\u0003\u0002\u0002\u0002\u0424\u0427\u0003\u0002",
    "\u0002\u0002\u0425\u0423\u0003\u0002\u0002\u0002\u0425\u0426\u0003\u0002",
    "\u0002\u0002\u0426\u009d\u0003\u0002\u0002\u0002\u0427\u0425\u0003\u0002",
    "\u0002\u0002\u0428\u0434\u0005\u00a0Q\u0002\u0429\u042a\u0007\u012f",
    "\u0002\u0002\u042a\u042f\u00054\u001b\u0002\u042b\u042c\u0007\u0131",
    "\u0002\u0002\u042c\u042e\u00054\u001b\u0002\u042d\u042b\u0003\u0002",
    "\u0002\u0002\u042e\u0431\u0003\u0002\u0002\u0002\u042f\u042d\u0003\u0002",
    "\u0002\u0002\u042f\u0430\u0003\u0002\u0002\u0002\u0430\u0432\u0003\u0002",
    "\u0002\u0002\u0431\u042f\u0003\u0002\u0002\u0002\u0432\u0433\u0007\u0130",
    "\u0002\u0002\u0433\u0435\u0003\u0002\u0002\u0002\u0434\u0429\u0003\u0002",
    "\u0002\u0002\u0434\u0435\u0003\u0002\u0002\u0002\u0435\u0436\u0003\u0002",
    "\u0002\u0002\u0436\u0437\u0007\t\u0002\u0002\u0437\u0438\u0007\u012f",
    "\u0002\u0002\u0438\u0439\u0005\u009aN\u0002\u0439\u043a\u0007\u0130",
    "\u0002\u0002\u043a\u009f\u0003\u0002\u0002\u0002\u043b\u043c\u0005\u00fe",
    "\u0080\u0002\u043c\u00a1\u0003\u0002\u0002\u0002\u043d\u043e\u0005\u00a4",
    "S\u0002\u043e\u0440\u0005\u00a8U\u0002\u043f\u0441\u0005\u00b8]\u0002",
    "\u0440\u043f\u0003\u0002\u0002\u0002\u0440\u0441\u0003\u0002\u0002\u0002",
    "\u0441\u0443\u0003\u0002\u0002\u0002\u0442\u0444\u0005\u00ba^\u0002",
    "\u0443\u0442\u0003\u0002\u0002\u0002\u0443\u0444\u0003\u0002\u0002\u0002",
    "\u0444\u0446\u0003\u0002\u0002\u0002\u0445\u0447\u0005\u00be`\u0002",
    "\u0446\u0445\u0003\u0002\u0002\u0002\u0446\u0447\u0003\u0002\u0002\u0002",
    "\u0447\u0449\u0003\u0002\u0002\u0002\u0448\u044a\u0005\u00c6d\u0002",
    "\u0449\u0448\u0003\u0002\u0002\u0002\u0449\u044a\u0003\u0002\u0002\u0002",
    "\u044a\u00a3\u0003\u0002\u0002\u0002\u044b\u044d\u0007\u0006\u0002\u0002",
    "\u044c\u044e\u0005\u0130\u0099\u0002\u044d\u044c\u0003\u0002\u0002\u0002",
    "\u044d\u044e\u0003\u0002\u0002\u0002\u044e\u0458\u0003\u0002\u0002\u0002",
    "\u044f\u0459\u0007\u0138\u0002\u0002\u0450\u0455\u0005\u00a6T\u0002",
    "\u0451\u0452\u0007\u0131\u0002\u0002\u0452\u0454\u0005\u00a6T\u0002",
    "\u0453\u0451\u0003\u0002\u0002\u0002\u0454\u0457\u0003\u0002\u0002\u0002",
    "\u0455\u0453\u0003\u0002\u0002\u0002\u0455\u0456\u0003\u0002\u0002\u0002",
    "\u0456\u0459\u0003\u0002\u0002\u0002\u0457\u0455\u0003\u0002\u0002\u0002",
    "\u0458\u044f\u0003\u0002\u0002\u0002\u0458\u0450\u0003\u0002\u0002\u0002",
    "\u0459\u00a5\u0003\u0002\u0002\u0002\u045a\u045f\u0005\u00d2j\u0002",
    "\u045b\u045d\u0007\t\u0002\u0002\u045c\u045b\u0003\u0002\u0002\u0002",
    "\u045c\u045d\u0003\u0002\u0002\u0002\u045d\u045e\u0003\u0002\u0002\u0002",
    "\u045e\u0460\u0005\u00d2j\u0002\u045f\u045c\u0003\u0002\u0002\u0002",
    "\u045f\u0460\u0003\u0002\u0002\u0002\u0460\u00a7\u0003\u0002\u0002\u0002",
    "\u0461\u0462\u0007\u0007\u0002\u0002\u0462\u0463\u0005\u00aaV\u0002",
    "\u0463\u00a9\u0003\u0002\u0002\u0002\u0464\u0465\bV\u0001\u0002\u0465",
    "\u046a\u0005\u00acW\u0002\u0466\u0467\u0007\u0131\u0002\u0002\u0467",
    "\u0469\u0005\u00acW\u0002\u0468\u0466\u0003\u0002\u0002\u0002\u0469",
    "\u046c\u0003\u0002\u0002\u0002\u046a\u0468\u0003\u0002\u0002\u0002\u046a",
    "\u046b\u0003\u0002\u0002\u0002\u046b\u0482\u0003\u0002\u0002\u0002\u046c",
    "\u046a\u0003\u0002\u0002\u0002\u046d\u046e\f\u0003\u0002\u0002\u046e",
    "\u046f\u00070\u0002\u0002\u046f\u0470\u0007/\u0002\u0002\u0470\u0481",
    "\u0005\u00aaV\u0004\u0471\u0473\f\u0004\u0002\u0002\u0472\u0474\u0007",
    "8\u0002\u0002\u0473\u0472\u0003\u0002\u0002\u0002\u0473\u0474\u0003",
    "\u0002\u0002\u0002\u0474\u0476\u0003\u0002\u0002\u0002\u0475\u0477\t",
    "\u0016\u0002\u0002\u0476\u0475\u0003\u0002\u0002\u0002\u0476\u0477\u0003",
    "\u0002\u0002\u0002\u0477\u0479\u0003\u0002\u0002\u0002\u0478\u047a\u0007",
    "1\u0002\u0002\u0479\u0478\u0003\u0002\u0002\u0002\u0479\u047a\u0003",
    "\u0002\u0002\u0002\u047a\u047b\u0003\u0002\u0002\u0002\u047b\u047c\u0007",
    "/\u0002\u0002\u047c\u047e\u0005\u00aaV\u0002\u047d\u047f\u0005\u00b6",
    "\\\u0002\u047e\u047d\u0003\u0002\u0002\u0002\u047e\u047f\u0003\u0002",
    "\u0002\u0002\u047f\u0481\u0003\u0002\u0002\u0002\u0480\u046d\u0003\u0002",
    "\u0002\u0002\u0480\u0471\u0003\u0002\u0002\u0002\u0481\u0484\u0003\u0002",
    "\u0002\u0002\u0482\u0480\u0003\u0002\u0002\u0002\u0482\u0483\u0003\u0002",
    "\u0002\u0002\u0483\u00ab\u0003\u0002\u0002\u0002\u0484\u0482\u0003\u0002",
    "\u0002\u0002\u0485\u0487\u0005\u00aeX\u0002\u0486\u0488\u0005\u00f4",
    "{\u0002\u0487\u0486\u0003\u0002\u0002\u0002\u0487\u0488\u0003\u0002",
    "\u0002\u0002\u0488\u00ad\u0003\u0002\u0002\u0002\u0489\u048b\u0007K",
    "\u0002\u0002\u048a\u0489\u0003\u0002\u0002\u0002\u048a\u048b\u0003\u0002",
    "\u0002\u0002\u048b\u048c\u0003\u0002\u0002\u0002\u048c\u048e\u0005\u00b0",
    "Y\u0002\u048d\u048f\u0005\u00b2Z\u0002\u048e\u048d\u0003\u0002\u0002",
    "\u0002\u048e\u048f\u0003\u0002\u0002\u0002\u048f\u0494\u0003\u0002\u0002",
    "\u0002\u0490\u0492\u0007\t\u0002\u0002\u0491\u0490\u0003\u0002\u0002",
    "\u0002\u0491\u0492\u0003\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002",
    "\u0002\u0493\u0495\u0005\u00e2r\u0002\u0494\u0491\u0003\u0002\u0002",
    "\u0002\u0494\u0495\u0003\u0002\u0002\u0002\u0495\u04b3\u0003\u0002\u0002",
    "\u0002\u0496\u0497\u0007;\u0002\u0002\u0497\u0498\u0007K\u0002\u0002",
    "\u0498\u0499\u0007\u012f\u0002\u0002\u0499\u049a\u0005\u00dep\u0002",
    "\u049a\u049b\u0007\u012f\u0002\u0002\u049b\u04a0\u0005\u00d2j\u0002",
    "\u049c\u049d\u0007\u0131\u0002\u0002\u049d\u049f\u0005\u00d2j\u0002",
    "\u049e\u049c\u0003\u0002\u0002\u0002\u049f\u04a2\u0003\u0002\u0002\u0002",
    "\u04a0\u049e\u0003\u0002\u0002\u0002\u04a0\u04a1\u0003\u0002\u0002\u0002",
    "\u04a1\u04a3\u0003\u0002\u0002\u0002\u04a2\u04a0\u0003\u0002\u0002\u0002",
    "\u04a3\u04a4\u0007\u0130\u0002\u0002\u04a4\u04a5\u0007\u0130\u0002\u0002",
    "\u04a5\u04b3\u0003\u0002\u0002\u0002\u04a6\u04a8\u0007;\u0002\u0002",
    "\u04a7\u04a6\u0003\u0002\u0002\u0002\u04a7\u04a8\u0003\u0002\u0002\u0002",
    "\u04a8\u04a9\u0003\u0002\u0002\u0002\u04a9\u04aa\u0007\u012f\u0002\u0002",
    "\u04aa\u04ab\u0005\u009aN\u0002\u04ab\u04ac\u0007\u0130\u0002\u0002",
    "\u04ac\u04b3\u0003\u0002\u0002\u0002\u04ad\u04ae\u0007\u00e4\u0002\u0002",
    "\u04ae\u04af\u0007\u012f\u0002\u0002\u04af\u04b0\u0005\u00d2j\u0002",
    "\u04b0\u04b1\u0007\u0130\u0002\u0002\u04b1\u04b3\u0003\u0002\u0002\u0002",
    "\u04b2\u048a\u0003\u0002\u0002\u0002\u04b2\u0496\u0003\u0002\u0002\u0002",
    "\u04b2\u04a7\u0003\u0002\u0002\u0002\u04b2\u04ad\u0003\u0002\u0002\u0002",
    "\u04b3\u00af\u0003\u0002\u0002\u0002\u04b4\u04b5\u0005\u010a\u0086\u0002",
    "\u04b5\u00b1\u0003\u0002\u0002\u0002\u04b6\u04b7\u0007\'\u0002\u0002",
    "\u04b7\u04b8\u0007\u0104\u0002\u0002\u04b8\u04b9\u0007\t\u0002\u0002",
    "\u04b9\u04ba\u0007\u0089\u0002\u0002\u04ba\u04bb\u0005\u00b4[\u0002",
    "\u04bb\u00b3\u0003\u0002\u0002\u0002\u04bc\u04bd\u0005\u00d2j\u0002",
    "\u04bd\u00b5\u0003\u0002\u0002\u0002\u04be\u04bf\u00079\u0002\u0002",
    "\u04bf\u04cd\u0005\u00d4k\u0002\u04c0\u04c1\u0007\u0090\u0002\u0002",
    "\u04c1\u04c2\u0007\u012f\u0002\u0002\u04c2\u04c7\u0005\u010a\u0086\u0002",
    "\u04c3\u04c4\u0007\u0131\u0002\u0002\u04c4\u04c6\u0005\u010a\u0086\u0002",
    "\u04c5\u04c3\u0003\u0002\u0002\u0002\u04c6\u04c9\u0003\u0002\u0002\u0002",
    "\u04c7\u04c5\u0003\u0002\u0002\u0002\u04c7\u04c8\u0003\u0002\u0002\u0002",
    "\u04c8\u04ca\u0003\u0002\u0002\u0002\u04c9\u04c7\u0003\u0002\u0002\u0002",
    "\u04ca\u04cb\u0007\u0130\u0002\u0002\u04cb\u04cd\u0003\u0002\u0002\u0002",
    "\u04cc\u04be\u0003\u0002\u0002\u0002\u04cc\u04c0\u0003\u0002\u0002\u0002",
    "\u04cd\u00b7\u0003\u0002\u0002\u0002\u04ce\u04cf\u0007\r\u0002\u0002",
    "\u04cf\u04d0\u0005\u00d4k\u0002\u04d0\u00b9\u0003\u0002\u0002\u0002",
    "\u04d1\u04d2\u0007\u000e\u0002\u0002\u04d2\u04d3\u0007\u000f\u0002\u0002",
    "\u04d3\u04d8\u0005\u00bc_\u0002\u04d4\u04d5\u0007\u0131\u0002\u0002",
    "\u04d5\u04d7\u0005\u00bc_\u0002\u04d6\u04d4\u0003\u0002\u0002\u0002",
    "\u04d7\u04da\u0003\u0002\u0002\u0002\u04d8\u04d6\u0003\u0002\u0002\u0002",
    "\u04d8\u04d9\u0003\u0002\u0002\u0002\u04d9\u00bb\u0003\u0002\u0002\u0002",
    "\u04da\u04d8\u0003\u0002\u0002\u0002\u04db\u050f\u0005\u00d2j\u0002",
    "\u04dc\u04dd\u0007\u012f\u0002\u0002\u04dd\u050f\u0007\u0130\u0002\u0002",
    "\u04de\u04df\u0007\u012f\u0002\u0002\u04df\u04e4\u0005\u00d2j\u0002",
    "\u04e0\u04e1\u0007\u0131\u0002\u0002\u04e1\u04e3\u0005\u00d2j\u0002",
    "\u04e2\u04e0\u0003\u0002\u0002\u0002\u04e3\u04e6\u0003\u0002\u0002\u0002",
    "\u04e4\u04e2\u0003\u0002\u0002\u0002\u04e4\u04e5\u0003\u0002\u0002\u0002",
    "\u04e5\u04e7\u0003\u0002\u0002\u0002\u04e6\u04e4\u0003\u0002\u0002\u0002",
    "\u04e7\u04e8\u0007\u0130\u0002\u0002\u04e8\u050f\u0003\u0002\u0002\u0002",
    "\u04e9\u04ea\u0007\u0012\u0002\u0002\u04ea\u04eb\u0007\u012f\u0002\u0002",
    "\u04eb\u04f0\u0005\u00d2j\u0002\u04ec\u04ed\u0007\u0131\u0002\u0002",
    "\u04ed\u04ef\u0005\u00d2j\u0002\u04ee\u04ec\u0003\u0002\u0002\u0002",
    "\u04ef\u04f2\u0003\u0002\u0002\u0002\u04f0\u04ee\u0003\u0002\u0002\u0002",
    "\u04f0\u04f1\u0003\u0002\u0002\u0002\u04f1\u04f3\u0003\u0002\u0002\u0002",
    "\u04f2\u04f0\u0003\u0002\u0002\u0002\u04f3\u04f4\u0007\u0130\u0002\u0002",
    "\u04f4\u050f\u0003\u0002\u0002\u0002\u04f5\u04f6\u0007\u0013\u0002\u0002",
    "\u04f6\u04f7\u0007\u012f\u0002\u0002\u04f7\u04fc\u0005\u00d2j\u0002",
    "\u04f8\u04f9\u0007\u0131\u0002\u0002\u04f9\u04fb\u0005\u00d2j\u0002",
    "\u04fa\u04f8\u0003\u0002\u0002\u0002\u04fb\u04fe\u0003\u0002\u0002\u0002",
    "\u04fc\u04fa\u0003\u0002\u0002\u0002\u04fc\u04fd\u0003\u0002\u0002\u0002",
    "\u04fd\u04ff\u0003\u0002\u0002\u0002\u04fe\u04fc\u0003\u0002\u0002\u0002",
    "\u04ff\u0500\u0007\u0130\u0002\u0002\u0500\u050f\u0003\u0002\u0002\u0002",
    "\u0501\u0502\u0007\u0010\u0002\u0002\u0502\u0503\u0007\u0011\u0002\u0002",
    "\u0503\u0504\u0007\u012f\u0002\u0002\u0504\u0509\u0005\u00bc_\u0002",
    "\u0505\u0506\u0007\u0131\u0002\u0002\u0506\u0508\u0005\u00bc_\u0002",
    "\u0507\u0505\u0003\u0002\u0002\u0002\u0508\u050b\u0003\u0002\u0002\u0002",
    "\u0509\u0507\u0003\u0002\u0002\u0002\u0509\u050a\u0003\u0002\u0002\u0002",
    "\u050a\u050c\u0003\u0002\u0002\u0002\u050b\u0509\u0003\u0002\u0002\u0002",
    "\u050c\u050d\u0007\u0130\u0002\u0002\u050d\u050f\u0003\u0002\u0002\u0002",
    "\u050e\u04db\u0003\u0002\u0002\u0002\u050e\u04dc\u0003\u0002\u0002\u0002",
    "\u050e\u04de\u0003\u0002\u0002\u0002\u050e\u04e9\u0003\u0002\u0002\u0002",
    "\u050e\u04f5\u0003\u0002\u0002\u0002\u050e\u0501\u0003\u0002\u0002\u0002",
    "\u050f\u00bd\u0003\u0002\u0002\u0002\u0510\u0511\u0007\u0015\u0002\u0002",
    "\u0511\u0512\u0005\u00d4k\u0002\u0512\u00bf\u0003\u0002\u0002\u0002",
    "\u0513\u0514\u0007\u0014\u0002\u0002\u0514\u0515\u0007\u000f\u0002\u0002",
    "\u0515\u051a\u0005\u00c2b\u0002\u0516\u0517\u0007\u0131\u0002\u0002",
    "\u0517\u0519\u0005\u00c2b\u0002\u0518\u0516\u0003\u0002\u0002\u0002",
    "\u0519\u051c\u0003\u0002\u0002\u0002\u051a\u0518\u0003\u0002\u0002\u0002",
    "\u051a\u051b\u0003\u0002\u0002\u0002\u051b\u00c1\u0003\u0002\u0002\u0002",
    "\u051c\u051a\u0003\u0002\u0002\u0002\u051d\u051f\u0005\u00d2j\u0002",
    "\u051e\u0520\t\u0017\u0002\u0002\u051f\u051e\u0003\u0002\u0002\u0002",
    "\u051f\u0520\u0003\u0002\u0002\u0002\u0520\u00c3\u0003\u0002\u0002\u0002",
    "\u0521\u0524\u0007\u0016\u0002\u0002\u0522\u0525\u0007\n\u0002\u0002",
    "\u0523\u0525\u0005\u00d2j\u0002\u0524\u0522\u0003\u0002\u0002\u0002",
    "\u0524\u0523\u0003\u0002\u0002\u0002\u0525\u00c5\u0003\u0002\u0002\u0002",
    "\u0526\u0527\u0007<\u0002\u0002\u0527\u052c\u0005\u00c8e\u0002\u0528",
    "\u0529\u0007\u0131\u0002\u0002\u0529\u052b\u0005\u00c8e\u0002\u052a",
    "\u0528\u0003\u0002\u0002\u0002\u052b\u052e\u0003\u0002\u0002\u0002\u052c",
    "\u052a\u0003\u0002\u0002\u0002\u052c\u052d\u0003\u0002\u0002\u0002\u052d",
    "\u00c7\u0003\u0002\u0002\u0002\u052e\u052c\u0003\u0002\u0002\u0002\u052f",
    "\u0530\u0005\u00f6|\u0002\u0530\u0531\u0007\t\u0002\u0002\u0531\u0532",
    "\u0005\u00caf\u0002\u0532\u00c9\u0003\u0002\u0002\u0002\u0533\u0535",
    "\u0005\u00f6|\u0002\u0534\u0533\u0003\u0002\u0002\u0002\u0534\u0535",
    "\u0003\u0002\u0002\u0002\u0535\u0536\u0003\u0002\u0002\u0002\u0536\u0541",
    "\u0007\u012f\u0002\u0002\u0537\u0538\u0007\u0014\u0002\u0002\u0538\u0539",
    "\u0007\u000f\u0002\u0002\u0539\u053e\u0005\u00ccg\u0002\u053a\u053b",
    "\u0007\u0131\u0002\u0002\u053b\u053d\u0005\u00ccg\u0002\u053c\u053a",
    "\u0003\u0002\u0002\u0002\u053d\u0540\u0003\u0002\u0002\u0002\u053e\u053c",
    "\u0003\u0002\u0002\u0002\u053e\u053f\u0003\u0002\u0002\u0002\u053f\u0542",
    "\u0003\u0002\u0002\u0002\u0540\u053e\u0003\u0002\u0002\u0002\u0541\u0537",
    "\u0003\u0002\u0002\u0002\u0541\u0542\u0003\u0002\u0002\u0002\u0542\u054d",
    "\u0003\u0002\u0002\u0002\u0543\u0544\u0007>\u0002\u0002\u0544\u0545",
    "\u0007\u000f\u0002\u0002\u0545\u054a\u0005\u00d2j\u0002\u0546\u0547",
    "\u0007\u0131\u0002\u0002\u0547\u0549\u0005\u00d2j\u0002\u0548\u0546",
    "\u0003\u0002\u0002\u0002\u0549\u054c\u0003\u0002\u0002\u0002\u054a\u0548",
    "\u0003\u0002\u0002\u0002\u054a\u054b\u0003\u0002\u0002\u0002\u054b\u054e",
    "\u0003\u0002\u0002\u0002\u054c\u054a\u0003\u0002\u0002\u0002\u054d\u0543",
    "\u0003\u0002\u0002\u0002\u054d\u054e\u0003\u0002\u0002\u0002\u054e\u0550",
    "\u0003\u0002\u0002\u0002\u054f\u0551\u0005\u00ceh\u0002\u0550\u054f",
    "\u0003\u0002\u0002\u0002\u0550\u0551\u0003\u0002\u0002\u0002\u0551\u0552",
    "\u0003\u0002\u0002\u0002\u0552\u0553\u0007\u0130\u0002\u0002\u0553\u00cb",
    "\u0003\u0002\u0002\u0002\u0554\u0556\u0005\u00d2j\u0002\u0555\u0557",
    "\t\u0017\u0002\u0002\u0556\u0555\u0003\u0002\u0002\u0002\u0556\u0557",
    "\u0003\u0002\u0002\u0002\u0557\u055a\u0003\u0002\u0002\u0002\u0558\u0559",
    "\u0007$\u0002\u0002\u0559\u055b\t\u0018\u0002\u0002\u055a\u0558\u0003",
    "\u0002\u0002\u0002\u055a\u055b\u0003\u0002\u0002\u0002\u055b\u00cd\u0003",
    "\u0002\u0002\u0002\u055c\u055d\u0007?\u0002\u0002\u055d\u0561\u0005",
    "\u00d0i\u0002\u055e\u055f\u0007@\u0002\u0002\u055f\u0561\u0005\u00d0",
    "i\u0002\u0560\u055c\u0003\u0002\u0002\u0002\u0560\u055e\u0003\u0002",
    "\u0002\u0002\u0561\u00cf\u0003\u0002\u0002\u0002\u0562\u0563\u0005\u00d2",
    "j\u0002\u0563\u0564\u0007B\u0002\u0002\u0564\u00d1\u0003\u0002\u0002",
    "\u0002\u0565\u0566\u0005\u00d4k\u0002\u0566\u00d3\u0003\u0002\u0002",
    "\u0002\u0567\u0568\bk\u0001\u0002\u0568\u0569\u0007\u001b\u0002\u0002",
    "\u0569\u0574\u0005\u00d4k\u0007\u056a\u056b\u0007\u001d\u0002\u0002",
    "\u056b\u056c\u0007\u012f\u0002\u0002\u056c\u056d\u0005\u009aN\u0002",
    "\u056d\u056e\u0007\u0130\u0002\u0002\u056e\u0574\u0003\u0002\u0002\u0002",
    "\u056f\u0571\u0005\u00dan\u0002\u0570\u0572\u0005\u00d6l\u0002\u0571",
    "\u0570\u0003\u0002\u0002\u0002\u0571\u0572\u0003\u0002\u0002\u0002\u0572",
    "\u0574\u0003\u0002\u0002\u0002\u0573\u0567\u0003\u0002\u0002\u0002\u0573",
    "\u056a\u0003\u0002\u0002\u0002\u0573\u056f\u0003\u0002\u0002\u0002\u0574",
    "\u057d\u0003\u0002\u0002\u0002\u0575\u0576\f\u0004\u0002\u0002\u0576",
    "\u0577\u0007\u0019\u0002\u0002\u0577\u057c\u0005\u00d4k\u0005\u0578",
    "\u0579\f\u0003\u0002\u0002\u0579\u057a\u0007\u0018\u0002\u0002\u057a",
    "\u057c\u0005\u00d4k\u0004\u057b\u0575\u0003\u0002\u0002\u0002\u057b",
    "\u0578\u0003\u0002\u0002\u0002\u057c\u057f\u0003\u0002\u0002\u0002\u057d",
    "\u057b\u0003\u0002\u0002\u0002\u057d\u057e\u0003\u0002\u0002\u0002\u057e",
    "\u00d5\u0003\u0002\u0002\u0002\u057f\u057d\u0003\u0002\u0002\u0002\u0580",
    "\u0582\u0007\u001b\u0002\u0002\u0581\u0580\u0003\u0002\u0002\u0002\u0581",
    "\u0582\u0003\u0002\u0002\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583",
    "\u0584\u0007\u001e\u0002\u0002\u0584\u0585\u0005\u00dan\u0002\u0585",
    "\u0586\u0007\u0019\u0002\u0002\u0586\u0587\u0005\u00dan\u0002\u0587",
    "\u05d4\u0003\u0002\u0002\u0002\u0588\u058a\u0007\u001b\u0002\u0002\u0589",
    "\u0588\u0003\u0002\u0002\u0002\u0589\u058a\u0003\u0002\u0002\u0002\u058a",
    "\u058b\u0003\u0002\u0002\u0002\u058b\u058c\u0007\u001a\u0002\u0002\u058c",
    "\u058d\u0007\u012f\u0002\u0002\u058d\u0592\u0005\u00d2j\u0002\u058e",
    "\u058f\u0007\u0131\u0002\u0002\u058f\u0591\u0005\u00d2j\u0002\u0590",
    "\u058e\u0003\u0002\u0002\u0002\u0591\u0594\u0003\u0002\u0002\u0002\u0592",
    "\u0590\u0003\u0002\u0002\u0002\u0592\u0593\u0003\u0002\u0002\u0002\u0593",
    "\u0595\u0003\u0002\u0002\u0002\u0594\u0592\u0003\u0002\u0002\u0002\u0595",
    "\u0596\u0007\u0130\u0002\u0002\u0596\u05d4\u0003\u0002\u0002\u0002\u0597",
    "\u0599\u0007\u001b\u0002\u0002\u0598\u0597\u0003\u0002\u0002\u0002\u0598",
    "\u0599\u0003\u0002\u0002\u0002\u0599\u059a\u0003\u0002\u0002\u0002\u059a",
    "\u059b\u0007\u001a\u0002\u0002\u059b\u059c\u0007\u012f\u0002\u0002\u059c",
    "\u059d\u0005\u009aN\u0002\u059d\u059e\u0007\u0130\u0002\u0002\u059e",
    "\u05d4\u0003\u0002\u0002\u0002\u059f\u05a0\u0007\u001d\u0002\u0002\u05a0",
    "\u05a1\u0007\u012f\u0002\u0002\u05a1\u05a2\u0005\u009aN\u0002\u05a2",
    "\u05a3\u0007\u0130\u0002\u0002\u05a3\u05d4\u0003\u0002\u0002\u0002\u05a4",
    "\u05a6\u0007\u001b\u0002\u0002\u05a5\u05a4\u0003\u0002\u0002\u0002\u05a5",
    "\u05a6\u0003\u0002\u0002\u0002\u05a6\u05a7\u0003\u0002\u0002\u0002\u05a7",
    "\u05a8\u0007 \u0002\u0002\u05a8\u05d4\u0005\u00dan\u0002\u05a9\u05ab",
    "\u0007\u001b\u0002\u0002\u05aa\u05a9\u0003\u0002\u0002\u0002\u05aa\u05ab",
    "\u0003\u0002\u0002\u0002\u05ab\u05ac\u0003\u0002\u0002\u0002\u05ac\u05ad",
    "\u0007\u001f\u0002\u0002\u05ad\u05bb\t\u0019\u0002\u0002\u05ae\u05af",
    "\u0007\u012f\u0002\u0002\u05af\u05bc\u0007\u0130\u0002\u0002\u05b0\u05b1",
    "\u0007\u012f\u0002\u0002\u05b1\u05b6\u0005\u00d2j\u0002\u05b2\u05b3",
    "\u0007\u0131\u0002\u0002\u05b3\u05b5\u0005\u00d2j\u0002\u05b4\u05b2",
    "\u0003\u0002\u0002\u0002\u05b5\u05b8\u0003\u0002\u0002\u0002\u05b6\u05b4",
    "\u0003\u0002\u0002\u0002\u05b6\u05b7\u0003\u0002\u0002\u0002\u05b7\u05b9",
    "\u0003\u0002\u0002\u0002\u05b8\u05b6\u0003\u0002\u0002\u0002\u05b9\u05ba",
    "\u0007\u0130\u0002\u0002\u05ba\u05bc\u0003\u0002\u0002\u0002\u05bb\u05ae",
    "\u0003\u0002\u0002\u0002\u05bb\u05b0\u0003\u0002\u0002\u0002\u05bc\u05d4",
    "\u0003\u0002\u0002\u0002\u05bd\u05bf\u0007\u001b\u0002\u0002\u05be\u05bd",
    "\u0003\u0002\u0002\u0002\u05be\u05bf\u0003\u0002\u0002\u0002\u05bf\u05c0",
    "\u0003\u0002\u0002\u0002\u05c0\u05c1\u0007\u001f\u0002\u0002\u05c1\u05d4",
    "\u0005\u00dan\u0002\u05c2\u05c4\u0007!\u0002\u0002\u05c3\u05c5\u0007",
    "\u001b\u0002\u0002\u05c4\u05c3\u0003\u0002\u0002\u0002\u05c4\u05c5\u0003",
    "\u0002\u0002\u0002\u05c5\u05c6\u0003\u0002\u0002\u0002\u05c6\u05d4\u0007",
    "\u0122\u0002\u0002\u05c7\u05c9\u0007!\u0002\u0002\u05c8\u05ca\u0007",
    "\u001b\u0002\u0002\u05c9\u05c8\u0003\u0002\u0002\u0002\u05c9\u05ca\u0003",
    "\u0002\u0002\u0002\u05ca\u05cb\u0003\u0002\u0002\u0002\u05cb\u05d4\t",
    "\u001a\u0002\u0002\u05cc\u05ce\u0007!\u0002\u0002\u05cd\u05cf\u0007",
    "\u001b\u0002\u0002\u05ce\u05cd\u0003\u0002\u0002\u0002\u05ce\u05cf\u0003",
    "\u0002\u0002\u0002\u05cf\u05d0\u0003\u0002\u0002\u0002\u05d0\u05d1\u0007",
    "\f\u0002\u0002\u05d1\u05d2\u0007\u0007\u0002\u0002\u05d2\u05d4\u0005",
    "\u00dan\u0002\u05d3\u0581\u0003\u0002\u0002\u0002\u05d3\u0589\u0003",
    "\u0002\u0002\u0002\u05d3\u0598\u0003\u0002\u0002\u0002\u05d3\u059f\u0003",
    "\u0002\u0002\u0002\u05d3\u05a5\u0003\u0002\u0002\u0002\u05d3\u05aa\u0003",
    "\u0002\u0002\u0002\u05d3\u05be\u0003\u0002\u0002\u0002\u05d3\u05c2\u0003",
    "\u0002\u0002\u0002\u05d3\u05c7\u0003\u0002\u0002\u0002\u05d3\u05cc\u0003",
    "\u0002\u0002\u0002\u05d4\u00d7\u0003\u0002\u0002\u0002\u05d5\u05d7\u0007",
    "\u001b\u0002\u0002\u05d6\u05d5\u0003\u0002\u0002\u0002\u05d6\u05d7\u0003",
    "\u0002\u0002\u0002\u05d7\u05d8\u0003\u0002\u0002\u0002\u05d8\u05d9\u0007",
    "\u001f\u0002\u0002\u05d9\u05e7\t\u0019\u0002\u0002\u05da\u05db\u0007",
    "\u012f\u0002\u0002\u05db\u05e8\u0007\u0130\u0002\u0002\u05dc\u05dd\u0007",
    "\u012f\u0002\u0002\u05dd\u05e2\u0005\u00d2j\u0002\u05de\u05df\u0007",
    "\u0131\u0002\u0002\u05df\u05e1\u0005\u00d2j\u0002\u05e0\u05de\u0003",
    "\u0002\u0002\u0002\u05e1\u05e4\u0003\u0002\u0002\u0002\u05e2\u05e0\u0003",
    "\u0002\u0002\u0002\u05e2\u05e3\u0003\u0002\u0002\u0002\u05e3\u05e5\u0003",
    "\u0002\u0002\u0002\u05e4\u05e2\u0003\u0002\u0002\u0002\u05e5\u05e6\u0007",
    "\u0130\u0002\u0002\u05e6\u05e8\u0003\u0002\u0002\u0002\u05e7\u05da\u0003",
    "\u0002\u0002\u0002\u05e7\u05dc\u0003\u0002\u0002\u0002\u05e8\u05ef\u0003",
    "\u0002\u0002\u0002\u05e9\u05eb\u0007\u001b\u0002\u0002\u05ea\u05e9\u0003",
    "\u0002\u0002\u0002\u05ea\u05eb\u0003\u0002\u0002\u0002\u05eb\u05ec\u0003",
    "\u0002\u0002\u0002\u05ec\u05ed\u0007\u001f\u0002\u0002\u05ed\u05ef\u0005",
    "\u00dan\u0002\u05ee\u05d6\u0003\u0002\u0002\u0002\u05ee\u05ea\u0003",
    "\u0002\u0002\u0002\u05ef\u00d9\u0003\u0002\u0002\u0002\u05f0\u05f1\b",
    "n\u0001\u0002\u05f1\u05f5\u0005\u00dco\u0002\u05f2\u05f3\t\u001b\u0002",
    "\u0002\u05f3\u05f5\u0005\u00dan\t\u05f4\u05f0\u0003\u0002\u0002\u0002",
    "\u05f4\u05f2\u0003\u0002\u0002\u0002\u05f5\u060b\u0003\u0002\u0002\u0002",
    "\u05f6\u05f7\f\b\u0002\u0002\u05f7\u05f8\t\u001c\u0002\u0002\u05f8\u060a",
    "\u0005\u00dan\t\u05f9\u05fa\f\u0007\u0002\u0002\u05fa\u05fb\t\u001d",
    "\u0002\u0002\u05fb\u060a\u0005\u00dan\b\u05fc\u05fd\f\u0006\u0002\u0002",
    "\u05fd\u05fe\u0007\u012a\u0002\u0002\u05fe\u060a\u0005\u00dan\u0007",
    "\u05ff\u0600\f\u0005\u0002\u0002\u0600\u0601\u0007\u012b\u0002\u0002",
    "\u0601\u060a\u0005\u00dan\u0006\u0602\u0603\f\u0004\u0002\u0002\u0603",
    "\u0604\u0007\u0129\u0002\u0002\u0604\u060a\u0005\u00dan\u0005\u0605",
    "\u0606\f\u0003\u0002\u0002\u0606\u0607\u0005\u011e\u0090\u0002\u0607",
    "\u0608\u0005\u00dan\u0004\u0608\u060a\u0003\u0002\u0002\u0002\u0609",
    "\u05f6\u0003\u0002\u0002\u0002\u0609\u05f9\u0003\u0002\u0002\u0002\u0609",
    "\u05fc\u0003\u0002\u0002\u0002\u0609\u05ff\u0003\u0002\u0002\u0002\u0609",
    "\u0602\u0003\u0002\u0002\u0002\u0609\u0605\u0003\u0002\u0002\u0002\u060a",
    "\u060d\u0003\u0002\u0002\u0002\u060b\u0609\u0003\u0002\u0002\u0002\u060b",
    "\u060c\u0003\u0002\u0002\u0002\u060c\u00db\u0003\u0002\u0002\u0002\u060d",
    "\u060b\u0003\u0002\u0002\u0002\u060e\u060f\bo\u0001\u0002\u060f\u0611",
    "\u0007)\u0002\u0002\u0610\u0612\u0005\u0106\u0084\u0002\u0611\u0610",
    "\u0003\u0002\u0002\u0002\u0612\u0613\u0003\u0002\u0002\u0002\u0613\u0611",
    "\u0003\u0002\u0002\u0002\u0613\u0614\u0003\u0002\u0002\u0002\u0614\u0617",
    "\u0003\u0002\u0002\u0002\u0615\u0616\u0007,\u0002\u0002\u0616\u0618",
    "\u0005\u00d2j\u0002\u0617\u0615\u0003\u0002\u0002\u0002\u0617\u0618",
    "\u0003\u0002\u0002\u0002\u0618\u0619\u0003\u0002\u0002\u0002\u0619\u061a",
    "\u0007.\u0002\u0002\u061a\u066a\u0003\u0002\u0002\u0002\u061b\u061c",
    "\u0007)\u0002\u0002\u061c\u061e\u0005\u00d2j\u0002\u061d\u061f\u0005",
    "\u0106\u0084\u0002\u061e\u061d\u0003\u0002\u0002\u0002\u061f\u0620\u0003",
    "\u0002\u0002\u0002\u0620\u061e\u0003\u0002\u0002\u0002\u0620\u0621\u0003",
    "\u0002\u0002\u0002\u0621\u0624\u0003\u0002\u0002\u0002\u0622\u0623\u0007",
    ",\u0002\u0002\u0623\u0625\u0005\u00d2j\u0002\u0624\u0622\u0003\u0002",
    "\u0002\u0002\u0624\u0625\u0003\u0002\u0002\u0002\u0625\u0626\u0003\u0002",
    "\u0002\u0002\u0626\u0627\u0007.\u0002\u0002\u0627\u066a\u0003\u0002",
    "\u0002\u0002\u0628\u0629\u0007_\u0002\u0002\u0629\u062a\u0007\u012f",
    "\u0002\u0002\u062a\u062b\u0005\u00d2j\u0002\u062b\u062c\u0007\t\u0002",
    "\u0002\u062c\u062d\u00058\u001d\u0002\u062d\u062e\u0007\u0130\u0002",
    "\u0002\u062e\u066a\u0003\u0002\u0002\u0002\u062f\u0630\u0007E\u0002",
    "\u0002\u0630\u0631\u0007\u012f\u0002\u0002\u0631\u0634\u0005\u00d2j",
    "\u0002\u0632\u0633\u0007}\u0002\u0002\u0633\u0635\u0007$\u0002\u0002",
    "\u0634\u0632\u0003\u0002\u0002\u0002\u0634\u0635\u0003\u0002\u0002\u0002",
    "\u0635\u0636\u0003\u0002\u0002\u0002\u0636\u0637\u0007\u0130\u0002\u0002",
    "\u0637\u066a\u0003\u0002\u0002\u0002\u0638\u0639\u0007G\u0002\u0002",
    "\u0639\u063a\u0007\u012f\u0002\u0002\u063a\u063d\u0005\u00d2j\u0002",
    "\u063b\u063c\u0007}\u0002\u0002\u063c\u063e\u0007$\u0002\u0002\u063d",
    "\u063b\u0003\u0002\u0002\u0002\u063d\u063e\u0003\u0002\u0002\u0002\u063e",
    "\u063f\u0003\u0002\u0002\u0002\u063f\u0640\u0007\u0130\u0002\u0002\u0640",
    "\u066a\u0003\u0002\u0002\u0002\u0641\u0642\u0007\u0082\u0002\u0002\u0642",
    "\u0643\u0007\u012f\u0002\u0002\u0643\u0644\u0005\u00dan\u0002\u0644",
    "\u0645\u0007\u001a\u0002\u0002\u0645\u0646\u0005\u00dan\u0002\u0646",
    "\u0647\u0007\u0130\u0002\u0002\u0647\u066a\u0003\u0002\u0002\u0002\u0648",
    "\u066a\u0005\u0128\u0095\u0002\u0649\u066a\u0007\u0138\u0002\u0002\u064a",
    "\u064b\u0005\u010a\u0086\u0002\u064b\u064c\u0007\u012c\u0002\u0002\u064c",
    "\u064d\u0007\u0138\u0002\u0002\u064d\u066a\u0003\u0002\u0002\u0002\u064e",
    "\u064f\u0007\u012f\u0002\u0002\u064f\u0650\u0005\u009aN\u0002\u0650",
    "\u0651\u0007\u0130\u0002\u0002\u0651\u066a\u0003\u0002\u0002\u0002\u0652",
    "\u0653\u0005\u00dep\u0002\u0653\u065f\u0007\u012f\u0002\u0002\u0654",
    "\u0656\u0005\u0130\u0099\u0002\u0655\u0654\u0003\u0002\u0002\u0002\u0655",
    "\u0656\u0003\u0002\u0002\u0002\u0656\u0657\u0003\u0002\u0002\u0002\u0657",
    "\u065c\u0005\u00d2j\u0002\u0658\u0659\u0007\u0131\u0002\u0002\u0659",
    "\u065b\u0005\u00d2j\u0002\u065a\u0658\u0003\u0002\u0002\u0002\u065b",
    "\u065e\u0003\u0002\u0002\u0002\u065c\u065a\u0003\u0002\u0002\u0002\u065c",
    "\u065d\u0003\u0002\u0002\u0002\u065d\u0660\u0003\u0002\u0002\u0002\u065e",
    "\u065c\u0003\u0002\u0002\u0002\u065f\u0655\u0003\u0002\u0002\u0002\u065f",
    "\u0660\u0003\u0002\u0002\u0002\u0660\u0661\u0003\u0002\u0002\u0002\u0661",
    "\u0662\u0007\u0130\u0002\u0002\u0662\u066a\u0003\u0002\u0002\u0002\u0663",
    "\u066a\u0005\u00fe\u0080\u0002\u0664\u066a\u0005\u00e0q\u0002\u0665",
    "\u0666\u0007\u012f\u0002\u0002\u0666\u0667\u0005\u00d2j\u0002\u0667",
    "\u0668\u0007\u0130\u0002\u0002\u0668\u066a\u0003\u0002\u0002\u0002\u0669",
    "\u060e\u0003\u0002\u0002\u0002\u0669\u061b\u0003\u0002\u0002\u0002\u0669",
    "\u0628\u0003\u0002\u0002\u0002\u0669\u062f\u0003\u0002\u0002\u0002\u0669",
    "\u0638\u0003\u0002\u0002\u0002\u0669\u0641\u0003\u0002\u0002\u0002\u0669",
    "\u0648\u0003\u0002\u0002\u0002\u0669\u0649\u0003\u0002\u0002\u0002\u0669",
    "\u064a\u0003\u0002\u0002\u0002\u0669\u064e\u0003\u0002\u0002\u0002\u0669",
    "\u0652\u0003\u0002\u0002\u0002\u0669\u0663\u0003\u0002\u0002\u0002\u0669",
    "\u0664\u0003\u0002\u0002\u0002\u0669\u0665\u0003\u0002\u0002\u0002\u066a",
    "\u0672\u0003\u0002\u0002\u0002\u066b\u066c\f\u0006\u0002\u0002\u066c",
    "\u066d\u0007\u012d\u0002\u0002\u066d\u066e\u0005\u00dan\u0002\u066e",
    "\u066f\u0007\u012e\u0002\u0002\u066f\u0671\u0003\u0002\u0002\u0002\u0670",
    "\u066b\u0003\u0002\u0002\u0002\u0671\u0674\u0003\u0002\u0002\u0002\u0672",
    "\u0670\u0003\u0002\u0002\u0002\u0672\u0673\u0003\u0002\u0002\u0002\u0673",
    "\u00dd\u0003\u0002\u0002\u0002\u0674\u0672\u0003\u0002\u0002\u0002\u0675",
    "\u0676\u0005\u010a\u0086\u0002\u0676\u00df\u0003\u0002\u0002\u0002\u0677",
    "\u0678\u0005\u010a\u0086\u0002\u0678\u00e1\u0003\u0002\u0002\u0002\u0679",
    "\u067a\u0005\u00fe\u0080\u0002\u067a\u00e3\u0003\u0002\u0002\u0002\u067b",
    "\u067e\u0005\u00fe\u0080\u0002\u067c\u067e\u0005\u00e0q\u0002\u067d",
    "\u067b\u0003\u0002\u0002\u0002\u067d\u067c\u0003\u0002\u0002\u0002\u067e",
    "\u00e5\u0003\u0002\u0002\u0002\u067f\u0682\u0007(\u0002\u0002\u0680",
    "\u0683\u0005\u00e8u\u0002\u0681\u0683\u0005\u00ecw\u0002\u0682\u0680",
    "\u0003\u0002\u0002\u0002\u0682\u0681\u0003\u0002\u0002\u0002\u0682\u0683",
    "\u0003\u0002\u0002\u0002\u0683\u00e7\u0003\u0002\u0002\u0002\u0684\u0686",
    "\u0005\u00eav\u0002\u0685\u0687\u0005\u00eex\u0002\u0686\u0685\u0003",
    "\u0002\u0002\u0002\u0686\u0687\u0003\u0002\u0002\u0002\u0687\u00e9\u0003",
    "\u0002\u0002\u0002\u0688\u0689\u0005\u00f0y\u0002\u0689\u068a\u0005",
    "\u00fe\u0080\u0002\u068a\u068c\u0003\u0002\u0002\u0002\u068b\u0688\u0003",
    "\u0002\u0002\u0002\u068c\u068d\u0003\u0002\u0002\u0002\u068d\u068b\u0003",
    "\u0002\u0002\u0002\u068d\u068e\u0003\u0002\u0002\u0002\u068e\u00eb\u0003",
    "\u0002\u0002\u0002\u068f\u0692\u0005\u00eex\u0002\u0690\u0693\u0005",
    "\u00eav\u0002\u0691\u0693\u0005\u00eex\u0002\u0692\u0690\u0003\u0002",
    "\u0002\u0002\u0692\u0691\u0003\u0002\u0002\u0002\u0692\u0693\u0003\u0002",
    "\u0002\u0002\u0693\u00ed\u0003\u0002\u0002\u0002\u0694\u0695\u0005\u00f0",
    "y\u0002\u0695\u0696\u0005\u00fe\u0080\u0002\u0696\u0697\u0007n\u0002",
    "\u0002\u0697\u0698\u0005\u00fe\u0080\u0002\u0698\u00ef\u0003\u0002\u0002",
    "\u0002\u0699\u069b\t\u001e\u0002\u0002\u069a\u0699\u0003\u0002\u0002",
    "\u0002\u069a\u069b\u0003\u0002\u0002\u0002\u069b\u069c\u0003\u0002\u0002",
    "\u0002\u069c\u069f\t\u001f\u0002\u0002\u069d\u069f\u0007\u0142\u0002",
    "\u0002\u069e\u069a\u0003\u0002\u0002\u0002\u069e\u069d\u0003\u0002\u0002",
    "\u0002\u069f\u00f1\u0003\u0002\u0002\u0002\u06a0\u06a2\u0007\t\u0002",
    "\u0002\u06a1\u06a0\u0003\u0002\u0002\u0002\u06a1\u06a2\u0003\u0002\u0002",
    "\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002\u06a3\u06a5\u0005\u0100\u0081",
    "\u0002\u06a4\u06a6\u0005\u00fa~\u0002\u06a5\u06a4\u0003\u0002\u0002",
    "\u0002\u06a5\u06a6\u0003\u0002\u0002\u0002\u06a6\u00f3\u0003\u0002\u0002",
    "\u0002\u06a7\u06a9\u0007\t\u0002\u0002\u06a8\u06a7\u0003\u0002\u0002",
    "\u0002\u06a8\u06a9\u0003\u0002\u0002\u0002\u06a9\u06aa\u0003\u0002\u0002",
    "\u0002\u06aa\u06ac\u0005\u0100\u0081\u0002\u06ab\u06ad\u0005\u00fa~",
    "\u0002\u06ac\u06ab\u0003\u0002\u0002\u0002\u06ac\u06ad\u0003\u0002\u0002",
    "\u0002\u06ad\u00f5\u0003\u0002\u0002\u0002\u06ae\u06af\u0005\u00fe\u0080",
    "\u0002\u06af\u06b0\u0005\u00f8}\u0002\u06b0\u00f7\u0003\u0002\u0002",
    "\u0002\u06b1\u06b2\u0007\u0084\u0002\u0002\u06b2\u06b4\u0005\u00fe\u0080",
    "\u0002\u06b3\u06b1\u0003\u0002\u0002\u0002\u06b4\u06b5\u0003\u0002\u0002",
    "\u0002\u06b5\u06b3\u0003\u0002\u0002\u0002\u06b5\u06b6\u0003\u0002\u0002",
    "\u0002\u06b6\u06b9\u0003\u0002\u0002\u0002\u06b7\u06b9\u0003\u0002\u0002",
    "\u0002\u06b8\u06b3\u0003\u0002\u0002\u0002\u06b8\u06b7\u0003\u0002\u0002",
    "\u0002\u06b9\u00f9\u0003\u0002\u0002\u0002\u06ba\u06bb\u0007\u012f\u0002",
    "\u0002\u06bb\u06bc\u0005\u00fc\u007f\u0002\u06bc\u06bd\u0007\u0130\u0002",
    "\u0002\u06bd\u00fb\u0003\u0002\u0002\u0002\u06be\u06c3\u0005\u00fe\u0080",
    "\u0002\u06bf\u06c0\u0007\u0131\u0002\u0002\u06c0\u06c2\u0005\u00fe\u0080",
    "\u0002\u06c1\u06bf\u0003\u0002\u0002\u0002\u06c2\u06c5\u0003\u0002\u0002",
    "\u0002\u06c3\u06c1\u0003\u0002\u0002\u0002\u06c3\u06c4\u0003\u0002\u0002",
    "\u0002\u06c4\u00fd\u0003\u0002\u0002\u0002\u06c5\u06c3\u0003\u0002\u0002",
    "\u0002\u06c6\u06c9\u0005\u0100\u0081\u0002\u06c7\u06c9\u0005\u0134\u009b",
    "\u0002\u06c8\u06c6\u0003\u0002\u0002\u0002\u06c8\u06c7\u0003\u0002\u0002",
    "\u0002\u06c9\u00ff\u0003\u0002\u0002\u0002\u06ca\u06cf\u0005\u0102\u0082",
    "\u0002\u06cb\u06cf\u0005\u0104\u0083\u0002\u06cc\u06cf\u0005\u0132\u009a",
    "\u0002\u06cd\u06cf\u0005\u0136\u009c\u0002\u06ce\u06ca\u0003\u0002\u0002",
    "\u0002\u06ce\u06cb\u0003\u0002\u0002\u0002\u06ce\u06cc\u0003\u0002\u0002",
    "\u0002\u06ce\u06cd\u0003\u0002\u0002\u0002\u06cf\u0101\u0003\u0002\u0002",
    "\u0002\u06d0\u06d1\t \u0002\u0002\u06d1\u0103\u0003\u0002\u0002\u0002",
    "\u06d2\u06d3\u0007\u0142\u0002\u0002\u06d3\u0105\u0003\u0002\u0002\u0002",
    "\u06d4\u06d5\u0007*\u0002\u0002\u06d5\u06d6\u0005\u00d2j\u0002\u06d6",
    "\u06d7\u0007+\u0002\u0002\u06d7\u06d8\u0005\u00d2j\u0002\u06d8\u0107",
    "\u0003\u0002\u0002\u0002\u06d9\u06de\u0005\u010a\u0086\u0002\u06da\u06db",
    "\u0007\u0131\u0002\u0002\u06db\u06dd\u0005\u010a\u0086\u0002\u06dc\u06da",
    "\u0003\u0002\u0002\u0002\u06dd\u06e0\u0003\u0002\u0002\u0002\u06de\u06dc",
    "\u0003\u0002\u0002\u0002\u06de\u06df\u0003\u0002\u0002\u0002\u06df\u0109",
    "\u0003\u0002\u0002\u0002\u06e0\u06de\u0003\u0002\u0002\u0002\u06e1\u06e5",
    "\u0007\u0146\u0002\u0002\u06e2\u06e4\u0007\u0140\u0002\u0002\u06e3\u06e2",
    "\u0003\u0002\u0002\u0002\u06e4\u06e7\u0003\u0002\u0002\u0002\u06e5\u06e6",
    "\u0003\u0002\u0002\u0002\u06e5\u06e3\u0003\u0002\u0002\u0002\u06e6\u010b",
    "\u0003\u0002\u0002\u0002\u06e7\u06e5\u0003\u0002\u0002\u0002\u06e8\u06ec",
    "\t!\u0002\u0002\u06e9\u06eb\t\"\u0002\u0002\u06ea\u06e9\u0003\u0002",
    "\u0002\u0002\u06eb\u06ee\u0003\u0002\u0002\u0002\u06ec\u06ed\u0003\u0002",
    "\u0002\u0002\u06ec\u06ea\u0003\u0002\u0002\u0002\u06ed\u010d\u0003\u0002",
    "\u0002\u0002\u06ee\u06ec\u0003\u0002\u0002\u0002\u06ef\u06f0\u0007H",
    "\u0002\u0002\u06f0\u06f1\u0005\u0114\u008b\u0002\u06f1\u010f\u0003\u0002",
    "\u0002\u0002\u06f2\u06f3\u0007\u0081\u0002\u0002\u06f3\u06f4\u0007\u001b",
    "\u0002\u0002\u06f4\u06f5\u0007\u001d\u0002\u0002\u06f5\u0111\u0003\u0002",
    "\u0002\u0002\u06f6\u06f7\u0007\u0081\u0002\u0002\u06f7\u06f8\u0007\u001d",
    "\u0002\u0002\u06f8\u0113\u0003\u0002\u0002\u0002\u06f9\u06fa\u0007\u012f",
    "\u0002\u0002\u06fa\u06ff\u0005\u0116\u008c\u0002\u06fb\u06fc\u0007\u0131",
    "\u0002\u0002\u06fc\u06fe\u0005\u0116\u008c\u0002\u06fd\u06fb\u0003\u0002",
    "\u0002\u0002\u06fe\u0701\u0003\u0002\u0002\u0002\u06ff\u06fd\u0003\u0002",
    "\u0002\u0002\u06ff\u0700\u0003\u0002\u0002\u0002\u0700\u0702\u0003\u0002",
    "\u0002\u0002\u0701\u06ff\u0003\u0002\u0002\u0002\u0702\u0703\u0007\u0130",
    "\u0002\u0002\u0703\u0115\u0003\u0002\u0002\u0002\u0704\u0709\u0005\u0118",
    "\u008d\u0002\u0705\u0707\u0007\u0124\u0002\u0002\u0706\u0705\u0003\u0002",
    "\u0002\u0002\u0706\u0707\u0003\u0002\u0002\u0002\u0707\u0708\u0003\u0002",
    "\u0002\u0002\u0708\u070a\u0005\u011a\u008e\u0002\u0709\u0706\u0003\u0002",
    "\u0002\u0002\u0709\u070a\u0003\u0002\u0002\u0002\u070a\u0117\u0003\u0002",
    "\u0002\u0002\u070b\u070f\u0005\u00fe\u0080\u0002\u070c\u070f\u0005\u00e0",
    "q\u0002\u070d\u070f\u0007\u0142\u0002\u0002\u070e\u070b\u0003\u0002",
    "\u0002\u0002\u070e\u070c\u0003\u0002\u0002\u0002\u070e\u070d\u0003\u0002",
    "\u0002\u0002\u070f\u0119\u0003\u0002\u0002\u0002\u0710\u0715\u0007\u0143",
    "\u0002\u0002\u0711\u0715\u0007\u0144\u0002\u0002\u0712\u0715\u0005\u012e",
    "\u0098\u0002\u0713\u0715\u0007\u0142\u0002\u0002\u0714\u0710\u0003\u0002",
    "\u0002\u0002\u0714\u0711\u0003\u0002\u0002\u0002\u0714\u0712\u0003\u0002",
    "\u0002\u0002\u0714\u0713\u0003\u0002\u0002\u0002\u0715\u011b\u0003\u0002",
    "\u0002\u0002\u0716\u071d\u0007\u0019\u0002\u0002\u0717\u0718\u0007\u012a",
    "\u0002\u0002\u0718\u071d\u0007\u012a\u0002\u0002\u0719\u071d\u0007\u0018",
    "\u0002\u0002\u071a\u071b\u0007\u0129\u0002\u0002\u071b\u071d\u0007\u0129",
    "\u0002\u0002\u071c\u0716\u0003\u0002\u0002\u0002\u071c\u0717\u0003\u0002",
    "\u0002\u0002\u071c\u0719\u0003\u0002\u0002\u0002\u071c\u071a\u0003\u0002",
    "\u0002\u0002\u071d\u011d\u0003\u0002\u0002\u0002\u071e\u072d\u0007\u0124",
    "\u0002\u0002\u071f\u072d\u0007\u0125\u0002\u0002\u0720\u072d\u0007\u0126",
    "\u0002\u0002\u0721\u0722\u0007\u0126\u0002\u0002\u0722\u072d\u0007\u0124",
    "\u0002\u0002\u0723\u0724\u0007\u0125\u0002\u0002\u0724\u072d\u0007\u0124",
    "\u0002\u0002\u0725\u0726\u0007\u0126\u0002\u0002\u0726\u072d\u0007\u0125",
    "\u0002\u0002\u0727\u0728\u0007\u0127\u0002\u0002\u0728\u072d\u0007\u0124",
    "\u0002\u0002\u0729\u072a\u0007\u0126\u0002\u0002\u072a\u072b\u0007\u0124",
    "\u0002\u0002\u072b\u072d\u0007\u0125\u0002\u0002\u072c\u071e\u0003\u0002",
    "\u0002\u0002\u072c\u071f\u0003\u0002\u0002\u0002\u072c\u0720\u0003\u0002",
    "\u0002\u0002\u072c\u0721\u0003\u0002\u0002\u0002\u072c\u0723\u0003\u0002",
    "\u0002\u0002\u072c\u0725\u0003\u0002\u0002\u0002\u072c\u0727\u0003\u0002",
    "\u0002\u0002\u072c\u0729\u0003\u0002\u0002\u0002\u072d\u011f\u0003\u0002",
    "\u0002\u0002\u072e\u072f\u0007\u0126\u0002\u0002\u072f\u0736\u0007\u0126",
    "\u0002\u0002\u0730\u0731\u0007\u0125\u0002\u0002\u0731\u0736\u0007\u0125",
    "\u0002\u0002\u0732\u0736\u0007\u012a\u0002\u0002\u0733\u0736\u0007\u012b",
    "\u0002\u0002\u0734\u0736\u0007\u0129\u0002\u0002\u0735\u072e\u0003\u0002",
    "\u0002\u0002\u0735\u0730\u0003\u0002\u0002\u0002\u0735\u0732\u0003\u0002",
    "\u0002\u0002\u0735\u0733\u0003\u0002\u0002\u0002\u0735\u0734\u0003\u0002",
    "\u0002\u0002\u0736\u0121\u0003\u0002\u0002\u0002\u0737\u0738\t#\u0002",
    "\u0002\u0738\u0123\u0003\u0002\u0002\u0002\u0739\u073a\t$\u0002\u0002",
    "\u073a\u0125\u0003\u0002\u0002\u0002\u073b\u073c\u0005\u010a\u0086\u0002",
    "\u073c\u0127\u0003\u0002\u0002\u0002\u073d\u074a\u0005\u012a\u0096\u0002",
    "\u073e\u074a\u0005\u012c\u0097\u0002\u073f\u074a\u0005\u00e6t\u0002",
    "\u0740\u0741\u0007\u013a\u0002\u0002\u0741\u074a\u0005\u012c\u0097\u0002",
    "\u0742\u074a\u0005\u012e\u0098\u0002\u0743\u074a\u0007\u0144\u0002\u0002",
    "\u0744\u074a\u0007\u0145\u0002\u0002\u0745\u0747\u0007\u001b\u0002\u0002",
    "\u0746\u0745\u0003\u0002\u0002\u0002\u0746\u0747\u0003\u0002\u0002\u0002",
    "\u0747\u0748\u0003\u0002\u0002\u0002\u0748\u074a\u0007\u0122\u0002\u0002",
    "\u0749\u073d\u0003\u0002\u0002\u0002\u0749\u073e\u0003\u0002\u0002\u0002",
    "\u0749\u073f\u0003\u0002\u0002\u0002\u0749\u0740\u0003\u0002\u0002\u0002",
    "\u0749\u0742\u0003\u0002\u0002\u0002\u0749\u0743\u0003\u0002\u0002\u0002",
    "\u0749\u0744\u0003\u0002\u0002\u0002\u0749\u0746\u0003\u0002\u0002\u0002",
    "\u074a\u0129\u0003\u0002\u0002\u0002\u074b\u074c\u0007\u0142\u0002\u0002",
    "\u074c\u012b\u0003\u0002\u0002\u0002\u074d\u074e\u0007\u0143\u0002\u0002",
    "\u074e\u012d\u0003\u0002\u0002\u0002\u074f\u0750\t\u001a\u0002\u0002",
    "\u0750\u012f\u0003\u0002\u0002\u0002\u0751\u0752\t%\u0002\u0002\u0752",
    "\u0131\u0003\u0002\u0002\u0002\u0753\u0754\t&\u0002\u0002\u0754\u0133",
    "\u0003\u0002\u0002\u0002\u0755\u0756\t\'\u0002\u0002\u0756\u0135\u0003",
    "\u0002\u0002\u0002\u0757\u0758\t(\u0002\u0002\u0758\u0137\u0003\u0002",
    "\u0002\u0002\u00e1\u0140\u0143\u0145\u0154\u0166\u016a\u0173\u0178\u017f",
    "\u0186\u018a\u0193\u019f\u01a2\u01a9\u01b1\u01b6\u01b9\u01c0\u01c8\u01cc",
    "\u01d8\u01e0\u01e4\u01f9\u01fd\u0201\u0205\u020e\u0213\u0217\u021b\u021f",
    "\u0222\u0226\u022b\u0231\u0236\u023b\u023e\u0242\u0249\u024f\u0253\u0257",
    "\u025b\u025f\u0263\u0265\u026f\u0277\u028f\u0296\u029c\u02a6\u02a9\u02b1",
    "\u02bd\u02c6\u02d8\u02e5\u02ea\u02ee\u02f6\u02fa\u0302\u030c\u0310\u0316",
    "\u031a\u031e\u0321\u032a\u032e\u0335\u0338\u0342\u034c\u035b\u0366\u036a",
    "\u0371\u0376\u037c\u0380\u0387\u038b\u038f\u0393\u039b\u039f\u03a4\u03aa",
    "\u03b0\u03b3\u03b7\u03c6\u03cf\u03dd\u03e9\u03f5\u0400\u0403\u0407\u040a",
    "\u040c\u0411\u0415\u0418\u041c\u0425\u042f\u0434\u0440\u0443\u0446\u0449",
    "\u044d\u0455\u0458\u045c\u045f\u046a\u0473\u0476\u0479\u047e\u0480\u0482",
    "\u0487\u048a\u048e\u0491\u0494\u04a0\u04a7\u04b2\u04c7\u04cc\u04d8\u04e4",
    "\u04f0\u04fc\u0509\u050e\u051a\u051f\u0524\u052c\u0534\u053e\u0541\u054a",
    "\u054d\u0550\u0556\u055a\u0560\u0571\u0573\u057b\u057d\u0581\u0589\u0592",
    "\u0598\u05a5\u05aa\u05b6\u05bb\u05be\u05c4\u05c9\u05ce\u05d3\u05d6\u05e2",
    "\u05e7\u05ea\u05ee\u05f4\u0609\u060b\u0613\u0617\u0620\u0624\u0634\u063d",
    "\u0655\u065c\u065f\u0669\u0672\u067d\u0682\u0686\u068d\u0692\u069a\u069e",
    "\u06a1\u06a5\u06a8\u06ac\u06b5\u06b8\u06c3\u06c8\u06ce\u06de\u06e5\u06ec",
    "\u06ff\u0706\u0709\u070e\u0714\u071c\u072c\u0735\u0746\u0749"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, "'SELECT'", "'FROM'", "'ADD'", 
                     "'AS'", "'ALL'", "'ANY'", "'DISTINCT'", "'WHERE'", 
                     "'GROUP'", "'BY'", "'GROUPING'", "'SETS'", "'CUBE'", 
                     "'ROLLUP'", "'ORDER'", "'HAVING'", "'LIMIT'", "'AT'", 
                     "'OR'", "'AND'", "'IN'", "'NOT'", "'NO'", "'EXISTS'", 
                     "'BETWEEN'", "'LIKE'", "'RLIKE'", "'IS'", "'TRUE'", 
                     "'FALSE'", "'NULLS'", "'ASC'", "'DESC'", "'FOR'", "'INTERVAL'", 
                     "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'BEGIN'", 
                     "'END'", "'JOIN'", "'CROSS'", "'OUTER'", "'INNER'", 
                     "'LEFT'", "'SEMI'", "'RIGHT'", "'FULL'", "'USER'", 
                     "'NATURAL'", "'ON'", "'PIVOT'", "'LATERAL'", "'WINDOW'", 
                     "'OVER'", "'PARTITION'", "'RANGE'", "'ROWS'", "'UNBOUNDED'", 
                     "'PRECEDING'", "'FOLLOWING'", "'CURRENT'", "'FIRST'", 
                     "'AFTER'", "'LAST'", "'WITH'", "'VALUES'", "'CREATE'", 
                     "'TABLE'", "'DIRECTORY'", "'VIEW'", "'REPLACE'", "'EXECUTE'", 
                     "'STATEMENT'", "'INSERT'", "'DELETE'", "'REMOVE'", 
                     "'INTO'", "'DESCRIBE'", "'EXPLAIN'", "'PLAN'", "'CHANGELOG_MODE'", 
                     "'JSON_EXECUTION_PLAN'", "'ESTIMATED_COST'", "'FORMAT'", 
                     "'LOGICAL'", "'CODEGEN'", "'COST'", "'CAST'", "'SHOW'", 
                     "'TABLES'", "'COLUMNS'", "'COLUMN'", "'USE'", "'MODULE'", 
                     "'MODULES'", "'PARTITIONS'", "'FUNCTIONS'", "'DROP'", 
                     "'UNION'", "'EXCEPT'", "'SETMINUS'", "'INTERSECT'", 
                     "'TO'", "'TABLESAMPLE'", "'STRATIFY'", "'ALTER'", "'RENAME'", 
                     "'STRUCT'", "'COMMENT'", "'SET'", "'RESET'", "'DATA'", 
                     "'START'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", 
                     "'MACRO'", "'IGNORE'", "'BOTH'", "'LEADING'", "'TRAILING'", 
                     "'IF'", "'POSITION'", "'EXTRACT'", "'MINUS'", "'DIV'", 
                     "'PERCENTLIT'", "'BUCKET'", "'OUT'", "'OF'", "'SORT'", 
                     "'CLUSTER'", "'DISTRIBUTE'", "'OVERWRITE'", "'TRANSFORM'", 
                     "'REDUCE'", "'USING'", "'SERDE'", "'SERDEPROPERTIES'", 
                     "'RECORDREADER'", "'RECORDWRITER'", "'DELIMITED'", 
                     "'FIELDS'", "'TERMINATED'", "'COLLECTION'", "'ITEMS'", 
                     "'KEYS'", "'ESCAPED'", "'LINES'", "'SEPARATED'", "'FUNCTION'", 
                     "'EXTENDED'", "'REFRESH'", "'CLEAR'", "'CACHE'", "'UNCACHE'", 
                     "'LAZY'", "'FORMATTED'", "'GLOBAL'", "'TEMPORARY'", 
                     "'OPTIONS'", "'UNSET'", "'TBLPROPERTIES'", "'DBPROPERTIES'", 
                     "'BUCKETS'", "'SKEWED'", "'STORED'", "'DIRECTORIES'", 
                     "'LOCATION'", "'EXCHANGE'", "'ARCHIVE'", "'UNARCHIVE'", 
                     "'FILEFORMAT'", "'TOUCH'", "'COMPACT'", "'CONCATENATE'", 
                     "'CHANGE'", "'CASCADE'", "'CONSTRAINT'", "'RESTRICT'", 
                     "'CLUSTERED'", "'SORTED'", "'PURGE'", "'INPUTFORMAT'", 
                     "'OUTPUTFORMAT'", "'DATABASE'", "'DATABASES'", "'DFS'", 
                     "'TRUNCATE'", "'ANALYZE'", "'COMPUTE'", "'LIST'", "'STATISTICS'", 
                     "'PARTITIONED'", "'EXTERNAL'", "'DEFINED'", "'REVOKE'", 
                     "'GRANT'", "'LOCK'", "'UNLOCK'", "'MSCK'", "'REPAIR'", 
                     "'RECOVER'", "'EXPORT'", "'IMPORT'", "'LOAD'", "'UNLOAD'", 
                     "'ROLE'", "'ROLES'", "'COMPACTIONS'", "'PRINCIPALS'", 
                     "'TRANSACTIONS'", "'INDEX'", "'INDEXES'", "'LOCKS'", 
                     "'OPTION'", "'ANTI'", "'LOCAL'", "'INPATH'", "'WATERMARK'", 
                     "'UNNEST'", "'MATCH'", "'NEXT'", "'WITHIN'", "'WS'", 
                     "'SYSTEM'", "'INCLUDING'", "'EXCLUDING'", "'OVERWRITING'", 
                     "'CONSTRAINTS'", "'GENERATED'", "'WATERMARKS'", "'CATALOG'", 
                     "'LANGUAGE'", "'JAVA'", "'SCALA'", "'PYTHON'", "'JAR'", 
                     "'FILE'", "'PYTHON_FILES'", "'PYTHON_REQUIREMENTS'", 
                     "'PYTHON_DEPENDENCIES'", "'PYTHON_JAR'", "'PYTHON_ARCHIVES'", 
                     "'PYTHON_PARAMETER'", "'ENGINE'", "'CATALOGS'", "'VIEWS'", 
                     "'JARS'", "'PRIMARY'", "'KEY'", "'PERIOD'", "'SYSTEM_TIME'", 
                     "'ENFORCED'", "'METADATA'", "'VIRTUAL'", "'STRING'", 
                     "'ARRAY'", "'MAP'", "'CHAR'", "'VARCHAR'", "'BINARY'", 
                     "'VARBINARY'", "'BYTES'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
                     "'TINYINT'", "'SMALLINT'", "'INT'", "'INTEGER'", "'BIGINT'", 
                     "'FLOAT'", "'DOUBLE'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
                     "'TIMESTAMP_LTZ'", "'MULTISET'", "'BOOLEAN'", "'RAW'", 
                     "'ROW'", "'NULL'", "'DATETIME'", "'='", "'>'", "'<'", 
                     "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'['", "']'", 
                     "'('", "')'", "','", "';'", "'@'", "'''", "'\"'", "'`'", 
                     "':'", "'*'", "'_'", "'-'", "'+'", "'%'", "'||'", "'--'", 
                     "'/'" ];

var symbolicNames = [ null, "SPACE", "COMMENT_INPUT", "LINE_COMMENT", "SELECT", 
                      "FROM", "ADD", "AS", "ALL", "ANY", "DISTINCT", "WHERE", 
                      "GROUP", "BY", "GROUPING", "SETS", "CUBE", "ROLLUP", 
                      "ORDER", "HAVING", "LIMIT", "AT", "OR", "AND", "IN", 
                      "NOT", "NO", "EXISTS", "BETWEEN", "LIKE", "RLIKE", 
                      "IS", "TRUE", "FALSE", "NULLS", "ASC", "DESC", "FOR", 
                      "INTERVAL", "CASE", "WHEN", "THEN", "ELSE", "BEGIN", 
                      "END", "JOIN", "CROSS", "OUTER", "INNER", "LEFT", 
                      "SEMI", "RIGHT", "FULL", "USER", "NATURAL", "ON", 
                      "PIVOT", "LATERAL", "WINDOW", "OVER", "PARTITION", 
                      "RANGE", "ROWS", "UNBOUNDED", "PRECEDING", "FOLLOWING", 
                      "CURRENT", "FIRST", "AFTER", "LAST", "WITH", "VALUES", 
                      "CREATE", "TABLE", "DIRECTORY", "VIEW", "REPLACE", 
                      "EXECUTE", "STATEMENT", "INSERT", "DELETE", "REMOVE", 
                      "INTO", "DESCRIBE", "EXPLAIN", "PLAN", "CHANGELOG_MODE", 
                      "JSON_EXECUTION_PLAN", "ESTIMATED_COST", "FORMAT", 
                      "LOGICAL", "CODEGEN", "COST", "CAST", "SHOW", "TABLES", 
                      "COLUMNS", "COLUMN", "USE", "MODULE", "MODULES", "PARTITIONS", 
                      "FUNCTIONS", "DROP", "UNION", "EXCEPT", "SETMINUS", 
                      "INTERSECT", "TO", "TABLESAMPLE", "STRATIFY", "ALTER", 
                      "RENAME", "STRUCT", "COMMENT", "SET", "RESET", "DATA", 
                      "START", "TRANSACTION", "COMMIT", "ROLLBACK", "MACRO", 
                      "IGNORE", "BOTH", "LEADING", "TRAILING", "IF", "POSITION", 
                      "EXTRACT", "MINUS", "DIV", "PERCENTLIT", "BUCKET", 
                      "OUT", "OF", "SORT", "CLUSTER", "DISTRIBUTE", "OVERWRITE", 
                      "TRANSFORM", "REDUCE", "USING", "SERDE", "SERDEPROPERTIES", 
                      "RECORDREADER", "RECORDWRITER", "DELIMITED", "FIELDS", 
                      "TERMINATED", "COLLECTION", "ITEMS", "KEYS", "ESCAPED", 
                      "LINES", "SEPARATED", "FUNCTION", "EXTENDED", "REFRESH", 
                      "CLEAR", "CACHE", "UNCACHE", "LAZY", "FORMATTED", 
                      "GLOBAL", "TEMPORARY", "OPTIONS", "UNSET", "TBLPROPERTIES", 
                      "DBPROPERTIES", "BUCKETS", "SKEWED", "STORED", "DIRECTORIES", 
                      "LOCATION", "EXCHANGE", "ARCHIVE", "UNARCHIVE", "FILEFORMAT", 
                      "TOUCH", "COMPACT", "CONCATENATE", "CHANGE", "CASCADE", 
                      "CONSTRAINT", "RESTRICT", "CLUSTERED", "SORTED", "PURGE", 
                      "INPUTFORMAT", "OUTPUTFORMAT", "DATABASE", "DATABASES", 
                      "DFS", "TRUNCATE", "ANALYZE", "COMPUTE", "LIST", "STATISTICS", 
                      "PARTITIONED", "EXTERNAL", "DEFINED", "REVOKE", "GRANT", 
                      "LOCK", "UNLOCK", "MSCK", "REPAIR", "RECOVER", "EXPORT", 
                      "IMPORT", "LOAD", "UNLOAD", "ROLE", "ROLES", "COMPACTIONS", 
                      "PRINCIPALS", "TRANSACTIONS", "INDEX", "INDEXES", 
                      "LOCKS", "OPTION", "ANTI", "LOCAL", "INPATH", "WATERMARK", 
                      "UNNEST", "MATCH", "NEXT", "WITHIN", "WS", "SYSTEM", 
                      "INCLUDING", "EXCLUDING", "OVERWRITING", "CONSTRAINTS", 
                      "GENERATED", "WATERMARKS", "CATALOG", "LANGUAGE", 
                      "JAVA", "SCALA", "PYTHON", "JAR", "FILE", "PYTHON_FILES", 
                      "PYTHON_REQUIREMENTS", "PYTHON_DEPENDENCIES", "PYTHON_JAR", 
                      "PYTHON_ARCHIVES", "PYTHON_PARAMETER", "ENGINE", "CATALOGS", 
                      "VIEWS", "JARS", "PRIMARY", "KEY", "PERIOD", "SYSTEM_TIME", 
                      "ENFORCED", "METADATA", "VIRTUAL", "STRING", "ARRAY", 
                      "MAP", "CHAR", "VARCHAR", "BINARY", "VARBINARY", "BYTES", 
                      "DECIMAL", "DEC", "NUMERIC", "TINYINT", "SMALLINT", 
                      "INT", "INTEGER", "BIGINT", "FLOAT", "DOUBLE", "DATE", 
                      "TIME", "TIMESTAMP", "TIMESTAMP_LTZ", "MULTISET", 
                      "BOOLEAN", "RAW", "ROW", "NULL", "DATETIME", "EQUAL_SYMBOL", 
                      "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
                      "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
                      "DOT", "LS_BRACKET", "RS_BRACKET", "LR_BRACKET", "RR_BRACKET", 
                      "COMMA", "SEMICOLON", "AT_SIGN", "SINGLE_QUOTE_SYMB", 
                      "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", 
                      "ASTERISK_SIGN", "UNDERLINE_SIGN", "HYPNEN_SIGN", 
                      "ADD_SIGN", "PENCENT_SIGN", "DOUBLE_VERTICAL_SIGN", 
                      "DOUBLE_HYPNEN_SIGN", "SLASH_SIGN", "DOT_ID", "PLUS_DOT_ID", 
                      "STRING_LITERAL", "DIG_LITERAL", "REAL_LITERAL", "BIT_STRING", 
                      "ID_LITERAL", "PLUS_ID_LITERAL", "FILE_PATH" ];

var ruleNames =  [ "program", "statement", "sqlStatements", "sqlStatement", 
                   "emptyStatement", "ddlStatement", "dmlStatement", "describeStatement", 
                   "explainStatement", "explainDetails", "explainDetail", 
                   "useStatement", "useModuleStatement", "showStatememt", 
                   "loadStatement", "unloadStatememt", "setStatememt", "resetStatememt", 
                   "jarStatememt", "dtAddStatement", "createTable", "simpleCreateTable", 
                   "createTableAsSelect", "columnOptionDefinition", "physicalColumnDefinition", 
                   "columnName", "columnNameList", "columnType", "lengthOneDimension", 
                   "lengthTwoOptionalDimension", "lengthTwoStringDimension", 
                   "lengthOneTypeDimension", "mapTypeDimension", "rowTypeDimension", 
                   "columnConstraint", "commentSpec", "metadataColumnDefinition", 
                   "metadataKey", "computedColumnDefinition", "computedColumnExpression", 
                   "watermarkDefinition", "tableConstraint", "constraintName", 
                   "selfDefinitionClause", "partitionDefinition", "transformList", 
                   "transform", "transformArgument", "likeDefinition", "sourceTable", 
                   "likeOption", "createCatalog", "createDatabase", "createView", 
                   "createFunction", "usingClause", "jarFileName", "alterTable", 
                   "renameDefinition", "setKeyValueDefinition", "alertView", 
                   "alterDatabase", "alterFunction", "dropCatalog", "dropTable", 
                   "dropDatabase", "dropView", "dropFunction", "insertStatement", 
                   "insertSimpleStatement", "insertPartitionDefinition", 
                   "insertColumnListDefinition", "valuesDefinition", "valuesRowDefinition", 
                   "insertMulStatementCompatibility", "insertMulStatement", 
                   "queryStatement", "valuesCaluse", "withItem", "withItemName", 
                   "selectStatement", "selectClause", "projectItemDefinition", 
                   "fromClause", "tableExpression", "tableReference", "tablePrimary", 
                   "tablePath", "systemTimePeriod", "dateTimeExpression", 
                   "joinCondition", "whereClause", "groupByClause", "groupItemDefinition", 
                   "havingClause", "orderByCaluse", "orderItemDefition", 
                   "limitClause", "windowClause", "namedWindow", "windowSpec", 
                   "sortItem", "windowFrame", "frameBound", "expression", 
                   "booleanExpression", "predicate", "likePredicate", "valueExpression", 
                   "primaryExpression", "functionName", "dereferenceDefinition", 
                   "correlationName", "qualifiedName", "interval", "errorCapturingMultiUnitsInterval", 
                   "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
                   "unitToUnitInterval", "intervalValue", "columnAlias", 
                   "tableAlias", "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
                   "identifierList", "identifierSeq", "identifier", "strictIdentifier", 
                   "unquotedIdentifier", "quotedIdentifier", "whenClause", 
                   "uidList", "uid", "plusUid", "withOption", "ifNotExists", 
                   "ifExists", "tablePropertyList", "tableProperty", "tablePropertyKey", 
                   "tablePropertyValue", "logicalOperator", "comparisonOperator", 
                   "bitOperator", "mathOperator", "unaryOperator", "fullColumnName", 
                   "constant", "stringLiteral", "decimalLiteral", "booleanLiteral", 
                   "setQuantifier", "ansiNonReserved", "strictNonReserved", 
                   "nonReserved" ];

function FlinkSqlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

FlinkSqlParser.prototype = Object.create(antlr4.Parser.prototype);
FlinkSqlParser.prototype.constructor = FlinkSqlParser;

Object.defineProperty(FlinkSqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

FlinkSqlParser.EOF = antlr4.Token.EOF;
FlinkSqlParser.SPACE = 1;
FlinkSqlParser.COMMENT_INPUT = 2;
FlinkSqlParser.LINE_COMMENT = 3;
FlinkSqlParser.SELECT = 4;
FlinkSqlParser.FROM = 5;
FlinkSqlParser.ADD = 6;
FlinkSqlParser.AS = 7;
FlinkSqlParser.ALL = 8;
FlinkSqlParser.ANY = 9;
FlinkSqlParser.DISTINCT = 10;
FlinkSqlParser.WHERE = 11;
FlinkSqlParser.GROUP = 12;
FlinkSqlParser.BY = 13;
FlinkSqlParser.GROUPING = 14;
FlinkSqlParser.SETS = 15;
FlinkSqlParser.CUBE = 16;
FlinkSqlParser.ROLLUP = 17;
FlinkSqlParser.ORDER = 18;
FlinkSqlParser.HAVING = 19;
FlinkSqlParser.LIMIT = 20;
FlinkSqlParser.AT = 21;
FlinkSqlParser.OR = 22;
FlinkSqlParser.AND = 23;
FlinkSqlParser.IN = 24;
FlinkSqlParser.NOT = 25;
FlinkSqlParser.NO = 26;
FlinkSqlParser.EXISTS = 27;
FlinkSqlParser.BETWEEN = 28;
FlinkSqlParser.LIKE = 29;
FlinkSqlParser.RLIKE = 30;
FlinkSqlParser.IS = 31;
FlinkSqlParser.TRUE = 32;
FlinkSqlParser.FALSE = 33;
FlinkSqlParser.NULLS = 34;
FlinkSqlParser.ASC = 35;
FlinkSqlParser.DESC = 36;
FlinkSqlParser.FOR = 37;
FlinkSqlParser.INTERVAL = 38;
FlinkSqlParser.CASE = 39;
FlinkSqlParser.WHEN = 40;
FlinkSqlParser.THEN = 41;
FlinkSqlParser.ELSE = 42;
FlinkSqlParser.BEGIN = 43;
FlinkSqlParser.END = 44;
FlinkSqlParser.JOIN = 45;
FlinkSqlParser.CROSS = 46;
FlinkSqlParser.OUTER = 47;
FlinkSqlParser.INNER = 48;
FlinkSqlParser.LEFT = 49;
FlinkSqlParser.SEMI = 50;
FlinkSqlParser.RIGHT = 51;
FlinkSqlParser.FULL = 52;
FlinkSqlParser.USER = 53;
FlinkSqlParser.NATURAL = 54;
FlinkSqlParser.ON = 55;
FlinkSqlParser.PIVOT = 56;
FlinkSqlParser.LATERAL = 57;
FlinkSqlParser.WINDOW = 58;
FlinkSqlParser.OVER = 59;
FlinkSqlParser.PARTITION = 60;
FlinkSqlParser.RANGE = 61;
FlinkSqlParser.ROWS = 62;
FlinkSqlParser.UNBOUNDED = 63;
FlinkSqlParser.PRECEDING = 64;
FlinkSqlParser.FOLLOWING = 65;
FlinkSqlParser.CURRENT = 66;
FlinkSqlParser.FIRST = 67;
FlinkSqlParser.AFTER = 68;
FlinkSqlParser.LAST = 69;
FlinkSqlParser.WITH = 70;
FlinkSqlParser.VALUES = 71;
FlinkSqlParser.CREATE = 72;
FlinkSqlParser.TABLE = 73;
FlinkSqlParser.DIRECTORY = 74;
FlinkSqlParser.VIEW = 75;
FlinkSqlParser.REPLACE = 76;
FlinkSqlParser.EXECUTE = 77;
FlinkSqlParser.STATEMENT = 78;
FlinkSqlParser.INSERT = 79;
FlinkSqlParser.DELETE = 80;
FlinkSqlParser.REMOVE = 81;
FlinkSqlParser.INTO = 82;
FlinkSqlParser.DESCRIBE = 83;
FlinkSqlParser.EXPLAIN = 84;
FlinkSqlParser.PLAN = 85;
FlinkSqlParser.CHANGELOG_MODE = 86;
FlinkSqlParser.JSON_EXECUTION_PLAN = 87;
FlinkSqlParser.ESTIMATED_COST = 88;
FlinkSqlParser.FORMAT = 89;
FlinkSqlParser.LOGICAL = 90;
FlinkSqlParser.CODEGEN = 91;
FlinkSqlParser.COST = 92;
FlinkSqlParser.CAST = 93;
FlinkSqlParser.SHOW = 94;
FlinkSqlParser.TABLES = 95;
FlinkSqlParser.COLUMNS = 96;
FlinkSqlParser.COLUMN = 97;
FlinkSqlParser.USE = 98;
FlinkSqlParser.MODULE = 99;
FlinkSqlParser.MODULES = 100;
FlinkSqlParser.PARTITIONS = 101;
FlinkSqlParser.FUNCTIONS = 102;
FlinkSqlParser.DROP = 103;
FlinkSqlParser.UNION = 104;
FlinkSqlParser.EXCEPT = 105;
FlinkSqlParser.SETMINUS = 106;
FlinkSqlParser.INTERSECT = 107;
FlinkSqlParser.TO = 108;
FlinkSqlParser.TABLESAMPLE = 109;
FlinkSqlParser.STRATIFY = 110;
FlinkSqlParser.ALTER = 111;
FlinkSqlParser.RENAME = 112;
FlinkSqlParser.STRUCT = 113;
FlinkSqlParser.COMMENT = 114;
FlinkSqlParser.SET = 115;
FlinkSqlParser.RESET = 116;
FlinkSqlParser.DATA = 117;
FlinkSqlParser.START = 118;
FlinkSqlParser.TRANSACTION = 119;
FlinkSqlParser.COMMIT = 120;
FlinkSqlParser.ROLLBACK = 121;
FlinkSqlParser.MACRO = 122;
FlinkSqlParser.IGNORE = 123;
FlinkSqlParser.BOTH = 124;
FlinkSqlParser.LEADING = 125;
FlinkSqlParser.TRAILING = 126;
FlinkSqlParser.IF = 127;
FlinkSqlParser.POSITION = 128;
FlinkSqlParser.EXTRACT = 129;
FlinkSqlParser.MINUS = 130;
FlinkSqlParser.DIV = 131;
FlinkSqlParser.PERCENTLIT = 132;
FlinkSqlParser.BUCKET = 133;
FlinkSqlParser.OUT = 134;
FlinkSqlParser.OF = 135;
FlinkSqlParser.SORT = 136;
FlinkSqlParser.CLUSTER = 137;
FlinkSqlParser.DISTRIBUTE = 138;
FlinkSqlParser.OVERWRITE = 139;
FlinkSqlParser.TRANSFORM = 140;
FlinkSqlParser.REDUCE = 141;
FlinkSqlParser.USING = 142;
FlinkSqlParser.SERDE = 143;
FlinkSqlParser.SERDEPROPERTIES = 144;
FlinkSqlParser.RECORDREADER = 145;
FlinkSqlParser.RECORDWRITER = 146;
FlinkSqlParser.DELIMITED = 147;
FlinkSqlParser.FIELDS = 148;
FlinkSqlParser.TERMINATED = 149;
FlinkSqlParser.COLLECTION = 150;
FlinkSqlParser.ITEMS = 151;
FlinkSqlParser.KEYS = 152;
FlinkSqlParser.ESCAPED = 153;
FlinkSqlParser.LINES = 154;
FlinkSqlParser.SEPARATED = 155;
FlinkSqlParser.FUNCTION = 156;
FlinkSqlParser.EXTENDED = 157;
FlinkSqlParser.REFRESH = 158;
FlinkSqlParser.CLEAR = 159;
FlinkSqlParser.CACHE = 160;
FlinkSqlParser.UNCACHE = 161;
FlinkSqlParser.LAZY = 162;
FlinkSqlParser.FORMATTED = 163;
FlinkSqlParser.GLOBAL = 164;
FlinkSqlParser.TEMPORARY = 165;
FlinkSqlParser.OPTIONS = 166;
FlinkSqlParser.UNSET = 167;
FlinkSqlParser.TBLPROPERTIES = 168;
FlinkSqlParser.DBPROPERTIES = 169;
FlinkSqlParser.BUCKETS = 170;
FlinkSqlParser.SKEWED = 171;
FlinkSqlParser.STORED = 172;
FlinkSqlParser.DIRECTORIES = 173;
FlinkSqlParser.LOCATION = 174;
FlinkSqlParser.EXCHANGE = 175;
FlinkSqlParser.ARCHIVE = 176;
FlinkSqlParser.UNARCHIVE = 177;
FlinkSqlParser.FILEFORMAT = 178;
FlinkSqlParser.TOUCH = 179;
FlinkSqlParser.COMPACT = 180;
FlinkSqlParser.CONCATENATE = 181;
FlinkSqlParser.CHANGE = 182;
FlinkSqlParser.CASCADE = 183;
FlinkSqlParser.CONSTRAINT = 184;
FlinkSqlParser.RESTRICT = 185;
FlinkSqlParser.CLUSTERED = 186;
FlinkSqlParser.SORTED = 187;
FlinkSqlParser.PURGE = 188;
FlinkSqlParser.INPUTFORMAT = 189;
FlinkSqlParser.OUTPUTFORMAT = 190;
FlinkSqlParser.DATABASE = 191;
FlinkSqlParser.DATABASES = 192;
FlinkSqlParser.DFS = 193;
FlinkSqlParser.TRUNCATE = 194;
FlinkSqlParser.ANALYZE = 195;
FlinkSqlParser.COMPUTE = 196;
FlinkSqlParser.LIST = 197;
FlinkSqlParser.STATISTICS = 198;
FlinkSqlParser.PARTITIONED = 199;
FlinkSqlParser.EXTERNAL = 200;
FlinkSqlParser.DEFINED = 201;
FlinkSqlParser.REVOKE = 202;
FlinkSqlParser.GRANT = 203;
FlinkSqlParser.LOCK = 204;
FlinkSqlParser.UNLOCK = 205;
FlinkSqlParser.MSCK = 206;
FlinkSqlParser.REPAIR = 207;
FlinkSqlParser.RECOVER = 208;
FlinkSqlParser.EXPORT = 209;
FlinkSqlParser.IMPORT = 210;
FlinkSqlParser.LOAD = 211;
FlinkSqlParser.UNLOAD = 212;
FlinkSqlParser.ROLE = 213;
FlinkSqlParser.ROLES = 214;
FlinkSqlParser.COMPACTIONS = 215;
FlinkSqlParser.PRINCIPALS = 216;
FlinkSqlParser.TRANSACTIONS = 217;
FlinkSqlParser.INDEX = 218;
FlinkSqlParser.INDEXES = 219;
FlinkSqlParser.LOCKS = 220;
FlinkSqlParser.OPTION = 221;
FlinkSqlParser.ANTI = 222;
FlinkSqlParser.LOCAL = 223;
FlinkSqlParser.INPATH = 224;
FlinkSqlParser.WATERMARK = 225;
FlinkSqlParser.UNNEST = 226;
FlinkSqlParser.MATCH = 227;
FlinkSqlParser.NEXT = 228;
FlinkSqlParser.WITHIN = 229;
FlinkSqlParser.WS = 230;
FlinkSqlParser.SYSTEM = 231;
FlinkSqlParser.INCLUDING = 232;
FlinkSqlParser.EXCLUDING = 233;
FlinkSqlParser.OVERWRITING = 234;
FlinkSqlParser.CONSTRAINTS = 235;
FlinkSqlParser.GENERATED = 236;
FlinkSqlParser.WATERMARKS = 237;
FlinkSqlParser.CATALOG = 238;
FlinkSqlParser.LANGUAGE = 239;
FlinkSqlParser.JAVA = 240;
FlinkSqlParser.SCALA = 241;
FlinkSqlParser.PYTHON = 242;
FlinkSqlParser.JAR = 243;
FlinkSqlParser.FILE = 244;
FlinkSqlParser.PYTHON_FILES = 245;
FlinkSqlParser.PYTHON_REQUIREMENTS = 246;
FlinkSqlParser.PYTHON_DEPENDENCIES = 247;
FlinkSqlParser.PYTHON_JAR = 248;
FlinkSqlParser.PYTHON_ARCHIVES = 249;
FlinkSqlParser.PYTHON_PARAMETER = 250;
FlinkSqlParser.ENGINE = 251;
FlinkSqlParser.CATALOGS = 252;
FlinkSqlParser.VIEWS = 253;
FlinkSqlParser.JARS = 254;
FlinkSqlParser.PRIMARY = 255;
FlinkSqlParser.KEY = 256;
FlinkSqlParser.PERIOD = 257;
FlinkSqlParser.SYSTEM_TIME = 258;
FlinkSqlParser.ENFORCED = 259;
FlinkSqlParser.METADATA = 260;
FlinkSqlParser.VIRTUAL = 261;
FlinkSqlParser.STRING = 262;
FlinkSqlParser.ARRAY = 263;
FlinkSqlParser.MAP = 264;
FlinkSqlParser.CHAR = 265;
FlinkSqlParser.VARCHAR = 266;
FlinkSqlParser.BINARY = 267;
FlinkSqlParser.VARBINARY = 268;
FlinkSqlParser.BYTES = 269;
FlinkSqlParser.DECIMAL = 270;
FlinkSqlParser.DEC = 271;
FlinkSqlParser.NUMERIC = 272;
FlinkSqlParser.TINYINT = 273;
FlinkSqlParser.SMALLINT = 274;
FlinkSqlParser.INT = 275;
FlinkSqlParser.INTEGER = 276;
FlinkSqlParser.BIGINT = 277;
FlinkSqlParser.FLOAT = 278;
FlinkSqlParser.DOUBLE = 279;
FlinkSqlParser.DATE = 280;
FlinkSqlParser.TIME = 281;
FlinkSqlParser.TIMESTAMP = 282;
FlinkSqlParser.TIMESTAMP_LTZ = 283;
FlinkSqlParser.MULTISET = 284;
FlinkSqlParser.BOOLEAN = 285;
FlinkSqlParser.RAW = 286;
FlinkSqlParser.ROW = 287;
FlinkSqlParser.NULL = 288;
FlinkSqlParser.DATETIME = 289;
FlinkSqlParser.EQUAL_SYMBOL = 290;
FlinkSqlParser.GREATER_SYMBOL = 291;
FlinkSqlParser.LESS_SYMBOL = 292;
FlinkSqlParser.EXCLAMATION_SYMBOL = 293;
FlinkSqlParser.BIT_NOT_OP = 294;
FlinkSqlParser.BIT_OR_OP = 295;
FlinkSqlParser.BIT_AND_OP = 296;
FlinkSqlParser.BIT_XOR_OP = 297;
FlinkSqlParser.DOT = 298;
FlinkSqlParser.LS_BRACKET = 299;
FlinkSqlParser.RS_BRACKET = 300;
FlinkSqlParser.LR_BRACKET = 301;
FlinkSqlParser.RR_BRACKET = 302;
FlinkSqlParser.COMMA = 303;
FlinkSqlParser.SEMICOLON = 304;
FlinkSqlParser.AT_SIGN = 305;
FlinkSqlParser.SINGLE_QUOTE_SYMB = 306;
FlinkSqlParser.DOUBLE_QUOTE_SYMB = 307;
FlinkSqlParser.REVERSE_QUOTE_SYMB = 308;
FlinkSqlParser.COLON_SYMB = 309;
FlinkSqlParser.ASTERISK_SIGN = 310;
FlinkSqlParser.UNDERLINE_SIGN = 311;
FlinkSqlParser.HYPNEN_SIGN = 312;
FlinkSqlParser.ADD_SIGN = 313;
FlinkSqlParser.PENCENT_SIGN = 314;
FlinkSqlParser.DOUBLE_VERTICAL_SIGN = 315;
FlinkSqlParser.DOUBLE_HYPNEN_SIGN = 316;
FlinkSqlParser.SLASH_SIGN = 317;
FlinkSqlParser.DOT_ID = 318;
FlinkSqlParser.PLUS_DOT_ID = 319;
FlinkSqlParser.STRING_LITERAL = 320;
FlinkSqlParser.DIG_LITERAL = 321;
FlinkSqlParser.REAL_LITERAL = 322;
FlinkSqlParser.BIT_STRING = 323;
FlinkSqlParser.ID_LITERAL = 324;
FlinkSqlParser.PLUS_ID_LITERAL = 325;
FlinkSqlParser.FILE_PATH = 326;

FlinkSqlParser.RULE_program = 0;
FlinkSqlParser.RULE_statement = 1;
FlinkSqlParser.RULE_sqlStatements = 2;
FlinkSqlParser.RULE_sqlStatement = 3;
FlinkSqlParser.RULE_emptyStatement = 4;
FlinkSqlParser.RULE_ddlStatement = 5;
FlinkSqlParser.RULE_dmlStatement = 6;
FlinkSqlParser.RULE_describeStatement = 7;
FlinkSqlParser.RULE_explainStatement = 8;
FlinkSqlParser.RULE_explainDetails = 9;
FlinkSqlParser.RULE_explainDetail = 10;
FlinkSqlParser.RULE_useStatement = 11;
FlinkSqlParser.RULE_useModuleStatement = 12;
FlinkSqlParser.RULE_showStatememt = 13;
FlinkSqlParser.RULE_loadStatement = 14;
FlinkSqlParser.RULE_unloadStatememt = 15;
FlinkSqlParser.RULE_setStatememt = 16;
FlinkSqlParser.RULE_resetStatememt = 17;
FlinkSqlParser.RULE_jarStatememt = 18;
FlinkSqlParser.RULE_dtAddStatement = 19;
FlinkSqlParser.RULE_createTable = 20;
FlinkSqlParser.RULE_simpleCreateTable = 21;
FlinkSqlParser.RULE_createTableAsSelect = 22;
FlinkSqlParser.RULE_columnOptionDefinition = 23;
FlinkSqlParser.RULE_physicalColumnDefinition = 24;
FlinkSqlParser.RULE_columnName = 25;
FlinkSqlParser.RULE_columnNameList = 26;
FlinkSqlParser.RULE_columnType = 27;
FlinkSqlParser.RULE_lengthOneDimension = 28;
FlinkSqlParser.RULE_lengthTwoOptionalDimension = 29;
FlinkSqlParser.RULE_lengthTwoStringDimension = 30;
FlinkSqlParser.RULE_lengthOneTypeDimension = 31;
FlinkSqlParser.RULE_mapTypeDimension = 32;
FlinkSqlParser.RULE_rowTypeDimension = 33;
FlinkSqlParser.RULE_columnConstraint = 34;
FlinkSqlParser.RULE_commentSpec = 35;
FlinkSqlParser.RULE_metadataColumnDefinition = 36;
FlinkSqlParser.RULE_metadataKey = 37;
FlinkSqlParser.RULE_computedColumnDefinition = 38;
FlinkSqlParser.RULE_computedColumnExpression = 39;
FlinkSqlParser.RULE_watermarkDefinition = 40;
FlinkSqlParser.RULE_tableConstraint = 41;
FlinkSqlParser.RULE_constraintName = 42;
FlinkSqlParser.RULE_selfDefinitionClause = 43;
FlinkSqlParser.RULE_partitionDefinition = 44;
FlinkSqlParser.RULE_transformList = 45;
FlinkSqlParser.RULE_transform = 46;
FlinkSqlParser.RULE_transformArgument = 47;
FlinkSqlParser.RULE_likeDefinition = 48;
FlinkSqlParser.RULE_sourceTable = 49;
FlinkSqlParser.RULE_likeOption = 50;
FlinkSqlParser.RULE_createCatalog = 51;
FlinkSqlParser.RULE_createDatabase = 52;
FlinkSqlParser.RULE_createView = 53;
FlinkSqlParser.RULE_createFunction = 54;
FlinkSqlParser.RULE_usingClause = 55;
FlinkSqlParser.RULE_jarFileName = 56;
FlinkSqlParser.RULE_alterTable = 57;
FlinkSqlParser.RULE_renameDefinition = 58;
FlinkSqlParser.RULE_setKeyValueDefinition = 59;
FlinkSqlParser.RULE_alertView = 60;
FlinkSqlParser.RULE_alterDatabase = 61;
FlinkSqlParser.RULE_alterFunction = 62;
FlinkSqlParser.RULE_dropCatalog = 63;
FlinkSqlParser.RULE_dropTable = 64;
FlinkSqlParser.RULE_dropDatabase = 65;
FlinkSqlParser.RULE_dropView = 66;
FlinkSqlParser.RULE_dropFunction = 67;
FlinkSqlParser.RULE_insertStatement = 68;
FlinkSqlParser.RULE_insertSimpleStatement = 69;
FlinkSqlParser.RULE_insertPartitionDefinition = 70;
FlinkSqlParser.RULE_insertColumnListDefinition = 71;
FlinkSqlParser.RULE_valuesDefinition = 72;
FlinkSqlParser.RULE_valuesRowDefinition = 73;
FlinkSqlParser.RULE_insertMulStatementCompatibility = 74;
FlinkSqlParser.RULE_insertMulStatement = 75;
FlinkSqlParser.RULE_queryStatement = 76;
FlinkSqlParser.RULE_valuesCaluse = 77;
FlinkSqlParser.RULE_withItem = 78;
FlinkSqlParser.RULE_withItemName = 79;
FlinkSqlParser.RULE_selectStatement = 80;
FlinkSqlParser.RULE_selectClause = 81;
FlinkSqlParser.RULE_projectItemDefinition = 82;
FlinkSqlParser.RULE_fromClause = 83;
FlinkSqlParser.RULE_tableExpression = 84;
FlinkSqlParser.RULE_tableReference = 85;
FlinkSqlParser.RULE_tablePrimary = 86;
FlinkSqlParser.RULE_tablePath = 87;
FlinkSqlParser.RULE_systemTimePeriod = 88;
FlinkSqlParser.RULE_dateTimeExpression = 89;
FlinkSqlParser.RULE_joinCondition = 90;
FlinkSqlParser.RULE_whereClause = 91;
FlinkSqlParser.RULE_groupByClause = 92;
FlinkSqlParser.RULE_groupItemDefinition = 93;
FlinkSqlParser.RULE_havingClause = 94;
FlinkSqlParser.RULE_orderByCaluse = 95;
FlinkSqlParser.RULE_orderItemDefition = 96;
FlinkSqlParser.RULE_limitClause = 97;
FlinkSqlParser.RULE_windowClause = 98;
FlinkSqlParser.RULE_namedWindow = 99;
FlinkSqlParser.RULE_windowSpec = 100;
FlinkSqlParser.RULE_sortItem = 101;
FlinkSqlParser.RULE_windowFrame = 102;
FlinkSqlParser.RULE_frameBound = 103;
FlinkSqlParser.RULE_expression = 104;
FlinkSqlParser.RULE_booleanExpression = 105;
FlinkSqlParser.RULE_predicate = 106;
FlinkSqlParser.RULE_likePredicate = 107;
FlinkSqlParser.RULE_valueExpression = 108;
FlinkSqlParser.RULE_primaryExpression = 109;
FlinkSqlParser.RULE_functionName = 110;
FlinkSqlParser.RULE_dereferenceDefinition = 111;
FlinkSqlParser.RULE_correlationName = 112;
FlinkSqlParser.RULE_qualifiedName = 113;
FlinkSqlParser.RULE_interval = 114;
FlinkSqlParser.RULE_errorCapturingMultiUnitsInterval = 115;
FlinkSqlParser.RULE_multiUnitsInterval = 116;
FlinkSqlParser.RULE_errorCapturingUnitToUnitInterval = 117;
FlinkSqlParser.RULE_unitToUnitInterval = 118;
FlinkSqlParser.RULE_intervalValue = 119;
FlinkSqlParser.RULE_columnAlias = 120;
FlinkSqlParser.RULE_tableAlias = 121;
FlinkSqlParser.RULE_errorCapturingIdentifier = 122;
FlinkSqlParser.RULE_errorCapturingIdentifierExtra = 123;
FlinkSqlParser.RULE_identifierList = 124;
FlinkSqlParser.RULE_identifierSeq = 125;
FlinkSqlParser.RULE_identifier = 126;
FlinkSqlParser.RULE_strictIdentifier = 127;
FlinkSqlParser.RULE_unquotedIdentifier = 128;
FlinkSqlParser.RULE_quotedIdentifier = 129;
FlinkSqlParser.RULE_whenClause = 130;
FlinkSqlParser.RULE_uidList = 131;
FlinkSqlParser.RULE_uid = 132;
FlinkSqlParser.RULE_plusUid = 133;
FlinkSqlParser.RULE_withOption = 134;
FlinkSqlParser.RULE_ifNotExists = 135;
FlinkSqlParser.RULE_ifExists = 136;
FlinkSqlParser.RULE_tablePropertyList = 137;
FlinkSqlParser.RULE_tableProperty = 138;
FlinkSqlParser.RULE_tablePropertyKey = 139;
FlinkSqlParser.RULE_tablePropertyValue = 140;
FlinkSqlParser.RULE_logicalOperator = 141;
FlinkSqlParser.RULE_comparisonOperator = 142;
FlinkSqlParser.RULE_bitOperator = 143;
FlinkSqlParser.RULE_mathOperator = 144;
FlinkSqlParser.RULE_unaryOperator = 145;
FlinkSqlParser.RULE_fullColumnName = 146;
FlinkSqlParser.RULE_constant = 147;
FlinkSqlParser.RULE_stringLiteral = 148;
FlinkSqlParser.RULE_decimalLiteral = 149;
FlinkSqlParser.RULE_booleanLiteral = 150;
FlinkSqlParser.RULE_setQuantifier = 151;
FlinkSqlParser.RULE_ansiNonReserved = 152;
FlinkSqlParser.RULE_strictNonReserved = 153;
FlinkSqlParser.RULE_nonReserved = 154;


function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_program;
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ProgramContext.prototype.EOF = function() {
    return this.getToken(FlinkSqlParser.EOF, 0);
};

ProgramContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterProgram(this);
	}
};

ProgramContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitProgram(this);
	}
};

ProgramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitProgram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ProgramContext = ProgramContext;

FlinkSqlParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, FlinkSqlParser.RULE_program);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 310;
        this.statement();
        this.state = 311;
        this.match(FlinkSqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.sqlStatements = function() {
    return this.getTypedRuleContext(SqlStatementsContext,0);
};

StatementContext.prototype.EOF = function() {
    return this.getToken(FlinkSqlParser.EOF, 0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.StatementContext = StatementContext;

FlinkSqlParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, FlinkSqlParser.RULE_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 313;
        this.sqlStatements();
        this.state = 314;
        this.match(FlinkSqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SqlStatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_sqlStatements;
    return this;
}

SqlStatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlStatementsContext.prototype.constructor = SqlStatementsContext;

SqlStatementsContext.prototype.sqlStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SqlStatementContext);
    } else {
        return this.getTypedRuleContext(SqlStatementContext,i);
    }
};

SqlStatementsContext.prototype.emptyStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EmptyStatementContext);
    } else {
        return this.getTypedRuleContext(EmptyStatementContext,i);
    }
};

SqlStatementsContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.SEMICOLON);
    } else {
        return this.getToken(FlinkSqlParser.SEMICOLON, i);
    }
};


SqlStatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSqlStatements(this);
	}
};

SqlStatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSqlStatements(this);
	}
};

SqlStatementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSqlStatements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SqlStatementsContext = SqlStatementsContext;

FlinkSqlParser.prototype.sqlStatements = function() {

    var localctx = new SqlStatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, FlinkSqlParser.RULE_sqlStatements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 323;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.SELECT || _la===FlinkSqlParser.ADD || _la===FlinkSqlParser.DESC || _la===FlinkSqlParser.BEGIN || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (FlinkSqlParser.WITH - 70)) | (1 << (FlinkSqlParser.VALUES - 70)) | (1 << (FlinkSqlParser.CREATE - 70)) | (1 << (FlinkSqlParser.EXECUTE - 70)) | (1 << (FlinkSqlParser.INSERT - 70)) | (1 << (FlinkSqlParser.REMOVE - 70)) | (1 << (FlinkSqlParser.DESCRIBE - 70)) | (1 << (FlinkSqlParser.EXPLAIN - 70)) | (1 << (FlinkSqlParser.SHOW - 70)) | (1 << (FlinkSqlParser.USE - 70)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (FlinkSqlParser.DROP - 103)) | (1 << (FlinkSqlParser.ALTER - 103)) | (1 << (FlinkSqlParser.SET - 103)) | (1 << (FlinkSqlParser.RESET - 103)))) !== 0) || _la===FlinkSqlParser.LOAD || _la===FlinkSqlParser.UNLOAD || _la===FlinkSqlParser.LR_BRACKET || _la===FlinkSqlParser.SEMICOLON) {
            this.state = 321;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case FlinkSqlParser.SELECT:
            case FlinkSqlParser.ADD:
            case FlinkSqlParser.DESC:
            case FlinkSqlParser.BEGIN:
            case FlinkSqlParser.WITH:
            case FlinkSqlParser.VALUES:
            case FlinkSqlParser.CREATE:
            case FlinkSqlParser.EXECUTE:
            case FlinkSqlParser.INSERT:
            case FlinkSqlParser.REMOVE:
            case FlinkSqlParser.DESCRIBE:
            case FlinkSqlParser.EXPLAIN:
            case FlinkSqlParser.SHOW:
            case FlinkSqlParser.USE:
            case FlinkSqlParser.DROP:
            case FlinkSqlParser.ALTER:
            case FlinkSqlParser.SET:
            case FlinkSqlParser.RESET:
            case FlinkSqlParser.LOAD:
            case FlinkSqlParser.UNLOAD:
            case FlinkSqlParser.LR_BRACKET:
                this.state = 316;
                this.sqlStatement();
                this.state = 318;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
                if(la_===1) {
                    this.state = 317;
                    this.match(FlinkSqlParser.SEMICOLON);

                }
                break;
            case FlinkSqlParser.SEMICOLON:
                this.state = 320;
                this.emptyStatement();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 325;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SqlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_sqlStatement;
    return this;
}

SqlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlStatementContext.prototype.constructor = SqlStatementContext;

SqlStatementContext.prototype.ddlStatement = function() {
    return this.getTypedRuleContext(DdlStatementContext,0);
};

SqlStatementContext.prototype.dmlStatement = function() {
    return this.getTypedRuleContext(DmlStatementContext,0);
};

SqlStatementContext.prototype.describeStatement = function() {
    return this.getTypedRuleContext(DescribeStatementContext,0);
};

SqlStatementContext.prototype.explainStatement = function() {
    return this.getTypedRuleContext(ExplainStatementContext,0);
};

SqlStatementContext.prototype.useStatement = function() {
    return this.getTypedRuleContext(UseStatementContext,0);
};

SqlStatementContext.prototype.showStatememt = function() {
    return this.getTypedRuleContext(ShowStatememtContext,0);
};

SqlStatementContext.prototype.loadStatement = function() {
    return this.getTypedRuleContext(LoadStatementContext,0);
};

SqlStatementContext.prototype.unloadStatememt = function() {
    return this.getTypedRuleContext(UnloadStatememtContext,0);
};

SqlStatementContext.prototype.setStatememt = function() {
    return this.getTypedRuleContext(SetStatememtContext,0);
};

SqlStatementContext.prototype.resetStatememt = function() {
    return this.getTypedRuleContext(ResetStatememtContext,0);
};

SqlStatementContext.prototype.jarStatememt = function() {
    return this.getTypedRuleContext(JarStatememtContext,0);
};

SqlStatementContext.prototype.dtAddStatement = function() {
    return this.getTypedRuleContext(DtAddStatementContext,0);
};

SqlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSqlStatement(this);
	}
};

SqlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSqlStatement(this);
	}
};

SqlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSqlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SqlStatementContext = SqlStatementContext;

FlinkSqlParser.prototype.sqlStatement = function() {

    var localctx = new SqlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, FlinkSqlParser.RULE_sqlStatement);
    try {
        this.state = 338;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 326;
            this.ddlStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 327;
            this.dmlStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 328;
            this.describeStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 329;
            this.explainStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 330;
            this.useStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 331;
            this.showStatememt();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 332;
            this.loadStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 333;
            this.unloadStatememt();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 334;
            this.setStatememt();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 335;
            this.resetStatememt();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 336;
            this.jarStatememt();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 337;
            this.dtAddStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(FlinkSqlParser.SEMICOLON, 0);
};

EmptyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitEmptyStatement(this);
	}
};

EmptyStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitEmptyStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.EmptyStatementContext = EmptyStatementContext;

FlinkSqlParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, FlinkSqlParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 340;
        this.match(FlinkSqlParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DdlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_ddlStatement;
    return this;
}

DdlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DdlStatementContext.prototype.constructor = DdlStatementContext;

DdlStatementContext.prototype.createTable = function() {
    return this.getTypedRuleContext(CreateTableContext,0);
};

DdlStatementContext.prototype.createDatabase = function() {
    return this.getTypedRuleContext(CreateDatabaseContext,0);
};

DdlStatementContext.prototype.createView = function() {
    return this.getTypedRuleContext(CreateViewContext,0);
};

DdlStatementContext.prototype.createFunction = function() {
    return this.getTypedRuleContext(CreateFunctionContext,0);
};

DdlStatementContext.prototype.createCatalog = function() {
    return this.getTypedRuleContext(CreateCatalogContext,0);
};

DdlStatementContext.prototype.alterTable = function() {
    return this.getTypedRuleContext(AlterTableContext,0);
};

DdlStatementContext.prototype.alertView = function() {
    return this.getTypedRuleContext(AlertViewContext,0);
};

DdlStatementContext.prototype.alterDatabase = function() {
    return this.getTypedRuleContext(AlterDatabaseContext,0);
};

DdlStatementContext.prototype.alterFunction = function() {
    return this.getTypedRuleContext(AlterFunctionContext,0);
};

DdlStatementContext.prototype.dropCatalog = function() {
    return this.getTypedRuleContext(DropCatalogContext,0);
};

DdlStatementContext.prototype.dropTable = function() {
    return this.getTypedRuleContext(DropTableContext,0);
};

DdlStatementContext.prototype.dropDatabase = function() {
    return this.getTypedRuleContext(DropDatabaseContext,0);
};

DdlStatementContext.prototype.dropView = function() {
    return this.getTypedRuleContext(DropViewContext,0);
};

DdlStatementContext.prototype.dropFunction = function() {
    return this.getTypedRuleContext(DropFunctionContext,0);
};

DdlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDdlStatement(this);
	}
};

DdlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDdlStatement(this);
	}
};

DdlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDdlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DdlStatementContext = DdlStatementContext;

FlinkSqlParser.prototype.ddlStatement = function() {

    var localctx = new DdlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, FlinkSqlParser.RULE_ddlStatement);
    try {
        this.state = 356;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 342;
            this.createTable();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 343;
            this.createDatabase();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 344;
            this.createView();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 345;
            this.createFunction();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 346;
            this.createCatalog();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 347;
            this.alterTable();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 348;
            this.alertView();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 349;
            this.alterDatabase();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 350;
            this.alterFunction();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 351;
            this.dropCatalog();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 352;
            this.dropTable();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 353;
            this.dropDatabase();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 354;
            this.dropView();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 355;
            this.dropFunction();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DmlStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dmlStatement;
    return this;
}

DmlStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DmlStatementContext.prototype.constructor = DmlStatementContext;

DmlStatementContext.prototype.queryStatement = function() {
    return this.getTypedRuleContext(QueryStatementContext,0);
};

DmlStatementContext.prototype.insertStatement = function() {
    return this.getTypedRuleContext(InsertStatementContext,0);
};

DmlStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDmlStatement(this);
	}
};

DmlStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDmlStatement(this);
	}
};

DmlStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDmlStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DmlStatementContext = DmlStatementContext;

FlinkSqlParser.prototype.dmlStatement = function() {

    var localctx = new DmlStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, FlinkSqlParser.RULE_dmlStatement);
    try {
        this.state = 360;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.SELECT:
        case FlinkSqlParser.WITH:
        case FlinkSqlParser.VALUES:
        case FlinkSqlParser.LR_BRACKET:
            this.enterOuterAlt(localctx, 1);
            this.state = 358;
            this.queryStatement(0);
            break;
        case FlinkSqlParser.BEGIN:
        case FlinkSqlParser.EXECUTE:
        case FlinkSqlParser.INSERT:
            this.enterOuterAlt(localctx, 2);
            this.state = 359;
            this.insertStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DescribeStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_describeStatement;
    return this;
}

DescribeStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeStatementContext.prototype.constructor = DescribeStatementContext;

DescribeStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DescribeStatementContext.prototype.DESCRIBE = function() {
    return this.getToken(FlinkSqlParser.DESCRIBE, 0);
};

DescribeStatementContext.prototype.DESC = function() {
    return this.getToken(FlinkSqlParser.DESC, 0);
};

DescribeStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDescribeStatement(this);
	}
};

DescribeStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDescribeStatement(this);
	}
};

DescribeStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDescribeStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DescribeStatementContext = DescribeStatementContext;

FlinkSqlParser.prototype.describeStatement = function() {

    var localctx = new DescribeStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, FlinkSqlParser.RULE_describeStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 362;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.DESC || _la===FlinkSqlParser.DESCRIBE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 363;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExplainStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_explainStatement;
    return this;
}

ExplainStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplainStatementContext.prototype.constructor = ExplainStatementContext;

ExplainStatementContext.prototype.EXPLAIN = function() {
    return this.getToken(FlinkSqlParser.EXPLAIN, 0);
};

ExplainStatementContext.prototype.dmlStatement = function() {
    return this.getTypedRuleContext(DmlStatementContext,0);
};

ExplainStatementContext.prototype.insertSimpleStatement = function() {
    return this.getTypedRuleContext(InsertSimpleStatementContext,0);
};

ExplainStatementContext.prototype.insertMulStatement = function() {
    return this.getTypedRuleContext(InsertMulStatementContext,0);
};

ExplainStatementContext.prototype.explainDetails = function() {
    return this.getTypedRuleContext(ExplainDetailsContext,0);
};

ExplainStatementContext.prototype.PLAN = function() {
    return this.getToken(FlinkSqlParser.PLAN, 0);
};

ExplainStatementContext.prototype.FOR = function() {
    return this.getToken(FlinkSqlParser.FOR, 0);
};

ExplainStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterExplainStatement(this);
	}
};

ExplainStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitExplainStatement(this);
	}
};

ExplainStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitExplainStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ExplainStatementContext = ExplainStatementContext;

FlinkSqlParser.prototype.explainStatement = function() {

    var localctx = new ExplainStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, FlinkSqlParser.RULE_explainStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 365;
        this.match(FlinkSqlParser.EXPLAIN);
        this.state = 369;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case FlinkSqlParser.CHANGELOG_MODE:
        case FlinkSqlParser.JSON_EXECUTION_PLAN:
        case FlinkSqlParser.ESTIMATED_COST:
        	this.state = 366;
        	this.explainDetails();
        	break;
        case FlinkSqlParser.PLAN:
        	this.state = 367;
        	this.match(FlinkSqlParser.PLAN);
        	this.state = 368;
        	this.match(FlinkSqlParser.FOR);
        	break;
        case FlinkSqlParser.SELECT:
        case FlinkSqlParser.BEGIN:
        case FlinkSqlParser.WITH:
        case FlinkSqlParser.VALUES:
        case FlinkSqlParser.EXECUTE:
        case FlinkSqlParser.STATEMENT:
        case FlinkSqlParser.INSERT:
        case FlinkSqlParser.LR_BRACKET:
        	break;
        default:
        	break;
        }
        this.state = 374;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        switch(la_) {
        case 1:
            this.state = 371;
            this.dmlStatement();
            break;

        case 2:
            this.state = 372;
            this.insertSimpleStatement();
            break;

        case 3:
            this.state = 373;
            this.insertMulStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExplainDetailsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_explainDetails;
    return this;
}

ExplainDetailsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplainDetailsContext.prototype.constructor = ExplainDetailsContext;

ExplainDetailsContext.prototype.explainDetail = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExplainDetailContext);
    } else {
        return this.getTypedRuleContext(ExplainDetailContext,i);
    }
};

ExplainDetailsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


ExplainDetailsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterExplainDetails(this);
	}
};

ExplainDetailsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitExplainDetails(this);
	}
};

ExplainDetailsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitExplainDetails(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ExplainDetailsContext = ExplainDetailsContext;

FlinkSqlParser.prototype.explainDetails = function() {

    var localctx = new ExplainDetailsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, FlinkSqlParser.RULE_explainDetails);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 376;
        this.explainDetail();
        this.state = 381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 377;
            this.match(FlinkSqlParser.COMMA);
            this.state = 378;
            this.explainDetail();
            this.state = 383;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExplainDetailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_explainDetail;
    return this;
}

ExplainDetailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplainDetailContext.prototype.constructor = ExplainDetailContext;

ExplainDetailContext.prototype.CHANGELOG_MODE = function() {
    return this.getToken(FlinkSqlParser.CHANGELOG_MODE, 0);
};

ExplainDetailContext.prototype.JSON_EXECUTION_PLAN = function() {
    return this.getToken(FlinkSqlParser.JSON_EXECUTION_PLAN, 0);
};

ExplainDetailContext.prototype.ESTIMATED_COST = function() {
    return this.getToken(FlinkSqlParser.ESTIMATED_COST, 0);
};

ExplainDetailContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterExplainDetail(this);
	}
};

ExplainDetailContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitExplainDetail(this);
	}
};

ExplainDetailContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitExplainDetail(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ExplainDetailContext = ExplainDetailContext;

FlinkSqlParser.prototype.explainDetail = function() {

    var localctx = new ExplainDetailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, FlinkSqlParser.RULE_explainDetail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 384;
        _la = this._input.LA(1);
        if(!(((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (FlinkSqlParser.CHANGELOG_MODE - 86)) | (1 << (FlinkSqlParser.JSON_EXECUTION_PLAN - 86)) | (1 << (FlinkSqlParser.ESTIMATED_COST - 86)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_useStatement;
    return this;
}

UseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseStatementContext.prototype.constructor = UseStatementContext;

UseStatementContext.prototype.USE = function() {
    return this.getToken(FlinkSqlParser.USE, 0);
};

UseStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

UseStatementContext.prototype.CATALOG = function() {
    return this.getToken(FlinkSqlParser.CATALOG, 0);
};

UseStatementContext.prototype.useModuleStatement = function() {
    return this.getTypedRuleContext(UseModuleStatementContext,0);
};

UseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUseStatement(this);
	}
};

UseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUseStatement(this);
	}
};

UseStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUseStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.UseStatementContext = UseStatementContext;

FlinkSqlParser.prototype.useStatement = function() {

    var localctx = new UseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, FlinkSqlParser.RULE_useStatement);
    var _la = 0; // Token type
    try {
        this.state = 392;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 386;
            this.match(FlinkSqlParser.USE);
            this.state = 388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.CATALOG) {
                this.state = 387;
                this.match(FlinkSqlParser.CATALOG);
            }

            this.state = 390;
            this.uid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 391;
            this.useModuleStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UseModuleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_useModuleStatement;
    return this;
}

UseModuleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseModuleStatementContext.prototype.constructor = UseModuleStatementContext;

UseModuleStatementContext.prototype.USE = function() {
    return this.getToken(FlinkSqlParser.USE, 0);
};

UseModuleStatementContext.prototype.MODULES = function() {
    return this.getToken(FlinkSqlParser.MODULES, 0);
};

UseModuleStatementContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

UseModuleStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


UseModuleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUseModuleStatement(this);
	}
};

UseModuleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUseModuleStatement(this);
	}
};

UseModuleStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUseModuleStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.UseModuleStatementContext = UseModuleStatementContext;

FlinkSqlParser.prototype.useModuleStatement = function() {

    var localctx = new UseModuleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, FlinkSqlParser.RULE_useModuleStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        this.match(FlinkSqlParser.USE);
        this.state = 395;
        this.match(FlinkSqlParser.MODULES);
        this.state = 396;
        this.uid();
        this.state = 401;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 397;
            this.match(FlinkSqlParser.COMMA);
            this.state = 398;
            this.uid();
            this.state = 403;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShowStatememtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_showStatememt;
    return this;
}

ShowStatememtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowStatememtContext.prototype.constructor = ShowStatememtContext;

ShowStatememtContext.prototype.SHOW = function() {
    return this.getToken(FlinkSqlParser.SHOW, 0);
};

ShowStatememtContext.prototype.CATALOGS = function() {
    return this.getToken(FlinkSqlParser.CATALOGS, 0);
};

ShowStatememtContext.prototype.DATABASES = function() {
    return this.getToken(FlinkSqlParser.DATABASES, 0);
};

ShowStatememtContext.prototype.VIEWS = function() {
    return this.getToken(FlinkSqlParser.VIEWS, 0);
};

ShowStatememtContext.prototype.JARS = function() {
    return this.getToken(FlinkSqlParser.JARS, 0);
};

ShowStatememtContext.prototype.CURRENT = function() {
    return this.getToken(FlinkSqlParser.CURRENT, 0);
};

ShowStatememtContext.prototype.CATALOG = function() {
    return this.getToken(FlinkSqlParser.CATALOG, 0);
};

ShowStatememtContext.prototype.DATABASE = function() {
    return this.getToken(FlinkSqlParser.DATABASE, 0);
};

ShowStatememtContext.prototype.TABLES = function() {
    return this.getToken(FlinkSqlParser.TABLES, 0);
};

ShowStatememtContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

ShowStatememtContext.prototype.likePredicate = function() {
    return this.getTypedRuleContext(LikePredicateContext,0);
};

ShowStatememtContext.prototype.FROM = function() {
    return this.getToken(FlinkSqlParser.FROM, 0);
};

ShowStatememtContext.prototype.IN = function() {
    return this.getToken(FlinkSqlParser.IN, 0);
};

ShowStatememtContext.prototype.COLUMNS = function() {
    return this.getToken(FlinkSqlParser.COLUMNS, 0);
};

ShowStatememtContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParser.CREATE, 0);
};

ShowStatememtContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParser.TABLE, 0);
};

ShowStatememtContext.prototype.VIEW = function() {
    return this.getToken(FlinkSqlParser.VIEW, 0);
};

ShowStatememtContext.prototype.FUNCTIONS = function() {
    return this.getToken(FlinkSqlParser.FUNCTIONS, 0);
};

ShowStatememtContext.prototype.USER = function() {
    return this.getToken(FlinkSqlParser.USER, 0);
};

ShowStatememtContext.prototype.MODULES = function() {
    return this.getToken(FlinkSqlParser.MODULES, 0);
};

ShowStatememtContext.prototype.FULL = function() {
    return this.getToken(FlinkSqlParser.FULL, 0);
};

ShowStatememtContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterShowStatememt(this);
	}
};

ShowStatememtContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitShowStatememt(this);
	}
};

ShowStatememtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitShowStatememt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ShowStatememtContext = ShowStatememtContext;

FlinkSqlParser.prototype.showStatememt = function() {

    var localctx = new ShowStatememtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, FlinkSqlParser.RULE_showStatememt);
    var _la = 0; // Token type
    try {
        this.state = 439;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 404;
            this.match(FlinkSqlParser.SHOW);
            this.state = 405;
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.DATABASES || ((((_la - 252)) & ~0x1f) == 0 && ((1 << (_la - 252)) & ((1 << (FlinkSqlParser.CATALOGS - 252)) | (1 << (FlinkSqlParser.VIEWS - 252)) | (1 << (FlinkSqlParser.JARS - 252)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 406;
            this.match(FlinkSqlParser.SHOW);
            this.state = 407;
            this.match(FlinkSqlParser.CURRENT);
            this.state = 408;
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.DATABASE || _la===FlinkSqlParser.CATALOG)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 409;
            this.match(FlinkSqlParser.SHOW);
            this.state = 410;
            this.match(FlinkSqlParser.TABLES);
            this.state = 413;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.FROM || _la===FlinkSqlParser.IN) {
                this.state = 411;
                _la = this._input.LA(1);
                if(!(_la===FlinkSqlParser.FROM || _la===FlinkSqlParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 412;
                this.uid();
            }

            this.state = 416;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT || _la===FlinkSqlParser.LIKE) {
                this.state = 415;
                this.likePredicate();
            }

            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 418;
            this.match(FlinkSqlParser.SHOW);
            this.state = 419;
            this.match(FlinkSqlParser.COLUMNS);
            this.state = 420;
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.FROM || _la===FlinkSqlParser.IN)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 421;
            this.uid();
            this.state = 423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT || _la===FlinkSqlParser.LIKE) {
                this.state = 422;
                this.likePredicate();
            }

            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 425;
            this.match(FlinkSqlParser.SHOW);
            this.state = 426;
            this.match(FlinkSqlParser.CREATE);
            this.state = 427;
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.TABLE || _la===FlinkSqlParser.VIEW)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 428;
            this.uid();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 429;
            this.match(FlinkSqlParser.SHOW);
            this.state = 431;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.USER) {
                this.state = 430;
                this.match(FlinkSqlParser.USER);
            }

            this.state = 433;
            this.match(FlinkSqlParser.FUNCTIONS);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 434;
            this.match(FlinkSqlParser.SHOW);
            this.state = 436;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.FULL) {
                this.state = 435;
                this.match(FlinkSqlParser.FULL);
            }

            this.state = 438;
            this.match(FlinkSqlParser.MODULES);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoadStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_loadStatement;
    return this;
}

LoadStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadStatementContext.prototype.constructor = LoadStatementContext;

LoadStatementContext.prototype.LOAD = function() {
    return this.getToken(FlinkSqlParser.LOAD, 0);
};

LoadStatementContext.prototype.MODULE = function() {
    return this.getToken(FlinkSqlParser.MODULE, 0);
};

LoadStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

LoadStatementContext.prototype.WITH = function() {
    return this.getToken(FlinkSqlParser.WITH, 0);
};

LoadStatementContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

LoadStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLoadStatement(this);
	}
};

LoadStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLoadStatement(this);
	}
};

LoadStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLoadStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.LoadStatementContext = LoadStatementContext;

FlinkSqlParser.prototype.loadStatement = function() {

    var localctx = new LoadStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, FlinkSqlParser.RULE_loadStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 441;
        this.match(FlinkSqlParser.LOAD);
        this.state = 442;
        this.match(FlinkSqlParser.MODULE);
        this.state = 443;
        this.uid();
        this.state = 446;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        if(la_===1) {
            this.state = 444;
            this.match(FlinkSqlParser.WITH);
            this.state = 445;
            this.tablePropertyList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnloadStatememtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_unloadStatememt;
    return this;
}

UnloadStatememtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnloadStatememtContext.prototype.constructor = UnloadStatememtContext;

UnloadStatememtContext.prototype.UNLOAD = function() {
    return this.getToken(FlinkSqlParser.UNLOAD, 0);
};

UnloadStatememtContext.prototype.MODULE = function() {
    return this.getToken(FlinkSqlParser.MODULE, 0);
};

UnloadStatememtContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

UnloadStatememtContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUnloadStatememt(this);
	}
};

UnloadStatememtContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUnloadStatememt(this);
	}
};

UnloadStatememtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUnloadStatememt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.UnloadStatememtContext = UnloadStatememtContext;

FlinkSqlParser.prototype.unloadStatememt = function() {

    var localctx = new UnloadStatememtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, FlinkSqlParser.RULE_unloadStatememt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 448;
        this.match(FlinkSqlParser.UNLOAD);
        this.state = 449;
        this.match(FlinkSqlParser.MODULE);
        this.state = 450;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetStatememtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_setStatememt;
    return this;
}

SetStatememtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetStatememtContext.prototype.constructor = SetStatememtContext;

SetStatememtContext.prototype.SET = function() {
    return this.getToken(FlinkSqlParser.SET, 0);
};

SetStatememtContext.prototype.tableProperty = function() {
    return this.getTypedRuleContext(TablePropertyContext,0);
};

SetStatememtContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSetStatememt(this);
	}
};

SetStatememtContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSetStatememt(this);
	}
};

SetStatememtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSetStatememt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SetStatememtContext = SetStatememtContext;

FlinkSqlParser.prototype.setStatememt = function() {

    var localctx = new SetStatememtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, FlinkSqlParser.RULE_setStatememt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 452;
        this.match(FlinkSqlParser.SET);
        this.state = 454;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 453;
            this.tableProperty();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResetStatememtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_resetStatememt;
    return this;
}

ResetStatememtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResetStatememtContext.prototype.constructor = ResetStatememtContext;

ResetStatememtContext.prototype.RESET = function() {
    return this.getToken(FlinkSqlParser.RESET, 0);
};

ResetStatememtContext.prototype.tablePropertyKey = function() {
    return this.getTypedRuleContext(TablePropertyKeyContext,0);
};

ResetStatememtContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterResetStatememt(this);
	}
};

ResetStatememtContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitResetStatememt(this);
	}
};

ResetStatememtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitResetStatememt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ResetStatememtContext = ResetStatememtContext;

FlinkSqlParser.prototype.resetStatememt = function() {

    var localctx = new ResetStatememtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, FlinkSqlParser.RULE_resetStatememt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 456;
        this.match(FlinkSqlParser.RESET);
        this.state = 458;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        if(la_===1) {
            this.state = 457;
            this.tablePropertyKey();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JarStatememtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_jarStatememt;
    return this;
}

JarStatememtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JarStatememtContext.prototype.constructor = JarStatememtContext;

JarStatememtContext.prototype.JAR = function() {
    return this.getToken(FlinkSqlParser.JAR, 0);
};

JarStatememtContext.prototype.jarFileName = function() {
    return this.getTypedRuleContext(JarFileNameContext,0);
};

JarStatememtContext.prototype.ADD = function() {
    return this.getToken(FlinkSqlParser.ADD, 0);
};

JarStatememtContext.prototype.REMOVE = function() {
    return this.getToken(FlinkSqlParser.REMOVE, 0);
};

JarStatememtContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterJarStatememt(this);
	}
};

JarStatememtContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitJarStatememt(this);
	}
};

JarStatememtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitJarStatememt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.JarStatememtContext = JarStatememtContext;

FlinkSqlParser.prototype.jarStatememt = function() {

    var localctx = new JarStatememtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, FlinkSqlParser.RULE_jarStatememt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 460;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.ADD || _la===FlinkSqlParser.REMOVE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 461;
        this.match(FlinkSqlParser.JAR);
        this.state = 462;
        this.jarFileName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DtAddStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dtAddStatement;
    return this;
}

DtAddStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DtAddStatementContext.prototype.constructor = DtAddStatementContext;

DtAddStatementContext.prototype.ADD = function() {
    return this.getToken(FlinkSqlParser.ADD, 0);
};

DtAddStatementContext.prototype.JAR = function() {
    return this.getToken(FlinkSqlParser.JAR, 0);
};

DtAddStatementContext.prototype.WITH = function() {
    return this.getToken(FlinkSqlParser.WITH, 0);
};

DtAddStatementContext.prototype.FILE_PATH = function() {
    return this.getToken(FlinkSqlParser.FILE_PATH, 0);
};

DtAddStatementContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

DtAddStatementContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

DtAddStatementContext.prototype.FILE = function() {
    return this.getToken(FlinkSqlParser.FILE, 0);
};

DtAddStatementContext.prototype.RENAME = function() {
    return this.getToken(FlinkSqlParser.RENAME, 0);
};

DtAddStatementContext.prototype.PYTHON_FILES = function() {
    return this.getToken(FlinkSqlParser.PYTHON_FILES, 0);
};

DtAddStatementContext.prototype.PYTHON_REQUIREMENTS = function() {
    return this.getToken(FlinkSqlParser.PYTHON_REQUIREMENTS, 0);
};

DtAddStatementContext.prototype.PYTHON_DEPENDENCIES = function() {
    return this.getToken(FlinkSqlParser.PYTHON_DEPENDENCIES, 0);
};

DtAddStatementContext.prototype.PYTHON_JAR = function() {
    return this.getToken(FlinkSqlParser.PYTHON_JAR, 0);
};

DtAddStatementContext.prototype.PYTHON_ARCHIVES = function() {
    return this.getToken(FlinkSqlParser.PYTHON_ARCHIVES, 0);
};

DtAddStatementContext.prototype.PYTHON_PARAMETER = function() {
    return this.getToken(FlinkSqlParser.PYTHON_PARAMETER, 0);
};

DtAddStatementContext.prototype.ENGINE = function() {
    return this.getToken(FlinkSqlParser.ENGINE, 0);
};

DtAddStatementContext.prototype.KEY = function() {
    return this.getToken(FlinkSqlParser.KEY, 0);
};

DtAddStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDtAddStatement(this);
	}
};

DtAddStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDtAddStatement(this);
	}
};

DtAddStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDtAddStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DtAddStatementContext = DtAddStatementContext;

FlinkSqlParser.prototype.dtAddStatement = function() {

    var localctx = new DtAddStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, FlinkSqlParser.RULE_dtAddStatement);
    var _la = 0; // Token type
    try {
        this.state = 503;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 464;
            this.match(FlinkSqlParser.ADD);
            this.state = 465;
            this.match(FlinkSqlParser.JAR);
            this.state = 466;
            this.match(FlinkSqlParser.WITH);
            this.state = 467;
            this.match(FlinkSqlParser.FILE_PATH);
            this.state = 470;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.AS) {
                this.state = 468;
                this.match(FlinkSqlParser.AS);
                this.state = 469;
                this.uid();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 472;
            this.match(FlinkSqlParser.ADD);
            this.state = 473;
            this.match(FlinkSqlParser.FILE);
            this.state = 474;
            this.match(FlinkSqlParser.WITH);
            this.state = 475;
            this.match(FlinkSqlParser.FILE_PATH);
            this.state = 478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.AS) {
                this.state = 476;
                this.match(FlinkSqlParser.AS);
                this.state = 477;
                this.uid();
            }

            this.state = 482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.RENAME) {
                this.state = 480;
                this.match(FlinkSqlParser.RENAME);
                this.state = 481;
                this.uid();
            }

            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 484;
            this.match(FlinkSqlParser.ADD);
            this.state = 485;
            _la = this._input.LA(1);
            if(!(((((_la - 245)) & ~0x1f) == 0 && ((1 << (_la - 245)) & ((1 << (FlinkSqlParser.PYTHON_FILES - 245)) | (1 << (FlinkSqlParser.PYTHON_REQUIREMENTS - 245)) | (1 << (FlinkSqlParser.PYTHON_DEPENDENCIES - 245)) | (1 << (FlinkSqlParser.PYTHON_JAR - 245)) | (1 << (FlinkSqlParser.PYTHON_ARCHIVES - 245)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 486;
            this.match(FlinkSqlParser.WITH);
            this.state = 487;
            this.match(FlinkSqlParser.FILE_PATH);
            this.state = 488;
            this.match(FlinkSqlParser.RENAME);
            this.state = 489;
            this.uid();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 490;
            this.match(FlinkSqlParser.ADD);
            this.state = 491;
            this.match(FlinkSqlParser.PYTHON_PARAMETER);
            this.state = 492;
            this.match(FlinkSqlParser.FILE_PATH);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 493;
            this.match(FlinkSqlParser.ADD);
            this.state = 494;
            this.match(FlinkSqlParser.ENGINE);
            this.state = 495;
            this.match(FlinkSqlParser.FILE);
            this.state = 496;
            this.match(FlinkSqlParser.WITH);
            this.state = 497;
            this.match(FlinkSqlParser.FILE_PATH);
            this.state = 498;
            this.match(FlinkSqlParser.RENAME);
            this.state = 499;
            this.uid();
            this.state = 500;
            this.match(FlinkSqlParser.KEY);
            this.state = 501;
            this.uid();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_createTable;
    return this;
}

CreateTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableContext.prototype.constructor = CreateTableContext;

CreateTableContext.prototype.simpleCreateTable = function() {
    return this.getTypedRuleContext(SimpleCreateTableContext,0);
};

CreateTableContext.prototype.createTableAsSelect = function() {
    return this.getTypedRuleContext(CreateTableAsSelectContext,0);
};

CreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateTable(this);
	}
};

CreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateTable(this);
	}
};

CreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.CreateTableContext = CreateTableContext;

FlinkSqlParser.prototype.createTable = function() {

    var localctx = new CreateTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, FlinkSqlParser.RULE_createTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 507;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.state = 505;
            this.simpleCreateTable();
            break;

        case 2:
            this.state = 506;
            this.createTableAsSelect();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SimpleCreateTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_simpleCreateTable;
    return this;
}

SimpleCreateTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleCreateTableContext.prototype.constructor = SimpleCreateTableContext;

SimpleCreateTableContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParser.CREATE, 0);
};

SimpleCreateTableContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParser.TABLE, 0);
};

SimpleCreateTableContext.prototype.sourceTable = function() {
    return this.getTypedRuleContext(SourceTableContext,0);
};

SimpleCreateTableContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

SimpleCreateTableContext.prototype.columnOptionDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnOptionDefinitionContext);
    } else {
        return this.getTypedRuleContext(ColumnOptionDefinitionContext,i);
    }
};

SimpleCreateTableContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

SimpleCreateTableContext.prototype.withOption = function() {
    return this.getTypedRuleContext(WithOptionContext,0);
};

SimpleCreateTableContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParser.TEMPORARY, 0);
};

SimpleCreateTableContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

SimpleCreateTableContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


SimpleCreateTableContext.prototype.watermarkDefinition = function() {
    return this.getTypedRuleContext(WatermarkDefinitionContext,0);
};

SimpleCreateTableContext.prototype.tableConstraint = function() {
    return this.getTypedRuleContext(TableConstraintContext,0);
};

SimpleCreateTableContext.prototype.selfDefinitionClause = function() {
    return this.getTypedRuleContext(SelfDefinitionClauseContext,0);
};

SimpleCreateTableContext.prototype.commentSpec = function() {
    return this.getTypedRuleContext(CommentSpecContext,0);
};

SimpleCreateTableContext.prototype.partitionDefinition = function() {
    return this.getTypedRuleContext(PartitionDefinitionContext,0);
};

SimpleCreateTableContext.prototype.likeDefinition = function() {
    return this.getTypedRuleContext(LikeDefinitionContext,0);
};

SimpleCreateTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSimpleCreateTable(this);
	}
};

SimpleCreateTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSimpleCreateTable(this);
	}
};

SimpleCreateTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSimpleCreateTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SimpleCreateTableContext = SimpleCreateTableContext;

FlinkSqlParser.prototype.simpleCreateTable = function() {

    var localctx = new SimpleCreateTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, FlinkSqlParser.RULE_simpleCreateTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 509;
        this.match(FlinkSqlParser.CREATE);
        this.state = 511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.TEMPORARY) {
            this.state = 510;
            this.match(FlinkSqlParser.TEMPORARY);
        }

        this.state = 513;
        this.match(FlinkSqlParser.TABLE);
        this.state = 515;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 514;
            this.ifNotExists();
        }

        this.state = 517;
        this.sourceTable();
        this.state = 518;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 519;
        this.columnOptionDefinition();
        this.state = 524;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 520;
                this.match(FlinkSqlParser.COMMA);
                this.state = 521;
                this.columnOptionDefinition(); 
            }
            this.state = 526;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

        this.state = 529;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        if(la_===1) {
            this.state = 527;
            this.match(FlinkSqlParser.COMMA);
            this.state = 528;
            this.watermarkDefinition();

        }
        this.state = 533;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 531;
            this.match(FlinkSqlParser.COMMA);
            this.state = 532;
            this.tableConstraint();

        }
        this.state = 537;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.COMMA) {
            this.state = 535;
            this.match(FlinkSqlParser.COMMA);
            this.state = 536;
            this.selfDefinitionClause();
        }

        this.state = 539;
        this.match(FlinkSqlParser.RR_BRACKET);
        this.state = 541;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.COMMENT) {
            this.state = 540;
            this.commentSpec();
        }

        this.state = 544;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.PARTITIONED) {
            this.state = 543;
            this.partitionDefinition();
        }

        this.state = 546;
        this.withOption();
        this.state = 548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.LIKE) {
            this.state = 547;
            this.likeDefinition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateTableAsSelectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_createTableAsSelect;
    return this;
}

CreateTableAsSelectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateTableAsSelectContext.prototype.constructor = CreateTableAsSelectContext;

CreateTableAsSelectContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParser.CREATE, 0);
};

CreateTableAsSelectContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParser.TABLE, 0);
};

CreateTableAsSelectContext.prototype.sourceTable = function() {
    return this.getTypedRuleContext(SourceTableContext,0);
};

CreateTableAsSelectContext.prototype.withOption = function() {
    return this.getTypedRuleContext(WithOptionContext,0);
};

CreateTableAsSelectContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateTableAsSelectContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

CreateTableAsSelectContext.prototype.queryStatement = function() {
    return this.getTypedRuleContext(QueryStatementContext,0);
};

CreateTableAsSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateTableAsSelect(this);
	}
};

CreateTableAsSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateTableAsSelect(this);
	}
};

CreateTableAsSelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateTableAsSelect(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.CreateTableAsSelectContext = CreateTableAsSelectContext;

FlinkSqlParser.prototype.createTableAsSelect = function() {

    var localctx = new CreateTableAsSelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, FlinkSqlParser.RULE_createTableAsSelect);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 550;
        this.match(FlinkSqlParser.CREATE);
        this.state = 551;
        this.match(FlinkSqlParser.TABLE);
        this.state = 553;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 552;
            this.ifNotExists();
        }

        this.state = 555;
        this.sourceTable();
        this.state = 556;
        this.withOption();
        this.state = 559;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.AS) {
            this.state = 557;
            this.match(FlinkSqlParser.AS);
            this.state = 558;
            this.queryStatement(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnOptionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_columnOptionDefinition;
    return this;
}

ColumnOptionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnOptionDefinitionContext.prototype.constructor = ColumnOptionDefinitionContext;

ColumnOptionDefinitionContext.prototype.physicalColumnDefinition = function() {
    return this.getTypedRuleContext(PhysicalColumnDefinitionContext,0);
};

ColumnOptionDefinitionContext.prototype.metadataColumnDefinition = function() {
    return this.getTypedRuleContext(MetadataColumnDefinitionContext,0);
};

ColumnOptionDefinitionContext.prototype.computedColumnDefinition = function() {
    return this.getTypedRuleContext(ComputedColumnDefinitionContext,0);
};

ColumnOptionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnOptionDefinition(this);
	}
};

ColumnOptionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnOptionDefinition(this);
	}
};

ColumnOptionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnOptionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ColumnOptionDefinitionContext = ColumnOptionDefinitionContext;

FlinkSqlParser.prototype.columnOptionDefinition = function() {

    var localctx = new ColumnOptionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, FlinkSqlParser.RULE_columnOptionDefinition);
    try {
        this.state = 564;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 561;
            this.physicalColumnDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 562;
            this.metadataColumnDefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 563;
            this.computedColumnDefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PhysicalColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_physicalColumnDefinition;
    return this;
}

PhysicalColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PhysicalColumnDefinitionContext.prototype.constructor = PhysicalColumnDefinitionContext;

PhysicalColumnDefinitionContext.prototype.columnName = function() {
    return this.getTypedRuleContext(ColumnNameContext,0);
};

PhysicalColumnDefinitionContext.prototype.columnType = function() {
    return this.getTypedRuleContext(ColumnTypeContext,0);
};

PhysicalColumnDefinitionContext.prototype.columnConstraint = function() {
    return this.getTypedRuleContext(ColumnConstraintContext,0);
};

PhysicalColumnDefinitionContext.prototype.commentSpec = function() {
    return this.getTypedRuleContext(CommentSpecContext,0);
};

PhysicalColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPhysicalColumnDefinition(this);
	}
};

PhysicalColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPhysicalColumnDefinition(this);
	}
};

PhysicalColumnDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPhysicalColumnDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.PhysicalColumnDefinitionContext = PhysicalColumnDefinitionContext;

FlinkSqlParser.prototype.physicalColumnDefinition = function() {

    var localctx = new PhysicalColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, FlinkSqlParser.RULE_physicalColumnDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 566;
        this.columnName();
        this.state = 567;
        this.columnType();
        this.state = 569;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.CONSTRAINT || _la===FlinkSqlParser.PRIMARY) {
            this.state = 568;
            this.columnConstraint();
        }

        this.state = 572;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.COMMENT) {
            this.state = 571;
            this.commentSpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_columnName;
    return this;
}

ColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameContext.prototype.constructor = ColumnNameContext;

ColumnNameContext.prototype.plusUid = function() {
    return this.getTypedRuleContext(PlusUidContext,0);
};

ColumnNameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ColumnNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnName(this);
	}
};

ColumnNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnName(this);
	}
};

ColumnNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ColumnNameContext = ColumnNameContext;

FlinkSqlParser.prototype.columnName = function() {

    var localctx = new ColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, FlinkSqlParser.RULE_columnName);
    try {
        this.state = 576;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 574;
            this.plusUid();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 575;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_columnNameList;
    return this;
}

ColumnNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnNameListContext.prototype.constructor = ColumnNameListContext;

ColumnNameListContext.prototype.columnName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnNameContext);
    } else {
        return this.getTypedRuleContext(ColumnNameContext,i);
    }
};

ColumnNameListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


ColumnNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnNameList(this);
	}
};

ColumnNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnNameList(this);
	}
};

ColumnNameListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnNameList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ColumnNameListContext = ColumnNameListContext;

FlinkSqlParser.prototype.columnNameList = function() {

    var localctx = new ColumnNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, FlinkSqlParser.RULE_columnNameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 578;
        this.columnName();
        this.state = 583;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 579;
            this.match(FlinkSqlParser.COMMA);
            this.state = 580;
            this.columnName();
            this.state = 585;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_columnType;
    this.typeName = null; // Token
    this.type = null; // Token
    return this;
}

ColumnTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnTypeContext.prototype.constructor = ColumnTypeContext;

ColumnTypeContext.prototype.DATE = function() {
    return this.getToken(FlinkSqlParser.DATE, 0);
};

ColumnTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(FlinkSqlParser.BOOLEAN, 0);
};

ColumnTypeContext.prototype.NULL = function() {
    return this.getToken(FlinkSqlParser.NULL, 0);
};

ColumnTypeContext.prototype.CHAR = function() {
    return this.getToken(FlinkSqlParser.CHAR, 0);
};

ColumnTypeContext.prototype.VARCHAR = function() {
    return this.getToken(FlinkSqlParser.VARCHAR, 0);
};

ColumnTypeContext.prototype.STRING = function() {
    return this.getToken(FlinkSqlParser.STRING, 0);
};

ColumnTypeContext.prototype.BINARY = function() {
    return this.getToken(FlinkSqlParser.BINARY, 0);
};

ColumnTypeContext.prototype.VARBINARY = function() {
    return this.getToken(FlinkSqlParser.VARBINARY, 0);
};

ColumnTypeContext.prototype.BYTES = function() {
    return this.getToken(FlinkSqlParser.BYTES, 0);
};

ColumnTypeContext.prototype.TINYINT = function() {
    return this.getToken(FlinkSqlParser.TINYINT, 0);
};

ColumnTypeContext.prototype.SMALLINT = function() {
    return this.getToken(FlinkSqlParser.SMALLINT, 0);
};

ColumnTypeContext.prototype.INT = function() {
    return this.getToken(FlinkSqlParser.INT, 0);
};

ColumnTypeContext.prototype.INTEGER = function() {
    return this.getToken(FlinkSqlParser.INTEGER, 0);
};

ColumnTypeContext.prototype.BIGINT = function() {
    return this.getToken(FlinkSqlParser.BIGINT, 0);
};

ColumnTypeContext.prototype.TIME = function() {
    return this.getToken(FlinkSqlParser.TIME, 0);
};

ColumnTypeContext.prototype.TIMESTAMP = function() {
    return this.getToken(FlinkSqlParser.TIMESTAMP, 0);
};

ColumnTypeContext.prototype.TIMESTAMP_LTZ = function() {
    return this.getToken(FlinkSqlParser.TIMESTAMP_LTZ, 0);
};

ColumnTypeContext.prototype.DATETIME = function() {
    return this.getToken(FlinkSqlParser.DATETIME, 0);
};

ColumnTypeContext.prototype.lengthOneDimension = function() {
    return this.getTypedRuleContext(LengthOneDimensionContext,0);
};

ColumnTypeContext.prototype.DECIMAL = function() {
    return this.getToken(FlinkSqlParser.DECIMAL, 0);
};

ColumnTypeContext.prototype.DEC = function() {
    return this.getToken(FlinkSqlParser.DEC, 0);
};

ColumnTypeContext.prototype.NUMERIC = function() {
    return this.getToken(FlinkSqlParser.NUMERIC, 0);
};

ColumnTypeContext.prototype.FLOAT = function() {
    return this.getToken(FlinkSqlParser.FLOAT, 0);
};

ColumnTypeContext.prototype.DOUBLE = function() {
    return this.getToken(FlinkSqlParser.DOUBLE, 0);
};

ColumnTypeContext.prototype.lengthTwoOptionalDimension = function() {
    return this.getTypedRuleContext(LengthTwoOptionalDimensionContext,0);
};

ColumnTypeContext.prototype.ARRAY = function() {
    return this.getToken(FlinkSqlParser.ARRAY, 0);
};

ColumnTypeContext.prototype.MULTISET = function() {
    return this.getToken(FlinkSqlParser.MULTISET, 0);
};

ColumnTypeContext.prototype.lengthOneTypeDimension = function() {
    return this.getTypedRuleContext(LengthOneTypeDimensionContext,0);
};

ColumnTypeContext.prototype.MAP = function() {
    return this.getToken(FlinkSqlParser.MAP, 0);
};

ColumnTypeContext.prototype.mapTypeDimension = function() {
    return this.getTypedRuleContext(MapTypeDimensionContext,0);
};

ColumnTypeContext.prototype.ROW = function() {
    return this.getToken(FlinkSqlParser.ROW, 0);
};

ColumnTypeContext.prototype.rowTypeDimension = function() {
    return this.getTypedRuleContext(RowTypeDimensionContext,0);
};

ColumnTypeContext.prototype.RAW = function() {
    return this.getToken(FlinkSqlParser.RAW, 0);
};

ColumnTypeContext.prototype.lengthTwoStringDimension = function() {
    return this.getTypedRuleContext(LengthTwoStringDimensionContext,0);
};

ColumnTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnType(this);
	}
};

ColumnTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnType(this);
	}
};

ColumnTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ColumnTypeContext = ColumnTypeContext;

FlinkSqlParser.prototype.columnType = function() {

    var localctx = new ColumnTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, FlinkSqlParser.RULE_columnType);
    var _la = 0; // Token type
    try {
        this.state = 611;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.DATE:
        case FlinkSqlParser.BOOLEAN:
        case FlinkSqlParser.NULL:
            this.enterOuterAlt(localctx, 1);
            this.state = 586;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & ((1 << (FlinkSqlParser.DATE - 280)) | (1 << (FlinkSqlParser.BOOLEAN - 280)) | (1 << (FlinkSqlParser.NULL - 280)))) !== 0))) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case FlinkSqlParser.STRING:
        case FlinkSqlParser.CHAR:
        case FlinkSqlParser.VARCHAR:
        case FlinkSqlParser.BINARY:
        case FlinkSqlParser.VARBINARY:
        case FlinkSqlParser.BYTES:
        case FlinkSqlParser.TINYINT:
        case FlinkSqlParser.SMALLINT:
        case FlinkSqlParser.INT:
        case FlinkSqlParser.INTEGER:
        case FlinkSqlParser.BIGINT:
        case FlinkSqlParser.TIME:
        case FlinkSqlParser.TIMESTAMP:
        case FlinkSqlParser.TIMESTAMP_LTZ:
        case FlinkSqlParser.DATETIME:
            this.enterOuterAlt(localctx, 2);
            this.state = 587;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (FlinkSqlParser.STRING - 262)) | (1 << (FlinkSqlParser.CHAR - 262)) | (1 << (FlinkSqlParser.VARCHAR - 262)) | (1 << (FlinkSqlParser.BINARY - 262)) | (1 << (FlinkSqlParser.VARBINARY - 262)) | (1 << (FlinkSqlParser.BYTES - 262)) | (1 << (FlinkSqlParser.TINYINT - 262)) | (1 << (FlinkSqlParser.SMALLINT - 262)) | (1 << (FlinkSqlParser.INT - 262)) | (1 << (FlinkSqlParser.INTEGER - 262)) | (1 << (FlinkSqlParser.BIGINT - 262)) | (1 << (FlinkSqlParser.TIME - 262)) | (1 << (FlinkSqlParser.TIMESTAMP - 262)) | (1 << (FlinkSqlParser.TIMESTAMP_LTZ - 262)) | (1 << (FlinkSqlParser.DATETIME - 262)))) !== 0))) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 589;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.LR_BRACKET) {
                this.state = 588;
                this.lengthOneDimension();
            }

            break;
        case FlinkSqlParser.DECIMAL:
        case FlinkSqlParser.DEC:
        case FlinkSqlParser.NUMERIC:
        case FlinkSqlParser.FLOAT:
        case FlinkSqlParser.DOUBLE:
            this.enterOuterAlt(localctx, 3);
            this.state = 591;
            localctx.typeName = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (FlinkSqlParser.DECIMAL - 270)) | (1 << (FlinkSqlParser.DEC - 270)) | (1 << (FlinkSqlParser.NUMERIC - 270)) | (1 << (FlinkSqlParser.FLOAT - 270)) | (1 << (FlinkSqlParser.DOUBLE - 270)))) !== 0))) {
                localctx.typeName = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 593;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.LR_BRACKET) {
                this.state = 592;
                this.lengthTwoOptionalDimension();
            }

            break;
        case FlinkSqlParser.ARRAY:
        case FlinkSqlParser.MULTISET:
            this.enterOuterAlt(localctx, 4);
            this.state = 595;
            localctx.type = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.ARRAY || _la===FlinkSqlParser.MULTISET)) {
                localctx.type = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 597;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.LESS_SYMBOL) {
                this.state = 596;
                this.lengthOneTypeDimension();
            }

            break;
        case FlinkSqlParser.MAP:
            this.enterOuterAlt(localctx, 5);
            this.state = 599;
            localctx.type = this.match(FlinkSqlParser.MAP);
            this.state = 601;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.LESS_SYMBOL) {
                this.state = 600;
                this.mapTypeDimension();
            }

            break;
        case FlinkSqlParser.ROW:
            this.enterOuterAlt(localctx, 6);
            this.state = 603;
            localctx.type = this.match(FlinkSqlParser.ROW);
            this.state = 605;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.LESS_SYMBOL) {
                this.state = 604;
                this.rowTypeDimension();
            }

            break;
        case FlinkSqlParser.RAW:
            this.enterOuterAlt(localctx, 7);
            this.state = 607;
            localctx.type = this.match(FlinkSqlParser.RAW);
            this.state = 609;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.LR_BRACKET) {
                this.state = 608;
                this.lengthTwoStringDimension();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LengthOneDimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_lengthOneDimension;
    return this;
}

LengthOneDimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LengthOneDimensionContext.prototype.constructor = LengthOneDimensionContext;

LengthOneDimensionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

LengthOneDimensionContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

LengthOneDimensionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

LengthOneDimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLengthOneDimension(this);
	}
};

LengthOneDimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLengthOneDimension(this);
	}
};

LengthOneDimensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLengthOneDimension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.LengthOneDimensionContext = LengthOneDimensionContext;

FlinkSqlParser.prototype.lengthOneDimension = function() {

    var localctx = new LengthOneDimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, FlinkSqlParser.RULE_lengthOneDimension);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 613;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 614;
        this.decimalLiteral();
        this.state = 615;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LengthTwoOptionalDimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_lengthTwoOptionalDimension;
    return this;
}

LengthTwoOptionalDimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LengthTwoOptionalDimensionContext.prototype.constructor = LengthTwoOptionalDimensionContext;

LengthTwoOptionalDimensionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

LengthTwoOptionalDimensionContext.prototype.decimalLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecimalLiteralContext);
    } else {
        return this.getTypedRuleContext(DecimalLiteralContext,i);
    }
};

LengthTwoOptionalDimensionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

LengthTwoOptionalDimensionContext.prototype.COMMA = function() {
    return this.getToken(FlinkSqlParser.COMMA, 0);
};

LengthTwoOptionalDimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLengthTwoOptionalDimension(this);
	}
};

LengthTwoOptionalDimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLengthTwoOptionalDimension(this);
	}
};

LengthTwoOptionalDimensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLengthTwoOptionalDimension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.LengthTwoOptionalDimensionContext = LengthTwoOptionalDimensionContext;

FlinkSqlParser.prototype.lengthTwoOptionalDimension = function() {

    var localctx = new LengthTwoOptionalDimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, FlinkSqlParser.RULE_lengthTwoOptionalDimension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 617;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 618;
        this.decimalLiteral();
        this.state = 621;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.COMMA) {
            this.state = 619;
            this.match(FlinkSqlParser.COMMA);
            this.state = 620;
            this.decimalLiteral();
        }

        this.state = 623;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LengthTwoStringDimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_lengthTwoStringDimension;
    return this;
}

LengthTwoStringDimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LengthTwoStringDimensionContext.prototype.constructor = LengthTwoStringDimensionContext;

LengthTwoStringDimensionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

LengthTwoStringDimensionContext.prototype.stringLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringLiteralContext);
    } else {
        return this.getTypedRuleContext(StringLiteralContext,i);
    }
};

LengthTwoStringDimensionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

LengthTwoStringDimensionContext.prototype.COMMA = function() {
    return this.getToken(FlinkSqlParser.COMMA, 0);
};

LengthTwoStringDimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLengthTwoStringDimension(this);
	}
};

LengthTwoStringDimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLengthTwoStringDimension(this);
	}
};

LengthTwoStringDimensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLengthTwoStringDimension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.LengthTwoStringDimensionContext = LengthTwoStringDimensionContext;

FlinkSqlParser.prototype.lengthTwoStringDimension = function() {

    var localctx = new LengthTwoStringDimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, FlinkSqlParser.RULE_lengthTwoStringDimension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 625;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 626;
        this.stringLiteral();
        this.state = 629;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.COMMA) {
            this.state = 627;
            this.match(FlinkSqlParser.COMMA);
            this.state = 628;
            this.stringLiteral();
        }

        this.state = 631;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LengthOneTypeDimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_lengthOneTypeDimension;
    return this;
}

LengthOneTypeDimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LengthOneTypeDimensionContext.prototype.constructor = LengthOneTypeDimensionContext;

LengthOneTypeDimensionContext.prototype.LESS_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.LESS_SYMBOL, 0);
};

LengthOneTypeDimensionContext.prototype.columnType = function() {
    return this.getTypedRuleContext(ColumnTypeContext,0);
};

LengthOneTypeDimensionContext.prototype.GREATER_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.GREATER_SYMBOL, 0);
};

LengthOneTypeDimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLengthOneTypeDimension(this);
	}
};

LengthOneTypeDimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLengthOneTypeDimension(this);
	}
};

LengthOneTypeDimensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLengthOneTypeDimension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.LengthOneTypeDimensionContext = LengthOneTypeDimensionContext;

FlinkSqlParser.prototype.lengthOneTypeDimension = function() {

    var localctx = new LengthOneTypeDimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, FlinkSqlParser.RULE_lengthOneTypeDimension);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.match(FlinkSqlParser.LESS_SYMBOL);
        this.state = 634;
        this.columnType();
        this.state = 635;
        this.match(FlinkSqlParser.GREATER_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MapTypeDimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_mapTypeDimension;
    return this;
}

MapTypeDimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapTypeDimensionContext.prototype.constructor = MapTypeDimensionContext;

MapTypeDimensionContext.prototype.LESS_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.LESS_SYMBOL, 0);
};

MapTypeDimensionContext.prototype.columnType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnTypeContext);
    } else {
        return this.getTypedRuleContext(ColumnTypeContext,i);
    }
};

MapTypeDimensionContext.prototype.GREATER_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.GREATER_SYMBOL, 0);
};

MapTypeDimensionContext.prototype.COMMA = function() {
    return this.getToken(FlinkSqlParser.COMMA, 0);
};

MapTypeDimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterMapTypeDimension(this);
	}
};

MapTypeDimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitMapTypeDimension(this);
	}
};

MapTypeDimensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitMapTypeDimension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.MapTypeDimensionContext = MapTypeDimensionContext;

FlinkSqlParser.prototype.mapTypeDimension = function() {

    var localctx = new MapTypeDimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, FlinkSqlParser.RULE_mapTypeDimension);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 637;
        this.match(FlinkSqlParser.LESS_SYMBOL);
        this.state = 638;
        this.columnType();

        this.state = 639;
        this.match(FlinkSqlParser.COMMA);
        this.state = 640;
        this.columnType();
        this.state = 642;
        this.match(FlinkSqlParser.GREATER_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RowTypeDimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_rowTypeDimension;
    return this;
}

RowTypeDimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RowTypeDimensionContext.prototype.constructor = RowTypeDimensionContext;

RowTypeDimensionContext.prototype.LESS_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.LESS_SYMBOL, 0);
};

RowTypeDimensionContext.prototype.columnName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnNameContext);
    } else {
        return this.getTypedRuleContext(ColumnNameContext,i);
    }
};

RowTypeDimensionContext.prototype.columnType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnTypeContext);
    } else {
        return this.getTypedRuleContext(ColumnTypeContext,i);
    }
};

RowTypeDimensionContext.prototype.GREATER_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.GREATER_SYMBOL, 0);
};

RowTypeDimensionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


RowTypeDimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterRowTypeDimension(this);
	}
};

RowTypeDimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitRowTypeDimension(this);
	}
};

RowTypeDimensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitRowTypeDimension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.RowTypeDimensionContext = RowTypeDimensionContext;

FlinkSqlParser.prototype.rowTypeDimension = function() {

    var localctx = new RowTypeDimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, FlinkSqlParser.RULE_rowTypeDimension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 644;
        this.match(FlinkSqlParser.LESS_SYMBOL);
        this.state = 645;
        this.columnName();
        this.state = 646;
        this.columnType();
        this.state = 653;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 647;
            this.match(FlinkSqlParser.COMMA);
            this.state = 648;
            this.columnName();
            this.state = 649;
            this.columnType();
            this.state = 655;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 656;
        this.match(FlinkSqlParser.GREATER_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_columnConstraint;
    return this;
}

ColumnConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnConstraintContext.prototype.constructor = ColumnConstraintContext;

ColumnConstraintContext.prototype.PRIMARY = function() {
    return this.getToken(FlinkSqlParser.PRIMARY, 0);
};

ColumnConstraintContext.prototype.KEY = function() {
    return this.getToken(FlinkSqlParser.KEY, 0);
};

ColumnConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(FlinkSqlParser.CONSTRAINT, 0);
};

ColumnConstraintContext.prototype.constraintName = function() {
    return this.getTypedRuleContext(ConstraintNameContext,0);
};

ColumnConstraintContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

ColumnConstraintContext.prototype.ENFORCED = function() {
    return this.getToken(FlinkSqlParser.ENFORCED, 0);
};

ColumnConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnConstraint(this);
	}
};

ColumnConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnConstraint(this);
	}
};

ColumnConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ColumnConstraintContext = ColumnConstraintContext;

FlinkSqlParser.prototype.columnConstraint = function() {

    var localctx = new ColumnConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, FlinkSqlParser.RULE_columnConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 660;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.CONSTRAINT) {
            this.state = 658;
            this.match(FlinkSqlParser.CONSTRAINT);
            this.state = 659;
            this.constraintName();
        }

        this.state = 662;
        this.match(FlinkSqlParser.PRIMARY);
        this.state = 663;
        this.match(FlinkSqlParser.KEY);
        this.state = 666;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.NOT) {
            this.state = 664;
            this.match(FlinkSqlParser.NOT);
            this.state = 665;
            this.match(FlinkSqlParser.ENFORCED);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CommentSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_commentSpec;
    return this;
}

CommentSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommentSpecContext.prototype.constructor = CommentSpecContext;

CommentSpecContext.prototype.COMMENT = function() {
    return this.getToken(FlinkSqlParser.COMMENT, 0);
};

CommentSpecContext.prototype.STRING_LITERAL = function() {
    return this.getToken(FlinkSqlParser.STRING_LITERAL, 0);
};

CommentSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCommentSpec(this);
	}
};

CommentSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCommentSpec(this);
	}
};

CommentSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCommentSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.CommentSpecContext = CommentSpecContext;

FlinkSqlParser.prototype.commentSpec = function() {

    var localctx = new CommentSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, FlinkSqlParser.RULE_commentSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 668;
        this.match(FlinkSqlParser.COMMENT);
        this.state = 669;
        this.match(FlinkSqlParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MetadataColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_metadataColumnDefinition;
    return this;
}

MetadataColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MetadataColumnDefinitionContext.prototype.constructor = MetadataColumnDefinitionContext;

MetadataColumnDefinitionContext.prototype.columnName = function() {
    return this.getTypedRuleContext(ColumnNameContext,0);
};

MetadataColumnDefinitionContext.prototype.columnType = function() {
    return this.getTypedRuleContext(ColumnTypeContext,0);
};

MetadataColumnDefinitionContext.prototype.METADATA = function() {
    return this.getToken(FlinkSqlParser.METADATA, 0);
};

MetadataColumnDefinitionContext.prototype.FROM = function() {
    return this.getToken(FlinkSqlParser.FROM, 0);
};

MetadataColumnDefinitionContext.prototype.metadataKey = function() {
    return this.getTypedRuleContext(MetadataKeyContext,0);
};

MetadataColumnDefinitionContext.prototype.VIRTUAL = function() {
    return this.getToken(FlinkSqlParser.VIRTUAL, 0);
};

MetadataColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterMetadataColumnDefinition(this);
	}
};

MetadataColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitMetadataColumnDefinition(this);
	}
};

MetadataColumnDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitMetadataColumnDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.MetadataColumnDefinitionContext = MetadataColumnDefinitionContext;

FlinkSqlParser.prototype.metadataColumnDefinition = function() {

    var localctx = new MetadataColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, FlinkSqlParser.RULE_metadataColumnDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 671;
        this.columnName();
        this.state = 672;
        this.columnType();
        this.state = 673;
        this.match(FlinkSqlParser.METADATA);
        this.state = 676;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.FROM) {
            this.state = 674;
            this.match(FlinkSqlParser.FROM);
            this.state = 675;
            this.metadataKey();
        }

        this.state = 679;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.VIRTUAL) {
            this.state = 678;
            this.match(FlinkSqlParser.VIRTUAL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MetadataKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_metadataKey;
    return this;
}

MetadataKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MetadataKeyContext.prototype.constructor = MetadataKeyContext;

MetadataKeyContext.prototype.STRING_LITERAL = function() {
    return this.getToken(FlinkSqlParser.STRING_LITERAL, 0);
};

MetadataKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterMetadataKey(this);
	}
};

MetadataKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitMetadataKey(this);
	}
};

MetadataKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitMetadataKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.MetadataKeyContext = MetadataKeyContext;

FlinkSqlParser.prototype.metadataKey = function() {

    var localctx = new MetadataKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, FlinkSqlParser.RULE_metadataKey);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this.match(FlinkSqlParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComputedColumnDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_computedColumnDefinition;
    return this;
}

ComputedColumnDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComputedColumnDefinitionContext.prototype.constructor = ComputedColumnDefinitionContext;

ComputedColumnDefinitionContext.prototype.columnName = function() {
    return this.getTypedRuleContext(ColumnNameContext,0);
};

ComputedColumnDefinitionContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

ComputedColumnDefinitionContext.prototype.computedColumnExpression = function() {
    return this.getTypedRuleContext(ComputedColumnExpressionContext,0);
};

ComputedColumnDefinitionContext.prototype.commentSpec = function() {
    return this.getTypedRuleContext(CommentSpecContext,0);
};

ComputedColumnDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterComputedColumnDefinition(this);
	}
};

ComputedColumnDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitComputedColumnDefinition(this);
	}
};

ComputedColumnDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitComputedColumnDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ComputedColumnDefinitionContext = ComputedColumnDefinitionContext;

FlinkSqlParser.prototype.computedColumnDefinition = function() {

    var localctx = new ComputedColumnDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, FlinkSqlParser.RULE_computedColumnDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 683;
        this.columnName();
        this.state = 684;
        this.match(FlinkSqlParser.AS);
        this.state = 685;
        this.computedColumnExpression();
        this.state = 687;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.COMMENT) {
            this.state = 686;
            this.commentSpec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComputedColumnExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_computedColumnExpression;
    return this;
}

ComputedColumnExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComputedColumnExpressionContext.prototype.constructor = ComputedColumnExpressionContext;

ComputedColumnExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ComputedColumnExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterComputedColumnExpression(this);
	}
};

ComputedColumnExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitComputedColumnExpression(this);
	}
};

ComputedColumnExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitComputedColumnExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ComputedColumnExpressionContext = ComputedColumnExpressionContext;

FlinkSqlParser.prototype.computedColumnExpression = function() {

    var localctx = new ComputedColumnExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, FlinkSqlParser.RULE_computedColumnExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WatermarkDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_watermarkDefinition;
    return this;
}

WatermarkDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WatermarkDefinitionContext.prototype.constructor = WatermarkDefinitionContext;

WatermarkDefinitionContext.prototype.WATERMARK = function() {
    return this.getToken(FlinkSqlParser.WATERMARK, 0);
};

WatermarkDefinitionContext.prototype.FOR = function() {
    return this.getToken(FlinkSqlParser.FOR, 0);
};

WatermarkDefinitionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

WatermarkDefinitionContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

WatermarkDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterWatermarkDefinition(this);
	}
};

WatermarkDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitWatermarkDefinition(this);
	}
};

WatermarkDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitWatermarkDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.WatermarkDefinitionContext = WatermarkDefinitionContext;

FlinkSqlParser.prototype.watermarkDefinition = function() {

    var localctx = new WatermarkDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, FlinkSqlParser.RULE_watermarkDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 691;
        this.match(FlinkSqlParser.WATERMARK);
        this.state = 692;
        this.match(FlinkSqlParser.FOR);
        this.state = 693;
        this.expression();
        this.state = 694;
        this.match(FlinkSqlParser.AS);
        this.state = 695;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tableConstraint;
    return this;
}

TableConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableConstraintContext.prototype.constructor = TableConstraintContext;

TableConstraintContext.prototype.PRIMARY = function() {
    return this.getToken(FlinkSqlParser.PRIMARY, 0);
};

TableConstraintContext.prototype.KEY = function() {
    return this.getToken(FlinkSqlParser.KEY, 0);
};

TableConstraintContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

TableConstraintContext.prototype.columnNameList = function() {
    return this.getTypedRuleContext(ColumnNameListContext,0);
};

TableConstraintContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

TableConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(FlinkSqlParser.CONSTRAINT, 0);
};

TableConstraintContext.prototype.constraintName = function() {
    return this.getTypedRuleContext(ConstraintNameContext,0);
};

TableConstraintContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

TableConstraintContext.prototype.ENFORCED = function() {
    return this.getToken(FlinkSqlParser.ENFORCED, 0);
};

TableConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTableConstraint(this);
	}
};

TableConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTableConstraint(this);
	}
};

TableConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTableConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TableConstraintContext = TableConstraintContext;

FlinkSqlParser.prototype.tableConstraint = function() {

    var localctx = new TableConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, FlinkSqlParser.RULE_tableConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 699;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.CONSTRAINT) {
            this.state = 697;
            this.match(FlinkSqlParser.CONSTRAINT);
            this.state = 698;
            this.constraintName();
        }

        this.state = 701;
        this.match(FlinkSqlParser.PRIMARY);
        this.state = 702;
        this.match(FlinkSqlParser.KEY);
        this.state = 703;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 704;
        this.columnNameList();
        this.state = 705;
        this.match(FlinkSqlParser.RR_BRACKET);
        this.state = 708;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.NOT) {
            this.state = 706;
            this.match(FlinkSqlParser.NOT);
            this.state = 707;
            this.match(FlinkSqlParser.ENFORCED);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstraintNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_constraintName;
    return this;
}

ConstraintNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintNameContext.prototype.constructor = ConstraintNameContext;

ConstraintNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ConstraintNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterConstraintName(this);
	}
};

ConstraintNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitConstraintName(this);
	}
};

ConstraintNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitConstraintName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ConstraintNameContext = ConstraintNameContext;

FlinkSqlParser.prototype.constraintName = function() {

    var localctx = new ConstraintNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, FlinkSqlParser.RULE_constraintName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 710;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelfDefinitionClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_selfDefinitionClause;
    return this;
}

SelfDefinitionClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelfDefinitionClauseContext.prototype.constructor = SelfDefinitionClauseContext;

SelfDefinitionClauseContext.prototype.PERIOD = function() {
    return this.getToken(FlinkSqlParser.PERIOD, 0);
};

SelfDefinitionClauseContext.prototype.FOR = function() {
    return this.getToken(FlinkSqlParser.FOR, 0);
};

SelfDefinitionClauseContext.prototype.SYSTEM_TIME = function() {
    return this.getToken(FlinkSqlParser.SYSTEM_TIME, 0);
};

SelfDefinitionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSelfDefinitionClause(this);
	}
};

SelfDefinitionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSelfDefinitionClause(this);
	}
};

SelfDefinitionClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSelfDefinitionClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SelfDefinitionClauseContext = SelfDefinitionClauseContext;

FlinkSqlParser.prototype.selfDefinitionClause = function() {

    var localctx = new SelfDefinitionClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, FlinkSqlParser.RULE_selfDefinitionClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 712;
        this.match(FlinkSqlParser.PERIOD);
        this.state = 713;
        this.match(FlinkSqlParser.FOR);
        this.state = 714;
        this.match(FlinkSqlParser.SYSTEM_TIME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_partitionDefinition;
    return this;
}

PartitionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionDefinitionContext.prototype.constructor = PartitionDefinitionContext;

PartitionDefinitionContext.prototype.PARTITIONED = function() {
    return this.getToken(FlinkSqlParser.PARTITIONED, 0);
};

PartitionDefinitionContext.prototype.BY = function() {
    return this.getToken(FlinkSqlParser.BY, 0);
};

PartitionDefinitionContext.prototype.transformList = function() {
    return this.getTypedRuleContext(TransformListContext,0);
};

PartitionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPartitionDefinition(this);
	}
};

PartitionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPartitionDefinition(this);
	}
};

PartitionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPartitionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.PartitionDefinitionContext = PartitionDefinitionContext;

FlinkSqlParser.prototype.partitionDefinition = function() {

    var localctx = new PartitionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, FlinkSqlParser.RULE_partitionDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 716;
        this.match(FlinkSqlParser.PARTITIONED);
        this.state = 717;
        this.match(FlinkSqlParser.BY);
        this.state = 718;
        this.transformList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransformListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_transformList;
    return this;
}

TransformListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransformListContext.prototype.constructor = TransformListContext;

TransformListContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

TransformListContext.prototype.transform = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TransformContext);
    } else {
        return this.getTypedRuleContext(TransformContext,i);
    }
};

TransformListContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

TransformListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


TransformListContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTransformList(this);
	}
};

TransformListContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTransformList(this);
	}
};

TransformListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTransformList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TransformListContext = TransformListContext;

FlinkSqlParser.prototype.transformList = function() {

    var localctx = new TransformListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, FlinkSqlParser.RULE_transformList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 720;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 721;
        this.transform();
        this.state = 726;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 722;
            this.match(FlinkSqlParser.COMMA);
            this.state = 723;
            this.transform();
            this.state = 728;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 729;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransformContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_transform;
    return this;
}

TransformContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransformContext.prototype.constructor = TransformContext;


 
TransformContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IdentityTransformContext(parser, ctx) {
	TransformContext.call(this, parser);
    TransformContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentityTransformContext.prototype = Object.create(TransformContext.prototype);
IdentityTransformContext.prototype.constructor = IdentityTransformContext;

FlinkSqlParser.IdentityTransformContext = IdentityTransformContext;

IdentityTransformContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};
IdentityTransformContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIdentityTransform(this);
	}
};

IdentityTransformContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIdentityTransform(this);
	}
};

IdentityTransformContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIdentityTransform(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ApplyTransformContext(parser, ctx) {
	TransformContext.call(this, parser);
    this.transformName = null; // IdentifierContext;
    TransformContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ApplyTransformContext.prototype = Object.create(TransformContext.prototype);
ApplyTransformContext.prototype.constructor = ApplyTransformContext;

FlinkSqlParser.ApplyTransformContext = ApplyTransformContext;

ApplyTransformContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

ApplyTransformContext.prototype.transformArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TransformArgumentContext);
    } else {
        return this.getTypedRuleContext(TransformArgumentContext,i);
    }
};

ApplyTransformContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

ApplyTransformContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ApplyTransformContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};

ApplyTransformContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterApplyTransform(this);
	}
};

ApplyTransformContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitApplyTransform(this);
	}
};

ApplyTransformContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitApplyTransform(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParser.TransformContext = TransformContext;

FlinkSqlParser.prototype.transform = function() {

    var localctx = new TransformContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, FlinkSqlParser.RULE_transform);
    var _la = 0; // Token type
    try {
        this.state = 744;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            localctx = new IdentityTransformContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 731;
            this.qualifiedName();
            break;

        case 2:
            localctx = new ApplyTransformContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 732;
            localctx.transformName = this.identifier();
            this.state = 733;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 734;
            this.transformArgument();
            this.state = 739;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 735;
                this.match(FlinkSqlParser.COMMA);
                this.state = 736;
                this.transformArgument();
                this.state = 741;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 742;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TransformArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_transformArgument;
    return this;
}

TransformArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TransformArgumentContext.prototype.constructor = TransformArgumentContext;

TransformArgumentContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

TransformArgumentContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

TransformArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTransformArgument(this);
	}
};

TransformArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTransformArgument(this);
	}
};

TransformArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTransformArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TransformArgumentContext = TransformArgumentContext;

FlinkSqlParser.prototype.transformArgument = function() {

    var localctx = new TransformArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, FlinkSqlParser.RULE_transformArgument);
    try {
        this.state = 748;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 746;
            this.qualifiedName();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 747;
            this.constant();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LikeDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_likeDefinition;
    return this;
}

LikeDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LikeDefinitionContext.prototype.constructor = LikeDefinitionContext;

LikeDefinitionContext.prototype.LIKE = function() {
    return this.getToken(FlinkSqlParser.LIKE, 0);
};

LikeDefinitionContext.prototype.sourceTable = function() {
    return this.getTypedRuleContext(SourceTableContext,0);
};

LikeDefinitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

LikeDefinitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

LikeDefinitionContext.prototype.likeOption = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LikeOptionContext);
    } else {
        return this.getTypedRuleContext(LikeOptionContext,i);
    }
};

LikeDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLikeDefinition(this);
	}
};

LikeDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLikeDefinition(this);
	}
};

LikeDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLikeDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.LikeDefinitionContext = LikeDefinitionContext;

FlinkSqlParser.prototype.likeDefinition = function() {

    var localctx = new LikeDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, FlinkSqlParser.RULE_likeDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 750;
        this.match(FlinkSqlParser.LIKE);
        this.state = 751;
        this.sourceTable();
        this.state = 760;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        if(la_===1) {
            this.state = 752;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 756;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 232)) & ~0x1f) == 0 && ((1 << (_la - 232)) & ((1 << (FlinkSqlParser.INCLUDING - 232)) | (1 << (FlinkSqlParser.EXCLUDING - 232)) | (1 << (FlinkSqlParser.OVERWRITING - 232)))) !== 0)) {
                this.state = 753;
                this.likeOption();
                this.state = 758;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 759;
            this.match(FlinkSqlParser.RR_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SourceTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_sourceTable;
    return this;
}

SourceTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceTableContext.prototype.constructor = SourceTableContext;

SourceTableContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

SourceTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSourceTable(this);
	}
};

SourceTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSourceTable(this);
	}
};

SourceTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSourceTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SourceTableContext = SourceTableContext;

FlinkSqlParser.prototype.sourceTable = function() {

    var localctx = new SourceTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, FlinkSqlParser.RULE_sourceTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 762;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LikeOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_likeOption;
    return this;
}

LikeOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LikeOptionContext.prototype.constructor = LikeOptionContext;

LikeOptionContext.prototype.INCLUDING = function() {
    return this.getToken(FlinkSqlParser.INCLUDING, 0);
};

LikeOptionContext.prototype.EXCLUDING = function() {
    return this.getToken(FlinkSqlParser.EXCLUDING, 0);
};

LikeOptionContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParser.ALL, 0);
};

LikeOptionContext.prototype.CONSTRAINTS = function() {
    return this.getToken(FlinkSqlParser.CONSTRAINTS, 0);
};

LikeOptionContext.prototype.PARTITIONS = function() {
    return this.getToken(FlinkSqlParser.PARTITIONS, 0);
};

LikeOptionContext.prototype.OVERWRITING = function() {
    return this.getToken(FlinkSqlParser.OVERWRITING, 0);
};

LikeOptionContext.prototype.GENERATED = function() {
    return this.getToken(FlinkSqlParser.GENERATED, 0);
};

LikeOptionContext.prototype.OPTIONS = function() {
    return this.getToken(FlinkSqlParser.OPTIONS, 0);
};

LikeOptionContext.prototype.WATERMARKS = function() {
    return this.getToken(FlinkSqlParser.WATERMARKS, 0);
};

LikeOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLikeOption(this);
	}
};

LikeOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLikeOption(this);
	}
};

LikeOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLikeOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.LikeOptionContext = LikeOptionContext;

FlinkSqlParser.prototype.likeOption = function() {

    var localctx = new LikeOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, FlinkSqlParser.RULE_likeOption);
    var _la = 0; // Token type
    try {
        this.state = 768;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 764;
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.INCLUDING || _la===FlinkSqlParser.EXCLUDING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 765;
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.ALL || _la===FlinkSqlParser.PARTITIONS || _la===FlinkSqlParser.CONSTRAINTS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 766;
            _la = this._input.LA(1);
            if(!(((((_la - 232)) & ~0x1f) == 0 && ((1 << (_la - 232)) & ((1 << (FlinkSqlParser.INCLUDING - 232)) | (1 << (FlinkSqlParser.EXCLUDING - 232)) | (1 << (FlinkSqlParser.OVERWRITING - 232)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 767;
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.OPTIONS || _la===FlinkSqlParser.GENERATED || _la===FlinkSqlParser.WATERMARKS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateCatalogContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_createCatalog;
    return this;
}

CreateCatalogContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateCatalogContext.prototype.constructor = CreateCatalogContext;

CreateCatalogContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParser.CREATE, 0);
};

CreateCatalogContext.prototype.CATALOG = function() {
    return this.getToken(FlinkSqlParser.CATALOG, 0);
};

CreateCatalogContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateCatalogContext.prototype.withOption = function() {
    return this.getTypedRuleContext(WithOptionContext,0);
};

CreateCatalogContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateCatalog(this);
	}
};

CreateCatalogContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateCatalog(this);
	}
};

CreateCatalogContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateCatalog(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.CreateCatalogContext = CreateCatalogContext;

FlinkSqlParser.prototype.createCatalog = function() {

    var localctx = new CreateCatalogContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, FlinkSqlParser.RULE_createCatalog);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 770;
        this.match(FlinkSqlParser.CREATE);
        this.state = 771;
        this.match(FlinkSqlParser.CATALOG);
        this.state = 772;
        this.uid();
        this.state = 773;
        this.withOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_createDatabase;
    return this;
}

CreateDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateDatabaseContext.prototype.constructor = CreateDatabaseContext;

CreateDatabaseContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParser.CREATE, 0);
};

CreateDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(FlinkSqlParser.DATABASE, 0);
};

CreateDatabaseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateDatabaseContext.prototype.withOption = function() {
    return this.getTypedRuleContext(WithOptionContext,0);
};

CreateDatabaseContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateDatabaseContext.prototype.commentSpec = function() {
    return this.getTypedRuleContext(CommentSpecContext,0);
};

CreateDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateDatabase(this);
	}
};

CreateDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateDatabase(this);
	}
};

CreateDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.CreateDatabaseContext = CreateDatabaseContext;

FlinkSqlParser.prototype.createDatabase = function() {

    var localctx = new CreateDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, FlinkSqlParser.RULE_createDatabase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 775;
        this.match(FlinkSqlParser.CREATE);
        this.state = 776;
        this.match(FlinkSqlParser.DATABASE);
        this.state = 778;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 777;
            this.ifNotExists();
        }

        this.state = 780;
        this.uid();
        this.state = 782;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.COMMENT) {
            this.state = 781;
            this.commentSpec();
        }

        this.state = 784;
        this.withOption();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_createView;
    return this;
}

CreateViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateViewContext.prototype.constructor = CreateViewContext;

CreateViewContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParser.CREATE, 0);
};

CreateViewContext.prototype.VIEW = function() {
    return this.getToken(FlinkSqlParser.VIEW, 0);
};

CreateViewContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateViewContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

CreateViewContext.prototype.queryStatement = function() {
    return this.getTypedRuleContext(QueryStatementContext,0);
};

CreateViewContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParser.TEMPORARY, 0);
};

CreateViewContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateViewContext.prototype.columnNameList = function() {
    return this.getTypedRuleContext(ColumnNameListContext,0);
};

CreateViewContext.prototype.commentSpec = function() {
    return this.getTypedRuleContext(CommentSpecContext,0);
};

CreateViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateView(this);
	}
};

CreateViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateView(this);
	}
};

CreateViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.CreateViewContext = CreateViewContext;

FlinkSqlParser.prototype.createView = function() {

    var localctx = new CreateViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, FlinkSqlParser.RULE_createView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 786;
        this.match(FlinkSqlParser.CREATE);
        this.state = 788;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.TEMPORARY) {
            this.state = 787;
            this.match(FlinkSqlParser.TEMPORARY);
        }

        this.state = 790;
        this.match(FlinkSqlParser.VIEW);
        this.state = 792;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 791;
            this.ifNotExists();
        }

        this.state = 794;
        this.uid();
        this.state = 796;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        if(la_===1) {
            this.state = 795;
            this.columnNameList();

        }
        this.state = 799;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.COMMENT) {
            this.state = 798;
            this.commentSpec();
        }

        this.state = 801;
        this.match(FlinkSqlParser.AS);
        this.state = 802;
        this.queryStatement(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_createFunction;
    return this;
}

CreateFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateFunctionContext.prototype.constructor = CreateFunctionContext;

CreateFunctionContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParser.CREATE, 0);
};

CreateFunctionContext.prototype.FUNCTION = function() {
    return this.getToken(FlinkSqlParser.FUNCTION, 0);
};

CreateFunctionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

CreateFunctionContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

CreateFunctionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CreateFunctionContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParser.TEMPORARY, 0);
};

CreateFunctionContext.prototype.SYSTEM = function() {
    return this.getToken(FlinkSqlParser.SYSTEM, 0);
};

CreateFunctionContext.prototype.ifNotExists = function() {
    return this.getTypedRuleContext(IfNotExistsContext,0);
};

CreateFunctionContext.prototype.LANGUAGE = function() {
    return this.getToken(FlinkSqlParser.LANGUAGE, 0);
};

CreateFunctionContext.prototype.usingClause = function() {
    return this.getTypedRuleContext(UsingClauseContext,0);
};

CreateFunctionContext.prototype.JAVA = function() {
    return this.getToken(FlinkSqlParser.JAVA, 0);
};

CreateFunctionContext.prototype.SCALA = function() {
    return this.getToken(FlinkSqlParser.SCALA, 0);
};

CreateFunctionContext.prototype.PYTHON = function() {
    return this.getToken(FlinkSqlParser.PYTHON, 0);
};

CreateFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCreateFunction(this);
	}
};

CreateFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCreateFunction(this);
	}
};

CreateFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCreateFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.CreateFunctionContext = CreateFunctionContext;

FlinkSqlParser.prototype.createFunction = function() {

    var localctx = new CreateFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, FlinkSqlParser.RULE_createFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 804;
        this.match(FlinkSqlParser.CREATE);
        this.state = 808;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 805;
            this.match(FlinkSqlParser.TEMPORARY);

        } else if(la_===2) {
            this.state = 806;
            this.match(FlinkSqlParser.TEMPORARY);
            this.state = 807;
            this.match(FlinkSqlParser.SYSTEM);

        }
        this.state = 810;
        this.match(FlinkSqlParser.FUNCTION);
        this.state = 812;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 811;
            this.ifNotExists();
        }

        this.state = 814;
        this.uid();
        this.state = 815;
        this.match(FlinkSqlParser.AS);
        this.state = 816;
        this.identifier();
        this.state = 819;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.LANGUAGE) {
            this.state = 817;
            this.match(FlinkSqlParser.LANGUAGE);
            this.state = 818;
            _la = this._input.LA(1);
            if(!(((((_la - 240)) & ~0x1f) == 0 && ((1 << (_la - 240)) & ((1 << (FlinkSqlParser.JAVA - 240)) | (1 << (FlinkSqlParser.SCALA - 240)) | (1 << (FlinkSqlParser.PYTHON - 240)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.USING) {
            this.state = 821;
            this.usingClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UsingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_usingClause;
    return this;
}

UsingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingClauseContext.prototype.constructor = UsingClauseContext;

UsingClauseContext.prototype.USING = function() {
    return this.getToken(FlinkSqlParser.USING, 0);
};

UsingClauseContext.prototype.JAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.JAR);
    } else {
        return this.getToken(FlinkSqlParser.JAR, i);
    }
};


UsingClauseContext.prototype.jarFileName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JarFileNameContext);
    } else {
        return this.getTypedRuleContext(JarFileNameContext,i);
    }
};

UsingClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


UsingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUsingClause(this);
	}
};

UsingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUsingClause(this);
	}
};

UsingClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUsingClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.UsingClauseContext = UsingClauseContext;

FlinkSqlParser.prototype.usingClause = function() {

    var localctx = new UsingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, FlinkSqlParser.RULE_usingClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 824;
        this.match(FlinkSqlParser.USING);
        this.state = 825;
        this.match(FlinkSqlParser.JAR);
        this.state = 826;
        this.jarFileName();
        this.state = 832;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 827;
            this.match(FlinkSqlParser.COMMA);
            this.state = 828;
            this.match(FlinkSqlParser.JAR);
            this.state = 829;
            this.jarFileName();
            this.state = 834;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JarFileNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_jarFileName;
    return this;
}

JarFileNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JarFileNameContext.prototype.constructor = JarFileNameContext;

JarFileNameContext.prototype.STRING_LITERAL = function() {
    return this.getToken(FlinkSqlParser.STRING_LITERAL, 0);
};

JarFileNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterJarFileName(this);
	}
};

JarFileNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitJarFileName(this);
	}
};

JarFileNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitJarFileName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.JarFileNameContext = JarFileNameContext;

FlinkSqlParser.prototype.jarFileName = function() {

    var localctx = new JarFileNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, FlinkSqlParser.RULE_jarFileName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 835;
        this.match(FlinkSqlParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_alterTable;
    return this;
}

AlterTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableContext.prototype.constructor = AlterTableContext;

AlterTableContext.prototype.ALTER = function() {
    return this.getToken(FlinkSqlParser.ALTER, 0);
};

AlterTableContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParser.TABLE, 0);
};

AlterTableContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterTableContext.prototype.renameDefinition = function() {
    return this.getTypedRuleContext(RenameDefinitionContext,0);
};

AlterTableContext.prototype.setKeyValueDefinition = function() {
    return this.getTypedRuleContext(SetKeyValueDefinitionContext,0);
};

AlterTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAlterTable(this);
	}
};

AlterTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAlterTable(this);
	}
};

AlterTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAlterTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.AlterTableContext = AlterTableContext;

FlinkSqlParser.prototype.alterTable = function() {

    var localctx = new AlterTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, FlinkSqlParser.RULE_alterTable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 837;
        this.match(FlinkSqlParser.ALTER);
        this.state = 838;
        this.match(FlinkSqlParser.TABLE);
        this.state = 839;
        this.uid();
        this.state = 842;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.RENAME:
            this.state = 840;
            this.renameDefinition();
            break;
        case FlinkSqlParser.SET:
            this.state = 841;
            this.setKeyValueDefinition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_renameDefinition;
    return this;
}

RenameDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameDefinitionContext.prototype.constructor = RenameDefinitionContext;

RenameDefinitionContext.prototype.RENAME = function() {
    return this.getToken(FlinkSqlParser.RENAME, 0);
};

RenameDefinitionContext.prototype.TO = function() {
    return this.getToken(FlinkSqlParser.TO, 0);
};

RenameDefinitionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

RenameDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterRenameDefinition(this);
	}
};

RenameDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitRenameDefinition(this);
	}
};

RenameDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitRenameDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.RenameDefinitionContext = RenameDefinitionContext;

FlinkSqlParser.prototype.renameDefinition = function() {

    var localctx = new RenameDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, FlinkSqlParser.RULE_renameDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 844;
        this.match(FlinkSqlParser.RENAME);
        this.state = 845;
        this.match(FlinkSqlParser.TO);
        this.state = 846;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetKeyValueDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_setKeyValueDefinition;
    return this;
}

SetKeyValueDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetKeyValueDefinitionContext.prototype.constructor = SetKeyValueDefinitionContext;

SetKeyValueDefinitionContext.prototype.SET = function() {
    return this.getToken(FlinkSqlParser.SET, 0);
};

SetKeyValueDefinitionContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

SetKeyValueDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSetKeyValueDefinition(this);
	}
};

SetKeyValueDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSetKeyValueDefinition(this);
	}
};

SetKeyValueDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSetKeyValueDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SetKeyValueDefinitionContext = SetKeyValueDefinitionContext;

FlinkSqlParser.prototype.setKeyValueDefinition = function() {

    var localctx = new SetKeyValueDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, FlinkSqlParser.RULE_setKeyValueDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 848;
        this.match(FlinkSqlParser.SET);
        this.state = 849;
        this.tablePropertyList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlertViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_alertView;
    return this;
}

AlertViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlertViewContext.prototype.constructor = AlertViewContext;

AlertViewContext.prototype.ALTER = function() {
    return this.getToken(FlinkSqlParser.ALTER, 0);
};

AlertViewContext.prototype.VIEW = function() {
    return this.getToken(FlinkSqlParser.VIEW, 0);
};

AlertViewContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlertViewContext.prototype.renameDefinition = function() {
    return this.getTypedRuleContext(RenameDefinitionContext,0);
};

AlertViewContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

AlertViewContext.prototype.queryStatement = function() {
    return this.getTypedRuleContext(QueryStatementContext,0);
};

AlertViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAlertView(this);
	}
};

AlertViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAlertView(this);
	}
};

AlertViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAlertView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.AlertViewContext = AlertViewContext;

FlinkSqlParser.prototype.alertView = function() {

    var localctx = new AlertViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, FlinkSqlParser.RULE_alertView);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 851;
        this.match(FlinkSqlParser.ALTER);
        this.state = 852;
        this.match(FlinkSqlParser.VIEW);
        this.state = 853;
        this.uid();
        this.state = 857;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.RENAME:
            this.state = 854;
            this.renameDefinition();
            break;
        case FlinkSqlParser.AS:
            this.state = 855;
            this.match(FlinkSqlParser.AS);
            this.state = 856;
            this.queryStatement(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_alterDatabase;
    return this;
}

AlterDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterDatabaseContext.prototype.constructor = AlterDatabaseContext;

AlterDatabaseContext.prototype.ALTER = function() {
    return this.getToken(FlinkSqlParser.ALTER, 0);
};

AlterDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(FlinkSqlParser.DATABASE, 0);
};

AlterDatabaseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterDatabaseContext.prototype.setKeyValueDefinition = function() {
    return this.getTypedRuleContext(SetKeyValueDefinitionContext,0);
};

AlterDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAlterDatabase(this);
	}
};

AlterDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAlterDatabase(this);
	}
};

AlterDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAlterDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.AlterDatabaseContext = AlterDatabaseContext;

FlinkSqlParser.prototype.alterDatabase = function() {

    var localctx = new AlterDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, FlinkSqlParser.RULE_alterDatabase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 859;
        this.match(FlinkSqlParser.ALTER);
        this.state = 860;
        this.match(FlinkSqlParser.DATABASE);
        this.state = 861;
        this.uid();
        this.state = 862;
        this.setKeyValueDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_alterFunction;
    return this;
}

AlterFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterFunctionContext.prototype.constructor = AlterFunctionContext;

AlterFunctionContext.prototype.ALTER = function() {
    return this.getToken(FlinkSqlParser.ALTER, 0);
};

AlterFunctionContext.prototype.FUNCTION = function() {
    return this.getToken(FlinkSqlParser.FUNCTION, 0);
};

AlterFunctionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

AlterFunctionContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

AlterFunctionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AlterFunctionContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParser.TEMPORARY, 0);
};

AlterFunctionContext.prototype.SYSTEM = function() {
    return this.getToken(FlinkSqlParser.SYSTEM, 0);
};

AlterFunctionContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

AlterFunctionContext.prototype.LANGUAGE = function() {
    return this.getToken(FlinkSqlParser.LANGUAGE, 0);
};

AlterFunctionContext.prototype.JAVA = function() {
    return this.getToken(FlinkSqlParser.JAVA, 0);
};

AlterFunctionContext.prototype.SCALA = function() {
    return this.getToken(FlinkSqlParser.SCALA, 0);
};

AlterFunctionContext.prototype.PYTHON = function() {
    return this.getToken(FlinkSqlParser.PYTHON, 0);
};

AlterFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAlterFunction(this);
	}
};

AlterFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAlterFunction(this);
	}
};

AlterFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAlterFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.AlterFunctionContext = AlterFunctionContext;

FlinkSqlParser.prototype.alterFunction = function() {

    var localctx = new AlterFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, FlinkSqlParser.RULE_alterFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 864;
        this.match(FlinkSqlParser.ALTER);
        this.state = 868;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        if(la_===1) {
            this.state = 865;
            this.match(FlinkSqlParser.TEMPORARY);

        } else if(la_===2) {
            this.state = 866;
            this.match(FlinkSqlParser.TEMPORARY);
            this.state = 867;
            this.match(FlinkSqlParser.SYSTEM);

        }
        this.state = 870;
        this.match(FlinkSqlParser.FUNCTION);
        this.state = 872;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 871;
            this.ifExists();
        }

        this.state = 874;
        this.uid();
        this.state = 875;
        this.match(FlinkSqlParser.AS);
        this.state = 876;
        this.identifier();
        this.state = 879;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.LANGUAGE) {
            this.state = 877;
            this.match(FlinkSqlParser.LANGUAGE);
            this.state = 878;
            _la = this._input.LA(1);
            if(!(((((_la - 240)) & ~0x1f) == 0 && ((1 << (_la - 240)) & ((1 << (FlinkSqlParser.JAVA - 240)) | (1 << (FlinkSqlParser.SCALA - 240)) | (1 << (FlinkSqlParser.PYTHON - 240)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropCatalogContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dropCatalog;
    return this;
}

DropCatalogContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropCatalogContext.prototype.constructor = DropCatalogContext;

DropCatalogContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParser.DROP, 0);
};

DropCatalogContext.prototype.CATALOG = function() {
    return this.getToken(FlinkSqlParser.CATALOG, 0);
};

DropCatalogContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropCatalogContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropCatalogContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropCatalog(this);
	}
};

DropCatalogContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropCatalog(this);
	}
};

DropCatalogContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropCatalog(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DropCatalogContext = DropCatalogContext;

FlinkSqlParser.prototype.dropCatalog = function() {

    var localctx = new DropCatalogContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, FlinkSqlParser.RULE_dropCatalog);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 881;
        this.match(FlinkSqlParser.DROP);
        this.state = 882;
        this.match(FlinkSqlParser.CATALOG);
        this.state = 884;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 883;
            this.ifExists();
        }

        this.state = 886;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropTableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dropTable;
    return this;
}

DropTableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropTableContext.prototype.constructor = DropTableContext;

DropTableContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParser.DROP, 0);
};

DropTableContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParser.TABLE, 0);
};

DropTableContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropTableContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParser.TEMPORARY, 0);
};

DropTableContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropTable(this);
	}
};

DropTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropTable(this);
	}
};

DropTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DropTableContext = DropTableContext;

FlinkSqlParser.prototype.dropTable = function() {

    var localctx = new DropTableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, FlinkSqlParser.RULE_dropTable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 888;
        this.match(FlinkSqlParser.DROP);
        this.state = 890;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.TEMPORARY) {
            this.state = 889;
            this.match(FlinkSqlParser.TEMPORARY);
        }

        this.state = 892;
        this.match(FlinkSqlParser.TABLE);
        this.state = 894;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 893;
            this.ifExists();
        }

        this.state = 896;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropDatabaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dropDatabase;
    this.dropType = null; // Token
    return this;
}

DropDatabaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropDatabaseContext.prototype.constructor = DropDatabaseContext;

DropDatabaseContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParser.DROP, 0);
};

DropDatabaseContext.prototype.DATABASE = function() {
    return this.getToken(FlinkSqlParser.DATABASE, 0);
};

DropDatabaseContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropDatabaseContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropDatabaseContext.prototype.RESTRICT = function() {
    return this.getToken(FlinkSqlParser.RESTRICT, 0);
};

DropDatabaseContext.prototype.CASCADE = function() {
    return this.getToken(FlinkSqlParser.CASCADE, 0);
};

DropDatabaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropDatabase(this);
	}
};

DropDatabaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropDatabase(this);
	}
};

DropDatabaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropDatabase(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DropDatabaseContext = DropDatabaseContext;

FlinkSqlParser.prototype.dropDatabase = function() {

    var localctx = new DropDatabaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, FlinkSqlParser.RULE_dropDatabase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 898;
        this.match(FlinkSqlParser.DROP);
        this.state = 899;
        this.match(FlinkSqlParser.DATABASE);
        this.state = 901;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 900;
            this.ifExists();
        }

        this.state = 903;
        this.uid();
        this.state = 905;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.CASCADE || _la===FlinkSqlParser.RESTRICT) {
            this.state = 904;
            localctx.dropType = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.CASCADE || _la===FlinkSqlParser.RESTRICT)) {
                localctx.dropType = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropViewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dropView;
    return this;
}

DropViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropViewContext.prototype.constructor = DropViewContext;

DropViewContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParser.DROP, 0);
};

DropViewContext.prototype.VIEW = function() {
    return this.getToken(FlinkSqlParser.VIEW, 0);
};

DropViewContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropViewContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParser.TEMPORARY, 0);
};

DropViewContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropViewContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropView(this);
	}
};

DropViewContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropView(this);
	}
};

DropViewContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropView(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DropViewContext = DropViewContext;

FlinkSqlParser.prototype.dropView = function() {

    var localctx = new DropViewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, FlinkSqlParser.RULE_dropView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 907;
        this.match(FlinkSqlParser.DROP);
        this.state = 909;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.TEMPORARY) {
            this.state = 908;
            this.match(FlinkSqlParser.TEMPORARY);
        }

        this.state = 911;
        this.match(FlinkSqlParser.VIEW);
        this.state = 913;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 912;
            this.ifExists();
        }

        this.state = 915;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dropFunction;
    return this;
}

DropFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropFunctionContext.prototype.constructor = DropFunctionContext;

DropFunctionContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParser.DROP, 0);
};

DropFunctionContext.prototype.FUNCTION = function() {
    return this.getToken(FlinkSqlParser.FUNCTION, 0);
};

DropFunctionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DropFunctionContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParser.TEMPORARY, 0);
};

DropFunctionContext.prototype.SYSTEM = function() {
    return this.getToken(FlinkSqlParser.SYSTEM, 0);
};

DropFunctionContext.prototype.ifExists = function() {
    return this.getTypedRuleContext(IfExistsContext,0);
};

DropFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDropFunction(this);
	}
};

DropFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDropFunction(this);
	}
};

DropFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDropFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DropFunctionContext = DropFunctionContext;

FlinkSqlParser.prototype.dropFunction = function() {

    var localctx = new DropFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, FlinkSqlParser.RULE_dropFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 917;
        this.match(FlinkSqlParser.DROP);
        this.state = 921;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        if(la_===1) {
            this.state = 918;
            this.match(FlinkSqlParser.TEMPORARY);

        } else if(la_===2) {
            this.state = 919;
            this.match(FlinkSqlParser.TEMPORARY);
            this.state = 920;
            this.match(FlinkSqlParser.SYSTEM);

        }
        this.state = 923;
        this.match(FlinkSqlParser.FUNCTION);
        this.state = 925;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.IF) {
            this.state = 924;
            this.ifExists();
        }

        this.state = 927;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_insertStatement;
    return this;
}

InsertStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertStatementContext.prototype.constructor = InsertStatementContext;

InsertStatementContext.prototype.insertSimpleStatement = function() {
    return this.getTypedRuleContext(InsertSimpleStatementContext,0);
};

InsertStatementContext.prototype.EXECUTE = function() {
    return this.getToken(FlinkSqlParser.EXECUTE, 0);
};

InsertStatementContext.prototype.insertMulStatementCompatibility = function() {
    return this.getTypedRuleContext(InsertMulStatementCompatibilityContext,0);
};

InsertStatementContext.prototype.insertMulStatement = function() {
    return this.getTypedRuleContext(InsertMulStatementContext,0);
};

InsertStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterInsertStatement(this);
	}
};

InsertStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitInsertStatement(this);
	}
};

InsertStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitInsertStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.InsertStatementContext = InsertStatementContext;

FlinkSqlParser.prototype.insertStatement = function() {

    var localctx = new InsertStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, FlinkSqlParser.RULE_insertStatement);
    var _la = 0; // Token type
    try {
        this.state = 936;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 930;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.EXECUTE) {
                this.state = 929;
                this.match(FlinkSqlParser.EXECUTE);
            }

            this.state = 932;
            this.insertSimpleStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 933;
            this.insertMulStatementCompatibility();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 934;
            this.match(FlinkSqlParser.EXECUTE);
            this.state = 935;
            this.insertMulStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertSimpleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_insertSimpleStatement;
    return this;
}

InsertSimpleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertSimpleStatementContext.prototype.constructor = InsertSimpleStatementContext;

InsertSimpleStatementContext.prototype.INSERT = function() {
    return this.getToken(FlinkSqlParser.INSERT, 0);
};

InsertSimpleStatementContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

InsertSimpleStatementContext.prototype.INTO = function() {
    return this.getToken(FlinkSqlParser.INTO, 0);
};

InsertSimpleStatementContext.prototype.OVERWRITE = function() {
    return this.getToken(FlinkSqlParser.OVERWRITE, 0);
};

InsertSimpleStatementContext.prototype.queryStatement = function() {
    return this.getTypedRuleContext(QueryStatementContext,0);
};

InsertSimpleStatementContext.prototype.valuesDefinition = function() {
    return this.getTypedRuleContext(ValuesDefinitionContext,0);
};

InsertSimpleStatementContext.prototype.insertPartitionDefinition = function() {
    return this.getTypedRuleContext(InsertPartitionDefinitionContext,0);
};

InsertSimpleStatementContext.prototype.insertColumnListDefinition = function() {
    return this.getTypedRuleContext(InsertColumnListDefinitionContext,0);
};

InsertSimpleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterInsertSimpleStatement(this);
	}
};

InsertSimpleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitInsertSimpleStatement(this);
	}
};

InsertSimpleStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitInsertSimpleStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.InsertSimpleStatementContext = InsertSimpleStatementContext;

FlinkSqlParser.prototype.insertSimpleStatement = function() {

    var localctx = new InsertSimpleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, FlinkSqlParser.RULE_insertSimpleStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 938;
        this.match(FlinkSqlParser.INSERT);
        this.state = 939;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.INTO || _la===FlinkSqlParser.OVERWRITE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 940;
        this.uid();
        this.state = 949;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        switch(la_) {
        case 1:
            this.state = 942;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.PARTITION) {
                this.state = 941;
                this.insertPartitionDefinition();
            }

            this.state = 945;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
            if(la_===1) {
                this.state = 944;
                this.insertColumnListDefinition();

            }
            this.state = 947;
            this.queryStatement(0);
            break;

        case 2:
            this.state = 948;
            this.valuesDefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertPartitionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_insertPartitionDefinition;
    return this;
}

InsertPartitionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertPartitionDefinitionContext.prototype.constructor = InsertPartitionDefinitionContext;

InsertPartitionDefinitionContext.prototype.PARTITION = function() {
    return this.getToken(FlinkSqlParser.PARTITION, 0);
};

InsertPartitionDefinitionContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

InsertPartitionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterInsertPartitionDefinition(this);
	}
};

InsertPartitionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitInsertPartitionDefinition(this);
	}
};

InsertPartitionDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitInsertPartitionDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.InsertPartitionDefinitionContext = InsertPartitionDefinitionContext;

FlinkSqlParser.prototype.insertPartitionDefinition = function() {

    var localctx = new InsertPartitionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, FlinkSqlParser.RULE_insertPartitionDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 951;
        this.match(FlinkSqlParser.PARTITION);
        this.state = 952;
        this.tablePropertyList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertColumnListDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_insertColumnListDefinition;
    return this;
}

InsertColumnListDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertColumnListDefinitionContext.prototype.constructor = InsertColumnListDefinitionContext;

InsertColumnListDefinitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

InsertColumnListDefinitionContext.prototype.columnNameList = function() {
    return this.getTypedRuleContext(ColumnNameListContext,0);
};

InsertColumnListDefinitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

InsertColumnListDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterInsertColumnListDefinition(this);
	}
};

InsertColumnListDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitInsertColumnListDefinition(this);
	}
};

InsertColumnListDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitInsertColumnListDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.InsertColumnListDefinitionContext = InsertColumnListDefinitionContext;

FlinkSqlParser.prototype.insertColumnListDefinition = function() {

    var localctx = new InsertColumnListDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, FlinkSqlParser.RULE_insertColumnListDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 954;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 955;
        this.columnNameList();
        this.state = 956;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuesDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_valuesDefinition;
    return this;
}

ValuesDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesDefinitionContext.prototype.constructor = ValuesDefinitionContext;

ValuesDefinitionContext.prototype.VALUES = function() {
    return this.getToken(FlinkSqlParser.VALUES, 0);
};

ValuesDefinitionContext.prototype.valuesRowDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValuesRowDefinitionContext);
    } else {
        return this.getTypedRuleContext(ValuesRowDefinitionContext,i);
    }
};

ValuesDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


ValuesDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterValuesDefinition(this);
	}
};

ValuesDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitValuesDefinition(this);
	}
};

ValuesDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitValuesDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ValuesDefinitionContext = ValuesDefinitionContext;

FlinkSqlParser.prototype.valuesDefinition = function() {

    var localctx = new ValuesDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, FlinkSqlParser.RULE_valuesDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 958;
        this.match(FlinkSqlParser.VALUES);
        this.state = 959;
        this.valuesRowDefinition();
        this.state = 964;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 960;
            this.match(FlinkSqlParser.COMMA);
            this.state = 961;
            this.valuesRowDefinition();
            this.state = 966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValuesRowDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_valuesRowDefinition;
    return this;
}

ValuesRowDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesRowDefinitionContext.prototype.constructor = ValuesRowDefinitionContext;

ValuesRowDefinitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

ValuesRowDefinitionContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

ValuesRowDefinitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

ValuesRowDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


ValuesRowDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterValuesRowDefinition(this);
	}
};

ValuesRowDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitValuesRowDefinition(this);
	}
};

ValuesRowDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitValuesRowDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ValuesRowDefinitionContext = ValuesRowDefinitionContext;

FlinkSqlParser.prototype.valuesRowDefinition = function() {

    var localctx = new ValuesRowDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, FlinkSqlParser.RULE_valuesRowDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 967;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 968;
        this.constant();
        this.state = 973;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 969;
            this.match(FlinkSqlParser.COMMA);
            this.state = 970;
            this.constant();
            this.state = 975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 976;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertMulStatementCompatibilityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_insertMulStatementCompatibility;
    return this;
}

InsertMulStatementCompatibilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertMulStatementCompatibilityContext.prototype.constructor = InsertMulStatementCompatibilityContext;

InsertMulStatementCompatibilityContext.prototype.BEGIN = function() {
    return this.getToken(FlinkSqlParser.BEGIN, 0);
};

InsertMulStatementCompatibilityContext.prototype.STATEMENT = function() {
    return this.getToken(FlinkSqlParser.STATEMENT, 0);
};

InsertMulStatementCompatibilityContext.prototype.SET = function() {
    return this.getToken(FlinkSqlParser.SET, 0);
};

InsertMulStatementCompatibilityContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.SEMICOLON);
    } else {
        return this.getToken(FlinkSqlParser.SEMICOLON, i);
    }
};


InsertMulStatementCompatibilityContext.prototype.END = function() {
    return this.getToken(FlinkSqlParser.END, 0);
};

InsertMulStatementCompatibilityContext.prototype.insertSimpleStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InsertSimpleStatementContext);
    } else {
        return this.getTypedRuleContext(InsertSimpleStatementContext,i);
    }
};

InsertMulStatementCompatibilityContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterInsertMulStatementCompatibility(this);
	}
};

InsertMulStatementCompatibilityContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitInsertMulStatementCompatibility(this);
	}
};

InsertMulStatementCompatibilityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitInsertMulStatementCompatibility(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.InsertMulStatementCompatibilityContext = InsertMulStatementCompatibilityContext;

FlinkSqlParser.prototype.insertMulStatementCompatibility = function() {

    var localctx = new InsertMulStatementCompatibilityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, FlinkSqlParser.RULE_insertMulStatementCompatibility);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 978;
        this.match(FlinkSqlParser.BEGIN);
        this.state = 979;
        this.match(FlinkSqlParser.STATEMENT);
        this.state = 980;
        this.match(FlinkSqlParser.SET);
        this.state = 981;
        this.match(FlinkSqlParser.SEMICOLON);
        this.state = 985; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 982;
            this.insertSimpleStatement();
            this.state = 983;
            this.match(FlinkSqlParser.SEMICOLON);
            this.state = 987; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===FlinkSqlParser.INSERT);
        this.state = 989;
        this.match(FlinkSqlParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertMulStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_insertMulStatement;
    return this;
}

InsertMulStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertMulStatementContext.prototype.constructor = InsertMulStatementContext;

InsertMulStatementContext.prototype.STATEMENT = function() {
    return this.getToken(FlinkSqlParser.STATEMENT, 0);
};

InsertMulStatementContext.prototype.SET = function() {
    return this.getToken(FlinkSqlParser.SET, 0);
};

InsertMulStatementContext.prototype.BEGIN = function() {
    return this.getToken(FlinkSqlParser.BEGIN, 0);
};

InsertMulStatementContext.prototype.END = function() {
    return this.getToken(FlinkSqlParser.END, 0);
};

InsertMulStatementContext.prototype.insertSimpleStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InsertSimpleStatementContext);
    } else {
        return this.getTypedRuleContext(InsertSimpleStatementContext,i);
    }
};

InsertMulStatementContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.SEMICOLON);
    } else {
        return this.getToken(FlinkSqlParser.SEMICOLON, i);
    }
};


InsertMulStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterInsertMulStatement(this);
	}
};

InsertMulStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitInsertMulStatement(this);
	}
};

InsertMulStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitInsertMulStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.InsertMulStatementContext = InsertMulStatementContext;

FlinkSqlParser.prototype.insertMulStatement = function() {

    var localctx = new InsertMulStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, FlinkSqlParser.RULE_insertMulStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 991;
        this.match(FlinkSqlParser.STATEMENT);
        this.state = 992;
        this.match(FlinkSqlParser.SET);
        this.state = 993;
        this.match(FlinkSqlParser.BEGIN);
        this.state = 997; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 994;
            this.insertSimpleStatement();
            this.state = 995;
            this.match(FlinkSqlParser.SEMICOLON);
            this.state = 999; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===FlinkSqlParser.INSERT);
        this.state = 1001;
        this.match(FlinkSqlParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_queryStatement;
    this.left = null; // QueryStatementContext
    this.operator = null; // Token
    this.right = null; // QueryStatementContext
    return this;
}

QueryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryStatementContext.prototype.constructor = QueryStatementContext;

QueryStatementContext.prototype.valuesCaluse = function() {
    return this.getTypedRuleContext(ValuesCaluseContext,0);
};

QueryStatementContext.prototype.WITH = function() {
    return this.getToken(FlinkSqlParser.WITH, 0);
};

QueryStatementContext.prototype.withItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WithItemContext);
    } else {
        return this.getTypedRuleContext(WithItemContext,i);
    }
};

QueryStatementContext.prototype.queryStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryStatementContext);
    } else {
        return this.getTypedRuleContext(QueryStatementContext,i);
    }
};

QueryStatementContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


QueryStatementContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

QueryStatementContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

QueryStatementContext.prototype.selectClause = function() {
    return this.getTypedRuleContext(SelectClauseContext,0);
};

QueryStatementContext.prototype.orderByCaluse = function() {
    return this.getTypedRuleContext(OrderByCaluseContext,0);
};

QueryStatementContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

QueryStatementContext.prototype.selectStatement = function() {
    return this.getTypedRuleContext(SelectStatementContext,0);
};

QueryStatementContext.prototype.INTERSECT = function() {
    return this.getToken(FlinkSqlParser.INTERSECT, 0);
};

QueryStatementContext.prototype.UNION = function() {
    return this.getToken(FlinkSqlParser.UNION, 0);
};

QueryStatementContext.prototype.EXCEPT = function() {
    return this.getToken(FlinkSqlParser.EXCEPT, 0);
};

QueryStatementContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParser.ALL, 0);
};

QueryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterQueryStatement(this);
	}
};

QueryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitQueryStatement(this);
	}
};

QueryStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitQueryStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParser.prototype.queryStatement = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new QueryStatementContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 152;
    this.enterRecursionRule(localctx, 152, FlinkSqlParser.RULE_queryStatement, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1034;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1004;
            this.valuesCaluse();
            break;

        case 2:
            this.state = 1005;
            this.match(FlinkSqlParser.WITH);
            this.state = 1006;
            this.withItem();
            this.state = 1011;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 1007;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1008;
                this.withItem();
                this.state = 1013;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1014;
            this.queryStatement(5);
            break;

        case 3:
            this.state = 1016;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1017;
            this.queryStatement(0);
            this.state = 1018;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 4:
            this.state = 1020;
            this.selectClause();
            this.state = 1022;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
            if(la_===1) {
                this.state = 1021;
                this.orderByCaluse();

            }
            this.state = 1025;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
            if(la_===1) {
                this.state = 1024;
                this.limitClause();

            }
            break;

        case 5:
            this.state = 1027;
            this.selectStatement();
            this.state = 1029;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
            if(la_===1) {
                this.state = 1028;
                this.orderByCaluse();

            }
            this.state = 1032;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
            if(la_===1) {
                this.state = 1031;
                this.limitClause();

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1050;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,109,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new QueryStatementContext(this, _parentctx, _parentState);
                localctx.left = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_queryStatement);
                this.state = 1036;
                if (!( this.precpred(this._ctx, 3))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                }
                this.state = 1037;
                localctx.operator = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (FlinkSqlParser.UNION - 104)) | (1 << (FlinkSqlParser.EXCEPT - 104)) | (1 << (FlinkSqlParser.INTERSECT - 104)))) !== 0))) {
                    localctx.operator = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1039;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===FlinkSqlParser.ALL) {
                    this.state = 1038;
                    this.match(FlinkSqlParser.ALL);
                }

                this.state = 1041;
                localctx.right = this.queryStatement(0);
                this.state = 1043;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
                if(la_===1) {
                    this.state = 1042;
                    this.orderByCaluse();

                }
                this.state = 1046;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
                if(la_===1) {
                    this.state = 1045;
                    this.limitClause();

                } 
            }
            this.state = 1052;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,109,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ValuesCaluseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_valuesCaluse;
    return this;
}

ValuesCaluseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesCaluseContext.prototype.constructor = ValuesCaluseContext;

ValuesCaluseContext.prototype.VALUES = function() {
    return this.getToken(FlinkSqlParser.VALUES, 0);
};

ValuesCaluseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ValuesCaluseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


ValuesCaluseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterValuesCaluse(this);
	}
};

ValuesCaluseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitValuesCaluse(this);
	}
};

ValuesCaluseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitValuesCaluse(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ValuesCaluseContext = ValuesCaluseContext;

FlinkSqlParser.prototype.valuesCaluse = function() {

    var localctx = new ValuesCaluseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, FlinkSqlParser.RULE_valuesCaluse);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1053;
        this.match(FlinkSqlParser.VALUES);
        this.state = 1054;
        this.expression();
        this.state = 1059;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,110,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1055;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1056;
                this.expression(); 
            }
            this.state = 1061;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,110,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_withItem;
    return this;
}

WithItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithItemContext.prototype.constructor = WithItemContext;

WithItemContext.prototype.withItemName = function() {
    return this.getTypedRuleContext(WithItemNameContext,0);
};

WithItemContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

WithItemContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.LR_BRACKET);
    } else {
        return this.getToken(FlinkSqlParser.LR_BRACKET, i);
    }
};


WithItemContext.prototype.queryStatement = function() {
    return this.getTypedRuleContext(QueryStatementContext,0);
};

WithItemContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.RR_BRACKET);
    } else {
        return this.getToken(FlinkSqlParser.RR_BRACKET, i);
    }
};


WithItemContext.prototype.columnName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnNameContext);
    } else {
        return this.getTypedRuleContext(ColumnNameContext,i);
    }
};

WithItemContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


WithItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterWithItem(this);
	}
};

WithItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitWithItem(this);
	}
};

WithItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitWithItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.WithItemContext = WithItemContext;

FlinkSqlParser.prototype.withItem = function() {

    var localctx = new WithItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, FlinkSqlParser.RULE_withItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1062;
        this.withItemName();
        this.state = 1074;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.LR_BRACKET) {
            this.state = 1063;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1064;
            this.columnName();
            this.state = 1069;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 1065;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1066;
                this.columnName();
                this.state = 1071;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1072;
            this.match(FlinkSqlParser.RR_BRACKET);
        }

        this.state = 1076;
        this.match(FlinkSqlParser.AS);
        this.state = 1077;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 1078;
        this.queryStatement(0);
        this.state = 1079;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithItemNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_withItemName;
    return this;
}

WithItemNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithItemNameContext.prototype.constructor = WithItemNameContext;

WithItemNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

WithItemNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterWithItemName(this);
	}
};

WithItemNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitWithItemName(this);
	}
};

WithItemNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitWithItemName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.WithItemNameContext = WithItemNameContext;

FlinkSqlParser.prototype.withItemName = function() {

    var localctx = new WithItemNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, FlinkSqlParser.RULE_withItemName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1081;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_selectStatement;
    return this;
}

SelectStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectStatementContext.prototype.constructor = SelectStatementContext;

SelectStatementContext.prototype.selectClause = function() {
    return this.getTypedRuleContext(SelectClauseContext,0);
};

SelectStatementContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

SelectStatementContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

SelectStatementContext.prototype.groupByClause = function() {
    return this.getTypedRuleContext(GroupByClauseContext,0);
};

SelectStatementContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};

SelectStatementContext.prototype.windowClause = function() {
    return this.getTypedRuleContext(WindowClauseContext,0);
};

SelectStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSelectStatement(this);
	}
};

SelectStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSelectStatement(this);
	}
};

SelectStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSelectStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SelectStatementContext = SelectStatementContext;

FlinkSqlParser.prototype.selectStatement = function() {

    var localctx = new SelectStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, FlinkSqlParser.RULE_selectStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1083;
        this.selectClause();
        this.state = 1084;
        this.fromClause();
        this.state = 1086;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        if(la_===1) {
            this.state = 1085;
            this.whereClause();

        }
        this.state = 1089;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
        if(la_===1) {
            this.state = 1088;
            this.groupByClause();

        }
        this.state = 1092;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        if(la_===1) {
            this.state = 1091;
            this.havingClause();

        }
        this.state = 1095;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        if(la_===1) {
            this.state = 1094;
            this.windowClause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_selectClause;
    return this;
}

SelectClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectClauseContext.prototype.constructor = SelectClauseContext;

SelectClauseContext.prototype.SELECT = function() {
    return this.getToken(FlinkSqlParser.SELECT, 0);
};

SelectClauseContext.prototype.ASTERISK_SIGN = function() {
    return this.getToken(FlinkSqlParser.ASTERISK_SIGN, 0);
};

SelectClauseContext.prototype.projectItemDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProjectItemDefinitionContext);
    } else {
        return this.getTypedRuleContext(ProjectItemDefinitionContext,i);
    }
};

SelectClauseContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

SelectClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


SelectClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSelectClause(this);
	}
};

SelectClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSelectClause(this);
	}
};

SelectClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSelectClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SelectClauseContext = SelectClauseContext;

FlinkSqlParser.prototype.selectClause = function() {

    var localctx = new SelectClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, FlinkSqlParser.RULE_selectClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1097;
        this.match(FlinkSqlParser.SELECT);
        this.state = 1099;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
        if(la_===1) {
            this.state = 1098;
            this.setQuantifier();

        }
        this.state = 1110;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1101;
            this.match(FlinkSqlParser.ASTERISK_SIGN);
            break;

        case 2:
            this.state = 1102;
            this.projectItemDefinition();
            this.state = 1107;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,118,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1103;
                    this.match(FlinkSqlParser.COMMA);
                    this.state = 1104;
                    this.projectItemDefinition(); 
                }
                this.state = 1109;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,118,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProjectItemDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_projectItemDefinition;
    return this;
}

ProjectItemDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectItemDefinitionContext.prototype.constructor = ProjectItemDefinitionContext;

ProjectItemDefinitionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ProjectItemDefinitionContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

ProjectItemDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterProjectItemDefinition(this);
	}
};

ProjectItemDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitProjectItemDefinition(this);
	}
};

ProjectItemDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitProjectItemDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ProjectItemDefinitionContext = ProjectItemDefinitionContext;

FlinkSqlParser.prototype.projectItemDefinition = function() {

    var localctx = new ProjectItemDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, FlinkSqlParser.RULE_projectItemDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1112;
        this.expression();
        this.state = 1117;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        if(la_===1) {
            this.state = 1114;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
            if(la_===1) {
                this.state = 1113;
                this.match(FlinkSqlParser.AS);

            }
            this.state = 1116;
            this.expression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_fromClause;
    return this;
}

FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;

FromClauseContext.prototype.FROM = function() {
    return this.getToken(FlinkSqlParser.FROM, 0);
};

FromClauseContext.prototype.tableExpression = function() {
    return this.getTypedRuleContext(TableExpressionContext,0);
};

FromClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterFromClause(this);
	}
};

FromClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitFromClause(this);
	}
};

FromClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitFromClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.FromClauseContext = FromClauseContext;

FlinkSqlParser.prototype.fromClause = function() {

    var localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, FlinkSqlParser.RULE_fromClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1119;
        this.match(FlinkSqlParser.FROM);
        this.state = 1120;
        this.tableExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tableExpression;
    return this;
}

TableExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableExpressionContext.prototype.constructor = TableExpressionContext;

TableExpressionContext.prototype.tableReference = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableReferenceContext);
    } else {
        return this.getTypedRuleContext(TableReferenceContext,i);
    }
};

TableExpressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


TableExpressionContext.prototype.tableExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableExpressionContext);
    } else {
        return this.getTypedRuleContext(TableExpressionContext,i);
    }
};

TableExpressionContext.prototype.CROSS = function() {
    return this.getToken(FlinkSqlParser.CROSS, 0);
};

TableExpressionContext.prototype.JOIN = function() {
    return this.getToken(FlinkSqlParser.JOIN, 0);
};

TableExpressionContext.prototype.NATURAL = function() {
    return this.getToken(FlinkSqlParser.NATURAL, 0);
};

TableExpressionContext.prototype.OUTER = function() {
    return this.getToken(FlinkSqlParser.OUTER, 0);
};

TableExpressionContext.prototype.joinCondition = function() {
    return this.getTypedRuleContext(JoinConditionContext,0);
};

TableExpressionContext.prototype.LEFT = function() {
    return this.getToken(FlinkSqlParser.LEFT, 0);
};

TableExpressionContext.prototype.RIGHT = function() {
    return this.getToken(FlinkSqlParser.RIGHT, 0);
};

TableExpressionContext.prototype.FULL = function() {
    return this.getToken(FlinkSqlParser.FULL, 0);
};

TableExpressionContext.prototype.INNER = function() {
    return this.getToken(FlinkSqlParser.INNER, 0);
};

TableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTableExpression(this);
	}
};

TableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTableExpression(this);
	}
};

TableExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTableExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParser.prototype.tableExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TableExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 168;
    this.enterRecursionRule(localctx, 168, FlinkSqlParser.RULE_tableExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1123;
        this.tableReference();
        this.state = 1128;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1124;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1125;
                this.tableReference(); 
            }
            this.state = 1130;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
        }

        this._ctx.stop = this._input.LT(-1);
        this.state = 1152;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1150;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new TableExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_tableExpression);
                    this.state = 1131;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1132;
                    this.match(FlinkSqlParser.CROSS);
                    this.state = 1133;
                    this.match(FlinkSqlParser.JOIN);
                    this.state = 1134;
                    this.tableExpression(2);
                    break;

                case 2:
                    localctx = new TableExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_tableExpression);
                    this.state = 1135;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1137;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===FlinkSqlParser.NATURAL) {
                        this.state = 1136;
                        this.match(FlinkSqlParser.NATURAL);
                    }

                    this.state = 1140;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (FlinkSqlParser.INNER - 48)) | (1 << (FlinkSqlParser.LEFT - 48)) | (1 << (FlinkSqlParser.RIGHT - 48)) | (1 << (FlinkSqlParser.FULL - 48)))) !== 0)) {
                        this.state = 1139;
                        _la = this._input.LA(1);
                        if(!(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (FlinkSqlParser.INNER - 48)) | (1 << (FlinkSqlParser.LEFT - 48)) | (1 << (FlinkSqlParser.RIGHT - 48)) | (1 << (FlinkSqlParser.FULL - 48)))) !== 0))) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.state = 1143;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===FlinkSqlParser.OUTER) {
                        this.state = 1142;
                        this.match(FlinkSqlParser.OUTER);
                    }

                    this.state = 1145;
                    this.match(FlinkSqlParser.JOIN);
                    this.state = 1146;
                    this.tableExpression(0);
                    this.state = 1148;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
                    if(la_===1) {
                        this.state = 1147;
                        this.joinCondition();

                    }
                    break;

                } 
            }
            this.state = 1154;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TableReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tableReference;
    return this;
}

TableReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableReferenceContext.prototype.constructor = TableReferenceContext;

TableReferenceContext.prototype.tablePrimary = function() {
    return this.getTypedRuleContext(TablePrimaryContext,0);
};

TableReferenceContext.prototype.tableAlias = function() {
    return this.getTypedRuleContext(TableAliasContext,0);
};

TableReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTableReference(this);
	}
};

TableReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTableReference(this);
	}
};

TableReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTableReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TableReferenceContext = TableReferenceContext;

FlinkSqlParser.prototype.tableReference = function() {

    var localctx = new TableReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, FlinkSqlParser.RULE_tableReference);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1155;
        this.tablePrimary();
        this.state = 1157;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
        if(la_===1) {
            this.state = 1156;
            this.tableAlias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tablePrimary;
    return this;
}

TablePrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePrimaryContext.prototype.constructor = TablePrimaryContext;

TablePrimaryContext.prototype.tablePath = function() {
    return this.getTypedRuleContext(TablePathContext,0);
};

TablePrimaryContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParser.TABLE, 0);
};

TablePrimaryContext.prototype.systemTimePeriod = function() {
    return this.getTypedRuleContext(SystemTimePeriodContext,0);
};

TablePrimaryContext.prototype.correlationName = function() {
    return this.getTypedRuleContext(CorrelationNameContext,0);
};

TablePrimaryContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

TablePrimaryContext.prototype.LATERAL = function() {
    return this.getToken(FlinkSqlParser.LATERAL, 0);
};

TablePrimaryContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.LR_BRACKET);
    } else {
        return this.getToken(FlinkSqlParser.LR_BRACKET, i);
    }
};


TablePrimaryContext.prototype.functionName = function() {
    return this.getTypedRuleContext(FunctionNameContext,0);
};

TablePrimaryContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

TablePrimaryContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.RR_BRACKET);
    } else {
        return this.getToken(FlinkSqlParser.RR_BRACKET, i);
    }
};


TablePrimaryContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


TablePrimaryContext.prototype.queryStatement = function() {
    return this.getTypedRuleContext(QueryStatementContext,0);
};

TablePrimaryContext.prototype.UNNEST = function() {
    return this.getToken(FlinkSqlParser.UNNEST, 0);
};

TablePrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTablePrimary(this);
	}
};

TablePrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTablePrimary(this);
	}
};

TablePrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTablePrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TablePrimaryContext = TablePrimaryContext;

FlinkSqlParser.prototype.tablePrimary = function() {

    var localctx = new TablePrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, FlinkSqlParser.RULE_tablePrimary);
    var _la = 0; // Token type
    try {
        this.state = 1200;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1160;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.TABLE) {
                this.state = 1159;
                this.match(FlinkSqlParser.TABLE);
            }

            this.state = 1162;
            this.tablePath();
            this.state = 1164;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
            if(la_===1) {
                this.state = 1163;
                this.systemTimePeriod();

            }
            this.state = 1170;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
            if(la_===1) {
                this.state = 1167;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
                if(la_===1) {
                    this.state = 1166;
                    this.match(FlinkSqlParser.AS);

                }
                this.state = 1169;
                this.correlationName();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1172;
            this.match(FlinkSqlParser.LATERAL);
            this.state = 1173;
            this.match(FlinkSqlParser.TABLE);
            this.state = 1174;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1175;
            this.functionName();
            this.state = 1176;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1177;
            this.expression();
            this.state = 1182;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 1178;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1179;
                this.expression();
                this.state = 1184;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1185;
            this.match(FlinkSqlParser.RR_BRACKET);
            this.state = 1186;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1189;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.LATERAL) {
                this.state = 1188;
                this.match(FlinkSqlParser.LATERAL);
            }

            this.state = 1191;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1192;
            this.queryStatement(0);
            this.state = 1193;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1195;
            this.match(FlinkSqlParser.UNNEST);
            this.state = 1196;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1197;
            this.expression();
            this.state = 1198;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tablePath;
    return this;
}

TablePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePathContext.prototype.constructor = TablePathContext;

TablePathContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

TablePathContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTablePath(this);
	}
};

TablePathContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTablePath(this);
	}
};

TablePathContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTablePath(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TablePathContext = TablePathContext;

FlinkSqlParser.prototype.tablePath = function() {

    var localctx = new TablePathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, FlinkSqlParser.RULE_tablePath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1202;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SystemTimePeriodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_systemTimePeriod;
    return this;
}

SystemTimePeriodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SystemTimePeriodContext.prototype.constructor = SystemTimePeriodContext;

SystemTimePeriodContext.prototype.FOR = function() {
    return this.getToken(FlinkSqlParser.FOR, 0);
};

SystemTimePeriodContext.prototype.SYSTEM_TIME = function() {
    return this.getToken(FlinkSqlParser.SYSTEM_TIME, 0);
};

SystemTimePeriodContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

SystemTimePeriodContext.prototype.OF = function() {
    return this.getToken(FlinkSqlParser.OF, 0);
};

SystemTimePeriodContext.prototype.dateTimeExpression = function() {
    return this.getTypedRuleContext(DateTimeExpressionContext,0);
};

SystemTimePeriodContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSystemTimePeriod(this);
	}
};

SystemTimePeriodContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSystemTimePeriod(this);
	}
};

SystemTimePeriodContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSystemTimePeriod(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SystemTimePeriodContext = SystemTimePeriodContext;

FlinkSqlParser.prototype.systemTimePeriod = function() {

    var localctx = new SystemTimePeriodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, FlinkSqlParser.RULE_systemTimePeriod);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1204;
        this.match(FlinkSqlParser.FOR);
        this.state = 1205;
        this.match(FlinkSqlParser.SYSTEM_TIME);
        this.state = 1206;
        this.match(FlinkSqlParser.AS);
        this.state = 1207;
        this.match(FlinkSqlParser.OF);
        this.state = 1208;
        this.dateTimeExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DateTimeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dateTimeExpression;
    return this;
}

DateTimeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DateTimeExpressionContext.prototype.constructor = DateTimeExpressionContext;

DateTimeExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DateTimeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDateTimeExpression(this);
	}
};

DateTimeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDateTimeExpression(this);
	}
};

DateTimeExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDateTimeExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DateTimeExpressionContext = DateTimeExpressionContext;

FlinkSqlParser.prototype.dateTimeExpression = function() {

    var localctx = new DateTimeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, FlinkSqlParser.RULE_dateTimeExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1210;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_joinCondition;
    return this;
}

JoinConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinConditionContext.prototype.constructor = JoinConditionContext;

JoinConditionContext.prototype.ON = function() {
    return this.getToken(FlinkSqlParser.ON, 0);
};

JoinConditionContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

JoinConditionContext.prototype.USING = function() {
    return this.getToken(FlinkSqlParser.USING, 0);
};

JoinConditionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

JoinConditionContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

JoinConditionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

JoinConditionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


JoinConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterJoinCondition(this);
	}
};

JoinConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitJoinCondition(this);
	}
};

JoinConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitJoinCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.JoinConditionContext = JoinConditionContext;

FlinkSqlParser.prototype.joinCondition = function() {

    var localctx = new JoinConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, FlinkSqlParser.RULE_joinCondition);
    var _la = 0; // Token type
    try {
        this.state = 1226;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.ON:
            this.enterOuterAlt(localctx, 1);
            this.state = 1212;
            this.match(FlinkSqlParser.ON);
            this.state = 1213;
            this.booleanExpression(0);
            break;
        case FlinkSqlParser.USING:
            this.enterOuterAlt(localctx, 2);
            this.state = 1214;
            this.match(FlinkSqlParser.USING);
            this.state = 1215;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1216;
            this.uid();
            this.state = 1221;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 1217;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1218;
                this.uid();
                this.state = 1223;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1224;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhereClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_whereClause;
    return this;
}

WhereClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereClauseContext.prototype.constructor = WhereClauseContext;

WhereClauseContext.prototype.WHERE = function() {
    return this.getToken(FlinkSqlParser.WHERE, 0);
};

WhereClauseContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

WhereClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterWhereClause(this);
	}
};

WhereClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitWhereClause(this);
	}
};

WhereClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitWhereClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.WhereClauseContext = WhereClauseContext;

FlinkSqlParser.prototype.whereClause = function() {

    var localctx = new WhereClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, FlinkSqlParser.RULE_whereClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1228;
        this.match(FlinkSqlParser.WHERE);
        this.state = 1229;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_groupByClause;
    return this;
}

GroupByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByClauseContext.prototype.constructor = GroupByClauseContext;

GroupByClauseContext.prototype.GROUP = function() {
    return this.getToken(FlinkSqlParser.GROUP, 0);
};

GroupByClauseContext.prototype.BY = function() {
    return this.getToken(FlinkSqlParser.BY, 0);
};

GroupByClauseContext.prototype.groupItemDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupItemDefinitionContext);
    } else {
        return this.getTypedRuleContext(GroupItemDefinitionContext,i);
    }
};

GroupByClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


GroupByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterGroupByClause(this);
	}
};

GroupByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitGroupByClause(this);
	}
};

GroupByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitGroupByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.GroupByClauseContext = GroupByClauseContext;

FlinkSqlParser.prototype.groupByClause = function() {

    var localctx = new GroupByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, FlinkSqlParser.RULE_groupByClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1231;
        this.match(FlinkSqlParser.GROUP);
        this.state = 1232;
        this.match(FlinkSqlParser.BY);
        this.state = 1233;
        this.groupItemDefinition();
        this.state = 1238;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1234;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1235;
                this.groupItemDefinition(); 
            }
            this.state = 1240;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupItemDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_groupItemDefinition;
    return this;
}

GroupItemDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupItemDefinitionContext.prototype.constructor = GroupItemDefinitionContext;

GroupItemDefinitionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

GroupItemDefinitionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

GroupItemDefinitionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

GroupItemDefinitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


GroupItemDefinitionContext.prototype.CUBE = function() {
    return this.getToken(FlinkSqlParser.CUBE, 0);
};

GroupItemDefinitionContext.prototype.ROLLUP = function() {
    return this.getToken(FlinkSqlParser.ROLLUP, 0);
};

GroupItemDefinitionContext.prototype.GROUPING = function() {
    return this.getToken(FlinkSqlParser.GROUPING, 0);
};

GroupItemDefinitionContext.prototype.SETS = function() {
    return this.getToken(FlinkSqlParser.SETS, 0);
};

GroupItemDefinitionContext.prototype.groupItemDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupItemDefinitionContext);
    } else {
        return this.getTypedRuleContext(GroupItemDefinitionContext,i);
    }
};

GroupItemDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterGroupItemDefinition(this);
	}
};

GroupItemDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitGroupItemDefinition(this);
	}
};

GroupItemDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitGroupItemDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.GroupItemDefinitionContext = GroupItemDefinitionContext;

FlinkSqlParser.prototype.groupItemDefinition = function() {

    var localctx = new GroupItemDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, FlinkSqlParser.RULE_groupItemDefinition);
    var _la = 0; // Token type
    try {
        this.state = 1292;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1241;
            this.expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1242;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1243;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1244;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1245;
            this.expression();
            this.state = 1250;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 1246;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1247;
                this.expression();
                this.state = 1252;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1253;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1255;
            this.match(FlinkSqlParser.CUBE);
            this.state = 1256;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1257;
            this.expression();
            this.state = 1262;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 1258;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1259;
                this.expression();
                this.state = 1264;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1265;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1267;
            this.match(FlinkSqlParser.ROLLUP);
            this.state = 1268;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1269;
            this.expression();
            this.state = 1274;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 1270;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1271;
                this.expression();
                this.state = 1276;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1277;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1279;
            this.match(FlinkSqlParser.GROUPING);
            this.state = 1280;
            this.match(FlinkSqlParser.SETS);
            this.state = 1281;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1282;
            this.groupItemDefinition();
            this.state = 1287;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 1283;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1284;
                this.groupItemDefinition();
                this.state = 1289;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1290;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HavingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_havingClause;
    return this;
}

HavingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingClauseContext.prototype.constructor = HavingClauseContext;

HavingClauseContext.prototype.HAVING = function() {
    return this.getToken(FlinkSqlParser.HAVING, 0);
};

HavingClauseContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

HavingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterHavingClause(this);
	}
};

HavingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitHavingClause(this);
	}
};

HavingClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitHavingClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.HavingClauseContext = HavingClauseContext;

FlinkSqlParser.prototype.havingClause = function() {

    var localctx = new HavingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, FlinkSqlParser.RULE_havingClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1294;
        this.match(FlinkSqlParser.HAVING);
        this.state = 1295;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderByCaluseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_orderByCaluse;
    return this;
}

OrderByCaluseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderByCaluseContext.prototype.constructor = OrderByCaluseContext;

OrderByCaluseContext.prototype.ORDER = function() {
    return this.getToken(FlinkSqlParser.ORDER, 0);
};

OrderByCaluseContext.prototype.BY = function() {
    return this.getToken(FlinkSqlParser.BY, 0);
};

OrderByCaluseContext.prototype.orderItemDefition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderItemDefitionContext);
    } else {
        return this.getTypedRuleContext(OrderItemDefitionContext,i);
    }
};

OrderByCaluseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


OrderByCaluseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterOrderByCaluse(this);
	}
};

OrderByCaluseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitOrderByCaluse(this);
	}
};

OrderByCaluseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitOrderByCaluse(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.OrderByCaluseContext = OrderByCaluseContext;

FlinkSqlParser.prototype.orderByCaluse = function() {

    var localctx = new OrderByCaluseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, FlinkSqlParser.RULE_orderByCaluse);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1297;
        this.match(FlinkSqlParser.ORDER);
        this.state = 1298;
        this.match(FlinkSqlParser.BY);
        this.state = 1299;
        this.orderItemDefition();
        this.state = 1304;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,145,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1300;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1301;
                this.orderItemDefition(); 
            }
            this.state = 1306;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,145,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderItemDefitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_orderItemDefition;
    return this;
}

OrderItemDefitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderItemDefitionContext.prototype.constructor = OrderItemDefitionContext;

OrderItemDefitionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

OrderItemDefitionContext.prototype.ASC = function() {
    return this.getToken(FlinkSqlParser.ASC, 0);
};

OrderItemDefitionContext.prototype.DESC = function() {
    return this.getToken(FlinkSqlParser.DESC, 0);
};

OrderItemDefitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterOrderItemDefition(this);
	}
};

OrderItemDefitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitOrderItemDefition(this);
	}
};

OrderItemDefitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitOrderItemDefition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.OrderItemDefitionContext = OrderItemDefitionContext;

FlinkSqlParser.prototype.orderItemDefition = function() {

    var localctx = new OrderItemDefitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, FlinkSqlParser.RULE_orderItemDefition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1307;
        this.expression();
        this.state = 1309;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        if(la_===1) {
            this.state = 1308;
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.ASC || _la===FlinkSqlParser.DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_limitClause;
    this.limit = null; // ExpressionContext
    return this;
}

LimitClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseContext.prototype.constructor = LimitClauseContext;

LimitClauseContext.prototype.LIMIT = function() {
    return this.getToken(FlinkSqlParser.LIMIT, 0);
};

LimitClauseContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParser.ALL, 0);
};

LimitClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LimitClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLimitClause(this);
	}
};

LimitClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLimitClause(this);
	}
};

LimitClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLimitClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.LimitClauseContext = LimitClauseContext;

FlinkSqlParser.prototype.limitClause = function() {

    var localctx = new LimitClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, FlinkSqlParser.RULE_limitClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1311;
        this.match(FlinkSqlParser.LIMIT);
        this.state = 1314;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1312;
            this.match(FlinkSqlParser.ALL);
            break;

        case 2:
            this.state = 1313;
            localctx.limit = this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_windowClause;
    return this;
}

WindowClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowClauseContext.prototype.constructor = WindowClauseContext;

WindowClauseContext.prototype.WINDOW = function() {
    return this.getToken(FlinkSqlParser.WINDOW, 0);
};

WindowClauseContext.prototype.namedWindow = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedWindowContext);
    } else {
        return this.getTypedRuleContext(NamedWindowContext,i);
    }
};

WindowClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


WindowClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterWindowClause(this);
	}
};

WindowClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitWindowClause(this);
	}
};

WindowClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitWindowClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.WindowClauseContext = WindowClauseContext;

FlinkSqlParser.prototype.windowClause = function() {

    var localctx = new WindowClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, FlinkSqlParser.RULE_windowClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1316;
        this.match(FlinkSqlParser.WINDOW);
        this.state = 1317;
        this.namedWindow();
        this.state = 1322;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,148,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1318;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1319;
                this.namedWindow(); 
            }
            this.state = 1324;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,148,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NamedWindowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_namedWindow;
    this.name = null; // ErrorCapturingIdentifierContext
    return this;
}

NamedWindowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedWindowContext.prototype.constructor = NamedWindowContext;

NamedWindowContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

NamedWindowContext.prototype.windowSpec = function() {
    return this.getTypedRuleContext(WindowSpecContext,0);
};

NamedWindowContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

NamedWindowContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterNamedWindow(this);
	}
};

NamedWindowContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitNamedWindow(this);
	}
};

NamedWindowContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitNamedWindow(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.NamedWindowContext = NamedWindowContext;

FlinkSqlParser.prototype.namedWindow = function() {

    var localctx = new NamedWindowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, FlinkSqlParser.RULE_namedWindow);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1325;
        localctx.name = this.errorCapturingIdentifier();
        this.state = 1326;
        this.match(FlinkSqlParser.AS);
        this.state = 1327;
        this.windowSpec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_windowSpec;
    this.name = null; // ErrorCapturingIdentifierContext
    return this;
}

WindowSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowSpecContext.prototype.constructor = WindowSpecContext;

WindowSpecContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

WindowSpecContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

WindowSpecContext.prototype.ORDER = function() {
    return this.getToken(FlinkSqlParser.ORDER, 0);
};

WindowSpecContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.BY);
    } else {
        return this.getToken(FlinkSqlParser.BY, i);
    }
};


WindowSpecContext.prototype.sortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SortItemContext);
    } else {
        return this.getTypedRuleContext(SortItemContext,i);
    }
};

WindowSpecContext.prototype.PARTITION = function() {
    return this.getToken(FlinkSqlParser.PARTITION, 0);
};

WindowSpecContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

WindowSpecContext.prototype.windowFrame = function() {
    return this.getTypedRuleContext(WindowFrameContext,0);
};

WindowSpecContext.prototype.errorCapturingIdentifier = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
};

WindowSpecContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


WindowSpecContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterWindowSpec(this);
	}
};

WindowSpecContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitWindowSpec(this);
	}
};

WindowSpecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitWindowSpec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.WindowSpecContext = WindowSpecContext;

FlinkSqlParser.prototype.windowSpec = function() {

    var localctx = new WindowSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, FlinkSqlParser.RULE_windowSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1330;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 4)) & ~0x1f) == 0 && ((1 << (_la - 4)) & ((1 << (FlinkSqlParser.SELECT - 4)) | (1 << (FlinkSqlParser.FROM - 4)) | (1 << (FlinkSqlParser.ADD - 4)) | (1 << (FlinkSqlParser.AS - 4)) | (1 << (FlinkSqlParser.ALL - 4)) | (1 << (FlinkSqlParser.ANY - 4)) | (1 << (FlinkSqlParser.DISTINCT - 4)) | (1 << (FlinkSqlParser.WHERE - 4)) | (1 << (FlinkSqlParser.GROUP - 4)) | (1 << (FlinkSqlParser.BY - 4)) | (1 << (FlinkSqlParser.GROUPING - 4)) | (1 << (FlinkSqlParser.SETS - 4)) | (1 << (FlinkSqlParser.CUBE - 4)) | (1 << (FlinkSqlParser.ROLLUP - 4)) | (1 << (FlinkSqlParser.ORDER - 4)) | (1 << (FlinkSqlParser.HAVING - 4)) | (1 << (FlinkSqlParser.LIMIT - 4)) | (1 << (FlinkSqlParser.AT - 4)) | (1 << (FlinkSqlParser.OR - 4)) | (1 << (FlinkSqlParser.AND - 4)) | (1 << (FlinkSqlParser.IN - 4)) | (1 << (FlinkSqlParser.NOT - 4)) | (1 << (FlinkSqlParser.NO - 4)) | (1 << (FlinkSqlParser.EXISTS - 4)) | (1 << (FlinkSqlParser.BETWEEN - 4)) | (1 << (FlinkSqlParser.LIKE - 4)) | (1 << (FlinkSqlParser.RLIKE - 4)) | (1 << (FlinkSqlParser.IS - 4)) | (1 << (FlinkSqlParser.TRUE - 4)) | (1 << (FlinkSqlParser.FALSE - 4)) | (1 << (FlinkSqlParser.NULLS - 4)) | (1 << (FlinkSqlParser.ASC - 4)))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (FlinkSqlParser.DESC - 36)) | (1 << (FlinkSqlParser.FOR - 36)) | (1 << (FlinkSqlParser.INTERVAL - 36)) | (1 << (FlinkSqlParser.CASE - 36)) | (1 << (FlinkSqlParser.WHEN - 36)) | (1 << (FlinkSqlParser.THEN - 36)) | (1 << (FlinkSqlParser.ELSE - 36)) | (1 << (FlinkSqlParser.END - 36)) | (1 << (FlinkSqlParser.JOIN - 36)) | (1 << (FlinkSqlParser.CROSS - 36)) | (1 << (FlinkSqlParser.OUTER - 36)) | (1 << (FlinkSqlParser.INNER - 36)) | (1 << (FlinkSqlParser.LEFT - 36)) | (1 << (FlinkSqlParser.SEMI - 36)) | (1 << (FlinkSqlParser.RIGHT - 36)) | (1 << (FlinkSqlParser.FULL - 36)) | (1 << (FlinkSqlParser.USER - 36)) | (1 << (FlinkSqlParser.NATURAL - 36)) | (1 << (FlinkSqlParser.ON - 36)) | (1 << (FlinkSqlParser.PIVOT - 36)) | (1 << (FlinkSqlParser.LATERAL - 36)) | (1 << (FlinkSqlParser.WINDOW - 36)) | (1 << (FlinkSqlParser.OVER - 36)) | (1 << (FlinkSqlParser.PARTITION - 36)) | (1 << (FlinkSqlParser.RANGE - 36)) | (1 << (FlinkSqlParser.ROWS - 36)) | (1 << (FlinkSqlParser.UNBOUNDED - 36)) | (1 << (FlinkSqlParser.PRECEDING - 36)) | (1 << (FlinkSqlParser.FOLLOWING - 36)) | (1 << (FlinkSqlParser.CURRENT - 36)) | (1 << (FlinkSqlParser.FIRST - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (FlinkSqlParser.AFTER - 68)) | (1 << (FlinkSqlParser.LAST - 68)) | (1 << (FlinkSqlParser.WITH - 68)) | (1 << (FlinkSqlParser.VALUES - 68)) | (1 << (FlinkSqlParser.CREATE - 68)) | (1 << (FlinkSqlParser.TABLE - 68)) | (1 << (FlinkSqlParser.DIRECTORY - 68)) | (1 << (FlinkSqlParser.VIEW - 68)) | (1 << (FlinkSqlParser.REPLACE - 68)) | (1 << (FlinkSqlParser.INSERT - 68)) | (1 << (FlinkSqlParser.DELETE - 68)) | (1 << (FlinkSqlParser.INTO - 68)) | (1 << (FlinkSqlParser.DESCRIBE - 68)) | (1 << (FlinkSqlParser.EXPLAIN - 68)) | (1 << (FlinkSqlParser.FORMAT - 68)) | (1 << (FlinkSqlParser.LOGICAL - 68)) | (1 << (FlinkSqlParser.CODEGEN - 68)) | (1 << (FlinkSqlParser.COST - 68)) | (1 << (FlinkSqlParser.CAST - 68)) | (1 << (FlinkSqlParser.SHOW - 68)) | (1 << (FlinkSqlParser.TABLES - 68)) | (1 << (FlinkSqlParser.COLUMNS - 68)) | (1 << (FlinkSqlParser.COLUMN - 68)) | (1 << (FlinkSqlParser.USE - 68)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (FlinkSqlParser.PARTITIONS - 101)) | (1 << (FlinkSqlParser.FUNCTIONS - 101)) | (1 << (FlinkSqlParser.DROP - 101)) | (1 << (FlinkSqlParser.UNION - 101)) | (1 << (FlinkSqlParser.EXCEPT - 101)) | (1 << (FlinkSqlParser.SETMINUS - 101)) | (1 << (FlinkSqlParser.INTERSECT - 101)) | (1 << (FlinkSqlParser.TO - 101)) | (1 << (FlinkSqlParser.TABLESAMPLE - 101)) | (1 << (FlinkSqlParser.STRATIFY - 101)) | (1 << (FlinkSqlParser.ALTER - 101)) | (1 << (FlinkSqlParser.RENAME - 101)) | (1 << (FlinkSqlParser.STRUCT - 101)) | (1 << (FlinkSqlParser.COMMENT - 101)) | (1 << (FlinkSqlParser.SET - 101)) | (1 << (FlinkSqlParser.RESET - 101)) | (1 << (FlinkSqlParser.DATA - 101)) | (1 << (FlinkSqlParser.START - 101)) | (1 << (FlinkSqlParser.TRANSACTION - 101)) | (1 << (FlinkSqlParser.COMMIT - 101)) | (1 << (FlinkSqlParser.ROLLBACK - 101)) | (1 << (FlinkSqlParser.MACRO - 101)) | (1 << (FlinkSqlParser.IGNORE - 101)) | (1 << (FlinkSqlParser.BOTH - 101)) | (1 << (FlinkSqlParser.LEADING - 101)) | (1 << (FlinkSqlParser.TRAILING - 101)) | (1 << (FlinkSqlParser.IF - 101)) | (1 << (FlinkSqlParser.POSITION - 101)) | (1 << (FlinkSqlParser.EXTRACT - 101)) | (1 << (FlinkSqlParser.MINUS - 101)) | (1 << (FlinkSqlParser.DIV - 101)) | (1 << (FlinkSqlParser.PERCENTLIT - 101)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (FlinkSqlParser.BUCKET - 133)) | (1 << (FlinkSqlParser.OUT - 133)) | (1 << (FlinkSqlParser.OF - 133)) | (1 << (FlinkSqlParser.SORT - 133)) | (1 << (FlinkSqlParser.CLUSTER - 133)) | (1 << (FlinkSqlParser.DISTRIBUTE - 133)) | (1 << (FlinkSqlParser.OVERWRITE - 133)) | (1 << (FlinkSqlParser.TRANSFORM - 133)) | (1 << (FlinkSqlParser.REDUCE - 133)) | (1 << (FlinkSqlParser.USING - 133)) | (1 << (FlinkSqlParser.SERDE - 133)) | (1 << (FlinkSqlParser.SERDEPROPERTIES - 133)) | (1 << (FlinkSqlParser.RECORDREADER - 133)) | (1 << (FlinkSqlParser.RECORDWRITER - 133)) | (1 << (FlinkSqlParser.DELIMITED - 133)) | (1 << (FlinkSqlParser.FIELDS - 133)) | (1 << (FlinkSqlParser.TERMINATED - 133)) | (1 << (FlinkSqlParser.COLLECTION - 133)) | (1 << (FlinkSqlParser.ITEMS - 133)) | (1 << (FlinkSqlParser.KEYS - 133)) | (1 << (FlinkSqlParser.ESCAPED - 133)) | (1 << (FlinkSqlParser.LINES - 133)) | (1 << (FlinkSqlParser.SEPARATED - 133)) | (1 << (FlinkSqlParser.FUNCTION - 133)) | (1 << (FlinkSqlParser.EXTENDED - 133)) | (1 << (FlinkSqlParser.REFRESH - 133)) | (1 << (FlinkSqlParser.CLEAR - 133)) | (1 << (FlinkSqlParser.CACHE - 133)) | (1 << (FlinkSqlParser.UNCACHE - 133)) | (1 << (FlinkSqlParser.LAZY - 133)) | (1 << (FlinkSqlParser.FORMATTED - 133)) | (1 << (FlinkSqlParser.GLOBAL - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (FlinkSqlParser.TEMPORARY - 165)) | (1 << (FlinkSqlParser.OPTIONS - 165)) | (1 << (FlinkSqlParser.UNSET - 165)) | (1 << (FlinkSqlParser.TBLPROPERTIES - 165)) | (1 << (FlinkSqlParser.DBPROPERTIES - 165)) | (1 << (FlinkSqlParser.BUCKETS - 165)) | (1 << (FlinkSqlParser.SKEWED - 165)) | (1 << (FlinkSqlParser.STORED - 165)) | (1 << (FlinkSqlParser.DIRECTORIES - 165)) | (1 << (FlinkSqlParser.LOCATION - 165)) | (1 << (FlinkSqlParser.EXCHANGE - 165)) | (1 << (FlinkSqlParser.ARCHIVE - 165)) | (1 << (FlinkSqlParser.UNARCHIVE - 165)) | (1 << (FlinkSqlParser.FILEFORMAT - 165)) | (1 << (FlinkSqlParser.TOUCH - 165)) | (1 << (FlinkSqlParser.COMPACT - 165)) | (1 << (FlinkSqlParser.CONCATENATE - 165)) | (1 << (FlinkSqlParser.CHANGE - 165)) | (1 << (FlinkSqlParser.CASCADE - 165)) | (1 << (FlinkSqlParser.CONSTRAINT - 165)) | (1 << (FlinkSqlParser.RESTRICT - 165)) | (1 << (FlinkSqlParser.CLUSTERED - 165)) | (1 << (FlinkSqlParser.SORTED - 165)) | (1 << (FlinkSqlParser.PURGE - 165)) | (1 << (FlinkSqlParser.INPUTFORMAT - 165)) | (1 << (FlinkSqlParser.OUTPUTFORMAT - 165)) | (1 << (FlinkSqlParser.DATABASE - 165)) | (1 << (FlinkSqlParser.DATABASES - 165)) | (1 << (FlinkSqlParser.DFS - 165)) | (1 << (FlinkSqlParser.TRUNCATE - 165)) | (1 << (FlinkSqlParser.ANALYZE - 165)) | (1 << (FlinkSqlParser.COMPUTE - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (FlinkSqlParser.LIST - 197)) | (1 << (FlinkSqlParser.STATISTICS - 197)) | (1 << (FlinkSqlParser.PARTITIONED - 197)) | (1 << (FlinkSqlParser.EXTERNAL - 197)) | (1 << (FlinkSqlParser.DEFINED - 197)) | (1 << (FlinkSqlParser.REVOKE - 197)) | (1 << (FlinkSqlParser.GRANT - 197)) | (1 << (FlinkSqlParser.LOCK - 197)) | (1 << (FlinkSqlParser.UNLOCK - 197)) | (1 << (FlinkSqlParser.MSCK - 197)) | (1 << (FlinkSqlParser.REPAIR - 197)) | (1 << (FlinkSqlParser.RECOVER - 197)) | (1 << (FlinkSqlParser.EXPORT - 197)) | (1 << (FlinkSqlParser.IMPORT - 197)) | (1 << (FlinkSqlParser.LOAD - 197)) | (1 << (FlinkSqlParser.ROLE - 197)) | (1 << (FlinkSqlParser.ROLES - 197)) | (1 << (FlinkSqlParser.COMPACTIONS - 197)) | (1 << (FlinkSqlParser.PRINCIPALS - 197)) | (1 << (FlinkSqlParser.TRANSACTIONS - 197)) | (1 << (FlinkSqlParser.INDEX - 197)) | (1 << (FlinkSqlParser.INDEXES - 197)) | (1 << (FlinkSqlParser.LOCKS - 197)) | (1 << (FlinkSqlParser.OPTION - 197)) | (1 << (FlinkSqlParser.ANTI - 197)) | (1 << (FlinkSqlParser.LOCAL - 197)) | (1 << (FlinkSqlParser.INPATH - 197)) | (1 << (FlinkSqlParser.WATERMARK - 197)) | (1 << (FlinkSqlParser.UNNEST - 197)) | (1 << (FlinkSqlParser.MATCH - 197)) | (1 << (FlinkSqlParser.NEXT - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (FlinkSqlParser.WITHIN - 229)) | (1 << (FlinkSqlParser.WS - 229)) | (1 << (FlinkSqlParser.SYSTEM - 229)) | (1 << (FlinkSqlParser.INCLUDING - 229)) | (1 << (FlinkSqlParser.EXCLUDING - 229)) | (1 << (FlinkSqlParser.CONSTRAINTS - 229)) | (1 << (FlinkSqlParser.GENERATED - 229)) | (1 << (FlinkSqlParser.CATALOG - 229)) | (1 << (FlinkSqlParser.LANGUAGE - 229)) | (1 << (FlinkSqlParser.CATALOGS - 229)) | (1 << (FlinkSqlParser.VIEWS - 229)) | (1 << (FlinkSqlParser.PRIMARY - 229)) | (1 << (FlinkSqlParser.KEY - 229)) | (1 << (FlinkSqlParser.PERIOD - 229)) | (1 << (FlinkSqlParser.SYSTEM_TIME - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (FlinkSqlParser.STRING - 262)) | (1 << (FlinkSqlParser.ARRAY - 262)) | (1 << (FlinkSqlParser.MAP - 262)) | (1 << (FlinkSqlParser.CHAR - 262)) | (1 << (FlinkSqlParser.VARCHAR - 262)) | (1 << (FlinkSqlParser.BINARY - 262)) | (1 << (FlinkSqlParser.VARBINARY - 262)) | (1 << (FlinkSqlParser.BYTES - 262)) | (1 << (FlinkSqlParser.DECIMAL - 262)) | (1 << (FlinkSqlParser.TINYINT - 262)) | (1 << (FlinkSqlParser.SMALLINT - 262)) | (1 << (FlinkSqlParser.INT - 262)) | (1 << (FlinkSqlParser.BIGINT - 262)) | (1 << (FlinkSqlParser.FLOAT - 262)) | (1 << (FlinkSqlParser.DOUBLE - 262)) | (1 << (FlinkSqlParser.DATE - 262)) | (1 << (FlinkSqlParser.TIME - 262)) | (1 << (FlinkSqlParser.TIMESTAMP - 262)) | (1 << (FlinkSqlParser.MULTISET - 262)) | (1 << (FlinkSqlParser.BOOLEAN - 262)) | (1 << (FlinkSqlParser.RAW - 262)) | (1 << (FlinkSqlParser.ROW - 262)) | (1 << (FlinkSqlParser.NULL - 262)) | (1 << (FlinkSqlParser.DATETIME - 262)))) !== 0) || ((((_la - 320)) & ~0x1f) == 0 && ((1 << (_la - 320)) & ((1 << (FlinkSqlParser.STRING_LITERAL - 320)) | (1 << (FlinkSqlParser.DIG_LITERAL - 320)) | (1 << (FlinkSqlParser.ID_LITERAL - 320)))) !== 0)) {
            this.state = 1329;
            localctx.name = this.errorCapturingIdentifier();
        }

        this.state = 1332;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 1343;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.ORDER) {
            this.state = 1333;
            this.match(FlinkSqlParser.ORDER);
            this.state = 1334;
            this.match(FlinkSqlParser.BY);
            this.state = 1335;
            this.sortItem();
            this.state = 1340;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 1336;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1337;
                this.sortItem();
                this.state = 1342;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1355;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.PARTITION) {
            this.state = 1345;
            this.match(FlinkSqlParser.PARTITION);
            this.state = 1346;
            this.match(FlinkSqlParser.BY);
            this.state = 1347;
            this.expression();
            this.state = 1352;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 1348;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1349;
                this.expression();
                this.state = 1354;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1358;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.RANGE || _la===FlinkSqlParser.ROWS) {
            this.state = 1357;
            this.windowFrame();
        }

        this.state = 1360;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SortItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_sortItem;
    this.ordering = null; // Token
    this.nullOrder = null; // Token
    return this;
}

SortItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SortItemContext.prototype.constructor = SortItemContext;

SortItemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SortItemContext.prototype.NULLS = function() {
    return this.getToken(FlinkSqlParser.NULLS, 0);
};

SortItemContext.prototype.ASC = function() {
    return this.getToken(FlinkSqlParser.ASC, 0);
};

SortItemContext.prototype.DESC = function() {
    return this.getToken(FlinkSqlParser.DESC, 0);
};

SortItemContext.prototype.LAST = function() {
    return this.getToken(FlinkSqlParser.LAST, 0);
};

SortItemContext.prototype.FIRST = function() {
    return this.getToken(FlinkSqlParser.FIRST, 0);
};

SortItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSortItem(this);
	}
};

SortItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSortItem(this);
	}
};

SortItemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSortItem(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SortItemContext = SortItemContext;

FlinkSqlParser.prototype.sortItem = function() {

    var localctx = new SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, FlinkSqlParser.RULE_sortItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1362;
        this.expression();
        this.state = 1364;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.ASC || _la===FlinkSqlParser.DESC) {
            this.state = 1363;
            localctx.ordering = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.ASC || _la===FlinkSqlParser.DESC)) {
                localctx.ordering = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1368;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.NULLS) {
            this.state = 1366;
            this.match(FlinkSqlParser.NULLS);
            this.state = 1367;
            localctx.nullOrder = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.FIRST || _la===FlinkSqlParser.LAST)) {
                localctx.nullOrder = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowFrameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_windowFrame;
    return this;
}

WindowFrameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowFrameContext.prototype.constructor = WindowFrameContext;

WindowFrameContext.prototype.RANGE = function() {
    return this.getToken(FlinkSqlParser.RANGE, 0);
};

WindowFrameContext.prototype.frameBound = function() {
    return this.getTypedRuleContext(FrameBoundContext,0);
};

WindowFrameContext.prototype.ROWS = function() {
    return this.getToken(FlinkSqlParser.ROWS, 0);
};

WindowFrameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterWindowFrame(this);
	}
};

WindowFrameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitWindowFrame(this);
	}
};

WindowFrameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitWindowFrame(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.WindowFrameContext = WindowFrameContext;

FlinkSqlParser.prototype.windowFrame = function() {

    var localctx = new WindowFrameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, FlinkSqlParser.RULE_windowFrame);
    try {
        this.state = 1374;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.RANGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1370;
            this.match(FlinkSqlParser.RANGE);
            this.state = 1371;
            this.frameBound();
            break;
        case FlinkSqlParser.ROWS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1372;
            this.match(FlinkSqlParser.ROWS);
            this.state = 1373;
            this.frameBound();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FrameBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_frameBound;
    return this;
}

FrameBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FrameBoundContext.prototype.constructor = FrameBoundContext;

FrameBoundContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FrameBoundContext.prototype.PRECEDING = function() {
    return this.getToken(FlinkSqlParser.PRECEDING, 0);
};

FrameBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterFrameBound(this);
	}
};

FrameBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitFrameBound(this);
	}
};

FrameBoundContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitFrameBound(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.FrameBoundContext = FrameBoundContext;

FlinkSqlParser.prototype.frameBound = function() {

    var localctx = new FrameBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, FlinkSqlParser.RULE_frameBound);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1376;
        this.expression();
        this.state = 1377;
        this.match(FlinkSqlParser.PRECEDING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ExpressionContext = ExpressionContext;

FlinkSqlParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, FlinkSqlParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1379;
        this.booleanExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_booleanExpression;
    return this;
}

BooleanExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanExpressionContext.prototype.constructor = BooleanExpressionContext;


 
BooleanExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function LogicalNotContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalNotContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalNotContext.prototype.constructor = LogicalNotContext;

FlinkSqlParser.LogicalNotContext = LogicalNotContext;

LogicalNotContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

LogicalNotContext.prototype.booleanExpression = function() {
    return this.getTypedRuleContext(BooleanExpressionContext,0);
};
LogicalNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLogicalNot(this);
	}
};

LogicalNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLogicalNot(this);
	}
};

LogicalNotContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLogicalNot(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PredicatedContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PredicatedContext.prototype = Object.create(BooleanExpressionContext.prototype);
PredicatedContext.prototype.constructor = PredicatedContext;

FlinkSqlParser.PredicatedContext = PredicatedContext;

PredicatedContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

PredicatedContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};
PredicatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPredicated(this);
	}
};

PredicatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPredicated(this);
	}
};

PredicatedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPredicated(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExistsContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistsContext.prototype = Object.create(BooleanExpressionContext.prototype);
ExistsContext.prototype.constructor = ExistsContext;

FlinkSqlParser.ExistsContext = ExistsContext;

ExistsContext.prototype.EXISTS = function() {
    return this.getToken(FlinkSqlParser.EXISTS, 0);
};

ExistsContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

ExistsContext.prototype.queryStatement = function() {
    return this.getTypedRuleContext(QueryStatementContext,0);
};

ExistsContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};
ExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterExists(this);
	}
};

ExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitExists(this);
	}
};

ExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalBinaryContext(parser, ctx) {
	BooleanExpressionContext.call(this, parser);
    this.left = null; // BooleanExpressionContext;
    this.operator = null; // Token;
    this.right = null; // BooleanExpressionContext;
    BooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalBinaryContext.prototype = Object.create(BooleanExpressionContext.prototype);
LogicalBinaryContext.prototype.constructor = LogicalBinaryContext;

FlinkSqlParser.LogicalBinaryContext = LogicalBinaryContext;

LogicalBinaryContext.prototype.booleanExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanExpressionContext,i);
    }
};

LogicalBinaryContext.prototype.AND = function() {
    return this.getToken(FlinkSqlParser.AND, 0);
};

LogicalBinaryContext.prototype.OR = function() {
    return this.getToken(FlinkSqlParser.OR, 0);
};
LogicalBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLogicalBinary(this);
	}
};

LogicalBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLogicalBinary(this);
	}
};

LogicalBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLogicalBinary(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParser.prototype.booleanExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 210;
    this.enterRecursionRule(localctx, 210, FlinkSqlParser.RULE_booleanExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1393;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
        switch(la_) {
        case 1:
            localctx = new LogicalNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1382;
            this.match(FlinkSqlParser.NOT);
            this.state = 1383;
            this.booleanExpression(5);
            break;

        case 2:
            localctx = new ExistsContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1384;
            this.match(FlinkSqlParser.EXISTS);
            this.state = 1385;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1386;
            this.queryStatement(0);
            this.state = 1387;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 3:
            localctx = new PredicatedContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1389;
            this.valueExpression(0);
            this.state = 1391;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
            if(la_===1) {
                this.state = 1390;
                this.predicate();

            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1403;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1401;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_booleanExpression);
                    this.state = 1395;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1396;
                    localctx.operator = this.match(FlinkSqlParser.AND);
                    this.state = 1397;
                    localctx.right = this.booleanExpression(3);
                    break;

                case 2:
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_booleanExpression);
                    this.state = 1398;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1399;
                    localctx.operator = this.match(FlinkSqlParser.OR);
                    this.state = 1400;
                    localctx.right = this.booleanExpression(2);
                    break;

                } 
            }
            this.state = 1405;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_predicate;
    this.kind = null; // Token
    this.lower = null; // ValueExpressionContext
    this.upper = null; // ValueExpressionContext
    this.pattern = null; // ValueExpressionContext
    this.quantifier = null; // Token
    this.right = null; // ValueExpressionContext
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.AND = function() {
    return this.getToken(FlinkSqlParser.AND, 0);
};

PredicateContext.prototype.BETWEEN = function() {
    return this.getToken(FlinkSqlParser.BETWEEN, 0);
};

PredicateContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

PredicateContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

PredicateContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

PredicateContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PredicateContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

PredicateContext.prototype.IN = function() {
    return this.getToken(FlinkSqlParser.IN, 0);
};

PredicateContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


PredicateContext.prototype.queryStatement = function() {
    return this.getTypedRuleContext(QueryStatementContext,0);
};

PredicateContext.prototype.EXISTS = function() {
    return this.getToken(FlinkSqlParser.EXISTS, 0);
};

PredicateContext.prototype.RLIKE = function() {
    return this.getToken(FlinkSqlParser.RLIKE, 0);
};

PredicateContext.prototype.LIKE = function() {
    return this.getToken(FlinkSqlParser.LIKE, 0);
};

PredicateContext.prototype.ANY = function() {
    return this.getToken(FlinkSqlParser.ANY, 0);
};

PredicateContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParser.ALL, 0);
};

PredicateContext.prototype.IS = function() {
    return this.getToken(FlinkSqlParser.IS, 0);
};

PredicateContext.prototype.NULL = function() {
    return this.getToken(FlinkSqlParser.NULL, 0);
};

PredicateContext.prototype.TRUE = function() {
    return this.getToken(FlinkSqlParser.TRUE, 0);
};

PredicateContext.prototype.FALSE = function() {
    return this.getToken(FlinkSqlParser.FALSE, 0);
};

PredicateContext.prototype.FROM = function() {
    return this.getToken(FlinkSqlParser.FROM, 0);
};

PredicateContext.prototype.DISTINCT = function() {
    return this.getToken(FlinkSqlParser.DISTINCT, 0);
};

PredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPredicate(this);
	}
};

PredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPredicate(this);
	}
};

PredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.PredicateContext = PredicateContext;

FlinkSqlParser.prototype.predicate = function() {

    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, FlinkSqlParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 1489;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 1406;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 1409;
            localctx.kind = this.match(FlinkSqlParser.BETWEEN);
            this.state = 1410;
            localctx.lower = this.valueExpression(0);
            this.state = 1411;
            this.match(FlinkSqlParser.AND);
            this.state = 1412;
            localctx.upper = this.valueExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1415;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 1414;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 1417;
            localctx.kind = this.match(FlinkSqlParser.IN);
            this.state = 1418;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1419;
            this.expression();
            this.state = 1424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FlinkSqlParser.COMMA) {
                this.state = 1420;
                this.match(FlinkSqlParser.COMMA);
                this.state = 1421;
                this.expression();
                this.state = 1426;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1427;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1430;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 1429;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 1432;
            localctx.kind = this.match(FlinkSqlParser.IN);
            this.state = 1433;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1434;
            this.queryStatement(0);
            this.state = 1435;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1437;
            localctx.kind = this.match(FlinkSqlParser.EXISTS);
            this.state = 1438;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1439;
            this.queryStatement(0);
            this.state = 1440;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 1442;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 1445;
            localctx.kind = this.match(FlinkSqlParser.RLIKE);
            this.state = 1446;
            localctx.pattern = this.valueExpression(0);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1448;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 1447;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 1450;
            localctx.kind = this.match(FlinkSqlParser.LIKE);
            this.state = 1451;
            localctx.quantifier = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.ALL || _la===FlinkSqlParser.ANY)) {
                localctx.quantifier = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1465;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1452;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1453;
                this.match(FlinkSqlParser.RR_BRACKET);
                break;

            case 2:
                this.state = 1454;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1455;
                this.expression();
                this.state = 1460;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===FlinkSqlParser.COMMA) {
                    this.state = 1456;
                    this.match(FlinkSqlParser.COMMA);
                    this.state = 1457;
                    this.expression();
                    this.state = 1462;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1463;
                this.match(FlinkSqlParser.RR_BRACKET);
                break;

            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1468;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 1467;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 1470;
            localctx.kind = this.match(FlinkSqlParser.LIKE);
            this.state = 1471;
            localctx.pattern = this.valueExpression(0);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1472;
            this.match(FlinkSqlParser.IS);
            this.state = 1474;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 1473;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 1476;
            localctx.kind = this.match(FlinkSqlParser.NULL);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1477;
            this.match(FlinkSqlParser.IS);
            this.state = 1479;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 1478;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 1481;
            localctx.kind = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.TRUE || _la===FlinkSqlParser.FALSE)) {
                localctx.kind = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1482;
            this.match(FlinkSqlParser.IS);
            this.state = 1484;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 1483;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 1486;
            localctx.kind = this.match(FlinkSqlParser.DISTINCT);
            this.state = 1487;
            this.match(FlinkSqlParser.FROM);
            this.state = 1488;
            localctx.right = this.valueExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LikePredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_likePredicate;
    this.kind = null; // Token
    this.quantifier = null; // Token
    this.pattern = null; // ValueExpressionContext
    return this;
}

LikePredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LikePredicateContext.prototype.constructor = LikePredicateContext;

LikePredicateContext.prototype.LIKE = function() {
    return this.getToken(FlinkSqlParser.LIKE, 0);
};

LikePredicateContext.prototype.ANY = function() {
    return this.getToken(FlinkSqlParser.ANY, 0);
};

LikePredicateContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParser.ALL, 0);
};

LikePredicateContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

LikePredicateContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

LikePredicateContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

LikePredicateContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

LikePredicateContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


LikePredicateContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

LikePredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLikePredicate(this);
	}
};

LikePredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLikePredicate(this);
	}
};

LikePredicateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLikePredicate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.LikePredicateContext = LikePredicateContext;

FlinkSqlParser.prototype.likePredicate = function() {

    var localctx = new LikePredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, FlinkSqlParser.RULE_likePredicate);
    var _la = 0; // Token type
    try {
        this.state = 1516;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1492;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 1491;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 1494;
            localctx.kind = this.match(FlinkSqlParser.LIKE);
            this.state = 1495;
            localctx.quantifier = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.ALL || _la===FlinkSqlParser.ANY)) {
                localctx.quantifier = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1509;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1496;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1497;
                this.match(FlinkSqlParser.RR_BRACKET);
                break;

            case 2:
                this.state = 1498;
                this.match(FlinkSqlParser.LR_BRACKET);
                this.state = 1499;
                this.expression();
                this.state = 1504;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===FlinkSqlParser.COMMA) {
                    this.state = 1500;
                    this.match(FlinkSqlParser.COMMA);
                    this.state = 1501;
                    this.expression();
                    this.state = 1506;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1507;
                this.match(FlinkSqlParser.RR_BRACKET);
                break;

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1512;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 1511;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 1514;
            localctx.kind = this.match(FlinkSqlParser.LIKE);
            this.state = 1515;
            localctx.pattern = this.valueExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ValueExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_valueExpression;
    return this;
}

ValueExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueExpressionContext.prototype.constructor = ValueExpressionContext;


 
ValueExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ValueExpressionDefaultContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ValueExpressionDefaultContext.prototype = Object.create(ValueExpressionContext.prototype);
ValueExpressionDefaultContext.prototype.constructor = ValueExpressionDefaultContext;

FlinkSqlParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

ValueExpressionDefaultContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};
ValueExpressionDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterValueExpressionDefault(this);
	}
};

ValueExpressionDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitValueExpressionDefault(this);
	}
};

ValueExpressionDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitValueExpressionDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ComparisonContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComparisonContext.prototype = Object.create(ValueExpressionContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

FlinkSqlParser.ComparisonContext = ComparisonContext;

ComparisonContext.prototype.comparisonOperator = function() {
    return this.getTypedRuleContext(ComparisonOperatorContext,0);
};

ComparisonContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitComparison(this);
	}
};

ComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitComparison(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArithmeticBinaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.left = null; // ValueExpressionContext;
    this.operator = null; // Token;
    this.right = null; // ValueExpressionContext;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticBinaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticBinaryContext.prototype.constructor = ArithmeticBinaryContext;

FlinkSqlParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

ArithmeticBinaryContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};

ArithmeticBinaryContext.prototype.ASTERISK_SIGN = function() {
    return this.getToken(FlinkSqlParser.ASTERISK_SIGN, 0);
};

ArithmeticBinaryContext.prototype.SLASH_SIGN = function() {
    return this.getToken(FlinkSqlParser.SLASH_SIGN, 0);
};

ArithmeticBinaryContext.prototype.PENCENT_SIGN = function() {
    return this.getToken(FlinkSqlParser.PENCENT_SIGN, 0);
};

ArithmeticBinaryContext.prototype.DIV = function() {
    return this.getToken(FlinkSqlParser.DIV, 0);
};

ArithmeticBinaryContext.prototype.ADD_SIGN = function() {
    return this.getToken(FlinkSqlParser.ADD_SIGN, 0);
};

ArithmeticBinaryContext.prototype.HYPNEN_SIGN = function() {
    return this.getToken(FlinkSqlParser.HYPNEN_SIGN, 0);
};

ArithmeticBinaryContext.prototype.DOUBLE_VERTICAL_SIGN = function() {
    return this.getToken(FlinkSqlParser.DOUBLE_VERTICAL_SIGN, 0);
};

ArithmeticBinaryContext.prototype.BIT_AND_OP = function() {
    return this.getToken(FlinkSqlParser.BIT_AND_OP, 0);
};

ArithmeticBinaryContext.prototype.BIT_XOR_OP = function() {
    return this.getToken(FlinkSqlParser.BIT_XOR_OP, 0);
};

ArithmeticBinaryContext.prototype.BIT_OR_OP = function() {
    return this.getToken(FlinkSqlParser.BIT_OR_OP, 0);
};
ArithmeticBinaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterArithmeticBinary(this);
	}
};

ArithmeticBinaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitArithmeticBinary(this);
	}
};

ArithmeticBinaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitArithmeticBinary(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArithmeticUnaryContext(parser, ctx) {
	ValueExpressionContext.call(this, parser);
    this.operator = null; // Token;
    ValueExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArithmeticUnaryContext.prototype = Object.create(ValueExpressionContext.prototype);
ArithmeticUnaryContext.prototype.constructor = ArithmeticUnaryContext;

FlinkSqlParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

ArithmeticUnaryContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};

ArithmeticUnaryContext.prototype.HYPNEN_SIGN = function() {
    return this.getToken(FlinkSqlParser.HYPNEN_SIGN, 0);
};

ArithmeticUnaryContext.prototype.ADD_SIGN = function() {
    return this.getToken(FlinkSqlParser.ADD_SIGN, 0);
};

ArithmeticUnaryContext.prototype.BIT_NOT_OP = function() {
    return this.getToken(FlinkSqlParser.BIT_NOT_OP, 0);
};
ArithmeticUnaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterArithmeticUnary(this);
	}
};

ArithmeticUnaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitArithmeticUnary(this);
	}
};

ArithmeticUnaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitArithmeticUnary(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParser.prototype.valueExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ValueExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 216;
    this.enterRecursionRule(localctx, 216, FlinkSqlParser.RULE_valueExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1522;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ValueExpressionDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1519;
            this.primaryExpression(0);
            break;

        case 2:
            localctx = new ArithmeticUnaryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1520;
            localctx.operator = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (FlinkSqlParser.BIT_NOT_OP - 294)) | (1 << (FlinkSqlParser.HYPNEN_SIGN - 294)) | (1 << (FlinkSqlParser.ADD_SIGN - 294)))) !== 0))) {
                localctx.operator = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1521;
            this.valueExpression(7);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1545;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,182,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1543;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                    this.state = 1524;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1525;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===FlinkSqlParser.DIV || ((((_la - 310)) & ~0x1f) == 0 && ((1 << (_la - 310)) & ((1 << (FlinkSqlParser.ASTERISK_SIGN - 310)) | (1 << (FlinkSqlParser.PENCENT_SIGN - 310)) | (1 << (FlinkSqlParser.SLASH_SIGN - 310)))) !== 0))) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1526;
                    localctx.right = this.valueExpression(7);
                    break;

                case 2:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                    this.state = 1527;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1528;
                    localctx.operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 312)) & ~0x1f) == 0 && ((1 << (_la - 312)) & ((1 << (FlinkSqlParser.HYPNEN_SIGN - 312)) | (1 << (FlinkSqlParser.ADD_SIGN - 312)) | (1 << (FlinkSqlParser.DOUBLE_VERTICAL_SIGN - 312)))) !== 0))) {
                        localctx.operator = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1529;
                    localctx.right = this.valueExpression(6);
                    break;

                case 3:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                    this.state = 1530;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1531;
                    localctx.operator = this.match(FlinkSqlParser.BIT_AND_OP);
                    this.state = 1532;
                    localctx.right = this.valueExpression(5);
                    break;

                case 4:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                    this.state = 1533;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1534;
                    localctx.operator = this.match(FlinkSqlParser.BIT_XOR_OP);
                    this.state = 1535;
                    localctx.right = this.valueExpression(4);
                    break;

                case 5:
                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                    this.state = 1536;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1537;
                    localctx.operator = this.match(FlinkSqlParser.BIT_OR_OP);
                    this.state = 1538;
                    localctx.right = this.valueExpression(3);
                    break;

                case 6:
                    localctx = new ComparisonContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_valueExpression);
                    this.state = 1539;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1540;
                    this.comparisonOperator();
                    this.state = 1541;
                    localctx.right = this.valueExpression(2);
                    break;

                } 
            }
            this.state = 1547;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,182,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;


 
PrimaryExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function DereferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DereferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
DereferenceContext.prototype.constructor = DereferenceContext;

FlinkSqlParser.DereferenceContext = DereferenceContext;

DereferenceContext.prototype.dereferenceDefinition = function() {
    return this.getTypedRuleContext(DereferenceDefinitionContext,0);
};
DereferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDereference(this);
	}
};

DereferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDereference(this);
	}
};

DereferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDereference(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SimpleCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // ExpressionContext;
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SimpleCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SimpleCaseContext.prototype.constructor = SimpleCaseContext;

FlinkSqlParser.SimpleCaseContext = SimpleCaseContext;

SimpleCaseContext.prototype.CASE = function() {
    return this.getToken(FlinkSqlParser.CASE, 0);
};

SimpleCaseContext.prototype.END = function() {
    return this.getToken(FlinkSqlParser.END, 0);
};

SimpleCaseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SimpleCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SimpleCaseContext.prototype.ELSE = function() {
    return this.getToken(FlinkSqlParser.ELSE, 0);
};
SimpleCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSimpleCase(this);
	}
};

SimpleCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSimpleCase(this);
	}
};

SimpleCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSimpleCase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnReferenceContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnReferenceContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ColumnReferenceContext.prototype.constructor = ColumnReferenceContext;

FlinkSqlParser.ColumnReferenceContext = ColumnReferenceContext;

ColumnReferenceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ColumnReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnReference(this);
	}
};

ColumnReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnReference(this);
	}
};

ColumnReferenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnReference(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
LastContext.prototype.constructor = LastContext;

FlinkSqlParser.LastContext = LastContext;

LastContext.prototype.LAST = function() {
    return this.getToken(FlinkSqlParser.LAST, 0);
};

LastContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

LastContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

LastContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

LastContext.prototype.IGNORE = function() {
    return this.getToken(FlinkSqlParser.IGNORE, 0);
};

LastContext.prototype.NULLS = function() {
    return this.getToken(FlinkSqlParser.NULLS, 0);
};
LastContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLast(this);
	}
};

LastContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLast(this);
	}
};

LastContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLast(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function StarContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StarContext.prototype = Object.create(PrimaryExpressionContext.prototype);
StarContext.prototype.constructor = StarContext;

FlinkSqlParser.StarContext = StarContext;

StarContext.prototype.ASTERISK_SIGN = function() {
    return this.getToken(FlinkSqlParser.ASTERISK_SIGN, 0);
};

StarContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

StarContext.prototype.DOT = function() {
    return this.getToken(FlinkSqlParser.DOT, 0);
};
StarContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterStar(this);
	}
};

StarContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitStar(this);
	}
};

StarContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitStar(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubscriptContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.value = null; // PrimaryExpressionContext;
    this.index = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubscriptContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

FlinkSqlParser.SubscriptContext = SubscriptContext;

SubscriptContext.prototype.LS_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LS_BRACKET, 0);
};

SubscriptContext.prototype.RS_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RS_BRACKET, 0);
};

SubscriptContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

SubscriptContext.prototype.valueExpression = function() {
    return this.getTypedRuleContext(ValueExpressionContext,0);
};
SubscriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSubscript(this);
	}
};

SubscriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSubscript(this);
	}
};

SubscriptContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSubscript(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SubqueryExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SubqueryExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SubqueryExpressionContext.prototype.constructor = SubqueryExpressionContext;

FlinkSqlParser.SubqueryExpressionContext = SubqueryExpressionContext;

SubqueryExpressionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

SubqueryExpressionContext.prototype.queryStatement = function() {
    return this.getTypedRuleContext(QueryStatementContext,0);
};

SubqueryExpressionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};
SubqueryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSubqueryExpression(this);
	}
};

SubqueryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSubqueryExpression(this);
	}
};

SubqueryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSubqueryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CastContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastContext.prototype = Object.create(PrimaryExpressionContext.prototype);
CastContext.prototype.constructor = CastContext;

FlinkSqlParser.CastContext = CastContext;

CastContext.prototype.CAST = function() {
    return this.getToken(FlinkSqlParser.CAST, 0);
};

CastContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

CastContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CastContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

CastContext.prototype.columnType = function() {
    return this.getTypedRuleContext(ColumnTypeContext,0);
};

CastContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};
CastContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCast(this);
	}
};

CastContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCast(this);
	}
};

CastContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCast(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConstantDefaultContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstantDefaultContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ConstantDefaultContext.prototype.constructor = ConstantDefaultContext;

FlinkSqlParser.ConstantDefaultContext = ConstantDefaultContext;

ConstantDefaultContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};
ConstantDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterConstantDefault(this);
	}
};

ConstantDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitConstantDefault(this);
	}
};

ConstantDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitConstantDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ParenthesizedExpressionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

FlinkSqlParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

ParenthesizedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParenthesizedExpressionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};
ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitParenthesizedExpression(this);
	}
};

ParenthesizedExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitParenthesizedExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionCallContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionCallContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

FlinkSqlParser.FunctionCallContext = FunctionCallContext;

FunctionCallContext.prototype.functionName = function() {
    return this.getTypedRuleContext(FunctionNameContext,0);
};

FunctionCallContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

FunctionCallContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

FunctionCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FunctionCallContext.prototype.setQuantifier = function() {
    return this.getTypedRuleContext(SetQuantifierContext,0);
};

FunctionCallContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};

FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitFunctionCall(this);
	}
};

FunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitFunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SearchedCaseContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.elseExpression = null; // ExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SearchedCaseContext.prototype = Object.create(PrimaryExpressionContext.prototype);
SearchedCaseContext.prototype.constructor = SearchedCaseContext;

FlinkSqlParser.SearchedCaseContext = SearchedCaseContext;

SearchedCaseContext.prototype.CASE = function() {
    return this.getToken(FlinkSqlParser.CASE, 0);
};

SearchedCaseContext.prototype.END = function() {
    return this.getToken(FlinkSqlParser.END, 0);
};

SearchedCaseContext.prototype.whenClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WhenClauseContext);
    } else {
        return this.getTypedRuleContext(WhenClauseContext,i);
    }
};

SearchedCaseContext.prototype.ELSE = function() {
    return this.getToken(FlinkSqlParser.ELSE, 0);
};

SearchedCaseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SearchedCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSearchedCase(this);
	}
};

SearchedCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSearchedCase(this);
	}
};

SearchedCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSearchedCase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PositionContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    this.substr = null; // ValueExpressionContext;
    this.str = null; // ValueExpressionContext;
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PositionContext.prototype = Object.create(PrimaryExpressionContext.prototype);
PositionContext.prototype.constructor = PositionContext;

FlinkSqlParser.PositionContext = PositionContext;

PositionContext.prototype.POSITION = function() {
    return this.getToken(FlinkSqlParser.POSITION, 0);
};

PositionContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

PositionContext.prototype.IN = function() {
    return this.getToken(FlinkSqlParser.IN, 0);
};

PositionContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

PositionContext.prototype.valueExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueExpressionContext);
    } else {
        return this.getTypedRuleContext(ValueExpressionContext,i);
    }
};
PositionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPosition(this);
	}
};

PositionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPosition(this);
	}
};

PositionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPosition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FirstContext(parser, ctx) {
	PrimaryExpressionContext.call(this, parser);
    PrimaryExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FirstContext.prototype = Object.create(PrimaryExpressionContext.prototype);
FirstContext.prototype.constructor = FirstContext;

FlinkSqlParser.FirstContext = FirstContext;

FirstContext.prototype.FIRST = function() {
    return this.getToken(FlinkSqlParser.FIRST, 0);
};

FirstContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

FirstContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FirstContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

FirstContext.prototype.IGNORE = function() {
    return this.getToken(FlinkSqlParser.IGNORE, 0);
};

FirstContext.prototype.NULLS = function() {
    return this.getToken(FlinkSqlParser.NULLS, 0);
};
FirstContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterFirst(this);
	}
};

FirstContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitFirst(this);
	}
};

FirstContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitFirst(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParser.prototype.primaryExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 218;
    this.enterRecursionRule(localctx, 218, FlinkSqlParser.RULE_primaryExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1639;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SearchedCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1549;
            this.match(FlinkSqlParser.CASE);
            this.state = 1551; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1550;
                this.whenClause();
                this.state = 1553; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===FlinkSqlParser.WHEN);
            this.state = 1557;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.ELSE) {
                this.state = 1555;
                this.match(FlinkSqlParser.ELSE);
                this.state = 1556;
                localctx.elseExpression = this.expression();
            }

            this.state = 1559;
            this.match(FlinkSqlParser.END);
            break;

        case 2:
            localctx = new SimpleCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1561;
            this.match(FlinkSqlParser.CASE);
            this.state = 1562;
            localctx.value = this.expression();
            this.state = 1564; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1563;
                this.whenClause();
                this.state = 1566; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===FlinkSqlParser.WHEN);
            this.state = 1570;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.ELSE) {
                this.state = 1568;
                this.match(FlinkSqlParser.ELSE);
                this.state = 1569;
                localctx.elseExpression = this.expression();
            }

            this.state = 1572;
            this.match(FlinkSqlParser.END);
            break;

        case 3:
            localctx = new CastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1574;
            this.match(FlinkSqlParser.CAST);
            this.state = 1575;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1576;
            this.expression();
            this.state = 1577;
            this.match(FlinkSqlParser.AS);
            this.state = 1578;
            this.columnType();
            this.state = 1579;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 4:
            localctx = new FirstContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1581;
            this.match(FlinkSqlParser.FIRST);
            this.state = 1582;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1583;
            this.expression();
            this.state = 1586;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.IGNORE) {
                this.state = 1584;
                this.match(FlinkSqlParser.IGNORE);
                this.state = 1585;
                this.match(FlinkSqlParser.NULLS);
            }

            this.state = 1588;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 5:
            localctx = new LastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1590;
            this.match(FlinkSqlParser.LAST);
            this.state = 1591;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1592;
            this.expression();
            this.state = 1595;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.IGNORE) {
                this.state = 1593;
                this.match(FlinkSqlParser.IGNORE);
                this.state = 1594;
                this.match(FlinkSqlParser.NULLS);
            }

            this.state = 1597;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 6:
            localctx = new PositionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1599;
            this.match(FlinkSqlParser.POSITION);
            this.state = 1600;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1601;
            localctx.substr = this.valueExpression(0);
            this.state = 1602;
            this.match(FlinkSqlParser.IN);
            this.state = 1603;
            localctx.str = this.valueExpression(0);
            this.state = 1604;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 7:
            localctx = new ConstantDefaultContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1606;
            this.constant();
            break;

        case 8:
            localctx = new StarContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1607;
            this.match(FlinkSqlParser.ASTERISK_SIGN);
            break;

        case 9:
            localctx = new StarContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1608;
            this.uid();
            this.state = 1609;
            this.match(FlinkSqlParser.DOT);
            this.state = 1610;
            this.match(FlinkSqlParser.ASTERISK_SIGN);
            break;

        case 10:
            localctx = new SubqueryExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1612;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1613;
            this.queryStatement(0);
            this.state = 1614;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 11:
            localctx = new FunctionCallContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1616;
            this.functionName();
            this.state = 1617;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1629;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 4)) & ~0x1f) == 0 && ((1 << (_la - 4)) & ((1 << (FlinkSqlParser.SELECT - 4)) | (1 << (FlinkSqlParser.FROM - 4)) | (1 << (FlinkSqlParser.ADD - 4)) | (1 << (FlinkSqlParser.AS - 4)) | (1 << (FlinkSqlParser.ALL - 4)) | (1 << (FlinkSqlParser.ANY - 4)) | (1 << (FlinkSqlParser.DISTINCT - 4)) | (1 << (FlinkSqlParser.WHERE - 4)) | (1 << (FlinkSqlParser.GROUP - 4)) | (1 << (FlinkSqlParser.BY - 4)) | (1 << (FlinkSqlParser.GROUPING - 4)) | (1 << (FlinkSqlParser.SETS - 4)) | (1 << (FlinkSqlParser.CUBE - 4)) | (1 << (FlinkSqlParser.ROLLUP - 4)) | (1 << (FlinkSqlParser.ORDER - 4)) | (1 << (FlinkSqlParser.HAVING - 4)) | (1 << (FlinkSqlParser.LIMIT - 4)) | (1 << (FlinkSqlParser.AT - 4)) | (1 << (FlinkSqlParser.OR - 4)) | (1 << (FlinkSqlParser.AND - 4)) | (1 << (FlinkSqlParser.IN - 4)) | (1 << (FlinkSqlParser.NOT - 4)) | (1 << (FlinkSqlParser.NO - 4)) | (1 << (FlinkSqlParser.EXISTS - 4)) | (1 << (FlinkSqlParser.BETWEEN - 4)) | (1 << (FlinkSqlParser.LIKE - 4)) | (1 << (FlinkSqlParser.RLIKE - 4)) | (1 << (FlinkSqlParser.IS - 4)) | (1 << (FlinkSqlParser.TRUE - 4)) | (1 << (FlinkSqlParser.FALSE - 4)) | (1 << (FlinkSqlParser.NULLS - 4)) | (1 << (FlinkSqlParser.ASC - 4)))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (FlinkSqlParser.DESC - 36)) | (1 << (FlinkSqlParser.FOR - 36)) | (1 << (FlinkSqlParser.INTERVAL - 36)) | (1 << (FlinkSqlParser.CASE - 36)) | (1 << (FlinkSqlParser.WHEN - 36)) | (1 << (FlinkSqlParser.THEN - 36)) | (1 << (FlinkSqlParser.ELSE - 36)) | (1 << (FlinkSqlParser.END - 36)) | (1 << (FlinkSqlParser.JOIN - 36)) | (1 << (FlinkSqlParser.CROSS - 36)) | (1 << (FlinkSqlParser.OUTER - 36)) | (1 << (FlinkSqlParser.INNER - 36)) | (1 << (FlinkSqlParser.LEFT - 36)) | (1 << (FlinkSqlParser.SEMI - 36)) | (1 << (FlinkSqlParser.RIGHT - 36)) | (1 << (FlinkSqlParser.FULL - 36)) | (1 << (FlinkSqlParser.USER - 36)) | (1 << (FlinkSqlParser.NATURAL - 36)) | (1 << (FlinkSqlParser.ON - 36)) | (1 << (FlinkSqlParser.PIVOT - 36)) | (1 << (FlinkSqlParser.LATERAL - 36)) | (1 << (FlinkSqlParser.WINDOW - 36)) | (1 << (FlinkSqlParser.OVER - 36)) | (1 << (FlinkSqlParser.PARTITION - 36)) | (1 << (FlinkSqlParser.RANGE - 36)) | (1 << (FlinkSqlParser.ROWS - 36)) | (1 << (FlinkSqlParser.UNBOUNDED - 36)) | (1 << (FlinkSqlParser.PRECEDING - 36)) | (1 << (FlinkSqlParser.FOLLOWING - 36)) | (1 << (FlinkSqlParser.CURRENT - 36)) | (1 << (FlinkSqlParser.FIRST - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (FlinkSqlParser.AFTER - 68)) | (1 << (FlinkSqlParser.LAST - 68)) | (1 << (FlinkSqlParser.WITH - 68)) | (1 << (FlinkSqlParser.VALUES - 68)) | (1 << (FlinkSqlParser.CREATE - 68)) | (1 << (FlinkSqlParser.TABLE - 68)) | (1 << (FlinkSqlParser.DIRECTORY - 68)) | (1 << (FlinkSqlParser.VIEW - 68)) | (1 << (FlinkSqlParser.REPLACE - 68)) | (1 << (FlinkSqlParser.INSERT - 68)) | (1 << (FlinkSqlParser.DELETE - 68)) | (1 << (FlinkSqlParser.INTO - 68)) | (1 << (FlinkSqlParser.DESCRIBE - 68)) | (1 << (FlinkSqlParser.EXPLAIN - 68)) | (1 << (FlinkSqlParser.FORMAT - 68)) | (1 << (FlinkSqlParser.LOGICAL - 68)) | (1 << (FlinkSqlParser.CODEGEN - 68)) | (1 << (FlinkSqlParser.COST - 68)) | (1 << (FlinkSqlParser.CAST - 68)) | (1 << (FlinkSqlParser.SHOW - 68)) | (1 << (FlinkSqlParser.TABLES - 68)) | (1 << (FlinkSqlParser.COLUMNS - 68)) | (1 << (FlinkSqlParser.COLUMN - 68)) | (1 << (FlinkSqlParser.USE - 68)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (FlinkSqlParser.PARTITIONS - 101)) | (1 << (FlinkSqlParser.FUNCTIONS - 101)) | (1 << (FlinkSqlParser.DROP - 101)) | (1 << (FlinkSqlParser.UNION - 101)) | (1 << (FlinkSqlParser.EXCEPT - 101)) | (1 << (FlinkSqlParser.SETMINUS - 101)) | (1 << (FlinkSqlParser.INTERSECT - 101)) | (1 << (FlinkSqlParser.TO - 101)) | (1 << (FlinkSqlParser.TABLESAMPLE - 101)) | (1 << (FlinkSqlParser.STRATIFY - 101)) | (1 << (FlinkSqlParser.ALTER - 101)) | (1 << (FlinkSqlParser.RENAME - 101)) | (1 << (FlinkSqlParser.STRUCT - 101)) | (1 << (FlinkSqlParser.COMMENT - 101)) | (1 << (FlinkSqlParser.SET - 101)) | (1 << (FlinkSqlParser.RESET - 101)) | (1 << (FlinkSqlParser.DATA - 101)) | (1 << (FlinkSqlParser.START - 101)) | (1 << (FlinkSqlParser.TRANSACTION - 101)) | (1 << (FlinkSqlParser.COMMIT - 101)) | (1 << (FlinkSqlParser.ROLLBACK - 101)) | (1 << (FlinkSqlParser.MACRO - 101)) | (1 << (FlinkSqlParser.IGNORE - 101)) | (1 << (FlinkSqlParser.BOTH - 101)) | (1 << (FlinkSqlParser.LEADING - 101)) | (1 << (FlinkSqlParser.TRAILING - 101)) | (1 << (FlinkSqlParser.IF - 101)) | (1 << (FlinkSqlParser.POSITION - 101)) | (1 << (FlinkSqlParser.EXTRACT - 101)) | (1 << (FlinkSqlParser.MINUS - 101)) | (1 << (FlinkSqlParser.DIV - 101)) | (1 << (FlinkSqlParser.PERCENTLIT - 101)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (FlinkSqlParser.BUCKET - 133)) | (1 << (FlinkSqlParser.OUT - 133)) | (1 << (FlinkSqlParser.OF - 133)) | (1 << (FlinkSqlParser.SORT - 133)) | (1 << (FlinkSqlParser.CLUSTER - 133)) | (1 << (FlinkSqlParser.DISTRIBUTE - 133)) | (1 << (FlinkSqlParser.OVERWRITE - 133)) | (1 << (FlinkSqlParser.TRANSFORM - 133)) | (1 << (FlinkSqlParser.REDUCE - 133)) | (1 << (FlinkSqlParser.USING - 133)) | (1 << (FlinkSqlParser.SERDE - 133)) | (1 << (FlinkSqlParser.SERDEPROPERTIES - 133)) | (1 << (FlinkSqlParser.RECORDREADER - 133)) | (1 << (FlinkSqlParser.RECORDWRITER - 133)) | (1 << (FlinkSqlParser.DELIMITED - 133)) | (1 << (FlinkSqlParser.FIELDS - 133)) | (1 << (FlinkSqlParser.TERMINATED - 133)) | (1 << (FlinkSqlParser.COLLECTION - 133)) | (1 << (FlinkSqlParser.ITEMS - 133)) | (1 << (FlinkSqlParser.KEYS - 133)) | (1 << (FlinkSqlParser.ESCAPED - 133)) | (1 << (FlinkSqlParser.LINES - 133)) | (1 << (FlinkSqlParser.SEPARATED - 133)) | (1 << (FlinkSqlParser.FUNCTION - 133)) | (1 << (FlinkSqlParser.EXTENDED - 133)) | (1 << (FlinkSqlParser.REFRESH - 133)) | (1 << (FlinkSqlParser.CLEAR - 133)) | (1 << (FlinkSqlParser.CACHE - 133)) | (1 << (FlinkSqlParser.UNCACHE - 133)) | (1 << (FlinkSqlParser.LAZY - 133)) | (1 << (FlinkSqlParser.FORMATTED - 133)) | (1 << (FlinkSqlParser.GLOBAL - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (FlinkSqlParser.TEMPORARY - 165)) | (1 << (FlinkSqlParser.OPTIONS - 165)) | (1 << (FlinkSqlParser.UNSET - 165)) | (1 << (FlinkSqlParser.TBLPROPERTIES - 165)) | (1 << (FlinkSqlParser.DBPROPERTIES - 165)) | (1 << (FlinkSqlParser.BUCKETS - 165)) | (1 << (FlinkSqlParser.SKEWED - 165)) | (1 << (FlinkSqlParser.STORED - 165)) | (1 << (FlinkSqlParser.DIRECTORIES - 165)) | (1 << (FlinkSqlParser.LOCATION - 165)) | (1 << (FlinkSqlParser.EXCHANGE - 165)) | (1 << (FlinkSqlParser.ARCHIVE - 165)) | (1 << (FlinkSqlParser.UNARCHIVE - 165)) | (1 << (FlinkSqlParser.FILEFORMAT - 165)) | (1 << (FlinkSqlParser.TOUCH - 165)) | (1 << (FlinkSqlParser.COMPACT - 165)) | (1 << (FlinkSqlParser.CONCATENATE - 165)) | (1 << (FlinkSqlParser.CHANGE - 165)) | (1 << (FlinkSqlParser.CASCADE - 165)) | (1 << (FlinkSqlParser.CONSTRAINT - 165)) | (1 << (FlinkSqlParser.RESTRICT - 165)) | (1 << (FlinkSqlParser.CLUSTERED - 165)) | (1 << (FlinkSqlParser.SORTED - 165)) | (1 << (FlinkSqlParser.PURGE - 165)) | (1 << (FlinkSqlParser.INPUTFORMAT - 165)) | (1 << (FlinkSqlParser.OUTPUTFORMAT - 165)) | (1 << (FlinkSqlParser.DATABASE - 165)) | (1 << (FlinkSqlParser.DATABASES - 165)) | (1 << (FlinkSqlParser.DFS - 165)) | (1 << (FlinkSqlParser.TRUNCATE - 165)) | (1 << (FlinkSqlParser.ANALYZE - 165)) | (1 << (FlinkSqlParser.COMPUTE - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (FlinkSqlParser.LIST - 197)) | (1 << (FlinkSqlParser.STATISTICS - 197)) | (1 << (FlinkSqlParser.PARTITIONED - 197)) | (1 << (FlinkSqlParser.EXTERNAL - 197)) | (1 << (FlinkSqlParser.DEFINED - 197)) | (1 << (FlinkSqlParser.REVOKE - 197)) | (1 << (FlinkSqlParser.GRANT - 197)) | (1 << (FlinkSqlParser.LOCK - 197)) | (1 << (FlinkSqlParser.UNLOCK - 197)) | (1 << (FlinkSqlParser.MSCK - 197)) | (1 << (FlinkSqlParser.REPAIR - 197)) | (1 << (FlinkSqlParser.RECOVER - 197)) | (1 << (FlinkSqlParser.EXPORT - 197)) | (1 << (FlinkSqlParser.IMPORT - 197)) | (1 << (FlinkSqlParser.LOAD - 197)) | (1 << (FlinkSqlParser.ROLE - 197)) | (1 << (FlinkSqlParser.ROLES - 197)) | (1 << (FlinkSqlParser.COMPACTIONS - 197)) | (1 << (FlinkSqlParser.PRINCIPALS - 197)) | (1 << (FlinkSqlParser.TRANSACTIONS - 197)) | (1 << (FlinkSqlParser.INDEX - 197)) | (1 << (FlinkSqlParser.INDEXES - 197)) | (1 << (FlinkSqlParser.LOCKS - 197)) | (1 << (FlinkSqlParser.OPTION - 197)) | (1 << (FlinkSqlParser.ANTI - 197)) | (1 << (FlinkSqlParser.LOCAL - 197)) | (1 << (FlinkSqlParser.INPATH - 197)) | (1 << (FlinkSqlParser.WATERMARK - 197)) | (1 << (FlinkSqlParser.UNNEST - 197)) | (1 << (FlinkSqlParser.MATCH - 197)) | (1 << (FlinkSqlParser.NEXT - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (FlinkSqlParser.WITHIN - 229)) | (1 << (FlinkSqlParser.WS - 229)) | (1 << (FlinkSqlParser.SYSTEM - 229)) | (1 << (FlinkSqlParser.INCLUDING - 229)) | (1 << (FlinkSqlParser.EXCLUDING - 229)) | (1 << (FlinkSqlParser.CONSTRAINTS - 229)) | (1 << (FlinkSqlParser.GENERATED - 229)) | (1 << (FlinkSqlParser.CATALOG - 229)) | (1 << (FlinkSqlParser.LANGUAGE - 229)) | (1 << (FlinkSqlParser.CATALOGS - 229)) | (1 << (FlinkSqlParser.VIEWS - 229)) | (1 << (FlinkSqlParser.PRIMARY - 229)) | (1 << (FlinkSqlParser.KEY - 229)) | (1 << (FlinkSqlParser.PERIOD - 229)) | (1 << (FlinkSqlParser.SYSTEM_TIME - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (FlinkSqlParser.STRING - 262)) | (1 << (FlinkSqlParser.ARRAY - 262)) | (1 << (FlinkSqlParser.MAP - 262)) | (1 << (FlinkSqlParser.CHAR - 262)) | (1 << (FlinkSqlParser.VARCHAR - 262)) | (1 << (FlinkSqlParser.BINARY - 262)) | (1 << (FlinkSqlParser.VARBINARY - 262)) | (1 << (FlinkSqlParser.BYTES - 262)) | (1 << (FlinkSqlParser.DECIMAL - 262)) | (1 << (FlinkSqlParser.TINYINT - 262)) | (1 << (FlinkSqlParser.SMALLINT - 262)) | (1 << (FlinkSqlParser.INT - 262)) | (1 << (FlinkSqlParser.BIGINT - 262)) | (1 << (FlinkSqlParser.FLOAT - 262)) | (1 << (FlinkSqlParser.DOUBLE - 262)) | (1 << (FlinkSqlParser.DATE - 262)) | (1 << (FlinkSqlParser.TIME - 262)) | (1 << (FlinkSqlParser.TIMESTAMP - 262)) | (1 << (FlinkSqlParser.MULTISET - 262)) | (1 << (FlinkSqlParser.BOOLEAN - 262)) | (1 << (FlinkSqlParser.RAW - 262)) | (1 << (FlinkSqlParser.ROW - 262)) | (1 << (FlinkSqlParser.NULL - 262)) | (1 << (FlinkSqlParser.DATETIME - 262)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (FlinkSqlParser.BIT_NOT_OP - 294)) | (1 << (FlinkSqlParser.LR_BRACKET - 294)) | (1 << (FlinkSqlParser.ASTERISK_SIGN - 294)) | (1 << (FlinkSqlParser.HYPNEN_SIGN - 294)) | (1 << (FlinkSqlParser.ADD_SIGN - 294)) | (1 << (FlinkSqlParser.STRING_LITERAL - 294)) | (1 << (FlinkSqlParser.DIG_LITERAL - 294)) | (1 << (FlinkSqlParser.REAL_LITERAL - 294)) | (1 << (FlinkSqlParser.BIT_STRING - 294)) | (1 << (FlinkSqlParser.ID_LITERAL - 294)))) !== 0)) {
                this.state = 1619;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
                if(la_===1) {
                    this.state = 1618;
                    this.setQuantifier();

                }
                this.state = 1621;
                this.expression();
                this.state = 1626;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===FlinkSqlParser.COMMA) {
                    this.state = 1622;
                    this.match(FlinkSqlParser.COMMA);
                    this.state = 1623;
                    this.expression();
                    this.state = 1628;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1631;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        case 12:
            localctx = new ColumnReferenceContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1633;
            this.identifier();
            break;

        case 13:
            localctx = new DereferenceContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1634;
            this.dereferenceDefinition();
            break;

        case 14:
            localctx = new ParenthesizedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1635;
            this.match(FlinkSqlParser.LR_BRACKET);
            this.state = 1636;
            this.expression();
            this.state = 1637;
            this.match(FlinkSqlParser.RR_BRACKET);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1648;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,193,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                localctx.value = _prevctx;
                this.pushNewRecursionContext(localctx, _startState, FlinkSqlParser.RULE_primaryExpression);
                this.state = 1641;
                if (!( this.precpred(this._ctx, 4))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                }
                this.state = 1642;
                this.match(FlinkSqlParser.LS_BRACKET);
                this.state = 1643;
                localctx.index = this.valueExpression(0);
                this.state = 1644;
                this.match(FlinkSqlParser.RS_BRACKET); 
            }
            this.state = 1650;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,193,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function FunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_functionName;
    return this;
}

FunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionNameContext.prototype.constructor = FunctionNameContext;

FunctionNameContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

FunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterFunctionName(this);
	}
};

FunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitFunctionName(this);
	}
};

FunctionNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitFunctionName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.FunctionNameContext = FunctionNameContext;

FlinkSqlParser.prototype.functionName = function() {

    var localctx = new FunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, FlinkSqlParser.RULE_functionName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1651;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DereferenceDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_dereferenceDefinition;
    return this;
}

DereferenceDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DereferenceDefinitionContext.prototype.constructor = DereferenceDefinitionContext;

DereferenceDefinitionContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

DereferenceDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDereferenceDefinition(this);
	}
};

DereferenceDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDereferenceDefinition(this);
	}
};

DereferenceDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDereferenceDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DereferenceDefinitionContext = DereferenceDefinitionContext;

FlinkSqlParser.prototype.dereferenceDefinition = function() {

    var localctx = new DereferenceDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, FlinkSqlParser.RULE_dereferenceDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1653;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CorrelationNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_correlationName;
    return this;
}

CorrelationNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CorrelationNameContext.prototype.constructor = CorrelationNameContext;

CorrelationNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CorrelationNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterCorrelationName(this);
	}
};

CorrelationNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitCorrelationName(this);
	}
};

CorrelationNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitCorrelationName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.CorrelationNameContext = CorrelationNameContext;

FlinkSqlParser.prototype.correlationName = function() {

    var localctx = new CorrelationNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, FlinkSqlParser.RULE_correlationName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1655;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

QualifiedNameContext.prototype.dereferenceDefinition = function() {
    return this.getTypedRuleContext(DereferenceDefinitionContext,0);
};

QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitQualifiedName(this);
	}
};

QualifiedNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitQualifiedName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.QualifiedNameContext = QualifiedNameContext;

FlinkSqlParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, FlinkSqlParser.RULE_qualifiedName);
    try {
        this.state = 1659;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1657;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1658;
            this.dereferenceDefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_interval;
    return this;
}

IntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalContext.prototype.constructor = IntervalContext;

IntervalContext.prototype.INTERVAL = function() {
    return this.getToken(FlinkSqlParser.INTERVAL, 0);
};

IntervalContext.prototype.errorCapturingMultiUnitsInterval = function() {
    return this.getTypedRuleContext(ErrorCapturingMultiUnitsIntervalContext,0);
};

IntervalContext.prototype.errorCapturingUnitToUnitInterval = function() {
    return this.getTypedRuleContext(ErrorCapturingUnitToUnitIntervalContext,0);
};

IntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterInterval(this);
	}
};

IntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitInterval(this);
	}
};

IntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.IntervalContext = IntervalContext;

FlinkSqlParser.prototype.interval = function() {

    var localctx = new IntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, FlinkSqlParser.RULE_interval);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1661;
        this.match(FlinkSqlParser.INTERVAL);
        this.state = 1664;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        if(la_===1) {
            this.state = 1662;
            this.errorCapturingMultiUnitsInterval();

        } else if(la_===2) {
            this.state = 1663;
            this.errorCapturingUnitToUnitInterval();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErrorCapturingMultiUnitsIntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_errorCapturingMultiUnitsInterval;
    return this;
}

ErrorCapturingMultiUnitsIntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorCapturingMultiUnitsIntervalContext.prototype.constructor = ErrorCapturingMultiUnitsIntervalContext;

ErrorCapturingMultiUnitsIntervalContext.prototype.multiUnitsInterval = function() {
    return this.getTypedRuleContext(MultiUnitsIntervalContext,0);
};

ErrorCapturingMultiUnitsIntervalContext.prototype.unitToUnitInterval = function() {
    return this.getTypedRuleContext(UnitToUnitIntervalContext,0);
};

ErrorCapturingMultiUnitsIntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterErrorCapturingMultiUnitsInterval(this);
	}
};

ErrorCapturingMultiUnitsIntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitErrorCapturingMultiUnitsInterval(this);
	}
};

ErrorCapturingMultiUnitsIntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitErrorCapturingMultiUnitsInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ErrorCapturingMultiUnitsIntervalContext = ErrorCapturingMultiUnitsIntervalContext;

FlinkSqlParser.prototype.errorCapturingMultiUnitsInterval = function() {

    var localctx = new ErrorCapturingMultiUnitsIntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, FlinkSqlParser.RULE_errorCapturingMultiUnitsInterval);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1666;
        this.multiUnitsInterval();
        this.state = 1668;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
        if(la_===1) {
            this.state = 1667;
            this.unitToUnitInterval();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MultiUnitsIntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_multiUnitsInterval;
    return this;
}

MultiUnitsIntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiUnitsIntervalContext.prototype.constructor = MultiUnitsIntervalContext;

MultiUnitsIntervalContext.prototype.intervalValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntervalValueContext);
    } else {
        return this.getTypedRuleContext(IntervalValueContext,i);
    }
};

MultiUnitsIntervalContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

MultiUnitsIntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterMultiUnitsInterval(this);
	}
};

MultiUnitsIntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitMultiUnitsInterval(this);
	}
};

MultiUnitsIntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitMultiUnitsInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.MultiUnitsIntervalContext = MultiUnitsIntervalContext;

FlinkSqlParser.prototype.multiUnitsInterval = function() {

    var localctx = new MultiUnitsIntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, FlinkSqlParser.RULE_multiUnitsInterval);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1673; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1670;
        		this.intervalValue();
        		this.state = 1671;
        		this.identifier();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1675; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,197, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErrorCapturingUnitToUnitIntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_errorCapturingUnitToUnitInterval;
    this.body = null; // UnitToUnitIntervalContext
    this.error1 = null; // MultiUnitsIntervalContext
    this.error2 = null; // UnitToUnitIntervalContext
    return this;
}

ErrorCapturingUnitToUnitIntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorCapturingUnitToUnitIntervalContext.prototype.constructor = ErrorCapturingUnitToUnitIntervalContext;

ErrorCapturingUnitToUnitIntervalContext.prototype.unitToUnitInterval = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnitToUnitIntervalContext);
    } else {
        return this.getTypedRuleContext(UnitToUnitIntervalContext,i);
    }
};

ErrorCapturingUnitToUnitIntervalContext.prototype.multiUnitsInterval = function() {
    return this.getTypedRuleContext(MultiUnitsIntervalContext,0);
};

ErrorCapturingUnitToUnitIntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterErrorCapturingUnitToUnitInterval(this);
	}
};

ErrorCapturingUnitToUnitIntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitErrorCapturingUnitToUnitInterval(this);
	}
};

ErrorCapturingUnitToUnitIntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitErrorCapturingUnitToUnitInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ErrorCapturingUnitToUnitIntervalContext = ErrorCapturingUnitToUnitIntervalContext;

FlinkSqlParser.prototype.errorCapturingUnitToUnitInterval = function() {

    var localctx = new ErrorCapturingUnitToUnitIntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, FlinkSqlParser.RULE_errorCapturingUnitToUnitInterval);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1677;
        localctx.body = this.unitToUnitInterval();
        this.state = 1680;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
        if(la_===1) {
            this.state = 1678;
            localctx.error1 = this.multiUnitsInterval();

        } else if(la_===2) {
            this.state = 1679;
            localctx.error2 = this.unitToUnitInterval();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnitToUnitIntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_unitToUnitInterval;
    this.value = null; // IntervalValueContext
    this.from = null; // IdentifierContext
    this.to = null; // IdentifierContext
    return this;
}

UnitToUnitIntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnitToUnitIntervalContext.prototype.constructor = UnitToUnitIntervalContext;

UnitToUnitIntervalContext.prototype.TO = function() {
    return this.getToken(FlinkSqlParser.TO, 0);
};

UnitToUnitIntervalContext.prototype.intervalValue = function() {
    return this.getTypedRuleContext(IntervalValueContext,0);
};

UnitToUnitIntervalContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

UnitToUnitIntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUnitToUnitInterval(this);
	}
};

UnitToUnitIntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUnitToUnitInterval(this);
	}
};

UnitToUnitIntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUnitToUnitInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.UnitToUnitIntervalContext = UnitToUnitIntervalContext;

FlinkSqlParser.prototype.unitToUnitInterval = function() {

    var localctx = new UnitToUnitIntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, FlinkSqlParser.RULE_unitToUnitInterval);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1682;
        localctx.value = this.intervalValue();
        this.state = 1683;
        localctx.from = this.identifier();
        this.state = 1684;
        this.match(FlinkSqlParser.TO);
        this.state = 1685;
        localctx.to = this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_intervalValue;
    return this;
}

IntervalValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalValueContext.prototype.constructor = IntervalValueContext;

IntervalValueContext.prototype.DIG_LITERAL = function() {
    return this.getToken(FlinkSqlParser.DIG_LITERAL, 0);
};

IntervalValueContext.prototype.REAL_LITERAL = function() {
    return this.getToken(FlinkSqlParser.REAL_LITERAL, 0);
};

IntervalValueContext.prototype.ADD_SIGN = function() {
    return this.getToken(FlinkSqlParser.ADD_SIGN, 0);
};

IntervalValueContext.prototype.HYPNEN_SIGN = function() {
    return this.getToken(FlinkSqlParser.HYPNEN_SIGN, 0);
};

IntervalValueContext.prototype.STRING_LITERAL = function() {
    return this.getToken(FlinkSqlParser.STRING_LITERAL, 0);
};

IntervalValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIntervalValue(this);
	}
};

IntervalValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIntervalValue(this);
	}
};

IntervalValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIntervalValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.IntervalValueContext = IntervalValueContext;

FlinkSqlParser.prototype.intervalValue = function() {

    var localctx = new IntervalValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, FlinkSqlParser.RULE_intervalValue);
    var _la = 0; // Token type
    try {
        this.state = 1692;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.HYPNEN_SIGN:
        case FlinkSqlParser.ADD_SIGN:
        case FlinkSqlParser.DIG_LITERAL:
        case FlinkSqlParser.REAL_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1688;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.HYPNEN_SIGN || _la===FlinkSqlParser.ADD_SIGN) {
                this.state = 1687;
                _la = this._input.LA(1);
                if(!(_la===FlinkSqlParser.HYPNEN_SIGN || _la===FlinkSqlParser.ADD_SIGN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1690;
            _la = this._input.LA(1);
            if(!(_la===FlinkSqlParser.DIG_LITERAL || _la===FlinkSqlParser.REAL_LITERAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case FlinkSqlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1691;
            this.match(FlinkSqlParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnAliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_columnAlias;
    return this;
}

ColumnAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnAliasContext.prototype.constructor = ColumnAliasContext;

ColumnAliasContext.prototype.strictIdentifier = function() {
    return this.getTypedRuleContext(StrictIdentifierContext,0);
};

ColumnAliasContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

ColumnAliasContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

ColumnAliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterColumnAlias(this);
	}
};

ColumnAliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitColumnAlias(this);
	}
};

ColumnAliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitColumnAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ColumnAliasContext = ColumnAliasContext;

FlinkSqlParser.prototype.columnAlias = function() {

    var localctx = new ColumnAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, FlinkSqlParser.RULE_columnAlias);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1695;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
        if(la_===1) {
            this.state = 1694;
            this.match(FlinkSqlParser.AS);

        }
        this.state = 1697;
        this.strictIdentifier();
        this.state = 1699;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.LR_BRACKET) {
            this.state = 1698;
            this.identifierList();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableAliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tableAlias;
    return this;
}

TableAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableAliasContext.prototype.constructor = TableAliasContext;

TableAliasContext.prototype.strictIdentifier = function() {
    return this.getTypedRuleContext(StrictIdentifierContext,0);
};

TableAliasContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

TableAliasContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

TableAliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTableAlias(this);
	}
};

TableAliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTableAlias(this);
	}
};

TableAliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTableAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TableAliasContext = TableAliasContext;

FlinkSqlParser.prototype.tableAlias = function() {

    var localctx = new TableAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, FlinkSqlParser.RULE_tableAlias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1702;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
        if(la_===1) {
            this.state = 1701;
            this.match(FlinkSqlParser.AS);

        }
        this.state = 1704;
        this.strictIdentifier();
        this.state = 1706;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
        if(la_===1) {
            this.state = 1705;
            this.identifierList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErrorCapturingIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_errorCapturingIdentifier;
    return this;
}

ErrorCapturingIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorCapturingIdentifierContext.prototype.constructor = ErrorCapturingIdentifierContext;

ErrorCapturingIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ErrorCapturingIdentifierContext.prototype.errorCapturingIdentifierExtra = function() {
    return this.getTypedRuleContext(ErrorCapturingIdentifierExtraContext,0);
};

ErrorCapturingIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterErrorCapturingIdentifier(this);
	}
};

ErrorCapturingIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitErrorCapturingIdentifier(this);
	}
};

ErrorCapturingIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitErrorCapturingIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ErrorCapturingIdentifierContext = ErrorCapturingIdentifierContext;

FlinkSqlParser.prototype.errorCapturingIdentifier = function() {

    var localctx = new ErrorCapturingIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, FlinkSqlParser.RULE_errorCapturingIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1708;
        this.identifier();
        this.state = 1709;
        this.errorCapturingIdentifierExtra();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ErrorCapturingIdentifierExtraContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_errorCapturingIdentifierExtra;
    return this;
}

ErrorCapturingIdentifierExtraContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorCapturingIdentifierExtraContext.prototype.constructor = ErrorCapturingIdentifierExtraContext;


 
ErrorCapturingIdentifierExtraContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ErrorIdentContext(parser, ctx) {
	ErrorCapturingIdentifierExtraContext.call(this, parser);
    ErrorCapturingIdentifierExtraContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ErrorIdentContext.prototype = Object.create(ErrorCapturingIdentifierExtraContext.prototype);
ErrorIdentContext.prototype.constructor = ErrorIdentContext;

FlinkSqlParser.ErrorIdentContext = ErrorIdentContext;

ErrorIdentContext.prototype.MINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.MINUS);
    } else {
        return this.getToken(FlinkSqlParser.MINUS, i);
    }
};


ErrorIdentContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};
ErrorIdentContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterErrorIdent(this);
	}
};

ErrorIdentContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitErrorIdent(this);
	}
};

ErrorIdentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitErrorIdent(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RealIdentContext(parser, ctx) {
	ErrorCapturingIdentifierExtraContext.call(this, parser);
    ErrorCapturingIdentifierExtraContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RealIdentContext.prototype = Object.create(ErrorCapturingIdentifierExtraContext.prototype);
RealIdentContext.prototype.constructor = RealIdentContext;

FlinkSqlParser.RealIdentContext = RealIdentContext;

RealIdentContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterRealIdent(this);
	}
};

RealIdentContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitRealIdent(this);
	}
};

RealIdentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitRealIdent(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParser.ErrorCapturingIdentifierExtraContext = ErrorCapturingIdentifierExtraContext;

FlinkSqlParser.prototype.errorCapturingIdentifierExtra = function() {

    var localctx = new ErrorCapturingIdentifierExtraContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, FlinkSqlParser.RULE_errorCapturingIdentifierExtra);
    var _la = 0; // Token type
    try {
        this.state = 1718;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.MINUS:
            localctx = new ErrorIdentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1713; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1711;
                this.match(FlinkSqlParser.MINUS);
                this.state = 1712;
                this.identifier();
                this.state = 1715; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===FlinkSqlParser.MINUS);
            break;
        case FlinkSqlParser.AS:
        case FlinkSqlParser.LR_BRACKET:
            localctx = new RealIdentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

IdentifierListContext.prototype.identifierSeq = function() {
    return this.getTypedRuleContext(IdentifierSeqContext,0);
};

IdentifierListContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

IdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIdentifierList(this);
	}
};

IdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIdentifierList(this);
	}
};

IdentifierListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIdentifierList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.IdentifierListContext = IdentifierListContext;

FlinkSqlParser.prototype.identifierList = function() {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, FlinkSqlParser.RULE_identifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1720;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 1721;
        this.identifierSeq();
        this.state = 1722;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierSeqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_identifierSeq;
    return this;
}

IdentifierSeqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierSeqContext.prototype.constructor = IdentifierSeqContext;

IdentifierSeqContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

IdentifierSeqContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


IdentifierSeqContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIdentifierSeq(this);
	}
};

IdentifierSeqContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIdentifierSeq(this);
	}
};

IdentifierSeqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIdentifierSeq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.IdentifierSeqContext = IdentifierSeqContext;

FlinkSqlParser.prototype.identifierSeq = function() {

    var localctx = new IdentifierSeqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, FlinkSqlParser.RULE_identifierSeq);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1724;
        this.identifier();
        this.state = 1729;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 1725;
            this.match(FlinkSqlParser.COMMA);
            this.state = 1726;
            this.identifier();
            this.state = 1731;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.strictIdentifier = function() {
    return this.getTypedRuleContext(StrictIdentifierContext,0);
};

IdentifierContext.prototype.strictNonReserved = function() {
    return this.getTypedRuleContext(StrictNonReservedContext,0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIdentifier(this);
	}
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.IdentifierContext = IdentifierContext;

FlinkSqlParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, FlinkSqlParser.RULE_identifier);
    try {
        this.state = 1734;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1732;
            this.strictIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1733;
            this.strictNonReserved();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StrictIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_strictIdentifier;
    return this;
}

StrictIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StrictIdentifierContext.prototype.constructor = StrictIdentifierContext;


 
StrictIdentifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function QuotedIdentifierAlternativeContext(parser, ctx) {
	StrictIdentifierContext.call(this, parser);
    StrictIdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

QuotedIdentifierAlternativeContext.prototype = Object.create(StrictIdentifierContext.prototype);
QuotedIdentifierAlternativeContext.prototype.constructor = QuotedIdentifierAlternativeContext;

FlinkSqlParser.QuotedIdentifierAlternativeContext = QuotedIdentifierAlternativeContext;

QuotedIdentifierAlternativeContext.prototype.quotedIdentifier = function() {
    return this.getTypedRuleContext(QuotedIdentifierContext,0);
};
QuotedIdentifierAlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterQuotedIdentifierAlternative(this);
	}
};

QuotedIdentifierAlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitQuotedIdentifierAlternative(this);
	}
};

QuotedIdentifierAlternativeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitQuotedIdentifierAlternative(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NonReservedKeywordsContext(parser, ctx) {
	StrictIdentifierContext.call(this, parser);
    StrictIdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NonReservedKeywordsContext.prototype = Object.create(StrictIdentifierContext.prototype);
NonReservedKeywordsContext.prototype.constructor = NonReservedKeywordsContext;

FlinkSqlParser.NonReservedKeywordsContext = NonReservedKeywordsContext;

NonReservedKeywordsContext.prototype.nonReserved = function() {
    return this.getTypedRuleContext(NonReservedContext,0);
};
NonReservedKeywordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterNonReservedKeywords(this);
	}
};

NonReservedKeywordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitNonReservedKeywords(this);
	}
};

NonReservedKeywordsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitNonReservedKeywords(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnquotedIdentifierAlternativeContext(parser, ctx) {
	StrictIdentifierContext.call(this, parser);
    StrictIdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnquotedIdentifierAlternativeContext.prototype = Object.create(StrictIdentifierContext.prototype);
UnquotedIdentifierAlternativeContext.prototype.constructor = UnquotedIdentifierAlternativeContext;

FlinkSqlParser.UnquotedIdentifierAlternativeContext = UnquotedIdentifierAlternativeContext;

UnquotedIdentifierAlternativeContext.prototype.unquotedIdentifier = function() {
    return this.getTypedRuleContext(UnquotedIdentifierContext,0);
};
UnquotedIdentifierAlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUnquotedIdentifierAlternative(this);
	}
};

UnquotedIdentifierAlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUnquotedIdentifierAlternative(this);
	}
};

UnquotedIdentifierAlternativeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUnquotedIdentifierAlternative(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AnsiNonReservedKeywordsContext(parser, ctx) {
	StrictIdentifierContext.call(this, parser);
    StrictIdentifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnsiNonReservedKeywordsContext.prototype = Object.create(StrictIdentifierContext.prototype);
AnsiNonReservedKeywordsContext.prototype.constructor = AnsiNonReservedKeywordsContext;

FlinkSqlParser.AnsiNonReservedKeywordsContext = AnsiNonReservedKeywordsContext;

AnsiNonReservedKeywordsContext.prototype.ansiNonReserved = function() {
    return this.getTypedRuleContext(AnsiNonReservedContext,0);
};
AnsiNonReservedKeywordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAnsiNonReservedKeywords(this);
	}
};

AnsiNonReservedKeywordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAnsiNonReservedKeywords(this);
	}
};

AnsiNonReservedKeywordsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAnsiNonReservedKeywords(this);
    } else {
        return visitor.visitChildren(this);
    }
};



FlinkSqlParser.StrictIdentifierContext = StrictIdentifierContext;

FlinkSqlParser.prototype.strictIdentifier = function() {

    var localctx = new StrictIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, FlinkSqlParser.RULE_strictIdentifier);
    try {
        this.state = 1740;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
        switch(la_) {
        case 1:
            localctx = new UnquotedIdentifierAlternativeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1736;
            this.unquotedIdentifier();
            break;

        case 2:
            localctx = new QuotedIdentifierAlternativeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1737;
            this.quotedIdentifier();
            break;

        case 3:
            localctx = new AnsiNonReservedKeywordsContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1738;
            this.ansiNonReserved();
            break;

        case 4:
            localctx = new NonReservedKeywordsContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1739;
            this.nonReserved();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnquotedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_unquotedIdentifier;
    return this;
}

UnquotedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnquotedIdentifierContext.prototype.constructor = UnquotedIdentifierContext;

UnquotedIdentifierContext.prototype.DIG_LITERAL = function() {
    return this.getToken(FlinkSqlParser.DIG_LITERAL, 0);
};

UnquotedIdentifierContext.prototype.ID_LITERAL = function() {
    return this.getToken(FlinkSqlParser.ID_LITERAL, 0);
};

UnquotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUnquotedIdentifier(this);
	}
};

UnquotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUnquotedIdentifier(this);
	}
};

UnquotedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUnquotedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

FlinkSqlParser.prototype.unquotedIdentifier = function() {

    var localctx = new UnquotedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, FlinkSqlParser.RULE_unquotedIdentifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1742;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.DIG_LITERAL || _la===FlinkSqlParser.ID_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QuotedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_quotedIdentifier;
    return this;
}

QuotedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuotedIdentifierContext.prototype.constructor = QuotedIdentifierContext;

QuotedIdentifierContext.prototype.STRING_LITERAL = function() {
    return this.getToken(FlinkSqlParser.STRING_LITERAL, 0);
};

QuotedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterQuotedIdentifier(this);
	}
};

QuotedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitQuotedIdentifier(this);
	}
};

QuotedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitQuotedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.QuotedIdentifierContext = QuotedIdentifierContext;

FlinkSqlParser.prototype.quotedIdentifier = function() {

    var localctx = new QuotedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, FlinkSqlParser.RULE_quotedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1744;
        this.match(FlinkSqlParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhenClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_whenClause;
    this.condition = null; // ExpressionContext
    this.result = null; // ExpressionContext
    return this;
}

WhenClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhenClauseContext.prototype.constructor = WhenClauseContext;

WhenClauseContext.prototype.WHEN = function() {
    return this.getToken(FlinkSqlParser.WHEN, 0);
};

WhenClauseContext.prototype.THEN = function() {
    return this.getToken(FlinkSqlParser.THEN, 0);
};

WhenClauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

WhenClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterWhenClause(this);
	}
};

WhenClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitWhenClause(this);
	}
};

WhenClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitWhenClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.WhenClauseContext = WhenClauseContext;

FlinkSqlParser.prototype.whenClause = function() {

    var localctx = new WhenClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, FlinkSqlParser.RULE_whenClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1746;
        this.match(FlinkSqlParser.WHEN);
        this.state = 1747;
        localctx.condition = this.expression();
        this.state = 1748;
        this.match(FlinkSqlParser.THEN);
        this.state = 1749;
        localctx.result = this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UidListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_uidList;
    return this;
}

UidListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UidListContext.prototype.constructor = UidListContext;

UidListContext.prototype.uid = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UidContext);
    } else {
        return this.getTypedRuleContext(UidContext,i);
    }
};

UidListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


UidListContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUidList(this);
	}
};

UidListContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUidList(this);
	}
};

UidListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUidList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.UidListContext = UidListContext;

FlinkSqlParser.prototype.uidList = function() {

    var localctx = new UidListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, FlinkSqlParser.RULE_uidList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1751;
        this.uid();
        this.state = 1756;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 1752;
            this.match(FlinkSqlParser.COMMA);
            this.state = 1753;
            this.uid();
            this.state = 1758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_uid;
    return this;
}

UidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UidContext.prototype.constructor = UidContext;

UidContext.prototype.ID_LITERAL = function() {
    return this.getToken(FlinkSqlParser.ID_LITERAL, 0);
};

UidContext.prototype.DOT_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.DOT_ID);
    } else {
        return this.getToken(FlinkSqlParser.DOT_ID, i);
    }
};


UidContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUid(this);
	}
};

UidContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUid(this);
	}
};

UidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.UidContext = UidContext;

FlinkSqlParser.prototype.uid = function() {

    var localctx = new UidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, FlinkSqlParser.RULE_uid);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1759;
        this.match(FlinkSqlParser.ID_LITERAL);
        this.state = 1763;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,211,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 1760;
                this.match(FlinkSqlParser.DOT_ID); 
            }
            this.state = 1765;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,211,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PlusUidContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_plusUid;
    return this;
}

PlusUidContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PlusUidContext.prototype.constructor = PlusUidContext;

PlusUidContext.prototype.ID_LITERAL = function() {
    return this.getToken(FlinkSqlParser.ID_LITERAL, 0);
};

PlusUidContext.prototype.PLUS_ID_LITERAL = function() {
    return this.getToken(FlinkSqlParser.PLUS_ID_LITERAL, 0);
};

PlusUidContext.prototype.DOT_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.DOT_ID);
    } else {
        return this.getToken(FlinkSqlParser.DOT_ID, i);
    }
};


PlusUidContext.prototype.PLUS_DOT_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.PLUS_DOT_ID);
    } else {
        return this.getToken(FlinkSqlParser.PLUS_DOT_ID, i);
    }
};


PlusUidContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterPlusUid(this);
	}
};

PlusUidContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitPlusUid(this);
	}
};

PlusUidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitPlusUid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.PlusUidContext = PlusUidContext;

FlinkSqlParser.prototype.plusUid = function() {

    var localctx = new PlusUidContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, FlinkSqlParser.RULE_plusUid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1766;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.ID_LITERAL || _la===FlinkSqlParser.PLUS_ID_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1770;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,212,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 1767;
                _la = this._input.LA(1);
                if(!(_la===FlinkSqlParser.DOT_ID || _la===FlinkSqlParser.PLUS_DOT_ID)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                } 
            }
            this.state = 1772;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,212,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithOptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_withOption;
    return this;
}

WithOptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithOptionContext.prototype.constructor = WithOptionContext;

WithOptionContext.prototype.WITH = function() {
    return this.getToken(FlinkSqlParser.WITH, 0);
};

WithOptionContext.prototype.tablePropertyList = function() {
    return this.getTypedRuleContext(TablePropertyListContext,0);
};

WithOptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterWithOption(this);
	}
};

WithOptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitWithOption(this);
	}
};

WithOptionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitWithOption(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.WithOptionContext = WithOptionContext;

FlinkSqlParser.prototype.withOption = function() {

    var localctx = new WithOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, FlinkSqlParser.RULE_withOption);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1773;
        this.match(FlinkSqlParser.WITH);
        this.state = 1774;
        this.tablePropertyList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfNotExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_ifNotExists;
    return this;
}

IfNotExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfNotExistsContext.prototype.constructor = IfNotExistsContext;

IfNotExistsContext.prototype.IF = function() {
    return this.getToken(FlinkSqlParser.IF, 0);
};

IfNotExistsContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

IfNotExistsContext.prototype.EXISTS = function() {
    return this.getToken(FlinkSqlParser.EXISTS, 0);
};

IfNotExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIfNotExists(this);
	}
};

IfNotExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIfNotExists(this);
	}
};

IfNotExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIfNotExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.IfNotExistsContext = IfNotExistsContext;

FlinkSqlParser.prototype.ifNotExists = function() {

    var localctx = new IfNotExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, FlinkSqlParser.RULE_ifNotExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1776;
        this.match(FlinkSqlParser.IF);
        this.state = 1777;
        this.match(FlinkSqlParser.NOT);
        this.state = 1778;
        this.match(FlinkSqlParser.EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfExistsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_ifExists;
    return this;
}

IfExistsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfExistsContext.prototype.constructor = IfExistsContext;

IfExistsContext.prototype.IF = function() {
    return this.getToken(FlinkSqlParser.IF, 0);
};

IfExistsContext.prototype.EXISTS = function() {
    return this.getToken(FlinkSqlParser.EXISTS, 0);
};

IfExistsContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterIfExists(this);
	}
};

IfExistsContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitIfExists(this);
	}
};

IfExistsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitIfExists(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.IfExistsContext = IfExistsContext;

FlinkSqlParser.prototype.ifExists = function() {

    var localctx = new IfExistsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, FlinkSqlParser.RULE_ifExists);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1780;
        this.match(FlinkSqlParser.IF);
        this.state = 1781;
        this.match(FlinkSqlParser.EXISTS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePropertyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tablePropertyList;
    return this;
}

TablePropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyListContext.prototype.constructor = TablePropertyListContext;

TablePropertyListContext.prototype.LR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.LR_BRACKET, 0);
};

TablePropertyListContext.prototype.tableProperty = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TablePropertyContext);
    } else {
        return this.getTypedRuleContext(TablePropertyContext,i);
    }
};

TablePropertyListContext.prototype.RR_BRACKET = function() {
    return this.getToken(FlinkSqlParser.RR_BRACKET, 0);
};

TablePropertyListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.COMMA);
    } else {
        return this.getToken(FlinkSqlParser.COMMA, i);
    }
};


TablePropertyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTablePropertyList(this);
	}
};

TablePropertyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTablePropertyList(this);
	}
};

TablePropertyListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTablePropertyList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TablePropertyListContext = TablePropertyListContext;

FlinkSqlParser.prototype.tablePropertyList = function() {

    var localctx = new TablePropertyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, FlinkSqlParser.RULE_tablePropertyList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1783;
        this.match(FlinkSqlParser.LR_BRACKET);
        this.state = 1784;
        this.tableProperty();
        this.state = 1789;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FlinkSqlParser.COMMA) {
            this.state = 1785;
            this.match(FlinkSqlParser.COMMA);
            this.state = 1786;
            this.tableProperty();
            this.state = 1791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1792;
        this.match(FlinkSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tableProperty;
    this.key = null; // TablePropertyKeyContext
    this.value = null; // TablePropertyValueContext
    return this;
}

TablePropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyContext.prototype.constructor = TablePropertyContext;

TablePropertyContext.prototype.tablePropertyKey = function() {
    return this.getTypedRuleContext(TablePropertyKeyContext,0);
};

TablePropertyContext.prototype.tablePropertyValue = function() {
    return this.getTypedRuleContext(TablePropertyValueContext,0);
};

TablePropertyContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.EQUAL_SYMBOL, 0);
};

TablePropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTableProperty(this);
	}
};

TablePropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTableProperty(this);
	}
};

TablePropertyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTableProperty(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TablePropertyContext = TablePropertyContext;

FlinkSqlParser.prototype.tableProperty = function() {

    var localctx = new TablePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, FlinkSqlParser.RULE_tableProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1794;
        localctx.key = this.tablePropertyKey();
        this.state = 1799;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===FlinkSqlParser.TRUE || _la===FlinkSqlParser.FALSE || ((((_la - 290)) & ~0x1f) == 0 && ((1 << (_la - 290)) & ((1 << (FlinkSqlParser.EQUAL_SYMBOL - 290)) | (1 << (FlinkSqlParser.STRING_LITERAL - 290)) | (1 << (FlinkSqlParser.DIG_LITERAL - 290)))) !== 0) || _la===FlinkSqlParser.REAL_LITERAL) {
            this.state = 1796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.EQUAL_SYMBOL) {
                this.state = 1795;
                this.match(FlinkSqlParser.EQUAL_SYMBOL);
            }

            this.state = 1798;
            localctx.value = this.tablePropertyValue();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePropertyKeyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tablePropertyKey;
    return this;
}

TablePropertyKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyKeyContext.prototype.constructor = TablePropertyKeyContext;

TablePropertyKeyContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TablePropertyKeyContext.prototype.dereferenceDefinition = function() {
    return this.getTypedRuleContext(DereferenceDefinitionContext,0);
};

TablePropertyKeyContext.prototype.STRING_LITERAL = function() {
    return this.getToken(FlinkSqlParser.STRING_LITERAL, 0);
};

TablePropertyKeyContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTablePropertyKey(this);
	}
};

TablePropertyKeyContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTablePropertyKey(this);
	}
};

TablePropertyKeyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTablePropertyKey(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TablePropertyKeyContext = TablePropertyKeyContext;

FlinkSqlParser.prototype.tablePropertyKey = function() {

    var localctx = new TablePropertyKeyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, FlinkSqlParser.RULE_tablePropertyKey);
    try {
        this.state = 1804;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1801;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1802;
            this.dereferenceDefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1803;
            this.match(FlinkSqlParser.STRING_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TablePropertyValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_tablePropertyValue;
    return this;
}

TablePropertyValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TablePropertyValueContext.prototype.constructor = TablePropertyValueContext;

TablePropertyValueContext.prototype.DIG_LITERAL = function() {
    return this.getToken(FlinkSqlParser.DIG_LITERAL, 0);
};

TablePropertyValueContext.prototype.REAL_LITERAL = function() {
    return this.getToken(FlinkSqlParser.REAL_LITERAL, 0);
};

TablePropertyValueContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

TablePropertyValueContext.prototype.STRING_LITERAL = function() {
    return this.getToken(FlinkSqlParser.STRING_LITERAL, 0);
};

TablePropertyValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterTablePropertyValue(this);
	}
};

TablePropertyValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitTablePropertyValue(this);
	}
};

TablePropertyValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitTablePropertyValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.TablePropertyValueContext = TablePropertyValueContext;

FlinkSqlParser.prototype.tablePropertyValue = function() {

    var localctx = new TablePropertyValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, FlinkSqlParser.RULE_tablePropertyValue);
    try {
        this.state = 1810;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.DIG_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1806;
            this.match(FlinkSqlParser.DIG_LITERAL);
            break;
        case FlinkSqlParser.REAL_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1807;
            this.match(FlinkSqlParser.REAL_LITERAL);
            break;
        case FlinkSqlParser.TRUE:
        case FlinkSqlParser.FALSE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1808;
            this.booleanLiteral();
            break;
        case FlinkSqlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 1809;
            this.match(FlinkSqlParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LogicalOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_logicalOperator;
    return this;
}

LogicalOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalOperatorContext.prototype.constructor = LogicalOperatorContext;

LogicalOperatorContext.prototype.AND = function() {
    return this.getToken(FlinkSqlParser.AND, 0);
};

LogicalOperatorContext.prototype.BIT_AND_OP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.BIT_AND_OP);
    } else {
        return this.getToken(FlinkSqlParser.BIT_AND_OP, i);
    }
};


LogicalOperatorContext.prototype.OR = function() {
    return this.getToken(FlinkSqlParser.OR, 0);
};

LogicalOperatorContext.prototype.BIT_OR_OP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.BIT_OR_OP);
    } else {
        return this.getToken(FlinkSqlParser.BIT_OR_OP, i);
    }
};


LogicalOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterLogicalOperator(this);
	}
};

LogicalOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitLogicalOperator(this);
	}
};

LogicalOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitLogicalOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.LogicalOperatorContext = LogicalOperatorContext;

FlinkSqlParser.prototype.logicalOperator = function() {

    var localctx = new LogicalOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, FlinkSqlParser.RULE_logicalOperator);
    try {
        this.state = 1818;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.AND:
            this.enterOuterAlt(localctx, 1);
            this.state = 1812;
            this.match(FlinkSqlParser.AND);
            break;
        case FlinkSqlParser.BIT_AND_OP:
            this.enterOuterAlt(localctx, 2);
            this.state = 1813;
            this.match(FlinkSqlParser.BIT_AND_OP);
            this.state = 1814;
            this.match(FlinkSqlParser.BIT_AND_OP);
            break;
        case FlinkSqlParser.OR:
            this.enterOuterAlt(localctx, 3);
            this.state = 1815;
            this.match(FlinkSqlParser.OR);
            break;
        case FlinkSqlParser.BIT_OR_OP:
            this.enterOuterAlt(localctx, 4);
            this.state = 1816;
            this.match(FlinkSqlParser.BIT_OR_OP);
            this.state = 1817;
            this.match(FlinkSqlParser.BIT_OR_OP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ComparisonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_comparisonOperator;
    return this;
}

ComparisonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonOperatorContext.prototype.constructor = ComparisonOperatorContext;

ComparisonOperatorContext.prototype.EQUAL_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.EQUAL_SYMBOL, 0);
};

ComparisonOperatorContext.prototype.GREATER_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.GREATER_SYMBOL, 0);
};

ComparisonOperatorContext.prototype.LESS_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.LESS_SYMBOL, 0);
};

ComparisonOperatorContext.prototype.EXCLAMATION_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.EXCLAMATION_SYMBOL, 0);
};

ComparisonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitComparisonOperator(this);
	}
};

ComparisonOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitComparisonOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ComparisonOperatorContext = ComparisonOperatorContext;

FlinkSqlParser.prototype.comparisonOperator = function() {

    var localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, FlinkSqlParser.RULE_comparisonOperator);
    try {
        this.state = 1834;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1820;
            this.match(FlinkSqlParser.EQUAL_SYMBOL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1821;
            this.match(FlinkSqlParser.GREATER_SYMBOL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1822;
            this.match(FlinkSqlParser.LESS_SYMBOL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1823;
            this.match(FlinkSqlParser.LESS_SYMBOL);
            this.state = 1824;
            this.match(FlinkSqlParser.EQUAL_SYMBOL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1825;
            this.match(FlinkSqlParser.GREATER_SYMBOL);
            this.state = 1826;
            this.match(FlinkSqlParser.EQUAL_SYMBOL);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1827;
            this.match(FlinkSqlParser.LESS_SYMBOL);
            this.state = 1828;
            this.match(FlinkSqlParser.GREATER_SYMBOL);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1829;
            this.match(FlinkSqlParser.EXCLAMATION_SYMBOL);
            this.state = 1830;
            this.match(FlinkSqlParser.EQUAL_SYMBOL);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1831;
            this.match(FlinkSqlParser.LESS_SYMBOL);
            this.state = 1832;
            this.match(FlinkSqlParser.EQUAL_SYMBOL);
            this.state = 1833;
            this.match(FlinkSqlParser.GREATER_SYMBOL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BitOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_bitOperator;
    return this;
}

BitOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BitOperatorContext.prototype.constructor = BitOperatorContext;

BitOperatorContext.prototype.LESS_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.LESS_SYMBOL);
    } else {
        return this.getToken(FlinkSqlParser.LESS_SYMBOL, i);
    }
};


BitOperatorContext.prototype.GREATER_SYMBOL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FlinkSqlParser.GREATER_SYMBOL);
    } else {
        return this.getToken(FlinkSqlParser.GREATER_SYMBOL, i);
    }
};


BitOperatorContext.prototype.BIT_AND_OP = function() {
    return this.getToken(FlinkSqlParser.BIT_AND_OP, 0);
};

BitOperatorContext.prototype.BIT_XOR_OP = function() {
    return this.getToken(FlinkSqlParser.BIT_XOR_OP, 0);
};

BitOperatorContext.prototype.BIT_OR_OP = function() {
    return this.getToken(FlinkSqlParser.BIT_OR_OP, 0);
};

BitOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterBitOperator(this);
	}
};

BitOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitBitOperator(this);
	}
};

BitOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitBitOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.BitOperatorContext = BitOperatorContext;

FlinkSqlParser.prototype.bitOperator = function() {

    var localctx = new BitOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, FlinkSqlParser.RULE_bitOperator);
    try {
        this.state = 1843;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.LESS_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1836;
            this.match(FlinkSqlParser.LESS_SYMBOL);
            this.state = 1837;
            this.match(FlinkSqlParser.LESS_SYMBOL);
            break;
        case FlinkSqlParser.GREATER_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1838;
            this.match(FlinkSqlParser.GREATER_SYMBOL);
            this.state = 1839;
            this.match(FlinkSqlParser.GREATER_SYMBOL);
            break;
        case FlinkSqlParser.BIT_AND_OP:
            this.enterOuterAlt(localctx, 3);
            this.state = 1840;
            this.match(FlinkSqlParser.BIT_AND_OP);
            break;
        case FlinkSqlParser.BIT_XOR_OP:
            this.enterOuterAlt(localctx, 4);
            this.state = 1841;
            this.match(FlinkSqlParser.BIT_XOR_OP);
            break;
        case FlinkSqlParser.BIT_OR_OP:
            this.enterOuterAlt(localctx, 5);
            this.state = 1842;
            this.match(FlinkSqlParser.BIT_OR_OP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MathOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_mathOperator;
    return this;
}

MathOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MathOperatorContext.prototype.constructor = MathOperatorContext;

MathOperatorContext.prototype.ASTERISK_SIGN = function() {
    return this.getToken(FlinkSqlParser.ASTERISK_SIGN, 0);
};

MathOperatorContext.prototype.SLASH_SIGN = function() {
    return this.getToken(FlinkSqlParser.SLASH_SIGN, 0);
};

MathOperatorContext.prototype.PENCENT_SIGN = function() {
    return this.getToken(FlinkSqlParser.PENCENT_SIGN, 0);
};

MathOperatorContext.prototype.DIV = function() {
    return this.getToken(FlinkSqlParser.DIV, 0);
};

MathOperatorContext.prototype.ADD_SIGN = function() {
    return this.getToken(FlinkSqlParser.ADD_SIGN, 0);
};

MathOperatorContext.prototype.HYPNEN_SIGN = function() {
    return this.getToken(FlinkSqlParser.HYPNEN_SIGN, 0);
};

MathOperatorContext.prototype.DOUBLE_HYPNEN_SIGN = function() {
    return this.getToken(FlinkSqlParser.DOUBLE_HYPNEN_SIGN, 0);
};

MathOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterMathOperator(this);
	}
};

MathOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitMathOperator(this);
	}
};

MathOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitMathOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.MathOperatorContext = MathOperatorContext;

FlinkSqlParser.prototype.mathOperator = function() {

    var localctx = new MathOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, FlinkSqlParser.RULE_mathOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1845;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.DIV || ((((_la - 310)) & ~0x1f) == 0 && ((1 << (_la - 310)) & ((1 << (FlinkSqlParser.ASTERISK_SIGN - 310)) | (1 << (FlinkSqlParser.HYPNEN_SIGN - 310)) | (1 << (FlinkSqlParser.ADD_SIGN - 310)) | (1 << (FlinkSqlParser.PENCENT_SIGN - 310)) | (1 << (FlinkSqlParser.DOUBLE_HYPNEN_SIGN - 310)) | (1 << (FlinkSqlParser.SLASH_SIGN - 310)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.EXCLAMATION_SYMBOL = function() {
    return this.getToken(FlinkSqlParser.EXCLAMATION_SYMBOL, 0);
};

UnaryOperatorContext.prototype.BIT_NOT_OP = function() {
    return this.getToken(FlinkSqlParser.BIT_NOT_OP, 0);
};

UnaryOperatorContext.prototype.ADD_SIGN = function() {
    return this.getToken(FlinkSqlParser.ADD_SIGN, 0);
};

UnaryOperatorContext.prototype.HYPNEN_SIGN = function() {
    return this.getToken(FlinkSqlParser.HYPNEN_SIGN, 0);
};

UnaryOperatorContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitUnaryOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.UnaryOperatorContext = UnaryOperatorContext;

FlinkSqlParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, FlinkSqlParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1847;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.NOT || ((((_la - 293)) & ~0x1f) == 0 && ((1 << (_la - 293)) & ((1 << (FlinkSqlParser.EXCLAMATION_SYMBOL - 293)) | (1 << (FlinkSqlParser.BIT_NOT_OP - 293)) | (1 << (FlinkSqlParser.HYPNEN_SIGN - 293)) | (1 << (FlinkSqlParser.ADD_SIGN - 293)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FullColumnNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_fullColumnName;
    return this;
}

FullColumnNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FullColumnNameContext.prototype.constructor = FullColumnNameContext;

FullColumnNameContext.prototype.uid = function() {
    return this.getTypedRuleContext(UidContext,0);
};

FullColumnNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterFullColumnName(this);
	}
};

FullColumnNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitFullColumnName(this);
	}
};

FullColumnNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitFullColumnName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.FullColumnNameContext = FullColumnNameContext;

FlinkSqlParser.prototype.fullColumnName = function() {

    var localctx = new FullColumnNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, FlinkSqlParser.RULE_fullColumnName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1849;
        this.uid();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

ConstantContext.prototype.decimalLiteral = function() {
    return this.getTypedRuleContext(DecimalLiteralContext,0);
};

ConstantContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};

ConstantContext.prototype.HYPNEN_SIGN = function() {
    return this.getToken(FlinkSqlParser.HYPNEN_SIGN, 0);
};

ConstantContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

ConstantContext.prototype.REAL_LITERAL = function() {
    return this.getToken(FlinkSqlParser.REAL_LITERAL, 0);
};

ConstantContext.prototype.BIT_STRING = function() {
    return this.getToken(FlinkSqlParser.BIT_STRING, 0);
};

ConstantContext.prototype.NULL = function() {
    return this.getToken(FlinkSqlParser.NULL, 0);
};

ConstantContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitConstant(this);
	}
};

ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.ConstantContext = ConstantContext;

FlinkSqlParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, FlinkSqlParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.state = 1863;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case FlinkSqlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1851;
            this.stringLiteral();
            break;
        case FlinkSqlParser.DIG_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1852;
            this.decimalLiteral();
            break;
        case FlinkSqlParser.INTERVAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1853;
            this.interval();
            break;
        case FlinkSqlParser.HYPNEN_SIGN:
            this.enterOuterAlt(localctx, 4);
            this.state = 1854;
            this.match(FlinkSqlParser.HYPNEN_SIGN);
            this.state = 1855;
            this.decimalLiteral();
            break;
        case FlinkSqlParser.TRUE:
        case FlinkSqlParser.FALSE:
            this.enterOuterAlt(localctx, 5);
            this.state = 1856;
            this.booleanLiteral();
            break;
        case FlinkSqlParser.REAL_LITERAL:
            this.enterOuterAlt(localctx, 6);
            this.state = 1857;
            this.match(FlinkSqlParser.REAL_LITERAL);
            break;
        case FlinkSqlParser.BIT_STRING:
            this.enterOuterAlt(localctx, 7);
            this.state = 1858;
            this.match(FlinkSqlParser.BIT_STRING);
            break;
        case FlinkSqlParser.NOT:
        case FlinkSqlParser.NULL:
            this.enterOuterAlt(localctx, 8);
            this.state = 1860;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===FlinkSqlParser.NOT) {
                this.state = 1859;
                this.match(FlinkSqlParser.NOT);
            }

            this.state = 1862;
            this.match(FlinkSqlParser.NULL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.STRING_LITERAL = function() {
    return this.getToken(FlinkSqlParser.STRING_LITERAL, 0);
};

StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitStringLiteral(this);
	}
};

StringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.StringLiteralContext = StringLiteralContext;

FlinkSqlParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, FlinkSqlParser.RULE_stringLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1865;
        this.match(FlinkSqlParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DecimalLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_decimalLiteral;
    return this;
}

DecimalLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecimalLiteralContext.prototype.constructor = DecimalLiteralContext;

DecimalLiteralContext.prototype.DIG_LITERAL = function() {
    return this.getToken(FlinkSqlParser.DIG_LITERAL, 0);
};

DecimalLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitDecimalLiteral(this);
	}
};

DecimalLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitDecimalLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.DecimalLiteralContext = DecimalLiteralContext;

FlinkSqlParser.prototype.decimalLiteral = function() {

    var localctx = new DecimalLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, FlinkSqlParser.RULE_decimalLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1867;
        this.match(FlinkSqlParser.DIG_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.TRUE = function() {
    return this.getToken(FlinkSqlParser.TRUE, 0);
};

BooleanLiteralContext.prototype.FALSE = function() {
    return this.getToken(FlinkSqlParser.FALSE, 0);
};

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitBooleanLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.BooleanLiteralContext = BooleanLiteralContext;

FlinkSqlParser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, FlinkSqlParser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1869;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.TRUE || _la===FlinkSqlParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetQuantifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_setQuantifier;
    return this;
}

SetQuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetQuantifierContext.prototype.constructor = SetQuantifierContext;

SetQuantifierContext.prototype.DISTINCT = function() {
    return this.getToken(FlinkSqlParser.DISTINCT, 0);
};

SetQuantifierContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParser.ALL, 0);
};

SetQuantifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterSetQuantifier(this);
	}
};

SetQuantifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitSetQuantifier(this);
	}
};

SetQuantifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitSetQuantifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.SetQuantifierContext = SetQuantifierContext;

FlinkSqlParser.prototype.setQuantifier = function() {

    var localctx = new SetQuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, FlinkSqlParser.RULE_setQuantifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1871;
        _la = this._input.LA(1);
        if(!(_la===FlinkSqlParser.ALL || _la===FlinkSqlParser.DISTINCT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnsiNonReservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_ansiNonReserved;
    return this;
}

AnsiNonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnsiNonReservedContext.prototype.constructor = AnsiNonReservedContext;

AnsiNonReservedContext.prototype.ADD = function() {
    return this.getToken(FlinkSqlParser.ADD, 0);
};

AnsiNonReservedContext.prototype.AFTER = function() {
    return this.getToken(FlinkSqlParser.AFTER, 0);
};

AnsiNonReservedContext.prototype.ALTER = function() {
    return this.getToken(FlinkSqlParser.ALTER, 0);
};

AnsiNonReservedContext.prototype.ANALYZE = function() {
    return this.getToken(FlinkSqlParser.ANALYZE, 0);
};

AnsiNonReservedContext.prototype.ANTI = function() {
    return this.getToken(FlinkSqlParser.ANTI, 0);
};

AnsiNonReservedContext.prototype.ARCHIVE = function() {
    return this.getToken(FlinkSqlParser.ARCHIVE, 0);
};

AnsiNonReservedContext.prototype.ARRAY = function() {
    return this.getToken(FlinkSqlParser.ARRAY, 0);
};

AnsiNonReservedContext.prototype.ASC = function() {
    return this.getToken(FlinkSqlParser.ASC, 0);
};

AnsiNonReservedContext.prototype.AT = function() {
    return this.getToken(FlinkSqlParser.AT, 0);
};

AnsiNonReservedContext.prototype.BETWEEN = function() {
    return this.getToken(FlinkSqlParser.BETWEEN, 0);
};

AnsiNonReservedContext.prototype.BIGINT = function() {
    return this.getToken(FlinkSqlParser.BIGINT, 0);
};

AnsiNonReservedContext.prototype.BINARY = function() {
    return this.getToken(FlinkSqlParser.BINARY, 0);
};

AnsiNonReservedContext.prototype.BOOLEAN = function() {
    return this.getToken(FlinkSqlParser.BOOLEAN, 0);
};

AnsiNonReservedContext.prototype.BUCKET = function() {
    return this.getToken(FlinkSqlParser.BUCKET, 0);
};

AnsiNonReservedContext.prototype.BUCKETS = function() {
    return this.getToken(FlinkSqlParser.BUCKETS, 0);
};

AnsiNonReservedContext.prototype.BY = function() {
    return this.getToken(FlinkSqlParser.BY, 0);
};

AnsiNonReservedContext.prototype.BYTES = function() {
    return this.getToken(FlinkSqlParser.BYTES, 0);
};

AnsiNonReservedContext.prototype.CACHE = function() {
    return this.getToken(FlinkSqlParser.CACHE, 0);
};

AnsiNonReservedContext.prototype.CASCADE = function() {
    return this.getToken(FlinkSqlParser.CASCADE, 0);
};

AnsiNonReservedContext.prototype.CATALOG = function() {
    return this.getToken(FlinkSqlParser.CATALOG, 0);
};

AnsiNonReservedContext.prototype.CATALOGS = function() {
    return this.getToken(FlinkSqlParser.CATALOGS, 0);
};

AnsiNonReservedContext.prototype.CHANGE = function() {
    return this.getToken(FlinkSqlParser.CHANGE, 0);
};

AnsiNonReservedContext.prototype.CHAR = function() {
    return this.getToken(FlinkSqlParser.CHAR, 0);
};

AnsiNonReservedContext.prototype.CLEAR = function() {
    return this.getToken(FlinkSqlParser.CLEAR, 0);
};

AnsiNonReservedContext.prototype.CLUSTER = function() {
    return this.getToken(FlinkSqlParser.CLUSTER, 0);
};

AnsiNonReservedContext.prototype.CLUSTERED = function() {
    return this.getToken(FlinkSqlParser.CLUSTERED, 0);
};

AnsiNonReservedContext.prototype.CODEGEN = function() {
    return this.getToken(FlinkSqlParser.CODEGEN, 0);
};

AnsiNonReservedContext.prototype.COLLECTION = function() {
    return this.getToken(FlinkSqlParser.COLLECTION, 0);
};

AnsiNonReservedContext.prototype.COLUMNS = function() {
    return this.getToken(FlinkSqlParser.COLUMNS, 0);
};

AnsiNonReservedContext.prototype.COMMENT = function() {
    return this.getToken(FlinkSqlParser.COMMENT, 0);
};

AnsiNonReservedContext.prototype.COMMIT = function() {
    return this.getToken(FlinkSqlParser.COMMIT, 0);
};

AnsiNonReservedContext.prototype.COMPACT = function() {
    return this.getToken(FlinkSqlParser.COMPACT, 0);
};

AnsiNonReservedContext.prototype.COMPACTIONS = function() {
    return this.getToken(FlinkSqlParser.COMPACTIONS, 0);
};

AnsiNonReservedContext.prototype.COMPUTE = function() {
    return this.getToken(FlinkSqlParser.COMPUTE, 0);
};

AnsiNonReservedContext.prototype.CONCATENATE = function() {
    return this.getToken(FlinkSqlParser.CONCATENATE, 0);
};

AnsiNonReservedContext.prototype.CONSTRAINTS = function() {
    return this.getToken(FlinkSqlParser.CONSTRAINTS, 0);
};

AnsiNonReservedContext.prototype.COST = function() {
    return this.getToken(FlinkSqlParser.COST, 0);
};

AnsiNonReservedContext.prototype.CUBE = function() {
    return this.getToken(FlinkSqlParser.CUBE, 0);
};

AnsiNonReservedContext.prototype.CURRENT = function() {
    return this.getToken(FlinkSqlParser.CURRENT, 0);
};

AnsiNonReservedContext.prototype.DATA = function() {
    return this.getToken(FlinkSqlParser.DATA, 0);
};

AnsiNonReservedContext.prototype.DATABASE = function() {
    return this.getToken(FlinkSqlParser.DATABASE, 0);
};

AnsiNonReservedContext.prototype.DATABASES = function() {
    return this.getToken(FlinkSqlParser.DATABASES, 0);
};

AnsiNonReservedContext.prototype.DATE = function() {
    return this.getToken(FlinkSqlParser.DATE, 0);
};

AnsiNonReservedContext.prototype.DATETIME = function() {
    return this.getToken(FlinkSqlParser.DATETIME, 0);
};

AnsiNonReservedContext.prototype.DBPROPERTIES = function() {
    return this.getToken(FlinkSqlParser.DBPROPERTIES, 0);
};

AnsiNonReservedContext.prototype.DECIMAL = function() {
    return this.getToken(FlinkSqlParser.DECIMAL, 0);
};

AnsiNonReservedContext.prototype.DEFINED = function() {
    return this.getToken(FlinkSqlParser.DEFINED, 0);
};

AnsiNonReservedContext.prototype.DELETE = function() {
    return this.getToken(FlinkSqlParser.DELETE, 0);
};

AnsiNonReservedContext.prototype.DELIMITED = function() {
    return this.getToken(FlinkSqlParser.DELIMITED, 0);
};

AnsiNonReservedContext.prototype.DESC = function() {
    return this.getToken(FlinkSqlParser.DESC, 0);
};

AnsiNonReservedContext.prototype.DESCRIBE = function() {
    return this.getToken(FlinkSqlParser.DESCRIBE, 0);
};

AnsiNonReservedContext.prototype.DFS = function() {
    return this.getToken(FlinkSqlParser.DFS, 0);
};

AnsiNonReservedContext.prototype.DIRECTORIES = function() {
    return this.getToken(FlinkSqlParser.DIRECTORIES, 0);
};

AnsiNonReservedContext.prototype.DIRECTORY = function() {
    return this.getToken(FlinkSqlParser.DIRECTORY, 0);
};

AnsiNonReservedContext.prototype.DISTRIBUTE = function() {
    return this.getToken(FlinkSqlParser.DISTRIBUTE, 0);
};

AnsiNonReservedContext.prototype.DIV = function() {
    return this.getToken(FlinkSqlParser.DIV, 0);
};

AnsiNonReservedContext.prototype.DOUBLE = function() {
    return this.getToken(FlinkSqlParser.DOUBLE, 0);
};

AnsiNonReservedContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParser.DROP, 0);
};

AnsiNonReservedContext.prototype.ESCAPED = function() {
    return this.getToken(FlinkSqlParser.ESCAPED, 0);
};

AnsiNonReservedContext.prototype.EXCHANGE = function() {
    return this.getToken(FlinkSqlParser.EXCHANGE, 0);
};

AnsiNonReservedContext.prototype.EXCLUDING = function() {
    return this.getToken(FlinkSqlParser.EXCLUDING, 0);
};

AnsiNonReservedContext.prototype.EXISTS = function() {
    return this.getToken(FlinkSqlParser.EXISTS, 0);
};

AnsiNonReservedContext.prototype.EXPLAIN = function() {
    return this.getToken(FlinkSqlParser.EXPLAIN, 0);
};

AnsiNonReservedContext.prototype.EXPORT = function() {
    return this.getToken(FlinkSqlParser.EXPORT, 0);
};

AnsiNonReservedContext.prototype.EXTENDED = function() {
    return this.getToken(FlinkSqlParser.EXTENDED, 0);
};

AnsiNonReservedContext.prototype.EXTERNAL = function() {
    return this.getToken(FlinkSqlParser.EXTERNAL, 0);
};

AnsiNonReservedContext.prototype.EXTRACT = function() {
    return this.getToken(FlinkSqlParser.EXTRACT, 0);
};

AnsiNonReservedContext.prototype.FIELDS = function() {
    return this.getToken(FlinkSqlParser.FIELDS, 0);
};

AnsiNonReservedContext.prototype.FILEFORMAT = function() {
    return this.getToken(FlinkSqlParser.FILEFORMAT, 0);
};

AnsiNonReservedContext.prototype.FIRST = function() {
    return this.getToken(FlinkSqlParser.FIRST, 0);
};

AnsiNonReservedContext.prototype.FLOAT = function() {
    return this.getToken(FlinkSqlParser.FLOAT, 0);
};

AnsiNonReservedContext.prototype.FOLLOWING = function() {
    return this.getToken(FlinkSqlParser.FOLLOWING, 0);
};

AnsiNonReservedContext.prototype.FORMAT = function() {
    return this.getToken(FlinkSqlParser.FORMAT, 0);
};

AnsiNonReservedContext.prototype.FORMATTED = function() {
    return this.getToken(FlinkSqlParser.FORMATTED, 0);
};

AnsiNonReservedContext.prototype.FUNCTION = function() {
    return this.getToken(FlinkSqlParser.FUNCTION, 0);
};

AnsiNonReservedContext.prototype.FUNCTIONS = function() {
    return this.getToken(FlinkSqlParser.FUNCTIONS, 0);
};

AnsiNonReservedContext.prototype.GENERATED = function() {
    return this.getToken(FlinkSqlParser.GENERATED, 0);
};

AnsiNonReservedContext.prototype.GLOBAL = function() {
    return this.getToken(FlinkSqlParser.GLOBAL, 0);
};

AnsiNonReservedContext.prototype.GROUPING = function() {
    return this.getToken(FlinkSqlParser.GROUPING, 0);
};

AnsiNonReservedContext.prototype.IF = function() {
    return this.getToken(FlinkSqlParser.IF, 0);
};

AnsiNonReservedContext.prototype.IGNORE = function() {
    return this.getToken(FlinkSqlParser.IGNORE, 0);
};

AnsiNonReservedContext.prototype.IMPORT = function() {
    return this.getToken(FlinkSqlParser.IMPORT, 0);
};

AnsiNonReservedContext.prototype.INCLUDING = function() {
    return this.getToken(FlinkSqlParser.INCLUDING, 0);
};

AnsiNonReservedContext.prototype.INDEX = function() {
    return this.getToken(FlinkSqlParser.INDEX, 0);
};

AnsiNonReservedContext.prototype.INDEXES = function() {
    return this.getToken(FlinkSqlParser.INDEXES, 0);
};

AnsiNonReservedContext.prototype.INPATH = function() {
    return this.getToken(FlinkSqlParser.INPATH, 0);
};

AnsiNonReservedContext.prototype.INPUTFORMAT = function() {
    return this.getToken(FlinkSqlParser.INPUTFORMAT, 0);
};

AnsiNonReservedContext.prototype.INSERT = function() {
    return this.getToken(FlinkSqlParser.INSERT, 0);
};

AnsiNonReservedContext.prototype.INT = function() {
    return this.getToken(FlinkSqlParser.INT, 0);
};

AnsiNonReservedContext.prototype.INTERVAL = function() {
    return this.getToken(FlinkSqlParser.INTERVAL, 0);
};

AnsiNonReservedContext.prototype.ITEMS = function() {
    return this.getToken(FlinkSqlParser.ITEMS, 0);
};

AnsiNonReservedContext.prototype.KEY = function() {
    return this.getToken(FlinkSqlParser.KEY, 0);
};

AnsiNonReservedContext.prototype.KEYS = function() {
    return this.getToken(FlinkSqlParser.KEYS, 0);
};

AnsiNonReservedContext.prototype.LANGUAGE = function() {
    return this.getToken(FlinkSqlParser.LANGUAGE, 0);
};

AnsiNonReservedContext.prototype.LAST = function() {
    return this.getToken(FlinkSqlParser.LAST, 0);
};

AnsiNonReservedContext.prototype.LATERAL = function() {
    return this.getToken(FlinkSqlParser.LATERAL, 0);
};

AnsiNonReservedContext.prototype.LAZY = function() {
    return this.getToken(FlinkSqlParser.LAZY, 0);
};

AnsiNonReservedContext.prototype.LIKE = function() {
    return this.getToken(FlinkSqlParser.LIKE, 0);
};

AnsiNonReservedContext.prototype.LIMIT = function() {
    return this.getToken(FlinkSqlParser.LIMIT, 0);
};

AnsiNonReservedContext.prototype.LINES = function() {
    return this.getToken(FlinkSqlParser.LINES, 0);
};

AnsiNonReservedContext.prototype.LIST = function() {
    return this.getToken(FlinkSqlParser.LIST, 0);
};

AnsiNonReservedContext.prototype.LOAD = function() {
    return this.getToken(FlinkSqlParser.LOAD, 0);
};

AnsiNonReservedContext.prototype.LOCAL = function() {
    return this.getToken(FlinkSqlParser.LOCAL, 0);
};

AnsiNonReservedContext.prototype.LOCATION = function() {
    return this.getToken(FlinkSqlParser.LOCATION, 0);
};

AnsiNonReservedContext.prototype.LOCK = function() {
    return this.getToken(FlinkSqlParser.LOCK, 0);
};

AnsiNonReservedContext.prototype.LOCKS = function() {
    return this.getToken(FlinkSqlParser.LOCKS, 0);
};

AnsiNonReservedContext.prototype.LOGICAL = function() {
    return this.getToken(FlinkSqlParser.LOGICAL, 0);
};

AnsiNonReservedContext.prototype.MACRO = function() {
    return this.getToken(FlinkSqlParser.MACRO, 0);
};

AnsiNonReservedContext.prototype.MAP = function() {
    return this.getToken(FlinkSqlParser.MAP, 0);
};

AnsiNonReservedContext.prototype.MATCH = function() {
    return this.getToken(FlinkSqlParser.MATCH, 0);
};

AnsiNonReservedContext.prototype.MINUS = function() {
    return this.getToken(FlinkSqlParser.MINUS, 0);
};

AnsiNonReservedContext.prototype.MSCK = function() {
    return this.getToken(FlinkSqlParser.MSCK, 0);
};

AnsiNonReservedContext.prototype.MULTISET = function() {
    return this.getToken(FlinkSqlParser.MULTISET, 0);
};

AnsiNonReservedContext.prototype.NEXT = function() {
    return this.getToken(FlinkSqlParser.NEXT, 0);
};

AnsiNonReservedContext.prototype.NO = function() {
    return this.getToken(FlinkSqlParser.NO, 0);
};

AnsiNonReservedContext.prototype.NULL = function() {
    return this.getToken(FlinkSqlParser.NULL, 0);
};

AnsiNonReservedContext.prototype.NULLS = function() {
    return this.getToken(FlinkSqlParser.NULLS, 0);
};

AnsiNonReservedContext.prototype.OF = function() {
    return this.getToken(FlinkSqlParser.OF, 0);
};

AnsiNonReservedContext.prototype.OPTION = function() {
    return this.getToken(FlinkSqlParser.OPTION, 0);
};

AnsiNonReservedContext.prototype.OPTIONS = function() {
    return this.getToken(FlinkSqlParser.OPTIONS, 0);
};

AnsiNonReservedContext.prototype.OUT = function() {
    return this.getToken(FlinkSqlParser.OUT, 0);
};

AnsiNonReservedContext.prototype.OUTPUTFORMAT = function() {
    return this.getToken(FlinkSqlParser.OUTPUTFORMAT, 0);
};

AnsiNonReservedContext.prototype.OVER = function() {
    return this.getToken(FlinkSqlParser.OVER, 0);
};

AnsiNonReservedContext.prototype.OVERWRITE = function() {
    return this.getToken(FlinkSqlParser.OVERWRITE, 0);
};

AnsiNonReservedContext.prototype.PARTITION = function() {
    return this.getToken(FlinkSqlParser.PARTITION, 0);
};

AnsiNonReservedContext.prototype.PARTITIONED = function() {
    return this.getToken(FlinkSqlParser.PARTITIONED, 0);
};

AnsiNonReservedContext.prototype.PARTITIONS = function() {
    return this.getToken(FlinkSqlParser.PARTITIONS, 0);
};

AnsiNonReservedContext.prototype.PERCENTLIT = function() {
    return this.getToken(FlinkSqlParser.PERCENTLIT, 0);
};

AnsiNonReservedContext.prototype.PERIOD = function() {
    return this.getToken(FlinkSqlParser.PERIOD, 0);
};

AnsiNonReservedContext.prototype.PIVOT = function() {
    return this.getToken(FlinkSqlParser.PIVOT, 0);
};

AnsiNonReservedContext.prototype.POSITION = function() {
    return this.getToken(FlinkSqlParser.POSITION, 0);
};

AnsiNonReservedContext.prototype.PRECEDING = function() {
    return this.getToken(FlinkSqlParser.PRECEDING, 0);
};

AnsiNonReservedContext.prototype.PRINCIPALS = function() {
    return this.getToken(FlinkSqlParser.PRINCIPALS, 0);
};

AnsiNonReservedContext.prototype.PURGE = function() {
    return this.getToken(FlinkSqlParser.PURGE, 0);
};

AnsiNonReservedContext.prototype.RANGE = function() {
    return this.getToken(FlinkSqlParser.RANGE, 0);
};

AnsiNonReservedContext.prototype.RAW = function() {
    return this.getToken(FlinkSqlParser.RAW, 0);
};

AnsiNonReservedContext.prototype.RECORDREADER = function() {
    return this.getToken(FlinkSqlParser.RECORDREADER, 0);
};

AnsiNonReservedContext.prototype.RECORDWRITER = function() {
    return this.getToken(FlinkSqlParser.RECORDWRITER, 0);
};

AnsiNonReservedContext.prototype.RECOVER = function() {
    return this.getToken(FlinkSqlParser.RECOVER, 0);
};

AnsiNonReservedContext.prototype.REDUCE = function() {
    return this.getToken(FlinkSqlParser.REDUCE, 0);
};

AnsiNonReservedContext.prototype.REFRESH = function() {
    return this.getToken(FlinkSqlParser.REFRESH, 0);
};

AnsiNonReservedContext.prototype.RENAME = function() {
    return this.getToken(FlinkSqlParser.RENAME, 0);
};

AnsiNonReservedContext.prototype.REPAIR = function() {
    return this.getToken(FlinkSqlParser.REPAIR, 0);
};

AnsiNonReservedContext.prototype.REPLACE = function() {
    return this.getToken(FlinkSqlParser.REPLACE, 0);
};

AnsiNonReservedContext.prototype.RESET = function() {
    return this.getToken(FlinkSqlParser.RESET, 0);
};

AnsiNonReservedContext.prototype.RESTRICT = function() {
    return this.getToken(FlinkSqlParser.RESTRICT, 0);
};

AnsiNonReservedContext.prototype.REVOKE = function() {
    return this.getToken(FlinkSqlParser.REVOKE, 0);
};

AnsiNonReservedContext.prototype.RLIKE = function() {
    return this.getToken(FlinkSqlParser.RLIKE, 0);
};

AnsiNonReservedContext.prototype.ROLE = function() {
    return this.getToken(FlinkSqlParser.ROLE, 0);
};

AnsiNonReservedContext.prototype.ROLES = function() {
    return this.getToken(FlinkSqlParser.ROLES, 0);
};

AnsiNonReservedContext.prototype.ROLLBACK = function() {
    return this.getToken(FlinkSqlParser.ROLLBACK, 0);
};

AnsiNonReservedContext.prototype.ROLLUP = function() {
    return this.getToken(FlinkSqlParser.ROLLUP, 0);
};

AnsiNonReservedContext.prototype.ROW = function() {
    return this.getToken(FlinkSqlParser.ROW, 0);
};

AnsiNonReservedContext.prototype.ROWS = function() {
    return this.getToken(FlinkSqlParser.ROWS, 0);
};

AnsiNonReservedContext.prototype.SEMI = function() {
    return this.getToken(FlinkSqlParser.SEMI, 0);
};

AnsiNonReservedContext.prototype.SEPARATED = function() {
    return this.getToken(FlinkSqlParser.SEPARATED, 0);
};

AnsiNonReservedContext.prototype.SERDE = function() {
    return this.getToken(FlinkSqlParser.SERDE, 0);
};

AnsiNonReservedContext.prototype.SERDEPROPERTIES = function() {
    return this.getToken(FlinkSqlParser.SERDEPROPERTIES, 0);
};

AnsiNonReservedContext.prototype.SET = function() {
    return this.getToken(FlinkSqlParser.SET, 0);
};

AnsiNonReservedContext.prototype.SETMINUS = function() {
    return this.getToken(FlinkSqlParser.SETMINUS, 0);
};

AnsiNonReservedContext.prototype.SETS = function() {
    return this.getToken(FlinkSqlParser.SETS, 0);
};

AnsiNonReservedContext.prototype.SHOW = function() {
    return this.getToken(FlinkSqlParser.SHOW, 0);
};

AnsiNonReservedContext.prototype.SKEWED = function() {
    return this.getToken(FlinkSqlParser.SKEWED, 0);
};

AnsiNonReservedContext.prototype.SMALLINT = function() {
    return this.getToken(FlinkSqlParser.SMALLINT, 0);
};

AnsiNonReservedContext.prototype.SORT = function() {
    return this.getToken(FlinkSqlParser.SORT, 0);
};

AnsiNonReservedContext.prototype.SORTED = function() {
    return this.getToken(FlinkSqlParser.SORTED, 0);
};

AnsiNonReservedContext.prototype.START = function() {
    return this.getToken(FlinkSqlParser.START, 0);
};

AnsiNonReservedContext.prototype.STATISTICS = function() {
    return this.getToken(FlinkSqlParser.STATISTICS, 0);
};

AnsiNonReservedContext.prototype.STORED = function() {
    return this.getToken(FlinkSqlParser.STORED, 0);
};

AnsiNonReservedContext.prototype.STRATIFY = function() {
    return this.getToken(FlinkSqlParser.STRATIFY, 0);
};

AnsiNonReservedContext.prototype.STRING = function() {
    return this.getToken(FlinkSqlParser.STRING, 0);
};

AnsiNonReservedContext.prototype.STRUCT = function() {
    return this.getToken(FlinkSqlParser.STRUCT, 0);
};

AnsiNonReservedContext.prototype.SYSTEM = function() {
    return this.getToken(FlinkSqlParser.SYSTEM, 0);
};

AnsiNonReservedContext.prototype.SYSTEM_TIME = function() {
    return this.getToken(FlinkSqlParser.SYSTEM_TIME, 0);
};

AnsiNonReservedContext.prototype.TABLES = function() {
    return this.getToken(FlinkSqlParser.TABLES, 0);
};

AnsiNonReservedContext.prototype.TABLESAMPLE = function() {
    return this.getToken(FlinkSqlParser.TABLESAMPLE, 0);
};

AnsiNonReservedContext.prototype.TBLPROPERTIES = function() {
    return this.getToken(FlinkSqlParser.TBLPROPERTIES, 0);
};

AnsiNonReservedContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParser.TEMPORARY, 0);
};

AnsiNonReservedContext.prototype.TERMINATED = function() {
    return this.getToken(FlinkSqlParser.TERMINATED, 0);
};

AnsiNonReservedContext.prototype.TIME = function() {
    return this.getToken(FlinkSqlParser.TIME, 0);
};

AnsiNonReservedContext.prototype.TIMESTAMP = function() {
    return this.getToken(FlinkSqlParser.TIMESTAMP, 0);
};

AnsiNonReservedContext.prototype.TINYINT = function() {
    return this.getToken(FlinkSqlParser.TINYINT, 0);
};

AnsiNonReservedContext.prototype.TOUCH = function() {
    return this.getToken(FlinkSqlParser.TOUCH, 0);
};

AnsiNonReservedContext.prototype.TRANSACTION = function() {
    return this.getToken(FlinkSqlParser.TRANSACTION, 0);
};

AnsiNonReservedContext.prototype.TRANSACTIONS = function() {
    return this.getToken(FlinkSqlParser.TRANSACTIONS, 0);
};

AnsiNonReservedContext.prototype.TRANSFORM = function() {
    return this.getToken(FlinkSqlParser.TRANSFORM, 0);
};

AnsiNonReservedContext.prototype.TRUE = function() {
    return this.getToken(FlinkSqlParser.TRUE, 0);
};

AnsiNonReservedContext.prototype.TRUNCATE = function() {
    return this.getToken(FlinkSqlParser.TRUNCATE, 0);
};

AnsiNonReservedContext.prototype.UNARCHIVE = function() {
    return this.getToken(FlinkSqlParser.UNARCHIVE, 0);
};

AnsiNonReservedContext.prototype.UNBOUNDED = function() {
    return this.getToken(FlinkSqlParser.UNBOUNDED, 0);
};

AnsiNonReservedContext.prototype.UNCACHE = function() {
    return this.getToken(FlinkSqlParser.UNCACHE, 0);
};

AnsiNonReservedContext.prototype.UNLOCK = function() {
    return this.getToken(FlinkSqlParser.UNLOCK, 0);
};

AnsiNonReservedContext.prototype.UNSET = function() {
    return this.getToken(FlinkSqlParser.UNSET, 0);
};

AnsiNonReservedContext.prototype.UNNEST = function() {
    return this.getToken(FlinkSqlParser.UNNEST, 0);
};

AnsiNonReservedContext.prototype.USE = function() {
    return this.getToken(FlinkSqlParser.USE, 0);
};

AnsiNonReservedContext.prototype.VALUES = function() {
    return this.getToken(FlinkSqlParser.VALUES, 0);
};

AnsiNonReservedContext.prototype.VARBINARY = function() {
    return this.getToken(FlinkSqlParser.VARBINARY, 0);
};

AnsiNonReservedContext.prototype.VARCHAR = function() {
    return this.getToken(FlinkSqlParser.VARCHAR, 0);
};

AnsiNonReservedContext.prototype.VIEW = function() {
    return this.getToken(FlinkSqlParser.VIEW, 0);
};

AnsiNonReservedContext.prototype.VIEWS = function() {
    return this.getToken(FlinkSqlParser.VIEWS, 0);
};

AnsiNonReservedContext.prototype.WATERMARK = function() {
    return this.getToken(FlinkSqlParser.WATERMARK, 0);
};

AnsiNonReservedContext.prototype.WINDOW = function() {
    return this.getToken(FlinkSqlParser.WINDOW, 0);
};

AnsiNonReservedContext.prototype.WITHIN = function() {
    return this.getToken(FlinkSqlParser.WITHIN, 0);
};

AnsiNonReservedContext.prototype.WS = function() {
    return this.getToken(FlinkSqlParser.WS, 0);
};

AnsiNonReservedContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterAnsiNonReserved(this);
	}
};

AnsiNonReservedContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitAnsiNonReserved(this);
	}
};

AnsiNonReservedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitAnsiNonReserved(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.AnsiNonReservedContext = AnsiNonReservedContext;

FlinkSqlParser.prototype.ansiNonReserved = function() {

    var localctx = new AnsiNonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, FlinkSqlParser.RULE_ansiNonReserved);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1873;
        _la = this._input.LA(1);
        if(!(((((_la - 6)) & ~0x1f) == 0 && ((1 << (_la - 6)) & ((1 << (FlinkSqlParser.ADD - 6)) | (1 << (FlinkSqlParser.BY - 6)) | (1 << (FlinkSqlParser.GROUPING - 6)) | (1 << (FlinkSqlParser.SETS - 6)) | (1 << (FlinkSqlParser.CUBE - 6)) | (1 << (FlinkSqlParser.ROLLUP - 6)) | (1 << (FlinkSqlParser.LIMIT - 6)) | (1 << (FlinkSqlParser.AT - 6)) | (1 << (FlinkSqlParser.NO - 6)) | (1 << (FlinkSqlParser.EXISTS - 6)) | (1 << (FlinkSqlParser.BETWEEN - 6)) | (1 << (FlinkSqlParser.LIKE - 6)) | (1 << (FlinkSqlParser.RLIKE - 6)) | (1 << (FlinkSqlParser.TRUE - 6)) | (1 << (FlinkSqlParser.NULLS - 6)) | (1 << (FlinkSqlParser.ASC - 6)) | (1 << (FlinkSqlParser.DESC - 6)))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (FlinkSqlParser.INTERVAL - 38)) | (1 << (FlinkSqlParser.SEMI - 38)) | (1 << (FlinkSqlParser.PIVOT - 38)) | (1 << (FlinkSqlParser.LATERAL - 38)) | (1 << (FlinkSqlParser.WINDOW - 38)) | (1 << (FlinkSqlParser.OVER - 38)) | (1 << (FlinkSqlParser.PARTITION - 38)) | (1 << (FlinkSqlParser.RANGE - 38)) | (1 << (FlinkSqlParser.ROWS - 38)) | (1 << (FlinkSqlParser.UNBOUNDED - 38)) | (1 << (FlinkSqlParser.PRECEDING - 38)) | (1 << (FlinkSqlParser.FOLLOWING - 38)) | (1 << (FlinkSqlParser.CURRENT - 38)) | (1 << (FlinkSqlParser.FIRST - 38)) | (1 << (FlinkSqlParser.AFTER - 38)) | (1 << (FlinkSqlParser.LAST - 38)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (FlinkSqlParser.VALUES - 71)) | (1 << (FlinkSqlParser.DIRECTORY - 71)) | (1 << (FlinkSqlParser.VIEW - 71)) | (1 << (FlinkSqlParser.REPLACE - 71)) | (1 << (FlinkSqlParser.INSERT - 71)) | (1 << (FlinkSqlParser.DELETE - 71)) | (1 << (FlinkSqlParser.DESCRIBE - 71)) | (1 << (FlinkSqlParser.EXPLAIN - 71)) | (1 << (FlinkSqlParser.FORMAT - 71)) | (1 << (FlinkSqlParser.LOGICAL - 71)) | (1 << (FlinkSqlParser.CODEGEN - 71)) | (1 << (FlinkSqlParser.COST - 71)) | (1 << (FlinkSqlParser.SHOW - 71)) | (1 << (FlinkSqlParser.TABLES - 71)) | (1 << (FlinkSqlParser.COLUMNS - 71)) | (1 << (FlinkSqlParser.USE - 71)) | (1 << (FlinkSqlParser.PARTITIONS - 71)) | (1 << (FlinkSqlParser.FUNCTIONS - 71)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (FlinkSqlParser.DROP - 103)) | (1 << (FlinkSqlParser.SETMINUS - 103)) | (1 << (FlinkSqlParser.TABLESAMPLE - 103)) | (1 << (FlinkSqlParser.STRATIFY - 103)) | (1 << (FlinkSqlParser.ALTER - 103)) | (1 << (FlinkSqlParser.RENAME - 103)) | (1 << (FlinkSqlParser.STRUCT - 103)) | (1 << (FlinkSqlParser.COMMENT - 103)) | (1 << (FlinkSqlParser.SET - 103)) | (1 << (FlinkSqlParser.RESET - 103)) | (1 << (FlinkSqlParser.DATA - 103)) | (1 << (FlinkSqlParser.START - 103)) | (1 << (FlinkSqlParser.TRANSACTION - 103)) | (1 << (FlinkSqlParser.COMMIT - 103)) | (1 << (FlinkSqlParser.ROLLBACK - 103)) | (1 << (FlinkSqlParser.MACRO - 103)) | (1 << (FlinkSqlParser.IGNORE - 103)) | (1 << (FlinkSqlParser.IF - 103)) | (1 << (FlinkSqlParser.POSITION - 103)) | (1 << (FlinkSqlParser.EXTRACT - 103)) | (1 << (FlinkSqlParser.MINUS - 103)) | (1 << (FlinkSqlParser.DIV - 103)) | (1 << (FlinkSqlParser.PERCENTLIT - 103)) | (1 << (FlinkSqlParser.BUCKET - 103)) | (1 << (FlinkSqlParser.OUT - 103)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (FlinkSqlParser.OF - 135)) | (1 << (FlinkSqlParser.SORT - 135)) | (1 << (FlinkSqlParser.CLUSTER - 135)) | (1 << (FlinkSqlParser.DISTRIBUTE - 135)) | (1 << (FlinkSqlParser.OVERWRITE - 135)) | (1 << (FlinkSqlParser.TRANSFORM - 135)) | (1 << (FlinkSqlParser.REDUCE - 135)) | (1 << (FlinkSqlParser.SERDE - 135)) | (1 << (FlinkSqlParser.SERDEPROPERTIES - 135)) | (1 << (FlinkSqlParser.RECORDREADER - 135)) | (1 << (FlinkSqlParser.RECORDWRITER - 135)) | (1 << (FlinkSqlParser.DELIMITED - 135)) | (1 << (FlinkSqlParser.FIELDS - 135)) | (1 << (FlinkSqlParser.TERMINATED - 135)) | (1 << (FlinkSqlParser.COLLECTION - 135)) | (1 << (FlinkSqlParser.ITEMS - 135)) | (1 << (FlinkSqlParser.KEYS - 135)) | (1 << (FlinkSqlParser.ESCAPED - 135)) | (1 << (FlinkSqlParser.LINES - 135)) | (1 << (FlinkSqlParser.SEPARATED - 135)) | (1 << (FlinkSqlParser.FUNCTION - 135)) | (1 << (FlinkSqlParser.EXTENDED - 135)) | (1 << (FlinkSqlParser.REFRESH - 135)) | (1 << (FlinkSqlParser.CLEAR - 135)) | (1 << (FlinkSqlParser.CACHE - 135)) | (1 << (FlinkSqlParser.UNCACHE - 135)) | (1 << (FlinkSqlParser.LAZY - 135)) | (1 << (FlinkSqlParser.FORMATTED - 135)) | (1 << (FlinkSqlParser.GLOBAL - 135)) | (1 << (FlinkSqlParser.TEMPORARY - 135)) | (1 << (FlinkSqlParser.OPTIONS - 135)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (FlinkSqlParser.UNSET - 167)) | (1 << (FlinkSqlParser.TBLPROPERTIES - 167)) | (1 << (FlinkSqlParser.DBPROPERTIES - 167)) | (1 << (FlinkSqlParser.BUCKETS - 167)) | (1 << (FlinkSqlParser.SKEWED - 167)) | (1 << (FlinkSqlParser.STORED - 167)) | (1 << (FlinkSqlParser.DIRECTORIES - 167)) | (1 << (FlinkSqlParser.LOCATION - 167)) | (1 << (FlinkSqlParser.EXCHANGE - 167)) | (1 << (FlinkSqlParser.ARCHIVE - 167)) | (1 << (FlinkSqlParser.UNARCHIVE - 167)) | (1 << (FlinkSqlParser.FILEFORMAT - 167)) | (1 << (FlinkSqlParser.TOUCH - 167)) | (1 << (FlinkSqlParser.COMPACT - 167)) | (1 << (FlinkSqlParser.CONCATENATE - 167)) | (1 << (FlinkSqlParser.CHANGE - 167)) | (1 << (FlinkSqlParser.CASCADE - 167)) | (1 << (FlinkSqlParser.RESTRICT - 167)) | (1 << (FlinkSqlParser.CLUSTERED - 167)) | (1 << (FlinkSqlParser.SORTED - 167)) | (1 << (FlinkSqlParser.PURGE - 167)) | (1 << (FlinkSqlParser.INPUTFORMAT - 167)) | (1 << (FlinkSqlParser.OUTPUTFORMAT - 167)) | (1 << (FlinkSqlParser.DATABASE - 167)) | (1 << (FlinkSqlParser.DATABASES - 167)) | (1 << (FlinkSqlParser.DFS - 167)) | (1 << (FlinkSqlParser.TRUNCATE - 167)) | (1 << (FlinkSqlParser.ANALYZE - 167)) | (1 << (FlinkSqlParser.COMPUTE - 167)) | (1 << (FlinkSqlParser.LIST - 167)) | (1 << (FlinkSqlParser.STATISTICS - 167)))) !== 0) || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (FlinkSqlParser.PARTITIONED - 199)) | (1 << (FlinkSqlParser.EXTERNAL - 199)) | (1 << (FlinkSqlParser.DEFINED - 199)) | (1 << (FlinkSqlParser.REVOKE - 199)) | (1 << (FlinkSqlParser.LOCK - 199)) | (1 << (FlinkSqlParser.UNLOCK - 199)) | (1 << (FlinkSqlParser.MSCK - 199)) | (1 << (FlinkSqlParser.REPAIR - 199)) | (1 << (FlinkSqlParser.RECOVER - 199)) | (1 << (FlinkSqlParser.EXPORT - 199)) | (1 << (FlinkSqlParser.IMPORT - 199)) | (1 << (FlinkSqlParser.LOAD - 199)) | (1 << (FlinkSqlParser.ROLE - 199)) | (1 << (FlinkSqlParser.ROLES - 199)) | (1 << (FlinkSqlParser.COMPACTIONS - 199)) | (1 << (FlinkSqlParser.PRINCIPALS - 199)) | (1 << (FlinkSqlParser.TRANSACTIONS - 199)) | (1 << (FlinkSqlParser.INDEX - 199)) | (1 << (FlinkSqlParser.INDEXES - 199)) | (1 << (FlinkSqlParser.LOCKS - 199)) | (1 << (FlinkSqlParser.OPTION - 199)) | (1 << (FlinkSqlParser.ANTI - 199)) | (1 << (FlinkSqlParser.LOCAL - 199)) | (1 << (FlinkSqlParser.INPATH - 199)) | (1 << (FlinkSqlParser.WATERMARK - 199)) | (1 << (FlinkSqlParser.UNNEST - 199)) | (1 << (FlinkSqlParser.MATCH - 199)) | (1 << (FlinkSqlParser.NEXT - 199)) | (1 << (FlinkSqlParser.WITHIN - 199)) | (1 << (FlinkSqlParser.WS - 199)))) !== 0) || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (FlinkSqlParser.SYSTEM - 231)) | (1 << (FlinkSqlParser.INCLUDING - 231)) | (1 << (FlinkSqlParser.EXCLUDING - 231)) | (1 << (FlinkSqlParser.CONSTRAINTS - 231)) | (1 << (FlinkSqlParser.GENERATED - 231)) | (1 << (FlinkSqlParser.CATALOG - 231)) | (1 << (FlinkSqlParser.LANGUAGE - 231)) | (1 << (FlinkSqlParser.CATALOGS - 231)) | (1 << (FlinkSqlParser.VIEWS - 231)) | (1 << (FlinkSqlParser.KEY - 231)) | (1 << (FlinkSqlParser.PERIOD - 231)) | (1 << (FlinkSqlParser.SYSTEM_TIME - 231)) | (1 << (FlinkSqlParser.STRING - 231)))) !== 0) || ((((_la - 263)) & ~0x1f) == 0 && ((1 << (_la - 263)) & ((1 << (FlinkSqlParser.ARRAY - 263)) | (1 << (FlinkSqlParser.MAP - 263)) | (1 << (FlinkSqlParser.CHAR - 263)) | (1 << (FlinkSqlParser.VARCHAR - 263)) | (1 << (FlinkSqlParser.BINARY - 263)) | (1 << (FlinkSqlParser.VARBINARY - 263)) | (1 << (FlinkSqlParser.BYTES - 263)) | (1 << (FlinkSqlParser.DECIMAL - 263)) | (1 << (FlinkSqlParser.TINYINT - 263)) | (1 << (FlinkSqlParser.SMALLINT - 263)) | (1 << (FlinkSqlParser.INT - 263)) | (1 << (FlinkSqlParser.BIGINT - 263)) | (1 << (FlinkSqlParser.FLOAT - 263)) | (1 << (FlinkSqlParser.DOUBLE - 263)) | (1 << (FlinkSqlParser.DATE - 263)) | (1 << (FlinkSqlParser.TIME - 263)) | (1 << (FlinkSqlParser.TIMESTAMP - 263)) | (1 << (FlinkSqlParser.MULTISET - 263)) | (1 << (FlinkSqlParser.BOOLEAN - 263)) | (1 << (FlinkSqlParser.RAW - 263)) | (1 << (FlinkSqlParser.ROW - 263)) | (1 << (FlinkSqlParser.NULL - 263)) | (1 << (FlinkSqlParser.DATETIME - 263)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StrictNonReservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_strictNonReserved;
    return this;
}

StrictNonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StrictNonReservedContext.prototype.constructor = StrictNonReservedContext;

StrictNonReservedContext.prototype.ANTI = function() {
    return this.getToken(FlinkSqlParser.ANTI, 0);
};

StrictNonReservedContext.prototype.CROSS = function() {
    return this.getToken(FlinkSqlParser.CROSS, 0);
};

StrictNonReservedContext.prototype.EXCEPT = function() {
    return this.getToken(FlinkSqlParser.EXCEPT, 0);
};

StrictNonReservedContext.prototype.FULL = function() {
    return this.getToken(FlinkSqlParser.FULL, 0);
};

StrictNonReservedContext.prototype.INNER = function() {
    return this.getToken(FlinkSqlParser.INNER, 0);
};

StrictNonReservedContext.prototype.INTERSECT = function() {
    return this.getToken(FlinkSqlParser.INTERSECT, 0);
};

StrictNonReservedContext.prototype.JOIN = function() {
    return this.getToken(FlinkSqlParser.JOIN, 0);
};

StrictNonReservedContext.prototype.LEFT = function() {
    return this.getToken(FlinkSqlParser.LEFT, 0);
};

StrictNonReservedContext.prototype.NATURAL = function() {
    return this.getToken(FlinkSqlParser.NATURAL, 0);
};

StrictNonReservedContext.prototype.ON = function() {
    return this.getToken(FlinkSqlParser.ON, 0);
};

StrictNonReservedContext.prototype.RIGHT = function() {
    return this.getToken(FlinkSqlParser.RIGHT, 0);
};

StrictNonReservedContext.prototype.SEMI = function() {
    return this.getToken(FlinkSqlParser.SEMI, 0);
};

StrictNonReservedContext.prototype.SETMINUS = function() {
    return this.getToken(FlinkSqlParser.SETMINUS, 0);
};

StrictNonReservedContext.prototype.UNION = function() {
    return this.getToken(FlinkSqlParser.UNION, 0);
};

StrictNonReservedContext.prototype.USING = function() {
    return this.getToken(FlinkSqlParser.USING, 0);
};

StrictNonReservedContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterStrictNonReserved(this);
	}
};

StrictNonReservedContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitStrictNonReserved(this);
	}
};

StrictNonReservedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitStrictNonReserved(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.StrictNonReservedContext = StrictNonReservedContext;

FlinkSqlParser.prototype.strictNonReserved = function() {

    var localctx = new StrictNonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, FlinkSqlParser.RULE_strictNonReserved);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1875;
        _la = this._input.LA(1);
        if(!(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (FlinkSqlParser.JOIN - 45)) | (1 << (FlinkSqlParser.CROSS - 45)) | (1 << (FlinkSqlParser.INNER - 45)) | (1 << (FlinkSqlParser.LEFT - 45)) | (1 << (FlinkSqlParser.SEMI - 45)) | (1 << (FlinkSqlParser.RIGHT - 45)) | (1 << (FlinkSqlParser.FULL - 45)) | (1 << (FlinkSqlParser.NATURAL - 45)) | (1 << (FlinkSqlParser.ON - 45)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (FlinkSqlParser.UNION - 104)) | (1 << (FlinkSqlParser.EXCEPT - 104)) | (1 << (FlinkSqlParser.SETMINUS - 104)) | (1 << (FlinkSqlParser.INTERSECT - 104)))) !== 0) || _la===FlinkSqlParser.USING || _la===FlinkSqlParser.ANTI)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NonReservedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FlinkSqlParser.RULE_nonReserved;
    return this;
}

NonReservedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonReservedContext.prototype.constructor = NonReservedContext;

NonReservedContext.prototype.ADD = function() {
    return this.getToken(FlinkSqlParser.ADD, 0);
};

NonReservedContext.prototype.AFTER = function() {
    return this.getToken(FlinkSqlParser.AFTER, 0);
};

NonReservedContext.prototype.ALL = function() {
    return this.getToken(FlinkSqlParser.ALL, 0);
};

NonReservedContext.prototype.ALTER = function() {
    return this.getToken(FlinkSqlParser.ALTER, 0);
};

NonReservedContext.prototype.ANALYZE = function() {
    return this.getToken(FlinkSqlParser.ANALYZE, 0);
};

NonReservedContext.prototype.AND = function() {
    return this.getToken(FlinkSqlParser.AND, 0);
};

NonReservedContext.prototype.ANY = function() {
    return this.getToken(FlinkSqlParser.ANY, 0);
};

NonReservedContext.prototype.COLUMNS = function() {
    return this.getToken(FlinkSqlParser.COLUMNS, 0);
};

NonReservedContext.prototype.ARRAY = function() {
    return this.getToken(FlinkSqlParser.ARRAY, 0);
};

NonReservedContext.prototype.AS = function() {
    return this.getToken(FlinkSqlParser.AS, 0);
};

NonReservedContext.prototype.ASC = function() {
    return this.getToken(FlinkSqlParser.ASC, 0);
};

NonReservedContext.prototype.AT = function() {
    return this.getToken(FlinkSqlParser.AT, 0);
};

NonReservedContext.prototype.BETWEEN = function() {
    return this.getToken(FlinkSqlParser.BETWEEN, 0);
};

NonReservedContext.prototype.BIGINT = function() {
    return this.getToken(FlinkSqlParser.BIGINT, 0);
};

NonReservedContext.prototype.BINARY = function() {
    return this.getToken(FlinkSqlParser.BINARY, 0);
};

NonReservedContext.prototype.BOOLEAN = function() {
    return this.getToken(FlinkSqlParser.BOOLEAN, 0);
};

NonReservedContext.prototype.BOTH = function() {
    return this.getToken(FlinkSqlParser.BOTH, 0);
};

NonReservedContext.prototype.BUCKET = function() {
    return this.getToken(FlinkSqlParser.BUCKET, 0);
};

NonReservedContext.prototype.BUCKETS = function() {
    return this.getToken(FlinkSqlParser.BUCKETS, 0);
};

NonReservedContext.prototype.BY = function() {
    return this.getToken(FlinkSqlParser.BY, 0);
};

NonReservedContext.prototype.BYTES = function() {
    return this.getToken(FlinkSqlParser.BYTES, 0);
};

NonReservedContext.prototype.CACHE = function() {
    return this.getToken(FlinkSqlParser.CACHE, 0);
};

NonReservedContext.prototype.CASCADE = function() {
    return this.getToken(FlinkSqlParser.CASCADE, 0);
};

NonReservedContext.prototype.CASE = function() {
    return this.getToken(FlinkSqlParser.CASE, 0);
};

NonReservedContext.prototype.CAST = function() {
    return this.getToken(FlinkSqlParser.CAST, 0);
};

NonReservedContext.prototype.CATALOG = function() {
    return this.getToken(FlinkSqlParser.CATALOG, 0);
};

NonReservedContext.prototype.CATALOGS = function() {
    return this.getToken(FlinkSqlParser.CATALOGS, 0);
};

NonReservedContext.prototype.CHANGE = function() {
    return this.getToken(FlinkSqlParser.CHANGE, 0);
};

NonReservedContext.prototype.CHAR = function() {
    return this.getToken(FlinkSqlParser.CHAR, 0);
};

NonReservedContext.prototype.CLEAR = function() {
    return this.getToken(FlinkSqlParser.CLEAR, 0);
};

NonReservedContext.prototype.CLUSTER = function() {
    return this.getToken(FlinkSqlParser.CLUSTER, 0);
};

NonReservedContext.prototype.CLUSTERED = function() {
    return this.getToken(FlinkSqlParser.CLUSTERED, 0);
};

NonReservedContext.prototype.CODEGEN = function() {
    return this.getToken(FlinkSqlParser.CODEGEN, 0);
};

NonReservedContext.prototype.COLLECTION = function() {
    return this.getToken(FlinkSqlParser.COLLECTION, 0);
};

NonReservedContext.prototype.COLUMN = function() {
    return this.getToken(FlinkSqlParser.COLUMN, 0);
};

NonReservedContext.prototype.COMMENT = function() {
    return this.getToken(FlinkSqlParser.COMMENT, 0);
};

NonReservedContext.prototype.COMMIT = function() {
    return this.getToken(FlinkSqlParser.COMMIT, 0);
};

NonReservedContext.prototype.COMPACT = function() {
    return this.getToken(FlinkSqlParser.COMPACT, 0);
};

NonReservedContext.prototype.COMPACTIONS = function() {
    return this.getToken(FlinkSqlParser.COMPACTIONS, 0);
};

NonReservedContext.prototype.COMPUTE = function() {
    return this.getToken(FlinkSqlParser.COMPUTE, 0);
};

NonReservedContext.prototype.CONCATENATE = function() {
    return this.getToken(FlinkSqlParser.CONCATENATE, 0);
};

NonReservedContext.prototype.CONSTRAINT = function() {
    return this.getToken(FlinkSqlParser.CONSTRAINT, 0);
};

NonReservedContext.prototype.CONSTRAINTS = function() {
    return this.getToken(FlinkSqlParser.CONSTRAINTS, 0);
};

NonReservedContext.prototype.COST = function() {
    return this.getToken(FlinkSqlParser.COST, 0);
};

NonReservedContext.prototype.CREATE = function() {
    return this.getToken(FlinkSqlParser.CREATE, 0);
};

NonReservedContext.prototype.CUBE = function() {
    return this.getToken(FlinkSqlParser.CUBE, 0);
};

NonReservedContext.prototype.CURRENT = function() {
    return this.getToken(FlinkSqlParser.CURRENT, 0);
};

NonReservedContext.prototype.DATA = function() {
    return this.getToken(FlinkSqlParser.DATA, 0);
};

NonReservedContext.prototype.DATABASE = function() {
    return this.getToken(FlinkSqlParser.DATABASE, 0);
};

NonReservedContext.prototype.DATABASES = function() {
    return this.getToken(FlinkSqlParser.DATABASES, 0);
};

NonReservedContext.prototype.DATE = function() {
    return this.getToken(FlinkSqlParser.DATE, 0);
};

NonReservedContext.prototype.DATETIME = function() {
    return this.getToken(FlinkSqlParser.DATETIME, 0);
};

NonReservedContext.prototype.DBPROPERTIES = function() {
    return this.getToken(FlinkSqlParser.DBPROPERTIES, 0);
};

NonReservedContext.prototype.DECIMAL = function() {
    return this.getToken(FlinkSqlParser.DECIMAL, 0);
};

NonReservedContext.prototype.DEFINED = function() {
    return this.getToken(FlinkSqlParser.DEFINED, 0);
};

NonReservedContext.prototype.DELETE = function() {
    return this.getToken(FlinkSqlParser.DELETE, 0);
};

NonReservedContext.prototype.DELIMITED = function() {
    return this.getToken(FlinkSqlParser.DELIMITED, 0);
};

NonReservedContext.prototype.DESC = function() {
    return this.getToken(FlinkSqlParser.DESC, 0);
};

NonReservedContext.prototype.DESCRIBE = function() {
    return this.getToken(FlinkSqlParser.DESCRIBE, 0);
};

NonReservedContext.prototype.DFS = function() {
    return this.getToken(FlinkSqlParser.DFS, 0);
};

NonReservedContext.prototype.DIRECTORIES = function() {
    return this.getToken(FlinkSqlParser.DIRECTORIES, 0);
};

NonReservedContext.prototype.DIRECTORY = function() {
    return this.getToken(FlinkSqlParser.DIRECTORY, 0);
};

NonReservedContext.prototype.DISTINCT = function() {
    return this.getToken(FlinkSqlParser.DISTINCT, 0);
};

NonReservedContext.prototype.DISTRIBUTE = function() {
    return this.getToken(FlinkSqlParser.DISTRIBUTE, 0);
};

NonReservedContext.prototype.DIV = function() {
    return this.getToken(FlinkSqlParser.DIV, 0);
};

NonReservedContext.prototype.DOUBLE = function() {
    return this.getToken(FlinkSqlParser.DOUBLE, 0);
};

NonReservedContext.prototype.DROP = function() {
    return this.getToken(FlinkSqlParser.DROP, 0);
};

NonReservedContext.prototype.ELSE = function() {
    return this.getToken(FlinkSqlParser.ELSE, 0);
};

NonReservedContext.prototype.END = function() {
    return this.getToken(FlinkSqlParser.END, 0);
};

NonReservedContext.prototype.ESCAPED = function() {
    return this.getToken(FlinkSqlParser.ESCAPED, 0);
};

NonReservedContext.prototype.EXCHANGE = function() {
    return this.getToken(FlinkSqlParser.EXCHANGE, 0);
};

NonReservedContext.prototype.EXCLUDING = function() {
    return this.getToken(FlinkSqlParser.EXCLUDING, 0);
};

NonReservedContext.prototype.EXISTS = function() {
    return this.getToken(FlinkSqlParser.EXISTS, 0);
};

NonReservedContext.prototype.EXPLAIN = function() {
    return this.getToken(FlinkSqlParser.EXPLAIN, 0);
};

NonReservedContext.prototype.EXPORT = function() {
    return this.getToken(FlinkSqlParser.EXPORT, 0);
};

NonReservedContext.prototype.EXTENDED = function() {
    return this.getToken(FlinkSqlParser.EXTENDED, 0);
};

NonReservedContext.prototype.EXTERNAL = function() {
    return this.getToken(FlinkSqlParser.EXTERNAL, 0);
};

NonReservedContext.prototype.EXTRACT = function() {
    return this.getToken(FlinkSqlParser.EXTRACT, 0);
};

NonReservedContext.prototype.FALSE = function() {
    return this.getToken(FlinkSqlParser.FALSE, 0);
};

NonReservedContext.prototype.FIELDS = function() {
    return this.getToken(FlinkSqlParser.FIELDS, 0);
};

NonReservedContext.prototype.FILEFORMAT = function() {
    return this.getToken(FlinkSqlParser.FILEFORMAT, 0);
};

NonReservedContext.prototype.FIRST = function() {
    return this.getToken(FlinkSqlParser.FIRST, 0);
};

NonReservedContext.prototype.FLOAT = function() {
    return this.getToken(FlinkSqlParser.FLOAT, 0);
};

NonReservedContext.prototype.FOLLOWING = function() {
    return this.getToken(FlinkSqlParser.FOLLOWING, 0);
};

NonReservedContext.prototype.FOR = function() {
    return this.getToken(FlinkSqlParser.FOR, 0);
};

NonReservedContext.prototype.FORMAT = function() {
    return this.getToken(FlinkSqlParser.FORMAT, 0);
};

NonReservedContext.prototype.FORMATTED = function() {
    return this.getToken(FlinkSqlParser.FORMATTED, 0);
};

NonReservedContext.prototype.FROM = function() {
    return this.getToken(FlinkSqlParser.FROM, 0);
};

NonReservedContext.prototype.FUNCTION = function() {
    return this.getToken(FlinkSqlParser.FUNCTION, 0);
};

NonReservedContext.prototype.FUNCTIONS = function() {
    return this.getToken(FlinkSqlParser.FUNCTIONS, 0);
};

NonReservedContext.prototype.GENERATED = function() {
    return this.getToken(FlinkSqlParser.GENERATED, 0);
};

NonReservedContext.prototype.GLOBAL = function() {
    return this.getToken(FlinkSqlParser.GLOBAL, 0);
};

NonReservedContext.prototype.GRANT = function() {
    return this.getToken(FlinkSqlParser.GRANT, 0);
};

NonReservedContext.prototype.GROUP = function() {
    return this.getToken(FlinkSqlParser.GROUP, 0);
};

NonReservedContext.prototype.GROUPING = function() {
    return this.getToken(FlinkSqlParser.GROUPING, 0);
};

NonReservedContext.prototype.HAVING = function() {
    return this.getToken(FlinkSqlParser.HAVING, 0);
};

NonReservedContext.prototype.IF = function() {
    return this.getToken(FlinkSqlParser.IF, 0);
};

NonReservedContext.prototype.IGNORE = function() {
    return this.getToken(FlinkSqlParser.IGNORE, 0);
};

NonReservedContext.prototype.IMPORT = function() {
    return this.getToken(FlinkSqlParser.IMPORT, 0);
};

NonReservedContext.prototype.IN = function() {
    return this.getToken(FlinkSqlParser.IN, 0);
};

NonReservedContext.prototype.INCLUDING = function() {
    return this.getToken(FlinkSqlParser.INCLUDING, 0);
};

NonReservedContext.prototype.INDEX = function() {
    return this.getToken(FlinkSqlParser.INDEX, 0);
};

NonReservedContext.prototype.INDEXES = function() {
    return this.getToken(FlinkSqlParser.INDEXES, 0);
};

NonReservedContext.prototype.INPATH = function() {
    return this.getToken(FlinkSqlParser.INPATH, 0);
};

NonReservedContext.prototype.INPUTFORMAT = function() {
    return this.getToken(FlinkSqlParser.INPUTFORMAT, 0);
};

NonReservedContext.prototype.INSERT = function() {
    return this.getToken(FlinkSqlParser.INSERT, 0);
};

NonReservedContext.prototype.INT = function() {
    return this.getToken(FlinkSqlParser.INT, 0);
};

NonReservedContext.prototype.INTERVAL = function() {
    return this.getToken(FlinkSqlParser.INTERVAL, 0);
};

NonReservedContext.prototype.INTO = function() {
    return this.getToken(FlinkSqlParser.INTO, 0);
};

NonReservedContext.prototype.IS = function() {
    return this.getToken(FlinkSqlParser.IS, 0);
};

NonReservedContext.prototype.ITEMS = function() {
    return this.getToken(FlinkSqlParser.ITEMS, 0);
};

NonReservedContext.prototype.KEY = function() {
    return this.getToken(FlinkSqlParser.KEY, 0);
};

NonReservedContext.prototype.KEYS = function() {
    return this.getToken(FlinkSqlParser.KEYS, 0);
};

NonReservedContext.prototype.LANGUAGE = function() {
    return this.getToken(FlinkSqlParser.LANGUAGE, 0);
};

NonReservedContext.prototype.LAST = function() {
    return this.getToken(FlinkSqlParser.LAST, 0);
};

NonReservedContext.prototype.LATERAL = function() {
    return this.getToken(FlinkSqlParser.LATERAL, 0);
};

NonReservedContext.prototype.LAZY = function() {
    return this.getToken(FlinkSqlParser.LAZY, 0);
};

NonReservedContext.prototype.LEADING = function() {
    return this.getToken(FlinkSqlParser.LEADING, 0);
};

NonReservedContext.prototype.LIKE = function() {
    return this.getToken(FlinkSqlParser.LIKE, 0);
};

NonReservedContext.prototype.LIMIT = function() {
    return this.getToken(FlinkSqlParser.LIMIT, 0);
};

NonReservedContext.prototype.LINES = function() {
    return this.getToken(FlinkSqlParser.LINES, 0);
};

NonReservedContext.prototype.LIST = function() {
    return this.getToken(FlinkSqlParser.LIST, 0);
};

NonReservedContext.prototype.LOAD = function() {
    return this.getToken(FlinkSqlParser.LOAD, 0);
};

NonReservedContext.prototype.LOCAL = function() {
    return this.getToken(FlinkSqlParser.LOCAL, 0);
};

NonReservedContext.prototype.LOCATION = function() {
    return this.getToken(FlinkSqlParser.LOCATION, 0);
};

NonReservedContext.prototype.LOCK = function() {
    return this.getToken(FlinkSqlParser.LOCK, 0);
};

NonReservedContext.prototype.LOCKS = function() {
    return this.getToken(FlinkSqlParser.LOCKS, 0);
};

NonReservedContext.prototype.LOGICAL = function() {
    return this.getToken(FlinkSqlParser.LOGICAL, 0);
};

NonReservedContext.prototype.MACRO = function() {
    return this.getToken(FlinkSqlParser.MACRO, 0);
};

NonReservedContext.prototype.MAP = function() {
    return this.getToken(FlinkSqlParser.MAP, 0);
};

NonReservedContext.prototype.MATCH = function() {
    return this.getToken(FlinkSqlParser.MATCH, 0);
};

NonReservedContext.prototype.MINUS = function() {
    return this.getToken(FlinkSqlParser.MINUS, 0);
};

NonReservedContext.prototype.MSCK = function() {
    return this.getToken(FlinkSqlParser.MSCK, 0);
};

NonReservedContext.prototype.MULTISET = function() {
    return this.getToken(FlinkSqlParser.MULTISET, 0);
};

NonReservedContext.prototype.NEXT = function() {
    return this.getToken(FlinkSqlParser.NEXT, 0);
};

NonReservedContext.prototype.NO = function() {
    return this.getToken(FlinkSqlParser.NO, 0);
};

NonReservedContext.prototype.NOT = function() {
    return this.getToken(FlinkSqlParser.NOT, 0);
};

NonReservedContext.prototype.NULL = function() {
    return this.getToken(FlinkSqlParser.NULL, 0);
};

NonReservedContext.prototype.NULLS = function() {
    return this.getToken(FlinkSqlParser.NULLS, 0);
};

NonReservedContext.prototype.OF = function() {
    return this.getToken(FlinkSqlParser.OF, 0);
};

NonReservedContext.prototype.OPTION = function() {
    return this.getToken(FlinkSqlParser.OPTION, 0);
};

NonReservedContext.prototype.OPTIONS = function() {
    return this.getToken(FlinkSqlParser.OPTIONS, 0);
};

NonReservedContext.prototype.OR = function() {
    return this.getToken(FlinkSqlParser.OR, 0);
};

NonReservedContext.prototype.ORDER = function() {
    return this.getToken(FlinkSqlParser.ORDER, 0);
};

NonReservedContext.prototype.OUT = function() {
    return this.getToken(FlinkSqlParser.OUT, 0);
};

NonReservedContext.prototype.OUTER = function() {
    return this.getToken(FlinkSqlParser.OUTER, 0);
};

NonReservedContext.prototype.OUTPUTFORMAT = function() {
    return this.getToken(FlinkSqlParser.OUTPUTFORMAT, 0);
};

NonReservedContext.prototype.OVER = function() {
    return this.getToken(FlinkSqlParser.OVER, 0);
};

NonReservedContext.prototype.OVERWRITE = function() {
    return this.getToken(FlinkSqlParser.OVERWRITE, 0);
};

NonReservedContext.prototype.PARTITION = function() {
    return this.getToken(FlinkSqlParser.PARTITION, 0);
};

NonReservedContext.prototype.PARTITIONED = function() {
    return this.getToken(FlinkSqlParser.PARTITIONED, 0);
};

NonReservedContext.prototype.PARTITIONS = function() {
    return this.getToken(FlinkSqlParser.PARTITIONS, 0);
};

NonReservedContext.prototype.PERCENTLIT = function() {
    return this.getToken(FlinkSqlParser.PERCENTLIT, 0);
};

NonReservedContext.prototype.PERIOD = function() {
    return this.getToken(FlinkSqlParser.PERIOD, 0);
};

NonReservedContext.prototype.PIVOT = function() {
    return this.getToken(FlinkSqlParser.PIVOT, 0);
};

NonReservedContext.prototype.POSITION = function() {
    return this.getToken(FlinkSqlParser.POSITION, 0);
};

NonReservedContext.prototype.PRECEDING = function() {
    return this.getToken(FlinkSqlParser.PRECEDING, 0);
};

NonReservedContext.prototype.PRIMARY = function() {
    return this.getToken(FlinkSqlParser.PRIMARY, 0);
};

NonReservedContext.prototype.PRINCIPALS = function() {
    return this.getToken(FlinkSqlParser.PRINCIPALS, 0);
};

NonReservedContext.prototype.PURGE = function() {
    return this.getToken(FlinkSqlParser.PURGE, 0);
};

NonReservedContext.prototype.RANGE = function() {
    return this.getToken(FlinkSqlParser.RANGE, 0);
};

NonReservedContext.prototype.RAW = function() {
    return this.getToken(FlinkSqlParser.RAW, 0);
};

NonReservedContext.prototype.RECORDREADER = function() {
    return this.getToken(FlinkSqlParser.RECORDREADER, 0);
};

NonReservedContext.prototype.RECORDWRITER = function() {
    return this.getToken(FlinkSqlParser.RECORDWRITER, 0);
};

NonReservedContext.prototype.RECOVER = function() {
    return this.getToken(FlinkSqlParser.RECOVER, 0);
};

NonReservedContext.prototype.REDUCE = function() {
    return this.getToken(FlinkSqlParser.REDUCE, 0);
};

NonReservedContext.prototype.REFRESH = function() {
    return this.getToken(FlinkSqlParser.REFRESH, 0);
};

NonReservedContext.prototype.RENAME = function() {
    return this.getToken(FlinkSqlParser.RENAME, 0);
};

NonReservedContext.prototype.REPAIR = function() {
    return this.getToken(FlinkSqlParser.REPAIR, 0);
};

NonReservedContext.prototype.REPLACE = function() {
    return this.getToken(FlinkSqlParser.REPLACE, 0);
};

NonReservedContext.prototype.RESET = function() {
    return this.getToken(FlinkSqlParser.RESET, 0);
};

NonReservedContext.prototype.RESTRICT = function() {
    return this.getToken(FlinkSqlParser.RESTRICT, 0);
};

NonReservedContext.prototype.REVOKE = function() {
    return this.getToken(FlinkSqlParser.REVOKE, 0);
};

NonReservedContext.prototype.RLIKE = function() {
    return this.getToken(FlinkSqlParser.RLIKE, 0);
};

NonReservedContext.prototype.ROLE = function() {
    return this.getToken(FlinkSqlParser.ROLE, 0);
};

NonReservedContext.prototype.ROLES = function() {
    return this.getToken(FlinkSqlParser.ROLES, 0);
};

NonReservedContext.prototype.ROLLBACK = function() {
    return this.getToken(FlinkSqlParser.ROLLBACK, 0);
};

NonReservedContext.prototype.ROLLUP = function() {
    return this.getToken(FlinkSqlParser.ROLLUP, 0);
};

NonReservedContext.prototype.ROW = function() {
    return this.getToken(FlinkSqlParser.ROW, 0);
};

NonReservedContext.prototype.ROWS = function() {
    return this.getToken(FlinkSqlParser.ROWS, 0);
};

NonReservedContext.prototype.SELECT = function() {
    return this.getToken(FlinkSqlParser.SELECT, 0);
};

NonReservedContext.prototype.SEPARATED = function() {
    return this.getToken(FlinkSqlParser.SEPARATED, 0);
};

NonReservedContext.prototype.SERDE = function() {
    return this.getToken(FlinkSqlParser.SERDE, 0);
};

NonReservedContext.prototype.SERDEPROPERTIES = function() {
    return this.getToken(FlinkSqlParser.SERDEPROPERTIES, 0);
};

NonReservedContext.prototype.SET = function() {
    return this.getToken(FlinkSqlParser.SET, 0);
};

NonReservedContext.prototype.SETS = function() {
    return this.getToken(FlinkSqlParser.SETS, 0);
};

NonReservedContext.prototype.SHOW = function() {
    return this.getToken(FlinkSqlParser.SHOW, 0);
};

NonReservedContext.prototype.SKEWED = function() {
    return this.getToken(FlinkSqlParser.SKEWED, 0);
};

NonReservedContext.prototype.SMALLINT = function() {
    return this.getToken(FlinkSqlParser.SMALLINT, 0);
};

NonReservedContext.prototype.SORT = function() {
    return this.getToken(FlinkSqlParser.SORT, 0);
};

NonReservedContext.prototype.SORTED = function() {
    return this.getToken(FlinkSqlParser.SORTED, 0);
};

NonReservedContext.prototype.START = function() {
    return this.getToken(FlinkSqlParser.START, 0);
};

NonReservedContext.prototype.STATISTICS = function() {
    return this.getToken(FlinkSqlParser.STATISTICS, 0);
};

NonReservedContext.prototype.STORED = function() {
    return this.getToken(FlinkSqlParser.STORED, 0);
};

NonReservedContext.prototype.STRATIFY = function() {
    return this.getToken(FlinkSqlParser.STRATIFY, 0);
};

NonReservedContext.prototype.STRING = function() {
    return this.getToken(FlinkSqlParser.STRING, 0);
};

NonReservedContext.prototype.STRUCT = function() {
    return this.getToken(FlinkSqlParser.STRUCT, 0);
};

NonReservedContext.prototype.SYSTEM = function() {
    return this.getToken(FlinkSqlParser.SYSTEM, 0);
};

NonReservedContext.prototype.SYSTEM_TIME = function() {
    return this.getToken(FlinkSqlParser.SYSTEM_TIME, 0);
};

NonReservedContext.prototype.TABLE = function() {
    return this.getToken(FlinkSqlParser.TABLE, 0);
};

NonReservedContext.prototype.TABLES = function() {
    return this.getToken(FlinkSqlParser.TABLES, 0);
};

NonReservedContext.prototype.TABLESAMPLE = function() {
    return this.getToken(FlinkSqlParser.TABLESAMPLE, 0);
};

NonReservedContext.prototype.TBLPROPERTIES = function() {
    return this.getToken(FlinkSqlParser.TBLPROPERTIES, 0);
};

NonReservedContext.prototype.TEMPORARY = function() {
    return this.getToken(FlinkSqlParser.TEMPORARY, 0);
};

NonReservedContext.prototype.TERMINATED = function() {
    return this.getToken(FlinkSqlParser.TERMINATED, 0);
};

NonReservedContext.prototype.THEN = function() {
    return this.getToken(FlinkSqlParser.THEN, 0);
};

NonReservedContext.prototype.TIME = function() {
    return this.getToken(FlinkSqlParser.TIME, 0);
};

NonReservedContext.prototype.TIMESTAMP = function() {
    return this.getToken(FlinkSqlParser.TIMESTAMP, 0);
};

NonReservedContext.prototype.TINYINT = function() {
    return this.getToken(FlinkSqlParser.TINYINT, 0);
};

NonReservedContext.prototype.TO = function() {
    return this.getToken(FlinkSqlParser.TO, 0);
};

NonReservedContext.prototype.TOUCH = function() {
    return this.getToken(FlinkSqlParser.TOUCH, 0);
};

NonReservedContext.prototype.TRAILING = function() {
    return this.getToken(FlinkSqlParser.TRAILING, 0);
};

NonReservedContext.prototype.TRANSACTION = function() {
    return this.getToken(FlinkSqlParser.TRANSACTION, 0);
};

NonReservedContext.prototype.TRANSACTIONS = function() {
    return this.getToken(FlinkSqlParser.TRANSACTIONS, 0);
};

NonReservedContext.prototype.TRANSFORM = function() {
    return this.getToken(FlinkSqlParser.TRANSFORM, 0);
};

NonReservedContext.prototype.TRUE = function() {
    return this.getToken(FlinkSqlParser.TRUE, 0);
};

NonReservedContext.prototype.TRUNCATE = function() {
    return this.getToken(FlinkSqlParser.TRUNCATE, 0);
};

NonReservedContext.prototype.UNARCHIVE = function() {
    return this.getToken(FlinkSqlParser.UNARCHIVE, 0);
};

NonReservedContext.prototype.UNBOUNDED = function() {
    return this.getToken(FlinkSqlParser.UNBOUNDED, 0);
};

NonReservedContext.prototype.UNCACHE = function() {
    return this.getToken(FlinkSqlParser.UNCACHE, 0);
};

NonReservedContext.prototype.UNLOCK = function() {
    return this.getToken(FlinkSqlParser.UNLOCK, 0);
};

NonReservedContext.prototype.UNSET = function() {
    return this.getToken(FlinkSqlParser.UNSET, 0);
};

NonReservedContext.prototype.UNNEST = function() {
    return this.getToken(FlinkSqlParser.UNNEST, 0);
};

NonReservedContext.prototype.USE = function() {
    return this.getToken(FlinkSqlParser.USE, 0);
};

NonReservedContext.prototype.USER = function() {
    return this.getToken(FlinkSqlParser.USER, 0);
};

NonReservedContext.prototype.VALUES = function() {
    return this.getToken(FlinkSqlParser.VALUES, 0);
};

NonReservedContext.prototype.VARBINARY = function() {
    return this.getToken(FlinkSqlParser.VARBINARY, 0);
};

NonReservedContext.prototype.VARCHAR = function() {
    return this.getToken(FlinkSqlParser.VARCHAR, 0);
};

NonReservedContext.prototype.VIEW = function() {
    return this.getToken(FlinkSqlParser.VIEW, 0);
};

NonReservedContext.prototype.VIEWS = function() {
    return this.getToken(FlinkSqlParser.VIEWS, 0);
};

NonReservedContext.prototype.WATERMARK = function() {
    return this.getToken(FlinkSqlParser.WATERMARK, 0);
};

NonReservedContext.prototype.WHEN = function() {
    return this.getToken(FlinkSqlParser.WHEN, 0);
};

NonReservedContext.prototype.WHERE = function() {
    return this.getToken(FlinkSqlParser.WHERE, 0);
};

NonReservedContext.prototype.WINDOW = function() {
    return this.getToken(FlinkSqlParser.WINDOW, 0);
};

NonReservedContext.prototype.WITH = function() {
    return this.getToken(FlinkSqlParser.WITH, 0);
};

NonReservedContext.prototype.WITHIN = function() {
    return this.getToken(FlinkSqlParser.WITHIN, 0);
};

NonReservedContext.prototype.WS = function() {
    return this.getToken(FlinkSqlParser.WS, 0);
};

NonReservedContext.prototype.enterRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.enterNonReserved(this);
	}
};

NonReservedContext.prototype.exitRule = function(listener) {
    if(listener instanceof FlinkSqlParserListener ) {
        listener.exitNonReserved(this);
	}
};

NonReservedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof FlinkSqlParserVisitor ) {
        return visitor.visitNonReserved(this);
    } else {
        return visitor.visitChildren(this);
    }
};




FlinkSqlParser.NonReservedContext = NonReservedContext;

FlinkSqlParser.prototype.nonReserved = function() {

    var localctx = new NonReservedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, FlinkSqlParser.RULE_nonReserved);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1877;
        _la = this._input.LA(1);
        if(!(((((_la - 4)) & ~0x1f) == 0 && ((1 << (_la - 4)) & ((1 << (FlinkSqlParser.SELECT - 4)) | (1 << (FlinkSqlParser.FROM - 4)) | (1 << (FlinkSqlParser.ADD - 4)) | (1 << (FlinkSqlParser.AS - 4)) | (1 << (FlinkSqlParser.ALL - 4)) | (1 << (FlinkSqlParser.ANY - 4)) | (1 << (FlinkSqlParser.DISTINCT - 4)) | (1 << (FlinkSqlParser.WHERE - 4)) | (1 << (FlinkSqlParser.GROUP - 4)) | (1 << (FlinkSqlParser.BY - 4)) | (1 << (FlinkSqlParser.GROUPING - 4)) | (1 << (FlinkSqlParser.SETS - 4)) | (1 << (FlinkSqlParser.CUBE - 4)) | (1 << (FlinkSqlParser.ROLLUP - 4)) | (1 << (FlinkSqlParser.ORDER - 4)) | (1 << (FlinkSqlParser.HAVING - 4)) | (1 << (FlinkSqlParser.LIMIT - 4)) | (1 << (FlinkSqlParser.AT - 4)) | (1 << (FlinkSqlParser.OR - 4)) | (1 << (FlinkSqlParser.AND - 4)) | (1 << (FlinkSqlParser.IN - 4)) | (1 << (FlinkSqlParser.NOT - 4)) | (1 << (FlinkSqlParser.NO - 4)) | (1 << (FlinkSqlParser.EXISTS - 4)) | (1 << (FlinkSqlParser.BETWEEN - 4)) | (1 << (FlinkSqlParser.LIKE - 4)) | (1 << (FlinkSqlParser.RLIKE - 4)) | (1 << (FlinkSqlParser.IS - 4)) | (1 << (FlinkSqlParser.TRUE - 4)) | (1 << (FlinkSqlParser.FALSE - 4)) | (1 << (FlinkSqlParser.NULLS - 4)) | (1 << (FlinkSqlParser.ASC - 4)))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (FlinkSqlParser.DESC - 36)) | (1 << (FlinkSqlParser.FOR - 36)) | (1 << (FlinkSqlParser.INTERVAL - 36)) | (1 << (FlinkSqlParser.CASE - 36)) | (1 << (FlinkSqlParser.WHEN - 36)) | (1 << (FlinkSqlParser.THEN - 36)) | (1 << (FlinkSqlParser.ELSE - 36)) | (1 << (FlinkSqlParser.END - 36)) | (1 << (FlinkSqlParser.OUTER - 36)) | (1 << (FlinkSqlParser.USER - 36)) | (1 << (FlinkSqlParser.PIVOT - 36)) | (1 << (FlinkSqlParser.LATERAL - 36)) | (1 << (FlinkSqlParser.WINDOW - 36)) | (1 << (FlinkSqlParser.OVER - 36)) | (1 << (FlinkSqlParser.PARTITION - 36)) | (1 << (FlinkSqlParser.RANGE - 36)) | (1 << (FlinkSqlParser.ROWS - 36)) | (1 << (FlinkSqlParser.UNBOUNDED - 36)) | (1 << (FlinkSqlParser.PRECEDING - 36)) | (1 << (FlinkSqlParser.FOLLOWING - 36)) | (1 << (FlinkSqlParser.CURRENT - 36)) | (1 << (FlinkSqlParser.FIRST - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (FlinkSqlParser.AFTER - 68)) | (1 << (FlinkSqlParser.LAST - 68)) | (1 << (FlinkSqlParser.WITH - 68)) | (1 << (FlinkSqlParser.VALUES - 68)) | (1 << (FlinkSqlParser.CREATE - 68)) | (1 << (FlinkSqlParser.TABLE - 68)) | (1 << (FlinkSqlParser.DIRECTORY - 68)) | (1 << (FlinkSqlParser.VIEW - 68)) | (1 << (FlinkSqlParser.REPLACE - 68)) | (1 << (FlinkSqlParser.INSERT - 68)) | (1 << (FlinkSqlParser.DELETE - 68)) | (1 << (FlinkSqlParser.INTO - 68)) | (1 << (FlinkSqlParser.DESCRIBE - 68)) | (1 << (FlinkSqlParser.EXPLAIN - 68)) | (1 << (FlinkSqlParser.FORMAT - 68)) | (1 << (FlinkSqlParser.LOGICAL - 68)) | (1 << (FlinkSqlParser.CODEGEN - 68)) | (1 << (FlinkSqlParser.COST - 68)) | (1 << (FlinkSqlParser.CAST - 68)) | (1 << (FlinkSqlParser.SHOW - 68)) | (1 << (FlinkSqlParser.TABLES - 68)) | (1 << (FlinkSqlParser.COLUMNS - 68)) | (1 << (FlinkSqlParser.COLUMN - 68)) | (1 << (FlinkSqlParser.USE - 68)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (FlinkSqlParser.PARTITIONS - 101)) | (1 << (FlinkSqlParser.FUNCTIONS - 101)) | (1 << (FlinkSqlParser.DROP - 101)) | (1 << (FlinkSqlParser.TO - 101)) | (1 << (FlinkSqlParser.TABLESAMPLE - 101)) | (1 << (FlinkSqlParser.STRATIFY - 101)) | (1 << (FlinkSqlParser.ALTER - 101)) | (1 << (FlinkSqlParser.RENAME - 101)) | (1 << (FlinkSqlParser.STRUCT - 101)) | (1 << (FlinkSqlParser.COMMENT - 101)) | (1 << (FlinkSqlParser.SET - 101)) | (1 << (FlinkSqlParser.RESET - 101)) | (1 << (FlinkSqlParser.DATA - 101)) | (1 << (FlinkSqlParser.START - 101)) | (1 << (FlinkSqlParser.TRANSACTION - 101)) | (1 << (FlinkSqlParser.COMMIT - 101)) | (1 << (FlinkSqlParser.ROLLBACK - 101)) | (1 << (FlinkSqlParser.MACRO - 101)) | (1 << (FlinkSqlParser.IGNORE - 101)) | (1 << (FlinkSqlParser.BOTH - 101)) | (1 << (FlinkSqlParser.LEADING - 101)) | (1 << (FlinkSqlParser.TRAILING - 101)) | (1 << (FlinkSqlParser.IF - 101)) | (1 << (FlinkSqlParser.POSITION - 101)) | (1 << (FlinkSqlParser.EXTRACT - 101)) | (1 << (FlinkSqlParser.MINUS - 101)) | (1 << (FlinkSqlParser.DIV - 101)) | (1 << (FlinkSqlParser.PERCENTLIT - 101)))) !== 0) || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (FlinkSqlParser.BUCKET - 133)) | (1 << (FlinkSqlParser.OUT - 133)) | (1 << (FlinkSqlParser.OF - 133)) | (1 << (FlinkSqlParser.SORT - 133)) | (1 << (FlinkSqlParser.CLUSTER - 133)) | (1 << (FlinkSqlParser.DISTRIBUTE - 133)) | (1 << (FlinkSqlParser.OVERWRITE - 133)) | (1 << (FlinkSqlParser.TRANSFORM - 133)) | (1 << (FlinkSqlParser.REDUCE - 133)) | (1 << (FlinkSqlParser.SERDE - 133)) | (1 << (FlinkSqlParser.SERDEPROPERTIES - 133)) | (1 << (FlinkSqlParser.RECORDREADER - 133)) | (1 << (FlinkSqlParser.RECORDWRITER - 133)) | (1 << (FlinkSqlParser.DELIMITED - 133)) | (1 << (FlinkSqlParser.FIELDS - 133)) | (1 << (FlinkSqlParser.TERMINATED - 133)) | (1 << (FlinkSqlParser.COLLECTION - 133)) | (1 << (FlinkSqlParser.ITEMS - 133)) | (1 << (FlinkSqlParser.KEYS - 133)) | (1 << (FlinkSqlParser.ESCAPED - 133)) | (1 << (FlinkSqlParser.LINES - 133)) | (1 << (FlinkSqlParser.SEPARATED - 133)) | (1 << (FlinkSqlParser.FUNCTION - 133)) | (1 << (FlinkSqlParser.EXTENDED - 133)) | (1 << (FlinkSqlParser.REFRESH - 133)) | (1 << (FlinkSqlParser.CLEAR - 133)) | (1 << (FlinkSqlParser.CACHE - 133)) | (1 << (FlinkSqlParser.UNCACHE - 133)) | (1 << (FlinkSqlParser.LAZY - 133)) | (1 << (FlinkSqlParser.FORMATTED - 133)) | (1 << (FlinkSqlParser.GLOBAL - 133)))) !== 0) || ((((_la - 165)) & ~0x1f) == 0 && ((1 << (_la - 165)) & ((1 << (FlinkSqlParser.TEMPORARY - 165)) | (1 << (FlinkSqlParser.OPTIONS - 165)) | (1 << (FlinkSqlParser.UNSET - 165)) | (1 << (FlinkSqlParser.TBLPROPERTIES - 165)) | (1 << (FlinkSqlParser.DBPROPERTIES - 165)) | (1 << (FlinkSqlParser.BUCKETS - 165)) | (1 << (FlinkSqlParser.SKEWED - 165)) | (1 << (FlinkSqlParser.STORED - 165)) | (1 << (FlinkSqlParser.DIRECTORIES - 165)) | (1 << (FlinkSqlParser.LOCATION - 165)) | (1 << (FlinkSqlParser.EXCHANGE - 165)) | (1 << (FlinkSqlParser.UNARCHIVE - 165)) | (1 << (FlinkSqlParser.FILEFORMAT - 165)) | (1 << (FlinkSqlParser.TOUCH - 165)) | (1 << (FlinkSqlParser.COMPACT - 165)) | (1 << (FlinkSqlParser.CONCATENATE - 165)) | (1 << (FlinkSqlParser.CHANGE - 165)) | (1 << (FlinkSqlParser.CASCADE - 165)) | (1 << (FlinkSqlParser.CONSTRAINT - 165)) | (1 << (FlinkSqlParser.RESTRICT - 165)) | (1 << (FlinkSqlParser.CLUSTERED - 165)) | (1 << (FlinkSqlParser.SORTED - 165)) | (1 << (FlinkSqlParser.PURGE - 165)) | (1 << (FlinkSqlParser.INPUTFORMAT - 165)) | (1 << (FlinkSqlParser.OUTPUTFORMAT - 165)) | (1 << (FlinkSqlParser.DATABASE - 165)) | (1 << (FlinkSqlParser.DATABASES - 165)) | (1 << (FlinkSqlParser.DFS - 165)) | (1 << (FlinkSqlParser.TRUNCATE - 165)) | (1 << (FlinkSqlParser.ANALYZE - 165)) | (1 << (FlinkSqlParser.COMPUTE - 165)))) !== 0) || ((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (FlinkSqlParser.LIST - 197)) | (1 << (FlinkSqlParser.STATISTICS - 197)) | (1 << (FlinkSqlParser.PARTITIONED - 197)) | (1 << (FlinkSqlParser.EXTERNAL - 197)) | (1 << (FlinkSqlParser.DEFINED - 197)) | (1 << (FlinkSqlParser.REVOKE - 197)) | (1 << (FlinkSqlParser.GRANT - 197)) | (1 << (FlinkSqlParser.LOCK - 197)) | (1 << (FlinkSqlParser.UNLOCK - 197)) | (1 << (FlinkSqlParser.MSCK - 197)) | (1 << (FlinkSqlParser.REPAIR - 197)) | (1 << (FlinkSqlParser.RECOVER - 197)) | (1 << (FlinkSqlParser.EXPORT - 197)) | (1 << (FlinkSqlParser.IMPORT - 197)) | (1 << (FlinkSqlParser.LOAD - 197)) | (1 << (FlinkSqlParser.ROLE - 197)) | (1 << (FlinkSqlParser.ROLES - 197)) | (1 << (FlinkSqlParser.COMPACTIONS - 197)) | (1 << (FlinkSqlParser.PRINCIPALS - 197)) | (1 << (FlinkSqlParser.TRANSACTIONS - 197)) | (1 << (FlinkSqlParser.INDEX - 197)) | (1 << (FlinkSqlParser.INDEXES - 197)) | (1 << (FlinkSqlParser.LOCKS - 197)) | (1 << (FlinkSqlParser.OPTION - 197)) | (1 << (FlinkSqlParser.LOCAL - 197)) | (1 << (FlinkSqlParser.INPATH - 197)) | (1 << (FlinkSqlParser.WATERMARK - 197)) | (1 << (FlinkSqlParser.UNNEST - 197)) | (1 << (FlinkSqlParser.MATCH - 197)) | (1 << (FlinkSqlParser.NEXT - 197)))) !== 0) || ((((_la - 229)) & ~0x1f) == 0 && ((1 << (_la - 229)) & ((1 << (FlinkSqlParser.WITHIN - 229)) | (1 << (FlinkSqlParser.WS - 229)) | (1 << (FlinkSqlParser.SYSTEM - 229)) | (1 << (FlinkSqlParser.INCLUDING - 229)) | (1 << (FlinkSqlParser.EXCLUDING - 229)) | (1 << (FlinkSqlParser.CONSTRAINTS - 229)) | (1 << (FlinkSqlParser.GENERATED - 229)) | (1 << (FlinkSqlParser.CATALOG - 229)) | (1 << (FlinkSqlParser.LANGUAGE - 229)) | (1 << (FlinkSqlParser.CATALOGS - 229)) | (1 << (FlinkSqlParser.VIEWS - 229)) | (1 << (FlinkSqlParser.PRIMARY - 229)) | (1 << (FlinkSqlParser.KEY - 229)) | (1 << (FlinkSqlParser.PERIOD - 229)) | (1 << (FlinkSqlParser.SYSTEM_TIME - 229)))) !== 0) || ((((_la - 262)) & ~0x1f) == 0 && ((1 << (_la - 262)) & ((1 << (FlinkSqlParser.STRING - 262)) | (1 << (FlinkSqlParser.ARRAY - 262)) | (1 << (FlinkSqlParser.MAP - 262)) | (1 << (FlinkSqlParser.CHAR - 262)) | (1 << (FlinkSqlParser.VARCHAR - 262)) | (1 << (FlinkSqlParser.BINARY - 262)) | (1 << (FlinkSqlParser.VARBINARY - 262)) | (1 << (FlinkSqlParser.BYTES - 262)) | (1 << (FlinkSqlParser.DECIMAL - 262)) | (1 << (FlinkSqlParser.TINYINT - 262)) | (1 << (FlinkSqlParser.SMALLINT - 262)) | (1 << (FlinkSqlParser.INT - 262)) | (1 << (FlinkSqlParser.BIGINT - 262)) | (1 << (FlinkSqlParser.FLOAT - 262)) | (1 << (FlinkSqlParser.DOUBLE - 262)) | (1 << (FlinkSqlParser.DATE - 262)) | (1 << (FlinkSqlParser.TIME - 262)) | (1 << (FlinkSqlParser.TIMESTAMP - 262)) | (1 << (FlinkSqlParser.MULTISET - 262)) | (1 << (FlinkSqlParser.BOOLEAN - 262)) | (1 << (FlinkSqlParser.RAW - 262)) | (1 << (FlinkSqlParser.ROW - 262)) | (1 << (FlinkSqlParser.NULL - 262)) | (1 << (FlinkSqlParser.DATETIME - 262)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


FlinkSqlParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 76:
			return this.queryStatement_sempred(localctx, predIndex);
	case 84:
			return this.tableExpression_sempred(localctx, predIndex);
	case 105:
			return this.booleanExpression_sempred(localctx, predIndex);
	case 108:
			return this.valueExpression_sempred(localctx, predIndex);
	case 109:
			return this.primaryExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

FlinkSqlParser.prototype.queryStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

FlinkSqlParser.prototype.tableExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		case 2:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

FlinkSqlParser.prototype.booleanExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 2);
		case 4:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

FlinkSqlParser.prototype.valueExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 6);
		case 6:
			return this.precpred(this._ctx, 5);
		case 7:
			return this.precpred(this._ctx, 4);
		case 8:
			return this.precpred(this._ctx, 3);
		case 9:
			return this.precpred(this._ctx, 2);
		case 10:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

FlinkSqlParser.prototype.primaryExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 11:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.FlinkSqlParser = FlinkSqlParser;
