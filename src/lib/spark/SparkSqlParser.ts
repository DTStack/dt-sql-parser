// Generated from dt-sql-parser/src/grammar/spark/SparkSqlParser.g4 by ANTLR 4.13.1

// @ts-nocheck

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { SparkSqlParserListener } from "./SparkSqlParserListener.js";
import { SparkSqlParserVisitor } from "./SparkSqlParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


import { SQLParserBase } from '../SQLParserBase';


export class SparkSqlParser extends SQLParserBase {
    public static readonly SEMICOLON = 1;
    public static readonly LEFT_PAREN = 2;
    public static readonly RIGHT_PAREN = 3;
    public static readonly COMMA = 4;
    public static readonly DOT = 5;
    public static readonly LEFT_BRACKET = 6;
    public static readonly RIGHT_BRACKET = 7;
    public static readonly KW_ADD = 8;
    public static readonly KW_AFTER = 9;
    public static readonly KW_ALL = 10;
    public static readonly KW_ALTER = 11;
    public static readonly KW_ALWAYS = 12;
    public static readonly KW_ANALYZE = 13;
    public static readonly KW_AND = 14;
    public static readonly KW_ANTI = 15;
    public static readonly KW_ANY = 16;
    public static readonly KW_ANY_VALUE = 17;
    public static readonly KW_ARCHIVE = 18;
    public static readonly KW_ARRAY = 19;
    public static readonly KW_AS = 20;
    public static readonly KW_ASC = 21;
    public static readonly KW_AT = 22;
    public static readonly KW_AUTHORIZATION = 23;
    public static readonly KW_BETWEEN = 24;
    public static readonly KW_BIGINT = 25;
    public static readonly KW_BINARY = 26;
    public static readonly KW_BOOLEAN = 27;
    public static readonly KW_BOTH = 28;
    public static readonly KW_BUCKET = 29;
    public static readonly KW_BUCKETS = 30;
    public static readonly KW_BY = 31;
    public static readonly KW_BYTE = 32;
    public static readonly KW_CACHE = 33;
    public static readonly KW_CASCADE = 34;
    public static readonly KW_CASE = 35;
    public static readonly KW_CAST = 36;
    public static readonly KW_CATALOG = 37;
    public static readonly KW_CATALOGS = 38;
    public static readonly KW_CHANGE = 39;
    public static readonly KW_CHAR = 40;
    public static readonly KW_CHARACTER = 41;
    public static readonly KW_CHECK = 42;
    public static readonly KW_CLEAR = 43;
    public static readonly KW_CLUSTER = 44;
    public static readonly KW_CLUSTERED = 45;
    public static readonly KW_CODEGEN = 46;
    public static readonly KW_COLLATE = 47;
    public static readonly KW_COLLECTION = 48;
    public static readonly KW_COLUMN = 49;
    public static readonly KW_COLUMNS = 50;
    public static readonly KW_COMMENT = 51;
    public static readonly KW_COMMIT = 52;
    public static readonly KW_COMPACT = 53;
    public static readonly KW_COMPACTIONS = 54;
    public static readonly KW_COMPUTE = 55;
    public static readonly KW_CONCATENATE = 56;
    public static readonly KW_CONSTRAINT = 57;
    public static readonly KW_COST = 58;
    public static readonly KW_CREATE = 59;
    public static readonly KW_CROSS = 60;
    public static readonly KW_CUBE = 61;
    public static readonly KW_CURRENT = 62;
    public static readonly KW_CURRENT_DATE = 63;
    public static readonly KW_CURRENT_TIME = 64;
    public static readonly KW_CURRENT_TIMESTAMP = 65;
    public static readonly KW_CURRENT_USER = 66;
    public static readonly KW_DAY = 67;
    public static readonly KW_DAYS = 68;
    public static readonly KW_DAYOFYEAR = 69;
    public static readonly KW_DATA = 70;
    public static readonly KW_DATE = 71;
    public static readonly KW_DATABASE = 72;
    public static readonly KW_DATABASES = 73;
    public static readonly KW_DATEADD = 74;
    public static readonly KW_DATE_ADD = 75;
    public static readonly KW_DATEDIFF = 76;
    public static readonly KW_DATE_DIFF = 77;
    public static readonly KW_DBPROPERTIES = 78;
    public static readonly KW_DEC = 79;
    public static readonly KW_DECIMAL = 80;
    public static readonly KW_DECLARE = 81;
    public static readonly KW_DEFAULT = 82;
    public static readonly KW_DEFINED = 83;
    public static readonly KW_DELETE = 84;
    public static readonly KW_DELIMITED = 85;
    public static readonly KW_DESC = 86;
    public static readonly KW_DESCRIBE = 87;
    public static readonly KW_DFS = 88;
    public static readonly KW_DIRECTORIES = 89;
    public static readonly KW_DIRECTORY = 90;
    public static readonly KW_DISABLE = 91;
    public static readonly KW_DISTINCT = 92;
    public static readonly KW_DISTRIBUTE = 93;
    public static readonly KW_DIV = 94;
    public static readonly KW_DOUBLE = 95;
    public static readonly KW_DROP = 96;
    public static readonly KW_ELSE = 97;
    public static readonly KW_ENABLE = 98;
    public static readonly KW_END = 99;
    public static readonly KW_ESCAPE = 100;
    public static readonly KW_ESCAPED = 101;
    public static readonly KW_EXCEPT = 102;
    public static readonly KW_EXCHANGE = 103;
    public static readonly KW_EXCLUDE = 104;
    public static readonly KW_EXISTS = 105;
    public static readonly KW_EXPLAIN = 106;
    public static readonly KW_EXPORT = 107;
    public static readonly KW_EXTENDED = 108;
    public static readonly KW_EXTERNAL = 109;
    public static readonly KW_EXTRACT = 110;
    public static readonly KW_FALSE = 111;
    public static readonly KW_FETCH = 112;
    public static readonly KW_FIELDS = 113;
    public static readonly KW_FILTER = 114;
    public static readonly KW_FILEFORMAT = 115;
    public static readonly KW_FIRST = 116;
    public static readonly KW_FLOAT = 117;
    public static readonly KW_FOLLOWING = 118;
    public static readonly KW_FOR = 119;
    public static readonly KW_FOREIGN = 120;
    public static readonly KW_FORMAT = 121;
    public static readonly KW_FORMATTED = 122;
    public static readonly KW_FROM = 123;
    public static readonly KW_FULL = 124;
    public static readonly KW_FUNCTION = 125;
    public static readonly KW_FUNCTIONS = 126;
    public static readonly KW_GENERATED = 127;
    public static readonly KW_GLOBAL = 128;
    public static readonly KW_GRANT = 129;
    public static readonly KW_GROUP = 130;
    public static readonly KW_GROUPING = 131;
    public static readonly KW_HAVING = 132;
    public static readonly KW_BINARY_HEX = 133;
    public static readonly KW_HOUR = 134;
    public static readonly KW_HOURS = 135;
    public static readonly KW_IDENTIFIER = 136;
    public static readonly KW_IF = 137;
    public static readonly KW_IGNORE = 138;
    public static readonly KW_IMPORT = 139;
    public static readonly KW_IN = 140;
    public static readonly KW_INCLUDE = 141;
    public static readonly KW_INDEX = 142;
    public static readonly KW_INDEXES = 143;
    public static readonly KW_INNER = 144;
    public static readonly KW_INPATH = 145;
    public static readonly KW_INPUTFORMAT = 146;
    public static readonly KW_INSERT = 147;
    public static readonly KW_INTERSECT = 148;
    public static readonly KW_INTERVAL = 149;
    public static readonly KW_INT = 150;
    public static readonly KW_INTEGER = 151;
    public static readonly KW_INTO = 152;
    public static readonly KW_IS = 153;
    public static readonly KW_ITEMS = 154;
    public static readonly KW_JOIN = 155;
    public static readonly KW_KEYS = 156;
    public static readonly KW_LAST = 157;
    public static readonly KW_LATERAL = 158;
    public static readonly KW_LAZY = 159;
    public static readonly KW_LEADING = 160;
    public static readonly KW_LEFT = 161;
    public static readonly KW_LIFECYCLE = 162;
    public static readonly KW_LIKE = 163;
    public static readonly KW_ILIKE = 164;
    public static readonly KW_LIMIT = 165;
    public static readonly KW_LINES = 166;
    public static readonly KW_LIST = 167;
    public static readonly KW_LOAD = 168;
    public static readonly KW_LOCAL = 169;
    public static readonly KW_LOCATION = 170;
    public static readonly KW_LOCK = 171;
    public static readonly KW_LOCKS = 172;
    public static readonly KW_LOGICAL = 173;
    public static readonly KW_LONG = 174;
    public static readonly KW_MACRO = 175;
    public static readonly KW_MATERIALIZED = 176;
    public static readonly KW_MAP = 177;
    public static readonly KW_MATCHED = 178;
    public static readonly KW_MERGE = 179;
    public static readonly KW_MICROSECOND = 180;
    public static readonly KW_MICROSECONDS = 181;
    public static readonly KW_MILLISECOND = 182;
    public static readonly KW_MILLISECONDS = 183;
    public static readonly KW_MINUTE = 184;
    public static readonly KW_MINUTES = 185;
    public static readonly KW_MONTH = 186;
    public static readonly KW_MONTHS = 187;
    public static readonly KW_MSCK = 188;
    public static readonly KW_NAME = 189;
    public static readonly KW_NAMESPACE = 190;
    public static readonly KW_NAMESPACES = 191;
    public static readonly KW_NANOSECOND = 192;
    public static readonly KW_NANOSECONDS = 193;
    public static readonly KW_NATURAL = 194;
    public static readonly KW_NO = 195;
    public static readonly KW_NOSCAN = 196;
    public static readonly KW_NOT = 197;
    public static readonly KW_NULL = 198;
    public static readonly KW_NULLS = 199;
    public static readonly KW_NUMERIC = 200;
    public static readonly KW_OF = 201;
    public static readonly KW_OFFSET = 202;
    public static readonly KW_ON = 203;
    public static readonly KW_ONLY = 204;
    public static readonly KW_OPTIMIZE = 205;
    public static readonly KW_OPTION = 206;
    public static readonly KW_OPTIONS = 207;
    public static readonly KW_OR = 208;
    public static readonly KW_ORDER = 209;
    public static readonly KW_OUT = 210;
    public static readonly KW_OUTER = 211;
    public static readonly KW_OUTPUTFORMAT = 212;
    public static readonly KW_OVER = 213;
    public static readonly KW_OVERLAPS = 214;
    public static readonly KW_OVERLAY = 215;
    public static readonly KW_OVERWRITE = 216;
    public static readonly KW_PARTITION = 217;
    public static readonly KW_PARTITIONED = 218;
    public static readonly KW_PARTITIONS = 219;
    public static readonly KW_PERCENTILE_CONT = 220;
    public static readonly KW_PERCENTILE_DISC = 221;
    public static readonly KW_PERCENTLIT = 222;
    public static readonly KW_PIVOT = 223;
    public static readonly KW_PLACING = 224;
    public static readonly KW_POSITION = 225;
    public static readonly KW_PRECEDING = 226;
    public static readonly KW_PRIMARY = 227;
    public static readonly KW_PRINCIPALS = 228;
    public static readonly KW_PROPERTIES = 229;
    public static readonly KW_PURGE = 230;
    public static readonly KW_QUARTER = 231;
    public static readonly KW_QUERY = 232;
    public static readonly KW_RANGE = 233;
    public static readonly KW_REAL = 234;
    public static readonly KW_RECORDREADER = 235;
    public static readonly KW_RECORDWRITER = 236;
    public static readonly KW_RECOVER = 237;
    public static readonly KW_REDUCE = 238;
    public static readonly KW_REFERENCES = 239;
    public static readonly KW_REFRESH = 240;
    public static readonly KW_RENAME = 241;
    public static readonly KW_REPAIR = 242;
    public static readonly KW_REPEATABLE = 243;
    public static readonly KW_REPLACE = 244;
    public static readonly KW_RESET = 245;
    public static readonly KW_RESPECT = 246;
    public static readonly KW_RESTRICT = 247;
    public static readonly KW_REWRITE = 248;
    public static readonly KW_REVOKE = 249;
    public static readonly KW_RIGHT = 250;
    public static readonly KW_RLIKE = 251;
    public static readonly KW_REGEXP = 252;
    public static readonly KW_ROLE = 253;
    public static readonly KW_ROLES = 254;
    public static readonly KW_ROLLBACK = 255;
    public static readonly KW_ROLLUP = 256;
    public static readonly KW_ROW = 257;
    public static readonly KW_ROWS = 258;
    public static readonly KW_SECOND = 259;
    public static readonly KW_SECONDS = 260;
    public static readonly KW_SCHEMA = 261;
    public static readonly KW_SCHEMAS = 262;
    public static readonly KW_SELECT = 263;
    public static readonly KW_SEMI = 264;
    public static readonly KW_SEPARATED = 265;
    public static readonly KW_SERDE = 266;
    public static readonly KW_SERDEPROPERTIES = 267;
    public static readonly KW_SESSION_USER = 268;
    public static readonly KW_SET = 269;
    public static readonly KW_MINUS = 270;
    public static readonly KW_SETS = 271;
    public static readonly KW_SHORT = 272;
    public static readonly KW_SHOW = 273;
    public static readonly KW_SINGLE = 274;
    public static readonly KW_SKEWED = 275;
    public static readonly KW_SMALLINT = 276;
    public static readonly KW_SOME = 277;
    public static readonly KW_SORT = 278;
    public static readonly KW_SORTED = 279;
    public static readonly KW_SOURCE = 280;
    public static readonly KW_START = 281;
    public static readonly KW_STATISTICS = 282;
    public static readonly KW_STORED = 283;
    public static readonly KW_STRATIFY = 284;
    public static readonly KW_STRING = 285;
    public static readonly KW_STRUCT = 286;
    public static readonly KW_SUBSTR = 287;
    public static readonly KW_SUBSTRING = 288;
    public static readonly KW_SYNC = 289;
    public static readonly KW_SYSTEM = 290;
    public static readonly KW_SYSTEM_TIME = 291;
    public static readonly KW_SYSTEM_VERSION = 292;
    public static readonly KW_TABLE = 293;
    public static readonly KW_TABLES = 294;
    public static readonly KW_TABLESAMPLE = 295;
    public static readonly KW_TARGET = 296;
    public static readonly KW_TBLPROPERTIES = 297;
    public static readonly KW_TEMPORARY = 298;
    public static readonly KW_TERMINATED = 299;
    public static readonly KW_THEN = 300;
    public static readonly KW_TIME = 301;
    public static readonly KW_TIMEDIFF = 302;
    public static readonly KW_TIMESTAMP = 303;
    public static readonly KW_TIMESTAMP_LTZ = 304;
    public static readonly KW_TIMESTAMP_NTZ = 305;
    public static readonly KW_TIMESTAMPADD = 306;
    public static readonly KW_TIMESTAMPDIFF = 307;
    public static readonly KW_TINYINT = 308;
    public static readonly KW_TO = 309;
    public static readonly KW_TOUCH = 310;
    public static readonly KW_TRAILING = 311;
    public static readonly KW_TRANSACTION = 312;
    public static readonly KW_TRANSACTIONS = 313;
    public static readonly KW_TRANSFORM = 314;
    public static readonly KW_TRIM = 315;
    public static readonly KW_TRUE = 316;
    public static readonly KW_TRUNCATE = 317;
    public static readonly KW_TRY_CAST = 318;
    public static readonly KW_TYPE = 319;
    public static readonly KW_UNARCHIVE = 320;
    public static readonly KW_UNBOUNDED = 321;
    public static readonly KW_UNCACHE = 322;
    public static readonly KW_UNION = 323;
    public static readonly KW_UNIQUE = 324;
    public static readonly KW_UNKNOWN = 325;
    public static readonly KW_UNLOCK = 326;
    public static readonly KW_UNPIVOT = 327;
    public static readonly KW_UNSET = 328;
    public static readonly KW_UPDATE = 329;
    public static readonly KW_USE = 330;
    public static readonly KW_USER = 331;
    public static readonly KW_USING = 332;
    public static readonly KW_VALUES = 333;
    public static readonly KW_VARCHAR = 334;
    public static readonly KW_VAR = 335;
    public static readonly KW_VARIABLE = 336;
    public static readonly KW_VERSION = 337;
    public static readonly KW_VIEW = 338;
    public static readonly KW_VIEWS = 339;
    public static readonly KW_VOID = 340;
    public static readonly KW_WEEK = 341;
    public static readonly KW_WEEKS = 342;
    public static readonly KW_WHEN = 343;
    public static readonly KW_WHERE = 344;
    public static readonly KW_WINDOW = 345;
    public static readonly KW_WITH = 346;
    public static readonly KW_WITHIN = 347;
    public static readonly KW_YEAR = 348;
    public static readonly KW_YEARS = 349;
    public static readonly KW_ZONE = 350;
    public static readonly KW_ZORDER = 351;
    public static readonly EQ = 352;
    public static readonly NSEQ = 353;
    public static readonly NEQ = 354;
    public static readonly NEQJ = 355;
    public static readonly LT = 356;
    public static readonly LTE = 357;
    public static readonly GT = 358;
    public static readonly GTE = 359;
    public static readonly NOT = 360;
    public static readonly PLUS = 361;
    public static readonly MINUS = 362;
    public static readonly ASTERISK = 363;
    public static readonly SLASH = 364;
    public static readonly PERCENT = 365;
    public static readonly TILDE = 366;
    public static readonly AMPERSAND = 367;
    public static readonly PIPE = 368;
    public static readonly CONCAT_PIPE = 369;
    public static readonly HAT = 370;
    public static readonly COLON = 371;
    public static readonly ARROW = 372;
    public static readonly FAT_ARROW = 373;
    public static readonly HENT_START = 374;
    public static readonly HENT_END = 375;
    public static readonly QUESTION = 376;
    public static readonly STRING_LITERAL = 377;
    public static readonly DOUBLEQUOTED_STRING = 378;
    public static readonly BIGINT_LITERAL = 379;
    public static readonly SMALLINT_LITERAL = 380;
    public static readonly TINYINT_LITERAL = 381;
    public static readonly INTEGER_VALUE = 382;
    public static readonly EXPONENT_VALUE = 383;
    public static readonly DECIMAL_VALUE = 384;
    public static readonly FLOAT_LITERAL = 385;
    public static readonly DOUBLE_LITERAL = 386;
    public static readonly BIGDECIMAL_LITERAL = 387;
    public static readonly IDENTIFIER = 388;
    public static readonly BACKQUOTED_IDENTIFIER = 389;
    public static readonly SIMPLE_COMMENT = 390;
    public static readonly BRACKETED_COMMENT = 391;
    public static readonly WS = 392;
    public static readonly UNRECOGNIZED = 393;
    public static readonly RULE_program = 0;
    public static readonly RULE_singleStatement = 1;
    public static readonly RULE_statement = 2;
    public static readonly RULE_timezone = 3;
    public static readonly RULE_configKey = 4;
    public static readonly RULE_configValue = 5;
    public static readonly RULE_unsupportedHiveNativeCommands = 6;
    public static readonly RULE_createTableHeader = 7;
    public static readonly RULE_replaceTableHeader = 8;
    public static readonly RULE_bucketSpec = 9;
    public static readonly RULE_skewSpec = 10;
    public static readonly RULE_locationSpec = 11;
    public static readonly RULE_commentSpec = 12;
    public static readonly RULE_query = 13;
    public static readonly RULE_insertInto = 14;
    public static readonly RULE_partitionSpecLocation = 15;
    public static readonly RULE_partitionSpec = 16;
    public static readonly RULE_partitionVal = 17;
    public static readonly RULE_namespace = 18;
    public static readonly RULE_namespaces = 19;
    public static readonly RULE_describeFuncName = 20;
    public static readonly RULE_describeColName = 21;
    public static readonly RULE_ctes = 22;
    public static readonly RULE_namedQuery = 23;
    public static readonly RULE_tableProvider = 24;
    public static readonly RULE_createTableClauses = 25;
    public static readonly RULE_tableLifecycle = 26;
    public static readonly RULE_propertyList = 27;
    public static readonly RULE_property = 28;
    public static readonly RULE_propertyKey = 29;
    public static readonly RULE_propertyValue = 30;
    public static readonly RULE_expressionPropertyList = 31;
    public static readonly RULE_expressionProperty = 32;
    public static readonly RULE_constantList = 33;
    public static readonly RULE_nestedConstantList = 34;
    public static readonly RULE_createFileFormat = 35;
    public static readonly RULE_fileFormat = 36;
    public static readonly RULE_storageHandler = 37;
    public static readonly RULE_resource = 38;
    public static readonly RULE_dmlStatementNoWith = 39;
    public static readonly RULE_namespaceName = 40;
    public static readonly RULE_namespaceNameCreate = 41;
    public static readonly RULE_tableNameCreate = 42;
    public static readonly RULE_tableName = 43;
    public static readonly RULE_viewNameCreate = 44;
    public static readonly RULE_viewName = 45;
    public static readonly RULE_columnName = 46;
    public static readonly RULE_columnNameSeq = 47;
    public static readonly RULE_columnNameCreate = 48;
    public static readonly RULE_identifierReference = 49;
    public static readonly RULE_queryOrganization = 50;
    public static readonly RULE_multiInsertQueryBody = 51;
    public static readonly RULE_queryTerm = 52;
    public static readonly RULE_queryPrimary = 53;
    public static readonly RULE_sortItem = 54;
    public static readonly RULE_fromStatement = 55;
    public static readonly RULE_fromStatementBody = 56;
    public static readonly RULE_querySpecification = 57;
    public static readonly RULE_transformClause = 58;
    public static readonly RULE_selectClause = 59;
    public static readonly RULE_setClause = 60;
    public static readonly RULE_matchedClause = 61;
    public static readonly RULE_notMatchedClause = 62;
    public static readonly RULE_notMatchedBySourceClause = 63;
    public static readonly RULE_matchedAction = 64;
    public static readonly RULE_notMatchedAction = 65;
    public static readonly RULE_notMatchedBySourceAction = 66;
    public static readonly RULE_assignmentList = 67;
    public static readonly RULE_assignment = 68;
    public static readonly RULE_whereClause = 69;
    public static readonly RULE_havingClause = 70;
    public static readonly RULE_hint = 71;
    public static readonly RULE_hintStatement = 72;
    public static readonly RULE_fromClause = 73;
    public static readonly RULE_functionKind = 74;
    public static readonly RULE_temporalClause = 75;
    public static readonly RULE_aggregationClause = 76;
    public static readonly RULE_groupByClause = 77;
    public static readonly RULE_groupingAnalytics = 78;
    public static readonly RULE_groupingElement = 79;
    public static readonly RULE_groupingSet = 80;
    public static readonly RULE_pivotClause = 81;
    public static readonly RULE_pivotColumn = 82;
    public static readonly RULE_pivotValue = 83;
    public static readonly RULE_unpivotClause = 84;
    public static readonly RULE_unpivotNullClause = 85;
    public static readonly RULE_unpivotOperator = 86;
    public static readonly RULE_unpivotSingleValueColumnClause = 87;
    public static readonly RULE_unpivotMultiValueColumnClause = 88;
    public static readonly RULE_unpivotColumnSet = 89;
    public static readonly RULE_unpivotValueColumn = 90;
    public static readonly RULE_unpivotNameColumn = 91;
    public static readonly RULE_unpivotColumnAndAlias = 92;
    public static readonly RULE_unpivotColumn = 93;
    public static readonly RULE_unpivotAlias = 94;
    public static readonly RULE_ifNotExists = 95;
    public static readonly RULE_ifExists = 96;
    public static readonly RULE_lateralView = 97;
    public static readonly RULE_setQuantifier = 98;
    public static readonly RULE_relation = 99;
    public static readonly RULE_relationExtension = 100;
    public static readonly RULE_joinRelation = 101;
    public static readonly RULE_joinType = 102;
    public static readonly RULE_joinCriteria = 103;
    public static readonly RULE_sample = 104;
    public static readonly RULE_sampleMethod = 105;
    public static readonly RULE_identifierList = 106;
    public static readonly RULE_identifierSeq = 107;
    public static readonly RULE_orderedIdentifierList = 108;
    public static readonly RULE_orderedIdentifier = 109;
    public static readonly RULE_identifierCommentList = 110;
    public static readonly RULE_identifierComment = 111;
    public static readonly RULE_relationPrimary = 112;
    public static readonly RULE_atomSubQueryTableSource = 113;
    public static readonly RULE_inlineTable = 114;
    public static readonly RULE_functionTableSubqueryArgument = 115;
    public static readonly RULE_tableArgumentPartitioning = 116;
    public static readonly RULE_functionTableNamedArgumentExpression = 117;
    public static readonly RULE_functionTableReferenceArgument = 118;
    public static readonly RULE_functionTableArgument = 119;
    public static readonly RULE_functionTable = 120;
    public static readonly RULE_atomFunctionTable = 121;
    public static readonly RULE_tableAlias = 122;
    public static readonly RULE_rowFormat = 123;
    public static readonly RULE_multipartIdentifierList = 124;
    public static readonly RULE_multipartIdentifier = 125;
    public static readonly RULE_multipartIdentifierPropertyList = 126;
    public static readonly RULE_multipartIdentifierProperty = 127;
    public static readonly RULE_tableIdentifier = 128;
    public static readonly RULE_viewIdentifier = 129;
    public static readonly RULE_selectLiteralColumnName = 130;
    public static readonly RULE_selectExpressionColumnName = 131;
    public static readonly RULE_tableAllColumns = 132;
    public static readonly RULE_namedExpression = 133;
    public static readonly RULE_namedExpressionSeq = 134;
    public static readonly RULE_selectList = 135;
    public static readonly RULE_partitionFieldList = 136;
    public static readonly RULE_partitionField = 137;
    public static readonly RULE_transform = 138;
    public static readonly RULE_transformArgument = 139;
    public static readonly RULE_expression = 140;
    public static readonly RULE_namedArgumentExpression = 141;
    public static readonly RULE_functionArgument = 142;
    public static readonly RULE_expressionSeq = 143;
    public static readonly RULE_booleanExpression = 144;
    public static readonly RULE_predicate = 145;
    public static readonly RULE_valueExpression = 146;
    public static readonly RULE_datetimeUnit = 147;
    public static readonly RULE_primaryExpression = 148;
    public static readonly RULE_literalType = 149;
    public static readonly RULE_constant = 150;
    public static readonly RULE_comparisonOperator = 151;
    public static readonly RULE_arithmeticOperator = 152;
    public static readonly RULE_predicateOperator = 153;
    public static readonly RULE_booleanValue = 154;
    public static readonly RULE_interval = 155;
    public static readonly RULE_errorCapturingMultiUnitsInterval = 156;
    public static readonly RULE_multiUnitsInterval = 157;
    public static readonly RULE_errorCapturingUnitToUnitInterval = 158;
    public static readonly RULE_unitToUnitInterval = 159;
    public static readonly RULE_intervalValue = 160;
    public static readonly RULE_unitInMultiUnits = 161;
    public static readonly RULE_unitInUnitToUnit = 162;
    public static readonly RULE_colPosition = 163;
    public static readonly RULE_type = 164;
    public static readonly RULE_dataType = 165;
    public static readonly RULE_qualifiedColTypeWithPositionSeqForAdd = 166;
    public static readonly RULE_qualifiedColTypeWithPositionForAdd = 167;
    public static readonly RULE_qualifiedColTypeWithPositionSeqForReplace = 168;
    public static readonly RULE_qualifiedColTypeWithPositionForReplace = 169;
    public static readonly RULE_colDefinitionDescriptorWithPosition = 170;
    public static readonly RULE_defaultExpression = 171;
    public static readonly RULE_variableDefaultExpression = 172;
    public static readonly RULE_colTypeList = 173;
    public static readonly RULE_columnType = 174;
    public static readonly RULE_createOrReplaceTableColTypeList = 175;
    public static readonly RULE_createOrReplaceTableColType = 176;
    public static readonly RULE_colDefinitionOption = 177;
    public static readonly RULE_generationExpression = 178;
    public static readonly RULE_complexColTypeList = 179;
    public static readonly RULE_complexColType = 180;
    public static readonly RULE_whenClause = 181;
    public static readonly RULE_windowClause = 182;
    public static readonly RULE_zorderClause = 183;
    public static readonly RULE_namedWindow = 184;
    public static readonly RULE_windowSpec = 185;
    public static readonly RULE_windowFrame = 186;
    public static readonly RULE_frameBound = 187;
    public static readonly RULE_qualifiedNameList = 188;
    public static readonly RULE_functionName = 189;
    public static readonly RULE_functionNameCreate = 190;
    public static readonly RULE_qualifiedName = 191;
    public static readonly RULE_errorCapturingIdentifier = 192;
    public static readonly RULE_errorCapturingIdentifierExtra = 193;
    public static readonly RULE_identifier = 194;
    public static readonly RULE_strictIdentifier = 195;
    public static readonly RULE_quotedIdentifier = 196;
    public static readonly RULE_backQuotedIdentifier = 197;
    public static readonly RULE_number = 198;
    public static readonly RULE_alterColumnAction = 199;
    public static readonly RULE_stringLit = 200;
    public static readonly RULE_commentStr = 201;
    public static readonly RULE_version = 202;
    public static readonly RULE_ansiNonReserved = 203;
    public static readonly RULE_strictNonReserved = 204;
    public static readonly RULE_nonReserved = 205;

    public static readonly literalNames = [
        null, "';'", "'('", "')'", "','", "'.'", "'['", "']'", "'ADD'", 
        "'AFTER'", "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", 
        "'ANTI'", "'ANY'", "'ANY_VALUE'", "'ARCHIVE'", "'ARRAY'", "'AS'", 
        "'ASC'", "'AT'", "'AUTHORIZATION'", "'BETWEEN'", "'BIGINT'", "'BINARY'", 
        "'BOOLEAN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", "'BYTE'", 
        "'CACHE'", "'CASCADE'", "'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", 
        "'CHANGE'", "'CHAR'", "'CHARACTER'", "'CHECK'", "'CLEAR'", "'CLUSTER'", 
        "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", "'COLLECTION'", "'COLUMN'", 
        "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", 
        "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'", "'CREATE'", 
        "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
        "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DAY'", "'DAYS'", "'DAYOFYEAR'", 
        "'DATA'", "'DATE'", "'DATABASE'", "'DATABASES'", "'DATEADD'", "'DATE_ADD'", 
        "'DATEDIFF'", "'DATE_DIFF'", "'DBPROPERTIES'", "'DEC'", "'DECIMAL'", 
        "'DECLARE'", "'DEFAULT'", "'DEFINED'", "'DELETE'", "'DELIMITED'", 
        "'DESC'", "'DESCRIBE'", "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", 
        "'DISABLE'", "'DISTINCT'", "'DISTRIBUTE'", "'DIV'", "'DOUBLE'", 
        "'DROP'", "'ELSE'", "'ENABLE'", "'END'", "'ESCAPE'", "'ESCAPED'", 
        "'EXCEPT'", "'EXCHANGE'", "'EXCLUDE'", "'EXISTS'", "'EXPLAIN'", 
        "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FALSE'", 
        "'FETCH'", "'FIELDS'", "'FILTER'", "'FILEFORMAT'", "'FIRST'", "'FLOAT'", 
        "'FOLLOWING'", "'FOR'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", 
        "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GENERATED'", 
        "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", "'X'", 
        "'HOUR'", "'HOURS'", "'IDENTIFIER'", "'IF'", "'IGNORE'", "'IMPORT'", 
        "'IN'", "'INCLUDE'", "'INDEX'", "'INDEXES'", "'INNER'", "'INPATH'", 
        "'INPUTFORMAT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INT'", 
        "'INTEGER'", "'INTO'", "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", "'LAST'", 
        "'LATERAL'", "'LAZY'", "'LEADING'", "'LEFT'", "'LIFECYCLE'", "'LIKE'", 
        "'ILIKE'", "'LIMIT'", "'LINES'", "'LIST'", "'LOAD'", "'LOCAL'", 
        "'LOCATION'", "'LOCK'", "'LOCKS'", "'LOGICAL'", "'LONG'", "'MACRO'", 
        "'MATERIALIZED'", "'MAP'", "'MATCHED'", "'MERGE'", "'MICROSECOND'", 
        "'MICROSECONDS'", "'MILLISECOND'", "'MILLISECONDS'", "'MINUTE'", 
        "'MINUTES'", "'MONTH'", "'MONTHS'", "'MSCK'", "'NAME'", "'NAMESPACE'", 
        "'NAMESPACES'", "'NANOSECOND'", "'NANOSECONDS'", "'NATURAL'", "'NO'", 
        "'NOSCAN'", "'NOT'", "'NULL'", "'NULLS'", "'NUMERIC'", "'OF'", "'OFFSET'", 
        "'ON'", "'ONLY'", "'OPTIMIZE'", "'OPTION'", "'OPTIONS'", "'OR'", 
        "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'", 
        "'OVERLAY'", "'OVERWRITE'", "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", 
        "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERCENT'", "'PIVOT'", 
        "'PLACING'", "'POSITION'", "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'", 
        "'PROPERTIES'", "'PURGE'", "'QUARTER'", "'QUERY'", "'RANGE'", "'REAL'", 
        "'RECORDREADER'", "'RECORDWRITER'", "'RECOVER'", "'REDUCE'", "'REFERENCES'", 
        "'REFRESH'", "'RENAME'", "'REPAIR'", "'REPEATABLE'", "'REPLACE'", 
        "'RESET'", "'RESPECT'", "'RESTRICT'", "'REWRITE'", "'REVOKE'", "'RIGHT'", 
        "'RLIKE'", "'REGEXP'", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", 
        "'ROW'", "'ROWS'", "'SECOND'", "'SECONDS'", "'SCHEMA'", "'SCHEMAS'", 
        "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", "'SERDEPROPERTIES'", 
        "'SESSION_USER'", "'SET'", "'MINUS'", "'SETS'", "'SHORT'", "'SHOW'", 
        "'SINGLE'", "'SKEWED'", "'SMALLINT'", "'SOME'", "'SORT'", "'SORTED'", 
        "'SOURCE'", "'START'", "'STATISTICS'", "'STORED'", "'STRATIFY'", 
        "'STRING'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", "'SYNC'", "'SYSTEM'", 
        "'SYSTEM_TIME'", "'SYSTEM_VERSION'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", 
        "'TARGET'", "'TBLPROPERTIES'", "'TEMPORARY'", "'TERMINATED'", "'THEN'", 
        "'TIME'", "'TIMEDIFF'", "'TIMESTAMP'", "'TIMESTAMP_LTZ'", "'TIMESTAMP_NTZ'", 
        "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TINYINT'", "'TO'", "'TOUCH'", 
        "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", 
        "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UNARCHIVE'", 
        "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", 
        "'UNLOCK'", "'UNPIVOT'", "'UNSET'", "'UPDATE'", "'USE'", "'USER'", 
        "'USING'", "'VALUES'", "'VARCHAR'", "'VAR'", "'VARIABLE'", "'VERSION'", 
        "'VIEW'", "'VIEWS'", "'VOID'", "'WEEK'", "'WEEKS'", "'WHEN'", "'WHERE'", 
        "'WINDOW'", "'WITH'", "'WITHIN'", "'YEAR'", "'YEARS'", "'ZONE'", 
        "'ZORDER'", null, "'<=>'", "'<>'", "'!='", "'<'", null, "'>'", null, 
        "'!'", "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'|'", "'||'", 
        "'^'", "':'", "'->'", "'=>'", "'/*+'", "'*/'", "'?'"
    ];

    public static readonly symbolicNames = [
        null, "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "DOT", 
        "LEFT_BRACKET", "RIGHT_BRACKET", "KW_ADD", "KW_AFTER", "KW_ALL", 
        "KW_ALTER", "KW_ALWAYS", "KW_ANALYZE", "KW_AND", "KW_ANTI", "KW_ANY", 
        "KW_ANY_VALUE", "KW_ARCHIVE", "KW_ARRAY", "KW_AS", "KW_ASC", "KW_AT", 
        "KW_AUTHORIZATION", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", "KW_BOOLEAN", 
        "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_BYTE", "KW_CACHE", 
        "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CATALOG", "KW_CATALOGS", 
        "KW_CHANGE", "KW_CHAR", "KW_CHARACTER", "KW_CHECK", "KW_CLEAR", 
        "KW_CLUSTER", "KW_CLUSTERED", "KW_CODEGEN", "KW_COLLATE", "KW_COLLECTION", 
        "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPACT", 
        "KW_COMPACTIONS", "KW_COMPUTE", "KW_CONCATENATE", "KW_CONSTRAINT", 
        "KW_COST", "KW_CREATE", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", 
        "KW_CURRENT_TIME", "KW_CURRENT_TIMESTAMP", "KW_CURRENT_USER", "KW_DAY", 
        "KW_DAYS", "KW_DAYOFYEAR", "KW_DATA", "KW_DATE", "KW_DATABASE", 
        "KW_DATABASES", "KW_DATEADD", "KW_DATE_ADD", "KW_DATEDIFF", "KW_DATE_DIFF", 
        "KW_DBPROPERTIES", "KW_DEC", "KW_DECIMAL", "KW_DECLARE", "KW_DEFAULT", 
        "KW_DEFINED", "KW_DELETE", "KW_DELIMITED", "KW_DESC", "KW_DESCRIBE", 
        "KW_DFS", "KW_DIRECTORIES", "KW_DIRECTORY", "KW_DISABLE", "KW_DISTINCT", 
        "KW_DISTRIBUTE", "KW_DIV", "KW_DOUBLE", "KW_DROP", "KW_ELSE", "KW_ENABLE", 
        "KW_END", "KW_ESCAPE", "KW_ESCAPED", "KW_EXCEPT", "KW_EXCHANGE", 
        "KW_EXCLUDE", "KW_EXISTS", "KW_EXPLAIN", "KW_EXPORT", "KW_EXTENDED", 
        "KW_EXTERNAL", "KW_EXTRACT", "KW_FALSE", "KW_FETCH", "KW_FIELDS", 
        "KW_FILTER", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", "KW_FOLLOWING", 
        "KW_FOR", "KW_FOREIGN", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", 
        "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS", "KW_GENERATED", "KW_GLOBAL", 
        "KW_GRANT", "KW_GROUP", "KW_GROUPING", "KW_HAVING", "KW_BINARY_HEX", 
        "KW_HOUR", "KW_HOURS", "KW_IDENTIFIER", "KW_IF", "KW_IGNORE", "KW_IMPORT", 
        "KW_IN", "KW_INCLUDE", "KW_INDEX", "KW_INDEXES", "KW_INNER", "KW_INPATH", 
        "KW_INPUTFORMAT", "KW_INSERT", "KW_INTERSECT", "KW_INTERVAL", "KW_INT", 
        "KW_INTEGER", "KW_INTO", "KW_IS", "KW_ITEMS", "KW_JOIN", "KW_KEYS", 
        "KW_LAST", "KW_LATERAL", "KW_LAZY", "KW_LEADING", "KW_LEFT", "KW_LIFECYCLE", 
        "KW_LIKE", "KW_ILIKE", "KW_LIMIT", "KW_LINES", "KW_LIST", "KW_LOAD", 
        "KW_LOCAL", "KW_LOCATION", "KW_LOCK", "KW_LOCKS", "KW_LOGICAL", 
        "KW_LONG", "KW_MACRO", "KW_MATERIALIZED", "KW_MAP", "KW_MATCHED", 
        "KW_MERGE", "KW_MICROSECOND", "KW_MICROSECONDS", "KW_MILLISECOND", 
        "KW_MILLISECONDS", "KW_MINUTE", "KW_MINUTES", "KW_MONTH", "KW_MONTHS", 
        "KW_MSCK", "KW_NAME", "KW_NAMESPACE", "KW_NAMESPACES", "KW_NANOSECOND", 
        "KW_NANOSECONDS", "KW_NATURAL", "KW_NO", "KW_NOSCAN", "KW_NOT", 
        "KW_NULL", "KW_NULLS", "KW_NUMERIC", "KW_OF", "KW_OFFSET", "KW_ON", 
        "KW_ONLY", "KW_OPTIMIZE", "KW_OPTION", "KW_OPTIONS", "KW_OR", "KW_ORDER", 
        "KW_OUT", "KW_OUTER", "KW_OUTPUTFORMAT", "KW_OVER", "KW_OVERLAPS", 
        "KW_OVERLAY", "KW_OVERWRITE", "KW_PARTITION", "KW_PARTITIONED", 
        "KW_PARTITIONS", "KW_PERCENTILE_CONT", "KW_PERCENTILE_DISC", "KW_PERCENTLIT", 
        "KW_PIVOT", "KW_PLACING", "KW_POSITION", "KW_PRECEDING", "KW_PRIMARY", 
        "KW_PRINCIPALS", "KW_PROPERTIES", "KW_PURGE", "KW_QUARTER", "KW_QUERY", 
        "KW_RANGE", "KW_REAL", "KW_RECORDREADER", "KW_RECORDWRITER", "KW_RECOVER", 
        "KW_REDUCE", "KW_REFERENCES", "KW_REFRESH", "KW_RENAME", "KW_REPAIR", 
        "KW_REPEATABLE", "KW_REPLACE", "KW_RESET", "KW_RESPECT", "KW_RESTRICT", 
        "KW_REWRITE", "KW_REVOKE", "KW_RIGHT", "KW_RLIKE", "KW_REGEXP", 
        "KW_ROLE", "KW_ROLES", "KW_ROLLBACK", "KW_ROLLUP", "KW_ROW", "KW_ROWS", 
        "KW_SECOND", "KW_SECONDS", "KW_SCHEMA", "KW_SCHEMAS", "KW_SELECT", 
        "KW_SEMI", "KW_SEPARATED", "KW_SERDE", "KW_SERDEPROPERTIES", "KW_SESSION_USER", 
        "KW_SET", "KW_MINUS", "KW_SETS", "KW_SHORT", "KW_SHOW", "KW_SINGLE", 
        "KW_SKEWED", "KW_SMALLINT", "KW_SOME", "KW_SORT", "KW_SORTED", "KW_SOURCE", 
        "KW_START", "KW_STATISTICS", "KW_STORED", "KW_STRATIFY", "KW_STRING", 
        "KW_STRUCT", "KW_SUBSTR", "KW_SUBSTRING", "KW_SYNC", "KW_SYSTEM", 
        "KW_SYSTEM_TIME", "KW_SYSTEM_VERSION", "KW_TABLE", "KW_TABLES", 
        "KW_TABLESAMPLE", "KW_TARGET", "KW_TBLPROPERTIES", "KW_TEMPORARY", 
        "KW_TERMINATED", "KW_THEN", "KW_TIME", "KW_TIMEDIFF", "KW_TIMESTAMP", 
        "KW_TIMESTAMP_LTZ", "KW_TIMESTAMP_NTZ", "KW_TIMESTAMPADD", "KW_TIMESTAMPDIFF", 
        "KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRAILING", "KW_TRANSACTION", 
        "KW_TRANSACTIONS", "KW_TRANSFORM", "KW_TRIM", "KW_TRUE", "KW_TRUNCATE", 
        "KW_TRY_CAST", "KW_TYPE", "KW_UNARCHIVE", "KW_UNBOUNDED", "KW_UNCACHE", 
        "KW_UNION", "KW_UNIQUE", "KW_UNKNOWN", "KW_UNLOCK", "KW_UNPIVOT", 
        "KW_UNSET", "KW_UPDATE", "KW_USE", "KW_USER", "KW_USING", "KW_VALUES", 
        "KW_VARCHAR", "KW_VAR", "KW_VARIABLE", "KW_VERSION", "KW_VIEW", 
        "KW_VIEWS", "KW_VOID", "KW_WEEK", "KW_WEEKS", "KW_WHEN", "KW_WHERE", 
        "KW_WINDOW", "KW_WITH", "KW_WITHIN", "KW_YEAR", "KW_YEARS", "KW_ZONE", 
        "KW_ZORDER", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", "GT", "GTE", 
        "NOT", "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "TILDE", 
        "AMPERSAND", "PIPE", "CONCAT_PIPE", "HAT", "COLON", "ARROW", "FAT_ARROW", 
        "HENT_START", "HENT_END", "QUESTION", "STRING_LITERAL", "DOUBLEQUOTED_STRING", 
        "BIGINT_LITERAL", "SMALLINT_LITERAL", "TINYINT_LITERAL", "INTEGER_VALUE", 
        "EXPONENT_VALUE", "DECIMAL_VALUE", "FLOAT_LITERAL", "DOUBLE_LITERAL", 
        "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
        "BRACKETED_COMMENT", "WS", "UNRECOGNIZED"
    ];
    public static readonly ruleNames = [
        "program", "singleStatement", "statement", "timezone", "configKey", 
        "configValue", "unsupportedHiveNativeCommands", "createTableHeader", 
        "replaceTableHeader", "bucketSpec", "skewSpec", "locationSpec", 
        "commentSpec", "query", "insertInto", "partitionSpecLocation", "partitionSpec", 
        "partitionVal", "namespace", "namespaces", "describeFuncName", "describeColName", 
        "ctes", "namedQuery", "tableProvider", "createTableClauses", "tableLifecycle", 
        "propertyList", "property", "propertyKey", "propertyValue", "expressionPropertyList", 
        "expressionProperty", "constantList", "nestedConstantList", "createFileFormat", 
        "fileFormat", "storageHandler", "resource", "dmlStatementNoWith", 
        "namespaceName", "namespaceNameCreate", "tableNameCreate", "tableName", 
        "viewNameCreate", "viewName", "columnName", "columnNameSeq", "columnNameCreate", 
        "identifierReference", "queryOrganization", "multiInsertQueryBody", 
        "queryTerm", "queryPrimary", "sortItem", "fromStatement", "fromStatementBody", 
        "querySpecification", "transformClause", "selectClause", "setClause", 
        "matchedClause", "notMatchedClause", "notMatchedBySourceClause", 
        "matchedAction", "notMatchedAction", "notMatchedBySourceAction", 
        "assignmentList", "assignment", "whereClause", "havingClause", "hint", 
        "hintStatement", "fromClause", "functionKind", "temporalClause", 
        "aggregationClause", "groupByClause", "groupingAnalytics", "groupingElement", 
        "groupingSet", "pivotClause", "pivotColumn", "pivotValue", "unpivotClause", 
        "unpivotNullClause", "unpivotOperator", "unpivotSingleValueColumnClause", 
        "unpivotMultiValueColumnClause", "unpivotColumnSet", "unpivotValueColumn", 
        "unpivotNameColumn", "unpivotColumnAndAlias", "unpivotColumn", "unpivotAlias", 
        "ifNotExists", "ifExists", "lateralView", "setQuantifier", "relation", 
        "relationExtension", "joinRelation", "joinType", "joinCriteria", 
        "sample", "sampleMethod", "identifierList", "identifierSeq", "orderedIdentifierList", 
        "orderedIdentifier", "identifierCommentList", "identifierComment", 
        "relationPrimary", "atomSubQueryTableSource", "inlineTable", "functionTableSubqueryArgument", 
        "tableArgumentPartitioning", "functionTableNamedArgumentExpression", 
        "functionTableReferenceArgument", "functionTableArgument", "functionTable", 
        "atomFunctionTable", "tableAlias", "rowFormat", "multipartIdentifierList", 
        "multipartIdentifier", "multipartIdentifierPropertyList", "multipartIdentifierProperty", 
        "tableIdentifier", "viewIdentifier", "selectLiteralColumnName", 
        "selectExpressionColumnName", "tableAllColumns", "namedExpression", 
        "namedExpressionSeq", "selectList", "partitionFieldList", "partitionField", 
        "transform", "transformArgument", "expression", "namedArgumentExpression", 
        "functionArgument", "expressionSeq", "booleanExpression", "predicate", 
        "valueExpression", "datetimeUnit", "primaryExpression", "literalType", 
        "constant", "comparisonOperator", "arithmeticOperator", "predicateOperator", 
        "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
        "multiUnitsInterval", "errorCapturingUnitToUnitInterval", "unitToUnitInterval", 
        "intervalValue", "unitInMultiUnits", "unitInUnitToUnit", "colPosition", 
        "type", "dataType", "qualifiedColTypeWithPositionSeqForAdd", "qualifiedColTypeWithPositionForAdd", 
        "qualifiedColTypeWithPositionSeqForReplace", "qualifiedColTypeWithPositionForReplace", 
        "colDefinitionDescriptorWithPosition", "defaultExpression", "variableDefaultExpression", 
        "colTypeList", "columnType", "createOrReplaceTableColTypeList", 
        "createOrReplaceTableColType", "colDefinitionOption", "generationExpression", 
        "complexColTypeList", "complexColType", "whenClause", "windowClause", 
        "zorderClause", "namedWindow", "windowSpec", "windowFrame", "frameBound", 
        "qualifiedNameList", "functionName", "functionNameCreate", "qualifiedName", 
        "errorCapturingIdentifier", "errorCapturingIdentifierExtra", "identifier", 
        "strictIdentifier", "quotedIdentifier", "backQuotedIdentifier", 
        "number", "alterColumnAction", "stringLit", "commentStr", "version", 
        "ansiNonReserved", "strictNonReserved", "nonReserved",
    ];

    public get grammarFileName(): string { return "SparkSqlParser.g4"; }
    public get literalNames(): (string | null)[] { return SparkSqlParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return SparkSqlParser.symbolicNames; }
    public get ruleNames(): string[] { return SparkSqlParser.ruleNames; }
    public get serializedATN(): number[] { return SparkSqlParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, SparkSqlParser._ATN, SparkSqlParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public program(): ProgramContext {
        let localContext = new ProgramContext(this.context, this.state);
        this.enterRule(localContext, 0, SparkSqlParser.RULE_program);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 415;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 10500) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 67896321) !== 0) || ((((_la - 81)) & ~0x1F) === 0 && ((1 << (_la - 81)) & 100696297) !== 0) || ((((_la - 123)) & ~0x1F) === 0 && ((1 << (_la - 123)) & 16842817) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 2102291) !== 0) || _la === 205 || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 2181171413) !== 0) || ((((_la - 273)) & ~0x1F) === 0 && ((1 << (_la - 273)) & 1048833) !== 0) || ((((_la - 317)) & ~0x1F) === 0 && ((1 << (_la - 317)) & 536949281) !== 0)) {
                {
                {
                this.state = 412;
                this.singleStatement();
                }
                }
                this.state = 417;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 418;
            this.match(SparkSqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleStatement(): SingleStatementContext {
        let localContext = new SingleStatementContext(this.context, this.state);
        this.enterRule(localContext, 2, SparkSqlParser.RULE_singleStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 420;
            this.statement();
            this.state = 422;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1) {
                {
                this.state = 421;
                this.match(SparkSqlParser.SEMICOLON);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 4, SparkSqlParser.RULE_statement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1349;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 144, this.context) ) {
            case 1:
                localContext = new StatementDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 424;
                this.query();
                }
                break;
            case 2:
                localContext = new DmlStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 426;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 346) {
                    {
                    this.state = 425;
                    this.ctes();
                    }
                }

                this.state = 428;
                this.dmlStatementNoWith();
                }
                break;
            case 3:
                localContext = new UseNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 429;
                this.match(SparkSqlParser.KW_USE);
                this.state = 431;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
                case 1:
                    {
                    this.state = 430;
                    this.namespace();
                    }
                    break;
                }
                this.state = 433;
                this.namespaceName();
                }
                break;
            case 4:
                localContext = new SetCatalogContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 434;
                this.match(SparkSqlParser.KW_SET);
                this.state = 435;
                this.match(SparkSqlParser.KW_CATALOG);
                this.state = 438;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 4, this.context) ) {
                case 1:
                    {
                    this.state = 436;
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 437;
                    this.stringLit();
                    }
                    break;
                }
                }
                break;
            case 5:
                localContext = new CreateNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 440;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 441;
                this.namespace();
                this.state = 443;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 5, this.context) ) {
                case 1:
                    {
                    this.state = 442;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 445;
                this.namespaceNameCreate();
                this.state = 453;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 7, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        this.state = 451;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case SparkSqlParser.KW_COMMENT:
                            {
                            this.state = 446;
                            this.commentSpec();
                            }
                            break;
                        case SparkSqlParser.KW_LOCATION:
                            {
                            this.state = 447;
                            this.locationSpec();
                            }
                            break;
                        case SparkSqlParser.KW_WITH:
                            {
                            {
                            this.state = 448;
                            this.match(SparkSqlParser.KW_WITH);
                            this.state = 449;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 78 || _la === 229)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 450;
                            this.propertyList();
                            }
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                    }
                    this.state = 455;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 7, this.context);
                }
                }
                break;
            case 6:
                localContext = new SetNamespacePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 456;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 457;
                this.namespace();
                this.state = 458;
                this.namespaceName();
                this.state = 459;
                this.match(SparkSqlParser.KW_SET);
                this.state = 460;
                _la = this.tokenStream.LA(1);
                if(!(_la === 78 || _la === 229)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 461;
                this.propertyList();
                }
                break;
            case 7:
                localContext = new SetNamespaceLocationContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 463;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 464;
                this.namespace();
                this.state = 465;
                this.namespaceName();
                this.state = 466;
                this.match(SparkSqlParser.KW_SET);
                this.state = 467;
                this.locationSpec();
                }
                break;
            case 8:
                localContext = new DropNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 469;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 470;
                this.namespace();
                this.state = 472;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 8, this.context) ) {
                case 1:
                    {
                    this.state = 471;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 474;
                this.namespaceName();
                this.state = 476;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 247) {
                    {
                    this.state = 475;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 34 || _la === 247)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 9:
                localContext = new ShowNamespacesContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 478;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 479;
                this.namespaces();
                this.state = 482;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 10, this.context) ) {
                case 1:
                    {
                    this.state = 480;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 481;
                    this.multipartIdentifier();
                    }
                    break;
                }
                this.state = 488;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 377 || _la === 378) {
                    {
                    this.state = 485;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 484;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 487;
                    (localContext as ShowNamespacesContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 10:
                localContext = new CreateTableContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 490;
                this.createTableHeader();
                this.state = 495;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 13, this.context) ) {
                case 1:
                    {
                    this.state = 491;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 492;
                    this.createOrReplaceTableColTypeList();
                    this.state = 493;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 498;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 332) {
                    {
                    this.state = 497;
                    this.tableProvider();
                    }
                }

                this.state = 500;
                this.createTableClauses();
                this.state = 505;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 16, this.context) ) {
                case 1:
                    {
                    this.state = 502;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 20) {
                        {
                        this.state = 501;
                        this.match(SparkSqlParser.KW_AS);
                        }
                    }

                    this.state = 504;
                    this.query();
                    }
                    break;
                }
                }
                break;
            case 11:
                localContext = new CreateTableLikeContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 507;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 508;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 510;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 17, this.context) ) {
                case 1:
                    {
                    this.state = 509;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 512;
                (localContext as CreateTableLikeContext)._target = this.tableNameCreate();
                this.state = 513;
                this.match(SparkSqlParser.KW_LIKE);
                this.state = 514;
                (localContext as CreateTableLikeContext)._source = this.tableName();
                this.state = 524;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 162 || _la === 170 || _la === 257 || _la === 283 || _la === 297 || _la === 332) {
                    {
                    this.state = 522;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSqlParser.KW_USING:
                        {
                        this.state = 515;
                        this.tableProvider();
                        }
                        break;
                    case SparkSqlParser.KW_ROW:
                        {
                        this.state = 516;
                        this.rowFormat();
                        }
                        break;
                    case SparkSqlParser.KW_STORED:
                        {
                        this.state = 517;
                        this.createFileFormat();
                        }
                        break;
                    case SparkSqlParser.KW_LOCATION:
                        {
                        this.state = 518;
                        this.locationSpec();
                        }
                        break;
                    case SparkSqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 519;
                        this.match(SparkSqlParser.KW_TBLPROPERTIES);
                        this.state = 520;
                        (localContext as CreateTableLikeContext)._tableProps = this.propertyList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_LIFECYCLE:
                        {
                        this.state = 521;
                        this.tableLifecycle();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 526;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 12:
                localContext = new ReplaceTableContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 527;
                this.replaceTableHeader();
                this.state = 532;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 20, this.context) ) {
                case 1:
                    {
                    this.state = 528;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 529;
                    this.createOrReplaceTableColTypeList();
                    this.state = 530;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 535;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 332) {
                    {
                    this.state = 534;
                    this.tableProvider();
                    }
                }

                this.state = 537;
                this.createTableClauses();
                this.state = 542;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context) ) {
                case 1:
                    {
                    this.state = 539;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 20) {
                        {
                        this.state = 538;
                        this.match(SparkSqlParser.KW_AS);
                        }
                    }

                    this.state = 541;
                    this.query();
                    }
                    break;
                }
                }
                break;
            case 13:
                localContext = new AnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 544;
                this.match(SparkSqlParser.KW_ANALYZE);
                this.state = 545;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 546;
                this.tableName();
                this.state = 548;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 547;
                    this.partitionSpec();
                    }
                }

                this.state = 550;
                this.match(SparkSqlParser.KW_COMPUTE);
                this.state = 551;
                this.match(SparkSqlParser.KW_STATISTICS);
                this.state = 559;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
                case 1:
                    {
                    this.state = 552;
                    this.match(SparkSqlParser.KW_NOSCAN);
                    }
                    break;
                case 2:
                    {
                    this.state = 553;
                    this.match(SparkSqlParser.KW_FOR);
                    this.state = 554;
                    this.match(SparkSqlParser.KW_COLUMNS);
                    this.state = 555;
                    this.columnNameSeq();
                    }
                    break;
                case 3:
                    {
                    this.state = 556;
                    this.match(SparkSqlParser.KW_FOR);
                    this.state = 557;
                    this.match(SparkSqlParser.KW_ALL);
                    this.state = 558;
                    this.match(SparkSqlParser.KW_COLUMNS);
                    }
                    break;
                }
                }
                break;
            case 14:
                localContext = new AnalyzeTablesContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 561;
                this.match(SparkSqlParser.KW_ANALYZE);
                this.state = 562;
                this.match(SparkSqlParser.KW_TABLES);
                this.state = 565;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 123 || _la === 140) {
                    {
                    this.state = 563;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 564;
                    this.namespaceName();
                    }
                }

                this.state = 567;
                this.match(SparkSqlParser.KW_COMPUTE);
                this.state = 568;
                this.match(SparkSqlParser.KW_STATISTICS);
                this.state = 570;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 569;
                    this.match(SparkSqlParser.KW_NOSCAN);
                    }
                }

                }
                break;
            case 15:
                localContext = new AlterTableAddColumnContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 572;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 573;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 574;
                this.tableName();
                this.state = 575;
                this.match(SparkSqlParser.KW_ADD);
                this.state = 576;
                this.match(SparkSqlParser.KW_COLUMN);
                this.state = 577;
                this.qualifiedColTypeWithPositionForAdd();
                }
                break;
            case 16:
                localContext = new AlterTableAddColumnsContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 579;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 580;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 581;
                this.tableName();
                this.state = 582;
                this.match(SparkSqlParser.KW_ADD);
                this.state = 583;
                this.match(SparkSqlParser.KW_COLUMNS);
                this.state = 584;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 585;
                this.qualifiedColTypeWithPositionSeqForAdd();
                this.state = 586;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 17:
                localContext = new RenameTableColumnContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 588;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 589;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 590;
                (localContext as RenameTableColumnContext)._table = this.tableName();
                this.state = 591;
                this.match(SparkSqlParser.KW_RENAME);
                this.state = 592;
                this.match(SparkSqlParser.KW_COLUMN);
                this.state = 593;
                this.columnName();
                this.state = 594;
                this.match(SparkSqlParser.KW_TO);
                this.state = 595;
                this.columnNameCreate();
                }
                break;
            case 18:
                localContext = new AlterTableDropColumnContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 597;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 598;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 599;
                this.tableName();
                this.state = 600;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 601;
                this.match(SparkSqlParser.KW_COLUMN);
                this.state = 603;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 28, this.context) ) {
                case 1:
                    {
                    this.state = 602;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 605;
                this.columnName();
                }
                break;
            case 19:
                localContext = new DropTableColumnsContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 607;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 608;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 609;
                this.tableName();
                this.state = 610;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 611;
                this.match(SparkSqlParser.KW_COLUMNS);
                this.state = 613;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 612;
                    this.ifExists();
                    }
                }

                this.state = 615;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 616;
                this.columnNameSeq();
                this.state = 617;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 20:
                localContext = new RenameTableContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 619;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 624;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 620;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 621;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 622;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 623;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 626;
                this.match(SparkSqlParser.KW_RENAME);
                this.state = 627;
                this.match(SparkSqlParser.KW_TO);
                this.state = 628;
                this.multipartIdentifier();
                }
                break;
            case 21:
                localContext = new SetTablePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 630;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 635;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 631;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 632;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 633;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 634;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 637;
                this.match(SparkSqlParser.KW_SET);
                this.state = 638;
                this.match(SparkSqlParser.KW_TBLPROPERTIES);
                this.state = 639;
                this.propertyList();
                }
                break;
            case 22:
                localContext = new UnsetTablePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 641;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 646;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 642;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 643;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 644;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 645;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 648;
                this.match(SparkSqlParser.KW_UNSET);
                this.state = 649;
                this.match(SparkSqlParser.KW_TBLPROPERTIES);
                this.state = 651;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 650;
                    this.ifExists();
                    }
                }

                this.state = 653;
                this.propertyList();
                }
                break;
            case 23:
                localContext = new AlterTableAlterColumnContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 655;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 656;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 657;
                (localContext as AlterTableAlterColumnContext)._table = this.tableName();
                this.state = 658;
                _la = this.tokenStream.LA(1);
                if(!(_la === 11 || _la === 39)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 660;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
                case 1:
                    {
                    this.state = 659;
                    this.match(SparkSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 662;
                (localContext as AlterTableAlterColumnContext)._column = this.columnName();
                this.state = 664;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 35, this.context) ) {
                case 1:
                    {
                    this.state = 663;
                    this.alterColumnAction();
                    }
                    break;
                }
                }
                break;
            case 24:
                localContext = new HiveChangeColumnContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 666;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 667;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 668;
                (localContext as HiveChangeColumnContext)._table = this.tableName();
                this.state = 670;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 669;
                    this.partitionSpec();
                    }
                }

                this.state = 672;
                this.match(SparkSqlParser.KW_CHANGE);
                this.state = 674;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
                case 1:
                    {
                    this.state = 673;
                    this.match(SparkSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 676;
                (localContext as HiveChangeColumnContext)._colName = this.columnName();
                this.state = 677;
                this.columnType();
                this.state = 679;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 9 || _la === 116) {
                    {
                    this.state = 678;
                    this.colPosition();
                    }
                }

                }
                break;
            case 25:
                localContext = new HiveReplaceColumnsContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 681;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 682;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 683;
                (localContext as HiveReplaceColumnsContext)._table = this.tableName();
                this.state = 685;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 684;
                    this.partitionSpec();
                    }
                }

                this.state = 687;
                this.match(SparkSqlParser.KW_REPLACE);
                this.state = 688;
                this.match(SparkSqlParser.KW_COLUMNS);
                this.state = 689;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 690;
                this.qualifiedColTypeWithPositionSeqForReplace();
                this.state = 691;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 26:
                localContext = new SetTableSerDeContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 693;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 694;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 695;
                this.tableName();
                this.state = 697;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 696;
                    this.partitionSpec();
                    }
                }

                this.state = 699;
                this.match(SparkSqlParser.KW_SET);
                this.state = 700;
                this.match(SparkSqlParser.KW_SERDE);
                this.state = 701;
                this.stringLit();
                this.state = 705;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 41, this.context) ) {
                case 1:
                    {
                    this.state = 702;
                    this.match(SparkSqlParser.KW_WITH);
                    this.state = 703;
                    this.match(SparkSqlParser.KW_SERDEPROPERTIES);
                    this.state = 704;
                    this.propertyList();
                    }
                    break;
                }
                }
                break;
            case 27:
                localContext = new SetTableSerDePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 707;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 708;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 709;
                this.tableName();
                this.state = 711;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 710;
                    this.partitionSpec();
                    }
                }

                this.state = 713;
                this.match(SparkSqlParser.KW_SET);
                this.state = 714;
                this.match(SparkSqlParser.KW_SERDEPROPERTIES);
                this.state = 715;
                this.propertyList();
                }
                break;
            case 28:
                localContext = new AddTablePartitionContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 717;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 722;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 718;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 719;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 720;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 721;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 724;
                this.match(SparkSqlParser.KW_ADD);
                this.state = 726;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 725;
                    this.ifNotExists();
                    }
                }

                this.state = 729;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 728;
                    this.partitionSpecLocation();
                    }
                    }
                    this.state = 731;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 217);
                }
                break;
            case 29:
                localContext = new RenameTablePartitionContext(localContext);
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 733;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 734;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 735;
                this.tableName();
                this.state = 736;
                this.partitionSpec();
                this.state = 737;
                this.match(SparkSqlParser.KW_RENAME);
                this.state = 738;
                this.match(SparkSqlParser.KW_TO);
                this.state = 739;
                this.partitionSpec();
                }
                break;
            case 30:
                localContext = new DropTablePartitionsContext(localContext);
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 741;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 746;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_TABLE:
                    {
                    this.state = 742;
                    this.match(SparkSqlParser.KW_TABLE);
                    this.state = 743;
                    this.tableName();
                    }
                    break;
                case SparkSqlParser.KW_VIEW:
                    {
                    this.state = 744;
                    this.match(SparkSqlParser.KW_VIEW);
                    this.state = 745;
                    this.viewName();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 748;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 750;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 749;
                    this.ifExists();
                    }
                }

                this.state = 752;
                this.partitionSpec();
                this.state = 757;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 753;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 754;
                    this.partitionSpec();
                    }
                    }
                    this.state = 759;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 761;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 230) {
                    {
                    this.state = 760;
                    this.match(SparkSqlParser.KW_PURGE);
                    }
                }

                }
                break;
            case 31:
                localContext = new SetTableLocationContext(localContext);
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 763;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 764;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 765;
                this.tableName();
                this.state = 767;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 766;
                    this.partitionSpec();
                    }
                }

                this.state = 769;
                this.match(SparkSqlParser.KW_SET);
                this.state = 770;
                this.locationSpec();
                }
                break;
            case 32:
                localContext = new RecoverPartitionsContext(localContext);
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 772;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 773;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 774;
                this.tableName();
                this.state = 775;
                this.match(SparkSqlParser.KW_RECOVER);
                this.state = 776;
                this.match(SparkSqlParser.KW_PARTITIONS);
                }
                break;
            case 33:
                localContext = new AlterMaterializedViewRewriteContext(localContext);
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 778;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 779;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 780;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 781;
                this.viewName();
                this.state = 782;
                _la = this.tokenStream.LA(1);
                if(!(_la === 91 || _la === 98)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 783;
                this.match(SparkSqlParser.KW_REWRITE);
                }
                break;
            case 34:
                localContext = new AlterMaterializedViewPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 785;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 786;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 787;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 788;
                this.viewName();
                this.state = 789;
                this.match(SparkSqlParser.KW_SET);
                this.state = 790;
                this.match(SparkSqlParser.KW_TBLPROPERTIES);
                this.state = 791;
                this.propertyList();
                }
                break;
            case 35:
                localContext = new DropTableContext(localContext);
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 793;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 794;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 796;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 51, this.context) ) {
                case 1:
                    {
                    this.state = 795;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 798;
                this.tableName();
                this.state = 800;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 230) {
                    {
                    this.state = 799;
                    this.match(SparkSqlParser.KW_PURGE);
                    }
                }

                }
                break;
            case 36:
                localContext = new DropViewContext(localContext);
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 802;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 803;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 805;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 53, this.context) ) {
                case 1:
                    {
                    this.state = 804;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 807;
                this.viewName();
                }
                break;
            case 37:
                localContext = new DropMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 808;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 809;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 810;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 812;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
                case 1:
                    {
                    this.state = 811;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 814;
                this.viewName();
                }
                break;
            case 38:
                localContext = new CreateViewContext(localContext);
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 815;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 818;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 208) {
                    {
                    this.state = 816;
                    this.match(SparkSqlParser.KW_OR);
                    this.state = 817;
                    this.match(SparkSqlParser.KW_REPLACE);
                    }
                }

                this.state = 824;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128 || _la === 298) {
                    {
                    this.state = 821;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 128) {
                        {
                        this.state = 820;
                        this.match(SparkSqlParser.KW_GLOBAL);
                        }
                    }

                    this.state = 823;
                    this.match(SparkSqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 826;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 828;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
                case 1:
                    {
                    this.state = 827;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 830;
                this.viewNameCreate();
                this.state = 832;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 831;
                    this.identifierCommentList();
                    }
                }

                this.state = 842;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 51 || _la === 218 || _la === 297) {
                    {
                    this.state = 840;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSqlParser.KW_COMMENT:
                        {
                        this.state = 834;
                        this.commentSpec();
                        }
                        break;
                    case SparkSqlParser.KW_PARTITIONED:
                        {
                        {
                        this.state = 835;
                        this.match(SparkSqlParser.KW_PARTITIONED);
                        this.state = 836;
                        this.match(SparkSqlParser.KW_ON);
                        this.state = 837;
                        this.identifierList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 838;
                        this.match(SparkSqlParser.KW_TBLPROPERTIES);
                        this.state = 839;
                        this.propertyList();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 844;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 845;
                this.match(SparkSqlParser.KW_AS);
                this.state = 846;
                this.query();
                }
                break;
            case 39:
                localContext = new CreateTempViewUsingContext(localContext);
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 848;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 851;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 208) {
                    {
                    this.state = 849;
                    this.match(SparkSqlParser.KW_OR);
                    this.state = 850;
                    this.match(SparkSqlParser.KW_REPLACE);
                    }
                }

                this.state = 854;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 853;
                    this.match(SparkSqlParser.KW_GLOBAL);
                    }
                }

                this.state = 856;
                this.match(SparkSqlParser.KW_TEMPORARY);
                this.state = 857;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 858;
                this.viewNameCreate();
                this.state = 863;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 859;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 860;
                    this.colTypeList();
                    this.state = 861;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                }

                this.state = 865;
                this.tableProvider();
                this.state = 868;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 866;
                    this.match(SparkSqlParser.KW_OPTIONS);
                    this.state = 867;
                    this.propertyList();
                    }
                }

                }
                break;
            case 40:
                localContext = new AlterViewQueryContext(localContext);
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 870;
                this.match(SparkSqlParser.KW_ALTER);
                this.state = 871;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 872;
                this.viewName();
                this.state = 874;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20) {
                    {
                    this.state = 873;
                    this.match(SparkSqlParser.KW_AS);
                    }
                }

                this.state = 876;
                this.query();
                }
                break;
            case 41:
                localContext = new CreateFunctionContext(localContext);
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 878;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 881;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 208) {
                    {
                    this.state = 879;
                    this.match(SparkSqlParser.KW_OR);
                    this.state = 880;
                    this.match(SparkSqlParser.KW_REPLACE);
                    }
                }

                this.state = 884;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 298) {
                    {
                    this.state = 883;
                    this.match(SparkSqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 886;
                this.match(SparkSqlParser.KW_FUNCTION);
                this.state = 888;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 69, this.context) ) {
                case 1:
                    {
                    this.state = 887;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 890;
                this.functionNameCreate();
                this.state = 891;
                this.match(SparkSqlParser.KW_AS);
                this.state = 892;
                (localContext as CreateFunctionContext)._className = this.stringLit();
                this.state = 902;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 332) {
                    {
                    this.state = 893;
                    this.match(SparkSqlParser.KW_USING);
                    this.state = 894;
                    this.resource();
                    this.state = 899;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 895;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 896;
                        this.resource();
                        }
                        }
                        this.state = 901;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 42:
                localContext = new CreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 904;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 905;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 906;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 908;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 72, this.context) ) {
                case 1:
                    {
                    this.state = 907;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 910;
                this.viewNameCreate();
                this.state = 912;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 332) {
                    {
                    this.state = 911;
                    this.tableProvider();
                    }
                }

                this.state = 929;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 45 || _la === 51 || _la === 170 || _la === 207 || _la === 218 || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 67371009) !== 0) || _la === 297) {
                    {
                    this.state = 927;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSqlParser.KW_OPTIONS:
                        {
                        {
                        this.state = 914;
                        this.match(SparkSqlParser.KW_OPTIONS);
                        this.state = 915;
                        (localContext as CreateMaterializedViewContext)._options = this.propertyList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_PARTITIONED:
                        {
                        {
                        this.state = 916;
                        this.match(SparkSqlParser.KW_PARTITIONED);
                        this.state = 917;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 918;
                        (localContext as CreateMaterializedViewContext)._partitioning = this.partitionFieldList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_SKEWED:
                        {
                        this.state = 919;
                        this.skewSpec();
                        }
                        break;
                    case SparkSqlParser.KW_CLUSTERED:
                        {
                        this.state = 920;
                        this.bucketSpec();
                        }
                        break;
                    case SparkSqlParser.KW_ROW:
                        {
                        this.state = 921;
                        this.rowFormat();
                        }
                        break;
                    case SparkSqlParser.KW_STORED:
                        {
                        this.state = 922;
                        this.createFileFormat();
                        }
                        break;
                    case SparkSqlParser.KW_LOCATION:
                        {
                        this.state = 923;
                        this.locationSpec();
                        }
                        break;
                    case SparkSqlParser.KW_COMMENT:
                        {
                        this.state = 924;
                        this.commentSpec();
                        }
                        break;
                    case SparkSqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 925;
                        this.match(SparkSqlParser.KW_TBLPROPERTIES);
                        this.state = 926;
                        (localContext as CreateMaterializedViewContext)._tableProps = this.propertyList();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 931;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 932;
                this.match(SparkSqlParser.KW_AS);
                this.state = 933;
                this.query();
                }
                break;
            case 43:
                localContext = new DropFunctionContext(localContext);
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 935;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 937;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 298) {
                    {
                    this.state = 936;
                    this.match(SparkSqlParser.KW_TEMPORARY);
                    }
                }

                this.state = 939;
                this.match(SparkSqlParser.KW_FUNCTION);
                this.state = 941;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 77, this.context) ) {
                case 1:
                    {
                    this.state = 940;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 943;
                this.functionName();
                }
                break;
            case 44:
                localContext = new DeclareVariableContext(localContext);
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 944;
                this.match(SparkSqlParser.KW_DECLARE);
                this.state = 947;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 78, this.context) ) {
                case 1:
                    {
                    this.state = 945;
                    this.match(SparkSqlParser.KW_OR);
                    this.state = 946;
                    this.match(SparkSqlParser.KW_REPLACE);
                    }
                    break;
                }
                this.state = 950;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 79, this.context) ) {
                case 1:
                    {
                    this.state = 949;
                    this.match(SparkSqlParser.KW_VARIABLE);
                    }
                    break;
                }
                this.state = 952;
                this.functionName();
                this.state = 954;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 80, this.context) ) {
                case 1:
                    {
                    this.state = 953;
                    this.dataType();
                    }
                    break;
                }
                this.state = 957;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82 || _la === 352) {
                    {
                    this.state = 956;
                    this.variableDefaultExpression();
                    }
                }

                }
                break;
            case 45:
                localContext = new DropVariableContext(localContext);
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 959;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 960;
                this.match(SparkSqlParser.KW_TEMPORARY);
                this.state = 961;
                this.match(SparkSqlParser.KW_VARIABLE);
                this.state = 963;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 82, this.context) ) {
                case 1:
                    {
                    this.state = 962;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 968;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 83, this.context) ) {
                case 1:
                    {
                    this.state = 965;
                    this.tableName();
                    }
                    break;
                case 2:
                    {
                    this.state = 966;
                    this.viewName();
                    }
                    break;
                case 3:
                    {
                    this.state = 967;
                    this.functionName();
                    }
                    break;
                }
                }
                break;
            case 46:
                localContext = new ExplainStatementContext(localContext);
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 970;
                this.match(SparkSqlParser.KW_EXPLAIN);
                this.state = 972;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46 || _la === 58 || _la === 108 || _la === 122 || _la === 173) {
                    {
                    this.state = 971;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 46 || _la === 58 || _la === 108 || _la === 122 || _la === 173)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 974;
                this.statement();
                }
                break;
            case 47:
                localContext = new ShowTablesContext(localContext);
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 975;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 976;
                this.match(SparkSqlParser.KW_TABLES);
                this.state = 979;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 85, this.context) ) {
                case 1:
                    {
                    this.state = 977;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 978;
                    this.namespaceName();
                    }
                    break;
                }
                this.state = 985;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 377 || _la === 378) {
                    {
                    this.state = 982;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 981;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 984;
                    (localContext as ShowTablesContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 48:
                localContext = new ShowTableExtendedContext(localContext);
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 987;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 988;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 989;
                this.match(SparkSqlParser.KW_EXTENDED);
                this.state = 992;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 123 || _la === 140) {
                    {
                    this.state = 990;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 991;
                    (localContext as ShowTableExtendedContext)._ns = this.namespaceName();
                    }
                }

                this.state = 994;
                this.match(SparkSqlParser.KW_LIKE);
                this.state = 995;
                (localContext as ShowTableExtendedContext)._pattern = this.stringLit();
                this.state = 997;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 996;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 49:
                localContext = new ShowTblPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 999;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1000;
                this.match(SparkSqlParser.KW_TBLPROPERTIES);
                this.state = 1001;
                (localContext as ShowTblPropertiesContext)._table = this.tableName();
                this.state = 1006;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 90, this.context) ) {
                case 1:
                    {
                    this.state = 1002;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 1003;
                    (localContext as ShowTblPropertiesContext)._key = this.propertyKey();
                    this.state = 1004;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            case 50:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 1008;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1009;
                this.match(SparkSqlParser.KW_COLUMNS);
                this.state = 1010;
                _la = this.tokenStream.LA(1);
                if(!(_la === 123 || _la === 140)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1011;
                (localContext as ShowColumnsContext)._table = this.tableName();
                this.state = 1014;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 91, this.context) ) {
                case 1:
                    {
                    this.state = 1012;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1013;
                    this.namespaceName();
                    }
                    break;
                }
                }
                break;
            case 51:
                localContext = new ShowViewsContext(localContext);
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 1016;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1017;
                this.match(SparkSqlParser.KW_VIEWS);
                this.state = 1020;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 92, this.context) ) {
                case 1:
                    {
                    this.state = 1018;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1019;
                    this.namespaceName();
                    }
                    break;
                }
                this.state = 1026;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 377 || _la === 378) {
                    {
                    this.state = 1023;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 1022;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 1025;
                    (localContext as ShowViewsContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 52:
                localContext = new ShowPartitionsContext(localContext);
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 1028;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1029;
                this.match(SparkSqlParser.KW_PARTITIONS);
                this.state = 1030;
                this.tableName();
                this.state = 1032;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1031;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 53:
                localContext = new ShowFunctionsContext(localContext);
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 1034;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1036;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 10 || _la === 290 || _la === 331) {
                    {
                    this.state = 1035;
                    this.functionKind();
                    }
                }

                this.state = 1038;
                this.match(SparkSqlParser.KW_FUNCTIONS);
                this.state = 1041;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 97, this.context) ) {
                case 1:
                    {
                    this.state = 1039;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1040;
                    (localContext as ShowFunctionsContext)._ns = this.namespaceName();
                    }
                    break;
                }
                this.state = 1050;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 100, this.context) ) {
                case 1:
                    {
                    this.state = 1044;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 98, this.context) ) {
                    case 1:
                        {
                        this.state = 1043;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                        break;
                    }
                    this.state = 1048;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 99, this.context) ) {
                    case 1:
                        {
                        this.state = 1046;
                        (localContext as ShowFunctionsContext)._legacy = this.multipartIdentifier();
                        }
                        break;
                    case 2:
                        {
                        this.state = 1047;
                        (localContext as ShowFunctionsContext)._pattern = this.stringLit();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 54:
                localContext = new ShowCreateTableContext(localContext);
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 1052;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1053;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 1054;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1055;
                this.tableName();
                this.state = 1058;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20) {
                    {
                    this.state = 1056;
                    this.match(SparkSqlParser.KW_AS);
                    this.state = 1057;
                    this.match(SparkSqlParser.KW_SERDE);
                    }
                }

                }
                break;
            case 55:
                localContext = new ShowCurrentNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 1060;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1061;
                this.match(SparkSqlParser.KW_CURRENT);
                this.state = 1062;
                this.namespace();
                }
                break;
            case 56:
                localContext = new ShowCatalogsContext(localContext);
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 1063;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1064;
                this.match(SparkSqlParser.KW_CATALOGS);
                this.state = 1069;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 377 || _la === 378) {
                    {
                    this.state = 1066;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 1065;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 1068;
                    (localContext as ShowCatalogsContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 57:
                localContext = new ShowMaterializedViewsContext(localContext);
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 1071;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1072;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 1073;
                this.match(SparkSqlParser.KW_VIEWS);
                this.state = 1076;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 104, this.context) ) {
                case 1:
                    {
                    this.state = 1074;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 123 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1075;
                    (localContext as ShowMaterializedViewsContext)._db_name = this.namespaceName();
                    }
                    break;
                }
                this.state = 1082;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 163 || _la === 377 || _la === 378) {
                    {
                    this.state = 1079;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 163) {
                        {
                        this.state = 1078;
                        this.match(SparkSqlParser.KW_LIKE);
                        }
                    }

                    this.state = 1081;
                    (localContext as ShowMaterializedViewsContext)._pattern = this.stringLit();
                    }
                }

                }
                break;
            case 58:
                localContext = new ShowCreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 1084;
                this.match(SparkSqlParser.KW_SHOW);
                this.state = 1085;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 1086;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 1087;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 1088;
                this.viewName();
                this.state = 1091;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20) {
                    {
                    this.state = 1089;
                    this.match(SparkSqlParser.KW_AS);
                    this.state = 1090;
                    this.match(SparkSqlParser.KW_SERDE);
                    }
                }

                }
                break;
            case 59:
                localContext = new DescribeFunctionContext(localContext);
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 1093;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1094;
                this.match(SparkSqlParser.KW_FUNCTION);
                this.state = 1096;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 108, this.context) ) {
                case 1:
                    {
                    this.state = 1095;
                    this.match(SparkSqlParser.KW_EXTENDED);
                    }
                    break;
                }
                this.state = 1098;
                this.describeFuncName();
                }
                break;
            case 60:
                localContext = new DescribeNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 1099;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1100;
                this.match(SparkSqlParser.KW_DATABASE);
                this.state = 1102;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 109, this.context) ) {
                case 1:
                    {
                    this.state = 1101;
                    this.match(SparkSqlParser.KW_EXTENDED);
                    }
                    break;
                }
                this.state = 1104;
                this.namespaceName();
                }
                break;
            case 61:
                localContext = new DescribeRelationContext(localContext);
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 1105;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1107;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 293) {
                    {
                    this.state = 1106;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                }

                this.state = 1110;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 111, this.context) ) {
                case 1:
                    {
                    this.state = 1109;
                    (localContext as DescribeRelationContext)._option = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 108 || _la === 122)) {
                        (localContext as DescribeRelationContext)._option = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 1112;
                this.tableName();
                this.state = 1114;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 112, this.context) ) {
                case 1:
                    {
                    this.state = 1113;
                    this.partitionSpec();
                    }
                    break;
                }
                this.state = 1117;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 113, this.context) ) {
                case 1:
                    {
                    this.state = 1116;
                    this.describeColName();
                    }
                    break;
                }
                }
                break;
            case 62:
                localContext = new DescribeQueryContext(localContext);
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 1119;
                _la = this.tokenStream.LA(1);
                if(!(_la === 86 || _la === 87)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1121;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 232) {
                    {
                    this.state = 1120;
                    this.match(SparkSqlParser.KW_QUERY);
                    }
                }

                this.state = 1123;
                this.query();
                }
                break;
            case 63:
                localContext = new CommentNamespaceContext(localContext);
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 1124;
                this.match(SparkSqlParser.KW_COMMENT);
                this.state = 1125;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1126;
                this.namespace();
                this.state = 1127;
                this.namespaceName();
                this.state = 1128;
                this.match(SparkSqlParser.KW_IS);
                this.state = 1129;
                this.commentStr();
                }
                break;
            case 64:
                localContext = new CommentTableContext(localContext);
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 1131;
                this.match(SparkSqlParser.KW_COMMENT);
                this.state = 1132;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1133;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1134;
                this.tableName();
                this.state = 1135;
                this.match(SparkSqlParser.KW_IS);
                this.state = 1136;
                this.commentStr();
                }
                break;
            case 65:
                localContext = new RefreshTableContext(localContext);
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 1138;
                this.match(SparkSqlParser.KW_REFRESH);
                this.state = 1139;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1140;
                this.tableName();
                }
                break;
            case 66:
                localContext = new RefreshFunctionContext(localContext);
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 1141;
                this.match(SparkSqlParser.KW_REFRESH);
                this.state = 1142;
                this.match(SparkSqlParser.KW_FUNCTION);
                this.state = 1143;
                this.functionName();
                }
                break;
            case 67:
                localContext = new RefreshResourceContext(localContext);
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 1144;
                this.match(SparkSqlParser.KW_REFRESH);
                this.state = 1152;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 116, this.context) ) {
                case 1:
                    {
                    this.state = 1145;
                    this.stringLit();
                    }
                    break;
                case 2:
                    {
                    this.state = 1149;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 115, this.context);
                    while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1 + 1) {
                            {
                            {
                            this.state = 1146;
                            this.matchWildcard();
                            }
                            }
                        }
                        this.state = 1151;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 115, this.context);
                    }
                    }
                    break;
                }
                }
                break;
            case 68:
                localContext = new RefreshMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 1154;
                this.match(SparkSqlParser.KW_REFRESH);
                this.state = 1155;
                this.match(SparkSqlParser.KW_MATERIALIZED);
                this.state = 1156;
                this.match(SparkSqlParser.KW_VIEW);
                this.state = 1157;
                this.viewName();
                }
                break;
            case 69:
                localContext = new CacheTableContext(localContext);
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 1158;
                this.match(SparkSqlParser.KW_CACHE);
                this.state = 1160;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 159) {
                    {
                    this.state = 1159;
                    this.match(SparkSqlParser.KW_LAZY);
                    }
                }

                this.state = 1162;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1163;
                this.tableName();
                this.state = 1166;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 1164;
                    this.match(SparkSqlParser.KW_OPTIONS);
                    this.state = 1165;
                    (localContext as CacheTableContext)._options = this.propertyList();
                    }
                }

                this.state = 1172;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
                case 1:
                    {
                    this.state = 1169;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 20) {
                        {
                        this.state = 1168;
                        this.match(SparkSqlParser.KW_AS);
                        }
                    }

                    this.state = 1171;
                    this.query();
                    }
                    break;
                }
                }
                break;
            case 70:
                localContext = new UnCacheTableContext(localContext);
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1174;
                this.match(SparkSqlParser.KW_UNCACHE);
                this.state = 1175;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1177;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 121, this.context) ) {
                case 1:
                    {
                    this.state = 1176;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1179;
                this.tableName();
                }
                break;
            case 71:
                localContext = new ClearCacheContext(localContext);
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1180;
                this.match(SparkSqlParser.KW_CLEAR);
                this.state = 1181;
                this.match(SparkSqlParser.KW_CACHE);
                }
                break;
            case 72:
                localContext = new LoadDataContext(localContext);
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1182;
                this.match(SparkSqlParser.KW_LOAD);
                this.state = 1183;
                this.match(SparkSqlParser.KW_DATA);
                this.state = 1185;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 169) {
                    {
                    this.state = 1184;
                    this.match(SparkSqlParser.KW_LOCAL);
                    }
                }

                this.state = 1187;
                this.match(SparkSqlParser.KW_INPATH);
                this.state = 1188;
                (localContext as LoadDataContext)._path = this.stringLit();
                this.state = 1190;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 216) {
                    {
                    this.state = 1189;
                    this.match(SparkSqlParser.KW_OVERWRITE);
                    }
                }

                this.state = 1192;
                this.match(SparkSqlParser.KW_INTO);
                this.state = 1193;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1194;
                this.tableName();
                this.state = 1196;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1195;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 73:
                localContext = new TruncateTableContext(localContext);
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1198;
                this.match(SparkSqlParser.KW_TRUNCATE);
                this.state = 1199;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1200;
                this.tableName();
                this.state = 1202;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1201;
                    this.partitionSpec();
                    }
                }

                }
                break;
            case 74:
                localContext = new RepairTableContext(localContext);
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1205;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188) {
                    {
                    this.state = 1204;
                    this.match(SparkSqlParser.KW_MSCK);
                    }
                }

                this.state = 1207;
                this.match(SparkSqlParser.KW_REPAIR);
                this.state = 1208;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 1209;
                this.tableName();
                this.state = 1212;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 127, this.context) ) {
                case 1:
                    {
                    this.state = 1210;
                    (localContext as RepairTableContext)._option = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 8 || _la === 96 || _la === 289)) {
                        (localContext as RepairTableContext)._option = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1211;
                    this.match(SparkSqlParser.KW_PARTITIONS);
                    }
                    break;
                }
                }
                break;
            case 75:
                localContext = new ManageResourceContext(localContext);
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1214;
                (localContext as ManageResourceContext)._op = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 8 || _la === 167)) {
                    (localContext as ManageResourceContext)._op = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1215;
                this.identifier();
                this.state = 1219;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 128, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1216;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1221;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 128, this.context);
                }
                }
                break;
            case 76:
                localContext = new FailNativeCommandContext(localContext);
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1222;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1223;
                this.match(SparkSqlParser.KW_ROLE);
                this.state = 1227;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 129, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1224;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1229;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 129, this.context);
                }
                }
                break;
            case 77:
                localContext = new SetTimeZoneIntervalContext(localContext);
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 1230;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1231;
                this.match(SparkSqlParser.KW_TIME);
                this.state = 1232;
                this.match(SparkSqlParser.KW_ZONE);
                this.state = 1233;
                this.interval();
                }
                break;
            case 78:
                localContext = new SetTimeZoneContext(localContext);
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 1234;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1235;
                this.match(SparkSqlParser.KW_TIME);
                this.state = 1236;
                this.match(SparkSqlParser.KW_ZONE);
                this.state = 1237;
                this.timezone();
                }
                break;
            case 79:
                localContext = new SetTimeZoneAnyContext(localContext);
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 1238;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1239;
                this.match(SparkSqlParser.KW_TIME);
                this.state = 1240;
                this.match(SparkSqlParser.KW_ZONE);
                this.state = 1244;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 130, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1241;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1246;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 130, this.context);
                }
                }
                break;
            case 80:
                localContext = new SetVariableAssignmentContext(localContext);
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 1247;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1248;
                _la = this.tokenStream.LA(1);
                if(!(_la === 335 || _la === 336)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1249;
                this.assignmentList();
                }
                break;
            case 81:
                localContext = new SetVariableMultiAssignmentContext(localContext);
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 1250;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1251;
                _la = this.tokenStream.LA(1);
                if(!(_la === 335 || _la === 336)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1252;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1253;
                this.multipartIdentifierList();
                this.state = 1254;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 1255;
                this.match(SparkSqlParser.EQ);
                this.state = 1256;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1257;
                this.query();
                this.state = 1258;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 82:
                localContext = new SetConfigContext(localContext);
                this.enterOuterAlt(localContext, 82);
                {
                this.state = 1260;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1261;
                this.configKey();
                this.state = 1262;
                this.match(SparkSqlParser.EQ);
                this.state = 1263;
                this.configValue();
                }
                break;
            case 83:
                localContext = new SetConfigAndValueContext(localContext);
                this.enterOuterAlt(localContext, 83);
                {
                this.state = 1265;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1266;
                this.configKey();
                this.state = 1274;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 352) {
                    {
                    this.state = 1267;
                    this.match(SparkSqlParser.EQ);
                    this.state = 1271;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 131, this.context);
                    while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1 + 1) {
                            {
                            {
                            this.state = 1268;
                            this.matchWildcard();
                            }
                            }
                        }
                        this.state = 1273;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 131, this.context);
                    }
                    }
                }

                }
                break;
            case 84:
                localContext = new SetConfigAnyKeyContext(localContext);
                this.enterOuterAlt(localContext, 84);
                {
                this.state = 1276;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1280;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 133, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1277;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1282;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 133, this.context);
                }
                this.state = 1283;
                this.match(SparkSqlParser.EQ);
                this.state = 1284;
                this.configValue();
                }
                break;
            case 85:
                localContext = new SetAnyContext(localContext);
                this.enterOuterAlt(localContext, 85);
                {
                this.state = 1285;
                this.match(SparkSqlParser.KW_SET);
                this.state = 1289;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 134, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1286;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1291;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 134, this.context);
                }
                }
                break;
            case 86:
                localContext = new ResetConfigContext(localContext);
                this.enterOuterAlt(localContext, 86);
                {
                this.state = 1292;
                this.match(SparkSqlParser.KW_RESET);
                this.state = 1293;
                this.configKey();
                }
                break;
            case 87:
                localContext = new ResetAnyContext(localContext);
                this.enterOuterAlt(localContext, 87);
                {
                this.state = 1294;
                this.match(SparkSqlParser.KW_RESET);
                this.state = 1298;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 135, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1295;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1300;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 135, this.context);
                }
                }
                break;
            case 88:
                localContext = new CreateIndexContext(localContext);
                this.enterOuterAlt(localContext, 88);
                {
                this.state = 1301;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 1302;
                this.match(SparkSqlParser.KW_INDEX);
                this.state = 1304;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 136, this.context) ) {
                case 1:
                    {
                    this.state = 1303;
                    this.ifNotExists();
                    }
                    break;
                }
                this.state = 1306;
                this.identifier();
                this.state = 1307;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 293) {
                    {
                    this.state = 1308;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                }

                this.state = 1311;
                this.tableName();
                this.state = 1314;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 332) {
                    {
                    this.state = 1312;
                    this.match(SparkSqlParser.KW_USING);
                    this.state = 1313;
                    (localContext as CreateIndexContext)._indexType = this.identifier();
                    }
                }

                this.state = 1316;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1317;
                this.multipartIdentifierPropertyList();
                this.state = 1318;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 1321;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 1319;
                    this.match(SparkSqlParser.KW_OPTIONS);
                    this.state = 1320;
                    (localContext as CreateIndexContext)._options = this.propertyList();
                    }
                }

                }
                break;
            case 89:
                localContext = new DropIndexContext(localContext);
                this.enterOuterAlt(localContext, 89);
                {
                this.state = 1323;
                this.match(SparkSqlParser.KW_DROP);
                this.state = 1324;
                this.match(SparkSqlParser.KW_INDEX);
                this.state = 1326;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 140, this.context) ) {
                case 1:
                    {
                    this.state = 1325;
                    this.ifExists();
                    }
                    break;
                }
                this.state = 1328;
                this.identifier();
                this.state = 1329;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1331;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 293) {
                    {
                    this.state = 1330;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                }

                this.state = 1333;
                this.tableName();
                }
                break;
            case 90:
                localContext = new OptimizeTableContext(localContext);
                this.enterOuterAlt(localContext, 90);
                {
                this.state = 1335;
                this.match(SparkSqlParser.KW_OPTIMIZE);
                this.state = 1336;
                this.tableName();
                this.state = 1338;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 344) {
                    {
                    this.state = 1337;
                    this.whereClause();
                    }
                }

                this.state = 1340;
                this.zorderClause();
                }
                break;
            case 91:
                localContext = new UnsupportHiveCommandsContext(localContext);
                this.enterOuterAlt(localContext, 91);
                {
                this.state = 1342;
                this.unsupportedHiveNativeCommands();
                this.state = 1346;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 143, this.context);
                while (alternative !== 1 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1 + 1) {
                        {
                        {
                        this.state = 1343;
                        this.matchWildcard();
                        }
                        }
                    }
                    this.state = 1348;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 143, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timezone(): TimezoneContext {
        let localContext = new TimezoneContext(this.context, this.state);
        this.enterRule(localContext, 6, SparkSqlParser.RULE_timezone);
        try {
            this.state = 1353;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.STRING_LITERAL:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1351;
                this.stringLit();
                }
                break;
            case SparkSqlParser.KW_LOCAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1352;
                this.match(SparkSqlParser.KW_LOCAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public configKey(): ConfigKeyContext {
        let localContext = new ConfigKeyContext(this.context, this.state);
        this.enterRule(localContext, 8, SparkSqlParser.RULE_configKey);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1355;
            this.quotedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public configValue(): ConfigValueContext {
        let localContext = new ConfigValueContext(this.context, this.state);
        this.enterRule(localContext, 10, SparkSqlParser.RULE_configValue);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1357;
            this.backQuotedIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unsupportedHiveNativeCommands(): UnsupportedHiveNativeCommandsContext {
        let localContext = new UnsupportedHiveNativeCommandsContext(this.context, this.state);
        this.enterRule(localContext, 12, SparkSqlParser.RULE_unsupportedHiveNativeCommands);
        let _la: number;
        try {
            this.state = 1527;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 153, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1359;
                localContext._kw1 = this.match(SparkSqlParser.KW_CREATE);
                this.state = 1360;
                localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1361;
                localContext._kw1 = this.match(SparkSqlParser.KW_DROP);
                this.state = 1362;
                localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1363;
                localContext._kw1 = this.match(SparkSqlParser.KW_GRANT);
                this.state = 1365;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 146, this.context) ) {
                case 1:
                    {
                    this.state = 1364;
                    localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1367;
                localContext._kw1 = this.match(SparkSqlParser.KW_REVOKE);
                this.state = 1369;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 147, this.context) ) {
                case 1:
                    {
                    this.state = 1368;
                    localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1371;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1372;
                localContext._kw2 = this.match(SparkSqlParser.KW_GRANT);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1373;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1374;
                localContext._kw2 = this.match(SparkSqlParser.KW_ROLE);
                this.state = 1376;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 148, this.context) ) {
                case 1:
                    {
                    this.state = 1375;
                    localContext._kw3 = this.match(SparkSqlParser.KW_GRANT);
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1378;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1379;
                localContext._kw2 = this.match(SparkSqlParser.KW_PRINCIPALS);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1380;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1381;
                localContext._kw2 = this.match(SparkSqlParser.KW_ROLES);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1382;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1383;
                localContext._kw2 = this.match(SparkSqlParser.KW_CURRENT);
                this.state = 1384;
                localContext._kw3 = this.match(SparkSqlParser.KW_ROLES);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1385;
                localContext._kw1 = this.match(SparkSqlParser.KW_EXPORT);
                this.state = 1386;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1387;
                localContext._kw1 = this.match(SparkSqlParser.KW_IMPORT);
                this.state = 1388;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1389;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1390;
                localContext._kw2 = this.match(SparkSqlParser.KW_COMPACTIONS);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1391;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1392;
                localContext._kw2 = this.match(SparkSqlParser.KW_CREATE);
                this.state = 1393;
                localContext._kw3 = this.match(SparkSqlParser.KW_TABLE);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1394;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1395;
                localContext._kw2 = this.match(SparkSqlParser.KW_TRANSACTIONS);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1396;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1397;
                localContext._kw2 = this.match(SparkSqlParser.KW_INDEXES);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1398;
                localContext._kw1 = this.match(SparkSqlParser.KW_SHOW);
                this.state = 1399;
                localContext._kw2 = this.match(SparkSqlParser.KW_LOCKS);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1400;
                localContext._kw1 = this.match(SparkSqlParser.KW_CREATE);
                this.state = 1401;
                localContext._kw2 = this.match(SparkSqlParser.KW_INDEX);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1402;
                localContext._kw1 = this.match(SparkSqlParser.KW_DROP);
                this.state = 1403;
                localContext._kw2 = this.match(SparkSqlParser.KW_INDEX);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1404;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1405;
                localContext._kw2 = this.match(SparkSqlParser.KW_INDEX);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1406;
                localContext._kw1 = this.match(SparkSqlParser.KW_LOCK);
                this.state = 1407;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1408;
                localContext._kw1 = this.match(SparkSqlParser.KW_LOCK);
                this.state = 1409;
                localContext._kw2 = this.match(SparkSqlParser.KW_DATABASE);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1410;
                localContext._kw1 = this.match(SparkSqlParser.KW_UNLOCK);
                this.state = 1411;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1412;
                localContext._kw1 = this.match(SparkSqlParser.KW_UNLOCK);
                this.state = 1413;
                localContext._kw2 = this.match(SparkSqlParser.KW_DATABASE);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1414;
                localContext._kw1 = this.match(SparkSqlParser.KW_CREATE);
                this.state = 1415;
                localContext._kw2 = this.match(SparkSqlParser.KW_TEMPORARY);
                this.state = 1416;
                localContext._kw3 = this.match(SparkSqlParser.KW_MACRO);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 1417;
                localContext._kw1 = this.match(SparkSqlParser.KW_DROP);
                this.state = 1418;
                localContext._kw2 = this.match(SparkSqlParser.KW_TEMPORARY);
                this.state = 1419;
                localContext._kw3 = this.match(SparkSqlParser.KW_MACRO);
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 1420;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1421;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1422;
                this.tableName();
                this.state = 1423;
                localContext._kw3 = this.match(SparkSqlParser.KW_NOT);
                this.state = 1424;
                localContext._kw4 = this.match(SparkSqlParser.KW_CLUSTERED);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 1426;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1427;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1428;
                this.tableName();
                this.state = 1429;
                localContext._kw3 = this.match(SparkSqlParser.KW_CLUSTERED);
                this.state = 1430;
                localContext._kw4 = this.match(SparkSqlParser.KW_BY);
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 1432;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1433;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1434;
                this.tableName();
                this.state = 1435;
                localContext._kw3 = this.match(SparkSqlParser.KW_NOT);
                this.state = 1436;
                localContext._kw4 = this.match(SparkSqlParser.KW_SORTED);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 1438;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1439;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1440;
                this.tableName();
                this.state = 1441;
                localContext._kw3 = this.match(SparkSqlParser.KW_SKEWED);
                this.state = 1442;
                localContext._kw4 = this.match(SparkSqlParser.KW_BY);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 1444;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1445;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1446;
                this.tableName();
                this.state = 1447;
                localContext._kw3 = this.match(SparkSqlParser.KW_NOT);
                this.state = 1448;
                localContext._kw4 = this.match(SparkSqlParser.KW_SKEWED);
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 1450;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1451;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1452;
                this.tableName();
                this.state = 1453;
                localContext._kw3 = this.match(SparkSqlParser.KW_NOT);
                this.state = 1454;
                localContext._kw4 = this.match(SparkSqlParser.KW_STORED);
                this.state = 1455;
                localContext._kw5 = this.match(SparkSqlParser.KW_AS);
                this.state = 1456;
                localContext._kw6 = this.match(SparkSqlParser.KW_DIRECTORIES);
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 1458;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1459;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1460;
                this.tableName();
                this.state = 1461;
                localContext._kw3 = this.match(SparkSqlParser.KW_SET);
                this.state = 1462;
                localContext._kw4 = this.match(SparkSqlParser.KW_SKEWED);
                this.state = 1463;
                localContext._kw5 = this.match(SparkSqlParser.KW_LOCATION);
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 1465;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1466;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1467;
                this.tableName();
                this.state = 1468;
                localContext._kw3 = this.match(SparkSqlParser.KW_EXCHANGE);
                this.state = 1469;
                localContext._kw4 = this.match(SparkSqlParser.KW_PARTITION);
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 1471;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1472;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1473;
                this.tableName();
                this.state = 1474;
                localContext._kw3 = this.match(SparkSqlParser.KW_ARCHIVE);
                this.state = 1475;
                localContext._kw4 = this.match(SparkSqlParser.KW_PARTITION);
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 1477;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1478;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1479;
                this.tableName();
                this.state = 1480;
                localContext._kw3 = this.match(SparkSqlParser.KW_UNARCHIVE);
                this.state = 1481;
                localContext._kw4 = this.match(SparkSqlParser.KW_PARTITION);
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 1483;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1484;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1485;
                this.tableName();
                this.state = 1486;
                localContext._kw3 = this.match(SparkSqlParser.KW_TOUCH);
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 1488;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1489;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1490;
                this.tableName();
                this.state = 1492;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1491;
                    this.partitionSpec();
                    }
                }

                this.state = 1494;
                localContext._kw3 = this.match(SparkSqlParser.KW_COMPACT);
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 1496;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1497;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1498;
                this.tableName();
                this.state = 1500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1499;
                    this.partitionSpec();
                    }
                }

                this.state = 1502;
                localContext._kw3 = this.match(SparkSqlParser.KW_CONCATENATE);
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 1504;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1505;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1506;
                this.tableName();
                this.state = 1508;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1507;
                    this.partitionSpec();
                    }
                }

                this.state = 1510;
                localContext._kw3 = this.match(SparkSqlParser.KW_SET);
                this.state = 1511;
                localContext._kw4 = this.match(SparkSqlParser.KW_FILEFORMAT);
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 1513;
                localContext._kw1 = this.match(SparkSqlParser.KW_ALTER);
                this.state = 1514;
                localContext._kw2 = this.match(SparkSqlParser.KW_TABLE);
                this.state = 1515;
                this.tableName();
                this.state = 1517;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1516;
                    this.partitionSpec();
                    }
                }

                this.state = 1519;
                localContext._kw3 = this.match(SparkSqlParser.KW_REPLACE);
                this.state = 1520;
                localContext._kw4 = this.match(SparkSqlParser.KW_COLUMNS);
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 1522;
                localContext._kw1 = this.match(SparkSqlParser.KW_START);
                this.state = 1523;
                localContext._kw2 = this.match(SparkSqlParser.KW_TRANSACTION);
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 1524;
                localContext._kw1 = this.match(SparkSqlParser.KW_COMMIT);
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 1525;
                localContext._kw1 = this.match(SparkSqlParser.KW_ROLLBACK);
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 1526;
                localContext._kw1 = this.match(SparkSqlParser.KW_DFS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableHeader(): CreateTableHeaderContext {
        let localContext = new CreateTableHeaderContext(this.context, this.state);
        this.enterRule(localContext, 14, SparkSqlParser.RULE_createTableHeader);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1529;
            this.match(SparkSqlParser.KW_CREATE);
            this.state = 1531;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 298) {
                {
                this.state = 1530;
                this.match(SparkSqlParser.KW_TEMPORARY);
                }
            }

            this.state = 1534;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109) {
                {
                this.state = 1533;
                this.match(SparkSqlParser.KW_EXTERNAL);
                }
            }

            this.state = 1536;
            this.match(SparkSqlParser.KW_TABLE);
            this.state = 1538;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 156, this.context) ) {
            case 1:
                {
                this.state = 1537;
                this.ifNotExists();
                }
                break;
            }
            this.state = 1540;
            this.tableNameCreate();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceTableHeader(): ReplaceTableHeaderContext {
        let localContext = new ReplaceTableHeaderContext(this.context, this.state);
        this.enterRule(localContext, 16, SparkSqlParser.RULE_replaceTableHeader);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1544;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 59) {
                {
                this.state = 1542;
                this.match(SparkSqlParser.KW_CREATE);
                this.state = 1543;
                this.match(SparkSqlParser.KW_OR);
                }
            }

            this.state = 1546;
            this.match(SparkSqlParser.KW_REPLACE);
            this.state = 1547;
            this.match(SparkSqlParser.KW_TABLE);
            this.state = 1548;
            this.tableNameCreate();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bucketSpec(): BucketSpecContext {
        let localContext = new BucketSpecContext(this.context, this.state);
        this.enterRule(localContext, 18, SparkSqlParser.RULE_bucketSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1550;
            this.match(SparkSqlParser.KW_CLUSTERED);
            this.state = 1551;
            this.match(SparkSqlParser.KW_BY);
            this.state = 1552;
            this.identifierList();
            this.state = 1556;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 279) {
                {
                this.state = 1553;
                this.match(SparkSqlParser.KW_SORTED);
                this.state = 1554;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1555;
                this.orderedIdentifierList();
                }
            }

            this.state = 1558;
            this.match(SparkSqlParser.KW_INTO);
            this.state = 1559;
            this.match(SparkSqlParser.INTEGER_VALUE);
            this.state = 1560;
            this.match(SparkSqlParser.KW_BUCKETS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skewSpec(): SkewSpecContext {
        let localContext = new SkewSpecContext(this.context, this.state);
        this.enterRule(localContext, 20, SparkSqlParser.RULE_skewSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1562;
            this.match(SparkSqlParser.KW_SKEWED);
            this.state = 1563;
            this.match(SparkSqlParser.KW_BY);
            this.state = 1564;
            this.identifierList();
            this.state = 1565;
            this.match(SparkSqlParser.KW_ON);
            this.state = 1568;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 159, this.context) ) {
            case 1:
                {
                this.state = 1566;
                this.constantList();
                }
                break;
            case 2:
                {
                this.state = 1567;
                this.nestedConstantList();
                }
                break;
            }
            this.state = 1573;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 160, this.context) ) {
            case 1:
                {
                this.state = 1570;
                this.match(SparkSqlParser.KW_STORED);
                this.state = 1571;
                this.match(SparkSqlParser.KW_AS);
                this.state = 1572;
                this.match(SparkSqlParser.KW_DIRECTORIES);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public locationSpec(): LocationSpecContext {
        let localContext = new LocationSpecContext(this.context, this.state);
        this.enterRule(localContext, 22, SparkSqlParser.RULE_locationSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1575;
            this.match(SparkSqlParser.KW_LOCATION);
            this.state = 1576;
            this.stringLit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commentSpec(): CommentSpecContext {
        let localContext = new CommentSpecContext(this.context, this.state);
        this.enterRule(localContext, 24, SparkSqlParser.RULE_commentSpec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1578;
            this.match(SparkSqlParser.KW_COMMENT);
            this.state = 1579;
            localContext._comment = this.stringLit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public query(): QueryContext {
        let localContext = new QueryContext(this.context, this.state);
        this.enterRule(localContext, 26, SparkSqlParser.RULE_query);
        let _la: number;
        try {
            localContext = new QueryStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1582;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 346) {
                {
                this.state = 1581;
                this.ctes();
                }
            }

            this.state = 1584;
            this.queryTerm(0);
            this.state = 1585;
            this.queryOrganization();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertInto(): InsertIntoContext {
        let localContext = new InsertIntoContext(this.context, this.state);
        this.enterRule(localContext, 28, SparkSqlParser.RULE_insertInto);
        let _la: number;
        try {
            this.state = 1663;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1587;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1588;
                this.match(SparkSqlParser.KW_OVERWRITE);
                this.state = 1590;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 293) {
                    {
                    this.state = 1589;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                }

                this.state = 1592;
                this.tableName();
                this.state = 1597;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1593;
                    this.partitionSpec();
                    this.state = 1595;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 137) {
                        {
                        this.state = 1594;
                        this.ifNotExists();
                        }
                    }

                    }
                }

                this.state = 1605;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 165, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 1599;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 1600;
                    this.match(SparkSqlParser.KW_NAME);
                    }
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 1601;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 1602;
                    this.columnNameSeq();
                    this.state = 1603;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1607;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1608;
                this.match(SparkSqlParser.KW_INTO);
                this.state = 1610;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 293) {
                    {
                    this.state = 1609;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                }

                this.state = 1612;
                this.tableName();
                this.state = 1614;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 217) {
                    {
                    this.state = 1613;
                    this.partitionSpec();
                    }
                }

                this.state = 1617;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 1616;
                    this.ifNotExists();
                    }
                }

                this.state = 1625;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 169, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 1619;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 1620;
                    this.match(SparkSqlParser.KW_NAME);
                    }
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 1621;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 1622;
                    this.columnNameSeq();
                    this.state = 1623;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1627;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1628;
                this.match(SparkSqlParser.KW_INTO);
                this.state = 1630;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 293) {
                    {
                    this.state = 1629;
                    this.match(SparkSqlParser.KW_TABLE);
                    }
                }

                this.state = 1632;
                this.tableName();
                this.state = 1633;
                this.match(SparkSqlParser.KW_REPLACE);
                this.state = 1634;
                this.whereClause();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1636;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1637;
                this.match(SparkSqlParser.KW_OVERWRITE);
                this.state = 1639;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 169) {
                    {
                    this.state = 1638;
                    this.match(SparkSqlParser.KW_LOCAL);
                    }
                }

                this.state = 1641;
                this.match(SparkSqlParser.KW_DIRECTORY);
                this.state = 1642;
                localContext._path = this.stringLit();
                this.state = 1644;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 257) {
                    {
                    this.state = 1643;
                    this.rowFormat();
                    }
                }

                this.state = 1647;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 283) {
                    {
                    this.state = 1646;
                    this.createFileFormat();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1649;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 1650;
                this.match(SparkSqlParser.KW_OVERWRITE);
                this.state = 1652;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 169) {
                    {
                    this.state = 1651;
                    this.match(SparkSqlParser.KW_LOCAL);
                    }
                }

                this.state = 1654;
                this.match(SparkSqlParser.KW_DIRECTORY);
                this.state = 1656;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 377 || _la === 378) {
                    {
                    this.state = 1655;
                    localContext._path = this.stringLit();
                    }
                }

                this.state = 1658;
                this.tableProvider();
                this.state = 1661;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 207) {
                    {
                    this.state = 1659;
                    this.match(SparkSqlParser.KW_OPTIONS);
                    this.state = 1660;
                    localContext._options = this.propertyList();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpecLocation(): PartitionSpecLocationContext {
        let localContext = new PartitionSpecLocationContext(this.context, this.state);
        this.enterRule(localContext, 30, SparkSqlParser.RULE_partitionSpecLocation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1665;
            this.partitionSpec();
            this.state = 1667;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 170) {
                {
                this.state = 1666;
                this.locationSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionSpec(): PartitionSpecContext {
        let localContext = new PartitionSpecContext(this.context, this.state);
        this.enterRule(localContext, 32, SparkSqlParser.RULE_partitionSpec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1669;
            this.match(SparkSqlParser.KW_PARTITION);
            this.state = 1670;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1671;
            this.partitionVal();
            this.state = 1676;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1672;
                this.match(SparkSqlParser.COMMA);
                this.state = 1673;
                this.partitionVal();
                }
                }
                this.state = 1678;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1679;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionVal(): PartitionValContext {
        let localContext = new PartitionValContext(this.context, this.state);
        this.enterRule(localContext, 34, SparkSqlParser.RULE_partitionVal);
        let _la: number;
        try {
            this.state = 1690;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 181, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1681;
                this.identifier();
                this.state = 1684;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 352) {
                    {
                    this.state = 1682;
                    this.match(SparkSqlParser.EQ);
                    this.state = 1683;
                    this.constant();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1686;
                this.identifier();
                this.state = 1687;
                this.match(SparkSqlParser.EQ);
                this.state = 1688;
                this.match(SparkSqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namespace(): NamespaceContext {
        let localContext = new NamespaceContext(this.context, this.state);
        this.enterRule(localContext, 36, SparkSqlParser.RULE_namespace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1692;
            _la = this.tokenStream.LA(1);
            if(!(_la === 72 || _la === 190 || _la === 261)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namespaces(): NamespacesContext {
        let localContext = new NamespacesContext(this.context, this.state);
        this.enterRule(localContext, 38, SparkSqlParser.RULE_namespaces);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1694;
            _la = this.tokenStream.LA(1);
            if(!(_la === 73 || _la === 191 || _la === 262)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeFuncName(): DescribeFuncNameContext {
        let localContext = new DescribeFuncNameContext(this.context, this.state);
        this.enterRule(localContext, 40, SparkSqlParser.RULE_describeFuncName);
        try {
            this.state = 1701;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 182, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1696;
                this.identifierReference();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1697;
                this.stringLit();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1698;
                this.comparisonOperator();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1699;
                this.arithmeticOperator();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1700;
                this.predicateOperator();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeColName(): DescribeColNameContext {
        let localContext = new DescribeColNameContext(this.context, this.state);
        this.enterRule(localContext, 42, SparkSqlParser.RULE_describeColName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1703;
            localContext._identifier = this.identifier();
            localContext._nameParts.push(localContext._identifier);
            this.state = 1708;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 5) {
                {
                {
                this.state = 1704;
                this.match(SparkSqlParser.DOT);
                this.state = 1705;
                localContext._identifier = this.identifier();
                localContext._nameParts.push(localContext._identifier);
                }
                }
                this.state = 1710;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ctes(): CtesContext {
        let localContext = new CtesContext(this.context, this.state);
        this.enterRule(localContext, 44, SparkSqlParser.RULE_ctes);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1711;
            this.match(SparkSqlParser.KW_WITH);
            this.state = 1712;
            this.namedQuery();
            this.state = 1717;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1713;
                this.match(SparkSqlParser.COMMA);
                this.state = 1714;
                this.namedQuery();
                }
                }
                this.state = 1719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 46, SparkSqlParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1720;
            localContext._name = this.errorCapturingIdentifier();
            this.state = 1722;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 185, this.context) ) {
            case 1:
                {
                this.state = 1721;
                localContext._columnAliases = this.identifierList();
                }
                break;
            }
            this.state = 1725;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 20) {
                {
                this.state = 1724;
                this.match(SparkSqlParser.KW_AS);
                }
            }

            this.state = 1727;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1728;
            this.query();
            this.state = 1729;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableProvider(): TableProviderContext {
        let localContext = new TableProviderContext(this.context, this.state);
        this.enterRule(localContext, 48, SparkSqlParser.RULE_tableProvider);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1731;
            this.match(SparkSqlParser.KW_USING);
            this.state = 1732;
            this.multipartIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableClauses(): CreateTableClausesContext {
        let localContext = new CreateTableClausesContext(this.context, this.state);
        this.enterRule(localContext, 50, SparkSqlParser.RULE_createTableClauses);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1750;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 188, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 1748;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case SparkSqlParser.KW_OPTIONS:
                        {
                        {
                        this.state = 1734;
                        this.match(SparkSqlParser.KW_OPTIONS);
                        this.state = 1735;
                        localContext._options = this.expressionPropertyList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_PARTITIONED:
                        {
                        {
                        this.state = 1736;
                        this.match(SparkSqlParser.KW_PARTITIONED);
                        this.state = 1737;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 1738;
                        localContext._partitioning = this.partitionFieldList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_SKEWED:
                        {
                        this.state = 1739;
                        this.skewSpec();
                        }
                        break;
                    case SparkSqlParser.KW_CLUSTERED:
                        {
                        this.state = 1740;
                        this.bucketSpec();
                        }
                        break;
                    case SparkSqlParser.KW_ROW:
                        {
                        this.state = 1741;
                        this.rowFormat();
                        }
                        break;
                    case SparkSqlParser.KW_STORED:
                        {
                        this.state = 1742;
                        this.createFileFormat();
                        }
                        break;
                    case SparkSqlParser.KW_LOCATION:
                        {
                        this.state = 1743;
                        this.locationSpec();
                        }
                        break;
                    case SparkSqlParser.KW_COMMENT:
                        {
                        this.state = 1744;
                        this.commentSpec();
                        }
                        break;
                    case SparkSqlParser.KW_TBLPROPERTIES:
                        {
                        {
                        this.state = 1745;
                        this.match(SparkSqlParser.KW_TBLPROPERTIES);
                        this.state = 1746;
                        localContext._tableProps = this.propertyList();
                        }
                        }
                        break;
                    case SparkSqlParser.KW_LIFECYCLE:
                        {
                        this.state = 1747;
                        this.tableLifecycle();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }
                this.state = 1752;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 188, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableLifecycle(): TableLifecycleContext {
        let localContext = new TableLifecycleContext(this.context, this.state);
        this.enterRule(localContext, 52, SparkSqlParser.RULE_tableLifecycle);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1753;
            this.match(SparkSqlParser.KW_LIFECYCLE);
            this.state = 1754;
            this.match(SparkSqlParser.INTEGER_VALUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyList(): PropertyListContext {
        let localContext = new PropertyListContext(this.context, this.state);
        this.enterRule(localContext, 54, SparkSqlParser.RULE_propertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1756;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1757;
            this.property();
            this.state = 1762;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1758;
                this.match(SparkSqlParser.COMMA);
                this.state = 1759;
                this.property();
                }
                }
                this.state = 1764;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1765;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public property(): PropertyContext {
        let localContext = new PropertyContext(this.context, this.state);
        this.enterRule(localContext, 56, SparkSqlParser.RULE_property);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1767;
            localContext._key = this.propertyKey();
            this.state = 1772;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 111 || _la === 316 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 1174405121) !== 0) || _la === 384) {
                {
                this.state = 1769;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 352) {
                    {
                    this.state = 1768;
                    this.match(SparkSqlParser.EQ);
                    }
                }

                this.state = 1771;
                localContext._value = this.propertyValue();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyKey(): PropertyKeyContext {
        let localContext = new PropertyKeyContext(this.context, this.state);
        this.enterRule(localContext, 58, SparkSqlParser.RULE_propertyKey);
        let _la: number;
        try {
            this.state = 1783;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 193, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1774;
                this.identifier();
                this.state = 1779;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 5) {
                    {
                    {
                    this.state = 1775;
                    this.match(SparkSqlParser.DOT);
                    this.state = 1776;
                    this.identifier();
                    }
                    }
                    this.state = 1781;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1782;
                this.stringLit();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyValue(): PropertyValueContext {
        let localContext = new PropertyValueContext(this.context, this.state);
        this.enterRule(localContext, 60, SparkSqlParser.RULE_propertyValue);
        try {
            this.state = 1789;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1785;
                this.match(SparkSqlParser.INTEGER_VALUE);
                }
                break;
            case SparkSqlParser.DECIMAL_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1786;
                this.match(SparkSqlParser.DECIMAL_VALUE);
                }
                break;
            case SparkSqlParser.KW_FALSE:
            case SparkSqlParser.KW_TRUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1787;
                this.booleanValue();
                }
                break;
            case SparkSqlParser.STRING_LITERAL:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1788;
                this.stringLit();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionPropertyList(): ExpressionPropertyListContext {
        let localContext = new ExpressionPropertyListContext(this.context, this.state);
        this.enterRule(localContext, 62, SparkSqlParser.RULE_expressionPropertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1791;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1792;
            this.expressionProperty();
            this.state = 1797;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1793;
                this.match(SparkSqlParser.COMMA);
                this.state = 1794;
                this.expressionProperty();
                }
                }
                this.state = 1799;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1800;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionProperty(): ExpressionPropertyContext {
        let localContext = new ExpressionPropertyContext(this.context, this.state);
        this.enterRule(localContext, 64, SparkSqlParser.RULE_expressionProperty);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1802;
            localContext._key = this.propertyKey();
            this.state = 1807;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 2)) & ~0x1F) === 0 && ((1 << (_la - 2)) & 4294967233) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 4294967295) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 4294967295) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 4261412863) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & 4294967295) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967295) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967291) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967263) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967287) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 2147483647) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 1073678415) !== 0)) {
                {
                this.state = 1804;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 352) {
                    {
                    this.state = 1803;
                    this.match(SparkSqlParser.EQ);
                    }
                }

                this.state = 1806;
                localContext._value = this.expression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constantList(): ConstantListContext {
        let localContext = new ConstantListContext(this.context, this.state);
        this.enterRule(localContext, 66, SparkSqlParser.RULE_constantList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1809;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1810;
            this.constant();
            this.state = 1815;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1811;
                this.match(SparkSqlParser.COMMA);
                this.state = 1812;
                this.constant();
                }
                }
                this.state = 1817;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1818;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nestedConstantList(): NestedConstantListContext {
        let localContext = new NestedConstantListContext(this.context, this.state);
        this.enterRule(localContext, 68, SparkSqlParser.RULE_nestedConstantList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1820;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 1821;
            this.constantList();
            this.state = 1826;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1822;
                this.match(SparkSqlParser.COMMA);
                this.state = 1823;
                this.constantList();
                }
                }
                this.state = 1828;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1829;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFileFormat(): CreateFileFormatContext {
        let localContext = new CreateFileFormatContext(this.context, this.state);
        this.enterRule(localContext, 70, SparkSqlParser.RULE_createFileFormat);
        try {
            this.state = 1837;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 200, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1831;
                this.match(SparkSqlParser.KW_STORED);
                this.state = 1832;
                this.match(SparkSqlParser.KW_AS);
                this.state = 1833;
                this.fileFormat();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1834;
                this.match(SparkSqlParser.KW_STORED);
                this.state = 1835;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1836;
                this.storageHandler();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fileFormat(): FileFormatContext {
        let localContext = new FileFormatContext(this.context, this.state);
        this.enterRule(localContext, 72, SparkSqlParser.RULE_fileFormat);
        try {
            this.state = 1845;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 201, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1839;
                this.match(SparkSqlParser.KW_INPUTFORMAT);
                this.state = 1840;
                localContext._inFmt = this.stringLit();
                this.state = 1841;
                this.match(SparkSqlParser.KW_OUTPUTFORMAT);
                this.state = 1842;
                localContext._outFmt = this.stringLit();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1844;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storageHandler(): StorageHandlerContext {
        let localContext = new StorageHandlerContext(this.context, this.state);
        this.enterRule(localContext, 74, SparkSqlParser.RULE_storageHandler);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1847;
            this.stringLit();
            this.state = 1851;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 202, this.context) ) {
            case 1:
                {
                this.state = 1848;
                this.match(SparkSqlParser.KW_WITH);
                this.state = 1849;
                this.match(SparkSqlParser.KW_SERDEPROPERTIES);
                this.state = 1850;
                this.propertyList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public resource(): ResourceContext {
        let localContext = new ResourceContext(this.context, this.state);
        this.enterRule(localContext, 76, SparkSqlParser.RULE_resource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1853;
            this.identifier();
            this.state = 1854;
            this.stringLit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dmlStatementNoWith(): DmlStatementNoWithContext {
        let localContext = new DmlStatementNoWithContext(this.context, this.state);
        this.enterRule(localContext, 78, SparkSqlParser.RULE_dmlStatementNoWith);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1912;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_INSERT:
                localContext = new InsertFromQueryContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1856;
                this.insertInto();
                this.state = 1857;
                this.query();
                }
                break;
            case SparkSqlParser.KW_FROM:
                localContext = new MultipleInsertContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1859;
                this.fromClause();
                this.state = 1861;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 1860;
                        this.multiInsertQueryBody();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1863;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 203, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case SparkSqlParser.KW_DELETE:
                localContext = new DeleteFromTableContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1865;
                this.match(SparkSqlParser.KW_DELETE);
                this.state = 1866;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 1867;
                this.tableName();
                this.state = 1868;
                this.tableAlias();
                this.state = 1870;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 344) {
                    {
                    this.state = 1869;
                    this.whereClause();
                    }
                }

                }
                break;
            case SparkSqlParser.KW_UPDATE:
                localContext = new UpdateTableContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1872;
                this.match(SparkSqlParser.KW_UPDATE);
                this.state = 1873;
                this.tableName();
                this.state = 1874;
                this.tableAlias();
                this.state = 1875;
                this.setClause();
                this.state = 1877;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 344) {
                    {
                    this.state = 1876;
                    this.whereClause();
                    }
                }

                }
                break;
            case SparkSqlParser.KW_MERGE:
                localContext = new MergeIntoTableContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1879;
                this.match(SparkSqlParser.KW_MERGE);
                this.state = 1880;
                this.match(SparkSqlParser.KW_INTO);
                this.state = 1881;
                (localContext as MergeIntoTableContext)._target = this.tableName();
                this.state = 1882;
                (localContext as MergeIntoTableContext)._targetAlias = this.tableAlias();
                this.state = 1883;
                this.match(SparkSqlParser.KW_USING);
                this.state = 1889;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_ADD:
                case SparkSqlParser.KW_AFTER:
                case SparkSqlParser.KW_ALL:
                case SparkSqlParser.KW_ALTER:
                case SparkSqlParser.KW_ALWAYS:
                case SparkSqlParser.KW_ANALYZE:
                case SparkSqlParser.KW_AND:
                case SparkSqlParser.KW_ANTI:
                case SparkSqlParser.KW_ANY:
                case SparkSqlParser.KW_ANY_VALUE:
                case SparkSqlParser.KW_ARCHIVE:
                case SparkSqlParser.KW_ARRAY:
                case SparkSqlParser.KW_AS:
                case SparkSqlParser.KW_ASC:
                case SparkSqlParser.KW_AT:
                case SparkSqlParser.KW_AUTHORIZATION:
                case SparkSqlParser.KW_BETWEEN:
                case SparkSqlParser.KW_BIGINT:
                case SparkSqlParser.KW_BINARY:
                case SparkSqlParser.KW_BOOLEAN:
                case SparkSqlParser.KW_BOTH:
                case SparkSqlParser.KW_BUCKET:
                case SparkSqlParser.KW_BUCKETS:
                case SparkSqlParser.KW_BY:
                case SparkSqlParser.KW_BYTE:
                case SparkSqlParser.KW_CACHE:
                case SparkSqlParser.KW_CASCADE:
                case SparkSqlParser.KW_CASE:
                case SparkSqlParser.KW_CAST:
                case SparkSqlParser.KW_CATALOG:
                case SparkSqlParser.KW_CATALOGS:
                case SparkSqlParser.KW_CHANGE:
                case SparkSqlParser.KW_CHAR:
                case SparkSqlParser.KW_CHARACTER:
                case SparkSqlParser.KW_CHECK:
                case SparkSqlParser.KW_CLEAR:
                case SparkSqlParser.KW_CLUSTER:
                case SparkSqlParser.KW_CLUSTERED:
                case SparkSqlParser.KW_CODEGEN:
                case SparkSqlParser.KW_COLLATE:
                case SparkSqlParser.KW_COLLECTION:
                case SparkSqlParser.KW_COLUMN:
                case SparkSqlParser.KW_COLUMNS:
                case SparkSqlParser.KW_COMMENT:
                case SparkSqlParser.KW_COMMIT:
                case SparkSqlParser.KW_COMPACT:
                case SparkSqlParser.KW_COMPACTIONS:
                case SparkSqlParser.KW_COMPUTE:
                case SparkSqlParser.KW_CONCATENATE:
                case SparkSqlParser.KW_CONSTRAINT:
                case SparkSqlParser.KW_COST:
                case SparkSqlParser.KW_CREATE:
                case SparkSqlParser.KW_CROSS:
                case SparkSqlParser.KW_CUBE:
                case SparkSqlParser.KW_CURRENT:
                case SparkSqlParser.KW_CURRENT_DATE:
                case SparkSqlParser.KW_CURRENT_TIME:
                case SparkSqlParser.KW_CURRENT_TIMESTAMP:
                case SparkSqlParser.KW_CURRENT_USER:
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYS:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_DATA:
                case SparkSqlParser.KW_DATE:
                case SparkSqlParser.KW_DATABASE:
                case SparkSqlParser.KW_DATABASES:
                case SparkSqlParser.KW_DATEADD:
                case SparkSqlParser.KW_DATE_ADD:
                case SparkSqlParser.KW_DATEDIFF:
                case SparkSqlParser.KW_DATE_DIFF:
                case SparkSqlParser.KW_DBPROPERTIES:
                case SparkSqlParser.KW_DEC:
                case SparkSqlParser.KW_DECIMAL:
                case SparkSqlParser.KW_DECLARE:
                case SparkSqlParser.KW_DEFAULT:
                case SparkSqlParser.KW_DEFINED:
                case SparkSqlParser.KW_DELETE:
                case SparkSqlParser.KW_DELIMITED:
                case SparkSqlParser.KW_DESC:
                case SparkSqlParser.KW_DESCRIBE:
                case SparkSqlParser.KW_DFS:
                case SparkSqlParser.KW_DIRECTORIES:
                case SparkSqlParser.KW_DIRECTORY:
                case SparkSqlParser.KW_DISABLE:
                case SparkSqlParser.KW_DISTINCT:
                case SparkSqlParser.KW_DISTRIBUTE:
                case SparkSqlParser.KW_DIV:
                case SparkSqlParser.KW_DOUBLE:
                case SparkSqlParser.KW_DROP:
                case SparkSqlParser.KW_ELSE:
                case SparkSqlParser.KW_ENABLE:
                case SparkSqlParser.KW_END:
                case SparkSqlParser.KW_ESCAPE:
                case SparkSqlParser.KW_ESCAPED:
                case SparkSqlParser.KW_EXCEPT:
                case SparkSqlParser.KW_EXCHANGE:
                case SparkSqlParser.KW_EXCLUDE:
                case SparkSqlParser.KW_EXISTS:
                case SparkSqlParser.KW_EXPLAIN:
                case SparkSqlParser.KW_EXPORT:
                case SparkSqlParser.KW_EXTENDED:
                case SparkSqlParser.KW_EXTERNAL:
                case SparkSqlParser.KW_EXTRACT:
                case SparkSqlParser.KW_FALSE:
                case SparkSqlParser.KW_FETCH:
                case SparkSqlParser.KW_FIELDS:
                case SparkSqlParser.KW_FILTER:
                case SparkSqlParser.KW_FILEFORMAT:
                case SparkSqlParser.KW_FIRST:
                case SparkSqlParser.KW_FLOAT:
                case SparkSqlParser.KW_FOLLOWING:
                case SparkSqlParser.KW_FOR:
                case SparkSqlParser.KW_FOREIGN:
                case SparkSqlParser.KW_FORMAT:
                case SparkSqlParser.KW_FORMATTED:
                case SparkSqlParser.KW_FULL:
                case SparkSqlParser.KW_FUNCTION:
                case SparkSqlParser.KW_FUNCTIONS:
                case SparkSqlParser.KW_GENERATED:
                case SparkSqlParser.KW_GLOBAL:
                case SparkSqlParser.KW_GRANT:
                case SparkSqlParser.KW_GROUP:
                case SparkSqlParser.KW_GROUPING:
                case SparkSqlParser.KW_HAVING:
                case SparkSqlParser.KW_BINARY_HEX:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_HOURS:
                case SparkSqlParser.KW_IDENTIFIER:
                case SparkSqlParser.KW_IF:
                case SparkSqlParser.KW_IGNORE:
                case SparkSqlParser.KW_IMPORT:
                case SparkSqlParser.KW_IN:
                case SparkSqlParser.KW_INCLUDE:
                case SparkSqlParser.KW_INDEX:
                case SparkSqlParser.KW_INDEXES:
                case SparkSqlParser.KW_INNER:
                case SparkSqlParser.KW_INPATH:
                case SparkSqlParser.KW_INPUTFORMAT:
                case SparkSqlParser.KW_INSERT:
                case SparkSqlParser.KW_INTERSECT:
                case SparkSqlParser.KW_INTERVAL:
                case SparkSqlParser.KW_INT:
                case SparkSqlParser.KW_INTEGER:
                case SparkSqlParser.KW_INTO:
                case SparkSqlParser.KW_IS:
                case SparkSqlParser.KW_ITEMS:
                case SparkSqlParser.KW_JOIN:
                case SparkSqlParser.KW_KEYS:
                case SparkSqlParser.KW_LAST:
                case SparkSqlParser.KW_LATERAL:
                case SparkSqlParser.KW_LAZY:
                case SparkSqlParser.KW_LEADING:
                case SparkSqlParser.KW_LEFT:
                case SparkSqlParser.KW_LIFECYCLE:
                case SparkSqlParser.KW_LIKE:
                case SparkSqlParser.KW_ILIKE:
                case SparkSqlParser.KW_LIMIT:
                case SparkSqlParser.KW_LINES:
                case SparkSqlParser.KW_LIST:
                case SparkSqlParser.KW_LOAD:
                case SparkSqlParser.KW_LOCAL:
                case SparkSqlParser.KW_LOCATION:
                case SparkSqlParser.KW_LOCK:
                case SparkSqlParser.KW_LOCKS:
                case SparkSqlParser.KW_LOGICAL:
                case SparkSqlParser.KW_LONG:
                case SparkSqlParser.KW_MACRO:
                case SparkSqlParser.KW_MATERIALIZED:
                case SparkSqlParser.KW_MAP:
                case SparkSqlParser.KW_MATCHED:
                case SparkSqlParser.KW_MERGE:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MICROSECONDS:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MILLISECONDS:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MINUTES:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_MONTHS:
                case SparkSqlParser.KW_MSCK:
                case SparkSqlParser.KW_NAME:
                case SparkSqlParser.KW_NAMESPACE:
                case SparkSqlParser.KW_NAMESPACES:
                case SparkSqlParser.KW_NANOSECOND:
                case SparkSqlParser.KW_NANOSECONDS:
                case SparkSqlParser.KW_NATURAL:
                case SparkSqlParser.KW_NO:
                case SparkSqlParser.KW_NOT:
                case SparkSqlParser.KW_NULL:
                case SparkSqlParser.KW_NULLS:
                case SparkSqlParser.KW_NUMERIC:
                case SparkSqlParser.KW_OF:
                case SparkSqlParser.KW_OFFSET:
                case SparkSqlParser.KW_ON:
                case SparkSqlParser.KW_ONLY:
                case SparkSqlParser.KW_OPTIMIZE:
                case SparkSqlParser.KW_OPTION:
                case SparkSqlParser.KW_OPTIONS:
                case SparkSqlParser.KW_OR:
                case SparkSqlParser.KW_ORDER:
                case SparkSqlParser.KW_OUT:
                case SparkSqlParser.KW_OUTER:
                case SparkSqlParser.KW_OUTPUTFORMAT:
                case SparkSqlParser.KW_OVER:
                case SparkSqlParser.KW_OVERLAPS:
                case SparkSqlParser.KW_OVERLAY:
                case SparkSqlParser.KW_OVERWRITE:
                case SparkSqlParser.KW_PARTITION:
                case SparkSqlParser.KW_PARTITIONED:
                case SparkSqlParser.KW_PARTITIONS:
                case SparkSqlParser.KW_PERCENTILE_CONT:
                case SparkSqlParser.KW_PERCENTILE_DISC:
                case SparkSqlParser.KW_PERCENTLIT:
                case SparkSqlParser.KW_PIVOT:
                case SparkSqlParser.KW_PLACING:
                case SparkSqlParser.KW_POSITION:
                case SparkSqlParser.KW_PRECEDING:
                case SparkSqlParser.KW_PRIMARY:
                case SparkSqlParser.KW_PRINCIPALS:
                case SparkSqlParser.KW_PROPERTIES:
                case SparkSqlParser.KW_PURGE:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_QUERY:
                case SparkSqlParser.KW_RANGE:
                case SparkSqlParser.KW_REAL:
                case SparkSqlParser.KW_RECORDREADER:
                case SparkSqlParser.KW_RECORDWRITER:
                case SparkSqlParser.KW_RECOVER:
                case SparkSqlParser.KW_REDUCE:
                case SparkSqlParser.KW_REFERENCES:
                case SparkSqlParser.KW_REFRESH:
                case SparkSqlParser.KW_RENAME:
                case SparkSqlParser.KW_REPAIR:
                case SparkSqlParser.KW_REPEATABLE:
                case SparkSqlParser.KW_REPLACE:
                case SparkSqlParser.KW_RESET:
                case SparkSqlParser.KW_RESPECT:
                case SparkSqlParser.KW_RESTRICT:
                case SparkSqlParser.KW_REWRITE:
                case SparkSqlParser.KW_REVOKE:
                case SparkSqlParser.KW_RIGHT:
                case SparkSqlParser.KW_RLIKE:
                case SparkSqlParser.KW_REGEXP:
                case SparkSqlParser.KW_ROLE:
                case SparkSqlParser.KW_ROLES:
                case SparkSqlParser.KW_ROLLBACK:
                case SparkSqlParser.KW_ROLLUP:
                case SparkSqlParser.KW_ROW:
                case SparkSqlParser.KW_ROWS:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_SECONDS:
                case SparkSqlParser.KW_SCHEMA:
                case SparkSqlParser.KW_SCHEMAS:
                case SparkSqlParser.KW_SEMI:
                case SparkSqlParser.KW_SEPARATED:
                case SparkSqlParser.KW_SERDE:
                case SparkSqlParser.KW_SERDEPROPERTIES:
                case SparkSqlParser.KW_SESSION_USER:
                case SparkSqlParser.KW_SET:
                case SparkSqlParser.KW_MINUS:
                case SparkSqlParser.KW_SETS:
                case SparkSqlParser.KW_SHORT:
                case SparkSqlParser.KW_SHOW:
                case SparkSqlParser.KW_SINGLE:
                case SparkSqlParser.KW_SKEWED:
                case SparkSqlParser.KW_SMALLINT:
                case SparkSqlParser.KW_SOME:
                case SparkSqlParser.KW_SORT:
                case SparkSqlParser.KW_SORTED:
                case SparkSqlParser.KW_SOURCE:
                case SparkSqlParser.KW_START:
                case SparkSqlParser.KW_STATISTICS:
                case SparkSqlParser.KW_STORED:
                case SparkSqlParser.KW_STRATIFY:
                case SparkSqlParser.KW_STRING:
                case SparkSqlParser.KW_STRUCT:
                case SparkSqlParser.KW_SUBSTR:
                case SparkSqlParser.KW_SUBSTRING:
                case SparkSqlParser.KW_SYNC:
                case SparkSqlParser.KW_SYSTEM:
                case SparkSqlParser.KW_SYSTEM_TIME:
                case SparkSqlParser.KW_SYSTEM_VERSION:
                case SparkSqlParser.KW_TABLES:
                case SparkSqlParser.KW_TABLESAMPLE:
                case SparkSqlParser.KW_TARGET:
                case SparkSqlParser.KW_TBLPROPERTIES:
                case SparkSqlParser.KW_TEMPORARY:
                case SparkSqlParser.KW_TERMINATED:
                case SparkSqlParser.KW_THEN:
                case SparkSqlParser.KW_TIME:
                case SparkSqlParser.KW_TIMEDIFF:
                case SparkSqlParser.KW_TIMESTAMP:
                case SparkSqlParser.KW_TIMESTAMP_LTZ:
                case SparkSqlParser.KW_TIMESTAMP_NTZ:
                case SparkSqlParser.KW_TIMESTAMPADD:
                case SparkSqlParser.KW_TIMESTAMPDIFF:
                case SparkSqlParser.KW_TINYINT:
                case SparkSqlParser.KW_TO:
                case SparkSqlParser.KW_TOUCH:
                case SparkSqlParser.KW_TRAILING:
                case SparkSqlParser.KW_TRANSACTION:
                case SparkSqlParser.KW_TRANSACTIONS:
                case SparkSqlParser.KW_TRANSFORM:
                case SparkSqlParser.KW_TRIM:
                case SparkSqlParser.KW_TRUE:
                case SparkSqlParser.KW_TRUNCATE:
                case SparkSqlParser.KW_TRY_CAST:
                case SparkSqlParser.KW_TYPE:
                case SparkSqlParser.KW_UNARCHIVE:
                case SparkSqlParser.KW_UNBOUNDED:
                case SparkSqlParser.KW_UNCACHE:
                case SparkSqlParser.KW_UNION:
                case SparkSqlParser.KW_UNIQUE:
                case SparkSqlParser.KW_UNKNOWN:
                case SparkSqlParser.KW_UNLOCK:
                case SparkSqlParser.KW_UNPIVOT:
                case SparkSqlParser.KW_UNSET:
                case SparkSqlParser.KW_UPDATE:
                case SparkSqlParser.KW_USE:
                case SparkSqlParser.KW_USER:
                case SparkSqlParser.KW_USING:
                case SparkSqlParser.KW_VALUES:
                case SparkSqlParser.KW_VARCHAR:
                case SparkSqlParser.KW_VAR:
                case SparkSqlParser.KW_VARIABLE:
                case SparkSqlParser.KW_VERSION:
                case SparkSqlParser.KW_VIEW:
                case SparkSqlParser.KW_VIEWS:
                case SparkSqlParser.KW_VOID:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_WEEKS:
                case SparkSqlParser.KW_WHEN:
                case SparkSqlParser.KW_WHERE:
                case SparkSqlParser.KW_WINDOW:
                case SparkSqlParser.KW_WITH:
                case SparkSqlParser.KW_WITHIN:
                case SparkSqlParser.KW_YEAR:
                case SparkSqlParser.KW_YEARS:
                case SparkSqlParser.KW_ZONE:
                case SparkSqlParser.KW_ZORDER:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                case SparkSqlParser.IDENTIFIER:
                case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 1884;
                    (localContext as MergeIntoTableContext)._source = this.identifierReference();
                    }
                    break;
                case SparkSqlParser.LEFT_PAREN:
                    {
                    this.state = 1885;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 1886;
                    (localContext as MergeIntoTableContext)._sourceQuery = this.query();
                    this.state = 1887;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1891;
                (localContext as MergeIntoTableContext)._sourceAlias = this.tableAlias();
                this.state = 1892;
                this.match(SparkSqlParser.KW_ON);
                this.state = 1893;
                (localContext as MergeIntoTableContext)._mergeCondition = this.booleanExpression(0);
                this.state = 1897;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 207, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1894;
                        this.matchedClause();
                        }
                        }
                    }
                    this.state = 1899;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 207, this.context);
                }
                this.state = 1903;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 208, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1900;
                        this.notMatchedClause();
                        }
                        }
                    }
                    this.state = 1905;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 208, this.context);
                }
                this.state = 1909;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 343) {
                    {
                    {
                    this.state = 1906;
                    this.notMatchedBySourceClause();
                    }
                    }
                    this.state = 1911;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namespaceName(): NamespaceNameContext {
        let localContext = new NamespaceNameContext(this.context, this.state);
        this.enterRule(localContext, 80, SparkSqlParser.RULE_namespaceName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1914;
            this.identifierReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namespaceNameCreate(): NamespaceNameCreateContext {
        let localContext = new NamespaceNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 82, SparkSqlParser.RULE_namespaceNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1916;
            this.identifierReference();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableNameCreate(): TableNameCreateContext {
        let localContext = new TableNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 84, SparkSqlParser.RULE_tableNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1918;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableName(): TableNameContext {
        let localContext = new TableNameContext(this.context, this.state);
        this.enterRule(localContext, 86, SparkSqlParser.RULE_tableName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1920;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewNameCreate(): ViewNameCreateContext {
        let localContext = new ViewNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 88, SparkSqlParser.RULE_viewNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1922;
            this.viewIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewName(): ViewNameContext {
        let localContext = new ViewNameContext(this.context, this.state);
        this.enterRule(localContext, 90, SparkSqlParser.RULE_viewName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1924;
            this.viewIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnName(): ColumnNameContext {
        let localContext = new ColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 92, SparkSqlParser.RULE_columnName);
        try {
            this.state = 1928;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 211, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1926;
                this.multipartIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1927;
                if (!(this.shouldMatchEmpty())) {
                    throw this.createFailedPredicateException("this.shouldMatchEmpty()");
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameSeq(): ColumnNameSeqContext {
        let localContext = new ColumnNameSeqContext(this.context, this.state);
        this.enterRule(localContext, 94, SparkSqlParser.RULE_columnNameSeq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1930;
            this.columnName();
            this.state = 1935;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1931;
                this.match(SparkSqlParser.COMMA);
                this.state = 1932;
                this.columnName();
                }
                }
                this.state = 1937;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        let localContext = new ColumnNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 96, SparkSqlParser.RULE_columnNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1938;
            this.errorCapturingIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierReference(): IdentifierReferenceContext {
        let localContext = new IdentifierReferenceContext(this.context, this.state);
        this.enterRule(localContext, 98, SparkSqlParser.RULE_identifierReference);
        try {
            this.state = 1946;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 213, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1940;
                this.match(SparkSqlParser.KW_IDENTIFIER);
                this.state = 1941;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 1942;
                this.expression();
                this.state = 1943;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1945;
                this.multipartIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryOrganization(): QueryOrganizationContext {
        let localContext = new QueryOrganizationContext(this.context, this.state);
        this.enterRule(localContext, 100, SparkSqlParser.RULE_queryOrganization);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1958;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 215, this.context) ) {
            case 1:
                {
                this.state = 1948;
                this.match(SparkSqlParser.KW_ORDER);
                this.state = 1949;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1950;
                localContext._sortItem = this.sortItem();
                localContext._order.push(localContext._sortItem);
                this.state = 1955;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 214, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1951;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 1952;
                        localContext._sortItem = this.sortItem();
                        localContext._order.push(localContext._sortItem);
                        }
                        }
                    }
                    this.state = 1957;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 214, this.context);
                }
                }
                break;
            }
            this.state = 1970;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 217, this.context) ) {
            case 1:
                {
                this.state = 1960;
                this.match(SparkSqlParser.KW_CLUSTER);
                this.state = 1961;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1962;
                localContext._expression = this.expression();
                localContext._clusterBy.push(localContext._expression);
                this.state = 1967;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 216, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1963;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 1964;
                        localContext._expression = this.expression();
                        localContext._clusterBy.push(localContext._expression);
                        }
                        }
                    }
                    this.state = 1969;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 216, this.context);
                }
                }
                break;
            }
            this.state = 1982;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
            case 1:
                {
                this.state = 1972;
                this.match(SparkSqlParser.KW_DISTRIBUTE);
                this.state = 1973;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1974;
                localContext._expression = this.expression();
                localContext._distributeBy.push(localContext._expression);
                this.state = 1979;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 218, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1975;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 1976;
                        localContext._expression = this.expression();
                        localContext._distributeBy.push(localContext._expression);
                        }
                        }
                    }
                    this.state = 1981;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 218, this.context);
                }
                }
                break;
            }
            this.state = 1994;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 221, this.context) ) {
            case 1:
                {
                this.state = 1984;
                this.match(SparkSqlParser.KW_SORT);
                this.state = 1985;
                this.match(SparkSqlParser.KW_BY);
                this.state = 1986;
                localContext._sortItem = this.sortItem();
                localContext._sort.push(localContext._sortItem);
                this.state = 1991;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 220, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1987;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 1988;
                        localContext._sortItem = this.sortItem();
                        localContext._sort.push(localContext._sortItem);
                        }
                        }
                    }
                    this.state = 1993;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 220, this.context);
                }
                }
                break;
            }
            this.state = 1997;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 222, this.context) ) {
            case 1:
                {
                this.state = 1996;
                this.windowClause();
                }
                break;
            }
            this.state = 2004;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 224, this.context) ) {
            case 1:
                {
                this.state = 1999;
                this.match(SparkSqlParser.KW_LIMIT);
                this.state = 2002;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 223, this.context) ) {
                case 1:
                    {
                    this.state = 2000;
                    this.match(SparkSqlParser.KW_ALL);
                    }
                    break;
                case 2:
                    {
                    this.state = 2001;
                    localContext._limit = this.expression();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 2008;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 225, this.context) ) {
            case 1:
                {
                this.state = 2006;
                this.match(SparkSqlParser.KW_OFFSET);
                this.state = 2007;
                localContext._offset = this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiInsertQueryBody(): MultiInsertQueryBodyContext {
        let localContext = new MultiInsertQueryBodyContext(this.context, this.state);
        this.enterRule(localContext, 102, SparkSqlParser.RULE_multiInsertQueryBody);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2010;
            this.insertInto();
            this.state = 2011;
            this.fromStatementBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public queryTerm(): QueryTermContext;
    public queryTerm(_p: number): QueryTermContext;
    public queryTerm(_p?: number): QueryTermContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new QueryTermContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 104;
        this.enterRecursionRule(localContext, 104, SparkSqlParser.RULE_queryTerm, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 2014;
            this.queryPrimary();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2036;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 230, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2034;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 229, this.context) ) {
                    case 1:
                        {
                        localContext = new QueryTermContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_queryTerm);
                        this.state = 2016;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 2017;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 102 || _la === 148 || _la === 270 || _la === 323)) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2019;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 10 || _la === 92) {
                            {
                            this.state = 2018;
                            this.setQuantifier();
                            }
                        }

                        this.state = 2021;
                        localContext._right = this.queryTerm(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new QueryTermContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_queryTerm);
                        this.state = 2022;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2023;
                        localContext._operator = this.match(SparkSqlParser.KW_INTERSECT);
                        this.state = 2025;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 10 || _la === 92) {
                            {
                            this.state = 2024;
                            this.setQuantifier();
                            }
                        }

                        this.state = 2027;
                        localContext._right = this.queryTerm(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new QueryTermContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_queryTerm);
                        this.state = 2028;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2029;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 102 || _la === 270 || _la === 323)) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2031;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 10 || _la === 92) {
                            {
                            this.state = 2030;
                            this.setQuantifier();
                            }
                        }

                        this.state = 2033;
                        localContext._right = this.queryTerm(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 2038;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 230, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localContext = new QueryPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 106, SparkSqlParser.RULE_queryPrimary);
        try {
            let alternative: number;
            this.state = 2058;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_MAP:
            case SparkSqlParser.KW_REDUCE:
            case SparkSqlParser.KW_SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2039;
                this.querySpecification();
                }
                break;
            case SparkSqlParser.KW_FROM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2040;
                this.fromStatement();
                }
                break;
            case SparkSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2041;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 2042;
                this.tableName();
                }
                break;
            case SparkSqlParser.KW_VALUES:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2043;
                this.match(SparkSqlParser.KW_VALUES);
                this.state = 2044;
                this.expression();
                this.state = 2049;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 231, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2045;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2046;
                        this.expression();
                        }
                        }
                    }
                    this.state = 2051;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 231, this.context);
                }
                this.state = 2052;
                this.tableAlias();
                }
                break;
            case SparkSqlParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2054;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2055;
                this.query();
                this.state = 2056;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortItem(): SortItemContext {
        let localContext = new SortItemContext(this.context, this.state);
        this.enterRule(localContext, 108, SparkSqlParser.RULE_sortItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2062;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 233, this.context) ) {
            case 1:
                {
                this.state = 2060;
                this.columnName();
                }
                break;
            case 2:
                {
                this.state = 2061;
                this.expression();
                }
                break;
            }
            this.state = 2065;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 234, this.context) ) {
            case 1:
                {
                this.state = 2064;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 21 || _la === 86)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 2069;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 235, this.context) ) {
            case 1:
                {
                this.state = 2067;
                this.match(SparkSqlParser.KW_NULLS);
                this.state = 2068;
                localContext._nullOrder = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 116 || _la === 157)) {
                    localContext._nullOrder = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromStatement(): FromStatementContext {
        let localContext = new FromStatementContext(this.context, this.state);
        this.enterRule(localContext, 110, SparkSqlParser.RULE_fromStatement);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2071;
            this.fromClause();
            this.state = 2073;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 2072;
                    this.fromStatementBody();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2075;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 236, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromStatementBody(): FromStatementBodyContext {
        let localContext = new FromStatementBodyContext(this.context, this.state);
        this.enterRule(localContext, 112, SparkSqlParser.RULE_fromStatementBody);
        try {
            let alternative: number;
            this.state = 2104;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 243, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2077;
                this.transformClause();
                this.state = 2079;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 237, this.context) ) {
                case 1:
                    {
                    this.state = 2078;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 2081;
                this.queryOrganization();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2083;
                this.selectClause();
                this.state = 2087;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 238, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2084;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 2089;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 238, this.context);
                }
                this.state = 2091;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 239, this.context) ) {
                case 1:
                    {
                    this.state = 2090;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 2094;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 240, this.context) ) {
                case 1:
                    {
                    this.state = 2093;
                    this.aggregationClause();
                    }
                    break;
                }
                this.state = 2097;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 241, this.context) ) {
                case 1:
                    {
                    this.state = 2096;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 2100;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 242, this.context) ) {
                case 1:
                    {
                    this.state = 2099;
                    this.windowClause();
                    }
                    break;
                }
                this.state = 2102;
                this.queryOrganization();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecification(): QuerySpecificationContext {
        let localContext = new QuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 114, SparkSqlParser.RULE_querySpecification);
        try {
            let alternative: number;
            this.state = 2150;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2106;
                this.transformClause();
                this.state = 2108;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
                case 1:
                    {
                    this.state = 2107;
                    this.fromClause();
                    }
                    break;
                }
                this.state = 2113;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 245, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2110;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 2115;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 245, this.context);
                }
                this.state = 2117;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 246, this.context) ) {
                case 1:
                    {
                    this.state = 2116;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 2120;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
                case 1:
                    {
                    this.state = 2119;
                    this.aggregationClause();
                    }
                    break;
                }
                this.state = 2123;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 248, this.context) ) {
                case 1:
                    {
                    this.state = 2122;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 2126;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 249, this.context) ) {
                case 1:
                    {
                    this.state = 2125;
                    this.windowClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2128;
                this.selectClause();
                this.state = 2130;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 250, this.context) ) {
                case 1:
                    {
                    this.state = 2129;
                    this.fromClause();
                    }
                    break;
                }
                this.state = 2135;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 251, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2132;
                        this.lateralView();
                        }
                        }
                    }
                    this.state = 2137;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 251, this.context);
                }
                this.state = 2139;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 252, this.context) ) {
                case 1:
                    {
                    this.state = 2138;
                    this.whereClause();
                    }
                    break;
                }
                this.state = 2142;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 253, this.context) ) {
                case 1:
                    {
                    this.state = 2141;
                    this.aggregationClause();
                    }
                    break;
                }
                this.state = 2145;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
                case 1:
                    {
                    this.state = 2144;
                    this.havingClause();
                    }
                    break;
                }
                this.state = 2148;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
                case 1:
                    {
                    this.state = 2147;
                    this.windowClause();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transformClause(): TransformClauseContext {
        let localContext = new TransformClauseContext(this.context, this.state);
        this.enterRule(localContext, 116, SparkSqlParser.RULE_transformClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2171;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_SELECT:
                {
                this.state = 2152;
                this.match(SparkSqlParser.KW_SELECT);
                this.state = 2153;
                localContext._kind = this.match(SparkSqlParser.KW_TRANSFORM);
                this.state = 2154;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2156;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 257, this.context) ) {
                case 1:
                    {
                    this.state = 2155;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2158;
                this.expressionSeq();
                this.state = 2159;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case SparkSqlParser.KW_MAP:
                {
                this.state = 2161;
                localContext._kind = this.match(SparkSqlParser.KW_MAP);
                this.state = 2163;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
                case 1:
                    {
                    this.state = 2162;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2165;
                this.expressionSeq();
                }
                break;
            case SparkSqlParser.KW_REDUCE:
                {
                this.state = 2166;
                localContext._kind = this.match(SparkSqlParser.KW_REDUCE);
                this.state = 2168;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 259, this.context) ) {
                case 1:
                    {
                    this.state = 2167;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2170;
                this.expressionSeq();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2174;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 257) {
                {
                this.state = 2173;
                localContext._inRowFormat = this.rowFormat();
                }
            }

            this.state = 2178;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 236) {
                {
                this.state = 2176;
                this.match(SparkSqlParser.KW_RECORDWRITER);
                this.state = 2177;
                localContext._recordWriter = this.stringLit();
                }
            }

            this.state = 2180;
            this.match(SparkSqlParser.KW_USING);
            this.state = 2181;
            localContext._script = this.stringLit();
            this.state = 2194;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 265, this.context) ) {
            case 1:
                {
                this.state = 2182;
                this.match(SparkSqlParser.KW_AS);
                this.state = 2192;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 264, this.context) ) {
                case 1:
                    {
                    this.state = 2183;
                    this.identifierSeq();
                    }
                    break;
                case 2:
                    {
                    this.state = 2184;
                    this.colTypeList();
                    }
                    break;
                case 3:
                    {
                    {
                    this.state = 2185;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2188;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 263, this.context) ) {
                    case 1:
                        {
                        this.state = 2186;
                        this.identifierSeq();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2187;
                        this.colTypeList();
                        }
                        break;
                    }
                    this.state = 2190;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            }
            this.state = 2197;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 266, this.context) ) {
            case 1:
                {
                this.state = 2196;
                localContext._outRowFormat = this.rowFormat();
                }
                break;
            }
            this.state = 2201;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 267, this.context) ) {
            case 1:
                {
                this.state = 2199;
                this.match(SparkSqlParser.KW_RECORDREADER);
                this.state = 2200;
                localContext._recordReader = this.stringLit();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectClause(): SelectClauseContext {
        let localContext = new SelectClauseContext(this.context, this.state);
        this.enterRule(localContext, 118, SparkSqlParser.RULE_selectClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2203;
            this.match(SparkSqlParser.KW_SELECT);
            this.state = 2207;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 268, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2204;
                    localContext._hint = this.hint();
                    localContext._hints.push(localContext._hint);
                    }
                    }
                }
                this.state = 2209;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 268, this.context);
            }
            this.state = 2211;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 269, this.context) ) {
            case 1:
                {
                this.state = 2210;
                this.setQuantifier();
                }
                break;
            }
            this.state = 2213;
            this.selectList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setClause(): SetClauseContext {
        let localContext = new SetClauseContext(this.context, this.state);
        this.enterRule(localContext, 120, SparkSqlParser.RULE_setClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2215;
            this.match(SparkSqlParser.KW_SET);
            this.state = 2216;
            this.assignmentList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public matchedClause(): MatchedClauseContext {
        let localContext = new MatchedClauseContext(this.context, this.state);
        this.enterRule(localContext, 122, SparkSqlParser.RULE_matchedClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2218;
            this.match(SparkSqlParser.KW_WHEN);
            this.state = 2219;
            this.match(SparkSqlParser.KW_MATCHED);
            this.state = 2222;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14) {
                {
                this.state = 2220;
                this.match(SparkSqlParser.KW_AND);
                this.state = 2221;
                localContext._matchedCond = this.booleanExpression(0);
                }
            }

            this.state = 2224;
            this.match(SparkSqlParser.KW_THEN);
            this.state = 2225;
            this.matchedAction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedClause(): NotMatchedClauseContext {
        let localContext = new NotMatchedClauseContext(this.context, this.state);
        this.enterRule(localContext, 124, SparkSqlParser.RULE_notMatchedClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2227;
            this.match(SparkSqlParser.KW_WHEN);
            this.state = 2228;
            this.match(SparkSqlParser.KW_NOT);
            this.state = 2229;
            this.match(SparkSqlParser.KW_MATCHED);
            this.state = 2232;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 31) {
                {
                this.state = 2230;
                this.match(SparkSqlParser.KW_BY);
                this.state = 2231;
                this.match(SparkSqlParser.KW_TARGET);
                }
            }

            this.state = 2236;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14) {
                {
                this.state = 2234;
                this.match(SparkSqlParser.KW_AND);
                this.state = 2235;
                localContext._notMatchedCond = this.booleanExpression(0);
                }
            }

            this.state = 2238;
            this.match(SparkSqlParser.KW_THEN);
            this.state = 2239;
            this.notMatchedAction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedBySourceClause(): NotMatchedBySourceClauseContext {
        let localContext = new NotMatchedBySourceClauseContext(this.context, this.state);
        this.enterRule(localContext, 126, SparkSqlParser.RULE_notMatchedBySourceClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2241;
            this.match(SparkSqlParser.KW_WHEN);
            this.state = 2242;
            this.match(SparkSqlParser.KW_NOT);
            this.state = 2243;
            this.match(SparkSqlParser.KW_MATCHED);
            this.state = 2244;
            this.match(SparkSqlParser.KW_BY);
            this.state = 2245;
            this.match(SparkSqlParser.KW_SOURCE);
            this.state = 2248;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14) {
                {
                this.state = 2246;
                this.match(SparkSqlParser.KW_AND);
                this.state = 2247;
                localContext._notMatchedBySourceCond = this.booleanExpression(0);
                }
            }

            this.state = 2250;
            this.match(SparkSqlParser.KW_THEN);
            this.state = 2251;
            this.notMatchedBySourceAction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public matchedAction(): MatchedActionContext {
        let localContext = new MatchedActionContext(this.context, this.state);
        this.enterRule(localContext, 128, SparkSqlParser.RULE_matchedAction);
        try {
            this.state = 2260;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 274, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2253;
                this.match(SparkSqlParser.KW_DELETE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2254;
                this.match(SparkSqlParser.KW_UPDATE);
                this.state = 2255;
                this.match(SparkSqlParser.KW_SET);
                this.state = 2256;
                this.match(SparkSqlParser.ASTERISK);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2257;
                this.match(SparkSqlParser.KW_UPDATE);
                this.state = 2258;
                this.match(SparkSqlParser.KW_SET);
                this.state = 2259;
                this.assignmentList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedAction(): NotMatchedActionContext {
        let localContext = new NotMatchedActionContext(this.context, this.state);
        this.enterRule(localContext, 130, SparkSqlParser.RULE_notMatchedAction);
        let _la: number;
        try {
            this.state = 2280;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 276, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2262;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 2263;
                this.match(SparkSqlParser.ASTERISK);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2264;
                this.match(SparkSqlParser.KW_INSERT);
                this.state = 2265;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2266;
                this.multipartIdentifierList();
                this.state = 2267;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2268;
                this.match(SparkSqlParser.KW_VALUES);
                this.state = 2269;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2270;
                this.expression();
                this.state = 2275;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2271;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2272;
                    this.expression();
                    }
                    }
                    this.state = 2277;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2278;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notMatchedBySourceAction(): NotMatchedBySourceActionContext {
        let localContext = new NotMatchedBySourceActionContext(this.context, this.state);
        this.enterRule(localContext, 132, SparkSqlParser.RULE_notMatchedBySourceAction);
        try {
            this.state = 2286;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_DELETE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2282;
                this.match(SparkSqlParser.KW_DELETE);
                }
                break;
            case SparkSqlParser.KW_UPDATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2283;
                this.match(SparkSqlParser.KW_UPDATE);
                this.state = 2284;
                this.match(SparkSqlParser.KW_SET);
                this.state = 2285;
                this.assignmentList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentList(): AssignmentListContext {
        let localContext = new AssignmentListContext(this.context, this.state);
        this.enterRule(localContext, 134, SparkSqlParser.RULE_assignmentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2288;
            this.assignment();
            this.state = 2293;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2289;
                this.match(SparkSqlParser.COMMA);
                this.state = 2290;
                this.assignment();
                }
                }
                this.state = 2295;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignment(): AssignmentContext {
        let localContext = new AssignmentContext(this.context, this.state);
        this.enterRule(localContext, 136, SparkSqlParser.RULE_assignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2296;
            localContext._key = this.multipartIdentifier();
            this.state = 2297;
            this.match(SparkSqlParser.EQ);
            this.state = 2298;
            localContext._value = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 138, SparkSqlParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2300;
            this.match(SparkSqlParser.KW_WHERE);
            this.state = 2301;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 140, SparkSqlParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2303;
            this.match(SparkSqlParser.KW_HAVING);
            this.state = 2304;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hint(): HintContext {
        let localContext = new HintContext(this.context, this.state);
        this.enterRule(localContext, 142, SparkSqlParser.RULE_hint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2306;
            this.match(SparkSqlParser.HENT_START);
            this.state = 2307;
            localContext._hintStatement = this.hintStatement();
            localContext._hintStatements.push(localContext._hintStatement);
            this.state = 2314;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967056) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & 3073) !== 0)) {
                {
                {
                this.state = 2309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 2308;
                    this.match(SparkSqlParser.COMMA);
                    }
                }

                this.state = 2311;
                localContext._hintStatement = this.hintStatement();
                localContext._hintStatements.push(localContext._hintStatement);
                }
                }
                this.state = 2316;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2317;
            this.match(SparkSqlParser.HENT_END);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintStatement(): HintStatementContext {
        let localContext = new HintStatementContext(this.context, this.state);
        this.enterRule(localContext, 144, SparkSqlParser.RULE_hintStatement);
        let _la: number;
        try {
            this.state = 2332;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 282, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2319;
                localContext._hintName = this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2320;
                localContext._hintName = this.identifier();
                this.state = 2321;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2322;
                localContext._primaryExpression = this.primaryExpression(0);
                localContext._parameters.push(localContext._primaryExpression);
                this.state = 2327;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2323;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2324;
                    localContext._primaryExpression = this.primaryExpression(0);
                    localContext._parameters.push(localContext._primaryExpression);
                    }
                    }
                    this.state = 2329;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2330;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 146, SparkSqlParser.RULE_fromClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2334;
            this.match(SparkSqlParser.KW_FROM);
            this.state = 2335;
            this.relation();
            this.state = 2340;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 283, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2336;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2337;
                    this.relation();
                    }
                    }
                }
                this.state = 2342;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 283, this.context);
            }
            this.state = 2346;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 284, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2343;
                    this.lateralView();
                    }
                    }
                }
                this.state = 2348;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 284, this.context);
            }
            this.state = 2350;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 285, this.context) ) {
            case 1:
                {
                this.state = 2349;
                this.pivotClause();
                }
                break;
            }
            this.state = 2353;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 286, this.context) ) {
            case 1:
                {
                this.state = 2352;
                this.unpivotClause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionKind(): FunctionKindContext {
        let localContext = new FunctionKindContext(this.context, this.state);
        this.enterRule(localContext, 148, SparkSqlParser.RULE_functionKind);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2355;
            _la = this.tokenStream.LA(1);
            if(!(_la === 10 || _la === 290 || _la === 331)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public temporalClause(): TemporalClauseContext {
        let localContext = new TemporalClauseContext(this.context, this.state);
        this.enterRule(localContext, 150, SparkSqlParser.RULE_temporalClause);
        let _la: number;
        try {
            this.state = 2371;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 289, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2358;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 2357;
                    this.match(SparkSqlParser.KW_FOR);
                    }
                }

                this.state = 2360;
                _la = this.tokenStream.LA(1);
                if(!(_la === 292 || _la === 337)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2361;
                this.match(SparkSqlParser.KW_AS);
                this.state = 2362;
                this.match(SparkSqlParser.KW_OF);
                this.state = 2363;
                this.version();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2365;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 2364;
                    this.match(SparkSqlParser.KW_FOR);
                    }
                }

                this.state = 2367;
                _la = this.tokenStream.LA(1);
                if(!(_la === 291 || _la === 303)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2368;
                this.match(SparkSqlParser.KW_AS);
                this.state = 2369;
                this.match(SparkSqlParser.KW_OF);
                this.state = 2370;
                localContext._timestamp = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregationClause(): AggregationClauseContext {
        let localContext = new AggregationClauseContext(this.context, this.state);
        this.enterRule(localContext, 152, SparkSqlParser.RULE_aggregationClause);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2412;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 294, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2373;
                this.match(SparkSqlParser.KW_GROUP);
                this.state = 2374;
                this.match(SparkSqlParser.KW_BY);
                this.state = 2375;
                localContext._groupByClause = this.groupByClause();
                localContext._groupingExpressionsWithGroupingAnalytics.push(localContext._groupByClause);
                this.state = 2380;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 290, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2376;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2377;
                        localContext._groupByClause = this.groupByClause();
                        localContext._groupingExpressionsWithGroupingAnalytics.push(localContext._groupByClause);
                        }
                        }
                    }
                    this.state = 2382;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 290, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2383;
                this.match(SparkSqlParser.KW_GROUP);
                this.state = 2384;
                this.match(SparkSqlParser.KW_BY);
                this.state = 2385;
                localContext._expression = this.expression();
                localContext._groupingExpressions.push(localContext._expression);
                this.state = 2390;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 291, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2386;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2387;
                        localContext._expression = this.expression();
                        localContext._groupingExpressions.push(localContext._expression);
                        }
                        }
                    }
                    this.state = 2392;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 291, this.context);
                }
                this.state = 2410;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 293, this.context) ) {
                case 1:
                    {
                    this.state = 2393;
                    this.match(SparkSqlParser.KW_WITH);
                    this.state = 2394;
                    localContext._kind = this.match(SparkSqlParser.KW_ROLLUP);
                    }
                    break;
                case 2:
                    {
                    this.state = 2395;
                    this.match(SparkSqlParser.KW_WITH);
                    this.state = 2396;
                    localContext._kind = this.match(SparkSqlParser.KW_CUBE);
                    }
                    break;
                case 3:
                    {
                    this.state = 2397;
                    localContext._kind = this.match(SparkSqlParser.KW_GROUPING);
                    this.state = 2398;
                    this.match(SparkSqlParser.KW_SETS);
                    this.state = 2399;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2400;
                    this.groupingSet();
                    this.state = 2405;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2401;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2402;
                        this.groupingSet();
                        }
                        }
                        this.state = 2407;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2408;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 154, SparkSqlParser.RULE_groupByClause);
        try {
            this.state = 2417;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 295, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2414;
                this.columnName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2415;
                this.groupingAnalytics();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2416;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingAnalytics(): GroupingAnalyticsContext {
        let localContext = new GroupingAnalyticsContext(this.context, this.state);
        this.enterRule(localContext, 156, SparkSqlParser.RULE_groupingAnalytics);
        let _la: number;
        try {
            this.state = 2444;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_CUBE:
            case SparkSqlParser.KW_ROLLUP:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2419;
                _la = this.tokenStream.LA(1);
                if(!(_la === 61 || _la === 256)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2420;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2421;
                this.groupingSet();
                this.state = 2426;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2422;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2423;
                    this.groupingSet();
                    }
                    }
                    this.state = 2428;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2429;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case SparkSqlParser.KW_GROUPING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2431;
                this.match(SparkSqlParser.KW_GROUPING);
                this.state = 2432;
                this.match(SparkSqlParser.KW_SETS);
                this.state = 2433;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2434;
                this.groupingElement();
                this.state = 2439;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2435;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2436;
                    this.groupingElement();
                    }
                    }
                    this.state = 2441;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2442;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingElement(): GroupingElementContext {
        let localContext = new GroupingElementContext(this.context, this.state);
        this.enterRule(localContext, 158, SparkSqlParser.RULE_groupingElement);
        try {
            this.state = 2448;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 299, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2446;
                this.groupingAnalytics();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2447;
                this.groupingSet();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSet(): GroupingSetContext {
        let localContext = new GroupingSetContext(this.context, this.state);
        this.enterRule(localContext, 160, SparkSqlParser.RULE_groupingSet);
        let _la: number;
        try {
            this.state = 2470;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 304, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2450;
                this.columnName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2451;
                this.expression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2452;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2467;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 303, this.context) ) {
                case 1:
                    {
                    this.state = 2455;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 300, this.context) ) {
                    case 1:
                        {
                        this.state = 2453;
                        this.columnName();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2454;
                        this.expression();
                        }
                        break;
                    }
                    this.state = 2464;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2457;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2460;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 301, this.context) ) {
                        case 1:
                            {
                            this.state = 2458;
                            this.columnName();
                            }
                            break;
                        case 2:
                            {
                            this.state = 2459;
                            this.expression();
                            }
                            break;
                        }
                        }
                        }
                        this.state = 2466;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                }
                this.state = 2469;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotClause(): PivotClauseContext {
        let localContext = new PivotClauseContext(this.context, this.state);
        this.enterRule(localContext, 162, SparkSqlParser.RULE_pivotClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2472;
            this.match(SparkSqlParser.KW_PIVOT);
            this.state = 2473;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2474;
            localContext._aggregates = this.namedExpressionSeq();
            this.state = 2475;
            this.match(SparkSqlParser.KW_FOR);
            this.state = 2476;
            this.pivotColumn();
            this.state = 2477;
            this.match(SparkSqlParser.KW_IN);
            this.state = 2478;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2479;
            localContext._pivotValue = this.pivotValue();
            localContext._pivotValues.push(localContext._pivotValue);
            this.state = 2484;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2480;
                this.match(SparkSqlParser.COMMA);
                this.state = 2481;
                localContext._pivotValue = this.pivotValue();
                localContext._pivotValues.push(localContext._pivotValue);
                }
                }
                this.state = 2486;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2487;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2488;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotColumn(): PivotColumnContext {
        let localContext = new PivotColumnContext(this.context, this.state);
        this.enterRule(localContext, 164, SparkSqlParser.RULE_pivotColumn);
        let _la: number;
        try {
            this.state = 2502;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ADD:
            case SparkSqlParser.KW_AFTER:
            case SparkSqlParser.KW_ALL:
            case SparkSqlParser.KW_ALTER:
            case SparkSqlParser.KW_ALWAYS:
            case SparkSqlParser.KW_ANALYZE:
            case SparkSqlParser.KW_AND:
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_ANY:
            case SparkSqlParser.KW_ANY_VALUE:
            case SparkSqlParser.KW_ARCHIVE:
            case SparkSqlParser.KW_ARRAY:
            case SparkSqlParser.KW_AS:
            case SparkSqlParser.KW_ASC:
            case SparkSqlParser.KW_AT:
            case SparkSqlParser.KW_AUTHORIZATION:
            case SparkSqlParser.KW_BETWEEN:
            case SparkSqlParser.KW_BIGINT:
            case SparkSqlParser.KW_BINARY:
            case SparkSqlParser.KW_BOOLEAN:
            case SparkSqlParser.KW_BOTH:
            case SparkSqlParser.KW_BUCKET:
            case SparkSqlParser.KW_BUCKETS:
            case SparkSqlParser.KW_BY:
            case SparkSqlParser.KW_BYTE:
            case SparkSqlParser.KW_CACHE:
            case SparkSqlParser.KW_CASCADE:
            case SparkSqlParser.KW_CASE:
            case SparkSqlParser.KW_CAST:
            case SparkSqlParser.KW_CATALOG:
            case SparkSqlParser.KW_CATALOGS:
            case SparkSqlParser.KW_CHANGE:
            case SparkSqlParser.KW_CHAR:
            case SparkSqlParser.KW_CHARACTER:
            case SparkSqlParser.KW_CHECK:
            case SparkSqlParser.KW_CLEAR:
            case SparkSqlParser.KW_CLUSTER:
            case SparkSqlParser.KW_CLUSTERED:
            case SparkSqlParser.KW_CODEGEN:
            case SparkSqlParser.KW_COLLATE:
            case SparkSqlParser.KW_COLLECTION:
            case SparkSqlParser.KW_COLUMN:
            case SparkSqlParser.KW_COLUMNS:
            case SparkSqlParser.KW_COMMENT:
            case SparkSqlParser.KW_COMMIT:
            case SparkSqlParser.KW_COMPACT:
            case SparkSqlParser.KW_COMPACTIONS:
            case SparkSqlParser.KW_COMPUTE:
            case SparkSqlParser.KW_CONCATENATE:
            case SparkSqlParser.KW_CONSTRAINT:
            case SparkSqlParser.KW_COST:
            case SparkSqlParser.KW_CREATE:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_CUBE:
            case SparkSqlParser.KW_CURRENT:
            case SparkSqlParser.KW_CURRENT_DATE:
            case SparkSqlParser.KW_CURRENT_TIME:
            case SparkSqlParser.KW_CURRENT_TIMESTAMP:
            case SparkSqlParser.KW_CURRENT_USER:
            case SparkSqlParser.KW_DAY:
            case SparkSqlParser.KW_DAYS:
            case SparkSqlParser.KW_DAYOFYEAR:
            case SparkSqlParser.KW_DATA:
            case SparkSqlParser.KW_DATE:
            case SparkSqlParser.KW_DATABASE:
            case SparkSqlParser.KW_DATABASES:
            case SparkSqlParser.KW_DATEADD:
            case SparkSqlParser.KW_DATE_ADD:
            case SparkSqlParser.KW_DATEDIFF:
            case SparkSqlParser.KW_DATE_DIFF:
            case SparkSqlParser.KW_DBPROPERTIES:
            case SparkSqlParser.KW_DEC:
            case SparkSqlParser.KW_DECIMAL:
            case SparkSqlParser.KW_DECLARE:
            case SparkSqlParser.KW_DEFAULT:
            case SparkSqlParser.KW_DEFINED:
            case SparkSqlParser.KW_DELETE:
            case SparkSqlParser.KW_DELIMITED:
            case SparkSqlParser.KW_DESC:
            case SparkSqlParser.KW_DESCRIBE:
            case SparkSqlParser.KW_DFS:
            case SparkSqlParser.KW_DIRECTORIES:
            case SparkSqlParser.KW_DIRECTORY:
            case SparkSqlParser.KW_DISABLE:
            case SparkSqlParser.KW_DISTINCT:
            case SparkSqlParser.KW_DISTRIBUTE:
            case SparkSqlParser.KW_DIV:
            case SparkSqlParser.KW_DOUBLE:
            case SparkSqlParser.KW_DROP:
            case SparkSqlParser.KW_ELSE:
            case SparkSqlParser.KW_ENABLE:
            case SparkSqlParser.KW_END:
            case SparkSqlParser.KW_ESCAPE:
            case SparkSqlParser.KW_ESCAPED:
            case SparkSqlParser.KW_EXCEPT:
            case SparkSqlParser.KW_EXCHANGE:
            case SparkSqlParser.KW_EXCLUDE:
            case SparkSqlParser.KW_EXISTS:
            case SparkSqlParser.KW_EXPLAIN:
            case SparkSqlParser.KW_EXPORT:
            case SparkSqlParser.KW_EXTENDED:
            case SparkSqlParser.KW_EXTERNAL:
            case SparkSqlParser.KW_EXTRACT:
            case SparkSqlParser.KW_FALSE:
            case SparkSqlParser.KW_FETCH:
            case SparkSqlParser.KW_FIELDS:
            case SparkSqlParser.KW_FILTER:
            case SparkSqlParser.KW_FILEFORMAT:
            case SparkSqlParser.KW_FIRST:
            case SparkSqlParser.KW_FLOAT:
            case SparkSqlParser.KW_FOLLOWING:
            case SparkSqlParser.KW_FOR:
            case SparkSqlParser.KW_FOREIGN:
            case SparkSqlParser.KW_FORMAT:
            case SparkSqlParser.KW_FORMATTED:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_FUNCTION:
            case SparkSqlParser.KW_FUNCTIONS:
            case SparkSqlParser.KW_GENERATED:
            case SparkSqlParser.KW_GLOBAL:
            case SparkSqlParser.KW_GRANT:
            case SparkSqlParser.KW_GROUP:
            case SparkSqlParser.KW_GROUPING:
            case SparkSqlParser.KW_HAVING:
            case SparkSqlParser.KW_BINARY_HEX:
            case SparkSqlParser.KW_HOUR:
            case SparkSqlParser.KW_HOURS:
            case SparkSqlParser.KW_IDENTIFIER:
            case SparkSqlParser.KW_IF:
            case SparkSqlParser.KW_IGNORE:
            case SparkSqlParser.KW_IMPORT:
            case SparkSqlParser.KW_IN:
            case SparkSqlParser.KW_INCLUDE:
            case SparkSqlParser.KW_INDEX:
            case SparkSqlParser.KW_INDEXES:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_INPATH:
            case SparkSqlParser.KW_INPUTFORMAT:
            case SparkSqlParser.KW_INSERT:
            case SparkSqlParser.KW_INTERSECT:
            case SparkSqlParser.KW_INTERVAL:
            case SparkSqlParser.KW_INT:
            case SparkSqlParser.KW_INTEGER:
            case SparkSqlParser.KW_INTO:
            case SparkSqlParser.KW_IS:
            case SparkSqlParser.KW_ITEMS:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_KEYS:
            case SparkSqlParser.KW_LAST:
            case SparkSqlParser.KW_LATERAL:
            case SparkSqlParser.KW_LAZY:
            case SparkSqlParser.KW_LEADING:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_LIFECYCLE:
            case SparkSqlParser.KW_LIKE:
            case SparkSqlParser.KW_ILIKE:
            case SparkSqlParser.KW_LIMIT:
            case SparkSqlParser.KW_LINES:
            case SparkSqlParser.KW_LIST:
            case SparkSqlParser.KW_LOAD:
            case SparkSqlParser.KW_LOCAL:
            case SparkSqlParser.KW_LOCATION:
            case SparkSqlParser.KW_LOCK:
            case SparkSqlParser.KW_LOCKS:
            case SparkSqlParser.KW_LOGICAL:
            case SparkSqlParser.KW_LONG:
            case SparkSqlParser.KW_MACRO:
            case SparkSqlParser.KW_MATERIALIZED:
            case SparkSqlParser.KW_MAP:
            case SparkSqlParser.KW_MATCHED:
            case SparkSqlParser.KW_MERGE:
            case SparkSqlParser.KW_MICROSECOND:
            case SparkSqlParser.KW_MICROSECONDS:
            case SparkSqlParser.KW_MILLISECOND:
            case SparkSqlParser.KW_MILLISECONDS:
            case SparkSqlParser.KW_MINUTE:
            case SparkSqlParser.KW_MINUTES:
            case SparkSqlParser.KW_MONTH:
            case SparkSqlParser.KW_MONTHS:
            case SparkSqlParser.KW_MSCK:
            case SparkSqlParser.KW_NAME:
            case SparkSqlParser.KW_NAMESPACE:
            case SparkSqlParser.KW_NAMESPACES:
            case SparkSqlParser.KW_NANOSECOND:
            case SparkSqlParser.KW_NANOSECONDS:
            case SparkSqlParser.KW_NATURAL:
            case SparkSqlParser.KW_NO:
            case SparkSqlParser.KW_NOT:
            case SparkSqlParser.KW_NULL:
            case SparkSqlParser.KW_NULLS:
            case SparkSqlParser.KW_NUMERIC:
            case SparkSqlParser.KW_OF:
            case SparkSqlParser.KW_OFFSET:
            case SparkSqlParser.KW_ON:
            case SparkSqlParser.KW_ONLY:
            case SparkSqlParser.KW_OPTIMIZE:
            case SparkSqlParser.KW_OPTION:
            case SparkSqlParser.KW_OPTIONS:
            case SparkSqlParser.KW_OR:
            case SparkSqlParser.KW_ORDER:
            case SparkSqlParser.KW_OUT:
            case SparkSqlParser.KW_OUTER:
            case SparkSqlParser.KW_OUTPUTFORMAT:
            case SparkSqlParser.KW_OVER:
            case SparkSqlParser.KW_OVERLAPS:
            case SparkSqlParser.KW_OVERLAY:
            case SparkSqlParser.KW_OVERWRITE:
            case SparkSqlParser.KW_PARTITION:
            case SparkSqlParser.KW_PARTITIONED:
            case SparkSqlParser.KW_PARTITIONS:
            case SparkSqlParser.KW_PERCENTILE_CONT:
            case SparkSqlParser.KW_PERCENTILE_DISC:
            case SparkSqlParser.KW_PERCENTLIT:
            case SparkSqlParser.KW_PIVOT:
            case SparkSqlParser.KW_PLACING:
            case SparkSqlParser.KW_POSITION:
            case SparkSqlParser.KW_PRECEDING:
            case SparkSqlParser.KW_PRIMARY:
            case SparkSqlParser.KW_PRINCIPALS:
            case SparkSqlParser.KW_PROPERTIES:
            case SparkSqlParser.KW_PURGE:
            case SparkSqlParser.KW_QUARTER:
            case SparkSqlParser.KW_QUERY:
            case SparkSqlParser.KW_RANGE:
            case SparkSqlParser.KW_REAL:
            case SparkSqlParser.KW_RECORDREADER:
            case SparkSqlParser.KW_RECORDWRITER:
            case SparkSqlParser.KW_RECOVER:
            case SparkSqlParser.KW_REDUCE:
            case SparkSqlParser.KW_REFERENCES:
            case SparkSqlParser.KW_REFRESH:
            case SparkSqlParser.KW_RENAME:
            case SparkSqlParser.KW_REPAIR:
            case SparkSqlParser.KW_REPEATABLE:
            case SparkSqlParser.KW_REPLACE:
            case SparkSqlParser.KW_RESET:
            case SparkSqlParser.KW_RESPECT:
            case SparkSqlParser.KW_RESTRICT:
            case SparkSqlParser.KW_REWRITE:
            case SparkSqlParser.KW_REVOKE:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_RLIKE:
            case SparkSqlParser.KW_REGEXP:
            case SparkSqlParser.KW_ROLE:
            case SparkSqlParser.KW_ROLES:
            case SparkSqlParser.KW_ROLLBACK:
            case SparkSqlParser.KW_ROLLUP:
            case SparkSqlParser.KW_ROW:
            case SparkSqlParser.KW_ROWS:
            case SparkSqlParser.KW_SECOND:
            case SparkSqlParser.KW_SECONDS:
            case SparkSqlParser.KW_SCHEMA:
            case SparkSqlParser.KW_SCHEMAS:
            case SparkSqlParser.KW_SEMI:
            case SparkSqlParser.KW_SEPARATED:
            case SparkSqlParser.KW_SERDE:
            case SparkSqlParser.KW_SERDEPROPERTIES:
            case SparkSqlParser.KW_SESSION_USER:
            case SparkSqlParser.KW_SET:
            case SparkSqlParser.KW_MINUS:
            case SparkSqlParser.KW_SETS:
            case SparkSqlParser.KW_SHORT:
            case SparkSqlParser.KW_SHOW:
            case SparkSqlParser.KW_SINGLE:
            case SparkSqlParser.KW_SKEWED:
            case SparkSqlParser.KW_SMALLINT:
            case SparkSqlParser.KW_SOME:
            case SparkSqlParser.KW_SORT:
            case SparkSqlParser.KW_SORTED:
            case SparkSqlParser.KW_SOURCE:
            case SparkSqlParser.KW_START:
            case SparkSqlParser.KW_STATISTICS:
            case SparkSqlParser.KW_STORED:
            case SparkSqlParser.KW_STRATIFY:
            case SparkSqlParser.KW_STRING:
            case SparkSqlParser.KW_STRUCT:
            case SparkSqlParser.KW_SUBSTR:
            case SparkSqlParser.KW_SUBSTRING:
            case SparkSqlParser.KW_SYNC:
            case SparkSqlParser.KW_SYSTEM:
            case SparkSqlParser.KW_SYSTEM_TIME:
            case SparkSqlParser.KW_SYSTEM_VERSION:
            case SparkSqlParser.KW_TABLES:
            case SparkSqlParser.KW_TABLESAMPLE:
            case SparkSqlParser.KW_TARGET:
            case SparkSqlParser.KW_TBLPROPERTIES:
            case SparkSqlParser.KW_TEMPORARY:
            case SparkSqlParser.KW_TERMINATED:
            case SparkSqlParser.KW_THEN:
            case SparkSqlParser.KW_TIME:
            case SparkSqlParser.KW_TIMEDIFF:
            case SparkSqlParser.KW_TIMESTAMP:
            case SparkSqlParser.KW_TIMESTAMP_LTZ:
            case SparkSqlParser.KW_TIMESTAMP_NTZ:
            case SparkSqlParser.KW_TIMESTAMPADD:
            case SparkSqlParser.KW_TIMESTAMPDIFF:
            case SparkSqlParser.KW_TINYINT:
            case SparkSqlParser.KW_TO:
            case SparkSqlParser.KW_TOUCH:
            case SparkSqlParser.KW_TRAILING:
            case SparkSqlParser.KW_TRANSACTION:
            case SparkSqlParser.KW_TRANSACTIONS:
            case SparkSqlParser.KW_TRANSFORM:
            case SparkSqlParser.KW_TRIM:
            case SparkSqlParser.KW_TRUE:
            case SparkSqlParser.KW_TRUNCATE:
            case SparkSqlParser.KW_TRY_CAST:
            case SparkSqlParser.KW_TYPE:
            case SparkSqlParser.KW_UNARCHIVE:
            case SparkSqlParser.KW_UNBOUNDED:
            case SparkSqlParser.KW_UNCACHE:
            case SparkSqlParser.KW_UNION:
            case SparkSqlParser.KW_UNIQUE:
            case SparkSqlParser.KW_UNKNOWN:
            case SparkSqlParser.KW_UNLOCK:
            case SparkSqlParser.KW_UNPIVOT:
            case SparkSqlParser.KW_UNSET:
            case SparkSqlParser.KW_UPDATE:
            case SparkSqlParser.KW_USE:
            case SparkSqlParser.KW_USER:
            case SparkSqlParser.KW_USING:
            case SparkSqlParser.KW_VALUES:
            case SparkSqlParser.KW_VARCHAR:
            case SparkSqlParser.KW_VAR:
            case SparkSqlParser.KW_VARIABLE:
            case SparkSqlParser.KW_VERSION:
            case SparkSqlParser.KW_VIEW:
            case SparkSqlParser.KW_VIEWS:
            case SparkSqlParser.KW_VOID:
            case SparkSqlParser.KW_WEEK:
            case SparkSqlParser.KW_WEEKS:
            case SparkSqlParser.KW_WHEN:
            case SparkSqlParser.KW_WHERE:
            case SparkSqlParser.KW_WINDOW:
            case SparkSqlParser.KW_WITH:
            case SparkSqlParser.KW_WITHIN:
            case SparkSqlParser.KW_YEAR:
            case SparkSqlParser.KW_YEARS:
            case SparkSqlParser.KW_ZONE:
            case SparkSqlParser.KW_ZORDER:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
            case SparkSqlParser.IDENTIFIER:
            case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2490;
                localContext._identifier = this.identifier();
                localContext._identifiers.push(localContext._identifier);
                }
                break;
            case SparkSqlParser.LEFT_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2491;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2492;
                localContext._identifier = this.identifier();
                localContext._identifiers.push(localContext._identifier);
                this.state = 2497;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2493;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2494;
                    localContext._identifier = this.identifier();
                    localContext._identifiers.push(localContext._identifier);
                    }
                    }
                    this.state = 2499;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2500;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pivotValue(): PivotValueContext {
        let localContext = new PivotValueContext(this.context, this.state);
        this.enterRule(localContext, 166, SparkSqlParser.RULE_pivotValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2504;
            this.expression();
            this.state = 2509;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & 3073) !== 0)) {
                {
                this.state = 2506;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 308, this.context) ) {
                case 1:
                    {
                    this.state = 2505;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2508;
                this.identifier();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotClause(): UnpivotClauseContext {
        let localContext = new UnpivotClauseContext(this.context, this.state);
        this.enterRule(localContext, 168, SparkSqlParser.RULE_unpivotClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2511;
            this.match(SparkSqlParser.KW_UNPIVOT);
            this.state = 2513;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 104 || _la === 141) {
                {
                this.state = 2512;
                localContext._nullOperator = this.unpivotNullClause();
                }
            }

            this.state = 2515;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2516;
            localContext._operator = this.unpivotOperator();
            this.state = 2517;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2522;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 312, this.context) ) {
            case 1:
                {
                this.state = 2519;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 311, this.context) ) {
                case 1:
                    {
                    this.state = 2518;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2521;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotNullClause(): UnpivotNullClauseContext {
        let localContext = new UnpivotNullClauseContext(this.context, this.state);
        this.enterRule(localContext, 170, SparkSqlParser.RULE_unpivotNullClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2524;
            _la = this.tokenStream.LA(1);
            if(!(_la === 104 || _la === 141)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2525;
            this.match(SparkSqlParser.KW_NULLS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotOperator(): UnpivotOperatorContext {
        let localContext = new UnpivotOperatorContext(this.context, this.state);
        this.enterRule(localContext, 172, SparkSqlParser.RULE_unpivotOperator);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2529;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ADD:
            case SparkSqlParser.KW_AFTER:
            case SparkSqlParser.KW_ALL:
            case SparkSqlParser.KW_ALTER:
            case SparkSqlParser.KW_ALWAYS:
            case SparkSqlParser.KW_ANALYZE:
            case SparkSqlParser.KW_AND:
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_ANY:
            case SparkSqlParser.KW_ANY_VALUE:
            case SparkSqlParser.KW_ARCHIVE:
            case SparkSqlParser.KW_ARRAY:
            case SparkSqlParser.KW_AS:
            case SparkSqlParser.KW_ASC:
            case SparkSqlParser.KW_AT:
            case SparkSqlParser.KW_AUTHORIZATION:
            case SparkSqlParser.KW_BETWEEN:
            case SparkSqlParser.KW_BIGINT:
            case SparkSqlParser.KW_BINARY:
            case SparkSqlParser.KW_BOOLEAN:
            case SparkSqlParser.KW_BOTH:
            case SparkSqlParser.KW_BUCKET:
            case SparkSqlParser.KW_BUCKETS:
            case SparkSqlParser.KW_BY:
            case SparkSqlParser.KW_BYTE:
            case SparkSqlParser.KW_CACHE:
            case SparkSqlParser.KW_CASCADE:
            case SparkSqlParser.KW_CASE:
            case SparkSqlParser.KW_CAST:
            case SparkSqlParser.KW_CATALOG:
            case SparkSqlParser.KW_CATALOGS:
            case SparkSqlParser.KW_CHANGE:
            case SparkSqlParser.KW_CHAR:
            case SparkSqlParser.KW_CHARACTER:
            case SparkSqlParser.KW_CHECK:
            case SparkSqlParser.KW_CLEAR:
            case SparkSqlParser.KW_CLUSTER:
            case SparkSqlParser.KW_CLUSTERED:
            case SparkSqlParser.KW_CODEGEN:
            case SparkSqlParser.KW_COLLATE:
            case SparkSqlParser.KW_COLLECTION:
            case SparkSqlParser.KW_COLUMN:
            case SparkSqlParser.KW_COLUMNS:
            case SparkSqlParser.KW_COMMENT:
            case SparkSqlParser.KW_COMMIT:
            case SparkSqlParser.KW_COMPACT:
            case SparkSqlParser.KW_COMPACTIONS:
            case SparkSqlParser.KW_COMPUTE:
            case SparkSqlParser.KW_CONCATENATE:
            case SparkSqlParser.KW_CONSTRAINT:
            case SparkSqlParser.KW_COST:
            case SparkSqlParser.KW_CREATE:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_CUBE:
            case SparkSqlParser.KW_CURRENT:
            case SparkSqlParser.KW_CURRENT_DATE:
            case SparkSqlParser.KW_CURRENT_TIME:
            case SparkSqlParser.KW_CURRENT_TIMESTAMP:
            case SparkSqlParser.KW_CURRENT_USER:
            case SparkSqlParser.KW_DAY:
            case SparkSqlParser.KW_DAYS:
            case SparkSqlParser.KW_DAYOFYEAR:
            case SparkSqlParser.KW_DATA:
            case SparkSqlParser.KW_DATE:
            case SparkSqlParser.KW_DATABASE:
            case SparkSqlParser.KW_DATABASES:
            case SparkSqlParser.KW_DATEADD:
            case SparkSqlParser.KW_DATE_ADD:
            case SparkSqlParser.KW_DATEDIFF:
            case SparkSqlParser.KW_DATE_DIFF:
            case SparkSqlParser.KW_DBPROPERTIES:
            case SparkSqlParser.KW_DEC:
            case SparkSqlParser.KW_DECIMAL:
            case SparkSqlParser.KW_DECLARE:
            case SparkSqlParser.KW_DEFAULT:
            case SparkSqlParser.KW_DEFINED:
            case SparkSqlParser.KW_DELETE:
            case SparkSqlParser.KW_DELIMITED:
            case SparkSqlParser.KW_DESC:
            case SparkSqlParser.KW_DESCRIBE:
            case SparkSqlParser.KW_DFS:
            case SparkSqlParser.KW_DIRECTORIES:
            case SparkSqlParser.KW_DIRECTORY:
            case SparkSqlParser.KW_DISABLE:
            case SparkSqlParser.KW_DISTINCT:
            case SparkSqlParser.KW_DISTRIBUTE:
            case SparkSqlParser.KW_DIV:
            case SparkSqlParser.KW_DOUBLE:
            case SparkSqlParser.KW_DROP:
            case SparkSqlParser.KW_ELSE:
            case SparkSqlParser.KW_ENABLE:
            case SparkSqlParser.KW_END:
            case SparkSqlParser.KW_ESCAPE:
            case SparkSqlParser.KW_ESCAPED:
            case SparkSqlParser.KW_EXCEPT:
            case SparkSqlParser.KW_EXCHANGE:
            case SparkSqlParser.KW_EXCLUDE:
            case SparkSqlParser.KW_EXISTS:
            case SparkSqlParser.KW_EXPLAIN:
            case SparkSqlParser.KW_EXPORT:
            case SparkSqlParser.KW_EXTENDED:
            case SparkSqlParser.KW_EXTERNAL:
            case SparkSqlParser.KW_EXTRACT:
            case SparkSqlParser.KW_FALSE:
            case SparkSqlParser.KW_FETCH:
            case SparkSqlParser.KW_FIELDS:
            case SparkSqlParser.KW_FILTER:
            case SparkSqlParser.KW_FILEFORMAT:
            case SparkSqlParser.KW_FIRST:
            case SparkSqlParser.KW_FLOAT:
            case SparkSqlParser.KW_FOLLOWING:
            case SparkSqlParser.KW_FOR:
            case SparkSqlParser.KW_FOREIGN:
            case SparkSqlParser.KW_FORMAT:
            case SparkSqlParser.KW_FORMATTED:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_FUNCTION:
            case SparkSqlParser.KW_FUNCTIONS:
            case SparkSqlParser.KW_GENERATED:
            case SparkSqlParser.KW_GLOBAL:
            case SparkSqlParser.KW_GRANT:
            case SparkSqlParser.KW_GROUP:
            case SparkSqlParser.KW_GROUPING:
            case SparkSqlParser.KW_HAVING:
            case SparkSqlParser.KW_BINARY_HEX:
            case SparkSqlParser.KW_HOUR:
            case SparkSqlParser.KW_HOURS:
            case SparkSqlParser.KW_IDENTIFIER:
            case SparkSqlParser.KW_IF:
            case SparkSqlParser.KW_IGNORE:
            case SparkSqlParser.KW_IMPORT:
            case SparkSqlParser.KW_IN:
            case SparkSqlParser.KW_INCLUDE:
            case SparkSqlParser.KW_INDEX:
            case SparkSqlParser.KW_INDEXES:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_INPATH:
            case SparkSqlParser.KW_INPUTFORMAT:
            case SparkSqlParser.KW_INSERT:
            case SparkSqlParser.KW_INTERSECT:
            case SparkSqlParser.KW_INTERVAL:
            case SparkSqlParser.KW_INT:
            case SparkSqlParser.KW_INTEGER:
            case SparkSqlParser.KW_INTO:
            case SparkSqlParser.KW_IS:
            case SparkSqlParser.KW_ITEMS:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_KEYS:
            case SparkSqlParser.KW_LAST:
            case SparkSqlParser.KW_LATERAL:
            case SparkSqlParser.KW_LAZY:
            case SparkSqlParser.KW_LEADING:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_LIFECYCLE:
            case SparkSqlParser.KW_LIKE:
            case SparkSqlParser.KW_ILIKE:
            case SparkSqlParser.KW_LIMIT:
            case SparkSqlParser.KW_LINES:
            case SparkSqlParser.KW_LIST:
            case SparkSqlParser.KW_LOAD:
            case SparkSqlParser.KW_LOCAL:
            case SparkSqlParser.KW_LOCATION:
            case SparkSqlParser.KW_LOCK:
            case SparkSqlParser.KW_LOCKS:
            case SparkSqlParser.KW_LOGICAL:
            case SparkSqlParser.KW_LONG:
            case SparkSqlParser.KW_MACRO:
            case SparkSqlParser.KW_MATERIALIZED:
            case SparkSqlParser.KW_MAP:
            case SparkSqlParser.KW_MATCHED:
            case SparkSqlParser.KW_MERGE:
            case SparkSqlParser.KW_MICROSECOND:
            case SparkSqlParser.KW_MICROSECONDS:
            case SparkSqlParser.KW_MILLISECOND:
            case SparkSqlParser.KW_MILLISECONDS:
            case SparkSqlParser.KW_MINUTE:
            case SparkSqlParser.KW_MINUTES:
            case SparkSqlParser.KW_MONTH:
            case SparkSqlParser.KW_MONTHS:
            case SparkSqlParser.KW_MSCK:
            case SparkSqlParser.KW_NAME:
            case SparkSqlParser.KW_NAMESPACE:
            case SparkSqlParser.KW_NAMESPACES:
            case SparkSqlParser.KW_NANOSECOND:
            case SparkSqlParser.KW_NANOSECONDS:
            case SparkSqlParser.KW_NATURAL:
            case SparkSqlParser.KW_NO:
            case SparkSqlParser.KW_NOT:
            case SparkSqlParser.KW_NULL:
            case SparkSqlParser.KW_NULLS:
            case SparkSqlParser.KW_NUMERIC:
            case SparkSqlParser.KW_OF:
            case SparkSqlParser.KW_OFFSET:
            case SparkSqlParser.KW_ON:
            case SparkSqlParser.KW_ONLY:
            case SparkSqlParser.KW_OPTIMIZE:
            case SparkSqlParser.KW_OPTION:
            case SparkSqlParser.KW_OPTIONS:
            case SparkSqlParser.KW_OR:
            case SparkSqlParser.KW_ORDER:
            case SparkSqlParser.KW_OUT:
            case SparkSqlParser.KW_OUTER:
            case SparkSqlParser.KW_OUTPUTFORMAT:
            case SparkSqlParser.KW_OVER:
            case SparkSqlParser.KW_OVERLAPS:
            case SparkSqlParser.KW_OVERLAY:
            case SparkSqlParser.KW_OVERWRITE:
            case SparkSqlParser.KW_PARTITION:
            case SparkSqlParser.KW_PARTITIONED:
            case SparkSqlParser.KW_PARTITIONS:
            case SparkSqlParser.KW_PERCENTILE_CONT:
            case SparkSqlParser.KW_PERCENTILE_DISC:
            case SparkSqlParser.KW_PERCENTLIT:
            case SparkSqlParser.KW_PIVOT:
            case SparkSqlParser.KW_PLACING:
            case SparkSqlParser.KW_POSITION:
            case SparkSqlParser.KW_PRECEDING:
            case SparkSqlParser.KW_PRIMARY:
            case SparkSqlParser.KW_PRINCIPALS:
            case SparkSqlParser.KW_PROPERTIES:
            case SparkSqlParser.KW_PURGE:
            case SparkSqlParser.KW_QUARTER:
            case SparkSqlParser.KW_QUERY:
            case SparkSqlParser.KW_RANGE:
            case SparkSqlParser.KW_REAL:
            case SparkSqlParser.KW_RECORDREADER:
            case SparkSqlParser.KW_RECORDWRITER:
            case SparkSqlParser.KW_RECOVER:
            case SparkSqlParser.KW_REDUCE:
            case SparkSqlParser.KW_REFERENCES:
            case SparkSqlParser.KW_REFRESH:
            case SparkSqlParser.KW_RENAME:
            case SparkSqlParser.KW_REPAIR:
            case SparkSqlParser.KW_REPEATABLE:
            case SparkSqlParser.KW_REPLACE:
            case SparkSqlParser.KW_RESET:
            case SparkSqlParser.KW_RESPECT:
            case SparkSqlParser.KW_RESTRICT:
            case SparkSqlParser.KW_REWRITE:
            case SparkSqlParser.KW_REVOKE:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_RLIKE:
            case SparkSqlParser.KW_REGEXP:
            case SparkSqlParser.KW_ROLE:
            case SparkSqlParser.KW_ROLES:
            case SparkSqlParser.KW_ROLLBACK:
            case SparkSqlParser.KW_ROLLUP:
            case SparkSqlParser.KW_ROW:
            case SparkSqlParser.KW_ROWS:
            case SparkSqlParser.KW_SECOND:
            case SparkSqlParser.KW_SECONDS:
            case SparkSqlParser.KW_SCHEMA:
            case SparkSqlParser.KW_SCHEMAS:
            case SparkSqlParser.KW_SEMI:
            case SparkSqlParser.KW_SEPARATED:
            case SparkSqlParser.KW_SERDE:
            case SparkSqlParser.KW_SERDEPROPERTIES:
            case SparkSqlParser.KW_SESSION_USER:
            case SparkSqlParser.KW_SET:
            case SparkSqlParser.KW_MINUS:
            case SparkSqlParser.KW_SETS:
            case SparkSqlParser.KW_SHORT:
            case SparkSqlParser.KW_SHOW:
            case SparkSqlParser.KW_SINGLE:
            case SparkSqlParser.KW_SKEWED:
            case SparkSqlParser.KW_SMALLINT:
            case SparkSqlParser.KW_SOME:
            case SparkSqlParser.KW_SORT:
            case SparkSqlParser.KW_SORTED:
            case SparkSqlParser.KW_SOURCE:
            case SparkSqlParser.KW_START:
            case SparkSqlParser.KW_STATISTICS:
            case SparkSqlParser.KW_STORED:
            case SparkSqlParser.KW_STRATIFY:
            case SparkSqlParser.KW_STRING:
            case SparkSqlParser.KW_STRUCT:
            case SparkSqlParser.KW_SUBSTR:
            case SparkSqlParser.KW_SUBSTRING:
            case SparkSqlParser.KW_SYNC:
            case SparkSqlParser.KW_SYSTEM:
            case SparkSqlParser.KW_SYSTEM_TIME:
            case SparkSqlParser.KW_SYSTEM_VERSION:
            case SparkSqlParser.KW_TABLES:
            case SparkSqlParser.KW_TABLESAMPLE:
            case SparkSqlParser.KW_TARGET:
            case SparkSqlParser.KW_TBLPROPERTIES:
            case SparkSqlParser.KW_TEMPORARY:
            case SparkSqlParser.KW_TERMINATED:
            case SparkSqlParser.KW_THEN:
            case SparkSqlParser.KW_TIME:
            case SparkSqlParser.KW_TIMEDIFF:
            case SparkSqlParser.KW_TIMESTAMP:
            case SparkSqlParser.KW_TIMESTAMP_LTZ:
            case SparkSqlParser.KW_TIMESTAMP_NTZ:
            case SparkSqlParser.KW_TIMESTAMPADD:
            case SparkSqlParser.KW_TIMESTAMPDIFF:
            case SparkSqlParser.KW_TINYINT:
            case SparkSqlParser.KW_TO:
            case SparkSqlParser.KW_TOUCH:
            case SparkSqlParser.KW_TRAILING:
            case SparkSqlParser.KW_TRANSACTION:
            case SparkSqlParser.KW_TRANSACTIONS:
            case SparkSqlParser.KW_TRANSFORM:
            case SparkSqlParser.KW_TRIM:
            case SparkSqlParser.KW_TRUE:
            case SparkSqlParser.KW_TRUNCATE:
            case SparkSqlParser.KW_TRY_CAST:
            case SparkSqlParser.KW_TYPE:
            case SparkSqlParser.KW_UNARCHIVE:
            case SparkSqlParser.KW_UNBOUNDED:
            case SparkSqlParser.KW_UNCACHE:
            case SparkSqlParser.KW_UNION:
            case SparkSqlParser.KW_UNIQUE:
            case SparkSqlParser.KW_UNKNOWN:
            case SparkSqlParser.KW_UNLOCK:
            case SparkSqlParser.KW_UNPIVOT:
            case SparkSqlParser.KW_UNSET:
            case SparkSqlParser.KW_UPDATE:
            case SparkSqlParser.KW_USE:
            case SparkSqlParser.KW_USER:
            case SparkSqlParser.KW_USING:
            case SparkSqlParser.KW_VALUES:
            case SparkSqlParser.KW_VARCHAR:
            case SparkSqlParser.KW_VAR:
            case SparkSqlParser.KW_VARIABLE:
            case SparkSqlParser.KW_VERSION:
            case SparkSqlParser.KW_VIEW:
            case SparkSqlParser.KW_VIEWS:
            case SparkSqlParser.KW_VOID:
            case SparkSqlParser.KW_WEEK:
            case SparkSqlParser.KW_WEEKS:
            case SparkSqlParser.KW_WHEN:
            case SparkSqlParser.KW_WHERE:
            case SparkSqlParser.KW_WINDOW:
            case SparkSqlParser.KW_WITH:
            case SparkSqlParser.KW_WITHIN:
            case SparkSqlParser.KW_YEAR:
            case SparkSqlParser.KW_YEARS:
            case SparkSqlParser.KW_ZONE:
            case SparkSqlParser.KW_ZORDER:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
            case SparkSqlParser.IDENTIFIER:
            case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                {
                this.state = 2527;
                this.unpivotSingleValueColumnClause();
                }
                break;
            case SparkSqlParser.LEFT_PAREN:
                {
                this.state = 2528;
                this.unpivotMultiValueColumnClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotSingleValueColumnClause(): UnpivotSingleValueColumnClauseContext {
        let localContext = new UnpivotSingleValueColumnClauseContext(this.context, this.state);
        this.enterRule(localContext, 174, SparkSqlParser.RULE_unpivotSingleValueColumnClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2531;
            this.unpivotValueColumn();
            this.state = 2532;
            this.match(SparkSqlParser.KW_FOR);
            this.state = 2533;
            this.unpivotNameColumn();
            this.state = 2534;
            this.match(SparkSqlParser.KW_IN);
            this.state = 2535;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2536;
            localContext._unpivotColumnAndAlias = this.unpivotColumnAndAlias();
            localContext._unpivotColumns.push(localContext._unpivotColumnAndAlias);
            this.state = 2541;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2537;
                this.match(SparkSqlParser.COMMA);
                this.state = 2538;
                localContext._unpivotColumnAndAlias = this.unpivotColumnAndAlias();
                localContext._unpivotColumns.push(localContext._unpivotColumnAndAlias);
                }
                }
                this.state = 2543;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2544;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotMultiValueColumnClause(): UnpivotMultiValueColumnClauseContext {
        let localContext = new UnpivotMultiValueColumnClauseContext(this.context, this.state);
        this.enterRule(localContext, 176, SparkSqlParser.RULE_unpivotMultiValueColumnClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2546;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2547;
            localContext._unpivotValueColumn = this.unpivotValueColumn();
            localContext._unpivotValueColumns.push(localContext._unpivotValueColumn);
            this.state = 2552;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2548;
                this.match(SparkSqlParser.COMMA);
                this.state = 2549;
                localContext._unpivotValueColumn = this.unpivotValueColumn();
                localContext._unpivotValueColumns.push(localContext._unpivotValueColumn);
                }
                }
                this.state = 2554;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2555;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2556;
            this.match(SparkSqlParser.KW_FOR);
            this.state = 2557;
            this.unpivotNameColumn();
            this.state = 2558;
            this.match(SparkSqlParser.KW_IN);
            this.state = 2559;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2560;
            localContext._unpivotColumnSet = this.unpivotColumnSet();
            localContext._unpivotColumnSets.push(localContext._unpivotColumnSet);
            this.state = 2565;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2561;
                this.match(SparkSqlParser.COMMA);
                this.state = 2562;
                localContext._unpivotColumnSet = this.unpivotColumnSet();
                localContext._unpivotColumnSets.push(localContext._unpivotColumnSet);
                }
                }
                this.state = 2567;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2568;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotColumnSet(): UnpivotColumnSetContext {
        let localContext = new UnpivotColumnSetContext(this.context, this.state);
        this.enterRule(localContext, 178, SparkSqlParser.RULE_unpivotColumnSet);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2570;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2571;
            localContext._unpivotColumn = this.unpivotColumn();
            localContext._unpivotColumns.push(localContext._unpivotColumn);
            this.state = 2576;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2572;
                this.match(SparkSqlParser.COMMA);
                this.state = 2573;
                localContext._unpivotColumn = this.unpivotColumn();
                localContext._unpivotColumns.push(localContext._unpivotColumn);
                }
                }
                this.state = 2578;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2579;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2581;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & 3073) !== 0)) {
                {
                this.state = 2580;
                this.unpivotAlias();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotValueColumn(): UnpivotValueColumnContext {
        let localContext = new UnpivotValueColumnContext(this.context, this.state);
        this.enterRule(localContext, 180, SparkSqlParser.RULE_unpivotValueColumn);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2583;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotNameColumn(): UnpivotNameColumnContext {
        let localContext = new UnpivotNameColumnContext(this.context, this.state);
        this.enterRule(localContext, 182, SparkSqlParser.RULE_unpivotNameColumn);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2585;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotColumnAndAlias(): UnpivotColumnAndAliasContext {
        let localContext = new UnpivotColumnAndAliasContext(this.context, this.state);
        this.enterRule(localContext, 184, SparkSqlParser.RULE_unpivotColumnAndAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2587;
            this.unpivotColumn();
            this.state = 2589;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & 3073) !== 0)) {
                {
                this.state = 2588;
                this.unpivotAlias();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotColumn(): UnpivotColumnContext {
        let localContext = new UnpivotColumnContext(this.context, this.state);
        this.enterRule(localContext, 186, SparkSqlParser.RULE_unpivotColumn);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2591;
            this.multipartIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unpivotAlias(): UnpivotAliasContext {
        let localContext = new UnpivotAliasContext(this.context, this.state);
        this.enterRule(localContext, 188, SparkSqlParser.RULE_unpivotAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2594;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 320, this.context) ) {
            case 1:
                {
                this.state = 2593;
                this.match(SparkSqlParser.KW_AS);
                }
                break;
            }
            this.state = 2596;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifNotExists(): IfNotExistsContext {
        let localContext = new IfNotExistsContext(this.context, this.state);
        this.enterRule(localContext, 190, SparkSqlParser.RULE_ifNotExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2598;
            this.match(SparkSqlParser.KW_IF);
            this.state = 2599;
            this.match(SparkSqlParser.KW_NOT);
            this.state = 2600;
            this.match(SparkSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ifExists(): IfExistsContext {
        let localContext = new IfExistsContext(this.context, this.state);
        this.enterRule(localContext, 192, SparkSqlParser.RULE_ifExists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2602;
            this.match(SparkSqlParser.KW_IF);
            this.state = 2603;
            this.match(SparkSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lateralView(): LateralViewContext {
        let localContext = new LateralViewContext(this.context, this.state);
        this.enterRule(localContext, 194, SparkSqlParser.RULE_lateralView);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2605;
            this.match(SparkSqlParser.KW_LATERAL);
            this.state = 2606;
            this.match(SparkSqlParser.KW_VIEW);
            this.state = 2608;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 321, this.context) ) {
            case 1:
                {
                this.state = 2607;
                this.match(SparkSqlParser.KW_OUTER);
                }
                break;
            }
            this.state = 2610;
            this.viewName();
            this.state = 2611;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 1073678415) !== 0)) {
                {
                this.state = 2612;
                this.expression();
                this.state = 2617;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2613;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2614;
                    this.expression();
                    }
                    }
                    this.state = 2619;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2622;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2623;
            this.tableAlias();
            this.state = 2635;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 326, this.context) ) {
            case 1:
                {
                this.state = 2625;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 324, this.context) ) {
                case 1:
                    {
                    this.state = 2624;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2627;
                localContext._identifier = this.identifier();
                localContext._colName.push(localContext._identifier);
                this.state = 2632;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 325, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2628;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2629;
                        localContext._identifier = this.identifier();
                        localContext._colName.push(localContext._identifier);
                        }
                        }
                    }
                    this.state = 2634;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 325, this.context);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setQuantifier(): SetQuantifierContext {
        let localContext = new SetQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 196, SparkSqlParser.RULE_setQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2637;
            _la = this.tokenStream.LA(1);
            if(!(_la === 10 || _la === 92)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation(): RelationContext {
        let localContext = new RelationContext(this.context, this.state);
        this.enterRule(localContext, 198, SparkSqlParser.RULE_relation);
        try {
            let alternative: number;
            this.state = 2650;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 329, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2639;
                this.tableName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2641;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 327, this.context) ) {
                case 1:
                    {
                    this.state = 2640;
                    this.match(SparkSqlParser.KW_LATERAL);
                    }
                    break;
                }
                this.state = 2643;
                this.relationPrimary();
                this.state = 2647;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 328, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2644;
                        this.relationExtension();
                        }
                        }
                    }
                    this.state = 2649;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 328, this.context);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationExtension(): RelationExtensionContext {
        let localContext = new RelationExtensionContext(this.context, this.state);
        this.enterRule(localContext, 200, SparkSqlParser.RULE_relationExtension);
        try {
            this.state = 2655;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_NATURAL:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_SEMI:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2652;
                this.joinRelation();
                }
                break;
            case SparkSqlParser.KW_PIVOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2653;
                this.pivotClause();
                }
                break;
            case SparkSqlParser.KW_UNPIVOT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2654;
                this.unpivotClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinRelation(): JoinRelationContext {
        let localContext = new JoinRelationContext(this.context, this.state);
        this.enterRule(localContext, 202, SparkSqlParser.RULE_joinRelation);
        try {
            this.state = 2674;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_SEMI:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 2657;
                this.joinType();
                }
                this.state = 2658;
                this.match(SparkSqlParser.KW_JOIN);
                this.state = 2660;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 331, this.context) ) {
                case 1:
                    {
                    this.state = 2659;
                    this.match(SparkSqlParser.KW_LATERAL);
                    }
                    break;
                }
                this.state = 2662;
                localContext._right = this.relationPrimary();
                this.state = 2664;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 332, this.context) ) {
                case 1:
                    {
                    this.state = 2663;
                    this.joinCriteria();
                    }
                    break;
                }
                }
                break;
            case SparkSqlParser.KW_NATURAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2666;
                this.match(SparkSqlParser.KW_NATURAL);
                this.state = 2667;
                this.joinType();
                this.state = 2668;
                this.match(SparkSqlParser.KW_JOIN);
                this.state = 2670;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 333, this.context) ) {
                case 1:
                    {
                    this.state = 2669;
                    this.match(SparkSqlParser.KW_LATERAL);
                    }
                    break;
                }
                this.state = 2672;
                localContext._right = this.relationPrimary();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinType(): JoinTypeContext {
        let localContext = new JoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 204, SparkSqlParser.RULE_joinType);
        let _la: number;
        try {
            this.state = 2700;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 341, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2677;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144) {
                    {
                    this.state = 2676;
                    this.match(SparkSqlParser.KW_INNER);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2679;
                this.match(SparkSqlParser.KW_CROSS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2680;
                this.match(SparkSqlParser.KW_LEFT);
                this.state = 2682;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 211) {
                    {
                    this.state = 2681;
                    this.match(SparkSqlParser.KW_OUTER);
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2685;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 161) {
                    {
                    this.state = 2684;
                    this.match(SparkSqlParser.KW_LEFT);
                    }
                }

                this.state = 2687;
                this.match(SparkSqlParser.KW_SEMI);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2688;
                this.match(SparkSqlParser.KW_RIGHT);
                this.state = 2690;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 211) {
                    {
                    this.state = 2689;
                    this.match(SparkSqlParser.KW_OUTER);
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2692;
                this.match(SparkSqlParser.KW_FULL);
                this.state = 2694;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 211) {
                    {
                    this.state = 2693;
                    this.match(SparkSqlParser.KW_OUTER);
                    }
                }

                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2697;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 161) {
                    {
                    this.state = 2696;
                    this.match(SparkSqlParser.KW_LEFT);
                    }
                }

                this.state = 2699;
                this.match(SparkSqlParser.KW_ANTI);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCriteria(): JoinCriteriaContext {
        let localContext = new JoinCriteriaContext(this.context, this.state);
        this.enterRule(localContext, 206, SparkSqlParser.RULE_joinCriteria);
        try {
            this.state = 2706;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2702;
                this.match(SparkSqlParser.KW_ON);
                this.state = 2703;
                this.booleanExpression(0);
                }
                break;
            case SparkSqlParser.KW_USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2704;
                this.match(SparkSqlParser.KW_USING);
                this.state = 2705;
                this.identifierList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sample(): SampleContext {
        let localContext = new SampleContext(this.context, this.state);
        this.enterRule(localContext, 208, SparkSqlParser.RULE_sample);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2708;
            this.match(SparkSqlParser.KW_TABLESAMPLE);
            this.state = 2709;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2711;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 1073678415) !== 0)) {
                {
                this.state = 2710;
                this.sampleMethod();
                }
            }

            this.state = 2713;
            this.match(SparkSqlParser.RIGHT_PAREN);
            this.state = 2718;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 344, this.context) ) {
            case 1:
                {
                this.state = 2714;
                this.match(SparkSqlParser.KW_REPEATABLE);
                this.state = 2715;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2716;
                localContext._seed = this.match(SparkSqlParser.INTEGER_VALUE);
                this.state = 2717;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleMethod(): SampleMethodContext {
        let localContext = new SampleMethodContext(this.context, this.state);
        this.enterRule(localContext, 210, SparkSqlParser.RULE_sampleMethod);
        let _la: number;
        try {
            this.state = 2744;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 348, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2721;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 2720;
                    localContext._negativeSign = this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 2723;
                localContext._percentage = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 382 || _la === 384)) {
                    localContext._percentage = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2724;
                this.match(SparkSqlParser.KW_PERCENTLIT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2725;
                this.expression();
                this.state = 2726;
                this.match(SparkSqlParser.KW_ROWS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2728;
                localContext._sampleType = this.match(SparkSqlParser.KW_BUCKET);
                this.state = 2729;
                localContext._numerator = this.match(SparkSqlParser.INTEGER_VALUE);
                this.state = 2730;
                this.match(SparkSqlParser.KW_OUT);
                this.state = 2731;
                this.match(SparkSqlParser.KW_OF);
                this.state = 2732;
                localContext._denominator = this.match(SparkSqlParser.INTEGER_VALUE);
                this.state = 2741;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 203) {
                    {
                    this.state = 2733;
                    this.match(SparkSqlParser.KW_ON);
                    this.state = 2739;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 346, this.context) ) {
                    case 1:
                        {
                        this.state = 2734;
                        this.identifier();
                        }
                        break;
                    case 2:
                        {
                        this.state = 2735;
                        this.qualifiedName();
                        this.state = 2736;
                        this.match(SparkSqlParser.LEFT_PAREN);
                        this.state = 2737;
                        this.match(SparkSqlParser.RIGHT_PAREN);
                        }
                        break;
                    }
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2743;
                localContext._bytes = this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierList(): IdentifierListContext {
        let localContext = new IdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 212, SparkSqlParser.RULE_identifierList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2746;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2747;
            this.identifierSeq();
            this.state = 2748;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierSeq(): IdentifierSeqContext {
        let localContext = new IdentifierSeqContext(this.context, this.state);
        this.enterRule(localContext, 214, SparkSqlParser.RULE_identifierSeq);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2750;
            localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
            localContext._ident.push(localContext._errorCapturingIdentifier);
            this.state = 2755;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 349, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2751;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2752;
                    localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                    localContext._ident.push(localContext._errorCapturingIdentifier);
                    }
                    }
                }
                this.state = 2757;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 349, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderedIdentifierList(): OrderedIdentifierListContext {
        let localContext = new OrderedIdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 216, SparkSqlParser.RULE_orderedIdentifierList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2758;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2759;
            this.orderedIdentifier();
            this.state = 2764;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2760;
                this.match(SparkSqlParser.COMMA);
                this.state = 2761;
                this.orderedIdentifier();
                }
                }
                this.state = 2766;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2767;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderedIdentifier(): OrderedIdentifierContext {
        let localContext = new OrderedIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 218, SparkSqlParser.RULE_orderedIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2769;
            localContext._ident = this.errorCapturingIdentifier();
            this.state = 2771;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 21 || _la === 86) {
                {
                this.state = 2770;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 21 || _la === 86)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierCommentList(): IdentifierCommentListContext {
        let localContext = new IdentifierCommentListContext(this.context, this.state);
        this.enterRule(localContext, 220, SparkSqlParser.RULE_identifierCommentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2773;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2774;
            this.identifierComment();
            this.state = 2779;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2775;
                this.match(SparkSqlParser.COMMA);
                this.state = 2776;
                this.identifierComment();
                }
                }
                this.state = 2781;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2782;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierComment(): IdentifierCommentContext {
        let localContext = new IdentifierCommentContext(this.context, this.state);
        this.enterRule(localContext, 222, SparkSqlParser.RULE_identifierComment);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2784;
            this.columnNameCreate();
            this.state = 2786;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 2785;
                this.commentSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationPrimary(): RelationPrimaryContext {
        let localContext = new RelationPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 224, SparkSqlParser.RULE_relationPrimary);
        try {
            this.state = 2819;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 359, this.context) ) {
            case 1:
                localContext = new TableSourceContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2791;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 354, this.context) ) {
                case 1:
                    {
                    this.state = 2788;
                    this.tableName();
                    }
                    break;
                case 2:
                    {
                    this.state = 2789;
                    this.viewName();
                    }
                    break;
                case 3:
                    {
                    this.state = 2790;
                    this.identifierReference();
                    }
                    break;
                }
                this.state = 2794;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 355, this.context) ) {
                case 1:
                    {
                    this.state = 2793;
                    this.temporalClause();
                    }
                    break;
                }
                this.state = 2797;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 356, this.context) ) {
                case 1:
                    {
                    this.state = 2796;
                    this.sample();
                    }
                    break;
                }
                this.state = 2799;
                this.tableAlias();
                }
                break;
            case 2:
                localContext = new SubQueryTableSourceContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2801;
                this.atomSubQueryTableSource();
                this.state = 2803;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 357, this.context) ) {
                case 1:
                    {
                    this.state = 2802;
                    this.sample();
                    }
                    break;
                }
                this.state = 2805;
                this.tableAlias();
                }
                break;
            case 3:
                localContext = new JoinTableSourceContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2807;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2808;
                this.relation();
                this.state = 2809;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2811;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 358, this.context) ) {
                case 1:
                    {
                    this.state = 2810;
                    this.sample();
                    }
                    break;
                }
                this.state = 2813;
                this.tableAlias();
                }
                break;
            case 4:
                localContext = new InlineTableSourceContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2815;
                this.inlineTable();
                this.state = 2816;
                this.tableAlias();
                }
                break;
            case 5:
                localContext = new FunctionTableSourceContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2818;
                this.functionTable();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomSubQueryTableSource(): AtomSubQueryTableSourceContext {
        let localContext = new AtomSubQueryTableSourceContext(this.context, this.state);
        this.enterRule(localContext, 226, SparkSqlParser.RULE_atomSubQueryTableSource);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2821;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2822;
            this.query();
            this.state = 2823;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inlineTable(): InlineTableContext {
        let localContext = new InlineTableContext(this.context, this.state);
        this.enterRule(localContext, 228, SparkSqlParser.RULE_inlineTable);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2825;
            this.match(SparkSqlParser.KW_VALUES);
            this.state = 2826;
            this.expression();
            this.state = 2831;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 360, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2827;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2828;
                    this.expression();
                    }
                    }
                }
                this.state = 2833;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 360, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext {
        let localContext = new FunctionTableSubqueryArgumentContext(this.context, this.state);
        this.enterRule(localContext, 230, SparkSqlParser.RULE_functionTableSubqueryArgument);
        let _la: number;
        try {
            this.state = 2853;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 364, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2834;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 2835;
                this.tableName();
                this.state = 2837;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 217 || _la === 346) {
                    {
                    this.state = 2836;
                    this.tableArgumentPartitioning();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2839;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 2840;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2841;
                this.tableName();
                this.state = 2842;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2844;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 217 || _la === 346) {
                    {
                    this.state = 2843;
                    this.tableArgumentPartitioning();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2846;
                this.match(SparkSqlParser.KW_TABLE);
                this.state = 2847;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 2848;
                this.query();
                this.state = 2849;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 2851;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 217 || _la === 346) {
                    {
                    this.state = 2850;
                    this.tableArgumentPartitioning();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgumentPartitioning(): TableArgumentPartitioningContext {
        let localContext = new TableArgumentPartitioningContext(this.context, this.state);
        this.enterRule(localContext, 232, SparkSqlParser.RULE_tableArgumentPartitioning);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2874;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_WITH:
                {
                {
                this.state = 2855;
                this.match(SparkSqlParser.KW_WITH);
                this.state = 2856;
                this.match(SparkSqlParser.KW_SINGLE);
                this.state = 2857;
                this.match(SparkSqlParser.KW_PARTITION);
                }
                }
                break;
            case SparkSqlParser.KW_DISTRIBUTE:
            case SparkSqlParser.KW_PARTITION:
                {
                {
                this.state = 2858;
                _la = this.tokenStream.LA(1);
                if(!(_la === 93 || _la === 217)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2859;
                this.match(SparkSqlParser.KW_BY);
                this.state = 2872;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 366, this.context) ) {
                case 1:
                    {
                    {
                    {
                    this.state = 2860;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2861;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    this.state = 2866;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2862;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2863;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        }
                        }
                        this.state = 2868;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2869;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 2871;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    }
                    break;
                }
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2892;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 209 || _la === 278) {
                {
                this.state = 2876;
                _la = this.tokenStream.LA(1);
                if(!(_la === 209 || _la === 278)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2877;
                this.match(SparkSqlParser.KW_BY);
                {
                this.state = 2890;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 369, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 2878;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 2879;
                    this.sortItem();
                    this.state = 2884;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2880;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 2881;
                        this.sortItem();
                        }
                        }
                        this.state = 2886;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2887;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 2889;
                    this.sortItem();
                    }
                    break;
                }
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableNamedArgumentExpression(): FunctionTableNamedArgumentExpressionContext {
        let localContext = new FunctionTableNamedArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 234, SparkSqlParser.RULE_functionTableNamedArgumentExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2894;
            localContext._key = this.identifier();
            this.state = 2895;
            this.match(SparkSqlParser.FAT_ARROW);
            this.state = 2896;
            localContext._table = this.functionTableSubqueryArgument();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableReferenceArgument(): FunctionTableReferenceArgumentContext {
        let localContext = new FunctionTableReferenceArgumentContext(this.context, this.state);
        this.enterRule(localContext, 236, SparkSqlParser.RULE_functionTableReferenceArgument);
        try {
            this.state = 2900;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2898;
                this.functionTableSubqueryArgument();
                }
                break;
            case SparkSqlParser.KW_ADD:
            case SparkSqlParser.KW_AFTER:
            case SparkSqlParser.KW_ALL:
            case SparkSqlParser.KW_ALTER:
            case SparkSqlParser.KW_ALWAYS:
            case SparkSqlParser.KW_ANALYZE:
            case SparkSqlParser.KW_AND:
            case SparkSqlParser.KW_ANTI:
            case SparkSqlParser.KW_ANY:
            case SparkSqlParser.KW_ANY_VALUE:
            case SparkSqlParser.KW_ARCHIVE:
            case SparkSqlParser.KW_ARRAY:
            case SparkSqlParser.KW_AS:
            case SparkSqlParser.KW_ASC:
            case SparkSqlParser.KW_AT:
            case SparkSqlParser.KW_AUTHORIZATION:
            case SparkSqlParser.KW_BETWEEN:
            case SparkSqlParser.KW_BIGINT:
            case SparkSqlParser.KW_BINARY:
            case SparkSqlParser.KW_BOOLEAN:
            case SparkSqlParser.KW_BOTH:
            case SparkSqlParser.KW_BUCKET:
            case SparkSqlParser.KW_BUCKETS:
            case SparkSqlParser.KW_BY:
            case SparkSqlParser.KW_BYTE:
            case SparkSqlParser.KW_CACHE:
            case SparkSqlParser.KW_CASCADE:
            case SparkSqlParser.KW_CASE:
            case SparkSqlParser.KW_CAST:
            case SparkSqlParser.KW_CATALOG:
            case SparkSqlParser.KW_CATALOGS:
            case SparkSqlParser.KW_CHANGE:
            case SparkSqlParser.KW_CHAR:
            case SparkSqlParser.KW_CHARACTER:
            case SparkSqlParser.KW_CHECK:
            case SparkSqlParser.KW_CLEAR:
            case SparkSqlParser.KW_CLUSTER:
            case SparkSqlParser.KW_CLUSTERED:
            case SparkSqlParser.KW_CODEGEN:
            case SparkSqlParser.KW_COLLATE:
            case SparkSqlParser.KW_COLLECTION:
            case SparkSqlParser.KW_COLUMN:
            case SparkSqlParser.KW_COLUMNS:
            case SparkSqlParser.KW_COMMENT:
            case SparkSqlParser.KW_COMMIT:
            case SparkSqlParser.KW_COMPACT:
            case SparkSqlParser.KW_COMPACTIONS:
            case SparkSqlParser.KW_COMPUTE:
            case SparkSqlParser.KW_CONCATENATE:
            case SparkSqlParser.KW_CONSTRAINT:
            case SparkSqlParser.KW_COST:
            case SparkSqlParser.KW_CREATE:
            case SparkSqlParser.KW_CROSS:
            case SparkSqlParser.KW_CUBE:
            case SparkSqlParser.KW_CURRENT:
            case SparkSqlParser.KW_CURRENT_DATE:
            case SparkSqlParser.KW_CURRENT_TIME:
            case SparkSqlParser.KW_CURRENT_TIMESTAMP:
            case SparkSqlParser.KW_CURRENT_USER:
            case SparkSqlParser.KW_DAY:
            case SparkSqlParser.KW_DAYS:
            case SparkSqlParser.KW_DAYOFYEAR:
            case SparkSqlParser.KW_DATA:
            case SparkSqlParser.KW_DATE:
            case SparkSqlParser.KW_DATABASE:
            case SparkSqlParser.KW_DATABASES:
            case SparkSqlParser.KW_DATEADD:
            case SparkSqlParser.KW_DATE_ADD:
            case SparkSqlParser.KW_DATEDIFF:
            case SparkSqlParser.KW_DATE_DIFF:
            case SparkSqlParser.KW_DBPROPERTIES:
            case SparkSqlParser.KW_DEC:
            case SparkSqlParser.KW_DECIMAL:
            case SparkSqlParser.KW_DECLARE:
            case SparkSqlParser.KW_DEFAULT:
            case SparkSqlParser.KW_DEFINED:
            case SparkSqlParser.KW_DELETE:
            case SparkSqlParser.KW_DELIMITED:
            case SparkSqlParser.KW_DESC:
            case SparkSqlParser.KW_DESCRIBE:
            case SparkSqlParser.KW_DFS:
            case SparkSqlParser.KW_DIRECTORIES:
            case SparkSqlParser.KW_DIRECTORY:
            case SparkSqlParser.KW_DISABLE:
            case SparkSqlParser.KW_DISTINCT:
            case SparkSqlParser.KW_DISTRIBUTE:
            case SparkSqlParser.KW_DIV:
            case SparkSqlParser.KW_DOUBLE:
            case SparkSqlParser.KW_DROP:
            case SparkSqlParser.KW_ELSE:
            case SparkSqlParser.KW_ENABLE:
            case SparkSqlParser.KW_END:
            case SparkSqlParser.KW_ESCAPE:
            case SparkSqlParser.KW_ESCAPED:
            case SparkSqlParser.KW_EXCEPT:
            case SparkSqlParser.KW_EXCHANGE:
            case SparkSqlParser.KW_EXCLUDE:
            case SparkSqlParser.KW_EXISTS:
            case SparkSqlParser.KW_EXPLAIN:
            case SparkSqlParser.KW_EXPORT:
            case SparkSqlParser.KW_EXTENDED:
            case SparkSqlParser.KW_EXTERNAL:
            case SparkSqlParser.KW_EXTRACT:
            case SparkSqlParser.KW_FALSE:
            case SparkSqlParser.KW_FETCH:
            case SparkSqlParser.KW_FIELDS:
            case SparkSqlParser.KW_FILTER:
            case SparkSqlParser.KW_FILEFORMAT:
            case SparkSqlParser.KW_FIRST:
            case SparkSqlParser.KW_FLOAT:
            case SparkSqlParser.KW_FOLLOWING:
            case SparkSqlParser.KW_FOR:
            case SparkSqlParser.KW_FOREIGN:
            case SparkSqlParser.KW_FORMAT:
            case SparkSqlParser.KW_FORMATTED:
            case SparkSqlParser.KW_FULL:
            case SparkSqlParser.KW_FUNCTION:
            case SparkSqlParser.KW_FUNCTIONS:
            case SparkSqlParser.KW_GENERATED:
            case SparkSqlParser.KW_GLOBAL:
            case SparkSqlParser.KW_GRANT:
            case SparkSqlParser.KW_GROUP:
            case SparkSqlParser.KW_GROUPING:
            case SparkSqlParser.KW_HAVING:
            case SparkSqlParser.KW_BINARY_HEX:
            case SparkSqlParser.KW_HOUR:
            case SparkSqlParser.KW_HOURS:
            case SparkSqlParser.KW_IDENTIFIER:
            case SparkSqlParser.KW_IF:
            case SparkSqlParser.KW_IGNORE:
            case SparkSqlParser.KW_IMPORT:
            case SparkSqlParser.KW_IN:
            case SparkSqlParser.KW_INCLUDE:
            case SparkSqlParser.KW_INDEX:
            case SparkSqlParser.KW_INDEXES:
            case SparkSqlParser.KW_INNER:
            case SparkSqlParser.KW_INPATH:
            case SparkSqlParser.KW_INPUTFORMAT:
            case SparkSqlParser.KW_INSERT:
            case SparkSqlParser.KW_INTERSECT:
            case SparkSqlParser.KW_INTERVAL:
            case SparkSqlParser.KW_INT:
            case SparkSqlParser.KW_INTEGER:
            case SparkSqlParser.KW_INTO:
            case SparkSqlParser.KW_IS:
            case SparkSqlParser.KW_ITEMS:
            case SparkSqlParser.KW_JOIN:
            case SparkSqlParser.KW_KEYS:
            case SparkSqlParser.KW_LAST:
            case SparkSqlParser.KW_LATERAL:
            case SparkSqlParser.KW_LAZY:
            case SparkSqlParser.KW_LEADING:
            case SparkSqlParser.KW_LEFT:
            case SparkSqlParser.KW_LIFECYCLE:
            case SparkSqlParser.KW_LIKE:
            case SparkSqlParser.KW_ILIKE:
            case SparkSqlParser.KW_LIMIT:
            case SparkSqlParser.KW_LINES:
            case SparkSqlParser.KW_LIST:
            case SparkSqlParser.KW_LOAD:
            case SparkSqlParser.KW_LOCAL:
            case SparkSqlParser.KW_LOCATION:
            case SparkSqlParser.KW_LOCK:
            case SparkSqlParser.KW_LOCKS:
            case SparkSqlParser.KW_LOGICAL:
            case SparkSqlParser.KW_LONG:
            case SparkSqlParser.KW_MACRO:
            case SparkSqlParser.KW_MATERIALIZED:
            case SparkSqlParser.KW_MAP:
            case SparkSqlParser.KW_MATCHED:
            case SparkSqlParser.KW_MERGE:
            case SparkSqlParser.KW_MICROSECOND:
            case SparkSqlParser.KW_MICROSECONDS:
            case SparkSqlParser.KW_MILLISECOND:
            case SparkSqlParser.KW_MILLISECONDS:
            case SparkSqlParser.KW_MINUTE:
            case SparkSqlParser.KW_MINUTES:
            case SparkSqlParser.KW_MONTH:
            case SparkSqlParser.KW_MONTHS:
            case SparkSqlParser.KW_MSCK:
            case SparkSqlParser.KW_NAME:
            case SparkSqlParser.KW_NAMESPACE:
            case SparkSqlParser.KW_NAMESPACES:
            case SparkSqlParser.KW_NANOSECOND:
            case SparkSqlParser.KW_NANOSECONDS:
            case SparkSqlParser.KW_NATURAL:
            case SparkSqlParser.KW_NO:
            case SparkSqlParser.KW_NOT:
            case SparkSqlParser.KW_NULL:
            case SparkSqlParser.KW_NULLS:
            case SparkSqlParser.KW_NUMERIC:
            case SparkSqlParser.KW_OF:
            case SparkSqlParser.KW_OFFSET:
            case SparkSqlParser.KW_ON:
            case SparkSqlParser.KW_ONLY:
            case SparkSqlParser.KW_OPTIMIZE:
            case SparkSqlParser.KW_OPTION:
            case SparkSqlParser.KW_OPTIONS:
            case SparkSqlParser.KW_OR:
            case SparkSqlParser.KW_ORDER:
            case SparkSqlParser.KW_OUT:
            case SparkSqlParser.KW_OUTER:
            case SparkSqlParser.KW_OUTPUTFORMAT:
            case SparkSqlParser.KW_OVER:
            case SparkSqlParser.KW_OVERLAPS:
            case SparkSqlParser.KW_OVERLAY:
            case SparkSqlParser.KW_OVERWRITE:
            case SparkSqlParser.KW_PARTITION:
            case SparkSqlParser.KW_PARTITIONED:
            case SparkSqlParser.KW_PARTITIONS:
            case SparkSqlParser.KW_PERCENTILE_CONT:
            case SparkSqlParser.KW_PERCENTILE_DISC:
            case SparkSqlParser.KW_PERCENTLIT:
            case SparkSqlParser.KW_PIVOT:
            case SparkSqlParser.KW_PLACING:
            case SparkSqlParser.KW_POSITION:
            case SparkSqlParser.KW_PRECEDING:
            case SparkSqlParser.KW_PRIMARY:
            case SparkSqlParser.KW_PRINCIPALS:
            case SparkSqlParser.KW_PROPERTIES:
            case SparkSqlParser.KW_PURGE:
            case SparkSqlParser.KW_QUARTER:
            case SparkSqlParser.KW_QUERY:
            case SparkSqlParser.KW_RANGE:
            case SparkSqlParser.KW_REAL:
            case SparkSqlParser.KW_RECORDREADER:
            case SparkSqlParser.KW_RECORDWRITER:
            case SparkSqlParser.KW_RECOVER:
            case SparkSqlParser.KW_REDUCE:
            case SparkSqlParser.KW_REFERENCES:
            case SparkSqlParser.KW_REFRESH:
            case SparkSqlParser.KW_RENAME:
            case SparkSqlParser.KW_REPAIR:
            case SparkSqlParser.KW_REPEATABLE:
            case SparkSqlParser.KW_REPLACE:
            case SparkSqlParser.KW_RESET:
            case SparkSqlParser.KW_RESPECT:
            case SparkSqlParser.KW_RESTRICT:
            case SparkSqlParser.KW_REWRITE:
            case SparkSqlParser.KW_REVOKE:
            case SparkSqlParser.KW_RIGHT:
            case SparkSqlParser.KW_RLIKE:
            case SparkSqlParser.KW_REGEXP:
            case SparkSqlParser.KW_ROLE:
            case SparkSqlParser.KW_ROLES:
            case SparkSqlParser.KW_ROLLBACK:
            case SparkSqlParser.KW_ROLLUP:
            case SparkSqlParser.KW_ROW:
            case SparkSqlParser.KW_ROWS:
            case SparkSqlParser.KW_SECOND:
            case SparkSqlParser.KW_SECONDS:
            case SparkSqlParser.KW_SCHEMA:
            case SparkSqlParser.KW_SCHEMAS:
            case SparkSqlParser.KW_SEMI:
            case SparkSqlParser.KW_SEPARATED:
            case SparkSqlParser.KW_SERDE:
            case SparkSqlParser.KW_SERDEPROPERTIES:
            case SparkSqlParser.KW_SESSION_USER:
            case SparkSqlParser.KW_SET:
            case SparkSqlParser.KW_MINUS:
            case SparkSqlParser.KW_SETS:
            case SparkSqlParser.KW_SHORT:
            case SparkSqlParser.KW_SHOW:
            case SparkSqlParser.KW_SINGLE:
            case SparkSqlParser.KW_SKEWED:
            case SparkSqlParser.KW_SMALLINT:
            case SparkSqlParser.KW_SOME:
            case SparkSqlParser.KW_SORT:
            case SparkSqlParser.KW_SORTED:
            case SparkSqlParser.KW_SOURCE:
            case SparkSqlParser.KW_START:
            case SparkSqlParser.KW_STATISTICS:
            case SparkSqlParser.KW_STORED:
            case SparkSqlParser.KW_STRATIFY:
            case SparkSqlParser.KW_STRING:
            case SparkSqlParser.KW_STRUCT:
            case SparkSqlParser.KW_SUBSTR:
            case SparkSqlParser.KW_SUBSTRING:
            case SparkSqlParser.KW_SYNC:
            case SparkSqlParser.KW_SYSTEM:
            case SparkSqlParser.KW_SYSTEM_TIME:
            case SparkSqlParser.KW_SYSTEM_VERSION:
            case SparkSqlParser.KW_TABLES:
            case SparkSqlParser.KW_TABLESAMPLE:
            case SparkSqlParser.KW_TARGET:
            case SparkSqlParser.KW_TBLPROPERTIES:
            case SparkSqlParser.KW_TEMPORARY:
            case SparkSqlParser.KW_TERMINATED:
            case SparkSqlParser.KW_THEN:
            case SparkSqlParser.KW_TIME:
            case SparkSqlParser.KW_TIMEDIFF:
            case SparkSqlParser.KW_TIMESTAMP:
            case SparkSqlParser.KW_TIMESTAMP_LTZ:
            case SparkSqlParser.KW_TIMESTAMP_NTZ:
            case SparkSqlParser.KW_TIMESTAMPADD:
            case SparkSqlParser.KW_TIMESTAMPDIFF:
            case SparkSqlParser.KW_TINYINT:
            case SparkSqlParser.KW_TO:
            case SparkSqlParser.KW_TOUCH:
            case SparkSqlParser.KW_TRAILING:
            case SparkSqlParser.KW_TRANSACTION:
            case SparkSqlParser.KW_TRANSACTIONS:
            case SparkSqlParser.KW_TRANSFORM:
            case SparkSqlParser.KW_TRIM:
            case SparkSqlParser.KW_TRUE:
            case SparkSqlParser.KW_TRUNCATE:
            case SparkSqlParser.KW_TRY_CAST:
            case SparkSqlParser.KW_TYPE:
            case SparkSqlParser.KW_UNARCHIVE:
            case SparkSqlParser.KW_UNBOUNDED:
            case SparkSqlParser.KW_UNCACHE:
            case SparkSqlParser.KW_UNION:
            case SparkSqlParser.KW_UNIQUE:
            case SparkSqlParser.KW_UNKNOWN:
            case SparkSqlParser.KW_UNLOCK:
            case SparkSqlParser.KW_UNPIVOT:
            case SparkSqlParser.KW_UNSET:
            case SparkSqlParser.KW_UPDATE:
            case SparkSqlParser.KW_USE:
            case SparkSqlParser.KW_USER:
            case SparkSqlParser.KW_USING:
            case SparkSqlParser.KW_VALUES:
            case SparkSqlParser.KW_VARCHAR:
            case SparkSqlParser.KW_VAR:
            case SparkSqlParser.KW_VARIABLE:
            case SparkSqlParser.KW_VERSION:
            case SparkSqlParser.KW_VIEW:
            case SparkSqlParser.KW_VIEWS:
            case SparkSqlParser.KW_VOID:
            case SparkSqlParser.KW_WEEK:
            case SparkSqlParser.KW_WEEKS:
            case SparkSqlParser.KW_WHEN:
            case SparkSqlParser.KW_WHERE:
            case SparkSqlParser.KW_WINDOW:
            case SparkSqlParser.KW_WITH:
            case SparkSqlParser.KW_WITHIN:
            case SparkSqlParser.KW_YEAR:
            case SparkSqlParser.KW_YEARS:
            case SparkSqlParser.KW_ZONE:
            case SparkSqlParser.KW_ZORDER:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
            case SparkSqlParser.IDENTIFIER:
            case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2899;
                this.functionTableNamedArgumentExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTableArgument(): FunctionTableArgumentContext {
        let localContext = new FunctionTableArgumentContext(this.context, this.state);
        this.enterRule(localContext, 238, SparkSqlParser.RULE_functionTableArgument);
        try {
            this.state = 2904;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 372, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2902;
                this.functionTableReferenceArgument();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2903;
                this.functionArgument();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionTable(): FunctionTableContext {
        let localContext = new FunctionTableContext(this.context, this.state);
        this.enterRule(localContext, 240, SparkSqlParser.RULE_functionTable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2906;
            this.atomFunctionTable();
            this.state = 2907;
            this.tableAlias();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public atomFunctionTable(): AtomFunctionTableContext {
        let localContext = new AtomFunctionTableContext(this.context, this.state);
        this.enterRule(localContext, 242, SparkSqlParser.RULE_atomFunctionTable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2909;
            this.functionName();
            this.state = 2910;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 2919;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 1073678415) !== 0)) {
                {
                this.state = 2911;
                this.functionTableArgument();
                this.state = 2916;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2912;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 2913;
                    this.functionTableArgument();
                    }
                    }
                    this.state = 2918;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2921;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAlias(): TableAliasContext {
        let localContext = new TableAliasContext(this.context, this.state);
        this.enterRule(localContext, 244, SparkSqlParser.RULE_tableAlias);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2930;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 377, this.context) ) {
            case 1:
                {
                this.state = 2924;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 375, this.context) ) {
                case 1:
                    {
                    this.state = 2923;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 2926;
                localContext._alias = this.strictIdentifier();
                this.state = 2928;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 376, this.context) ) {
                case 1:
                    {
                    this.state = 2927;
                    this.identifierList();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowFormat(): RowFormatContext {
        let localContext = new RowFormatContext(this.context, this.state);
        this.enterRule(localContext, 246, SparkSqlParser.RULE_rowFormat);
        try {
            this.state = 2981;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 385, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2932;
                this.match(SparkSqlParser.KW_ROW);
                this.state = 2933;
                this.match(SparkSqlParser.KW_FORMAT);
                this.state = 2934;
                this.match(SparkSqlParser.KW_SERDE);
                this.state = 2935;
                localContext._name = this.stringLit();
                this.state = 2939;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
                case 1:
                    {
                    this.state = 2936;
                    this.match(SparkSqlParser.KW_WITH);
                    this.state = 2937;
                    this.match(SparkSqlParser.KW_SERDEPROPERTIES);
                    this.state = 2938;
                    localContext._props = this.propertyList();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2941;
                this.match(SparkSqlParser.KW_ROW);
                this.state = 2942;
                this.match(SparkSqlParser.KW_FORMAT);
                this.state = 2943;
                this.match(SparkSqlParser.KW_DELIMITED);
                this.state = 2953;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 380, this.context) ) {
                case 1:
                    {
                    this.state = 2944;
                    this.match(SparkSqlParser.KW_FIELDS);
                    this.state = 2945;
                    this.match(SparkSqlParser.KW_TERMINATED);
                    this.state = 2946;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 2947;
                    localContext._fieldsTerminatedBy = this.stringLit();
                    this.state = 2951;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 379, this.context) ) {
                    case 1:
                        {
                        this.state = 2948;
                        this.match(SparkSqlParser.KW_ESCAPED);
                        this.state = 2949;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 2950;
                        localContext._escapedBy = this.stringLit();
                        }
                        break;
                    }
                    }
                    break;
                }
                this.state = 2960;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 381, this.context) ) {
                case 1:
                    {
                    this.state = 2955;
                    this.match(SparkSqlParser.KW_COLLECTION);
                    this.state = 2956;
                    this.match(SparkSqlParser.KW_ITEMS);
                    this.state = 2957;
                    this.match(SparkSqlParser.KW_TERMINATED);
                    this.state = 2958;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 2959;
                    localContext._collectionItemsTerminatedBy = this.stringLit();
                    }
                    break;
                }
                this.state = 2967;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 382, this.context) ) {
                case 1:
                    {
                    this.state = 2962;
                    this.match(SparkSqlParser.KW_MAP);
                    this.state = 2963;
                    this.match(SparkSqlParser.KW_KEYS);
                    this.state = 2964;
                    this.match(SparkSqlParser.KW_TERMINATED);
                    this.state = 2965;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 2966;
                    localContext._keysTerminatedBy = this.stringLit();
                    }
                    break;
                }
                this.state = 2973;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 383, this.context) ) {
                case 1:
                    {
                    this.state = 2969;
                    this.match(SparkSqlParser.KW_LINES);
                    this.state = 2970;
                    this.match(SparkSqlParser.KW_TERMINATED);
                    this.state = 2971;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 2972;
                    localContext._linesSeparatedBy = this.stringLit();
                    }
                    break;
                }
                this.state = 2979;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 384, this.context) ) {
                case 1:
                    {
                    this.state = 2975;
                    this.match(SparkSqlParser.KW_NULL);
                    this.state = 2976;
                    this.match(SparkSqlParser.KW_DEFINED);
                    this.state = 2977;
                    this.match(SparkSqlParser.KW_AS);
                    this.state = 2978;
                    localContext._nullDefinedAs = this.stringLit();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierList(): MultipartIdentifierListContext {
        let localContext = new MultipartIdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 248, SparkSqlParser.RULE_multipartIdentifierList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2983;
            this.multipartIdentifier();
            this.state = 2988;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2984;
                this.match(SparkSqlParser.COMMA);
                this.state = 2985;
                this.multipartIdentifier();
                }
                }
                this.state = 2990;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        let localContext = new MultipartIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 250, SparkSqlParser.RULE_multipartIdentifier);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2991;
            localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
            localContext._parts.push(localContext._errorCapturingIdentifier);
            this.state = 2996;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 387, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2992;
                    this.match(SparkSqlParser.DOT);
                    this.state = 2993;
                    localContext._errorCapturingIdentifier = this.errorCapturingIdentifier();
                    localContext._parts.push(localContext._errorCapturingIdentifier);
                    }
                    }
                }
                this.state = 2998;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 387, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierPropertyList(): MultipartIdentifierPropertyListContext {
        let localContext = new MultipartIdentifierPropertyListContext(this.context, this.state);
        this.enterRule(localContext, 252, SparkSqlParser.RULE_multipartIdentifierPropertyList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2999;
            this.multipartIdentifierProperty();
            this.state = 3004;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3000;
                this.match(SparkSqlParser.COMMA);
                this.state = 3001;
                this.multipartIdentifierProperty();
                }
                }
                this.state = 3006;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multipartIdentifierProperty(): MultipartIdentifierPropertyContext {
        let localContext = new MultipartIdentifierPropertyContext(this.context, this.state);
        this.enterRule(localContext, 254, SparkSqlParser.RULE_multipartIdentifierProperty);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3007;
            this.multipartIdentifier();
            this.state = 3010;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 207) {
                {
                this.state = 3008;
                this.match(SparkSqlParser.KW_OPTIONS);
                this.state = 3009;
                localContext._options = this.propertyList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIdentifier(): TableIdentifierContext {
        let localContext = new TableIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 256, SparkSqlParser.RULE_tableIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3015;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 390, this.context) ) {
            case 1:
                {
                this.state = 3012;
                localContext._db = this.errorCapturingIdentifier();
                this.state = 3013;
                this.match(SparkSqlParser.DOT);
                }
                break;
            }
            this.state = 3017;
            localContext._table = this.errorCapturingIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewIdentifier(): ViewIdentifierContext {
        let localContext = new ViewIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 258, SparkSqlParser.RULE_viewIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3022;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 391, this.context) ) {
            case 1:
                {
                this.state = 3019;
                localContext._db = this.errorCapturingIdentifier();
                this.state = 3020;
                this.match(SparkSqlParser.DOT);
                }
                break;
            }
            this.state = 3024;
            localContext._view = this.errorCapturingIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectLiteralColumnName(): SelectLiteralColumnNameContext {
        let localContext = new SelectLiteralColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 260, SparkSqlParser.RULE_selectLiteralColumnName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3026;
            this.columnName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectExpressionColumnName(): SelectExpressionColumnNameContext {
        let localContext = new SelectExpressionColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 262, SparkSqlParser.RULE_selectExpressionColumnName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3028;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAllColumns(): TableAllColumnsContext {
        let localContext = new TableAllColumnsContext(this.context, this.state);
        this.enterRule(localContext, 264, SparkSqlParser.RULE_tableAllColumns);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3035;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & 3073) !== 0)) {
                {
                {
                this.state = 3030;
                this.qualifiedName();
                this.state = 3031;
                this.match(SparkSqlParser.DOT);
                }
                }
                this.state = 3037;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3038;
            this.match(SparkSqlParser.ASTERISK);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedExpression(): NamedExpressionContext {
        let localContext = new NamedExpressionContext(this.context, this.state);
        this.enterRule(localContext, 266, SparkSqlParser.RULE_namedExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3043;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 393, this.context) ) {
            case 1:
                {
                this.state = 3040;
                this.tableAllColumns();
                }
                break;
            case 2:
                {
                this.state = 3041;
                this.selectLiteralColumnName();
                }
                break;
            case 3:
                {
                this.state = 3042;
                this.selectExpressionColumnName();
                }
                break;
            }
            this.state = 3052;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 396, this.context) ) {
            case 1:
                {
                this.state = 3046;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 394, this.context) ) {
                case 1:
                    {
                    this.state = 3045;
                    this.match(SparkSqlParser.KW_AS);
                    }
                    break;
                }
                this.state = 3050;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_ADD:
                case SparkSqlParser.KW_AFTER:
                case SparkSqlParser.KW_ALL:
                case SparkSqlParser.KW_ALTER:
                case SparkSqlParser.KW_ALWAYS:
                case SparkSqlParser.KW_ANALYZE:
                case SparkSqlParser.KW_AND:
                case SparkSqlParser.KW_ANTI:
                case SparkSqlParser.KW_ANY:
                case SparkSqlParser.KW_ANY_VALUE:
                case SparkSqlParser.KW_ARCHIVE:
                case SparkSqlParser.KW_ARRAY:
                case SparkSqlParser.KW_AS:
                case SparkSqlParser.KW_ASC:
                case SparkSqlParser.KW_AT:
                case SparkSqlParser.KW_AUTHORIZATION:
                case SparkSqlParser.KW_BETWEEN:
                case SparkSqlParser.KW_BIGINT:
                case SparkSqlParser.KW_BINARY:
                case SparkSqlParser.KW_BOOLEAN:
                case SparkSqlParser.KW_BOTH:
                case SparkSqlParser.KW_BUCKET:
                case SparkSqlParser.KW_BUCKETS:
                case SparkSqlParser.KW_BY:
                case SparkSqlParser.KW_BYTE:
                case SparkSqlParser.KW_CACHE:
                case SparkSqlParser.KW_CASCADE:
                case SparkSqlParser.KW_CASE:
                case SparkSqlParser.KW_CAST:
                case SparkSqlParser.KW_CATALOG:
                case SparkSqlParser.KW_CATALOGS:
                case SparkSqlParser.KW_CHANGE:
                case SparkSqlParser.KW_CHAR:
                case SparkSqlParser.KW_CHARACTER:
                case SparkSqlParser.KW_CHECK:
                case SparkSqlParser.KW_CLEAR:
                case SparkSqlParser.KW_CLUSTER:
                case SparkSqlParser.KW_CLUSTERED:
                case SparkSqlParser.KW_CODEGEN:
                case SparkSqlParser.KW_COLLATE:
                case SparkSqlParser.KW_COLLECTION:
                case SparkSqlParser.KW_COLUMN:
                case SparkSqlParser.KW_COLUMNS:
                case SparkSqlParser.KW_COMMENT:
                case SparkSqlParser.KW_COMMIT:
                case SparkSqlParser.KW_COMPACT:
                case SparkSqlParser.KW_COMPACTIONS:
                case SparkSqlParser.KW_COMPUTE:
                case SparkSqlParser.KW_CONCATENATE:
                case SparkSqlParser.KW_CONSTRAINT:
                case SparkSqlParser.KW_COST:
                case SparkSqlParser.KW_CREATE:
                case SparkSqlParser.KW_CROSS:
                case SparkSqlParser.KW_CUBE:
                case SparkSqlParser.KW_CURRENT:
                case SparkSqlParser.KW_CURRENT_DATE:
                case SparkSqlParser.KW_CURRENT_TIME:
                case SparkSqlParser.KW_CURRENT_TIMESTAMP:
                case SparkSqlParser.KW_CURRENT_USER:
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYS:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_DATA:
                case SparkSqlParser.KW_DATE:
                case SparkSqlParser.KW_DATABASE:
                case SparkSqlParser.KW_DATABASES:
                case SparkSqlParser.KW_DATEADD:
                case SparkSqlParser.KW_DATE_ADD:
                case SparkSqlParser.KW_DATEDIFF:
                case SparkSqlParser.KW_DATE_DIFF:
                case SparkSqlParser.KW_DBPROPERTIES:
                case SparkSqlParser.KW_DEC:
                case SparkSqlParser.KW_DECIMAL:
                case SparkSqlParser.KW_DECLARE:
                case SparkSqlParser.KW_DEFAULT:
                case SparkSqlParser.KW_DEFINED:
                case SparkSqlParser.KW_DELETE:
                case SparkSqlParser.KW_DELIMITED:
                case SparkSqlParser.KW_DESC:
                case SparkSqlParser.KW_DESCRIBE:
                case SparkSqlParser.KW_DFS:
                case SparkSqlParser.KW_DIRECTORIES:
                case SparkSqlParser.KW_DIRECTORY:
                case SparkSqlParser.KW_DISABLE:
                case SparkSqlParser.KW_DISTINCT:
                case SparkSqlParser.KW_DISTRIBUTE:
                case SparkSqlParser.KW_DIV:
                case SparkSqlParser.KW_DOUBLE:
                case SparkSqlParser.KW_DROP:
                case SparkSqlParser.KW_ELSE:
                case SparkSqlParser.KW_ENABLE:
                case SparkSqlParser.KW_END:
                case SparkSqlParser.KW_ESCAPE:
                case SparkSqlParser.KW_ESCAPED:
                case SparkSqlParser.KW_EXCEPT:
                case SparkSqlParser.KW_EXCHANGE:
                case SparkSqlParser.KW_EXCLUDE:
                case SparkSqlParser.KW_EXISTS:
                case SparkSqlParser.KW_EXPLAIN:
                case SparkSqlParser.KW_EXPORT:
                case SparkSqlParser.KW_EXTENDED:
                case SparkSqlParser.KW_EXTERNAL:
                case SparkSqlParser.KW_EXTRACT:
                case SparkSqlParser.KW_FALSE:
                case SparkSqlParser.KW_FETCH:
                case SparkSqlParser.KW_FIELDS:
                case SparkSqlParser.KW_FILTER:
                case SparkSqlParser.KW_FILEFORMAT:
                case SparkSqlParser.KW_FIRST:
                case SparkSqlParser.KW_FLOAT:
                case SparkSqlParser.KW_FOLLOWING:
                case SparkSqlParser.KW_FOR:
                case SparkSqlParser.KW_FOREIGN:
                case SparkSqlParser.KW_FORMAT:
                case SparkSqlParser.KW_FORMATTED:
                case SparkSqlParser.KW_FULL:
                case SparkSqlParser.KW_FUNCTION:
                case SparkSqlParser.KW_FUNCTIONS:
                case SparkSqlParser.KW_GENERATED:
                case SparkSqlParser.KW_GLOBAL:
                case SparkSqlParser.KW_GRANT:
                case SparkSqlParser.KW_GROUP:
                case SparkSqlParser.KW_GROUPING:
                case SparkSqlParser.KW_HAVING:
                case SparkSqlParser.KW_BINARY_HEX:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_HOURS:
                case SparkSqlParser.KW_IDENTIFIER:
                case SparkSqlParser.KW_IF:
                case SparkSqlParser.KW_IGNORE:
                case SparkSqlParser.KW_IMPORT:
                case SparkSqlParser.KW_IN:
                case SparkSqlParser.KW_INCLUDE:
                case SparkSqlParser.KW_INDEX:
                case SparkSqlParser.KW_INDEXES:
                case SparkSqlParser.KW_INNER:
                case SparkSqlParser.KW_INPATH:
                case SparkSqlParser.KW_INPUTFORMAT:
                case SparkSqlParser.KW_INSERT:
                case SparkSqlParser.KW_INTERSECT:
                case SparkSqlParser.KW_INTERVAL:
                case SparkSqlParser.KW_INT:
                case SparkSqlParser.KW_INTEGER:
                case SparkSqlParser.KW_INTO:
                case SparkSqlParser.KW_IS:
                case SparkSqlParser.KW_ITEMS:
                case SparkSqlParser.KW_JOIN:
                case SparkSqlParser.KW_KEYS:
                case SparkSqlParser.KW_LAST:
                case SparkSqlParser.KW_LATERAL:
                case SparkSqlParser.KW_LAZY:
                case SparkSqlParser.KW_LEADING:
                case SparkSqlParser.KW_LEFT:
                case SparkSqlParser.KW_LIFECYCLE:
                case SparkSqlParser.KW_LIKE:
                case SparkSqlParser.KW_ILIKE:
                case SparkSqlParser.KW_LIMIT:
                case SparkSqlParser.KW_LINES:
                case SparkSqlParser.KW_LIST:
                case SparkSqlParser.KW_LOAD:
                case SparkSqlParser.KW_LOCAL:
                case SparkSqlParser.KW_LOCATION:
                case SparkSqlParser.KW_LOCK:
                case SparkSqlParser.KW_LOCKS:
                case SparkSqlParser.KW_LOGICAL:
                case SparkSqlParser.KW_LONG:
                case SparkSqlParser.KW_MACRO:
                case SparkSqlParser.KW_MATERIALIZED:
                case SparkSqlParser.KW_MAP:
                case SparkSqlParser.KW_MATCHED:
                case SparkSqlParser.KW_MERGE:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MICROSECONDS:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MILLISECONDS:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MINUTES:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_MONTHS:
                case SparkSqlParser.KW_MSCK:
                case SparkSqlParser.KW_NAME:
                case SparkSqlParser.KW_NAMESPACE:
                case SparkSqlParser.KW_NAMESPACES:
                case SparkSqlParser.KW_NANOSECOND:
                case SparkSqlParser.KW_NANOSECONDS:
                case SparkSqlParser.KW_NATURAL:
                case SparkSqlParser.KW_NO:
                case SparkSqlParser.KW_NOT:
                case SparkSqlParser.KW_NULL:
                case SparkSqlParser.KW_NULLS:
                case SparkSqlParser.KW_NUMERIC:
                case SparkSqlParser.KW_OF:
                case SparkSqlParser.KW_OFFSET:
                case SparkSqlParser.KW_ON:
                case SparkSqlParser.KW_ONLY:
                case SparkSqlParser.KW_OPTIMIZE:
                case SparkSqlParser.KW_OPTION:
                case SparkSqlParser.KW_OPTIONS:
                case SparkSqlParser.KW_OR:
                case SparkSqlParser.KW_ORDER:
                case SparkSqlParser.KW_OUT:
                case SparkSqlParser.KW_OUTER:
                case SparkSqlParser.KW_OUTPUTFORMAT:
                case SparkSqlParser.KW_OVER:
                case SparkSqlParser.KW_OVERLAPS:
                case SparkSqlParser.KW_OVERLAY:
                case SparkSqlParser.KW_OVERWRITE:
                case SparkSqlParser.KW_PARTITION:
                case SparkSqlParser.KW_PARTITIONED:
                case SparkSqlParser.KW_PARTITIONS:
                case SparkSqlParser.KW_PERCENTILE_CONT:
                case SparkSqlParser.KW_PERCENTILE_DISC:
                case SparkSqlParser.KW_PERCENTLIT:
                case SparkSqlParser.KW_PIVOT:
                case SparkSqlParser.KW_PLACING:
                case SparkSqlParser.KW_POSITION:
                case SparkSqlParser.KW_PRECEDING:
                case SparkSqlParser.KW_PRIMARY:
                case SparkSqlParser.KW_PRINCIPALS:
                case SparkSqlParser.KW_PROPERTIES:
                case SparkSqlParser.KW_PURGE:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_QUERY:
                case SparkSqlParser.KW_RANGE:
                case SparkSqlParser.KW_REAL:
                case SparkSqlParser.KW_RECORDREADER:
                case SparkSqlParser.KW_RECORDWRITER:
                case SparkSqlParser.KW_RECOVER:
                case SparkSqlParser.KW_REDUCE:
                case SparkSqlParser.KW_REFERENCES:
                case SparkSqlParser.KW_REFRESH:
                case SparkSqlParser.KW_RENAME:
                case SparkSqlParser.KW_REPAIR:
                case SparkSqlParser.KW_REPEATABLE:
                case SparkSqlParser.KW_REPLACE:
                case SparkSqlParser.KW_RESET:
                case SparkSqlParser.KW_RESPECT:
                case SparkSqlParser.KW_RESTRICT:
                case SparkSqlParser.KW_REWRITE:
                case SparkSqlParser.KW_REVOKE:
                case SparkSqlParser.KW_RIGHT:
                case SparkSqlParser.KW_RLIKE:
                case SparkSqlParser.KW_REGEXP:
                case SparkSqlParser.KW_ROLE:
                case SparkSqlParser.KW_ROLES:
                case SparkSqlParser.KW_ROLLBACK:
                case SparkSqlParser.KW_ROLLUP:
                case SparkSqlParser.KW_ROW:
                case SparkSqlParser.KW_ROWS:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_SECONDS:
                case SparkSqlParser.KW_SCHEMA:
                case SparkSqlParser.KW_SCHEMAS:
                case SparkSqlParser.KW_SEMI:
                case SparkSqlParser.KW_SEPARATED:
                case SparkSqlParser.KW_SERDE:
                case SparkSqlParser.KW_SERDEPROPERTIES:
                case SparkSqlParser.KW_SESSION_USER:
                case SparkSqlParser.KW_SET:
                case SparkSqlParser.KW_MINUS:
                case SparkSqlParser.KW_SETS:
                case SparkSqlParser.KW_SHORT:
                case SparkSqlParser.KW_SHOW:
                case SparkSqlParser.KW_SINGLE:
                case SparkSqlParser.KW_SKEWED:
                case SparkSqlParser.KW_SMALLINT:
                case SparkSqlParser.KW_SOME:
                case SparkSqlParser.KW_SORT:
                case SparkSqlParser.KW_SORTED:
                case SparkSqlParser.KW_SOURCE:
                case SparkSqlParser.KW_START:
                case SparkSqlParser.KW_STATISTICS:
                case SparkSqlParser.KW_STORED:
                case SparkSqlParser.KW_STRATIFY:
                case SparkSqlParser.KW_STRING:
                case SparkSqlParser.KW_STRUCT:
                case SparkSqlParser.KW_SUBSTR:
                case SparkSqlParser.KW_SUBSTRING:
                case SparkSqlParser.KW_SYNC:
                case SparkSqlParser.KW_SYSTEM:
                case SparkSqlParser.KW_SYSTEM_TIME:
                case SparkSqlParser.KW_SYSTEM_VERSION:
                case SparkSqlParser.KW_TABLES:
                case SparkSqlParser.KW_TABLESAMPLE:
                case SparkSqlParser.KW_TARGET:
                case SparkSqlParser.KW_TBLPROPERTIES:
                case SparkSqlParser.KW_TEMPORARY:
                case SparkSqlParser.KW_TERMINATED:
                case SparkSqlParser.KW_THEN:
                case SparkSqlParser.KW_TIME:
                case SparkSqlParser.KW_TIMEDIFF:
                case SparkSqlParser.KW_TIMESTAMP:
                case SparkSqlParser.KW_TIMESTAMP_LTZ:
                case SparkSqlParser.KW_TIMESTAMP_NTZ:
                case SparkSqlParser.KW_TIMESTAMPADD:
                case SparkSqlParser.KW_TIMESTAMPDIFF:
                case SparkSqlParser.KW_TINYINT:
                case SparkSqlParser.KW_TO:
                case SparkSqlParser.KW_TOUCH:
                case SparkSqlParser.KW_TRAILING:
                case SparkSqlParser.KW_TRANSACTION:
                case SparkSqlParser.KW_TRANSACTIONS:
                case SparkSqlParser.KW_TRANSFORM:
                case SparkSqlParser.KW_TRIM:
                case SparkSqlParser.KW_TRUE:
                case SparkSqlParser.KW_TRUNCATE:
                case SparkSqlParser.KW_TRY_CAST:
                case SparkSqlParser.KW_TYPE:
                case SparkSqlParser.KW_UNARCHIVE:
                case SparkSqlParser.KW_UNBOUNDED:
                case SparkSqlParser.KW_UNCACHE:
                case SparkSqlParser.KW_UNION:
                case SparkSqlParser.KW_UNIQUE:
                case SparkSqlParser.KW_UNKNOWN:
                case SparkSqlParser.KW_UNLOCK:
                case SparkSqlParser.KW_UNPIVOT:
                case SparkSqlParser.KW_UNSET:
                case SparkSqlParser.KW_UPDATE:
                case SparkSqlParser.KW_USE:
                case SparkSqlParser.KW_USER:
                case SparkSqlParser.KW_USING:
                case SparkSqlParser.KW_VALUES:
                case SparkSqlParser.KW_VARCHAR:
                case SparkSqlParser.KW_VAR:
                case SparkSqlParser.KW_VARIABLE:
                case SparkSqlParser.KW_VERSION:
                case SparkSqlParser.KW_VIEW:
                case SparkSqlParser.KW_VIEWS:
                case SparkSqlParser.KW_VOID:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_WEEKS:
                case SparkSqlParser.KW_WHEN:
                case SparkSqlParser.KW_WHERE:
                case SparkSqlParser.KW_WINDOW:
                case SparkSqlParser.KW_WITH:
                case SparkSqlParser.KW_WITHIN:
                case SparkSqlParser.KW_YEAR:
                case SparkSqlParser.KW_YEARS:
                case SparkSqlParser.KW_ZONE:
                case SparkSqlParser.KW_ZORDER:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                case SparkSqlParser.IDENTIFIER:
                case SparkSqlParser.BACKQUOTED_IDENTIFIER:
                    {
                    this.state = 3048;
                    localContext._alias = this.errorCapturingIdentifier();
                    }
                    break;
                case SparkSqlParser.LEFT_PAREN:
                    {
                    this.state = 3049;
                    this.identifierList();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        let localContext = new NamedExpressionSeqContext(this.context, this.state);
        this.enterRule(localContext, 268, SparkSqlParser.RULE_namedExpressionSeq);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3054;
            this.namedExpression();
            this.state = 3059;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 397, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3055;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3056;
                    this.namedExpression();
                    }
                    }
                }
                this.state = 3061;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 397, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectList(): SelectListContext {
        let localContext = new SelectListContext(this.context, this.state);
        this.enterRule(localContext, 270, SparkSqlParser.RULE_selectList);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3062;
            this.namedExpressionSeq();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionFieldList(): PartitionFieldListContext {
        let localContext = new PartitionFieldListContext(this.context, this.state);
        this.enterRule(localContext, 272, SparkSqlParser.RULE_partitionFieldList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3064;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 3065;
            localContext._partitionField = this.partitionField();
            localContext._fields.push(localContext._partitionField);
            this.state = 3070;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3066;
                this.match(SparkSqlParser.COMMA);
                this.state = 3067;
                localContext._partitionField = this.partitionField();
                localContext._fields.push(localContext._partitionField);
                }
                }
                this.state = 3072;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3073;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionField(): PartitionFieldContext {
        let localContext = new PartitionFieldContext(this.context, this.state);
        this.enterRule(localContext, 274, SparkSqlParser.RULE_partitionField);
        try {
            this.state = 3077;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 399, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3075;
                this.transform();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3076;
                this.columnType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transform(): TransformContext {
        let localContext = new TransformContext(this.context, this.state);
        this.enterRule(localContext, 276, SparkSqlParser.RULE_transform);
        let _la: number;
        try {
            this.state = 3092;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 401, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3079;
                this.qualifiedName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3080;
                localContext._transformName = this.identifier();
                this.state = 3081;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3082;
                this.transformArgument();
                this.state = 3087;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 3083;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3084;
                    this.transformArgument();
                    }
                    }
                    this.state = 3089;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3090;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transformArgument(): TransformArgumentContext {
        let localContext = new TransformArgumentContext(this.context, this.state);
        this.enterRule(localContext, 278, SparkSqlParser.RULE_transformArgument);
        try {
            this.state = 3096;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 402, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3094;
                this.qualifiedName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3095;
                this.constant();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 280, SparkSqlParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3098;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedArgumentExpression(): NamedArgumentExpressionContext {
        let localContext = new NamedArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 282, SparkSqlParser.RULE_namedArgumentExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3100;
            localContext._key = this.identifier();
            this.state = 3101;
            this.match(SparkSqlParser.FAT_ARROW);
            this.state = 3102;
            localContext._value = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionArgument(): FunctionArgumentContext {
        let localContext = new FunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 284, SparkSqlParser.RULE_functionArgument);
        try {
            this.state = 3106;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 403, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3104;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3105;
                this.namedArgumentExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionSeq(): ExpressionSeqContext {
        let localContext = new ExpressionSeqContext(this.context, this.state);
        this.enterRule(localContext, 286, SparkSqlParser.RULE_expressionSeq);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3108;
            this.expression();
            this.state = 3113;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3109;
                this.match(SparkSqlParser.COMMA);
                this.state = 3110;
                this.expression();
                }
                }
                this.state = 3115;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 288;
        this.enterRecursionRule(localContext, 288, SparkSqlParser.RULE_booleanExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3128;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 406, this.context) ) {
            case 1:
                {
                this.state = 3117;
                _la = this.tokenStream.LA(1);
                if(!(_la === 197 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3118;
                this.booleanExpression(5);
                }
                break;
            case 2:
                {
                this.state = 3119;
                this.match(SparkSqlParser.KW_EXISTS);
                this.state = 3120;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3121;
                this.query();
                this.state = 3122;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                {
                this.state = 3124;
                this.valueExpression(0);
                this.state = 3126;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 405, this.context) ) {
                case 1:
                    {
                    this.state = 3125;
                    this.predicate();
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3138;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 408, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3136;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 407, this.context) ) {
                    case 1:
                        {
                        localContext = new BooleanExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_booleanExpression);
                        this.state = 3130;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 3131;
                        localContext._operator = this.match(SparkSqlParser.KW_AND);
                        this.state = 3132;
                        localContext._right = this.booleanExpression(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new BooleanExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_booleanExpression);
                        this.state = 3133;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 3134;
                        localContext._operator = this.match(SparkSqlParser.KW_OR);
                        this.state = 3135;
                        localContext._right = this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 3140;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 408, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate(): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state);
        this.enterRule(localContext, 290, SparkSqlParser.RULE_predicate);
        let _la: number;
        try {
            this.state = 3223;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 422, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3142;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3141;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3144;
                localContext._kind = this.match(SparkSqlParser.KW_BETWEEN);
                this.state = 3145;
                localContext._lower = this.valueExpression(0);
                this.state = 3146;
                this.match(SparkSqlParser.KW_AND);
                this.state = 3147;
                localContext._upper = this.valueExpression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3150;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3149;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3152;
                localContext._kind = this.match(SparkSqlParser.KW_IN);
                this.state = 3153;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3154;
                this.expression();
                this.state = 3159;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 3155;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3156;
                    this.expression();
                    }
                    }
                    this.state = 3161;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3162;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3165;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3164;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3167;
                localContext._kind = this.match(SparkSqlParser.KW_IN);
                this.state = 3168;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3169;
                this.query();
                this.state = 3170;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3173;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3172;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3175;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 251 || _la === 252)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3176;
                localContext._pattern = this.valueExpression(0);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3178;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3177;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3180;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 164)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3181;
                localContext._quantifier = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 16 || _la === 277)) {
                    localContext._quantifier = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3195;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 416, this.context) ) {
                case 1:
                    {
                    this.state = 3182;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3183;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                case 2:
                    {
                    this.state = 3184;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3185;
                    this.expression();
                    this.state = 3190;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3186;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3187;
                        this.expression();
                        }
                        }
                        this.state = 3192;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3193;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3198;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3197;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3200;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 164)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3201;
                localContext._pattern = this.valueExpression(0);
                this.state = 3204;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 418, this.context) ) {
                case 1:
                    {
                    this.state = 3202;
                    this.match(SparkSqlParser.KW_ESCAPE);
                    this.state = 3203;
                    localContext._escapeChar = this.stringLit();
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3206;
                this.match(SparkSqlParser.KW_IS);
                this.state = 3208;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3207;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3210;
                localContext._kind = this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3211;
                this.match(SparkSqlParser.KW_IS);
                this.state = 3213;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3212;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3215;
                localContext._kind = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 111 || _la === 316 || _la === 325)) {
                    localContext._kind = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3216;
                this.match(SparkSqlParser.KW_IS);
                this.state = 3218;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 3217;
                    this.match(SparkSqlParser.KW_NOT);
                    }
                }

                this.state = 3220;
                localContext._kind = this.match(SparkSqlParser.KW_DISTINCT);
                this.state = 3221;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 3222;
                localContext._right = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 292;
        this.enterRecursionRule(localContext, 292, SparkSqlParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3229;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 423, this.context) ) {
            case 1:
                {
                this.state = 3226;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                this.state = 3227;
                localContext._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 35) !== 0))) {
                    localContext._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3228;
                this.valueExpression(7);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3252;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 425, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3250;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 424, this.context) ) {
                    case 1:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3231;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 3232;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 94 || ((((_la - 363)) & ~0x1F) === 0 && ((1 << (_la - 363)) & 7) !== 0))) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3233;
                        localContext._right = this.valueExpression(7);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3234;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 3235;
                        localContext._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 259) !== 0))) {
                            localContext._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3236;
                        localContext._right = this.valueExpression(6);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3237;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 3238;
                        localContext._operator = this.match(SparkSqlParser.AMPERSAND);
                        this.state = 3239;
                        localContext._right = this.valueExpression(5);
                        }
                        break;
                    case 4:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3240;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 3241;
                        localContext._operator = this.match(SparkSqlParser.HAT);
                        this.state = 3242;
                        localContext._right = this.valueExpression(4);
                        }
                        break;
                    case 5:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3243;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 3244;
                        localContext._operator = this.match(SparkSqlParser.PIPE);
                        this.state = 3245;
                        localContext._right = this.valueExpression(3);
                        }
                        break;
                    case 6:
                        {
                        localContext = new ValueExpressionContext(parentContext, parentState);
                        localContext._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_valueExpression);
                        this.state = 3246;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 3247;
                        this.comparisonOperator();
                        this.state = 3248;
                        localContext._right = this.valueExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 3254;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 425, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public datetimeUnit(): DatetimeUnitContext {
        let localContext = new DatetimeUnitContext(this.context, this.state);
        this.enterRule(localContext, 294, SparkSqlParser.RULE_datetimeUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3255;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 69 || _la === 134 || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 85) !== 0) || _la === 231 || _la === 259 || _la === 341 || _la === 348)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 296;
        this.enterRecursionRule(localContext, 296, SparkSqlParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3506;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 451, this.context) ) {
            case 1:
                {
                this.state = 3258;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 63)) & ~0x1F) === 0 && ((1 << (_la - 63)) & 13) !== 0) || _la === 268 || _la === 331)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                {
                this.state = 3259;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 74 || _la === 75 || _la === 306)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3260;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3263;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_YEAR:
                    {
                    this.state = 3261;
                    localContext._unit = this.datetimeUnit();
                    }
                    break;
                case SparkSqlParser.STRING_LITERAL:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 3262;
                    localContext._invalidUnit = this.stringLit();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3265;
                this.match(SparkSqlParser.COMMA);
                this.state = 3266;
                localContext._unitsAmount = this.valueExpression(0);
                this.state = 3267;
                this.match(SparkSqlParser.COMMA);
                this.state = 3268;
                localContext._timestamp = this.valueExpression(0);
                this.state = 3269;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                {
                this.state = 3271;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 76 || _la === 77 || _la === 302 || _la === 307)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3272;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3275;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_DAY:
                case SparkSqlParser.KW_DAYOFYEAR:
                case SparkSqlParser.KW_HOUR:
                case SparkSqlParser.KW_MICROSECOND:
                case SparkSqlParser.KW_MILLISECOND:
                case SparkSqlParser.KW_MINUTE:
                case SparkSqlParser.KW_MONTH:
                case SparkSqlParser.KW_QUARTER:
                case SparkSqlParser.KW_SECOND:
                case SparkSqlParser.KW_WEEK:
                case SparkSqlParser.KW_YEAR:
                    {
                    this.state = 3273;
                    localContext._unit = this.datetimeUnit();
                    }
                    break;
                case SparkSqlParser.STRING_LITERAL:
                case SparkSqlParser.DOUBLEQUOTED_STRING:
                    {
                    this.state = 3274;
                    localContext._invalidUnit = this.stringLit();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3277;
                this.match(SparkSqlParser.COMMA);
                this.state = 3278;
                localContext._startTimestamp = this.valueExpression(0);
                this.state = 3279;
                this.match(SparkSqlParser.COMMA);
                this.state = 3280;
                localContext._endTimestamp = this.valueExpression(0);
                this.state = 3281;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 4:
                {
                this.state = 3283;
                this.match(SparkSqlParser.KW_CASE);
                this.state = 3285;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3284;
                    this.whenClause();
                    }
                    }
                    this.state = 3287;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 343);
                this.state = 3291;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 3289;
                    this.match(SparkSqlParser.KW_ELSE);
                    this.state = 3290;
                    localContext._elseExpression = this.expression();
                    }
                }

                this.state = 3293;
                this.match(SparkSqlParser.KW_END);
                }
                break;
            case 5:
                {
                this.state = 3295;
                this.match(SparkSqlParser.KW_CASE);
                this.state = 3296;
                this.expression();
                this.state = 3298;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3297;
                    this.whenClause();
                    }
                    }
                    this.state = 3300;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 343);
                this.state = 3304;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 97) {
                    {
                    this.state = 3302;
                    this.match(SparkSqlParser.KW_ELSE);
                    this.state = 3303;
                    localContext._elseExpression = this.expression();
                    }
                }

                this.state = 3306;
                this.match(SparkSqlParser.KW_END);
                }
                break;
            case 6:
                {
                this.state = 3308;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 36 || _la === 318)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3309;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3310;
                this.expression();
                this.state = 3311;
                this.match(SparkSqlParser.KW_AS);
                this.state = 3312;
                this.dataType();
                this.state = 3313;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 7:
                {
                this.state = 3315;
                this.match(SparkSqlParser.KW_STRUCT);
                this.state = 3316;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3325;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 433, this.context) ) {
                case 1:
                    {
                    this.state = 3317;
                    this.namedExpression();
                    this.state = 3322;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3318;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3319;
                        this.namedExpression();
                        }
                        }
                        this.state = 3324;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                }
                this.state = 3327;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 8:
                {
                this.state = 3328;
                this.match(SparkSqlParser.KW_FIRST);
                this.state = 3329;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3330;
                this.expression();
                this.state = 3333;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 3331;
                    this.match(SparkSqlParser.KW_IGNORE);
                    this.state = 3332;
                    this.match(SparkSqlParser.KW_NULLS);
                    }
                }

                this.state = 3335;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 9:
                {
                this.state = 3337;
                this.match(SparkSqlParser.KW_ANY_VALUE);
                this.state = 3338;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3339;
                this.expression();
                this.state = 3342;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 3340;
                    this.match(SparkSqlParser.KW_IGNORE);
                    this.state = 3341;
                    this.match(SparkSqlParser.KW_NULLS);
                    }
                }

                this.state = 3344;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 10:
                {
                this.state = 3346;
                this.match(SparkSqlParser.KW_LAST);
                this.state = 3347;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3348;
                this.expression();
                this.state = 3351;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 3349;
                    this.match(SparkSqlParser.KW_IGNORE);
                    this.state = 3350;
                    this.match(SparkSqlParser.KW_NULLS);
                    }
                }

                this.state = 3353;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 11:
                {
                this.state = 3355;
                this.match(SparkSqlParser.KW_POSITION);
                this.state = 3356;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3357;
                localContext._substr = this.valueExpression(0);
                this.state = 3358;
                this.match(SparkSqlParser.KW_IN);
                this.state = 3359;
                localContext._str = this.valueExpression(0);
                this.state = 3360;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 12:
                {
                this.state = 3362;
                this.constant();
                }
                break;
            case 13:
                {
                this.state = 3363;
                this.match(SparkSqlParser.ASTERISK);
                }
                break;
            case 14:
                {
                this.state = 3364;
                this.qualifiedName();
                this.state = 3365;
                this.match(SparkSqlParser.DOT);
                this.state = 3366;
                this.match(SparkSqlParser.ASTERISK);
                }
                break;
            case 15:
                {
                this.state = 3368;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3369;
                this.namedExpression();
                this.state = 3372;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3370;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3371;
                    this.namedExpression();
                    }
                    }
                    this.state = 3374;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 4);
                this.state = 3376;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 16:
                {
                this.state = 3378;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3379;
                this.query();
                this.state = 3380;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 17:
                {
                this.state = 3382;
                this.match(SparkSqlParser.KW_IDENTIFIER);
                this.state = 3383;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3384;
                this.expression();
                this.state = 3385;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 18:
                {
                this.state = 3387;
                this.functionName();
                this.state = 3388;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3400;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 1073678415) !== 0)) {
                    {
                    this.state = 3390;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 438, this.context) ) {
                    case 1:
                        {
                        this.state = 3389;
                        this.setQuantifier();
                        }
                        break;
                    }
                    this.state = 3392;
                    this.functionArgument();
                    this.state = 3397;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3393;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3394;
                        this.functionArgument();
                        }
                        }
                        this.state = 3399;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 3402;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 3409;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 441, this.context) ) {
                case 1:
                    {
                    this.state = 3403;
                    this.match(SparkSqlParser.KW_FILTER);
                    this.state = 3404;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3405;
                    this.match(SparkSqlParser.KW_WHERE);
                    this.state = 3406;
                    localContext._where = this.booleanExpression(0);
                    this.state = 3407;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3413;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 442, this.context) ) {
                case 1:
                    {
                    this.state = 3411;
                    localContext._nullsOption = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 138 || _la === 246)) {
                        localContext._nullsOption = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3412;
                    this.match(SparkSqlParser.KW_NULLS);
                    }
                    break;
                }
                this.state = 3417;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 443, this.context) ) {
                case 1:
                    {
                    this.state = 3415;
                    this.match(SparkSqlParser.KW_OVER);
                    this.state = 3416;
                    this.windowSpec();
                    }
                    break;
                }
                }
                break;
            case 19:
                {
                this.state = 3419;
                this.identifier();
                this.state = 3420;
                this.match(SparkSqlParser.ARROW);
                this.state = 3421;
                this.expression();
                }
                break;
            case 20:
                {
                this.state = 3423;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3424;
                this.identifier();
                this.state = 3427;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3425;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3426;
                    this.identifier();
                    }
                    }
                    this.state = 3429;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 4);
                this.state = 3431;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 3432;
                this.match(SparkSqlParser.ARROW);
                this.state = 3433;
                this.expression();
                }
                break;
            case 21:
                {
                this.state = 3435;
                this.identifier();
                }
                break;
            case 22:
                {
                this.state = 3436;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3437;
                this.expression();
                this.state = 3438;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 23:
                {
                this.state = 3440;
                this.match(SparkSqlParser.KW_EXTRACT);
                this.state = 3441;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3442;
                localContext._field = this.identifier();
                this.state = 3443;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 3444;
                localContext._source = this.valueExpression(0);
                this.state = 3445;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 24:
                {
                this.state = 3447;
                _la = this.tokenStream.LA(1);
                if(!(_la === 287 || _la === 288)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3448;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3449;
                localContext._str = this.valueExpression(0);
                this.state = 3450;
                _la = this.tokenStream.LA(1);
                if(!(_la === 4 || _la === 123)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3451;
                localContext._pos = this.valueExpression(0);
                this.state = 3454;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4 || _la === 119) {
                    {
                    this.state = 3452;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 4 || _la === 119)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3453;
                    localContext._len = this.valueExpression(0);
                    }
                }

                this.state = 3456;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 25:
                {
                this.state = 3458;
                this.match(SparkSqlParser.KW_TRIM);
                this.state = 3459;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3461;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 446, this.context) ) {
                case 1:
                    {
                    this.state = 3460;
                    localContext._trimOption = this.tokenStream.LT(1);
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 28 || _la === 160 || _la === 311)) {
                        localContext._trimOption = this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 3464;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 536839207) !== 0)) {
                    {
                    this.state = 3463;
                    localContext._trimStr = this.valueExpression(0);
                    }
                }

                this.state = 3466;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 3467;
                localContext._srcStr = this.valueExpression(0);
                this.state = 3468;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 26:
                {
                this.state = 3470;
                this.match(SparkSqlParser.KW_OVERLAY);
                this.state = 3471;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3472;
                localContext._input = this.valueExpression(0);
                this.state = 3473;
                this.match(SparkSqlParser.KW_PLACING);
                this.state = 3474;
                localContext._replace = this.valueExpression(0);
                this.state = 3475;
                this.match(SparkSqlParser.KW_FROM);
                this.state = 3476;
                localContext._position = this.valueExpression(0);
                this.state = 3479;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 3477;
                    this.match(SparkSqlParser.KW_FOR);
                    this.state = 3478;
                    localContext._length = this.valueExpression(0);
                    }
                }

                this.state = 3481;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 27:
                {
                this.state = 3483;
                localContext._name = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 220 || _la === 221)) {
                    localContext._name = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3484;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3485;
                localContext._percentage = this.valueExpression(0);
                this.state = 3486;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 3487;
                this.match(SparkSqlParser.KW_WITHIN);
                this.state = 3488;
                this.match(SparkSqlParser.KW_GROUP);
                this.state = 3489;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3490;
                this.match(SparkSqlParser.KW_ORDER);
                this.state = 3491;
                this.match(SparkSqlParser.KW_BY);
                this.state = 3492;
                this.sortItem();
                this.state = 3493;
                this.match(SparkSqlParser.RIGHT_PAREN);
                this.state = 3500;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 449, this.context) ) {
                case 1:
                    {
                    this.state = 3494;
                    this.match(SparkSqlParser.KW_FILTER);
                    this.state = 3495;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3496;
                    this.match(SparkSqlParser.KW_WHERE);
                    this.state = 3497;
                    localContext._where = this.booleanExpression(0);
                    this.state = 3498;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                this.state = 3504;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 450, this.context) ) {
                case 1:
                    {
                    this.state = 3502;
                    this.match(SparkSqlParser.KW_OVER);
                    this.state = 3503;
                    this.windowSpec();
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3518;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 453, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3516;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 452, this.context) ) {
                    case 1:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        localContext._value = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_primaryExpression);
                        this.state = 3508;
                        if (!(this.precpred(this.context, 9))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 9)");
                        }
                        this.state = 3509;
                        this.match(SparkSqlParser.LEFT_BRACKET);
                        this.state = 3510;
                        localContext._index = this.valueExpression(0);
                        this.state = 3511;
                        this.match(SparkSqlParser.RIGHT_BRACKET);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        localContext._base = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, SparkSqlParser.RULE_primaryExpression);
                        this.state = 3513;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 3514;
                        this.match(SparkSqlParser.DOT);
                        this.state = 3515;
                        localContext._fieldName = this.identifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 3520;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 453, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public literalType(): LiteralTypeContext {
        let localContext = new LiteralTypeContext(this.context, this.state);
        this.enterRule(localContext, 298, SparkSqlParser.RULE_literalType);
        try {
            this.state = 3528;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 454, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3521;
                this.match(SparkSqlParser.KW_DATE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3522;
                this.match(SparkSqlParser.KW_TIMESTAMP);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3523;
                this.match(SparkSqlParser.KW_TIMESTAMP_LTZ);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3524;
                this.match(SparkSqlParser.KW_TIMESTAMP_NTZ);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3525;
                this.match(SparkSqlParser.KW_INTERVAL);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3526;
                this.match(SparkSqlParser.KW_BINARY_HEX);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3527;
                localContext._unsupportedType = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constant(): ConstantContext {
        let localContext = new ConstantContext(this.context, this.state);
        this.enterRule(localContext, 300, SparkSqlParser.RULE_constant);
        try {
            let alternative: number;
            this.state = 3545;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 456, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3530;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3531;
                this.match(SparkSqlParser.QUESTION);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3532;
                this.match(SparkSqlParser.COLON);
                this.state = 3533;
                this.identifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3534;
                this.interval();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3535;
                this.literalType();
                this.state = 3536;
                this.stringLit();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3538;
                this.number_();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3539;
                this.booleanValue();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3541;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 3540;
                        this.stringLit();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 3543;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 455, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 302, SparkSqlParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3547;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 255) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arithmeticOperator(): ArithmeticOperatorContext {
        let localContext = new ArithmeticOperatorContext(this.context, this.state);
        this.enterRule(localContext, 304, SparkSqlParser.RULE_arithmeticOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3549;
            _la = this.tokenStream.LA(1);
            if(!(_la === 94 || ((((_la - 361)) & ~0x1F) === 0 && ((1 << (_la - 361)) & 1023) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public predicateOperator(): PredicateOperatorContext {
        let localContext = new PredicateOperatorContext(this.context, this.state);
        this.enterRule(localContext, 306, SparkSqlParser.RULE_predicateOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3551;
            _la = this.tokenStream.LA(1);
            if(!(_la === 14 || _la === 140 || _la === 197 || _la === 208)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValue(): BooleanValueContext {
        let localContext = new BooleanValueContext(this.context, this.state);
        this.enterRule(localContext, 308, SparkSqlParser.RULE_booleanValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3553;
            _la = this.tokenStream.LA(1);
            if(!(_la === 111 || _la === 316)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 310, SparkSqlParser.RULE_interval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3555;
            this.match(SparkSqlParser.KW_INTERVAL);
            this.state = 3558;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 457, this.context) ) {
            case 1:
                {
                this.state = 3556;
                this.errorCapturingMultiUnitsInterval();
                }
                break;
            case 2:
                {
                this.state = 3557;
                this.errorCapturingUnitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext {
        let localContext = new ErrorCapturingMultiUnitsIntervalContext(this.context, this.state);
        this.enterRule(localContext, 312, SparkSqlParser.RULE_errorCapturingMultiUnitsInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3560;
            localContext._body = this.multiUnitsInterval();
            this.state = 3562;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 458, this.context) ) {
            case 1:
                {
                this.state = 3561;
                this.unitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext {
        let localContext = new MultiUnitsIntervalContext(this.context, this.state);
        this.enterRule(localContext, 314, SparkSqlParser.RULE_multiUnitsInterval);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3567;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 3564;
                    this.intervalValue();
                    this.state = 3565;
                    localContext._unitInMultiUnits = this.unitInMultiUnits();
                    localContext._unit.push(localContext._unitInMultiUnits);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3569;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 459, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext {
        let localContext = new ErrorCapturingUnitToUnitIntervalContext(this.context, this.state);
        this.enterRule(localContext, 316, SparkSqlParser.RULE_errorCapturingUnitToUnitInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3571;
            localContext._body = this.unitToUnitInterval();
            this.state = 3574;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 460, this.context) ) {
            case 1:
                {
                this.state = 3572;
                localContext._error1 = this.multiUnitsInterval();
                }
                break;
            case 2:
                {
                this.state = 3573;
                localContext._error2 = this.unitToUnitInterval();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext {
        let localContext = new UnitToUnitIntervalContext(this.context, this.state);
        this.enterRule(localContext, 318, SparkSqlParser.RULE_unitToUnitInterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3576;
            localContext._value = this.intervalValue();
            this.state = 3577;
            this.unitInUnitToUnit();
            this.state = 3578;
            this.match(SparkSqlParser.KW_TO);
            this.state = 3579;
            this.unitInUnitToUnit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalValue(): IntervalValueContext {
        let localContext = new IntervalValueContext(this.context, this.state);
        this.enterRule(localContext, 320, SparkSqlParser.RULE_intervalValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3582;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 361 || _la === 362) {
                {
                this.state = 3581;
                _la = this.tokenStream.LA(1);
                if(!(_la === 361 || _la === 362)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3587;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.INTEGER_VALUE:
                {
                this.state = 3584;
                this.match(SparkSqlParser.INTEGER_VALUE);
                }
                break;
            case SparkSqlParser.DECIMAL_VALUE:
                {
                this.state = 3585;
                this.match(SparkSqlParser.DECIMAL_VALUE);
                }
                break;
            case SparkSqlParser.STRING_LITERAL:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
                {
                this.state = 3586;
                this.stringLit();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitInMultiUnits(): UnitInMultiUnitsContext {
        let localContext = new UnitInMultiUnitsContext(this.context, this.state);
        this.enterRule(localContext, 322, SparkSqlParser.RULE_unitInMultiUnits);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3589;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 68 || _la === 134 || _la === 135 || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 12543) !== 0) || _la === 259 || _la === 260 || ((((_la - 341)) & ~0x1F) === 0 && ((1 << (_la - 341)) & 387) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unitInUnitToUnit(): UnitInUnitToUnitContext {
        let localContext = new UnitInUnitToUnitContext(this.context, this.state);
        this.enterRule(localContext, 324, SparkSqlParser.RULE_unitInUnitToUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3591;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 134 || _la === 184 || _la === 186 || _la === 259 || _la === 348)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colPosition(): ColPositionContext {
        let localContext = new ColPositionContext(this.context, this.state);
        this.enterRule(localContext, 326, SparkSqlParser.RULE_colPosition);
        try {
            this.state = 3596;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_FIRST:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3593;
                localContext._position = this.match(SparkSqlParser.KW_FIRST);
                }
                break;
            case SparkSqlParser.KW_AFTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3594;
                localContext._position = this.match(SparkSqlParser.KW_AFTER);
                this.state = 3595;
                localContext._afterCol = this.errorCapturingIdentifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_(): TypeContext {
        let localContext = new TypeContext(this.context, this.state);
        this.enterRule(localContext, 328, SparkSqlParser.RULE_type);
        try {
            this.state = 3628;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 464, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3598;
                this.match(SparkSqlParser.KW_BOOLEAN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3599;
                this.match(SparkSqlParser.KW_TINYINT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3600;
                this.match(SparkSqlParser.KW_BYTE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3601;
                this.match(SparkSqlParser.KW_SMALLINT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3602;
                this.match(SparkSqlParser.KW_SHORT);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3603;
                this.match(SparkSqlParser.KW_INT);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3604;
                this.match(SparkSqlParser.KW_INTEGER);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3605;
                this.match(SparkSqlParser.KW_BIGINT);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3606;
                this.match(SparkSqlParser.KW_LONG);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3607;
                this.match(SparkSqlParser.KW_FLOAT);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3608;
                this.match(SparkSqlParser.KW_REAL);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3609;
                this.match(SparkSqlParser.KW_DOUBLE);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3610;
                this.match(SparkSqlParser.KW_DATE);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3611;
                this.match(SparkSqlParser.KW_TIMESTAMP);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3612;
                this.match(SparkSqlParser.KW_TIMESTAMP_NTZ);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3613;
                this.match(SparkSqlParser.KW_TIMESTAMP_LTZ);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 3614;
                this.match(SparkSqlParser.KW_STRING);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 3615;
                this.match(SparkSqlParser.KW_CHARACTER);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 3616;
                this.match(SparkSqlParser.KW_CHAR);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 3617;
                this.match(SparkSqlParser.KW_VARCHAR);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 3618;
                this.match(SparkSqlParser.KW_BINARY);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 3619;
                this.match(SparkSqlParser.KW_DECIMAL);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 3620;
                this.match(SparkSqlParser.KW_DEC);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 3621;
                this.match(SparkSqlParser.KW_NUMERIC);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 3622;
                this.match(SparkSqlParser.KW_VOID);
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 3623;
                this.match(SparkSqlParser.KW_INTERVAL);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 3624;
                this.match(SparkSqlParser.KW_ARRAY);
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 3625;
                this.match(SparkSqlParser.KW_STRUCT);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 3626;
                this.match(SparkSqlParser.KW_MAP);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 3627;
                localContext._unsupportedType = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataType(): DataTypeContext {
        let localContext = new DataTypeContext(this.context, this.state);
        this.enterRule(localContext, 330, SparkSqlParser.RULE_dataType);
        let _la: number;
        try {
            this.state = 3676;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 471, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3630;
                localContext._complex = this.match(SparkSqlParser.KW_ARRAY);
                this.state = 3631;
                this.match(SparkSqlParser.LT);
                this.state = 3632;
                this.dataType();
                this.state = 3633;
                this.match(SparkSqlParser.GT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3635;
                localContext._complex = this.match(SparkSqlParser.KW_MAP);
                this.state = 3636;
                this.match(SparkSqlParser.LT);
                this.state = 3637;
                this.dataType();
                this.state = 3638;
                this.match(SparkSqlParser.COMMA);
                this.state = 3639;
                this.dataType();
                this.state = 3640;
                this.match(SparkSqlParser.GT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3642;
                localContext._complex = this.match(SparkSqlParser.KW_STRUCT);
                this.state = 3649;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.LT:
                    {
                    this.state = 3643;
                    this.match(SparkSqlParser.LT);
                    this.state = 3645;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967040) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4160749567) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967279) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967167) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 378)) & ~0x1F) === 0 && ((1 << (_la - 378)) & 3073) !== 0)) {
                        {
                        this.state = 3644;
                        this.complexColTypeList();
                        }
                    }

                    this.state = 3647;
                    this.match(SparkSqlParser.GT);
                    }
                    break;
                case SparkSqlParser.NEQ:
                    {
                    this.state = 3648;
                    this.match(SparkSqlParser.NEQ);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3651;
                this.match(SparkSqlParser.KW_INTERVAL);
                this.state = 3652;
                _la = this.tokenStream.LA(1);
                if(!(_la === 186 || _la === 348)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3655;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 467, this.context) ) {
                case 1:
                    {
                    this.state = 3653;
                    this.match(SparkSqlParser.KW_TO);
                    this.state = 3654;
                    this.match(SparkSqlParser.KW_MONTH);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3657;
                this.match(SparkSqlParser.KW_INTERVAL);
                this.state = 3658;
                _la = this.tokenStream.LA(1);
                if(!(_la === 67 || _la === 134 || _la === 184 || _la === 259)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3661;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 468, this.context) ) {
                case 1:
                    {
                    this.state = 3659;
                    this.match(SparkSqlParser.KW_TO);
                    this.state = 3660;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 134 || _la === 184 || _la === 259)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3663;
                this.type_();
                this.state = 3674;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 470, this.context) ) {
                case 1:
                    {
                    this.state = 3664;
                    this.match(SparkSqlParser.LEFT_PAREN);
                    this.state = 3665;
                    this.match(SparkSqlParser.INTEGER_VALUE);
                    this.state = 3670;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3666;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3667;
                        this.match(SparkSqlParser.INTEGER_VALUE);
                        }
                        }
                        this.state = 3672;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3673;
                    this.match(SparkSqlParser.RIGHT_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionSeqForAdd(): QualifiedColTypeWithPositionSeqForAddContext {
        let localContext = new QualifiedColTypeWithPositionSeqForAddContext(this.context, this.state);
        this.enterRule(localContext, 332, SparkSqlParser.RULE_qualifiedColTypeWithPositionSeqForAdd);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3678;
            this.qualifiedColTypeWithPositionForAdd();
            this.state = 3683;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3679;
                this.match(SparkSqlParser.COMMA);
                this.state = 3680;
                this.qualifiedColTypeWithPositionForAdd();
                }
                }
                this.state = 3685;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionForAdd(): QualifiedColTypeWithPositionForAddContext {
        let localContext = new QualifiedColTypeWithPositionForAddContext(this.context, this.state);
        this.enterRule(localContext, 334, SparkSqlParser.RULE_qualifiedColTypeWithPositionForAdd);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3686;
            localContext._name = this.columnNameCreate();
            this.state = 3687;
            this.dataType();
            this.state = 3691;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 473, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3688;
                    this.colDefinitionDescriptorWithPosition();
                    }
                    }
                }
                this.state = 3693;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 473, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionSeqForReplace(): QualifiedColTypeWithPositionSeqForReplaceContext {
        let localContext = new QualifiedColTypeWithPositionSeqForReplaceContext(this.context, this.state);
        this.enterRule(localContext, 336, SparkSqlParser.RULE_qualifiedColTypeWithPositionSeqForReplace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3694;
            this.qualifiedColTypeWithPositionForReplace();
            this.state = 3699;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3695;
                this.match(SparkSqlParser.COMMA);
                this.state = 3696;
                this.qualifiedColTypeWithPositionForReplace();
                }
                }
                this.state = 3701;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedColTypeWithPositionForReplace(): QualifiedColTypeWithPositionForReplaceContext {
        let localContext = new QualifiedColTypeWithPositionForReplaceContext(this.context, this.state);
        this.enterRule(localContext, 338, SparkSqlParser.RULE_qualifiedColTypeWithPositionForReplace);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3702;
            localContext._name = this.columnName();
            this.state = 3703;
            this.dataType();
            this.state = 3707;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 9 || _la === 51 || _la === 82 || _la === 116 || _la === 197) {
                {
                {
                this.state = 3704;
                this.colDefinitionDescriptorWithPosition();
                }
                }
                this.state = 3709;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext {
        let localContext = new ColDefinitionDescriptorWithPositionContext(this.context, this.state);
        this.enterRule(localContext, 340, SparkSqlParser.RULE_colDefinitionDescriptorWithPosition);
        try {
            this.state = 3715;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3710;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3711;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case SparkSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3712;
                this.defaultExpression();
                }
                break;
            case SparkSqlParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3713;
                this.commentSpec();
                }
                break;
            case SparkSqlParser.KW_AFTER:
            case SparkSqlParser.KW_FIRST:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3714;
                this.colPosition();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultExpression(): DefaultExpressionContext {
        let localContext = new DefaultExpressionContext(this.context, this.state);
        this.enterRule(localContext, 342, SparkSqlParser.RULE_defaultExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3717;
            this.match(SparkSqlParser.KW_DEFAULT);
            this.state = 3718;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDefaultExpression(): VariableDefaultExpressionContext {
        let localContext = new VariableDefaultExpressionContext(this.context, this.state);
        this.enterRule(localContext, 344, SparkSqlParser.RULE_variableDefaultExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3720;
            _la = this.tokenStream.LA(1);
            if(!(_la === 82 || _la === 352)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3721;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colTypeList(): ColTypeListContext {
        let localContext = new ColTypeListContext(this.context, this.state);
        this.enterRule(localContext, 346, SparkSqlParser.RULE_colTypeList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3723;
            this.columnType();
            this.state = 3728;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 477, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3724;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3725;
                    this.columnType();
                    }
                    }
                }
                this.state = 3730;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 477, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnType(): ColumnTypeContext {
        let localContext = new ColumnTypeContext(this.context, this.state);
        this.enterRule(localContext, 348, SparkSqlParser.RULE_columnType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3731;
            localContext._colName = this.errorCapturingIdentifier();
            this.state = 3732;
            this.dataType();
            this.state = 3735;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 478, this.context) ) {
            case 1:
                {
                this.state = 3733;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3734;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            }
            this.state = 3738;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 479, this.context) ) {
            case 1:
                {
                this.state = 3737;
                this.commentSpec();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext {
        let localContext = new CreateOrReplaceTableColTypeListContext(this.context, this.state);
        this.enterRule(localContext, 350, SparkSqlParser.RULE_createOrReplaceTableColTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3740;
            this.createOrReplaceTableColType();
            this.state = 3745;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3741;
                this.match(SparkSqlParser.COMMA);
                this.state = 3742;
                this.createOrReplaceTableColType();
                }
                }
                this.state = 3747;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createOrReplaceTableColType(): CreateOrReplaceTableColTypeContext {
        let localContext = new CreateOrReplaceTableColTypeContext(this.context, this.state);
        this.enterRule(localContext, 352, SparkSqlParser.RULE_createOrReplaceTableColType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3748;
            localContext._colName = this.columnNameCreate();
            this.state = 3749;
            localContext._colType = this.dataType();
            this.state = 3753;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 51 || _la === 82 || _la === 127 || _la === 197) {
                {
                {
                this.state = 3750;
                this.colDefinitionOption();
                }
                }
                this.state = 3755;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colDefinitionOption(): ColDefinitionOptionContext {
        let localContext = new ColDefinitionOptionContext(this.context, this.state);
        this.enterRule(localContext, 354, SparkSqlParser.RULE_colDefinitionOption);
        try {
            this.state = 3761;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3756;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3757;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case SparkSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3758;
                this.defaultExpression();
                }
                break;
            case SparkSqlParser.KW_GENERATED:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3759;
                this.generationExpression();
                }
                break;
            case SparkSqlParser.KW_COMMENT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3760;
                this.commentSpec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generationExpression(): GenerationExpressionContext {
        let localContext = new GenerationExpressionContext(this.context, this.state);
        this.enterRule(localContext, 356, SparkSqlParser.RULE_generationExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3763;
            this.match(SparkSqlParser.KW_GENERATED);
            this.state = 3764;
            this.match(SparkSqlParser.KW_ALWAYS);
            this.state = 3765;
            this.match(SparkSqlParser.KW_AS);
            this.state = 3766;
            this.match(SparkSqlParser.LEFT_PAREN);
            this.state = 3767;
            this.expression();
            this.state = 3768;
            this.match(SparkSqlParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public complexColTypeList(): ComplexColTypeListContext {
        let localContext = new ComplexColTypeListContext(this.context, this.state);
        this.enterRule(localContext, 358, SparkSqlParser.RULE_complexColTypeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3770;
            this.complexColType();
            this.state = 3775;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3771;
                this.match(SparkSqlParser.COMMA);
                this.state = 3772;
                this.complexColType();
                }
                }
                this.state = 3777;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public complexColType(): ComplexColTypeContext {
        let localContext = new ComplexColTypeContext(this.context, this.state);
        this.enterRule(localContext, 360, SparkSqlParser.RULE_complexColType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3778;
            this.identifier();
            this.state = 3780;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 371) {
                {
                this.state = 3779;
                this.match(SparkSqlParser.COLON);
                }
            }

            this.state = 3782;
            this.dataType();
            this.state = 3785;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 197) {
                {
                this.state = 3783;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3784;
                this.match(SparkSqlParser.KW_NULL);
                }
            }

            this.state = 3788;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 51) {
                {
                this.state = 3787;
                this.commentSpec();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClause(): WhenClauseContext {
        let localContext = new WhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 362, SparkSqlParser.RULE_whenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3790;
            this.match(SparkSqlParser.KW_WHEN);
            this.state = 3791;
            localContext._condition = this.expression();
            this.state = 3792;
            this.match(SparkSqlParser.KW_THEN);
            this.state = 3793;
            localContext._result = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowClause(): WindowClauseContext {
        let localContext = new WindowClauseContext(this.context, this.state);
        this.enterRule(localContext, 364, SparkSqlParser.RULE_windowClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3795;
            this.match(SparkSqlParser.KW_WINDOW);
            this.state = 3796;
            this.namedWindow();
            this.state = 3801;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 487, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3797;
                    this.match(SparkSqlParser.COMMA);
                    this.state = 3798;
                    this.namedWindow();
                    }
                    }
                }
                this.state = 3803;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 487, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zorderClause(): ZorderClauseContext {
        let localContext = new ZorderClauseContext(this.context, this.state);
        this.enterRule(localContext, 366, SparkSqlParser.RULE_zorderClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3804;
            this.match(SparkSqlParser.KW_ZORDER);
            this.state = 3805;
            this.match(SparkSqlParser.KW_BY);
            this.state = 3806;
            this.columnNameSeq();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedWindow(): NamedWindowContext {
        let localContext = new NamedWindowContext(this.context, this.state);
        this.enterRule(localContext, 368, SparkSqlParser.RULE_namedWindow);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3808;
            localContext._name = this.errorCapturingIdentifier();
            this.state = 3809;
            this.match(SparkSqlParser.KW_AS);
            this.state = 3810;
            this.windowSpec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpec(): WindowSpecContext {
        let localContext = new WindowSpecContext(this.context, this.state);
        this.enterRule(localContext, 370, SparkSqlParser.RULE_windowSpec);
        let _la: number;
        try {
            this.state = 3858;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 495, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3812;
                localContext._name = this.errorCapturingIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3813;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3814;
                localContext._name = this.errorCapturingIdentifier();
                this.state = 3815;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3817;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3852;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case SparkSqlParser.KW_CLUSTER:
                    {
                    this.state = 3818;
                    this.match(SparkSqlParser.KW_CLUSTER);
                    this.state = 3819;
                    this.match(SparkSqlParser.KW_BY);
                    this.state = 3820;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    this.state = 3825;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 3821;
                        this.match(SparkSqlParser.COMMA);
                        this.state = 3822;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        }
                        }
                        this.state = 3827;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case SparkSqlParser.RIGHT_PAREN:
                case SparkSqlParser.KW_DISTRIBUTE:
                case SparkSqlParser.KW_ORDER:
                case SparkSqlParser.KW_PARTITION:
                case SparkSqlParser.KW_RANGE:
                case SparkSqlParser.KW_ROWS:
                case SparkSqlParser.KW_SORT:
                    {
                    this.state = 3838;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 93 || _la === 217) {
                        {
                        this.state = 3828;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 93 || _la === 217)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3829;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 3830;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        this.state = 3835;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 3831;
                            this.match(SparkSqlParser.COMMA);
                            this.state = 3832;
                            localContext._expression = this.expression();
                            localContext._partition.push(localContext._expression);
                            }
                            }
                            this.state = 3837;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 3850;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 209 || _la === 278) {
                        {
                        this.state = 3840;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 209 || _la === 278)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3841;
                        this.match(SparkSqlParser.KW_BY);
                        this.state = 3842;
                        this.sortItem();
                        this.state = 3847;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 3843;
                            this.match(SparkSqlParser.COMMA);
                            this.state = 3844;
                            this.sortItem();
                            }
                            }
                            this.state = 3849;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3855;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 233 || _la === 258) {
                    {
                    this.state = 3854;
                    this.windowFrame();
                    }
                }

                this.state = 3857;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrame(): WindowFrameContext {
        let localContext = new WindowFrameContext(this.context, this.state);
        this.enterRule(localContext, 372, SparkSqlParser.RULE_windowFrame);
        try {
            this.state = 3876;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 496, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3860;
                localContext._frameType = this.match(SparkSqlParser.KW_RANGE);
                this.state = 3861;
                localContext._start_ = this.frameBound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3862;
                localContext._frameType = this.match(SparkSqlParser.KW_ROWS);
                this.state = 3863;
                localContext._start_ = this.frameBound();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3864;
                localContext._frameType = this.match(SparkSqlParser.KW_RANGE);
                this.state = 3865;
                this.match(SparkSqlParser.KW_BETWEEN);
                this.state = 3866;
                localContext._start_ = this.frameBound();
                this.state = 3867;
                this.match(SparkSqlParser.KW_AND);
                this.state = 3868;
                localContext._end = this.frameBound();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3870;
                localContext._frameType = this.match(SparkSqlParser.KW_ROWS);
                this.state = 3871;
                this.match(SparkSqlParser.KW_BETWEEN);
                this.state = 3872;
                localContext._start_ = this.frameBound();
                this.state = 3873;
                this.match(SparkSqlParser.KW_AND);
                this.state = 3874;
                localContext._end = this.frameBound();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBound(): FrameBoundContext {
        let localContext = new FrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 374, SparkSqlParser.RULE_frameBound);
        let _la: number;
        try {
            this.state = 3885;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 497, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3878;
                this.match(SparkSqlParser.KW_UNBOUNDED);
                this.state = 3879;
                localContext._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 226)) {
                    localContext._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3880;
                localContext._boundType = this.match(SparkSqlParser.KW_CURRENT);
                this.state = 3881;
                this.match(SparkSqlParser.KW_ROW);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3882;
                this.expression();
                this.state = 3883;
                localContext._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 226)) {
                    localContext._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedNameList(): QualifiedNameListContext {
        let localContext = new QualifiedNameListContext(this.context, this.state);
        this.enterRule(localContext, 376, SparkSqlParser.RULE_qualifiedNameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3887;
            this.qualifiedName();
            this.state = 3892;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3888;
                this.match(SparkSqlParser.COMMA);
                this.state = 3889;
                this.qualifiedName();
                }
                }
                this.state = 3894;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionName(): FunctionNameContext {
        let localContext = new FunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 378, SparkSqlParser.RULE_functionName);
        try {
            this.state = 3904;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 499, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3895;
                this.match(SparkSqlParser.KW_IDENTIFIER);
                this.state = 3896;
                this.match(SparkSqlParser.LEFT_PAREN);
                this.state = 3897;
                this.expression();
                this.state = 3898;
                this.match(SparkSqlParser.RIGHT_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3900;
                this.qualifiedName();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3901;
                this.match(SparkSqlParser.KW_FILTER);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3902;
                this.match(SparkSqlParser.KW_LEFT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3903;
                this.match(SparkSqlParser.KW_RIGHT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        let localContext = new FunctionNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 380, SparkSqlParser.RULE_functionNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3906;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 382, SparkSqlParser.RULE_qualifiedName);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3908;
            this.identifier();
            this.state = 3913;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 500, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3909;
                    this.match(SparkSqlParser.DOT);
                    this.state = 3910;
                    this.identifier();
                    }
                    }
                }
                this.state = 3915;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 500, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        let localContext = new ErrorCapturingIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 384, SparkSqlParser.RULE_errorCapturingIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3916;
            this.identifier();
            this.state = 3917;
            this.errorCapturingIdentifierExtra();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
        let localContext = new ErrorCapturingIdentifierExtraContext(this.context, this.state);
        this.enterRule(localContext, 386, SparkSqlParser.RULE_errorCapturingIdentifierExtra);
        try {
            let alternative: number;
            this.state = 3926;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 502, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3921;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 3919;
                        this.match(SparkSqlParser.MINUS);
                        this.state = 3920;
                        this.identifier();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 3923;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 501, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 388, SparkSqlParser.RULE_identifier);
        try {
            this.state = 3930;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 503, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3928;
                this.strictIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3929;
                this.strictNonReserved();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public strictIdentifier(): StrictIdentifierContext {
        let localContext = new StrictIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 390, SparkSqlParser.RULE_strictIdentifier);
        try {
            this.state = 3936;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 504, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3932;
                this.match(SparkSqlParser.IDENTIFIER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3933;
                this.quotedIdentifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3934;
                this.ansiNonReserved();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3935;
                this.nonReserved();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotedIdentifier(): QuotedIdentifierContext {
        let localContext = new QuotedIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 392, SparkSqlParser.RULE_quotedIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3938;
            _la = this.tokenStream.LA(1);
            if(!(_la === 378 || _la === 389)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public backQuotedIdentifier(): BackQuotedIdentifierContext {
        let localContext = new BackQuotedIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 394, SparkSqlParser.RULE_backQuotedIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3940;
            this.match(SparkSqlParser.BACKQUOTED_IDENTIFIER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 396, SparkSqlParser.RULE_number);
        let _la: number;
        try {
            this.state = 3982;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 515, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3943;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 3942;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3945;
                this.match(SparkSqlParser.EXPONENT_VALUE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3947;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 3946;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3949;
                this.match(SparkSqlParser.DECIMAL_VALUE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3951;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 3950;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3953;
                _la = this.tokenStream.LA(1);
                if(!(_la === 383 || _la === 384)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3955;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 3954;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3957;
                this.match(SparkSqlParser.INTEGER_VALUE);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3959;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 3958;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3961;
                this.match(SparkSqlParser.BIGINT_LITERAL);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3963;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 3962;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3965;
                this.match(SparkSqlParser.SMALLINT_LITERAL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3967;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 3966;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3969;
                this.match(SparkSqlParser.TINYINT_LITERAL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3971;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 3970;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3973;
                this.match(SparkSqlParser.DOUBLE_LITERAL);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3975;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 3974;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3977;
                this.match(SparkSqlParser.FLOAT_LITERAL);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3979;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 3978;
                    this.match(SparkSqlParser.MINUS);
                    }
                }

                this.state = 3981;
                this.match(SparkSqlParser.BIGDECIMAL_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterColumnAction(): AlterColumnActionContext {
        let localContext = new AlterColumnActionContext(this.context, this.state);
        this.enterRule(localContext, 398, SparkSqlParser.RULE_alterColumnAction);
        let _la: number;
        try {
            this.state = 3995;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 516, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3984;
                this.match(SparkSqlParser.KW_TYPE);
                this.state = 3985;
                this.dataType();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3986;
                this.commentSpec();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3987;
                this.colPosition();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3988;
                localContext._setOrDrop = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 96 || _la === 269)) {
                    localContext._setOrDrop = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3989;
                this.match(SparkSqlParser.KW_NOT);
                this.state = 3990;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3991;
                this.match(SparkSqlParser.KW_SET);
                this.state = 3992;
                this.defaultExpression();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3993;
                localContext._dropDefault = this.match(SparkSqlParser.KW_DROP);
                this.state = 3994;
                this.match(SparkSqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringLit(): StringLitContext {
        let localContext = new StringLitContext(this.context, this.state);
        this.enterRule(localContext, 400, SparkSqlParser.RULE_stringLit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3997;
            _la = this.tokenStream.LA(1);
            if(!(_la === 377 || _la === 378)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commentStr(): CommentStrContext {
        let localContext = new CommentStrContext(this.context, this.state);
        this.enterRule(localContext, 402, SparkSqlParser.RULE_commentStr);
        try {
            this.state = 4001;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.STRING_LITERAL:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3999;
                this.stringLit();
                }
                break;
            case SparkSqlParser.KW_NULL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4000;
                this.match(SparkSqlParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public version(): VersionContext {
        let localContext = new VersionContext(this.context, this.state);
        this.enterRule(localContext, 404, SparkSqlParser.RULE_version);
        try {
            this.state = 4005;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case SparkSqlParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4003;
                this.match(SparkSqlParser.INTEGER_VALUE);
                }
                break;
            case SparkSqlParser.STRING_LITERAL:
            case SparkSqlParser.DOUBLEQUOTED_STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4004;
                this.stringLit();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ansiNonReserved(): AnsiNonReservedContext {
        let localContext = new AnsiNonReservedContext(this.context, this.state);
        this.enterRule(localContext, 406, SparkSqlParser.RULE_ansiNonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4007;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4017011456) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 1711111143) !== 0) || ((((_la - 67)) & ~0x1F) === 0 && ((1 << (_la - 67)) & 3187671039) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 1328796669) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 3316086655) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 1610612735) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4020201927) !== 0) || ((((_la - 231)) & ~0x1F) === 0 && ((1 << (_la - 231)) & 4294442751) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 3758088175) !== 0) || ((((_la - 296)) & ~0x1F) === 0 && ((1 << (_la - 296)) & 3355402191) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 15892455) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public strictNonReserved(): StrictNonReservedContext {
        let localContext = new StrictNonReservedContext(this.context, this.state);
        this.enterRule(localContext, 408, SparkSqlParser.RULE_strictNonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4009;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 60 || _la === 102 || _la === 124 || ((((_la - 144)) & ~0x1F) === 0 && ((1 << (_la - 144)) & 149521) !== 0) || _la === 194 || _la === 203 || ((((_la - 250)) & ~0x1F) === 0 && ((1 << (_la - 250)) & 1064961) !== 0) || _la === 323 || _la === 332)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 410, SparkSqlParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4011;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294934272) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4026531839) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3892314047) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 3085893631) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967293) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294965227) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4227858431) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294950527) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967263) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294963191) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 46:
            return this.columnName_sempred(localContext as ColumnNameContext, predIndex);
        case 52:
            return this.queryTerm_sempred(localContext as QueryTermContext, predIndex);
        case 144:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 146:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 148:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        }
        return true;
    }
    private columnName_sempred(localContext: ColumnNameContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.shouldMatchEmpty();
        }
        return true;
    }
    private queryTerm_sempred(localContext: QueryTermContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 1:
            return this.precpred(this.context, 3);
        case 2:
            return this.precpred(this.context, 2);
        case 3:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 4:
            return this.precpred(this.context, 2);
        case 5:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 6:
            return this.precpred(this.context, 6);
        case 7:
            return this.precpred(this.context, 5);
        case 8:
            return this.precpred(this.context, 4);
        case 9:
            return this.precpred(this.context, 3);
        case 10:
            return this.precpred(this.context, 2);
        case 11:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 12:
            return this.precpred(this.context, 9);
        case 13:
            return this.precpred(this.context, 7);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,393,4014,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,1,0,5,0,414,8,0,10,0,12,0,417,
        9,0,1,0,1,0,1,1,1,1,3,1,423,8,1,1,2,1,2,3,2,427,8,2,1,2,1,2,1,2,
        3,2,432,8,2,1,2,1,2,1,2,1,2,1,2,3,2,439,8,2,1,2,1,2,1,2,3,2,444,
        8,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,452,8,2,10,2,12,2,455,9,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,473,
        8,2,1,2,1,2,3,2,477,8,2,1,2,1,2,1,2,1,2,3,2,483,8,2,1,2,3,2,486,
        8,2,1,2,3,2,489,8,2,1,2,1,2,1,2,1,2,1,2,3,2,496,8,2,1,2,3,2,499,
        8,2,1,2,1,2,3,2,503,8,2,1,2,3,2,506,8,2,1,2,1,2,1,2,3,2,511,8,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,523,8,2,10,2,12,2,526,
        9,2,1,2,1,2,1,2,1,2,1,2,3,2,533,8,2,1,2,3,2,536,8,2,1,2,1,2,3,2,
        540,8,2,1,2,3,2,543,8,2,1,2,1,2,1,2,1,2,3,2,549,8,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,3,2,560,8,2,1,2,1,2,1,2,1,2,3,2,566,8,2,
        1,2,1,2,1,2,3,2,571,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,3,2,604,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        3,2,614,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,625,8,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,636,8,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,3,2,647,8,2,1,2,1,2,1,2,3,2,652,8,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,3,2,661,8,2,1,2,1,2,3,2,665,8,2,1,2,1,2,1,2,1,2,
        3,2,671,8,2,1,2,1,2,3,2,675,8,2,1,2,1,2,1,2,3,2,680,8,2,1,2,1,2,
        1,2,1,2,3,2,686,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        698,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,706,8,2,1,2,1,2,1,2,1,2,3,2,
        712,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,723,8,2,1,2,1,2,
        3,2,727,8,2,1,2,4,2,730,8,2,11,2,12,2,731,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,747,8,2,1,2,1,2,3,2,751,8,2,1,
        2,1,2,1,2,5,2,756,8,2,10,2,12,2,759,9,2,1,2,3,2,762,8,2,1,2,1,2,
        1,2,1,2,3,2,768,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        3,2,797,8,2,1,2,1,2,3,2,801,8,2,1,2,1,2,1,2,3,2,806,8,2,1,2,1,2,
        1,2,1,2,1,2,3,2,813,8,2,1,2,1,2,1,2,1,2,3,2,819,8,2,1,2,3,2,822,
        8,2,1,2,3,2,825,8,2,1,2,1,2,3,2,829,8,2,1,2,1,2,3,2,833,8,2,1,2,
        1,2,1,2,1,2,1,2,1,2,5,2,841,8,2,10,2,12,2,844,9,2,1,2,1,2,1,2,1,
        2,1,2,1,2,3,2,852,8,2,1,2,3,2,855,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,3,2,864,8,2,1,2,1,2,1,2,3,2,869,8,2,1,2,1,2,1,2,1,2,3,2,875,8,
        2,1,2,1,2,1,2,1,2,1,2,3,2,882,8,2,1,2,3,2,885,8,2,1,2,1,2,3,2,889,
        8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,898,8,2,10,2,12,2,901,9,2,3,
        2,903,8,2,1,2,1,2,1,2,1,2,3,2,909,8,2,1,2,1,2,3,2,913,8,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,928,8,2,10,2,12,
        2,931,9,2,1,2,1,2,1,2,1,2,1,2,3,2,938,8,2,1,2,1,2,3,2,942,8,2,1,
        2,1,2,1,2,1,2,3,2,948,8,2,1,2,3,2,951,8,2,1,2,1,2,3,2,955,8,2,1,
        2,3,2,958,8,2,1,2,1,2,1,2,1,2,3,2,964,8,2,1,2,1,2,1,2,3,2,969,8,
        2,1,2,1,2,3,2,973,8,2,1,2,1,2,1,2,1,2,1,2,3,2,980,8,2,1,2,3,2,983,
        8,2,1,2,3,2,986,8,2,1,2,1,2,1,2,1,2,1,2,3,2,993,8,2,1,2,1,2,1,2,
        3,2,998,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1007,8,2,1,2,1,2,1,2,
        1,2,1,2,1,2,3,2,1015,8,2,1,2,1,2,1,2,1,2,3,2,1021,8,2,1,2,3,2,1024,
        8,2,1,2,3,2,1027,8,2,1,2,1,2,1,2,1,2,3,2,1033,8,2,1,2,1,2,3,2,1037,
        8,2,1,2,1,2,1,2,3,2,1042,8,2,1,2,3,2,1045,8,2,1,2,1,2,3,2,1049,8,
        2,3,2,1051,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1059,8,2,1,2,1,2,1,2,
        1,2,1,2,1,2,3,2,1067,8,2,1,2,3,2,1070,8,2,1,2,1,2,1,2,1,2,1,2,3,
        2,1077,8,2,1,2,3,2,1080,8,2,1,2,3,2,1083,8,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,3,2,1092,8,2,1,2,1,2,1,2,3,2,1097,8,2,1,2,1,2,1,2,1,2,3,
        2,1103,8,2,1,2,1,2,1,2,3,2,1108,8,2,1,2,3,2,1111,8,2,1,2,1,2,3,2,
        1115,8,2,1,2,3,2,1118,8,2,1,2,1,2,3,2,1122,8,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,5,2,1148,8,2,10,2,12,2,1151,9,2,3,2,1153,8,2,1,2,1,
        2,1,2,1,2,1,2,1,2,3,2,1161,8,2,1,2,1,2,1,2,1,2,3,2,1167,8,2,1,2,
        3,2,1170,8,2,1,2,3,2,1173,8,2,1,2,1,2,1,2,3,2,1178,8,2,1,2,1,2,1,
        2,1,2,1,2,1,2,3,2,1186,8,2,1,2,1,2,1,2,3,2,1191,8,2,1,2,1,2,1,2,
        1,2,3,2,1197,8,2,1,2,1,2,1,2,1,2,3,2,1203,8,2,1,2,3,2,1206,8,2,1,
        2,1,2,1,2,1,2,1,2,3,2,1213,8,2,1,2,1,2,1,2,5,2,1218,8,2,10,2,12,
        2,1221,9,2,1,2,1,2,1,2,5,2,1226,8,2,10,2,12,2,1229,9,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,1243,8,2,10,2,12,2,1246,
        9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,1270,8,2,10,2,12,2,1273,9,2,3,2,
        1275,8,2,1,2,1,2,5,2,1279,8,2,10,2,12,2,1282,9,2,1,2,1,2,1,2,1,2,
        5,2,1288,8,2,10,2,12,2,1291,9,2,1,2,1,2,1,2,1,2,5,2,1297,8,2,10,
        2,12,2,1300,9,2,1,2,1,2,1,2,3,2,1305,8,2,1,2,1,2,1,2,3,2,1310,8,
        2,1,2,1,2,1,2,3,2,1315,8,2,1,2,1,2,1,2,1,2,1,2,3,2,1322,8,2,1,2,
        1,2,1,2,3,2,1327,8,2,1,2,1,2,1,2,3,2,1332,8,2,1,2,1,2,1,2,1,2,1,
        2,3,2,1339,8,2,1,2,1,2,1,2,1,2,5,2,1345,8,2,10,2,12,2,1348,9,2,3,
        2,1350,8,2,1,3,1,3,3,3,1354,8,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,
        1,6,1,6,3,6,1366,8,6,1,6,1,6,3,6,1370,8,6,1,6,1,6,1,6,1,6,1,6,3,
        6,1377,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,3,6,1493,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1501,
        8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1509,8,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,3,6,1518,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1528,8,6,1,
        7,1,7,3,7,1532,8,7,1,7,3,7,1535,8,7,1,7,1,7,3,7,1539,8,7,1,7,1,7,
        1,8,1,8,3,8,1545,8,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,
        1557,8,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,1569,
        8,10,1,10,1,10,1,10,3,10,1574,8,10,1,11,1,11,1,11,1,12,1,12,1,12,
        1,13,3,13,1583,8,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,1591,8,14,
        1,14,1,14,1,14,3,14,1596,8,14,3,14,1598,8,14,1,14,1,14,1,14,1,14,
        1,14,1,14,3,14,1606,8,14,1,14,1,14,1,14,3,14,1611,8,14,1,14,1,14,
        3,14,1615,8,14,1,14,3,14,1618,8,14,1,14,1,14,1,14,1,14,1,14,1,14,
        3,14,1626,8,14,1,14,1,14,1,14,3,14,1631,8,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,3,14,1640,8,14,1,14,1,14,1,14,3,14,1645,8,14,1,14,
        3,14,1648,8,14,1,14,1,14,1,14,3,14,1653,8,14,1,14,1,14,3,14,1657,
        8,14,1,14,1,14,1,14,3,14,1662,8,14,3,14,1664,8,14,1,15,1,15,3,15,
        1668,8,15,1,16,1,16,1,16,1,16,1,16,5,16,1675,8,16,10,16,12,16,1678,
        9,16,1,16,1,16,1,17,1,17,1,17,3,17,1685,8,17,1,17,1,17,1,17,1,17,
        3,17,1691,8,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,
        1702,8,20,1,21,1,21,1,21,5,21,1707,8,21,10,21,12,21,1710,9,21,1,
        22,1,22,1,22,1,22,5,22,1716,8,22,10,22,12,22,1719,9,22,1,23,1,23,
        3,23,1723,8,23,1,23,3,23,1726,8,23,1,23,1,23,1,23,1,23,1,24,1,24,
        1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,5,25,1749,8,25,10,25,12,25,1752,9,25,1,26,1,26,1,26,1,
        27,1,27,1,27,1,27,5,27,1761,8,27,10,27,12,27,1764,9,27,1,27,1,27,
        1,28,1,28,3,28,1770,8,28,1,28,3,28,1773,8,28,1,29,1,29,1,29,5,29,
        1778,8,29,10,29,12,29,1781,9,29,1,29,3,29,1784,8,29,1,30,1,30,1,
        30,1,30,3,30,1790,8,30,1,31,1,31,1,31,1,31,5,31,1796,8,31,10,31,
        12,31,1799,9,31,1,31,1,31,1,32,1,32,3,32,1805,8,32,1,32,3,32,1808,
        8,32,1,33,1,33,1,33,1,33,5,33,1814,8,33,10,33,12,33,1817,9,33,1,
        33,1,33,1,34,1,34,1,34,1,34,5,34,1825,8,34,10,34,12,34,1828,9,34,
        1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1838,8,35,1,36,1,36,
        1,36,1,36,1,36,1,36,3,36,1846,8,36,1,37,1,37,1,37,1,37,3,37,1852,
        8,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,4,39,1862,8,39,11,39,
        12,39,1863,1,39,1,39,1,39,1,39,1,39,3,39,1871,8,39,1,39,1,39,1,39,
        1,39,1,39,3,39,1878,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,3,39,1890,8,39,1,39,1,39,1,39,1,39,5,39,1896,8,39,10,39,
        12,39,1899,9,39,1,39,5,39,1902,8,39,10,39,12,39,1905,9,39,1,39,5,
        39,1908,8,39,10,39,12,39,1911,9,39,3,39,1913,8,39,1,40,1,40,1,41,
        1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,3,46,1929,
        8,46,1,47,1,47,1,47,5,47,1934,8,47,10,47,12,47,1937,9,47,1,48,1,
        48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1947,8,49,1,50,1,50,1,50,1,
        50,1,50,5,50,1954,8,50,10,50,12,50,1957,9,50,3,50,1959,8,50,1,50,
        1,50,1,50,1,50,1,50,5,50,1966,8,50,10,50,12,50,1969,9,50,3,50,1971,
        8,50,1,50,1,50,1,50,1,50,1,50,5,50,1978,8,50,10,50,12,50,1981,9,
        50,3,50,1983,8,50,1,50,1,50,1,50,1,50,1,50,5,50,1990,8,50,10,50,
        12,50,1993,9,50,3,50,1995,8,50,1,50,3,50,1998,8,50,1,50,1,50,1,50,
        3,50,2003,8,50,3,50,2005,8,50,1,50,1,50,3,50,2009,8,50,1,51,1,51,
        1,51,1,52,1,52,1,52,1,52,1,52,1,52,3,52,2020,8,52,1,52,1,52,1,52,
        1,52,3,52,2026,8,52,1,52,1,52,1,52,1,52,3,52,2032,8,52,1,52,5,52,
        2035,8,52,10,52,12,52,2038,9,52,1,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,5,53,2048,8,53,10,53,12,53,2051,9,53,1,53,1,53,1,53,1,53,
        1,53,1,53,3,53,2059,8,53,1,54,1,54,3,54,2063,8,54,1,54,3,54,2066,
        8,54,1,54,1,54,3,54,2070,8,54,1,55,1,55,4,55,2074,8,55,11,55,12,
        55,2075,1,56,1,56,3,56,2080,8,56,1,56,1,56,1,56,1,56,5,56,2086,8,
        56,10,56,12,56,2089,9,56,1,56,3,56,2092,8,56,1,56,3,56,2095,8,56,
        1,56,3,56,2098,8,56,1,56,3,56,2101,8,56,1,56,1,56,3,56,2105,8,56,
        1,57,1,57,3,57,2109,8,57,1,57,5,57,2112,8,57,10,57,12,57,2115,9,
        57,1,57,3,57,2118,8,57,1,57,3,57,2121,8,57,1,57,3,57,2124,8,57,1,
        57,3,57,2127,8,57,1,57,1,57,3,57,2131,8,57,1,57,5,57,2134,8,57,10,
        57,12,57,2137,9,57,1,57,3,57,2140,8,57,1,57,3,57,2143,8,57,1,57,
        3,57,2146,8,57,1,57,3,57,2149,8,57,3,57,2151,8,57,1,58,1,58,1,58,
        1,58,3,58,2157,8,58,1,58,1,58,1,58,1,58,1,58,3,58,2164,8,58,1,58,
        1,58,1,58,3,58,2169,8,58,1,58,3,58,2172,8,58,1,58,3,58,2175,8,58,
        1,58,1,58,3,58,2179,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
        3,58,2189,8,58,1,58,1,58,3,58,2193,8,58,3,58,2195,8,58,1,58,3,58,
        2198,8,58,1,58,1,58,3,58,2202,8,58,1,59,1,59,5,59,2206,8,59,10,59,
        12,59,2209,9,59,1,59,3,59,2212,8,59,1,59,1,59,1,60,1,60,1,60,1,61,
        1,61,1,61,1,61,3,61,2223,8,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,
        1,62,3,62,2233,8,62,1,62,1,62,3,62,2237,8,62,1,62,1,62,1,62,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,3,63,2249,8,63,1,63,1,63,1,63,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,3,64,2261,8,64,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,5,65,2274,8,65,10,65,12,65,2277,
        9,65,1,65,1,65,3,65,2281,8,65,1,66,1,66,1,66,1,66,3,66,2287,8,66,
        1,67,1,67,1,67,5,67,2292,8,67,10,67,12,67,2295,9,67,1,68,1,68,1,
        68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,3,71,2310,8,
        71,1,71,5,71,2313,8,71,10,71,12,71,2316,9,71,1,71,1,71,1,72,1,72,
        1,72,1,72,1,72,1,72,5,72,2326,8,72,10,72,12,72,2329,9,72,1,72,1,
        72,3,72,2333,8,72,1,73,1,73,1,73,1,73,5,73,2339,8,73,10,73,12,73,
        2342,9,73,1,73,5,73,2345,8,73,10,73,12,73,2348,9,73,1,73,3,73,2351,
        8,73,1,73,3,73,2354,8,73,1,74,1,74,1,75,3,75,2359,8,75,1,75,1,75,
        1,75,1,75,1,75,3,75,2366,8,75,1,75,1,75,1,75,1,75,3,75,2372,8,75,
        1,76,1,76,1,76,1,76,1,76,5,76,2379,8,76,10,76,12,76,2382,9,76,1,
        76,1,76,1,76,1,76,1,76,5,76,2389,8,76,10,76,12,76,2392,9,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,5,76,2404,8,76,10,76,
        12,76,2407,9,76,1,76,1,76,3,76,2411,8,76,3,76,2413,8,76,1,77,1,77,
        1,77,3,77,2418,8,77,1,78,1,78,1,78,1,78,1,78,5,78,2425,8,78,10,78,
        12,78,2428,9,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,5,78,2438,
        8,78,10,78,12,78,2441,9,78,1,78,1,78,3,78,2445,8,78,1,79,1,79,3,
        79,2449,8,79,1,80,1,80,1,80,1,80,1,80,3,80,2456,8,80,1,80,1,80,1,
        80,3,80,2461,8,80,5,80,2463,8,80,10,80,12,80,2466,9,80,3,80,2468,
        8,80,1,80,3,80,2471,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,5,81,2483,8,81,10,81,12,81,2486,9,81,1,81,1,81,1,81,1,
        82,1,82,1,82,1,82,1,82,5,82,2496,8,82,10,82,12,82,2499,9,82,1,82,
        1,82,3,82,2503,8,82,1,83,1,83,3,83,2507,8,83,1,83,3,83,2510,8,83,
        1,84,1,84,3,84,2514,8,84,1,84,1,84,1,84,1,84,3,84,2520,8,84,1,84,
        3,84,2523,8,84,1,85,1,85,1,85,1,86,1,86,3,86,2530,8,86,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,5,87,2540,8,87,10,87,12,87,2543,9,
        87,1,87,1,87,1,88,1,88,1,88,1,88,5,88,2551,8,88,10,88,12,88,2554,
        9,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,5,88,2564,8,88,10,88,
        12,88,2567,9,88,1,88,1,88,1,89,1,89,1,89,1,89,5,89,2575,8,89,10,
        89,12,89,2578,9,89,1,89,1,89,3,89,2582,8,89,1,90,1,90,1,91,1,91,
        1,92,1,92,3,92,2590,8,92,1,93,1,93,1,94,3,94,2595,8,94,1,94,1,94,
        1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,97,1,97,1,97,3,97,2609,8,97,
        1,97,1,97,1,97,1,97,1,97,5,97,2616,8,97,10,97,12,97,2619,9,97,3,
        97,2621,8,97,1,97,1,97,1,97,3,97,2626,8,97,1,97,1,97,1,97,5,97,2631,
        8,97,10,97,12,97,2634,9,97,3,97,2636,8,97,1,98,1,98,1,99,1,99,3,
        99,2642,8,99,1,99,1,99,5,99,2646,8,99,10,99,12,99,2649,9,99,3,99,
        2651,8,99,1,100,1,100,1,100,3,100,2656,8,100,1,101,1,101,1,101,3,
        101,2661,8,101,1,101,1,101,3,101,2665,8,101,1,101,1,101,1,101,1,
        101,3,101,2671,8,101,1,101,1,101,3,101,2675,8,101,1,102,3,102,2678,
        8,102,1,102,1,102,1,102,3,102,2683,8,102,1,102,3,102,2686,8,102,
        1,102,1,102,1,102,3,102,2691,8,102,1,102,1,102,3,102,2695,8,102,
        1,102,3,102,2698,8,102,1,102,3,102,2701,8,102,1,103,1,103,1,103,
        1,103,3,103,2707,8,103,1,104,1,104,1,104,3,104,2712,8,104,1,104,
        1,104,1,104,1,104,1,104,3,104,2719,8,104,1,105,3,105,2722,8,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,3,105,2740,8,105,3,105,2742,8,105,
        1,105,3,105,2745,8,105,1,106,1,106,1,106,1,106,1,107,1,107,1,107,
        5,107,2754,8,107,10,107,12,107,2757,9,107,1,108,1,108,1,108,1,108,
        5,108,2763,8,108,10,108,12,108,2766,9,108,1,108,1,108,1,109,1,109,
        3,109,2772,8,109,1,110,1,110,1,110,1,110,5,110,2778,8,110,10,110,
        12,110,2781,9,110,1,110,1,110,1,111,1,111,3,111,2787,8,111,1,112,
        1,112,1,112,3,112,2792,8,112,1,112,3,112,2795,8,112,1,112,3,112,
        2798,8,112,1,112,1,112,1,112,1,112,3,112,2804,8,112,1,112,1,112,
        1,112,1,112,1,112,1,112,3,112,2812,8,112,1,112,1,112,1,112,1,112,
        1,112,1,112,3,112,2820,8,112,1,113,1,113,1,113,1,113,1,114,1,114,
        1,114,1,114,5,114,2830,8,114,10,114,12,114,2833,9,114,1,115,1,115,
        1,115,3,115,2838,8,115,1,115,1,115,1,115,1,115,1,115,3,115,2845,
        8,115,1,115,1,115,1,115,1,115,1,115,3,115,2852,8,115,3,115,2854,
        8,115,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,5,116,
        2865,8,116,10,116,12,116,2868,9,116,1,116,1,116,1,116,3,116,2873,
        8,116,3,116,2875,8,116,1,116,1,116,1,116,1,116,1,116,1,116,5,116,
        2883,8,116,10,116,12,116,2886,9,116,1,116,1,116,1,116,3,116,2891,
        8,116,3,116,2893,8,116,1,117,1,117,1,117,1,117,1,118,1,118,3,118,
        2901,8,118,1,119,1,119,3,119,2905,8,119,1,120,1,120,1,120,1,121,
        1,121,1,121,1,121,1,121,5,121,2915,8,121,10,121,12,121,2918,9,121,
        3,121,2920,8,121,1,121,1,121,1,122,3,122,2925,8,122,1,122,1,122,
        3,122,2929,8,122,3,122,2931,8,122,1,123,1,123,1,123,1,123,1,123,
        1,123,1,123,3,123,2940,8,123,1,123,1,123,1,123,1,123,1,123,1,123,
        1,123,1,123,1,123,1,123,3,123,2952,8,123,3,123,2954,8,123,1,123,
        1,123,1,123,1,123,1,123,3,123,2961,8,123,1,123,1,123,1,123,1,123,
        1,123,3,123,2968,8,123,1,123,1,123,1,123,1,123,3,123,2974,8,123,
        1,123,1,123,1,123,1,123,3,123,2980,8,123,3,123,2982,8,123,1,124,
        1,124,1,124,5,124,2987,8,124,10,124,12,124,2990,9,124,1,125,1,125,
        1,125,5,125,2995,8,125,10,125,12,125,2998,9,125,1,126,1,126,1,126,
        5,126,3003,8,126,10,126,12,126,3006,9,126,1,127,1,127,1,127,3,127,
        3011,8,127,1,128,1,128,1,128,3,128,3016,8,128,1,128,1,128,1,129,
        1,129,1,129,3,129,3023,8,129,1,129,1,129,1,130,1,130,1,131,1,131,
        1,132,1,132,1,132,5,132,3034,8,132,10,132,12,132,3037,9,132,1,132,
        1,132,1,133,1,133,1,133,3,133,3044,8,133,1,133,3,133,3047,8,133,
        1,133,1,133,3,133,3051,8,133,3,133,3053,8,133,1,134,1,134,1,134,
        5,134,3058,8,134,10,134,12,134,3061,9,134,1,135,1,135,1,136,1,136,
        1,136,1,136,5,136,3069,8,136,10,136,12,136,3072,9,136,1,136,1,136,
        1,137,1,137,3,137,3078,8,137,1,138,1,138,1,138,1,138,1,138,1,138,
        5,138,3086,8,138,10,138,12,138,3089,9,138,1,138,1,138,3,138,3093,
        8,138,1,139,1,139,3,139,3097,8,139,1,140,1,140,1,141,1,141,1,141,
        1,141,1,142,1,142,3,142,3107,8,142,1,143,1,143,1,143,5,143,3112,
        8,143,10,143,12,143,3115,9,143,1,144,1,144,1,144,1,144,1,144,1,144,
        1,144,1,144,1,144,1,144,3,144,3127,8,144,3,144,3129,8,144,1,144,
        1,144,1,144,1,144,1,144,1,144,5,144,3137,8,144,10,144,12,144,3140,
        9,144,1,145,3,145,3143,8,145,1,145,1,145,1,145,1,145,1,145,1,145,
        3,145,3151,8,145,1,145,1,145,1,145,1,145,1,145,5,145,3158,8,145,
        10,145,12,145,3161,9,145,1,145,1,145,1,145,3,145,3166,8,145,1,145,
        1,145,1,145,1,145,1,145,1,145,3,145,3174,8,145,1,145,1,145,1,145,
        3,145,3179,8,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,
        5,145,3189,8,145,10,145,12,145,3192,9,145,1,145,1,145,3,145,3196,
        8,145,1,145,3,145,3199,8,145,1,145,1,145,1,145,1,145,3,145,3205,
        8,145,1,145,1,145,3,145,3209,8,145,1,145,1,145,1,145,3,145,3214,
        8,145,1,145,1,145,1,145,3,145,3219,8,145,1,145,1,145,1,145,3,145,
        3224,8,145,1,146,1,146,1,146,1,146,3,146,3230,8,146,1,146,1,146,
        1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,
        1,146,1,146,1,146,1,146,1,146,1,146,5,146,3251,8,146,10,146,12,146,
        3254,9,146,1,147,1,147,1,148,1,148,1,148,1,148,1,148,1,148,3,148,
        3264,8,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,3,148,3276,8,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,4,148,3286,8,148,11,148,12,148,3287,1,148,1,148,3,148,3292,
        8,148,1,148,1,148,1,148,1,148,1,148,4,148,3299,8,148,11,148,12,148,
        3300,1,148,1,148,3,148,3305,8,148,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,5,148,3321,
        8,148,10,148,12,148,3324,9,148,3,148,3326,8,148,1,148,1,148,1,148,
        1,148,1,148,1,148,3,148,3334,8,148,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,3,148,3343,8,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,3,148,3352,8,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,4,148,3373,8,148,11,148,12,148,3374,1,148,1,148,1,148,1,148,
        1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,3,148,
        3391,8,148,1,148,1,148,1,148,5,148,3396,8,148,10,148,12,148,3399,
        9,148,3,148,3401,8,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        3,148,3410,8,148,1,148,1,148,3,148,3414,8,148,1,148,1,148,3,148,
        3418,8,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,4,148,
        3428,8,148,11,148,12,148,3429,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,1,148,1,148,1,148,1,148,3,148,3455,8,148,1,148,1,148,
        1,148,1,148,1,148,3,148,3462,8,148,1,148,3,148,3465,8,148,1,148,
        1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,3,148,3480,8,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,3,148,3501,8,148,1,148,1,148,3,148,3505,8,148,3,148,3507,8,
        148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,5,148,3517,8,
        148,10,148,12,148,3520,9,148,1,149,1,149,1,149,1,149,1,149,1,149,
        1,149,3,149,3529,8,149,1,150,1,150,1,150,1,150,1,150,1,150,1,150,
        1,150,1,150,1,150,1,150,4,150,3542,8,150,11,150,12,150,3543,3,150,
        3546,8,150,1,151,1,151,1,152,1,152,1,153,1,153,1,154,1,154,1,155,
        1,155,1,155,3,155,3559,8,155,1,156,1,156,3,156,3563,8,156,1,157,
        1,157,1,157,4,157,3568,8,157,11,157,12,157,3569,1,158,1,158,1,158,
        3,158,3575,8,158,1,159,1,159,1,159,1,159,1,159,1,160,3,160,3583,
        8,160,1,160,1,160,1,160,3,160,3588,8,160,1,161,1,161,1,162,1,162,
        1,163,1,163,1,163,3,163,3597,8,163,1,164,1,164,1,164,1,164,1,164,
        1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
        1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
        1,164,1,164,1,164,3,164,3629,8,164,1,165,1,165,1,165,1,165,1,165,
        1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,3,165,
        3646,8,165,1,165,1,165,3,165,3650,8,165,1,165,1,165,1,165,1,165,
        3,165,3656,8,165,1,165,1,165,1,165,1,165,3,165,3662,8,165,1,165,
        1,165,1,165,1,165,1,165,5,165,3669,8,165,10,165,12,165,3672,9,165,
        1,165,3,165,3675,8,165,3,165,3677,8,165,1,166,1,166,1,166,5,166,
        3682,8,166,10,166,12,166,3685,9,166,1,167,1,167,1,167,5,167,3690,
        8,167,10,167,12,167,3693,9,167,1,168,1,168,1,168,5,168,3698,8,168,
        10,168,12,168,3701,9,168,1,169,1,169,1,169,5,169,3706,8,169,10,169,
        12,169,3709,9,169,1,170,1,170,1,170,1,170,1,170,3,170,3716,8,170,
        1,171,1,171,1,171,1,172,1,172,1,172,1,173,1,173,1,173,5,173,3727,
        8,173,10,173,12,173,3730,9,173,1,174,1,174,1,174,1,174,3,174,3736,
        8,174,1,174,3,174,3739,8,174,1,175,1,175,1,175,5,175,3744,8,175,
        10,175,12,175,3747,9,175,1,176,1,176,1,176,5,176,3752,8,176,10,176,
        12,176,3755,9,176,1,177,1,177,1,177,1,177,1,177,3,177,3762,8,177,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,179,1,179,1,179,5,179,
        3774,8,179,10,179,12,179,3777,9,179,1,180,1,180,3,180,3781,8,180,
        1,180,1,180,1,180,3,180,3786,8,180,1,180,3,180,3789,8,180,1,181,
        1,181,1,181,1,181,1,181,1,182,1,182,1,182,1,182,5,182,3800,8,182,
        10,182,12,182,3803,9,182,1,183,1,183,1,183,1,183,1,184,1,184,1,184,
        1,184,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
        1,185,5,185,3824,8,185,10,185,12,185,3827,9,185,1,185,1,185,1,185,
        1,185,1,185,5,185,3834,8,185,10,185,12,185,3837,9,185,3,185,3839,
        8,185,1,185,1,185,1,185,1,185,1,185,5,185,3846,8,185,10,185,12,185,
        3849,9,185,3,185,3851,8,185,3,185,3853,8,185,1,185,3,185,3856,8,
        185,1,185,3,185,3859,8,185,1,186,1,186,1,186,1,186,1,186,1,186,1,
        186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,
        3877,8,186,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3886,
        8,187,1,188,1,188,1,188,5,188,3891,8,188,10,188,12,188,3894,9,188,
        1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,3905,
        8,189,1,190,1,190,1,191,1,191,1,191,5,191,3912,8,191,10,191,12,191,
        3915,9,191,1,192,1,192,1,192,1,193,1,193,4,193,3922,8,193,11,193,
        12,193,3923,1,193,3,193,3927,8,193,1,194,1,194,3,194,3931,8,194,
        1,195,1,195,1,195,1,195,3,195,3937,8,195,1,196,1,196,1,197,1,197,
        1,198,3,198,3944,8,198,1,198,1,198,3,198,3948,8,198,1,198,1,198,
        3,198,3952,8,198,1,198,1,198,3,198,3956,8,198,1,198,1,198,3,198,
        3960,8,198,1,198,1,198,3,198,3964,8,198,1,198,1,198,3,198,3968,8,
        198,1,198,1,198,3,198,3972,8,198,1,198,1,198,3,198,3976,8,198,1,
        198,1,198,3,198,3980,8,198,1,198,3,198,3983,8,198,1,199,1,199,1,
        199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,3,199,3996,8,
        199,1,200,1,200,1,201,1,201,3,201,4002,8,201,1,202,1,202,3,202,4006,
        8,202,1,203,1,203,1,204,1,204,1,205,1,205,1,205,9,1149,1219,1227,
        1244,1271,1280,1289,1298,1346,4,104,288,292,296,206,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
        292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
        324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
        356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
        388,390,392,394,396,398,400,402,404,406,408,410,0,64,2,0,78,78,229,
        229,2,0,34,34,247,247,2,0,123,123,140,140,2,0,11,11,39,39,2,0,91,
        91,98,98,5,0,46,46,58,58,108,108,122,122,173,173,1,0,86,87,2,0,108,
        108,122,122,3,0,8,8,96,96,289,289,2,0,8,8,167,167,1,0,335,336,3,
        0,72,72,190,190,261,261,3,0,73,73,191,191,262,262,4,0,102,102,148,
        148,270,270,323,323,3,0,102,102,270,270,323,323,2,0,21,21,86,86,
        2,0,116,116,157,157,3,0,10,10,290,290,331,331,2,0,292,292,337,337,
        2,0,291,291,303,303,2,0,61,61,256,256,2,0,104,104,141,141,2,0,10,
        10,92,92,2,0,382,382,384,384,2,0,93,93,217,217,2,0,209,209,278,278,
        2,0,197,197,360,360,1,0,251,252,1,0,163,164,3,0,10,10,16,16,277,
        277,3,0,111,111,316,316,325,325,2,0,361,362,366,366,2,0,94,94,363,
        365,2,0,361,362,369,369,11,0,67,67,69,69,134,134,180,180,182,182,
        184,184,186,186,231,231,259,259,341,341,348,348,4,0,63,63,65,66,
        268,268,331,331,2,0,74,75,306,306,3,0,76,77,302,302,307,307,2,0,
        36,36,318,318,2,0,138,138,246,246,1,0,287,288,2,0,4,4,123,123,2,
        0,4,4,119,119,3,0,28,28,160,160,311,311,1,0,220,221,1,0,352,359,
        2,0,94,94,361,370,4,0,14,14,140,140,197,197,208,208,2,0,111,111,
        316,316,1,0,361,362,7,0,67,68,134,135,180,187,192,193,259,260,341,
        342,348,349,6,0,67,67,134,134,184,184,186,186,259,259,348,348,2,
        0,186,186,348,348,4,0,67,67,134,134,184,184,259,259,3,0,134,134,
        184,184,259,259,2,0,82,82,352,352,2,0,118,118,226,226,2,0,378,378,
        389,389,1,0,383,384,2,0,96,96,269,269,1,0,377,378,52,0,8,9,11,13,
        15,15,17,19,21,22,24,27,29,34,37,41,43,46,48,48,50,56,58,58,61,62,
        67,91,93,96,98,98,101,101,103,110,113,113,115,118,121,122,125,128,
        131,131,133,139,141,143,145,147,149,151,154,154,156,157,159,159,
        163,193,195,195,199,201,205,207,210,210,212,213,215,219,222,226,
        228,238,240,249,251,262,264,267,269,276,278,292,294,299,302,308,
        310,310,312,322,326,330,333,342,345,345,348,351,16,0,15,15,60,60,
        102,102,124,124,144,144,148,148,155,155,158,158,161,161,194,194,
        203,203,250,250,264,264,270,270,323,323,332,332,19,0,8,14,16,59,
        61,101,103,122,125,143,145,147,149,154,156,157,159,160,162,193,195,
        195,197,202,204,249,251,262,265,269,271,292,294,322,324,331,333,
        351,4626,0,415,1,0,0,0,2,420,1,0,0,0,4,1349,1,0,0,0,6,1353,1,0,0,
        0,8,1355,1,0,0,0,10,1357,1,0,0,0,12,1527,1,0,0,0,14,1529,1,0,0,0,
        16,1544,1,0,0,0,18,1550,1,0,0,0,20,1562,1,0,0,0,22,1575,1,0,0,0,
        24,1578,1,0,0,0,26,1582,1,0,0,0,28,1663,1,0,0,0,30,1665,1,0,0,0,
        32,1669,1,0,0,0,34,1690,1,0,0,0,36,1692,1,0,0,0,38,1694,1,0,0,0,
        40,1701,1,0,0,0,42,1703,1,0,0,0,44,1711,1,0,0,0,46,1720,1,0,0,0,
        48,1731,1,0,0,0,50,1750,1,0,0,0,52,1753,1,0,0,0,54,1756,1,0,0,0,
        56,1767,1,0,0,0,58,1783,1,0,0,0,60,1789,1,0,0,0,62,1791,1,0,0,0,
        64,1802,1,0,0,0,66,1809,1,0,0,0,68,1820,1,0,0,0,70,1837,1,0,0,0,
        72,1845,1,0,0,0,74,1847,1,0,0,0,76,1853,1,0,0,0,78,1912,1,0,0,0,
        80,1914,1,0,0,0,82,1916,1,0,0,0,84,1918,1,0,0,0,86,1920,1,0,0,0,
        88,1922,1,0,0,0,90,1924,1,0,0,0,92,1928,1,0,0,0,94,1930,1,0,0,0,
        96,1938,1,0,0,0,98,1946,1,0,0,0,100,1958,1,0,0,0,102,2010,1,0,0,
        0,104,2013,1,0,0,0,106,2058,1,0,0,0,108,2062,1,0,0,0,110,2071,1,
        0,0,0,112,2104,1,0,0,0,114,2150,1,0,0,0,116,2171,1,0,0,0,118,2203,
        1,0,0,0,120,2215,1,0,0,0,122,2218,1,0,0,0,124,2227,1,0,0,0,126,2241,
        1,0,0,0,128,2260,1,0,0,0,130,2280,1,0,0,0,132,2286,1,0,0,0,134,2288,
        1,0,0,0,136,2296,1,0,0,0,138,2300,1,0,0,0,140,2303,1,0,0,0,142,2306,
        1,0,0,0,144,2332,1,0,0,0,146,2334,1,0,0,0,148,2355,1,0,0,0,150,2371,
        1,0,0,0,152,2412,1,0,0,0,154,2417,1,0,0,0,156,2444,1,0,0,0,158,2448,
        1,0,0,0,160,2470,1,0,0,0,162,2472,1,0,0,0,164,2502,1,0,0,0,166,2504,
        1,0,0,0,168,2511,1,0,0,0,170,2524,1,0,0,0,172,2529,1,0,0,0,174,2531,
        1,0,0,0,176,2546,1,0,0,0,178,2570,1,0,0,0,180,2583,1,0,0,0,182,2585,
        1,0,0,0,184,2587,1,0,0,0,186,2591,1,0,0,0,188,2594,1,0,0,0,190,2598,
        1,0,0,0,192,2602,1,0,0,0,194,2605,1,0,0,0,196,2637,1,0,0,0,198,2650,
        1,0,0,0,200,2655,1,0,0,0,202,2674,1,0,0,0,204,2700,1,0,0,0,206,2706,
        1,0,0,0,208,2708,1,0,0,0,210,2744,1,0,0,0,212,2746,1,0,0,0,214,2750,
        1,0,0,0,216,2758,1,0,0,0,218,2769,1,0,0,0,220,2773,1,0,0,0,222,2784,
        1,0,0,0,224,2819,1,0,0,0,226,2821,1,0,0,0,228,2825,1,0,0,0,230,2853,
        1,0,0,0,232,2874,1,0,0,0,234,2894,1,0,0,0,236,2900,1,0,0,0,238,2904,
        1,0,0,0,240,2906,1,0,0,0,242,2909,1,0,0,0,244,2930,1,0,0,0,246,2981,
        1,0,0,0,248,2983,1,0,0,0,250,2991,1,0,0,0,252,2999,1,0,0,0,254,3007,
        1,0,0,0,256,3015,1,0,0,0,258,3022,1,0,0,0,260,3026,1,0,0,0,262,3028,
        1,0,0,0,264,3035,1,0,0,0,266,3043,1,0,0,0,268,3054,1,0,0,0,270,3062,
        1,0,0,0,272,3064,1,0,0,0,274,3077,1,0,0,0,276,3092,1,0,0,0,278,3096,
        1,0,0,0,280,3098,1,0,0,0,282,3100,1,0,0,0,284,3106,1,0,0,0,286,3108,
        1,0,0,0,288,3128,1,0,0,0,290,3223,1,0,0,0,292,3229,1,0,0,0,294,3255,
        1,0,0,0,296,3506,1,0,0,0,298,3528,1,0,0,0,300,3545,1,0,0,0,302,3547,
        1,0,0,0,304,3549,1,0,0,0,306,3551,1,0,0,0,308,3553,1,0,0,0,310,3555,
        1,0,0,0,312,3560,1,0,0,0,314,3567,1,0,0,0,316,3571,1,0,0,0,318,3576,
        1,0,0,0,320,3582,1,0,0,0,322,3589,1,0,0,0,324,3591,1,0,0,0,326,3596,
        1,0,0,0,328,3628,1,0,0,0,330,3676,1,0,0,0,332,3678,1,0,0,0,334,3686,
        1,0,0,0,336,3694,1,0,0,0,338,3702,1,0,0,0,340,3715,1,0,0,0,342,3717,
        1,0,0,0,344,3720,1,0,0,0,346,3723,1,0,0,0,348,3731,1,0,0,0,350,3740,
        1,0,0,0,352,3748,1,0,0,0,354,3761,1,0,0,0,356,3763,1,0,0,0,358,3770,
        1,0,0,0,360,3778,1,0,0,0,362,3790,1,0,0,0,364,3795,1,0,0,0,366,3804,
        1,0,0,0,368,3808,1,0,0,0,370,3858,1,0,0,0,372,3876,1,0,0,0,374,3885,
        1,0,0,0,376,3887,1,0,0,0,378,3904,1,0,0,0,380,3906,1,0,0,0,382,3908,
        1,0,0,0,384,3916,1,0,0,0,386,3926,1,0,0,0,388,3930,1,0,0,0,390,3936,
        1,0,0,0,392,3938,1,0,0,0,394,3940,1,0,0,0,396,3982,1,0,0,0,398,3995,
        1,0,0,0,400,3997,1,0,0,0,402,4001,1,0,0,0,404,4005,1,0,0,0,406,4007,
        1,0,0,0,408,4009,1,0,0,0,410,4011,1,0,0,0,412,414,3,2,1,0,413,412,
        1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,
        1,0,0,0,417,415,1,0,0,0,418,419,5,0,0,1,419,1,1,0,0,0,420,422,3,
        4,2,0,421,423,5,1,0,0,422,421,1,0,0,0,422,423,1,0,0,0,423,3,1,0,
        0,0,424,1350,3,26,13,0,425,427,3,44,22,0,426,425,1,0,0,0,426,427,
        1,0,0,0,427,428,1,0,0,0,428,1350,3,78,39,0,429,431,5,330,0,0,430,
        432,3,36,18,0,431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,
        1350,3,80,40,0,434,435,5,269,0,0,435,438,5,37,0,0,436,439,3,388,
        194,0,437,439,3,400,200,0,438,436,1,0,0,0,438,437,1,0,0,0,439,1350,
        1,0,0,0,440,441,5,59,0,0,441,443,3,36,18,0,442,444,3,190,95,0,443,
        442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,453,3,82,41,0,446,
        452,3,24,12,0,447,452,3,22,11,0,448,449,5,346,0,0,449,450,7,0,0,
        0,450,452,3,54,27,0,451,446,1,0,0,0,451,447,1,0,0,0,451,448,1,0,
        0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,1350,1,0,
        0,0,455,453,1,0,0,0,456,457,5,11,0,0,457,458,3,36,18,0,458,459,3,
        80,40,0,459,460,5,269,0,0,460,461,7,0,0,0,461,462,3,54,27,0,462,
        1350,1,0,0,0,463,464,5,11,0,0,464,465,3,36,18,0,465,466,3,80,40,
        0,466,467,5,269,0,0,467,468,3,22,11,0,468,1350,1,0,0,0,469,470,5,
        96,0,0,470,472,3,36,18,0,471,473,3,192,96,0,472,471,1,0,0,0,472,
        473,1,0,0,0,473,474,1,0,0,0,474,476,3,80,40,0,475,477,7,1,0,0,476,
        475,1,0,0,0,476,477,1,0,0,0,477,1350,1,0,0,0,478,479,5,273,0,0,479,
        482,3,38,19,0,480,481,7,2,0,0,481,483,3,250,125,0,482,480,1,0,0,
        0,482,483,1,0,0,0,483,488,1,0,0,0,484,486,5,163,0,0,485,484,1,0,
        0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,489,3,400,200,0,488,485,
        1,0,0,0,488,489,1,0,0,0,489,1350,1,0,0,0,490,495,3,14,7,0,491,492,
        5,2,0,0,492,493,3,350,175,0,493,494,5,3,0,0,494,496,1,0,0,0,495,
        491,1,0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,497,499,3,48,24,0,498,
        497,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,505,3,50,25,0,501,
        503,5,20,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,
        506,3,26,13,0,505,502,1,0,0,0,505,506,1,0,0,0,506,1350,1,0,0,0,507,
        508,5,59,0,0,508,510,5,293,0,0,509,511,3,190,95,0,510,509,1,0,0,
        0,510,511,1,0,0,0,511,512,1,0,0,0,512,513,3,84,42,0,513,514,5,163,
        0,0,514,524,3,86,43,0,515,523,3,48,24,0,516,523,3,246,123,0,517,
        523,3,70,35,0,518,523,3,22,11,0,519,520,5,297,0,0,520,523,3,54,27,
        0,521,523,3,52,26,0,522,515,1,0,0,0,522,516,1,0,0,0,522,517,1,0,
        0,0,522,518,1,0,0,0,522,519,1,0,0,0,522,521,1,0,0,0,523,526,1,0,
        0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,1350,1,0,0,0,526,524,1,0,
        0,0,527,532,3,16,8,0,528,529,5,2,0,0,529,530,3,350,175,0,530,531,
        5,3,0,0,531,533,1,0,0,0,532,528,1,0,0,0,532,533,1,0,0,0,533,535,
        1,0,0,0,534,536,3,48,24,0,535,534,1,0,0,0,535,536,1,0,0,0,536,537,
        1,0,0,0,537,542,3,50,25,0,538,540,5,20,0,0,539,538,1,0,0,0,539,540,
        1,0,0,0,540,541,1,0,0,0,541,543,3,26,13,0,542,539,1,0,0,0,542,543,
        1,0,0,0,543,1350,1,0,0,0,544,545,5,13,0,0,545,546,5,293,0,0,546,
        548,3,86,43,0,547,549,3,32,16,0,548,547,1,0,0,0,548,549,1,0,0,0,
        549,550,1,0,0,0,550,551,5,55,0,0,551,559,5,282,0,0,552,560,5,196,
        0,0,553,554,5,119,0,0,554,555,5,50,0,0,555,560,3,94,47,0,556,557,
        5,119,0,0,557,558,5,10,0,0,558,560,5,50,0,0,559,552,1,0,0,0,559,
        553,1,0,0,0,559,556,1,0,0,0,559,560,1,0,0,0,560,1350,1,0,0,0,561,
        562,5,13,0,0,562,565,5,294,0,0,563,564,7,2,0,0,564,566,3,80,40,0,
        565,563,1,0,0,0,565,566,1,0,0,0,566,567,1,0,0,0,567,568,5,55,0,0,
        568,570,5,282,0,0,569,571,5,196,0,0,570,569,1,0,0,0,570,571,1,0,
        0,0,571,1350,1,0,0,0,572,573,5,11,0,0,573,574,5,293,0,0,574,575,
        3,86,43,0,575,576,5,8,0,0,576,577,5,49,0,0,577,578,3,334,167,0,578,
        1350,1,0,0,0,579,580,5,11,0,0,580,581,5,293,0,0,581,582,3,86,43,
        0,582,583,5,8,0,0,583,584,5,50,0,0,584,585,5,2,0,0,585,586,3,332,
        166,0,586,587,5,3,0,0,587,1350,1,0,0,0,588,589,5,11,0,0,589,590,
        5,293,0,0,590,591,3,86,43,0,591,592,5,241,0,0,592,593,5,49,0,0,593,
        594,3,92,46,0,594,595,5,309,0,0,595,596,3,96,48,0,596,1350,1,0,0,
        0,597,598,5,11,0,0,598,599,5,293,0,0,599,600,3,86,43,0,600,601,5,
        96,0,0,601,603,5,49,0,0,602,604,3,192,96,0,603,602,1,0,0,0,603,604,
        1,0,0,0,604,605,1,0,0,0,605,606,3,92,46,0,606,1350,1,0,0,0,607,608,
        5,11,0,0,608,609,5,293,0,0,609,610,3,86,43,0,610,611,5,96,0,0,611,
        613,5,50,0,0,612,614,3,192,96,0,613,612,1,0,0,0,613,614,1,0,0,0,
        614,615,1,0,0,0,615,616,5,2,0,0,616,617,3,94,47,0,617,618,5,3,0,
        0,618,1350,1,0,0,0,619,624,5,11,0,0,620,621,5,293,0,0,621,625,3,
        86,43,0,622,623,5,338,0,0,623,625,3,90,45,0,624,620,1,0,0,0,624,
        622,1,0,0,0,625,626,1,0,0,0,626,627,5,241,0,0,627,628,5,309,0,0,
        628,629,3,250,125,0,629,1350,1,0,0,0,630,635,5,11,0,0,631,632,5,
        293,0,0,632,636,3,86,43,0,633,634,5,338,0,0,634,636,3,90,45,0,635,
        631,1,0,0,0,635,633,1,0,0,0,636,637,1,0,0,0,637,638,5,269,0,0,638,
        639,5,297,0,0,639,640,3,54,27,0,640,1350,1,0,0,0,641,646,5,11,0,
        0,642,643,5,293,0,0,643,647,3,86,43,0,644,645,5,338,0,0,645,647,
        3,90,45,0,646,642,1,0,0,0,646,644,1,0,0,0,647,648,1,0,0,0,648,649,
        5,328,0,0,649,651,5,297,0,0,650,652,3,192,96,0,651,650,1,0,0,0,651,
        652,1,0,0,0,652,653,1,0,0,0,653,654,3,54,27,0,654,1350,1,0,0,0,655,
        656,5,11,0,0,656,657,5,293,0,0,657,658,3,86,43,0,658,660,7,3,0,0,
        659,661,5,49,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,662,1,0,0,0,
        662,664,3,92,46,0,663,665,3,398,199,0,664,663,1,0,0,0,664,665,1,
        0,0,0,665,1350,1,0,0,0,666,667,5,11,0,0,667,668,5,293,0,0,668,670,
        3,86,43,0,669,671,3,32,16,0,670,669,1,0,0,0,670,671,1,0,0,0,671,
        672,1,0,0,0,672,674,5,39,0,0,673,675,5,49,0,0,674,673,1,0,0,0,674,
        675,1,0,0,0,675,676,1,0,0,0,676,677,3,92,46,0,677,679,3,348,174,
        0,678,680,3,326,163,0,679,678,1,0,0,0,679,680,1,0,0,0,680,1350,1,
        0,0,0,681,682,5,11,0,0,682,683,5,293,0,0,683,685,3,86,43,0,684,686,
        3,32,16,0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,687,688,
        5,244,0,0,688,689,5,50,0,0,689,690,5,2,0,0,690,691,3,336,168,0,691,
        692,5,3,0,0,692,1350,1,0,0,0,693,694,5,11,0,0,694,695,5,293,0,0,
        695,697,3,86,43,0,696,698,3,32,16,0,697,696,1,0,0,0,697,698,1,0,
        0,0,698,699,1,0,0,0,699,700,5,269,0,0,700,701,5,266,0,0,701,705,
        3,400,200,0,702,703,5,346,0,0,703,704,5,267,0,0,704,706,3,54,27,
        0,705,702,1,0,0,0,705,706,1,0,0,0,706,1350,1,0,0,0,707,708,5,11,
        0,0,708,709,5,293,0,0,709,711,3,86,43,0,710,712,3,32,16,0,711,710,
        1,0,0,0,711,712,1,0,0,0,712,713,1,0,0,0,713,714,5,269,0,0,714,715,
        5,267,0,0,715,716,3,54,27,0,716,1350,1,0,0,0,717,722,5,11,0,0,718,
        719,5,293,0,0,719,723,3,86,43,0,720,721,5,338,0,0,721,723,3,90,45,
        0,722,718,1,0,0,0,722,720,1,0,0,0,723,724,1,0,0,0,724,726,5,8,0,
        0,725,727,3,190,95,0,726,725,1,0,0,0,726,727,1,0,0,0,727,729,1,0,
        0,0,728,730,3,30,15,0,729,728,1,0,0,0,730,731,1,0,0,0,731,729,1,
        0,0,0,731,732,1,0,0,0,732,1350,1,0,0,0,733,734,5,11,0,0,734,735,
        5,293,0,0,735,736,3,86,43,0,736,737,3,32,16,0,737,738,5,241,0,0,
        738,739,5,309,0,0,739,740,3,32,16,0,740,1350,1,0,0,0,741,746,5,11,
        0,0,742,743,5,293,0,0,743,747,3,86,43,0,744,745,5,338,0,0,745,747,
        3,90,45,0,746,742,1,0,0,0,746,744,1,0,0,0,747,748,1,0,0,0,748,750,
        5,96,0,0,749,751,3,192,96,0,750,749,1,0,0,0,750,751,1,0,0,0,751,
        752,1,0,0,0,752,757,3,32,16,0,753,754,5,4,0,0,754,756,3,32,16,0,
        755,753,1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,
        758,761,1,0,0,0,759,757,1,0,0,0,760,762,5,230,0,0,761,760,1,0,0,
        0,761,762,1,0,0,0,762,1350,1,0,0,0,763,764,5,11,0,0,764,765,5,293,
        0,0,765,767,3,86,43,0,766,768,3,32,16,0,767,766,1,0,0,0,767,768,
        1,0,0,0,768,769,1,0,0,0,769,770,5,269,0,0,770,771,3,22,11,0,771,
        1350,1,0,0,0,772,773,5,11,0,0,773,774,5,293,0,0,774,775,3,86,43,
        0,775,776,5,237,0,0,776,777,5,219,0,0,777,1350,1,0,0,0,778,779,5,
        11,0,0,779,780,5,176,0,0,780,781,5,338,0,0,781,782,3,90,45,0,782,
        783,7,4,0,0,783,784,5,248,0,0,784,1350,1,0,0,0,785,786,5,11,0,0,
        786,787,5,176,0,0,787,788,5,338,0,0,788,789,3,90,45,0,789,790,5,
        269,0,0,790,791,5,297,0,0,791,792,3,54,27,0,792,1350,1,0,0,0,793,
        794,5,96,0,0,794,796,5,293,0,0,795,797,3,192,96,0,796,795,1,0,0,
        0,796,797,1,0,0,0,797,798,1,0,0,0,798,800,3,86,43,0,799,801,5,230,
        0,0,800,799,1,0,0,0,800,801,1,0,0,0,801,1350,1,0,0,0,802,803,5,96,
        0,0,803,805,5,338,0,0,804,806,3,192,96,0,805,804,1,0,0,0,805,806,
        1,0,0,0,806,807,1,0,0,0,807,1350,3,90,45,0,808,809,5,96,0,0,809,
        810,5,176,0,0,810,812,5,338,0,0,811,813,3,192,96,0,812,811,1,0,0,
        0,812,813,1,0,0,0,813,814,1,0,0,0,814,1350,3,90,45,0,815,818,5,59,
        0,0,816,817,5,208,0,0,817,819,5,244,0,0,818,816,1,0,0,0,818,819,
        1,0,0,0,819,824,1,0,0,0,820,822,5,128,0,0,821,820,1,0,0,0,821,822,
        1,0,0,0,822,823,1,0,0,0,823,825,5,298,0,0,824,821,1,0,0,0,824,825,
        1,0,0,0,825,826,1,0,0,0,826,828,5,338,0,0,827,829,3,190,95,0,828,
        827,1,0,0,0,828,829,1,0,0,0,829,830,1,0,0,0,830,832,3,88,44,0,831,
        833,3,220,110,0,832,831,1,0,0,0,832,833,1,0,0,0,833,842,1,0,0,0,
        834,841,3,24,12,0,835,836,5,218,0,0,836,837,5,203,0,0,837,841,3,
        212,106,0,838,839,5,297,0,0,839,841,3,54,27,0,840,834,1,0,0,0,840,
        835,1,0,0,0,840,838,1,0,0,0,841,844,1,0,0,0,842,840,1,0,0,0,842,
        843,1,0,0,0,843,845,1,0,0,0,844,842,1,0,0,0,845,846,5,20,0,0,846,
        847,3,26,13,0,847,1350,1,0,0,0,848,851,5,59,0,0,849,850,5,208,0,
        0,850,852,5,244,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,854,1,0,
        0,0,853,855,5,128,0,0,854,853,1,0,0,0,854,855,1,0,0,0,855,856,1,
        0,0,0,856,857,5,298,0,0,857,858,5,338,0,0,858,863,3,88,44,0,859,
        860,5,2,0,0,860,861,3,346,173,0,861,862,5,3,0,0,862,864,1,0,0,0,
        863,859,1,0,0,0,863,864,1,0,0,0,864,865,1,0,0,0,865,868,3,48,24,
        0,866,867,5,207,0,0,867,869,3,54,27,0,868,866,1,0,0,0,868,869,1,
        0,0,0,869,1350,1,0,0,0,870,871,5,11,0,0,871,872,5,338,0,0,872,874,
        3,90,45,0,873,875,5,20,0,0,874,873,1,0,0,0,874,875,1,0,0,0,875,876,
        1,0,0,0,876,877,3,26,13,0,877,1350,1,0,0,0,878,881,5,59,0,0,879,
        880,5,208,0,0,880,882,5,244,0,0,881,879,1,0,0,0,881,882,1,0,0,0,
        882,884,1,0,0,0,883,885,5,298,0,0,884,883,1,0,0,0,884,885,1,0,0,
        0,885,886,1,0,0,0,886,888,5,125,0,0,887,889,3,190,95,0,888,887,1,
        0,0,0,888,889,1,0,0,0,889,890,1,0,0,0,890,891,3,380,190,0,891,892,
        5,20,0,0,892,902,3,400,200,0,893,894,5,332,0,0,894,899,3,76,38,0,
        895,896,5,4,0,0,896,898,3,76,38,0,897,895,1,0,0,0,898,901,1,0,0,
        0,899,897,1,0,0,0,899,900,1,0,0,0,900,903,1,0,0,0,901,899,1,0,0,
        0,902,893,1,0,0,0,902,903,1,0,0,0,903,1350,1,0,0,0,904,905,5,59,
        0,0,905,906,5,176,0,0,906,908,5,338,0,0,907,909,3,190,95,0,908,907,
        1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,912,3,88,44,0,911,913,
        3,48,24,0,912,911,1,0,0,0,912,913,1,0,0,0,913,929,1,0,0,0,914,915,
        5,207,0,0,915,928,3,54,27,0,916,917,5,218,0,0,917,918,5,31,0,0,918,
        928,3,272,136,0,919,928,3,20,10,0,920,928,3,18,9,0,921,928,3,246,
        123,0,922,928,3,70,35,0,923,928,3,22,11,0,924,928,3,24,12,0,925,
        926,5,297,0,0,926,928,3,54,27,0,927,914,1,0,0,0,927,916,1,0,0,0,
        927,919,1,0,0,0,927,920,1,0,0,0,927,921,1,0,0,0,927,922,1,0,0,0,
        927,923,1,0,0,0,927,924,1,0,0,0,927,925,1,0,0,0,928,931,1,0,0,0,
        929,927,1,0,0,0,929,930,1,0,0,0,930,932,1,0,0,0,931,929,1,0,0,0,
        932,933,5,20,0,0,933,934,3,26,13,0,934,1350,1,0,0,0,935,937,5,96,
        0,0,936,938,5,298,0,0,937,936,1,0,0,0,937,938,1,0,0,0,938,939,1,
        0,0,0,939,941,5,125,0,0,940,942,3,192,96,0,941,940,1,0,0,0,941,942,
        1,0,0,0,942,943,1,0,0,0,943,1350,3,378,189,0,944,947,5,81,0,0,945,
        946,5,208,0,0,946,948,5,244,0,0,947,945,1,0,0,0,947,948,1,0,0,0,
        948,950,1,0,0,0,949,951,5,336,0,0,950,949,1,0,0,0,950,951,1,0,0,
        0,951,952,1,0,0,0,952,954,3,378,189,0,953,955,3,330,165,0,954,953,
        1,0,0,0,954,955,1,0,0,0,955,957,1,0,0,0,956,958,3,344,172,0,957,
        956,1,0,0,0,957,958,1,0,0,0,958,1350,1,0,0,0,959,960,5,96,0,0,960,
        961,5,298,0,0,961,963,5,336,0,0,962,964,3,192,96,0,963,962,1,0,0,
        0,963,964,1,0,0,0,964,968,1,0,0,0,965,969,3,86,43,0,966,969,3,90,
        45,0,967,969,3,378,189,0,968,965,1,0,0,0,968,966,1,0,0,0,968,967,
        1,0,0,0,969,1350,1,0,0,0,970,972,5,106,0,0,971,973,7,5,0,0,972,971,
        1,0,0,0,972,973,1,0,0,0,973,974,1,0,0,0,974,1350,3,4,2,0,975,976,
        5,273,0,0,976,979,5,294,0,0,977,978,7,2,0,0,978,980,3,80,40,0,979,
        977,1,0,0,0,979,980,1,0,0,0,980,985,1,0,0,0,981,983,5,163,0,0,982,
        981,1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,986,3,400,200,0,
        985,982,1,0,0,0,985,986,1,0,0,0,986,1350,1,0,0,0,987,988,5,273,0,
        0,988,989,5,293,0,0,989,992,5,108,0,0,990,991,7,2,0,0,991,993,3,
        80,40,0,992,990,1,0,0,0,992,993,1,0,0,0,993,994,1,0,0,0,994,995,
        5,163,0,0,995,997,3,400,200,0,996,998,3,32,16,0,997,996,1,0,0,0,
        997,998,1,0,0,0,998,1350,1,0,0,0,999,1000,5,273,0,0,1000,1001,5,
        297,0,0,1001,1006,3,86,43,0,1002,1003,5,2,0,0,1003,1004,3,58,29,
        0,1004,1005,5,3,0,0,1005,1007,1,0,0,0,1006,1002,1,0,0,0,1006,1007,
        1,0,0,0,1007,1350,1,0,0,0,1008,1009,5,273,0,0,1009,1010,5,50,0,0,
        1010,1011,7,2,0,0,1011,1014,3,86,43,0,1012,1013,7,2,0,0,1013,1015,
        3,80,40,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,1350,1,0,0,0,
        1016,1017,5,273,0,0,1017,1020,5,339,0,0,1018,1019,7,2,0,0,1019,1021,
        3,80,40,0,1020,1018,1,0,0,0,1020,1021,1,0,0,0,1021,1026,1,0,0,0,
        1022,1024,5,163,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,
        1,0,0,0,1025,1027,3,400,200,0,1026,1023,1,0,0,0,1026,1027,1,0,0,
        0,1027,1350,1,0,0,0,1028,1029,5,273,0,0,1029,1030,5,219,0,0,1030,
        1032,3,86,43,0,1031,1033,3,32,16,0,1032,1031,1,0,0,0,1032,1033,1,
        0,0,0,1033,1350,1,0,0,0,1034,1036,5,273,0,0,1035,1037,3,148,74,0,
        1036,1035,1,0,0,0,1036,1037,1,0,0,0,1037,1038,1,0,0,0,1038,1041,
        5,126,0,0,1039,1040,7,2,0,0,1040,1042,3,80,40,0,1041,1039,1,0,0,
        0,1041,1042,1,0,0,0,1042,1050,1,0,0,0,1043,1045,5,163,0,0,1044,1043,
        1,0,0,0,1044,1045,1,0,0,0,1045,1048,1,0,0,0,1046,1049,3,250,125,
        0,1047,1049,3,400,200,0,1048,1046,1,0,0,0,1048,1047,1,0,0,0,1049,
        1051,1,0,0,0,1050,1044,1,0,0,0,1050,1051,1,0,0,0,1051,1350,1,0,0,
        0,1052,1053,5,273,0,0,1053,1054,5,59,0,0,1054,1055,5,293,0,0,1055,
        1058,3,86,43,0,1056,1057,5,20,0,0,1057,1059,5,266,0,0,1058,1056,
        1,0,0,0,1058,1059,1,0,0,0,1059,1350,1,0,0,0,1060,1061,5,273,0,0,
        1061,1062,5,62,0,0,1062,1350,3,36,18,0,1063,1064,5,273,0,0,1064,
        1069,5,38,0,0,1065,1067,5,163,0,0,1066,1065,1,0,0,0,1066,1067,1,
        0,0,0,1067,1068,1,0,0,0,1068,1070,3,400,200,0,1069,1066,1,0,0,0,
        1069,1070,1,0,0,0,1070,1350,1,0,0,0,1071,1072,5,273,0,0,1072,1073,
        5,176,0,0,1073,1076,5,339,0,0,1074,1075,7,2,0,0,1075,1077,3,80,40,
        0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1082,1,0,0,0,1078,1080,
        5,163,0,0,1079,1078,1,0,0,0,1079,1080,1,0,0,0,1080,1081,1,0,0,0,
        1081,1083,3,400,200,0,1082,1079,1,0,0,0,1082,1083,1,0,0,0,1083,1350,
        1,0,0,0,1084,1085,5,273,0,0,1085,1086,5,59,0,0,1086,1087,5,176,0,
        0,1087,1088,5,338,0,0,1088,1091,3,90,45,0,1089,1090,5,20,0,0,1090,
        1092,5,266,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,1350,1,0,
        0,0,1093,1094,7,6,0,0,1094,1096,5,125,0,0,1095,1097,5,108,0,0,1096,
        1095,1,0,0,0,1096,1097,1,0,0,0,1097,1098,1,0,0,0,1098,1350,3,40,
        20,0,1099,1100,7,6,0,0,1100,1102,5,72,0,0,1101,1103,5,108,0,0,1102,
        1101,1,0,0,0,1102,1103,1,0,0,0,1103,1104,1,0,0,0,1104,1350,3,80,
        40,0,1105,1107,7,6,0,0,1106,1108,5,293,0,0,1107,1106,1,0,0,0,1107,
        1108,1,0,0,0,1108,1110,1,0,0,0,1109,1111,7,7,0,0,1110,1109,1,0,0,
        0,1110,1111,1,0,0,0,1111,1112,1,0,0,0,1112,1114,3,86,43,0,1113,1115,
        3,32,16,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,1117,1,0,0,0,
        1116,1118,3,42,21,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1350,
        1,0,0,0,1119,1121,7,6,0,0,1120,1122,5,232,0,0,1121,1120,1,0,0,0,
        1121,1122,1,0,0,0,1122,1123,1,0,0,0,1123,1350,3,26,13,0,1124,1125,
        5,51,0,0,1125,1126,5,203,0,0,1126,1127,3,36,18,0,1127,1128,3,80,
        40,0,1128,1129,5,153,0,0,1129,1130,3,402,201,0,1130,1350,1,0,0,0,
        1131,1132,5,51,0,0,1132,1133,5,203,0,0,1133,1134,5,293,0,0,1134,
        1135,3,86,43,0,1135,1136,5,153,0,0,1136,1137,3,402,201,0,1137,1350,
        1,0,0,0,1138,1139,5,240,0,0,1139,1140,5,293,0,0,1140,1350,3,86,43,
        0,1141,1142,5,240,0,0,1142,1143,5,125,0,0,1143,1350,3,378,189,0,
        1144,1152,5,240,0,0,1145,1153,3,400,200,0,1146,1148,9,0,0,0,1147,
        1146,1,0,0,0,1148,1151,1,0,0,0,1149,1150,1,0,0,0,1149,1147,1,0,0,
        0,1150,1153,1,0,0,0,1151,1149,1,0,0,0,1152,1145,1,0,0,0,1152,1149,
        1,0,0,0,1153,1350,1,0,0,0,1154,1155,5,240,0,0,1155,1156,5,176,0,
        0,1156,1157,5,338,0,0,1157,1350,3,90,45,0,1158,1160,5,33,0,0,1159,
        1161,5,159,0,0,1160,1159,1,0,0,0,1160,1161,1,0,0,0,1161,1162,1,0,
        0,0,1162,1163,5,293,0,0,1163,1166,3,86,43,0,1164,1165,5,207,0,0,
        1165,1167,3,54,27,0,1166,1164,1,0,0,0,1166,1167,1,0,0,0,1167,1172,
        1,0,0,0,1168,1170,5,20,0,0,1169,1168,1,0,0,0,1169,1170,1,0,0,0,1170,
        1171,1,0,0,0,1171,1173,3,26,13,0,1172,1169,1,0,0,0,1172,1173,1,0,
        0,0,1173,1350,1,0,0,0,1174,1175,5,322,0,0,1175,1177,5,293,0,0,1176,
        1178,3,192,96,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1179,1,
        0,0,0,1179,1350,3,86,43,0,1180,1181,5,43,0,0,1181,1350,5,33,0,0,
        1182,1183,5,168,0,0,1183,1185,5,70,0,0,1184,1186,5,169,0,0,1185,
        1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,1188,5,145,
        0,0,1188,1190,3,400,200,0,1189,1191,5,216,0,0,1190,1189,1,0,0,0,
        1190,1191,1,0,0,0,1191,1192,1,0,0,0,1192,1193,5,152,0,0,1193,1194,
        5,293,0,0,1194,1196,3,86,43,0,1195,1197,3,32,16,0,1196,1195,1,0,
        0,0,1196,1197,1,0,0,0,1197,1350,1,0,0,0,1198,1199,5,317,0,0,1199,
        1200,5,293,0,0,1200,1202,3,86,43,0,1201,1203,3,32,16,0,1202,1201,
        1,0,0,0,1202,1203,1,0,0,0,1203,1350,1,0,0,0,1204,1206,5,188,0,0,
        1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1207,1,0,0,0,1207,1208,
        5,242,0,0,1208,1209,5,293,0,0,1209,1212,3,86,43,0,1210,1211,7,8,
        0,0,1211,1213,5,219,0,0,1212,1210,1,0,0,0,1212,1213,1,0,0,0,1213,
        1350,1,0,0,0,1214,1215,7,9,0,0,1215,1219,3,388,194,0,1216,1218,9,
        0,0,0,1217,1216,1,0,0,0,1218,1221,1,0,0,0,1219,1220,1,0,0,0,1219,
        1217,1,0,0,0,1220,1350,1,0,0,0,1221,1219,1,0,0,0,1222,1223,5,269,
        0,0,1223,1227,5,253,0,0,1224,1226,9,0,0,0,1225,1224,1,0,0,0,1226,
        1229,1,0,0,0,1227,1228,1,0,0,0,1227,1225,1,0,0,0,1228,1350,1,0,0,
        0,1229,1227,1,0,0,0,1230,1231,5,269,0,0,1231,1232,5,301,0,0,1232,
        1233,5,350,0,0,1233,1350,3,310,155,0,1234,1235,5,269,0,0,1235,1236,
        5,301,0,0,1236,1237,5,350,0,0,1237,1350,3,6,3,0,1238,1239,5,269,
        0,0,1239,1240,5,301,0,0,1240,1244,5,350,0,0,1241,1243,9,0,0,0,1242,
        1241,1,0,0,0,1243,1246,1,0,0,0,1244,1245,1,0,0,0,1244,1242,1,0,0,
        0,1245,1350,1,0,0,0,1246,1244,1,0,0,0,1247,1248,5,269,0,0,1248,1249,
        7,10,0,0,1249,1350,3,134,67,0,1250,1251,5,269,0,0,1251,1252,7,10,
        0,0,1252,1253,5,2,0,0,1253,1254,3,248,124,0,1254,1255,5,3,0,0,1255,
        1256,5,352,0,0,1256,1257,5,2,0,0,1257,1258,3,26,13,0,1258,1259,5,
        3,0,0,1259,1350,1,0,0,0,1260,1261,5,269,0,0,1261,1262,3,8,4,0,1262,
        1263,5,352,0,0,1263,1264,3,10,5,0,1264,1350,1,0,0,0,1265,1266,5,
        269,0,0,1266,1274,3,8,4,0,1267,1271,5,352,0,0,1268,1270,9,0,0,0,
        1269,1268,1,0,0,0,1270,1273,1,0,0,0,1271,1272,1,0,0,0,1271,1269,
        1,0,0,0,1272,1275,1,0,0,0,1273,1271,1,0,0,0,1274,1267,1,0,0,0,1274,
        1275,1,0,0,0,1275,1350,1,0,0,0,1276,1280,5,269,0,0,1277,1279,9,0,
        0,0,1278,1277,1,0,0,0,1279,1282,1,0,0,0,1280,1281,1,0,0,0,1280,1278,
        1,0,0,0,1281,1283,1,0,0,0,1282,1280,1,0,0,0,1283,1284,5,352,0,0,
        1284,1350,3,10,5,0,1285,1289,5,269,0,0,1286,1288,9,0,0,0,1287,1286,
        1,0,0,0,1288,1291,1,0,0,0,1289,1290,1,0,0,0,1289,1287,1,0,0,0,1290,
        1350,1,0,0,0,1291,1289,1,0,0,0,1292,1293,5,245,0,0,1293,1350,3,8,
        4,0,1294,1298,5,245,0,0,1295,1297,9,0,0,0,1296,1295,1,0,0,0,1297,
        1300,1,0,0,0,1298,1299,1,0,0,0,1298,1296,1,0,0,0,1299,1350,1,0,0,
        0,1300,1298,1,0,0,0,1301,1302,5,59,0,0,1302,1304,5,142,0,0,1303,
        1305,3,190,95,0,1304,1303,1,0,0,0,1304,1305,1,0,0,0,1305,1306,1,
        0,0,0,1306,1307,3,388,194,0,1307,1309,5,203,0,0,1308,1310,5,293,
        0,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1311,1,0,0,0,1311,1314,
        3,86,43,0,1312,1313,5,332,0,0,1313,1315,3,388,194,0,1314,1312,1,
        0,0,0,1314,1315,1,0,0,0,1315,1316,1,0,0,0,1316,1317,5,2,0,0,1317,
        1318,3,252,126,0,1318,1321,5,3,0,0,1319,1320,5,207,0,0,1320,1322,
        3,54,27,0,1321,1319,1,0,0,0,1321,1322,1,0,0,0,1322,1350,1,0,0,0,
        1323,1324,5,96,0,0,1324,1326,5,142,0,0,1325,1327,3,192,96,0,1326,
        1325,1,0,0,0,1326,1327,1,0,0,0,1327,1328,1,0,0,0,1328,1329,3,388,
        194,0,1329,1331,5,203,0,0,1330,1332,5,293,0,0,1331,1330,1,0,0,0,
        1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,1334,3,86,43,0,1334,1350,
        1,0,0,0,1335,1336,5,205,0,0,1336,1338,3,86,43,0,1337,1339,3,138,
        69,0,1338,1337,1,0,0,0,1338,1339,1,0,0,0,1339,1340,1,0,0,0,1340,
        1341,3,366,183,0,1341,1350,1,0,0,0,1342,1346,3,12,6,0,1343,1345,
        9,0,0,0,1344,1343,1,0,0,0,1345,1348,1,0,0,0,1346,1347,1,0,0,0,1346,
        1344,1,0,0,0,1347,1350,1,0,0,0,1348,1346,1,0,0,0,1349,424,1,0,0,
        0,1349,426,1,0,0,0,1349,429,1,0,0,0,1349,434,1,0,0,0,1349,440,1,
        0,0,0,1349,456,1,0,0,0,1349,463,1,0,0,0,1349,469,1,0,0,0,1349,478,
        1,0,0,0,1349,490,1,0,0,0,1349,507,1,0,0,0,1349,527,1,0,0,0,1349,
        544,1,0,0,0,1349,561,1,0,0,0,1349,572,1,0,0,0,1349,579,1,0,0,0,1349,
        588,1,0,0,0,1349,597,1,0,0,0,1349,607,1,0,0,0,1349,619,1,0,0,0,1349,
        630,1,0,0,0,1349,641,1,0,0,0,1349,655,1,0,0,0,1349,666,1,0,0,0,1349,
        681,1,0,0,0,1349,693,1,0,0,0,1349,707,1,0,0,0,1349,717,1,0,0,0,1349,
        733,1,0,0,0,1349,741,1,0,0,0,1349,763,1,0,0,0,1349,772,1,0,0,0,1349,
        778,1,0,0,0,1349,785,1,0,0,0,1349,793,1,0,0,0,1349,802,1,0,0,0,1349,
        808,1,0,0,0,1349,815,1,0,0,0,1349,848,1,0,0,0,1349,870,1,0,0,0,1349,
        878,1,0,0,0,1349,904,1,0,0,0,1349,935,1,0,0,0,1349,944,1,0,0,0,1349,
        959,1,0,0,0,1349,970,1,0,0,0,1349,975,1,0,0,0,1349,987,1,0,0,0,1349,
        999,1,0,0,0,1349,1008,1,0,0,0,1349,1016,1,0,0,0,1349,1028,1,0,0,
        0,1349,1034,1,0,0,0,1349,1052,1,0,0,0,1349,1060,1,0,0,0,1349,1063,
        1,0,0,0,1349,1071,1,0,0,0,1349,1084,1,0,0,0,1349,1093,1,0,0,0,1349,
        1099,1,0,0,0,1349,1105,1,0,0,0,1349,1119,1,0,0,0,1349,1124,1,0,0,
        0,1349,1131,1,0,0,0,1349,1138,1,0,0,0,1349,1141,1,0,0,0,1349,1144,
        1,0,0,0,1349,1154,1,0,0,0,1349,1158,1,0,0,0,1349,1174,1,0,0,0,1349,
        1180,1,0,0,0,1349,1182,1,0,0,0,1349,1198,1,0,0,0,1349,1205,1,0,0,
        0,1349,1214,1,0,0,0,1349,1222,1,0,0,0,1349,1230,1,0,0,0,1349,1234,
        1,0,0,0,1349,1238,1,0,0,0,1349,1247,1,0,0,0,1349,1250,1,0,0,0,1349,
        1260,1,0,0,0,1349,1265,1,0,0,0,1349,1276,1,0,0,0,1349,1285,1,0,0,
        0,1349,1292,1,0,0,0,1349,1294,1,0,0,0,1349,1301,1,0,0,0,1349,1323,
        1,0,0,0,1349,1335,1,0,0,0,1349,1342,1,0,0,0,1350,5,1,0,0,0,1351,
        1354,3,400,200,0,1352,1354,5,169,0,0,1353,1351,1,0,0,0,1353,1352,
        1,0,0,0,1354,7,1,0,0,0,1355,1356,3,392,196,0,1356,9,1,0,0,0,1357,
        1358,3,394,197,0,1358,11,1,0,0,0,1359,1360,5,59,0,0,1360,1528,5,
        253,0,0,1361,1362,5,96,0,0,1362,1528,5,253,0,0,1363,1365,5,129,0,
        0,1364,1366,5,253,0,0,1365,1364,1,0,0,0,1365,1366,1,0,0,0,1366,1528,
        1,0,0,0,1367,1369,5,249,0,0,1368,1370,5,253,0,0,1369,1368,1,0,0,
        0,1369,1370,1,0,0,0,1370,1528,1,0,0,0,1371,1372,5,273,0,0,1372,1528,
        5,129,0,0,1373,1374,5,273,0,0,1374,1376,5,253,0,0,1375,1377,5,129,
        0,0,1376,1375,1,0,0,0,1376,1377,1,0,0,0,1377,1528,1,0,0,0,1378,1379,
        5,273,0,0,1379,1528,5,228,0,0,1380,1381,5,273,0,0,1381,1528,5,254,
        0,0,1382,1383,5,273,0,0,1383,1384,5,62,0,0,1384,1528,5,254,0,0,1385,
        1386,5,107,0,0,1386,1528,5,293,0,0,1387,1388,5,139,0,0,1388,1528,
        5,293,0,0,1389,1390,5,273,0,0,1390,1528,5,54,0,0,1391,1392,5,273,
        0,0,1392,1393,5,59,0,0,1393,1528,5,293,0,0,1394,1395,5,273,0,0,1395,
        1528,5,313,0,0,1396,1397,5,273,0,0,1397,1528,5,143,0,0,1398,1399,
        5,273,0,0,1399,1528,5,172,0,0,1400,1401,5,59,0,0,1401,1528,5,142,
        0,0,1402,1403,5,96,0,0,1403,1528,5,142,0,0,1404,1405,5,11,0,0,1405,
        1528,5,142,0,0,1406,1407,5,171,0,0,1407,1528,5,293,0,0,1408,1409,
        5,171,0,0,1409,1528,5,72,0,0,1410,1411,5,326,0,0,1411,1528,5,293,
        0,0,1412,1413,5,326,0,0,1413,1528,5,72,0,0,1414,1415,5,59,0,0,1415,
        1416,5,298,0,0,1416,1528,5,175,0,0,1417,1418,5,96,0,0,1418,1419,
        5,298,0,0,1419,1528,5,175,0,0,1420,1421,5,11,0,0,1421,1422,5,293,
        0,0,1422,1423,3,86,43,0,1423,1424,5,197,0,0,1424,1425,5,45,0,0,1425,
        1528,1,0,0,0,1426,1427,5,11,0,0,1427,1428,5,293,0,0,1428,1429,3,
        86,43,0,1429,1430,5,45,0,0,1430,1431,5,31,0,0,1431,1528,1,0,0,0,
        1432,1433,5,11,0,0,1433,1434,5,293,0,0,1434,1435,3,86,43,0,1435,
        1436,5,197,0,0,1436,1437,5,279,0,0,1437,1528,1,0,0,0,1438,1439,5,
        11,0,0,1439,1440,5,293,0,0,1440,1441,3,86,43,0,1441,1442,5,275,0,
        0,1442,1443,5,31,0,0,1443,1528,1,0,0,0,1444,1445,5,11,0,0,1445,1446,
        5,293,0,0,1446,1447,3,86,43,0,1447,1448,5,197,0,0,1448,1449,5,275,
        0,0,1449,1528,1,0,0,0,1450,1451,5,11,0,0,1451,1452,5,293,0,0,1452,
        1453,3,86,43,0,1453,1454,5,197,0,0,1454,1455,5,283,0,0,1455,1456,
        5,20,0,0,1456,1457,5,89,0,0,1457,1528,1,0,0,0,1458,1459,5,11,0,0,
        1459,1460,5,293,0,0,1460,1461,3,86,43,0,1461,1462,5,269,0,0,1462,
        1463,5,275,0,0,1463,1464,5,170,0,0,1464,1528,1,0,0,0,1465,1466,5,
        11,0,0,1466,1467,5,293,0,0,1467,1468,3,86,43,0,1468,1469,5,103,0,
        0,1469,1470,5,217,0,0,1470,1528,1,0,0,0,1471,1472,5,11,0,0,1472,
        1473,5,293,0,0,1473,1474,3,86,43,0,1474,1475,5,18,0,0,1475,1476,
        5,217,0,0,1476,1528,1,0,0,0,1477,1478,5,11,0,0,1478,1479,5,293,0,
        0,1479,1480,3,86,43,0,1480,1481,5,320,0,0,1481,1482,5,217,0,0,1482,
        1528,1,0,0,0,1483,1484,5,11,0,0,1484,1485,5,293,0,0,1485,1486,3,
        86,43,0,1486,1487,5,310,0,0,1487,1528,1,0,0,0,1488,1489,5,11,0,0,
        1489,1490,5,293,0,0,1490,1492,3,86,43,0,1491,1493,3,32,16,0,1492,
        1491,1,0,0,0,1492,1493,1,0,0,0,1493,1494,1,0,0,0,1494,1495,5,53,
        0,0,1495,1528,1,0,0,0,1496,1497,5,11,0,0,1497,1498,5,293,0,0,1498,
        1500,3,86,43,0,1499,1501,3,32,16,0,1500,1499,1,0,0,0,1500,1501,1,
        0,0,0,1501,1502,1,0,0,0,1502,1503,5,56,0,0,1503,1528,1,0,0,0,1504,
        1505,5,11,0,0,1505,1506,5,293,0,0,1506,1508,3,86,43,0,1507,1509,
        3,32,16,0,1508,1507,1,0,0,0,1508,1509,1,0,0,0,1509,1510,1,0,0,0,
        1510,1511,5,269,0,0,1511,1512,5,115,0,0,1512,1528,1,0,0,0,1513,1514,
        5,11,0,0,1514,1515,5,293,0,0,1515,1517,3,86,43,0,1516,1518,3,32,
        16,0,1517,1516,1,0,0,0,1517,1518,1,0,0,0,1518,1519,1,0,0,0,1519,
        1520,5,244,0,0,1520,1521,5,50,0,0,1521,1528,1,0,0,0,1522,1523,5,
        281,0,0,1523,1528,5,312,0,0,1524,1528,5,52,0,0,1525,1528,5,255,0,
        0,1526,1528,5,88,0,0,1527,1359,1,0,0,0,1527,1361,1,0,0,0,1527,1363,
        1,0,0,0,1527,1367,1,0,0,0,1527,1371,1,0,0,0,1527,1373,1,0,0,0,1527,
        1378,1,0,0,0,1527,1380,1,0,0,0,1527,1382,1,0,0,0,1527,1385,1,0,0,
        0,1527,1387,1,0,0,0,1527,1389,1,0,0,0,1527,1391,1,0,0,0,1527,1394,
        1,0,0,0,1527,1396,1,0,0,0,1527,1398,1,0,0,0,1527,1400,1,0,0,0,1527,
        1402,1,0,0,0,1527,1404,1,0,0,0,1527,1406,1,0,0,0,1527,1408,1,0,0,
        0,1527,1410,1,0,0,0,1527,1412,1,0,0,0,1527,1414,1,0,0,0,1527,1417,
        1,0,0,0,1527,1420,1,0,0,0,1527,1426,1,0,0,0,1527,1432,1,0,0,0,1527,
        1438,1,0,0,0,1527,1444,1,0,0,0,1527,1450,1,0,0,0,1527,1458,1,0,0,
        0,1527,1465,1,0,0,0,1527,1471,1,0,0,0,1527,1477,1,0,0,0,1527,1483,
        1,0,0,0,1527,1488,1,0,0,0,1527,1496,1,0,0,0,1527,1504,1,0,0,0,1527,
        1513,1,0,0,0,1527,1522,1,0,0,0,1527,1524,1,0,0,0,1527,1525,1,0,0,
        0,1527,1526,1,0,0,0,1528,13,1,0,0,0,1529,1531,5,59,0,0,1530,1532,
        5,298,0,0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,1534,1,0,0,0,
        1533,1535,5,109,0,0,1534,1533,1,0,0,0,1534,1535,1,0,0,0,1535,1536,
        1,0,0,0,1536,1538,5,293,0,0,1537,1539,3,190,95,0,1538,1537,1,0,0,
        0,1538,1539,1,0,0,0,1539,1540,1,0,0,0,1540,1541,3,84,42,0,1541,15,
        1,0,0,0,1542,1543,5,59,0,0,1543,1545,5,208,0,0,1544,1542,1,0,0,0,
        1544,1545,1,0,0,0,1545,1546,1,0,0,0,1546,1547,5,244,0,0,1547,1548,
        5,293,0,0,1548,1549,3,84,42,0,1549,17,1,0,0,0,1550,1551,5,45,0,0,
        1551,1552,5,31,0,0,1552,1556,3,212,106,0,1553,1554,5,279,0,0,1554,
        1555,5,31,0,0,1555,1557,3,216,108,0,1556,1553,1,0,0,0,1556,1557,
        1,0,0,0,1557,1558,1,0,0,0,1558,1559,5,152,0,0,1559,1560,5,382,0,
        0,1560,1561,5,30,0,0,1561,19,1,0,0,0,1562,1563,5,275,0,0,1563,1564,
        5,31,0,0,1564,1565,3,212,106,0,1565,1568,5,203,0,0,1566,1569,3,66,
        33,0,1567,1569,3,68,34,0,1568,1566,1,0,0,0,1568,1567,1,0,0,0,1569,
        1573,1,0,0,0,1570,1571,5,283,0,0,1571,1572,5,20,0,0,1572,1574,5,
        89,0,0,1573,1570,1,0,0,0,1573,1574,1,0,0,0,1574,21,1,0,0,0,1575,
        1576,5,170,0,0,1576,1577,3,400,200,0,1577,23,1,0,0,0,1578,1579,5,
        51,0,0,1579,1580,3,400,200,0,1580,25,1,0,0,0,1581,1583,3,44,22,0,
        1582,1581,1,0,0,0,1582,1583,1,0,0,0,1583,1584,1,0,0,0,1584,1585,
        3,104,52,0,1585,1586,3,100,50,0,1586,27,1,0,0,0,1587,1588,5,147,
        0,0,1588,1590,5,216,0,0,1589,1591,5,293,0,0,1590,1589,1,0,0,0,1590,
        1591,1,0,0,0,1591,1592,1,0,0,0,1592,1597,3,86,43,0,1593,1595,3,32,
        16,0,1594,1596,3,190,95,0,1595,1594,1,0,0,0,1595,1596,1,0,0,0,1596,
        1598,1,0,0,0,1597,1593,1,0,0,0,1597,1598,1,0,0,0,1598,1605,1,0,0,
        0,1599,1600,5,31,0,0,1600,1606,5,189,0,0,1601,1602,5,2,0,0,1602,
        1603,3,94,47,0,1603,1604,5,3,0,0,1604,1606,1,0,0,0,1605,1599,1,0,
        0,0,1605,1601,1,0,0,0,1605,1606,1,0,0,0,1606,1664,1,0,0,0,1607,1608,
        5,147,0,0,1608,1610,5,152,0,0,1609,1611,5,293,0,0,1610,1609,1,0,
        0,0,1610,1611,1,0,0,0,1611,1612,1,0,0,0,1612,1614,3,86,43,0,1613,
        1615,3,32,16,0,1614,1613,1,0,0,0,1614,1615,1,0,0,0,1615,1617,1,0,
        0,0,1616,1618,3,190,95,0,1617,1616,1,0,0,0,1617,1618,1,0,0,0,1618,
        1625,1,0,0,0,1619,1620,5,31,0,0,1620,1626,5,189,0,0,1621,1622,5,
        2,0,0,1622,1623,3,94,47,0,1623,1624,5,3,0,0,1624,1626,1,0,0,0,1625,
        1619,1,0,0,0,1625,1621,1,0,0,0,1625,1626,1,0,0,0,1626,1664,1,0,0,
        0,1627,1628,5,147,0,0,1628,1630,5,152,0,0,1629,1631,5,293,0,0,1630,
        1629,1,0,0,0,1630,1631,1,0,0,0,1631,1632,1,0,0,0,1632,1633,3,86,
        43,0,1633,1634,5,244,0,0,1634,1635,3,138,69,0,1635,1664,1,0,0,0,
        1636,1637,5,147,0,0,1637,1639,5,216,0,0,1638,1640,5,169,0,0,1639,
        1638,1,0,0,0,1639,1640,1,0,0,0,1640,1641,1,0,0,0,1641,1642,5,90,
        0,0,1642,1644,3,400,200,0,1643,1645,3,246,123,0,1644,1643,1,0,0,
        0,1644,1645,1,0,0,0,1645,1647,1,0,0,0,1646,1648,3,70,35,0,1647,1646,
        1,0,0,0,1647,1648,1,0,0,0,1648,1664,1,0,0,0,1649,1650,5,147,0,0,
        1650,1652,5,216,0,0,1651,1653,5,169,0,0,1652,1651,1,0,0,0,1652,1653,
        1,0,0,0,1653,1654,1,0,0,0,1654,1656,5,90,0,0,1655,1657,3,400,200,
        0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,1658,1,0,0,0,1658,1661,
        3,48,24,0,1659,1660,5,207,0,0,1660,1662,3,54,27,0,1661,1659,1,0,
        0,0,1661,1662,1,0,0,0,1662,1664,1,0,0,0,1663,1587,1,0,0,0,1663,1607,
        1,0,0,0,1663,1627,1,0,0,0,1663,1636,1,0,0,0,1663,1649,1,0,0,0,1664,
        29,1,0,0,0,1665,1667,3,32,16,0,1666,1668,3,22,11,0,1667,1666,1,0,
        0,0,1667,1668,1,0,0,0,1668,31,1,0,0,0,1669,1670,5,217,0,0,1670,1671,
        5,2,0,0,1671,1676,3,34,17,0,1672,1673,5,4,0,0,1673,1675,3,34,17,
        0,1674,1672,1,0,0,0,1675,1678,1,0,0,0,1676,1674,1,0,0,0,1676,1677,
        1,0,0,0,1677,1679,1,0,0,0,1678,1676,1,0,0,0,1679,1680,5,3,0,0,1680,
        33,1,0,0,0,1681,1684,3,388,194,0,1682,1683,5,352,0,0,1683,1685,3,
        300,150,0,1684,1682,1,0,0,0,1684,1685,1,0,0,0,1685,1691,1,0,0,0,
        1686,1687,3,388,194,0,1687,1688,5,352,0,0,1688,1689,5,82,0,0,1689,
        1691,1,0,0,0,1690,1681,1,0,0,0,1690,1686,1,0,0,0,1691,35,1,0,0,0,
        1692,1693,7,11,0,0,1693,37,1,0,0,0,1694,1695,7,12,0,0,1695,39,1,
        0,0,0,1696,1702,3,98,49,0,1697,1702,3,400,200,0,1698,1702,3,302,
        151,0,1699,1702,3,304,152,0,1700,1702,3,306,153,0,1701,1696,1,0,
        0,0,1701,1697,1,0,0,0,1701,1698,1,0,0,0,1701,1699,1,0,0,0,1701,1700,
        1,0,0,0,1702,41,1,0,0,0,1703,1708,3,388,194,0,1704,1705,5,5,0,0,
        1705,1707,3,388,194,0,1706,1704,1,0,0,0,1707,1710,1,0,0,0,1708,1706,
        1,0,0,0,1708,1709,1,0,0,0,1709,43,1,0,0,0,1710,1708,1,0,0,0,1711,
        1712,5,346,0,0,1712,1717,3,46,23,0,1713,1714,5,4,0,0,1714,1716,3,
        46,23,0,1715,1713,1,0,0,0,1716,1719,1,0,0,0,1717,1715,1,0,0,0,1717,
        1718,1,0,0,0,1718,45,1,0,0,0,1719,1717,1,0,0,0,1720,1722,3,384,192,
        0,1721,1723,3,212,106,0,1722,1721,1,0,0,0,1722,1723,1,0,0,0,1723,
        1725,1,0,0,0,1724,1726,5,20,0,0,1725,1724,1,0,0,0,1725,1726,1,0,
        0,0,1726,1727,1,0,0,0,1727,1728,5,2,0,0,1728,1729,3,26,13,0,1729,
        1730,5,3,0,0,1730,47,1,0,0,0,1731,1732,5,332,0,0,1732,1733,3,250,
        125,0,1733,49,1,0,0,0,1734,1735,5,207,0,0,1735,1749,3,62,31,0,1736,
        1737,5,218,0,0,1737,1738,5,31,0,0,1738,1749,3,272,136,0,1739,1749,
        3,20,10,0,1740,1749,3,18,9,0,1741,1749,3,246,123,0,1742,1749,3,70,
        35,0,1743,1749,3,22,11,0,1744,1749,3,24,12,0,1745,1746,5,297,0,0,
        1746,1749,3,54,27,0,1747,1749,3,52,26,0,1748,1734,1,0,0,0,1748,1736,
        1,0,0,0,1748,1739,1,0,0,0,1748,1740,1,0,0,0,1748,1741,1,0,0,0,1748,
        1742,1,0,0,0,1748,1743,1,0,0,0,1748,1744,1,0,0,0,1748,1745,1,0,0,
        0,1748,1747,1,0,0,0,1749,1752,1,0,0,0,1750,1748,1,0,0,0,1750,1751,
        1,0,0,0,1751,51,1,0,0,0,1752,1750,1,0,0,0,1753,1754,5,162,0,0,1754,
        1755,5,382,0,0,1755,53,1,0,0,0,1756,1757,5,2,0,0,1757,1762,3,56,
        28,0,1758,1759,5,4,0,0,1759,1761,3,56,28,0,1760,1758,1,0,0,0,1761,
        1764,1,0,0,0,1762,1760,1,0,0,0,1762,1763,1,0,0,0,1763,1765,1,0,0,
        0,1764,1762,1,0,0,0,1765,1766,5,3,0,0,1766,55,1,0,0,0,1767,1772,
        3,58,29,0,1768,1770,5,352,0,0,1769,1768,1,0,0,0,1769,1770,1,0,0,
        0,1770,1771,1,0,0,0,1771,1773,3,60,30,0,1772,1769,1,0,0,0,1772,1773,
        1,0,0,0,1773,57,1,0,0,0,1774,1779,3,388,194,0,1775,1776,5,5,0,0,
        1776,1778,3,388,194,0,1777,1775,1,0,0,0,1778,1781,1,0,0,0,1779,1777,
        1,0,0,0,1779,1780,1,0,0,0,1780,1784,1,0,0,0,1781,1779,1,0,0,0,1782,
        1784,3,400,200,0,1783,1774,1,0,0,0,1783,1782,1,0,0,0,1784,59,1,0,
        0,0,1785,1790,5,382,0,0,1786,1790,5,384,0,0,1787,1790,3,308,154,
        0,1788,1790,3,400,200,0,1789,1785,1,0,0,0,1789,1786,1,0,0,0,1789,
        1787,1,0,0,0,1789,1788,1,0,0,0,1790,61,1,0,0,0,1791,1792,5,2,0,0,
        1792,1797,3,64,32,0,1793,1794,5,4,0,0,1794,1796,3,64,32,0,1795,1793,
        1,0,0,0,1796,1799,1,0,0,0,1797,1795,1,0,0,0,1797,1798,1,0,0,0,1798,
        1800,1,0,0,0,1799,1797,1,0,0,0,1800,1801,5,3,0,0,1801,63,1,0,0,0,
        1802,1807,3,58,29,0,1803,1805,5,352,0,0,1804,1803,1,0,0,0,1804,1805,
        1,0,0,0,1805,1806,1,0,0,0,1806,1808,3,280,140,0,1807,1804,1,0,0,
        0,1807,1808,1,0,0,0,1808,65,1,0,0,0,1809,1810,5,2,0,0,1810,1815,
        3,300,150,0,1811,1812,5,4,0,0,1812,1814,3,300,150,0,1813,1811,1,
        0,0,0,1814,1817,1,0,0,0,1815,1813,1,0,0,0,1815,1816,1,0,0,0,1816,
        1818,1,0,0,0,1817,1815,1,0,0,0,1818,1819,5,3,0,0,1819,67,1,0,0,0,
        1820,1821,5,2,0,0,1821,1826,3,66,33,0,1822,1823,5,4,0,0,1823,1825,
        3,66,33,0,1824,1822,1,0,0,0,1825,1828,1,0,0,0,1826,1824,1,0,0,0,
        1826,1827,1,0,0,0,1827,1829,1,0,0,0,1828,1826,1,0,0,0,1829,1830,
        5,3,0,0,1830,69,1,0,0,0,1831,1832,5,283,0,0,1832,1833,5,20,0,0,1833,
        1838,3,72,36,0,1834,1835,5,283,0,0,1835,1836,5,31,0,0,1836,1838,
        3,74,37,0,1837,1831,1,0,0,0,1837,1834,1,0,0,0,1838,71,1,0,0,0,1839,
        1840,5,146,0,0,1840,1841,3,400,200,0,1841,1842,5,212,0,0,1842,1843,
        3,400,200,0,1843,1846,1,0,0,0,1844,1846,3,388,194,0,1845,1839,1,
        0,0,0,1845,1844,1,0,0,0,1846,73,1,0,0,0,1847,1851,3,400,200,0,1848,
        1849,5,346,0,0,1849,1850,5,267,0,0,1850,1852,3,54,27,0,1851,1848,
        1,0,0,0,1851,1852,1,0,0,0,1852,75,1,0,0,0,1853,1854,3,388,194,0,
        1854,1855,3,400,200,0,1855,77,1,0,0,0,1856,1857,3,28,14,0,1857,1858,
        3,26,13,0,1858,1913,1,0,0,0,1859,1861,3,146,73,0,1860,1862,3,102,
        51,0,1861,1860,1,0,0,0,1862,1863,1,0,0,0,1863,1861,1,0,0,0,1863,
        1864,1,0,0,0,1864,1913,1,0,0,0,1865,1866,5,84,0,0,1866,1867,5,123,
        0,0,1867,1868,3,86,43,0,1868,1870,3,244,122,0,1869,1871,3,138,69,
        0,1870,1869,1,0,0,0,1870,1871,1,0,0,0,1871,1913,1,0,0,0,1872,1873,
        5,329,0,0,1873,1874,3,86,43,0,1874,1875,3,244,122,0,1875,1877,3,
        120,60,0,1876,1878,3,138,69,0,1877,1876,1,0,0,0,1877,1878,1,0,0,
        0,1878,1913,1,0,0,0,1879,1880,5,179,0,0,1880,1881,5,152,0,0,1881,
        1882,3,86,43,0,1882,1883,3,244,122,0,1883,1889,5,332,0,0,1884,1890,
        3,98,49,0,1885,1886,5,2,0,0,1886,1887,3,26,13,0,1887,1888,5,3,0,
        0,1888,1890,1,0,0,0,1889,1884,1,0,0,0,1889,1885,1,0,0,0,1890,1891,
        1,0,0,0,1891,1892,3,244,122,0,1892,1893,5,203,0,0,1893,1897,3,288,
        144,0,1894,1896,3,122,61,0,1895,1894,1,0,0,0,1896,1899,1,0,0,0,1897,
        1895,1,0,0,0,1897,1898,1,0,0,0,1898,1903,1,0,0,0,1899,1897,1,0,0,
        0,1900,1902,3,124,62,0,1901,1900,1,0,0,0,1902,1905,1,0,0,0,1903,
        1901,1,0,0,0,1903,1904,1,0,0,0,1904,1909,1,0,0,0,1905,1903,1,0,0,
        0,1906,1908,3,126,63,0,1907,1906,1,0,0,0,1908,1911,1,0,0,0,1909,
        1907,1,0,0,0,1909,1910,1,0,0,0,1910,1913,1,0,0,0,1911,1909,1,0,0,
        0,1912,1856,1,0,0,0,1912,1859,1,0,0,0,1912,1865,1,0,0,0,1912,1872,
        1,0,0,0,1912,1879,1,0,0,0,1913,79,1,0,0,0,1914,1915,3,98,49,0,1915,
        81,1,0,0,0,1916,1917,3,98,49,0,1917,83,1,0,0,0,1918,1919,3,256,128,
        0,1919,85,1,0,0,0,1920,1921,3,256,128,0,1921,87,1,0,0,0,1922,1923,
        3,258,129,0,1923,89,1,0,0,0,1924,1925,3,258,129,0,1925,91,1,0,0,
        0,1926,1929,3,250,125,0,1927,1929,4,46,0,0,1928,1926,1,0,0,0,1928,
        1927,1,0,0,0,1929,93,1,0,0,0,1930,1935,3,92,46,0,1931,1932,5,4,0,
        0,1932,1934,3,92,46,0,1933,1931,1,0,0,0,1934,1937,1,0,0,0,1935,1933,
        1,0,0,0,1935,1936,1,0,0,0,1936,95,1,0,0,0,1937,1935,1,0,0,0,1938,
        1939,3,384,192,0,1939,97,1,0,0,0,1940,1941,5,136,0,0,1941,1942,5,
        2,0,0,1942,1943,3,280,140,0,1943,1944,5,3,0,0,1944,1947,1,0,0,0,
        1945,1947,3,250,125,0,1946,1940,1,0,0,0,1946,1945,1,0,0,0,1947,99,
        1,0,0,0,1948,1949,5,209,0,0,1949,1950,5,31,0,0,1950,1955,3,108,54,
        0,1951,1952,5,4,0,0,1952,1954,3,108,54,0,1953,1951,1,0,0,0,1954,
        1957,1,0,0,0,1955,1953,1,0,0,0,1955,1956,1,0,0,0,1956,1959,1,0,0,
        0,1957,1955,1,0,0,0,1958,1948,1,0,0,0,1958,1959,1,0,0,0,1959,1970,
        1,0,0,0,1960,1961,5,44,0,0,1961,1962,5,31,0,0,1962,1967,3,280,140,
        0,1963,1964,5,4,0,0,1964,1966,3,280,140,0,1965,1963,1,0,0,0,1966,
        1969,1,0,0,0,1967,1965,1,0,0,0,1967,1968,1,0,0,0,1968,1971,1,0,0,
        0,1969,1967,1,0,0,0,1970,1960,1,0,0,0,1970,1971,1,0,0,0,1971,1982,
        1,0,0,0,1972,1973,5,93,0,0,1973,1974,5,31,0,0,1974,1979,3,280,140,
        0,1975,1976,5,4,0,0,1976,1978,3,280,140,0,1977,1975,1,0,0,0,1978,
        1981,1,0,0,0,1979,1977,1,0,0,0,1979,1980,1,0,0,0,1980,1983,1,0,0,
        0,1981,1979,1,0,0,0,1982,1972,1,0,0,0,1982,1983,1,0,0,0,1983,1994,
        1,0,0,0,1984,1985,5,278,0,0,1985,1986,5,31,0,0,1986,1991,3,108,54,
        0,1987,1988,5,4,0,0,1988,1990,3,108,54,0,1989,1987,1,0,0,0,1990,
        1993,1,0,0,0,1991,1989,1,0,0,0,1991,1992,1,0,0,0,1992,1995,1,0,0,
        0,1993,1991,1,0,0,0,1994,1984,1,0,0,0,1994,1995,1,0,0,0,1995,1997,
        1,0,0,0,1996,1998,3,364,182,0,1997,1996,1,0,0,0,1997,1998,1,0,0,
        0,1998,2004,1,0,0,0,1999,2002,5,165,0,0,2000,2003,5,10,0,0,2001,
        2003,3,280,140,0,2002,2000,1,0,0,0,2002,2001,1,0,0,0,2003,2005,1,
        0,0,0,2004,1999,1,0,0,0,2004,2005,1,0,0,0,2005,2008,1,0,0,0,2006,
        2007,5,202,0,0,2007,2009,3,280,140,0,2008,2006,1,0,0,0,2008,2009,
        1,0,0,0,2009,101,1,0,0,0,2010,2011,3,28,14,0,2011,2012,3,112,56,
        0,2012,103,1,0,0,0,2013,2014,6,52,-1,0,2014,2015,3,106,53,0,2015,
        2036,1,0,0,0,2016,2017,10,3,0,0,2017,2019,7,13,0,0,2018,2020,3,196,
        98,0,2019,2018,1,0,0,0,2019,2020,1,0,0,0,2020,2021,1,0,0,0,2021,
        2035,3,104,52,4,2022,2023,10,2,0,0,2023,2025,5,148,0,0,2024,2026,
        3,196,98,0,2025,2024,1,0,0,0,2025,2026,1,0,0,0,2026,2027,1,0,0,0,
        2027,2035,3,104,52,3,2028,2029,10,1,0,0,2029,2031,7,14,0,0,2030,
        2032,3,196,98,0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,2032,2033,1,
        0,0,0,2033,2035,3,104,52,2,2034,2016,1,0,0,0,2034,2022,1,0,0,0,2034,
        2028,1,0,0,0,2035,2038,1,0,0,0,2036,2034,1,0,0,0,2036,2037,1,0,0,
        0,2037,105,1,0,0,0,2038,2036,1,0,0,0,2039,2059,3,114,57,0,2040,2059,
        3,110,55,0,2041,2042,5,293,0,0,2042,2059,3,86,43,0,2043,2044,5,333,
        0,0,2044,2049,3,280,140,0,2045,2046,5,4,0,0,2046,2048,3,280,140,
        0,2047,2045,1,0,0,0,2048,2051,1,0,0,0,2049,2047,1,0,0,0,2049,2050,
        1,0,0,0,2050,2052,1,0,0,0,2051,2049,1,0,0,0,2052,2053,3,244,122,
        0,2053,2059,1,0,0,0,2054,2055,5,2,0,0,2055,2056,3,26,13,0,2056,2057,
        5,3,0,0,2057,2059,1,0,0,0,2058,2039,1,0,0,0,2058,2040,1,0,0,0,2058,
        2041,1,0,0,0,2058,2043,1,0,0,0,2058,2054,1,0,0,0,2059,107,1,0,0,
        0,2060,2063,3,92,46,0,2061,2063,3,280,140,0,2062,2060,1,0,0,0,2062,
        2061,1,0,0,0,2063,2065,1,0,0,0,2064,2066,7,15,0,0,2065,2064,1,0,
        0,0,2065,2066,1,0,0,0,2066,2069,1,0,0,0,2067,2068,5,199,0,0,2068,
        2070,7,16,0,0,2069,2067,1,0,0,0,2069,2070,1,0,0,0,2070,109,1,0,0,
        0,2071,2073,3,146,73,0,2072,2074,3,112,56,0,2073,2072,1,0,0,0,2074,
        2075,1,0,0,0,2075,2073,1,0,0,0,2075,2076,1,0,0,0,2076,111,1,0,0,
        0,2077,2079,3,116,58,0,2078,2080,3,138,69,0,2079,2078,1,0,0,0,2079,
        2080,1,0,0,0,2080,2081,1,0,0,0,2081,2082,3,100,50,0,2082,2105,1,
        0,0,0,2083,2087,3,118,59,0,2084,2086,3,194,97,0,2085,2084,1,0,0,
        0,2086,2089,1,0,0,0,2087,2085,1,0,0,0,2087,2088,1,0,0,0,2088,2091,
        1,0,0,0,2089,2087,1,0,0,0,2090,2092,3,138,69,0,2091,2090,1,0,0,0,
        2091,2092,1,0,0,0,2092,2094,1,0,0,0,2093,2095,3,152,76,0,2094,2093,
        1,0,0,0,2094,2095,1,0,0,0,2095,2097,1,0,0,0,2096,2098,3,140,70,0,
        2097,2096,1,0,0,0,2097,2098,1,0,0,0,2098,2100,1,0,0,0,2099,2101,
        3,364,182,0,2100,2099,1,0,0,0,2100,2101,1,0,0,0,2101,2102,1,0,0,
        0,2102,2103,3,100,50,0,2103,2105,1,0,0,0,2104,2077,1,0,0,0,2104,
        2083,1,0,0,0,2105,113,1,0,0,0,2106,2108,3,116,58,0,2107,2109,3,146,
        73,0,2108,2107,1,0,0,0,2108,2109,1,0,0,0,2109,2113,1,0,0,0,2110,
        2112,3,194,97,0,2111,2110,1,0,0,0,2112,2115,1,0,0,0,2113,2111,1,
        0,0,0,2113,2114,1,0,0,0,2114,2117,1,0,0,0,2115,2113,1,0,0,0,2116,
        2118,3,138,69,0,2117,2116,1,0,0,0,2117,2118,1,0,0,0,2118,2120,1,
        0,0,0,2119,2121,3,152,76,0,2120,2119,1,0,0,0,2120,2121,1,0,0,0,2121,
        2123,1,0,0,0,2122,2124,3,140,70,0,2123,2122,1,0,0,0,2123,2124,1,
        0,0,0,2124,2126,1,0,0,0,2125,2127,3,364,182,0,2126,2125,1,0,0,0,
        2126,2127,1,0,0,0,2127,2151,1,0,0,0,2128,2130,3,118,59,0,2129,2131,
        3,146,73,0,2130,2129,1,0,0,0,2130,2131,1,0,0,0,2131,2135,1,0,0,0,
        2132,2134,3,194,97,0,2133,2132,1,0,0,0,2134,2137,1,0,0,0,2135,2133,
        1,0,0,0,2135,2136,1,0,0,0,2136,2139,1,0,0,0,2137,2135,1,0,0,0,2138,
        2140,3,138,69,0,2139,2138,1,0,0,0,2139,2140,1,0,0,0,2140,2142,1,
        0,0,0,2141,2143,3,152,76,0,2142,2141,1,0,0,0,2142,2143,1,0,0,0,2143,
        2145,1,0,0,0,2144,2146,3,140,70,0,2145,2144,1,0,0,0,2145,2146,1,
        0,0,0,2146,2148,1,0,0,0,2147,2149,3,364,182,0,2148,2147,1,0,0,0,
        2148,2149,1,0,0,0,2149,2151,1,0,0,0,2150,2106,1,0,0,0,2150,2128,
        1,0,0,0,2151,115,1,0,0,0,2152,2153,5,263,0,0,2153,2154,5,314,0,0,
        2154,2156,5,2,0,0,2155,2157,3,196,98,0,2156,2155,1,0,0,0,2156,2157,
        1,0,0,0,2157,2158,1,0,0,0,2158,2159,3,286,143,0,2159,2160,5,3,0,
        0,2160,2172,1,0,0,0,2161,2163,5,177,0,0,2162,2164,3,196,98,0,2163,
        2162,1,0,0,0,2163,2164,1,0,0,0,2164,2165,1,0,0,0,2165,2172,3,286,
        143,0,2166,2168,5,238,0,0,2167,2169,3,196,98,0,2168,2167,1,0,0,0,
        2168,2169,1,0,0,0,2169,2170,1,0,0,0,2170,2172,3,286,143,0,2171,2152,
        1,0,0,0,2171,2161,1,0,0,0,2171,2166,1,0,0,0,2172,2174,1,0,0,0,2173,
        2175,3,246,123,0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,2175,2178,1,
        0,0,0,2176,2177,5,236,0,0,2177,2179,3,400,200,0,2178,2176,1,0,0,
        0,2178,2179,1,0,0,0,2179,2180,1,0,0,0,2180,2181,5,332,0,0,2181,2194,
        3,400,200,0,2182,2192,5,20,0,0,2183,2193,3,214,107,0,2184,2193,3,
        346,173,0,2185,2188,5,2,0,0,2186,2189,3,214,107,0,2187,2189,3,346,
        173,0,2188,2186,1,0,0,0,2188,2187,1,0,0,0,2189,2190,1,0,0,0,2190,
        2191,5,3,0,0,2191,2193,1,0,0,0,2192,2183,1,0,0,0,2192,2184,1,0,0,
        0,2192,2185,1,0,0,0,2193,2195,1,0,0,0,2194,2182,1,0,0,0,2194,2195,
        1,0,0,0,2195,2197,1,0,0,0,2196,2198,3,246,123,0,2197,2196,1,0,0,
        0,2197,2198,1,0,0,0,2198,2201,1,0,0,0,2199,2200,5,235,0,0,2200,2202,
        3,400,200,0,2201,2199,1,0,0,0,2201,2202,1,0,0,0,2202,117,1,0,0,0,
        2203,2207,5,263,0,0,2204,2206,3,142,71,0,2205,2204,1,0,0,0,2206,
        2209,1,0,0,0,2207,2205,1,0,0,0,2207,2208,1,0,0,0,2208,2211,1,0,0,
        0,2209,2207,1,0,0,0,2210,2212,3,196,98,0,2211,2210,1,0,0,0,2211,
        2212,1,0,0,0,2212,2213,1,0,0,0,2213,2214,3,270,135,0,2214,119,1,
        0,0,0,2215,2216,5,269,0,0,2216,2217,3,134,67,0,2217,121,1,0,0,0,
        2218,2219,5,343,0,0,2219,2222,5,178,0,0,2220,2221,5,14,0,0,2221,
        2223,3,288,144,0,2222,2220,1,0,0,0,2222,2223,1,0,0,0,2223,2224,1,
        0,0,0,2224,2225,5,300,0,0,2225,2226,3,128,64,0,2226,123,1,0,0,0,
        2227,2228,5,343,0,0,2228,2229,5,197,0,0,2229,2232,5,178,0,0,2230,
        2231,5,31,0,0,2231,2233,5,296,0,0,2232,2230,1,0,0,0,2232,2233,1,
        0,0,0,2233,2236,1,0,0,0,2234,2235,5,14,0,0,2235,2237,3,288,144,0,
        2236,2234,1,0,0,0,2236,2237,1,0,0,0,2237,2238,1,0,0,0,2238,2239,
        5,300,0,0,2239,2240,3,130,65,0,2240,125,1,0,0,0,2241,2242,5,343,
        0,0,2242,2243,5,197,0,0,2243,2244,5,178,0,0,2244,2245,5,31,0,0,2245,
        2248,5,280,0,0,2246,2247,5,14,0,0,2247,2249,3,288,144,0,2248,2246,
        1,0,0,0,2248,2249,1,0,0,0,2249,2250,1,0,0,0,2250,2251,5,300,0,0,
        2251,2252,3,132,66,0,2252,127,1,0,0,0,2253,2261,5,84,0,0,2254,2255,
        5,329,0,0,2255,2256,5,269,0,0,2256,2261,5,363,0,0,2257,2258,5,329,
        0,0,2258,2259,5,269,0,0,2259,2261,3,134,67,0,2260,2253,1,0,0,0,2260,
        2254,1,0,0,0,2260,2257,1,0,0,0,2261,129,1,0,0,0,2262,2263,5,147,
        0,0,2263,2281,5,363,0,0,2264,2265,5,147,0,0,2265,2266,5,2,0,0,2266,
        2267,3,248,124,0,2267,2268,5,3,0,0,2268,2269,5,333,0,0,2269,2270,
        5,2,0,0,2270,2275,3,280,140,0,2271,2272,5,4,0,0,2272,2274,3,280,
        140,0,2273,2271,1,0,0,0,2274,2277,1,0,0,0,2275,2273,1,0,0,0,2275,
        2276,1,0,0,0,2276,2278,1,0,0,0,2277,2275,1,0,0,0,2278,2279,5,3,0,
        0,2279,2281,1,0,0,0,2280,2262,1,0,0,0,2280,2264,1,0,0,0,2281,131,
        1,0,0,0,2282,2287,5,84,0,0,2283,2284,5,329,0,0,2284,2285,5,269,0,
        0,2285,2287,3,134,67,0,2286,2282,1,0,0,0,2286,2283,1,0,0,0,2287,
        133,1,0,0,0,2288,2293,3,136,68,0,2289,2290,5,4,0,0,2290,2292,3,136,
        68,0,2291,2289,1,0,0,0,2292,2295,1,0,0,0,2293,2291,1,0,0,0,2293,
        2294,1,0,0,0,2294,135,1,0,0,0,2295,2293,1,0,0,0,2296,2297,3,250,
        125,0,2297,2298,5,352,0,0,2298,2299,3,280,140,0,2299,137,1,0,0,0,
        2300,2301,5,344,0,0,2301,2302,3,288,144,0,2302,139,1,0,0,0,2303,
        2304,5,132,0,0,2304,2305,3,288,144,0,2305,141,1,0,0,0,2306,2307,
        5,374,0,0,2307,2314,3,144,72,0,2308,2310,5,4,0,0,2309,2308,1,0,0,
        0,2309,2310,1,0,0,0,2310,2311,1,0,0,0,2311,2313,3,144,72,0,2312,
        2309,1,0,0,0,2313,2316,1,0,0,0,2314,2312,1,0,0,0,2314,2315,1,0,0,
        0,2315,2317,1,0,0,0,2316,2314,1,0,0,0,2317,2318,5,375,0,0,2318,143,
        1,0,0,0,2319,2333,3,388,194,0,2320,2321,3,388,194,0,2321,2322,5,
        2,0,0,2322,2327,3,296,148,0,2323,2324,5,4,0,0,2324,2326,3,296,148,
        0,2325,2323,1,0,0,0,2326,2329,1,0,0,0,2327,2325,1,0,0,0,2327,2328,
        1,0,0,0,2328,2330,1,0,0,0,2329,2327,1,0,0,0,2330,2331,5,3,0,0,2331,
        2333,1,0,0,0,2332,2319,1,0,0,0,2332,2320,1,0,0,0,2333,145,1,0,0,
        0,2334,2335,5,123,0,0,2335,2340,3,198,99,0,2336,2337,5,4,0,0,2337,
        2339,3,198,99,0,2338,2336,1,0,0,0,2339,2342,1,0,0,0,2340,2338,1,
        0,0,0,2340,2341,1,0,0,0,2341,2346,1,0,0,0,2342,2340,1,0,0,0,2343,
        2345,3,194,97,0,2344,2343,1,0,0,0,2345,2348,1,0,0,0,2346,2344,1,
        0,0,0,2346,2347,1,0,0,0,2347,2350,1,0,0,0,2348,2346,1,0,0,0,2349,
        2351,3,162,81,0,2350,2349,1,0,0,0,2350,2351,1,0,0,0,2351,2353,1,
        0,0,0,2352,2354,3,168,84,0,2353,2352,1,0,0,0,2353,2354,1,0,0,0,2354,
        147,1,0,0,0,2355,2356,7,17,0,0,2356,149,1,0,0,0,2357,2359,5,119,
        0,0,2358,2357,1,0,0,0,2358,2359,1,0,0,0,2359,2360,1,0,0,0,2360,2361,
        7,18,0,0,2361,2362,5,20,0,0,2362,2363,5,201,0,0,2363,2372,3,404,
        202,0,2364,2366,5,119,0,0,2365,2364,1,0,0,0,2365,2366,1,0,0,0,2366,
        2367,1,0,0,0,2367,2368,7,19,0,0,2368,2369,5,20,0,0,2369,2370,5,201,
        0,0,2370,2372,3,292,146,0,2371,2358,1,0,0,0,2371,2365,1,0,0,0,2372,
        151,1,0,0,0,2373,2374,5,130,0,0,2374,2375,5,31,0,0,2375,2380,3,154,
        77,0,2376,2377,5,4,0,0,2377,2379,3,154,77,0,2378,2376,1,0,0,0,2379,
        2382,1,0,0,0,2380,2378,1,0,0,0,2380,2381,1,0,0,0,2381,2413,1,0,0,
        0,2382,2380,1,0,0,0,2383,2384,5,130,0,0,2384,2385,5,31,0,0,2385,
        2390,3,280,140,0,2386,2387,5,4,0,0,2387,2389,3,280,140,0,2388,2386,
        1,0,0,0,2389,2392,1,0,0,0,2390,2388,1,0,0,0,2390,2391,1,0,0,0,2391,
        2410,1,0,0,0,2392,2390,1,0,0,0,2393,2394,5,346,0,0,2394,2411,5,256,
        0,0,2395,2396,5,346,0,0,2396,2411,5,61,0,0,2397,2398,5,131,0,0,2398,
        2399,5,271,0,0,2399,2400,5,2,0,0,2400,2405,3,160,80,0,2401,2402,
        5,4,0,0,2402,2404,3,160,80,0,2403,2401,1,0,0,0,2404,2407,1,0,0,0,
        2405,2403,1,0,0,0,2405,2406,1,0,0,0,2406,2408,1,0,0,0,2407,2405,
        1,0,0,0,2408,2409,5,3,0,0,2409,2411,1,0,0,0,2410,2393,1,0,0,0,2410,
        2395,1,0,0,0,2410,2397,1,0,0,0,2410,2411,1,0,0,0,2411,2413,1,0,0,
        0,2412,2373,1,0,0,0,2412,2383,1,0,0,0,2413,153,1,0,0,0,2414,2418,
        3,92,46,0,2415,2418,3,156,78,0,2416,2418,3,280,140,0,2417,2414,1,
        0,0,0,2417,2415,1,0,0,0,2417,2416,1,0,0,0,2418,155,1,0,0,0,2419,
        2420,7,20,0,0,2420,2421,5,2,0,0,2421,2426,3,160,80,0,2422,2423,5,
        4,0,0,2423,2425,3,160,80,0,2424,2422,1,0,0,0,2425,2428,1,0,0,0,2426,
        2424,1,0,0,0,2426,2427,1,0,0,0,2427,2429,1,0,0,0,2428,2426,1,0,0,
        0,2429,2430,5,3,0,0,2430,2445,1,0,0,0,2431,2432,5,131,0,0,2432,2433,
        5,271,0,0,2433,2434,5,2,0,0,2434,2439,3,158,79,0,2435,2436,5,4,0,
        0,2436,2438,3,158,79,0,2437,2435,1,0,0,0,2438,2441,1,0,0,0,2439,
        2437,1,0,0,0,2439,2440,1,0,0,0,2440,2442,1,0,0,0,2441,2439,1,0,0,
        0,2442,2443,5,3,0,0,2443,2445,1,0,0,0,2444,2419,1,0,0,0,2444,2431,
        1,0,0,0,2445,157,1,0,0,0,2446,2449,3,156,78,0,2447,2449,3,160,80,
        0,2448,2446,1,0,0,0,2448,2447,1,0,0,0,2449,159,1,0,0,0,2450,2471,
        3,92,46,0,2451,2471,3,280,140,0,2452,2467,5,2,0,0,2453,2456,3,92,
        46,0,2454,2456,3,280,140,0,2455,2453,1,0,0,0,2455,2454,1,0,0,0,2456,
        2464,1,0,0,0,2457,2460,5,4,0,0,2458,2461,3,92,46,0,2459,2461,3,280,
        140,0,2460,2458,1,0,0,0,2460,2459,1,0,0,0,2461,2463,1,0,0,0,2462,
        2457,1,0,0,0,2463,2466,1,0,0,0,2464,2462,1,0,0,0,2464,2465,1,0,0,
        0,2465,2468,1,0,0,0,2466,2464,1,0,0,0,2467,2455,1,0,0,0,2467,2468,
        1,0,0,0,2468,2469,1,0,0,0,2469,2471,5,3,0,0,2470,2450,1,0,0,0,2470,
        2451,1,0,0,0,2470,2452,1,0,0,0,2471,161,1,0,0,0,2472,2473,5,223,
        0,0,2473,2474,5,2,0,0,2474,2475,3,268,134,0,2475,2476,5,119,0,0,
        2476,2477,3,164,82,0,2477,2478,5,140,0,0,2478,2479,5,2,0,0,2479,
        2484,3,166,83,0,2480,2481,5,4,0,0,2481,2483,3,166,83,0,2482,2480,
        1,0,0,0,2483,2486,1,0,0,0,2484,2482,1,0,0,0,2484,2485,1,0,0,0,2485,
        2487,1,0,0,0,2486,2484,1,0,0,0,2487,2488,5,3,0,0,2488,2489,5,3,0,
        0,2489,163,1,0,0,0,2490,2503,3,388,194,0,2491,2492,5,2,0,0,2492,
        2497,3,388,194,0,2493,2494,5,4,0,0,2494,2496,3,388,194,0,2495,2493,
        1,0,0,0,2496,2499,1,0,0,0,2497,2495,1,0,0,0,2497,2498,1,0,0,0,2498,
        2500,1,0,0,0,2499,2497,1,0,0,0,2500,2501,5,3,0,0,2501,2503,1,0,0,
        0,2502,2490,1,0,0,0,2502,2491,1,0,0,0,2503,165,1,0,0,0,2504,2509,
        3,280,140,0,2505,2507,5,20,0,0,2506,2505,1,0,0,0,2506,2507,1,0,0,
        0,2507,2508,1,0,0,0,2508,2510,3,388,194,0,2509,2506,1,0,0,0,2509,
        2510,1,0,0,0,2510,167,1,0,0,0,2511,2513,5,327,0,0,2512,2514,3,170,
        85,0,2513,2512,1,0,0,0,2513,2514,1,0,0,0,2514,2515,1,0,0,0,2515,
        2516,5,2,0,0,2516,2517,3,172,86,0,2517,2522,5,3,0,0,2518,2520,5,
        20,0,0,2519,2518,1,0,0,0,2519,2520,1,0,0,0,2520,2521,1,0,0,0,2521,
        2523,3,388,194,0,2522,2519,1,0,0,0,2522,2523,1,0,0,0,2523,169,1,
        0,0,0,2524,2525,7,21,0,0,2525,2526,5,199,0,0,2526,171,1,0,0,0,2527,
        2530,3,174,87,0,2528,2530,3,176,88,0,2529,2527,1,0,0,0,2529,2528,
        1,0,0,0,2530,173,1,0,0,0,2531,2532,3,180,90,0,2532,2533,5,119,0,
        0,2533,2534,3,182,91,0,2534,2535,5,140,0,0,2535,2536,5,2,0,0,2536,
        2541,3,184,92,0,2537,2538,5,4,0,0,2538,2540,3,184,92,0,2539,2537,
        1,0,0,0,2540,2543,1,0,0,0,2541,2539,1,0,0,0,2541,2542,1,0,0,0,2542,
        2544,1,0,0,0,2543,2541,1,0,0,0,2544,2545,5,3,0,0,2545,175,1,0,0,
        0,2546,2547,5,2,0,0,2547,2552,3,180,90,0,2548,2549,5,4,0,0,2549,
        2551,3,180,90,0,2550,2548,1,0,0,0,2551,2554,1,0,0,0,2552,2550,1,
        0,0,0,2552,2553,1,0,0,0,2553,2555,1,0,0,0,2554,2552,1,0,0,0,2555,
        2556,5,3,0,0,2556,2557,5,119,0,0,2557,2558,3,182,91,0,2558,2559,
        5,140,0,0,2559,2560,5,2,0,0,2560,2565,3,178,89,0,2561,2562,5,4,0,
        0,2562,2564,3,178,89,0,2563,2561,1,0,0,0,2564,2567,1,0,0,0,2565,
        2563,1,0,0,0,2565,2566,1,0,0,0,2566,2568,1,0,0,0,2567,2565,1,0,0,
        0,2568,2569,5,3,0,0,2569,177,1,0,0,0,2570,2571,5,2,0,0,2571,2576,
        3,186,93,0,2572,2573,5,4,0,0,2573,2575,3,186,93,0,2574,2572,1,0,
        0,0,2575,2578,1,0,0,0,2576,2574,1,0,0,0,2576,2577,1,0,0,0,2577,2579,
        1,0,0,0,2578,2576,1,0,0,0,2579,2581,5,3,0,0,2580,2582,3,188,94,0,
        2581,2580,1,0,0,0,2581,2582,1,0,0,0,2582,179,1,0,0,0,2583,2584,3,
        388,194,0,2584,181,1,0,0,0,2585,2586,3,388,194,0,2586,183,1,0,0,
        0,2587,2589,3,186,93,0,2588,2590,3,188,94,0,2589,2588,1,0,0,0,2589,
        2590,1,0,0,0,2590,185,1,0,0,0,2591,2592,3,250,125,0,2592,187,1,0,
        0,0,2593,2595,5,20,0,0,2594,2593,1,0,0,0,2594,2595,1,0,0,0,2595,
        2596,1,0,0,0,2596,2597,3,388,194,0,2597,189,1,0,0,0,2598,2599,5,
        137,0,0,2599,2600,5,197,0,0,2600,2601,5,105,0,0,2601,191,1,0,0,0,
        2602,2603,5,137,0,0,2603,2604,5,105,0,0,2604,193,1,0,0,0,2605,2606,
        5,158,0,0,2606,2608,5,338,0,0,2607,2609,5,211,0,0,2608,2607,1,0,
        0,0,2608,2609,1,0,0,0,2609,2610,1,0,0,0,2610,2611,3,90,45,0,2611,
        2620,5,2,0,0,2612,2617,3,280,140,0,2613,2614,5,4,0,0,2614,2616,3,
        280,140,0,2615,2613,1,0,0,0,2616,2619,1,0,0,0,2617,2615,1,0,0,0,
        2617,2618,1,0,0,0,2618,2621,1,0,0,0,2619,2617,1,0,0,0,2620,2612,
        1,0,0,0,2620,2621,1,0,0,0,2621,2622,1,0,0,0,2622,2623,5,3,0,0,2623,
        2635,3,244,122,0,2624,2626,5,20,0,0,2625,2624,1,0,0,0,2625,2626,
        1,0,0,0,2626,2627,1,0,0,0,2627,2632,3,388,194,0,2628,2629,5,4,0,
        0,2629,2631,3,388,194,0,2630,2628,1,0,0,0,2631,2634,1,0,0,0,2632,
        2630,1,0,0,0,2632,2633,1,0,0,0,2633,2636,1,0,0,0,2634,2632,1,0,0,
        0,2635,2625,1,0,0,0,2635,2636,1,0,0,0,2636,195,1,0,0,0,2637,2638,
        7,22,0,0,2638,197,1,0,0,0,2639,2651,3,86,43,0,2640,2642,5,158,0,
        0,2641,2640,1,0,0,0,2641,2642,1,0,0,0,2642,2643,1,0,0,0,2643,2647,
        3,224,112,0,2644,2646,3,200,100,0,2645,2644,1,0,0,0,2646,2649,1,
        0,0,0,2647,2645,1,0,0,0,2647,2648,1,0,0,0,2648,2651,1,0,0,0,2649,
        2647,1,0,0,0,2650,2639,1,0,0,0,2650,2641,1,0,0,0,2651,199,1,0,0,
        0,2652,2656,3,202,101,0,2653,2656,3,162,81,0,2654,2656,3,168,84,
        0,2655,2652,1,0,0,0,2655,2653,1,0,0,0,2655,2654,1,0,0,0,2656,201,
        1,0,0,0,2657,2658,3,204,102,0,2658,2660,5,155,0,0,2659,2661,5,158,
        0,0,2660,2659,1,0,0,0,2660,2661,1,0,0,0,2661,2662,1,0,0,0,2662,2664,
        3,224,112,0,2663,2665,3,206,103,0,2664,2663,1,0,0,0,2664,2665,1,
        0,0,0,2665,2675,1,0,0,0,2666,2667,5,194,0,0,2667,2668,3,204,102,
        0,2668,2670,5,155,0,0,2669,2671,5,158,0,0,2670,2669,1,0,0,0,2670,
        2671,1,0,0,0,2671,2672,1,0,0,0,2672,2673,3,224,112,0,2673,2675,1,
        0,0,0,2674,2657,1,0,0,0,2674,2666,1,0,0,0,2675,203,1,0,0,0,2676,
        2678,5,144,0,0,2677,2676,1,0,0,0,2677,2678,1,0,0,0,2678,2701,1,0,
        0,0,2679,2701,5,60,0,0,2680,2682,5,161,0,0,2681,2683,5,211,0,0,2682,
        2681,1,0,0,0,2682,2683,1,0,0,0,2683,2701,1,0,0,0,2684,2686,5,161,
        0,0,2685,2684,1,0,0,0,2685,2686,1,0,0,0,2686,2687,1,0,0,0,2687,2701,
        5,264,0,0,2688,2690,5,250,0,0,2689,2691,5,211,0,0,2690,2689,1,0,
        0,0,2690,2691,1,0,0,0,2691,2701,1,0,0,0,2692,2694,5,124,0,0,2693,
        2695,5,211,0,0,2694,2693,1,0,0,0,2694,2695,1,0,0,0,2695,2701,1,0,
        0,0,2696,2698,5,161,0,0,2697,2696,1,0,0,0,2697,2698,1,0,0,0,2698,
        2699,1,0,0,0,2699,2701,5,15,0,0,2700,2677,1,0,0,0,2700,2679,1,0,
        0,0,2700,2680,1,0,0,0,2700,2685,1,0,0,0,2700,2688,1,0,0,0,2700,2692,
        1,0,0,0,2700,2697,1,0,0,0,2701,205,1,0,0,0,2702,2703,5,203,0,0,2703,
        2707,3,288,144,0,2704,2705,5,332,0,0,2705,2707,3,212,106,0,2706,
        2702,1,0,0,0,2706,2704,1,0,0,0,2707,207,1,0,0,0,2708,2709,5,295,
        0,0,2709,2711,5,2,0,0,2710,2712,3,210,105,0,2711,2710,1,0,0,0,2711,
        2712,1,0,0,0,2712,2713,1,0,0,0,2713,2718,5,3,0,0,2714,2715,5,243,
        0,0,2715,2716,5,2,0,0,2716,2717,5,382,0,0,2717,2719,5,3,0,0,2718,
        2714,1,0,0,0,2718,2719,1,0,0,0,2719,209,1,0,0,0,2720,2722,5,362,
        0,0,2721,2720,1,0,0,0,2721,2722,1,0,0,0,2722,2723,1,0,0,0,2723,2724,
        7,23,0,0,2724,2745,5,222,0,0,2725,2726,3,280,140,0,2726,2727,5,258,
        0,0,2727,2745,1,0,0,0,2728,2729,5,29,0,0,2729,2730,5,382,0,0,2730,
        2731,5,210,0,0,2731,2732,5,201,0,0,2732,2741,5,382,0,0,2733,2739,
        5,203,0,0,2734,2740,3,388,194,0,2735,2736,3,382,191,0,2736,2737,
        5,2,0,0,2737,2738,5,3,0,0,2738,2740,1,0,0,0,2739,2734,1,0,0,0,2739,
        2735,1,0,0,0,2740,2742,1,0,0,0,2741,2733,1,0,0,0,2741,2742,1,0,0,
        0,2742,2745,1,0,0,0,2743,2745,3,280,140,0,2744,2721,1,0,0,0,2744,
        2725,1,0,0,0,2744,2728,1,0,0,0,2744,2743,1,0,0,0,2745,211,1,0,0,
        0,2746,2747,5,2,0,0,2747,2748,3,214,107,0,2748,2749,5,3,0,0,2749,
        213,1,0,0,0,2750,2755,3,384,192,0,2751,2752,5,4,0,0,2752,2754,3,
        384,192,0,2753,2751,1,0,0,0,2754,2757,1,0,0,0,2755,2753,1,0,0,0,
        2755,2756,1,0,0,0,2756,215,1,0,0,0,2757,2755,1,0,0,0,2758,2759,5,
        2,0,0,2759,2764,3,218,109,0,2760,2761,5,4,0,0,2761,2763,3,218,109,
        0,2762,2760,1,0,0,0,2763,2766,1,0,0,0,2764,2762,1,0,0,0,2764,2765,
        1,0,0,0,2765,2767,1,0,0,0,2766,2764,1,0,0,0,2767,2768,5,3,0,0,2768,
        217,1,0,0,0,2769,2771,3,384,192,0,2770,2772,7,15,0,0,2771,2770,1,
        0,0,0,2771,2772,1,0,0,0,2772,219,1,0,0,0,2773,2774,5,2,0,0,2774,
        2779,3,222,111,0,2775,2776,5,4,0,0,2776,2778,3,222,111,0,2777,2775,
        1,0,0,0,2778,2781,1,0,0,0,2779,2777,1,0,0,0,2779,2780,1,0,0,0,2780,
        2782,1,0,0,0,2781,2779,1,0,0,0,2782,2783,5,3,0,0,2783,221,1,0,0,
        0,2784,2786,3,96,48,0,2785,2787,3,24,12,0,2786,2785,1,0,0,0,2786,
        2787,1,0,0,0,2787,223,1,0,0,0,2788,2792,3,86,43,0,2789,2792,3,90,
        45,0,2790,2792,3,98,49,0,2791,2788,1,0,0,0,2791,2789,1,0,0,0,2791,
        2790,1,0,0,0,2792,2794,1,0,0,0,2793,2795,3,150,75,0,2794,2793,1,
        0,0,0,2794,2795,1,0,0,0,2795,2797,1,0,0,0,2796,2798,3,208,104,0,
        2797,2796,1,0,0,0,2797,2798,1,0,0,0,2798,2799,1,0,0,0,2799,2800,
        3,244,122,0,2800,2820,1,0,0,0,2801,2803,3,226,113,0,2802,2804,3,
        208,104,0,2803,2802,1,0,0,0,2803,2804,1,0,0,0,2804,2805,1,0,0,0,
        2805,2806,3,244,122,0,2806,2820,1,0,0,0,2807,2808,5,2,0,0,2808,2809,
        3,198,99,0,2809,2811,5,3,0,0,2810,2812,3,208,104,0,2811,2810,1,0,
        0,0,2811,2812,1,0,0,0,2812,2813,1,0,0,0,2813,2814,3,244,122,0,2814,
        2820,1,0,0,0,2815,2816,3,228,114,0,2816,2817,3,244,122,0,2817,2820,
        1,0,0,0,2818,2820,3,240,120,0,2819,2791,1,0,0,0,2819,2801,1,0,0,
        0,2819,2807,1,0,0,0,2819,2815,1,0,0,0,2819,2818,1,0,0,0,2820,225,
        1,0,0,0,2821,2822,5,2,0,0,2822,2823,3,26,13,0,2823,2824,5,3,0,0,
        2824,227,1,0,0,0,2825,2826,5,333,0,0,2826,2831,3,280,140,0,2827,
        2828,5,4,0,0,2828,2830,3,280,140,0,2829,2827,1,0,0,0,2830,2833,1,
        0,0,0,2831,2829,1,0,0,0,2831,2832,1,0,0,0,2832,229,1,0,0,0,2833,
        2831,1,0,0,0,2834,2835,5,293,0,0,2835,2837,3,86,43,0,2836,2838,3,
        232,116,0,2837,2836,1,0,0,0,2837,2838,1,0,0,0,2838,2854,1,0,0,0,
        2839,2840,5,293,0,0,2840,2841,5,2,0,0,2841,2842,3,86,43,0,2842,2844,
        5,3,0,0,2843,2845,3,232,116,0,2844,2843,1,0,0,0,2844,2845,1,0,0,
        0,2845,2854,1,0,0,0,2846,2847,5,293,0,0,2847,2848,5,2,0,0,2848,2849,
        3,26,13,0,2849,2851,5,3,0,0,2850,2852,3,232,116,0,2851,2850,1,0,
        0,0,2851,2852,1,0,0,0,2852,2854,1,0,0,0,2853,2834,1,0,0,0,2853,2839,
        1,0,0,0,2853,2846,1,0,0,0,2854,231,1,0,0,0,2855,2856,5,346,0,0,2856,
        2857,5,274,0,0,2857,2875,5,217,0,0,2858,2859,7,24,0,0,2859,2872,
        5,31,0,0,2860,2861,5,2,0,0,2861,2866,3,280,140,0,2862,2863,5,4,0,
        0,2863,2865,3,280,140,0,2864,2862,1,0,0,0,2865,2868,1,0,0,0,2866,
        2864,1,0,0,0,2866,2867,1,0,0,0,2867,2869,1,0,0,0,2868,2866,1,0,0,
        0,2869,2870,5,3,0,0,2870,2873,1,0,0,0,2871,2873,3,280,140,0,2872,
        2860,1,0,0,0,2872,2871,1,0,0,0,2873,2875,1,0,0,0,2874,2855,1,0,0,
        0,2874,2858,1,0,0,0,2875,2892,1,0,0,0,2876,2877,7,25,0,0,2877,2890,
        5,31,0,0,2878,2879,5,2,0,0,2879,2884,3,108,54,0,2880,2881,5,4,0,
        0,2881,2883,3,108,54,0,2882,2880,1,0,0,0,2883,2886,1,0,0,0,2884,
        2882,1,0,0,0,2884,2885,1,0,0,0,2885,2887,1,0,0,0,2886,2884,1,0,0,
        0,2887,2888,5,3,0,0,2888,2891,1,0,0,0,2889,2891,3,108,54,0,2890,
        2878,1,0,0,0,2890,2889,1,0,0,0,2891,2893,1,0,0,0,2892,2876,1,0,0,
        0,2892,2893,1,0,0,0,2893,233,1,0,0,0,2894,2895,3,388,194,0,2895,
        2896,5,373,0,0,2896,2897,3,230,115,0,2897,235,1,0,0,0,2898,2901,
        3,230,115,0,2899,2901,3,234,117,0,2900,2898,1,0,0,0,2900,2899,1,
        0,0,0,2901,237,1,0,0,0,2902,2905,3,236,118,0,2903,2905,3,284,142,
        0,2904,2902,1,0,0,0,2904,2903,1,0,0,0,2905,239,1,0,0,0,2906,2907,
        3,242,121,0,2907,2908,3,244,122,0,2908,241,1,0,0,0,2909,2910,3,378,
        189,0,2910,2919,5,2,0,0,2911,2916,3,238,119,0,2912,2913,5,4,0,0,
        2913,2915,3,238,119,0,2914,2912,1,0,0,0,2915,2918,1,0,0,0,2916,2914,
        1,0,0,0,2916,2917,1,0,0,0,2917,2920,1,0,0,0,2918,2916,1,0,0,0,2919,
        2911,1,0,0,0,2919,2920,1,0,0,0,2920,2921,1,0,0,0,2921,2922,5,3,0,
        0,2922,243,1,0,0,0,2923,2925,5,20,0,0,2924,2923,1,0,0,0,2924,2925,
        1,0,0,0,2925,2926,1,0,0,0,2926,2928,3,390,195,0,2927,2929,3,212,
        106,0,2928,2927,1,0,0,0,2928,2929,1,0,0,0,2929,2931,1,0,0,0,2930,
        2924,1,0,0,0,2930,2931,1,0,0,0,2931,245,1,0,0,0,2932,2933,5,257,
        0,0,2933,2934,5,121,0,0,2934,2935,5,266,0,0,2935,2939,3,400,200,
        0,2936,2937,5,346,0,0,2937,2938,5,267,0,0,2938,2940,3,54,27,0,2939,
        2936,1,0,0,0,2939,2940,1,0,0,0,2940,2982,1,0,0,0,2941,2942,5,257,
        0,0,2942,2943,5,121,0,0,2943,2953,5,85,0,0,2944,2945,5,113,0,0,2945,
        2946,5,299,0,0,2946,2947,5,31,0,0,2947,2951,3,400,200,0,2948,2949,
        5,101,0,0,2949,2950,5,31,0,0,2950,2952,3,400,200,0,2951,2948,1,0,
        0,0,2951,2952,1,0,0,0,2952,2954,1,0,0,0,2953,2944,1,0,0,0,2953,2954,
        1,0,0,0,2954,2960,1,0,0,0,2955,2956,5,48,0,0,2956,2957,5,154,0,0,
        2957,2958,5,299,0,0,2958,2959,5,31,0,0,2959,2961,3,400,200,0,2960,
        2955,1,0,0,0,2960,2961,1,0,0,0,2961,2967,1,0,0,0,2962,2963,5,177,
        0,0,2963,2964,5,156,0,0,2964,2965,5,299,0,0,2965,2966,5,31,0,0,2966,
        2968,3,400,200,0,2967,2962,1,0,0,0,2967,2968,1,0,0,0,2968,2973,1,
        0,0,0,2969,2970,5,166,0,0,2970,2971,5,299,0,0,2971,2972,5,31,0,0,
        2972,2974,3,400,200,0,2973,2969,1,0,0,0,2973,2974,1,0,0,0,2974,2979,
        1,0,0,0,2975,2976,5,198,0,0,2976,2977,5,83,0,0,2977,2978,5,20,0,
        0,2978,2980,3,400,200,0,2979,2975,1,0,0,0,2979,2980,1,0,0,0,2980,
        2982,1,0,0,0,2981,2932,1,0,0,0,2981,2941,1,0,0,0,2982,247,1,0,0,
        0,2983,2988,3,250,125,0,2984,2985,5,4,0,0,2985,2987,3,250,125,0,
        2986,2984,1,0,0,0,2987,2990,1,0,0,0,2988,2986,1,0,0,0,2988,2989,
        1,0,0,0,2989,249,1,0,0,0,2990,2988,1,0,0,0,2991,2996,3,384,192,0,
        2992,2993,5,5,0,0,2993,2995,3,384,192,0,2994,2992,1,0,0,0,2995,2998,
        1,0,0,0,2996,2994,1,0,0,0,2996,2997,1,0,0,0,2997,251,1,0,0,0,2998,
        2996,1,0,0,0,2999,3004,3,254,127,0,3000,3001,5,4,0,0,3001,3003,3,
        254,127,0,3002,3000,1,0,0,0,3003,3006,1,0,0,0,3004,3002,1,0,0,0,
        3004,3005,1,0,0,0,3005,253,1,0,0,0,3006,3004,1,0,0,0,3007,3010,3,
        250,125,0,3008,3009,5,207,0,0,3009,3011,3,54,27,0,3010,3008,1,0,
        0,0,3010,3011,1,0,0,0,3011,255,1,0,0,0,3012,3013,3,384,192,0,3013,
        3014,5,5,0,0,3014,3016,1,0,0,0,3015,3012,1,0,0,0,3015,3016,1,0,0,
        0,3016,3017,1,0,0,0,3017,3018,3,384,192,0,3018,257,1,0,0,0,3019,
        3020,3,384,192,0,3020,3021,5,5,0,0,3021,3023,1,0,0,0,3022,3019,1,
        0,0,0,3022,3023,1,0,0,0,3023,3024,1,0,0,0,3024,3025,3,384,192,0,
        3025,259,1,0,0,0,3026,3027,3,92,46,0,3027,261,1,0,0,0,3028,3029,
        3,280,140,0,3029,263,1,0,0,0,3030,3031,3,382,191,0,3031,3032,5,5,
        0,0,3032,3034,1,0,0,0,3033,3030,1,0,0,0,3034,3037,1,0,0,0,3035,3033,
        1,0,0,0,3035,3036,1,0,0,0,3036,3038,1,0,0,0,3037,3035,1,0,0,0,3038,
        3039,5,363,0,0,3039,265,1,0,0,0,3040,3044,3,264,132,0,3041,3044,
        3,260,130,0,3042,3044,3,262,131,0,3043,3040,1,0,0,0,3043,3041,1,
        0,0,0,3043,3042,1,0,0,0,3044,3052,1,0,0,0,3045,3047,5,20,0,0,3046,
        3045,1,0,0,0,3046,3047,1,0,0,0,3047,3050,1,0,0,0,3048,3051,3,384,
        192,0,3049,3051,3,212,106,0,3050,3048,1,0,0,0,3050,3049,1,0,0,0,
        3051,3053,1,0,0,0,3052,3046,1,0,0,0,3052,3053,1,0,0,0,3053,267,1,
        0,0,0,3054,3059,3,266,133,0,3055,3056,5,4,0,0,3056,3058,3,266,133,
        0,3057,3055,1,0,0,0,3058,3061,1,0,0,0,3059,3057,1,0,0,0,3059,3060,
        1,0,0,0,3060,269,1,0,0,0,3061,3059,1,0,0,0,3062,3063,3,268,134,0,
        3063,271,1,0,0,0,3064,3065,5,2,0,0,3065,3070,3,274,137,0,3066,3067,
        5,4,0,0,3067,3069,3,274,137,0,3068,3066,1,0,0,0,3069,3072,1,0,0,
        0,3070,3068,1,0,0,0,3070,3071,1,0,0,0,3071,3073,1,0,0,0,3072,3070,
        1,0,0,0,3073,3074,5,3,0,0,3074,273,1,0,0,0,3075,3078,3,276,138,0,
        3076,3078,3,348,174,0,3077,3075,1,0,0,0,3077,3076,1,0,0,0,3078,275,
        1,0,0,0,3079,3093,3,382,191,0,3080,3081,3,388,194,0,3081,3082,5,
        2,0,0,3082,3087,3,278,139,0,3083,3084,5,4,0,0,3084,3086,3,278,139,
        0,3085,3083,1,0,0,0,3086,3089,1,0,0,0,3087,3085,1,0,0,0,3087,3088,
        1,0,0,0,3088,3090,1,0,0,0,3089,3087,1,0,0,0,3090,3091,5,3,0,0,3091,
        3093,1,0,0,0,3092,3079,1,0,0,0,3092,3080,1,0,0,0,3093,277,1,0,0,
        0,3094,3097,3,382,191,0,3095,3097,3,300,150,0,3096,3094,1,0,0,0,
        3096,3095,1,0,0,0,3097,279,1,0,0,0,3098,3099,3,288,144,0,3099,281,
        1,0,0,0,3100,3101,3,388,194,0,3101,3102,5,373,0,0,3102,3103,3,280,
        140,0,3103,283,1,0,0,0,3104,3107,3,280,140,0,3105,3107,3,282,141,
        0,3106,3104,1,0,0,0,3106,3105,1,0,0,0,3107,285,1,0,0,0,3108,3113,
        3,280,140,0,3109,3110,5,4,0,0,3110,3112,3,280,140,0,3111,3109,1,
        0,0,0,3112,3115,1,0,0,0,3113,3111,1,0,0,0,3113,3114,1,0,0,0,3114,
        287,1,0,0,0,3115,3113,1,0,0,0,3116,3117,6,144,-1,0,3117,3118,7,26,
        0,0,3118,3129,3,288,144,5,3119,3120,5,105,0,0,3120,3121,5,2,0,0,
        3121,3122,3,26,13,0,3122,3123,5,3,0,0,3123,3129,1,0,0,0,3124,3126,
        3,292,146,0,3125,3127,3,290,145,0,3126,3125,1,0,0,0,3126,3127,1,
        0,0,0,3127,3129,1,0,0,0,3128,3116,1,0,0,0,3128,3119,1,0,0,0,3128,
        3124,1,0,0,0,3129,3138,1,0,0,0,3130,3131,10,2,0,0,3131,3132,5,14,
        0,0,3132,3137,3,288,144,3,3133,3134,10,1,0,0,3134,3135,5,208,0,0,
        3135,3137,3,288,144,2,3136,3130,1,0,0,0,3136,3133,1,0,0,0,3137,3140,
        1,0,0,0,3138,3136,1,0,0,0,3138,3139,1,0,0,0,3139,289,1,0,0,0,3140,
        3138,1,0,0,0,3141,3143,5,197,0,0,3142,3141,1,0,0,0,3142,3143,1,0,
        0,0,3143,3144,1,0,0,0,3144,3145,5,24,0,0,3145,3146,3,292,146,0,3146,
        3147,5,14,0,0,3147,3148,3,292,146,0,3148,3224,1,0,0,0,3149,3151,
        5,197,0,0,3150,3149,1,0,0,0,3150,3151,1,0,0,0,3151,3152,1,0,0,0,
        3152,3153,5,140,0,0,3153,3154,5,2,0,0,3154,3159,3,280,140,0,3155,
        3156,5,4,0,0,3156,3158,3,280,140,0,3157,3155,1,0,0,0,3158,3161,1,
        0,0,0,3159,3157,1,0,0,0,3159,3160,1,0,0,0,3160,3162,1,0,0,0,3161,
        3159,1,0,0,0,3162,3163,5,3,0,0,3163,3224,1,0,0,0,3164,3166,5,197,
        0,0,3165,3164,1,0,0,0,3165,3166,1,0,0,0,3166,3167,1,0,0,0,3167,3168,
        5,140,0,0,3168,3169,5,2,0,0,3169,3170,3,26,13,0,3170,3171,5,3,0,
        0,3171,3224,1,0,0,0,3172,3174,5,197,0,0,3173,3172,1,0,0,0,3173,3174,
        1,0,0,0,3174,3175,1,0,0,0,3175,3176,7,27,0,0,3176,3224,3,292,146,
        0,3177,3179,5,197,0,0,3178,3177,1,0,0,0,3178,3179,1,0,0,0,3179,3180,
        1,0,0,0,3180,3181,7,28,0,0,3181,3195,7,29,0,0,3182,3183,5,2,0,0,
        3183,3196,5,3,0,0,3184,3185,5,2,0,0,3185,3190,3,280,140,0,3186,3187,
        5,4,0,0,3187,3189,3,280,140,0,3188,3186,1,0,0,0,3189,3192,1,0,0,
        0,3190,3188,1,0,0,0,3190,3191,1,0,0,0,3191,3193,1,0,0,0,3192,3190,
        1,0,0,0,3193,3194,5,3,0,0,3194,3196,1,0,0,0,3195,3182,1,0,0,0,3195,
        3184,1,0,0,0,3196,3224,1,0,0,0,3197,3199,5,197,0,0,3198,3197,1,0,
        0,0,3198,3199,1,0,0,0,3199,3200,1,0,0,0,3200,3201,7,28,0,0,3201,
        3204,3,292,146,0,3202,3203,5,100,0,0,3203,3205,3,400,200,0,3204,
        3202,1,0,0,0,3204,3205,1,0,0,0,3205,3224,1,0,0,0,3206,3208,5,153,
        0,0,3207,3209,5,197,0,0,3208,3207,1,0,0,0,3208,3209,1,0,0,0,3209,
        3210,1,0,0,0,3210,3224,5,198,0,0,3211,3213,5,153,0,0,3212,3214,5,
        197,0,0,3213,3212,1,0,0,0,3213,3214,1,0,0,0,3214,3215,1,0,0,0,3215,
        3224,7,30,0,0,3216,3218,5,153,0,0,3217,3219,5,197,0,0,3218,3217,
        1,0,0,0,3218,3219,1,0,0,0,3219,3220,1,0,0,0,3220,3221,5,92,0,0,3221,
        3222,5,123,0,0,3222,3224,3,292,146,0,3223,3142,1,0,0,0,3223,3150,
        1,0,0,0,3223,3165,1,0,0,0,3223,3173,1,0,0,0,3223,3178,1,0,0,0,3223,
        3198,1,0,0,0,3223,3206,1,0,0,0,3223,3211,1,0,0,0,3223,3216,1,0,0,
        0,3224,291,1,0,0,0,3225,3226,6,146,-1,0,3226,3230,3,296,148,0,3227,
        3228,7,31,0,0,3228,3230,3,292,146,7,3229,3225,1,0,0,0,3229,3227,
        1,0,0,0,3230,3252,1,0,0,0,3231,3232,10,6,0,0,3232,3233,7,32,0,0,
        3233,3251,3,292,146,7,3234,3235,10,5,0,0,3235,3236,7,33,0,0,3236,
        3251,3,292,146,6,3237,3238,10,4,0,0,3238,3239,5,367,0,0,3239,3251,
        3,292,146,5,3240,3241,10,3,0,0,3241,3242,5,370,0,0,3242,3251,3,292,
        146,4,3243,3244,10,2,0,0,3244,3245,5,368,0,0,3245,3251,3,292,146,
        3,3246,3247,10,1,0,0,3247,3248,3,302,151,0,3248,3249,3,292,146,2,
        3249,3251,1,0,0,0,3250,3231,1,0,0,0,3250,3234,1,0,0,0,3250,3237,
        1,0,0,0,3250,3240,1,0,0,0,3250,3243,1,0,0,0,3250,3246,1,0,0,0,3251,
        3254,1,0,0,0,3252,3250,1,0,0,0,3252,3253,1,0,0,0,3253,293,1,0,0,
        0,3254,3252,1,0,0,0,3255,3256,7,34,0,0,3256,295,1,0,0,0,3257,3258,
        6,148,-1,0,3258,3507,7,35,0,0,3259,3260,7,36,0,0,3260,3263,5,2,0,
        0,3261,3264,3,294,147,0,3262,3264,3,400,200,0,3263,3261,1,0,0,0,
        3263,3262,1,0,0,0,3264,3265,1,0,0,0,3265,3266,5,4,0,0,3266,3267,
        3,292,146,0,3267,3268,5,4,0,0,3268,3269,3,292,146,0,3269,3270,5,
        3,0,0,3270,3507,1,0,0,0,3271,3272,7,37,0,0,3272,3275,5,2,0,0,3273,
        3276,3,294,147,0,3274,3276,3,400,200,0,3275,3273,1,0,0,0,3275,3274,
        1,0,0,0,3276,3277,1,0,0,0,3277,3278,5,4,0,0,3278,3279,3,292,146,
        0,3279,3280,5,4,0,0,3280,3281,3,292,146,0,3281,3282,5,3,0,0,3282,
        3507,1,0,0,0,3283,3285,5,35,0,0,3284,3286,3,362,181,0,3285,3284,
        1,0,0,0,3286,3287,1,0,0,0,3287,3285,1,0,0,0,3287,3288,1,0,0,0,3288,
        3291,1,0,0,0,3289,3290,5,97,0,0,3290,3292,3,280,140,0,3291,3289,
        1,0,0,0,3291,3292,1,0,0,0,3292,3293,1,0,0,0,3293,3294,5,99,0,0,3294,
        3507,1,0,0,0,3295,3296,5,35,0,0,3296,3298,3,280,140,0,3297,3299,
        3,362,181,0,3298,3297,1,0,0,0,3299,3300,1,0,0,0,3300,3298,1,0,0,
        0,3300,3301,1,0,0,0,3301,3304,1,0,0,0,3302,3303,5,97,0,0,3303,3305,
        3,280,140,0,3304,3302,1,0,0,0,3304,3305,1,0,0,0,3305,3306,1,0,0,
        0,3306,3307,5,99,0,0,3307,3507,1,0,0,0,3308,3309,7,38,0,0,3309,3310,
        5,2,0,0,3310,3311,3,280,140,0,3311,3312,5,20,0,0,3312,3313,3,330,
        165,0,3313,3314,5,3,0,0,3314,3507,1,0,0,0,3315,3316,5,286,0,0,3316,
        3325,5,2,0,0,3317,3322,3,266,133,0,3318,3319,5,4,0,0,3319,3321,3,
        266,133,0,3320,3318,1,0,0,0,3321,3324,1,0,0,0,3322,3320,1,0,0,0,
        3322,3323,1,0,0,0,3323,3326,1,0,0,0,3324,3322,1,0,0,0,3325,3317,
        1,0,0,0,3325,3326,1,0,0,0,3326,3327,1,0,0,0,3327,3507,5,3,0,0,3328,
        3329,5,116,0,0,3329,3330,5,2,0,0,3330,3333,3,280,140,0,3331,3332,
        5,138,0,0,3332,3334,5,199,0,0,3333,3331,1,0,0,0,3333,3334,1,0,0,
        0,3334,3335,1,0,0,0,3335,3336,5,3,0,0,3336,3507,1,0,0,0,3337,3338,
        5,17,0,0,3338,3339,5,2,0,0,3339,3342,3,280,140,0,3340,3341,5,138,
        0,0,3341,3343,5,199,0,0,3342,3340,1,0,0,0,3342,3343,1,0,0,0,3343,
        3344,1,0,0,0,3344,3345,5,3,0,0,3345,3507,1,0,0,0,3346,3347,5,157,
        0,0,3347,3348,5,2,0,0,3348,3351,3,280,140,0,3349,3350,5,138,0,0,
        3350,3352,5,199,0,0,3351,3349,1,0,0,0,3351,3352,1,0,0,0,3352,3353,
        1,0,0,0,3353,3354,5,3,0,0,3354,3507,1,0,0,0,3355,3356,5,225,0,0,
        3356,3357,5,2,0,0,3357,3358,3,292,146,0,3358,3359,5,140,0,0,3359,
        3360,3,292,146,0,3360,3361,5,3,0,0,3361,3507,1,0,0,0,3362,3507,3,
        300,150,0,3363,3507,5,363,0,0,3364,3365,3,382,191,0,3365,3366,5,
        5,0,0,3366,3367,5,363,0,0,3367,3507,1,0,0,0,3368,3369,5,2,0,0,3369,
        3372,3,266,133,0,3370,3371,5,4,0,0,3371,3373,3,266,133,0,3372,3370,
        1,0,0,0,3373,3374,1,0,0,0,3374,3372,1,0,0,0,3374,3375,1,0,0,0,3375,
        3376,1,0,0,0,3376,3377,5,3,0,0,3377,3507,1,0,0,0,3378,3379,5,2,0,
        0,3379,3380,3,26,13,0,3380,3381,5,3,0,0,3381,3507,1,0,0,0,3382,3383,
        5,136,0,0,3383,3384,5,2,0,0,3384,3385,3,280,140,0,3385,3386,5,3,
        0,0,3386,3507,1,0,0,0,3387,3388,3,378,189,0,3388,3400,5,2,0,0,3389,
        3391,3,196,98,0,3390,3389,1,0,0,0,3390,3391,1,0,0,0,3391,3392,1,
        0,0,0,3392,3397,3,284,142,0,3393,3394,5,4,0,0,3394,3396,3,284,142,
        0,3395,3393,1,0,0,0,3396,3399,1,0,0,0,3397,3395,1,0,0,0,3397,3398,
        1,0,0,0,3398,3401,1,0,0,0,3399,3397,1,0,0,0,3400,3390,1,0,0,0,3400,
        3401,1,0,0,0,3401,3402,1,0,0,0,3402,3409,5,3,0,0,3403,3404,5,114,
        0,0,3404,3405,5,2,0,0,3405,3406,5,344,0,0,3406,3407,3,288,144,0,
        3407,3408,5,3,0,0,3408,3410,1,0,0,0,3409,3403,1,0,0,0,3409,3410,
        1,0,0,0,3410,3413,1,0,0,0,3411,3412,7,39,0,0,3412,3414,5,199,0,0,
        3413,3411,1,0,0,0,3413,3414,1,0,0,0,3414,3417,1,0,0,0,3415,3416,
        5,213,0,0,3416,3418,3,370,185,0,3417,3415,1,0,0,0,3417,3418,1,0,
        0,0,3418,3507,1,0,0,0,3419,3420,3,388,194,0,3420,3421,5,372,0,0,
        3421,3422,3,280,140,0,3422,3507,1,0,0,0,3423,3424,5,2,0,0,3424,3427,
        3,388,194,0,3425,3426,5,4,0,0,3426,3428,3,388,194,0,3427,3425,1,
        0,0,0,3428,3429,1,0,0,0,3429,3427,1,0,0,0,3429,3430,1,0,0,0,3430,
        3431,1,0,0,0,3431,3432,5,3,0,0,3432,3433,5,372,0,0,3433,3434,3,280,
        140,0,3434,3507,1,0,0,0,3435,3507,3,388,194,0,3436,3437,5,2,0,0,
        3437,3438,3,280,140,0,3438,3439,5,3,0,0,3439,3507,1,0,0,0,3440,3441,
        5,110,0,0,3441,3442,5,2,0,0,3442,3443,3,388,194,0,3443,3444,5,123,
        0,0,3444,3445,3,292,146,0,3445,3446,5,3,0,0,3446,3507,1,0,0,0,3447,
        3448,7,40,0,0,3448,3449,5,2,0,0,3449,3450,3,292,146,0,3450,3451,
        7,41,0,0,3451,3454,3,292,146,0,3452,3453,7,42,0,0,3453,3455,3,292,
        146,0,3454,3452,1,0,0,0,3454,3455,1,0,0,0,3455,3456,1,0,0,0,3456,
        3457,5,3,0,0,3457,3507,1,0,0,0,3458,3459,5,315,0,0,3459,3461,5,2,
        0,0,3460,3462,7,43,0,0,3461,3460,1,0,0,0,3461,3462,1,0,0,0,3462,
        3464,1,0,0,0,3463,3465,3,292,146,0,3464,3463,1,0,0,0,3464,3465,1,
        0,0,0,3465,3466,1,0,0,0,3466,3467,5,123,0,0,3467,3468,3,292,146,
        0,3468,3469,5,3,0,0,3469,3507,1,0,0,0,3470,3471,5,215,0,0,3471,3472,
        5,2,0,0,3472,3473,3,292,146,0,3473,3474,5,224,0,0,3474,3475,3,292,
        146,0,3475,3476,5,123,0,0,3476,3479,3,292,146,0,3477,3478,5,119,
        0,0,3478,3480,3,292,146,0,3479,3477,1,0,0,0,3479,3480,1,0,0,0,3480,
        3481,1,0,0,0,3481,3482,5,3,0,0,3482,3507,1,0,0,0,3483,3484,7,44,
        0,0,3484,3485,5,2,0,0,3485,3486,3,292,146,0,3486,3487,5,3,0,0,3487,
        3488,5,347,0,0,3488,3489,5,130,0,0,3489,3490,5,2,0,0,3490,3491,5,
        209,0,0,3491,3492,5,31,0,0,3492,3493,3,108,54,0,3493,3500,5,3,0,
        0,3494,3495,5,114,0,0,3495,3496,5,2,0,0,3496,3497,5,344,0,0,3497,
        3498,3,288,144,0,3498,3499,5,3,0,0,3499,3501,1,0,0,0,3500,3494,1,
        0,0,0,3500,3501,1,0,0,0,3501,3504,1,0,0,0,3502,3503,5,213,0,0,3503,
        3505,3,370,185,0,3504,3502,1,0,0,0,3504,3505,1,0,0,0,3505,3507,1,
        0,0,0,3506,3257,1,0,0,0,3506,3259,1,0,0,0,3506,3271,1,0,0,0,3506,
        3283,1,0,0,0,3506,3295,1,0,0,0,3506,3308,1,0,0,0,3506,3315,1,0,0,
        0,3506,3328,1,0,0,0,3506,3337,1,0,0,0,3506,3346,1,0,0,0,3506,3355,
        1,0,0,0,3506,3362,1,0,0,0,3506,3363,1,0,0,0,3506,3364,1,0,0,0,3506,
        3368,1,0,0,0,3506,3378,1,0,0,0,3506,3382,1,0,0,0,3506,3387,1,0,0,
        0,3506,3419,1,0,0,0,3506,3423,1,0,0,0,3506,3435,1,0,0,0,3506,3436,
        1,0,0,0,3506,3440,1,0,0,0,3506,3447,1,0,0,0,3506,3458,1,0,0,0,3506,
        3470,1,0,0,0,3506,3483,1,0,0,0,3507,3518,1,0,0,0,3508,3509,10,9,
        0,0,3509,3510,5,6,0,0,3510,3511,3,292,146,0,3511,3512,5,7,0,0,3512,
        3517,1,0,0,0,3513,3514,10,7,0,0,3514,3515,5,5,0,0,3515,3517,3,388,
        194,0,3516,3508,1,0,0,0,3516,3513,1,0,0,0,3517,3520,1,0,0,0,3518,
        3516,1,0,0,0,3518,3519,1,0,0,0,3519,297,1,0,0,0,3520,3518,1,0,0,
        0,3521,3529,5,71,0,0,3522,3529,5,303,0,0,3523,3529,5,304,0,0,3524,
        3529,5,305,0,0,3525,3529,5,149,0,0,3526,3529,5,133,0,0,3527,3529,
        3,388,194,0,3528,3521,1,0,0,0,3528,3522,1,0,0,0,3528,3523,1,0,0,
        0,3528,3524,1,0,0,0,3528,3525,1,0,0,0,3528,3526,1,0,0,0,3528,3527,
        1,0,0,0,3529,299,1,0,0,0,3530,3546,5,198,0,0,3531,3546,5,376,0,0,
        3532,3533,5,371,0,0,3533,3546,3,388,194,0,3534,3546,3,310,155,0,
        3535,3536,3,298,149,0,3536,3537,3,400,200,0,3537,3546,1,0,0,0,3538,
        3546,3,396,198,0,3539,3546,3,308,154,0,3540,3542,3,400,200,0,3541,
        3540,1,0,0,0,3542,3543,1,0,0,0,3543,3541,1,0,0,0,3543,3544,1,0,0,
        0,3544,3546,1,0,0,0,3545,3530,1,0,0,0,3545,3531,1,0,0,0,3545,3532,
        1,0,0,0,3545,3534,1,0,0,0,3545,3535,1,0,0,0,3545,3538,1,0,0,0,3545,
        3539,1,0,0,0,3545,3541,1,0,0,0,3546,301,1,0,0,0,3547,3548,7,45,0,
        0,3548,303,1,0,0,0,3549,3550,7,46,0,0,3550,305,1,0,0,0,3551,3552,
        7,47,0,0,3552,307,1,0,0,0,3553,3554,7,48,0,0,3554,309,1,0,0,0,3555,
        3558,5,149,0,0,3556,3559,3,312,156,0,3557,3559,3,316,158,0,3558,
        3556,1,0,0,0,3558,3557,1,0,0,0,3559,311,1,0,0,0,3560,3562,3,314,
        157,0,3561,3563,3,318,159,0,3562,3561,1,0,0,0,3562,3563,1,0,0,0,
        3563,313,1,0,0,0,3564,3565,3,320,160,0,3565,3566,3,322,161,0,3566,
        3568,1,0,0,0,3567,3564,1,0,0,0,3568,3569,1,0,0,0,3569,3567,1,0,0,
        0,3569,3570,1,0,0,0,3570,315,1,0,0,0,3571,3574,3,318,159,0,3572,
        3575,3,314,157,0,3573,3575,3,318,159,0,3574,3572,1,0,0,0,3574,3573,
        1,0,0,0,3574,3575,1,0,0,0,3575,317,1,0,0,0,3576,3577,3,320,160,0,
        3577,3578,3,324,162,0,3578,3579,5,309,0,0,3579,3580,3,324,162,0,
        3580,319,1,0,0,0,3581,3583,7,49,0,0,3582,3581,1,0,0,0,3582,3583,
        1,0,0,0,3583,3587,1,0,0,0,3584,3588,5,382,0,0,3585,3588,5,384,0,
        0,3586,3588,3,400,200,0,3587,3584,1,0,0,0,3587,3585,1,0,0,0,3587,
        3586,1,0,0,0,3588,321,1,0,0,0,3589,3590,7,50,0,0,3590,323,1,0,0,
        0,3591,3592,7,51,0,0,3592,325,1,0,0,0,3593,3597,5,116,0,0,3594,3595,
        5,9,0,0,3595,3597,3,384,192,0,3596,3593,1,0,0,0,3596,3594,1,0,0,
        0,3597,327,1,0,0,0,3598,3629,5,27,0,0,3599,3629,5,308,0,0,3600,3629,
        5,32,0,0,3601,3629,5,276,0,0,3602,3629,5,272,0,0,3603,3629,5,150,
        0,0,3604,3629,5,151,0,0,3605,3629,5,25,0,0,3606,3629,5,174,0,0,3607,
        3629,5,117,0,0,3608,3629,5,234,0,0,3609,3629,5,95,0,0,3610,3629,
        5,71,0,0,3611,3629,5,303,0,0,3612,3629,5,305,0,0,3613,3629,5,304,
        0,0,3614,3629,5,285,0,0,3615,3629,5,41,0,0,3616,3629,5,40,0,0,3617,
        3629,5,334,0,0,3618,3629,5,26,0,0,3619,3629,5,80,0,0,3620,3629,5,
        79,0,0,3621,3629,5,200,0,0,3622,3629,5,340,0,0,3623,3629,5,149,0,
        0,3624,3629,5,19,0,0,3625,3629,5,286,0,0,3626,3629,5,177,0,0,3627,
        3629,3,388,194,0,3628,3598,1,0,0,0,3628,3599,1,0,0,0,3628,3600,1,
        0,0,0,3628,3601,1,0,0,0,3628,3602,1,0,0,0,3628,3603,1,0,0,0,3628,
        3604,1,0,0,0,3628,3605,1,0,0,0,3628,3606,1,0,0,0,3628,3607,1,0,0,
        0,3628,3608,1,0,0,0,3628,3609,1,0,0,0,3628,3610,1,0,0,0,3628,3611,
        1,0,0,0,3628,3612,1,0,0,0,3628,3613,1,0,0,0,3628,3614,1,0,0,0,3628,
        3615,1,0,0,0,3628,3616,1,0,0,0,3628,3617,1,0,0,0,3628,3618,1,0,0,
        0,3628,3619,1,0,0,0,3628,3620,1,0,0,0,3628,3621,1,0,0,0,3628,3622,
        1,0,0,0,3628,3623,1,0,0,0,3628,3624,1,0,0,0,3628,3625,1,0,0,0,3628,
        3626,1,0,0,0,3628,3627,1,0,0,0,3629,329,1,0,0,0,3630,3631,5,19,0,
        0,3631,3632,5,356,0,0,3632,3633,3,330,165,0,3633,3634,5,358,0,0,
        3634,3677,1,0,0,0,3635,3636,5,177,0,0,3636,3637,5,356,0,0,3637,3638,
        3,330,165,0,3638,3639,5,4,0,0,3639,3640,3,330,165,0,3640,3641,5,
        358,0,0,3641,3677,1,0,0,0,3642,3649,5,286,0,0,3643,3645,5,356,0,
        0,3644,3646,3,358,179,0,3645,3644,1,0,0,0,3645,3646,1,0,0,0,3646,
        3647,1,0,0,0,3647,3650,5,358,0,0,3648,3650,5,354,0,0,3649,3643,1,
        0,0,0,3649,3648,1,0,0,0,3650,3677,1,0,0,0,3651,3652,5,149,0,0,3652,
        3655,7,52,0,0,3653,3654,5,309,0,0,3654,3656,5,186,0,0,3655,3653,
        1,0,0,0,3655,3656,1,0,0,0,3656,3677,1,0,0,0,3657,3658,5,149,0,0,
        3658,3661,7,53,0,0,3659,3660,5,309,0,0,3660,3662,7,54,0,0,3661,3659,
        1,0,0,0,3661,3662,1,0,0,0,3662,3677,1,0,0,0,3663,3674,3,328,164,
        0,3664,3665,5,2,0,0,3665,3670,5,382,0,0,3666,3667,5,4,0,0,3667,3669,
        5,382,0,0,3668,3666,1,0,0,0,3669,3672,1,0,0,0,3670,3668,1,0,0,0,
        3670,3671,1,0,0,0,3671,3673,1,0,0,0,3672,3670,1,0,0,0,3673,3675,
        5,3,0,0,3674,3664,1,0,0,0,3674,3675,1,0,0,0,3675,3677,1,0,0,0,3676,
        3630,1,0,0,0,3676,3635,1,0,0,0,3676,3642,1,0,0,0,3676,3651,1,0,0,
        0,3676,3657,1,0,0,0,3676,3663,1,0,0,0,3677,331,1,0,0,0,3678,3683,
        3,334,167,0,3679,3680,5,4,0,0,3680,3682,3,334,167,0,3681,3679,1,
        0,0,0,3682,3685,1,0,0,0,3683,3681,1,0,0,0,3683,3684,1,0,0,0,3684,
        333,1,0,0,0,3685,3683,1,0,0,0,3686,3687,3,96,48,0,3687,3691,3,330,
        165,0,3688,3690,3,340,170,0,3689,3688,1,0,0,0,3690,3693,1,0,0,0,
        3691,3689,1,0,0,0,3691,3692,1,0,0,0,3692,335,1,0,0,0,3693,3691,1,
        0,0,0,3694,3699,3,338,169,0,3695,3696,5,4,0,0,3696,3698,3,338,169,
        0,3697,3695,1,0,0,0,3698,3701,1,0,0,0,3699,3697,1,0,0,0,3699,3700,
        1,0,0,0,3700,337,1,0,0,0,3701,3699,1,0,0,0,3702,3703,3,92,46,0,3703,
        3707,3,330,165,0,3704,3706,3,340,170,0,3705,3704,1,0,0,0,3706,3709,
        1,0,0,0,3707,3705,1,0,0,0,3707,3708,1,0,0,0,3708,339,1,0,0,0,3709,
        3707,1,0,0,0,3710,3711,5,197,0,0,3711,3716,5,198,0,0,3712,3716,3,
        342,171,0,3713,3716,3,24,12,0,3714,3716,3,326,163,0,3715,3710,1,
        0,0,0,3715,3712,1,0,0,0,3715,3713,1,0,0,0,3715,3714,1,0,0,0,3716,
        341,1,0,0,0,3717,3718,5,82,0,0,3718,3719,3,280,140,0,3719,343,1,
        0,0,0,3720,3721,7,55,0,0,3721,3722,3,280,140,0,3722,345,1,0,0,0,
        3723,3728,3,348,174,0,3724,3725,5,4,0,0,3725,3727,3,348,174,0,3726,
        3724,1,0,0,0,3727,3730,1,0,0,0,3728,3726,1,0,0,0,3728,3729,1,0,0,
        0,3729,347,1,0,0,0,3730,3728,1,0,0,0,3731,3732,3,384,192,0,3732,
        3735,3,330,165,0,3733,3734,5,197,0,0,3734,3736,5,198,0,0,3735,3733,
        1,0,0,0,3735,3736,1,0,0,0,3736,3738,1,0,0,0,3737,3739,3,24,12,0,
        3738,3737,1,0,0,0,3738,3739,1,0,0,0,3739,349,1,0,0,0,3740,3745,3,
        352,176,0,3741,3742,5,4,0,0,3742,3744,3,352,176,0,3743,3741,1,0,
        0,0,3744,3747,1,0,0,0,3745,3743,1,0,0,0,3745,3746,1,0,0,0,3746,351,
        1,0,0,0,3747,3745,1,0,0,0,3748,3749,3,96,48,0,3749,3753,3,330,165,
        0,3750,3752,3,354,177,0,3751,3750,1,0,0,0,3752,3755,1,0,0,0,3753,
        3751,1,0,0,0,3753,3754,1,0,0,0,3754,353,1,0,0,0,3755,3753,1,0,0,
        0,3756,3757,5,197,0,0,3757,3762,5,198,0,0,3758,3762,3,342,171,0,
        3759,3762,3,356,178,0,3760,3762,3,24,12,0,3761,3756,1,0,0,0,3761,
        3758,1,0,0,0,3761,3759,1,0,0,0,3761,3760,1,0,0,0,3762,355,1,0,0,
        0,3763,3764,5,127,0,0,3764,3765,5,12,0,0,3765,3766,5,20,0,0,3766,
        3767,5,2,0,0,3767,3768,3,280,140,0,3768,3769,5,3,0,0,3769,357,1,
        0,0,0,3770,3775,3,360,180,0,3771,3772,5,4,0,0,3772,3774,3,360,180,
        0,3773,3771,1,0,0,0,3774,3777,1,0,0,0,3775,3773,1,0,0,0,3775,3776,
        1,0,0,0,3776,359,1,0,0,0,3777,3775,1,0,0,0,3778,3780,3,388,194,0,
        3779,3781,5,371,0,0,3780,3779,1,0,0,0,3780,3781,1,0,0,0,3781,3782,
        1,0,0,0,3782,3785,3,330,165,0,3783,3784,5,197,0,0,3784,3786,5,198,
        0,0,3785,3783,1,0,0,0,3785,3786,1,0,0,0,3786,3788,1,0,0,0,3787,3789,
        3,24,12,0,3788,3787,1,0,0,0,3788,3789,1,0,0,0,3789,361,1,0,0,0,3790,
        3791,5,343,0,0,3791,3792,3,280,140,0,3792,3793,5,300,0,0,3793,3794,
        3,280,140,0,3794,363,1,0,0,0,3795,3796,5,345,0,0,3796,3801,3,368,
        184,0,3797,3798,5,4,0,0,3798,3800,3,368,184,0,3799,3797,1,0,0,0,
        3800,3803,1,0,0,0,3801,3799,1,0,0,0,3801,3802,1,0,0,0,3802,365,1,
        0,0,0,3803,3801,1,0,0,0,3804,3805,5,351,0,0,3805,3806,5,31,0,0,3806,
        3807,3,94,47,0,3807,367,1,0,0,0,3808,3809,3,384,192,0,3809,3810,
        5,20,0,0,3810,3811,3,370,185,0,3811,369,1,0,0,0,3812,3859,3,384,
        192,0,3813,3814,5,2,0,0,3814,3815,3,384,192,0,3815,3816,5,3,0,0,
        3816,3859,1,0,0,0,3817,3852,5,2,0,0,3818,3819,5,44,0,0,3819,3820,
        5,31,0,0,3820,3825,3,280,140,0,3821,3822,5,4,0,0,3822,3824,3,280,
        140,0,3823,3821,1,0,0,0,3824,3827,1,0,0,0,3825,3823,1,0,0,0,3825,
        3826,1,0,0,0,3826,3853,1,0,0,0,3827,3825,1,0,0,0,3828,3829,7,24,
        0,0,3829,3830,5,31,0,0,3830,3835,3,280,140,0,3831,3832,5,4,0,0,3832,
        3834,3,280,140,0,3833,3831,1,0,0,0,3834,3837,1,0,0,0,3835,3833,1,
        0,0,0,3835,3836,1,0,0,0,3836,3839,1,0,0,0,3837,3835,1,0,0,0,3838,
        3828,1,0,0,0,3838,3839,1,0,0,0,3839,3850,1,0,0,0,3840,3841,7,25,
        0,0,3841,3842,5,31,0,0,3842,3847,3,108,54,0,3843,3844,5,4,0,0,3844,
        3846,3,108,54,0,3845,3843,1,0,0,0,3846,3849,1,0,0,0,3847,3845,1,
        0,0,0,3847,3848,1,0,0,0,3848,3851,1,0,0,0,3849,3847,1,0,0,0,3850,
        3840,1,0,0,0,3850,3851,1,0,0,0,3851,3853,1,0,0,0,3852,3818,1,0,0,
        0,3852,3838,1,0,0,0,3853,3855,1,0,0,0,3854,3856,3,372,186,0,3855,
        3854,1,0,0,0,3855,3856,1,0,0,0,3856,3857,1,0,0,0,3857,3859,5,3,0,
        0,3858,3812,1,0,0,0,3858,3813,1,0,0,0,3858,3817,1,0,0,0,3859,371,
        1,0,0,0,3860,3861,5,233,0,0,3861,3877,3,374,187,0,3862,3863,5,258,
        0,0,3863,3877,3,374,187,0,3864,3865,5,233,0,0,3865,3866,5,24,0,0,
        3866,3867,3,374,187,0,3867,3868,5,14,0,0,3868,3869,3,374,187,0,3869,
        3877,1,0,0,0,3870,3871,5,258,0,0,3871,3872,5,24,0,0,3872,3873,3,
        374,187,0,3873,3874,5,14,0,0,3874,3875,3,374,187,0,3875,3877,1,0,
        0,0,3876,3860,1,0,0,0,3876,3862,1,0,0,0,3876,3864,1,0,0,0,3876,3870,
        1,0,0,0,3877,373,1,0,0,0,3878,3879,5,321,0,0,3879,3886,7,56,0,0,
        3880,3881,5,62,0,0,3881,3886,5,257,0,0,3882,3883,3,280,140,0,3883,
        3884,7,56,0,0,3884,3886,1,0,0,0,3885,3878,1,0,0,0,3885,3880,1,0,
        0,0,3885,3882,1,0,0,0,3886,375,1,0,0,0,3887,3892,3,382,191,0,3888,
        3889,5,4,0,0,3889,3891,3,382,191,0,3890,3888,1,0,0,0,3891,3894,1,
        0,0,0,3892,3890,1,0,0,0,3892,3893,1,0,0,0,3893,377,1,0,0,0,3894,
        3892,1,0,0,0,3895,3896,5,136,0,0,3896,3897,5,2,0,0,3897,3898,3,280,
        140,0,3898,3899,5,3,0,0,3899,3905,1,0,0,0,3900,3905,3,382,191,0,
        3901,3905,5,114,0,0,3902,3905,5,161,0,0,3903,3905,5,250,0,0,3904,
        3895,1,0,0,0,3904,3900,1,0,0,0,3904,3901,1,0,0,0,3904,3902,1,0,0,
        0,3904,3903,1,0,0,0,3905,379,1,0,0,0,3906,3907,3,382,191,0,3907,
        381,1,0,0,0,3908,3913,3,388,194,0,3909,3910,5,5,0,0,3910,3912,3,
        388,194,0,3911,3909,1,0,0,0,3912,3915,1,0,0,0,3913,3911,1,0,0,0,
        3913,3914,1,0,0,0,3914,383,1,0,0,0,3915,3913,1,0,0,0,3916,3917,3,
        388,194,0,3917,3918,3,386,193,0,3918,385,1,0,0,0,3919,3920,5,362,
        0,0,3920,3922,3,388,194,0,3921,3919,1,0,0,0,3922,3923,1,0,0,0,3923,
        3921,1,0,0,0,3923,3924,1,0,0,0,3924,3927,1,0,0,0,3925,3927,1,0,0,
        0,3926,3921,1,0,0,0,3926,3925,1,0,0,0,3927,387,1,0,0,0,3928,3931,
        3,390,195,0,3929,3931,3,408,204,0,3930,3928,1,0,0,0,3930,3929,1,
        0,0,0,3931,389,1,0,0,0,3932,3937,5,388,0,0,3933,3937,3,392,196,0,
        3934,3937,3,406,203,0,3935,3937,3,410,205,0,3936,3932,1,0,0,0,3936,
        3933,1,0,0,0,3936,3934,1,0,0,0,3936,3935,1,0,0,0,3937,391,1,0,0,
        0,3938,3939,7,57,0,0,3939,393,1,0,0,0,3940,3941,5,389,0,0,3941,395,
        1,0,0,0,3942,3944,5,362,0,0,3943,3942,1,0,0,0,3943,3944,1,0,0,0,
        3944,3945,1,0,0,0,3945,3983,5,383,0,0,3946,3948,5,362,0,0,3947,3946,
        1,0,0,0,3947,3948,1,0,0,0,3948,3949,1,0,0,0,3949,3983,5,384,0,0,
        3950,3952,5,362,0,0,3951,3950,1,0,0,0,3951,3952,1,0,0,0,3952,3953,
        1,0,0,0,3953,3983,7,58,0,0,3954,3956,5,362,0,0,3955,3954,1,0,0,0,
        3955,3956,1,0,0,0,3956,3957,1,0,0,0,3957,3983,5,382,0,0,3958,3960,
        5,362,0,0,3959,3958,1,0,0,0,3959,3960,1,0,0,0,3960,3961,1,0,0,0,
        3961,3983,5,379,0,0,3962,3964,5,362,0,0,3963,3962,1,0,0,0,3963,3964,
        1,0,0,0,3964,3965,1,0,0,0,3965,3983,5,380,0,0,3966,3968,5,362,0,
        0,3967,3966,1,0,0,0,3967,3968,1,0,0,0,3968,3969,1,0,0,0,3969,3983,
        5,381,0,0,3970,3972,5,362,0,0,3971,3970,1,0,0,0,3971,3972,1,0,0,
        0,3972,3973,1,0,0,0,3973,3983,5,386,0,0,3974,3976,5,362,0,0,3975,
        3974,1,0,0,0,3975,3976,1,0,0,0,3976,3977,1,0,0,0,3977,3983,5,385,
        0,0,3978,3980,5,362,0,0,3979,3978,1,0,0,0,3979,3980,1,0,0,0,3980,
        3981,1,0,0,0,3981,3983,5,387,0,0,3982,3943,1,0,0,0,3982,3947,1,0,
        0,0,3982,3951,1,0,0,0,3982,3955,1,0,0,0,3982,3959,1,0,0,0,3982,3963,
        1,0,0,0,3982,3967,1,0,0,0,3982,3971,1,0,0,0,3982,3975,1,0,0,0,3982,
        3979,1,0,0,0,3983,397,1,0,0,0,3984,3985,5,319,0,0,3985,3996,3,330,
        165,0,3986,3996,3,24,12,0,3987,3996,3,326,163,0,3988,3989,7,59,0,
        0,3989,3990,5,197,0,0,3990,3996,5,198,0,0,3991,3992,5,269,0,0,3992,
        3996,3,342,171,0,3993,3994,5,96,0,0,3994,3996,5,82,0,0,3995,3984,
        1,0,0,0,3995,3986,1,0,0,0,3995,3987,1,0,0,0,3995,3988,1,0,0,0,3995,
        3991,1,0,0,0,3995,3993,1,0,0,0,3996,399,1,0,0,0,3997,3998,7,60,0,
        0,3998,401,1,0,0,0,3999,4002,3,400,200,0,4000,4002,5,198,0,0,4001,
        3999,1,0,0,0,4001,4000,1,0,0,0,4002,403,1,0,0,0,4003,4006,5,382,
        0,0,4004,4006,3,400,200,0,4005,4003,1,0,0,0,4005,4004,1,0,0,0,4006,
        405,1,0,0,0,4007,4008,7,61,0,0,4008,407,1,0,0,0,4009,4010,7,62,0,
        0,4010,409,1,0,0,0,4011,4012,7,63,0,0,4012,411,1,0,0,0,519,415,422,
        426,431,438,443,451,453,472,476,482,485,488,495,498,502,505,510,
        522,524,532,535,539,542,548,559,565,570,603,613,624,635,646,651,
        660,664,670,674,679,685,697,705,711,722,726,731,746,750,757,761,
        767,796,800,805,812,818,821,824,828,832,840,842,851,854,863,868,
        874,881,884,888,899,902,908,912,927,929,937,941,947,950,954,957,
        963,968,972,979,982,985,992,997,1006,1014,1020,1023,1026,1032,1036,
        1041,1044,1048,1050,1058,1066,1069,1076,1079,1082,1091,1096,1102,
        1107,1110,1114,1117,1121,1149,1152,1160,1166,1169,1172,1177,1185,
        1190,1196,1202,1205,1212,1219,1227,1244,1271,1274,1280,1289,1298,
        1304,1309,1314,1321,1326,1331,1338,1346,1349,1353,1365,1369,1376,
        1492,1500,1508,1517,1527,1531,1534,1538,1544,1556,1568,1573,1582,
        1590,1595,1597,1605,1610,1614,1617,1625,1630,1639,1644,1647,1652,
        1656,1661,1663,1667,1676,1684,1690,1701,1708,1717,1722,1725,1748,
        1750,1762,1769,1772,1779,1783,1789,1797,1804,1807,1815,1826,1837,
        1845,1851,1863,1870,1877,1889,1897,1903,1909,1912,1928,1935,1946,
        1955,1958,1967,1970,1979,1982,1991,1994,1997,2002,2004,2008,2019,
        2025,2031,2034,2036,2049,2058,2062,2065,2069,2075,2079,2087,2091,
        2094,2097,2100,2104,2108,2113,2117,2120,2123,2126,2130,2135,2139,
        2142,2145,2148,2150,2156,2163,2168,2171,2174,2178,2188,2192,2194,
        2197,2201,2207,2211,2222,2232,2236,2248,2260,2275,2280,2286,2293,
        2309,2314,2327,2332,2340,2346,2350,2353,2358,2365,2371,2380,2390,
        2405,2410,2412,2417,2426,2439,2444,2448,2455,2460,2464,2467,2470,
        2484,2497,2502,2506,2509,2513,2519,2522,2529,2541,2552,2565,2576,
        2581,2589,2594,2608,2617,2620,2625,2632,2635,2641,2647,2650,2655,
        2660,2664,2670,2674,2677,2682,2685,2690,2694,2697,2700,2706,2711,
        2718,2721,2739,2741,2744,2755,2764,2771,2779,2786,2791,2794,2797,
        2803,2811,2819,2831,2837,2844,2851,2853,2866,2872,2874,2884,2890,
        2892,2900,2904,2916,2919,2924,2928,2930,2939,2951,2953,2960,2967,
        2973,2979,2981,2988,2996,3004,3010,3015,3022,3035,3043,3046,3050,
        3052,3059,3070,3077,3087,3092,3096,3106,3113,3126,3128,3136,3138,
        3142,3150,3159,3165,3173,3178,3190,3195,3198,3204,3208,3213,3218,
        3223,3229,3250,3252,3263,3275,3287,3291,3300,3304,3322,3325,3333,
        3342,3351,3374,3390,3397,3400,3409,3413,3417,3429,3454,3461,3464,
        3479,3500,3504,3506,3516,3518,3528,3543,3545,3558,3562,3569,3574,
        3582,3587,3596,3628,3645,3649,3655,3661,3670,3674,3676,3683,3691,
        3699,3707,3715,3728,3735,3738,3745,3753,3761,3775,3780,3785,3788,
        3801,3825,3835,3838,3847,3850,3852,3855,3858,3876,3885,3892,3904,
        3913,3923,3926,3930,3936,3943,3947,3951,3955,3959,3963,3967,3971,
        3975,3979,3982,3995,4001,4005
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!SparkSqlParser.__ATN) {
            SparkSqlParser.__ATN = new antlr.ATNDeserializer().deserialize(SparkSqlParser._serializedATN);
        }

        return SparkSqlParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(SparkSqlParser.literalNames, SparkSqlParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return SparkSqlParser.vocabulary;
    }

    private static readonly decisionsToDFA = SparkSqlParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ProgramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.EOF, 0)!;
    }
    public singleStatement(): SingleStatementContext[];
    public singleStatement(i: number): SingleStatementContext | null;
    public singleStatement(i?: number): SingleStatementContext[] | SingleStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SingleStatementContext);
        }

        return this.getRuleContext(i, SingleStatementContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_program;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterProgram) {
             listener.enterProgram(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitProgram) {
             listener.exitProgram(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProgram) {
            return visitor.visitProgram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.SEMICOLON, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_singleStatement;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSingleStatement) {
             listener.enterSingleStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSingleStatement) {
             listener.exitSingleStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSingleStatement) {
            return visitor.visitSingleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_statement;
    }
    public override copyFrom(ctx: StatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ResetAnyContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_RESET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_RESET, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterResetAny) {
             listener.enterResetAny(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitResetAny) {
             listener.exitResetAny(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResetAny) {
            return visitor.visitResetAny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableDropColumnContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterTableDropColumn) {
             listener.enterAlterTableDropColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterTableDropColumn) {
             listener.exitAlterTableDropColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableDropColumn) {
            return visitor.visitAlterTableDropColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropMaterializedView) {
             listener.enterDropMaterializedView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropMaterializedView) {
             listener.exitDropMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropMaterializedView) {
            return visitor.visitDropMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterViewQueryContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterViewQuery) {
             listener.enterAlterViewQuery(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterViewQuery) {
             listener.exitAlterViewQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterViewQuery) {
            return visitor.visitAlterViewQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESTRICT, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASCADE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropNamespace) {
             listener.enterDropNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropNamespace) {
             listener.exitDropNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropNamespace) {
            return visitor.visitDropNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTempViewUsingContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public tableProvider(): TableProviderContext {
        return this.getRuleContext(0, TableProviderContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GLOBAL, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public colTypeList(): ColTypeListContext | null {
        return this.getRuleContext(0, ColTypeListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateTempViewUsing) {
             listener.enterCreateTempViewUsing(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateTempViewUsing) {
             listener.exitCreateTempViewUsing(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTempViewUsing) {
            return visitor.visitCreateTempViewUsing(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_RENAME, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TO, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRenameTable) {
             listener.enterRenameTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRenameTable) {
             listener.exitRenameTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenameTable) {
            return visitor.visitRenameTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeclareVariableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DECLARE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DECLARE, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public variableDefaultExpression(): VariableDefaultExpressionContext | null {
        return this.getRuleContext(0, VariableDefaultExpressionContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDeclareVariable) {
             listener.enterDeclareVariable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDeclareVariable) {
             listener.exitDeclareVariable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeclareVariable) {
            return visitor.visitDeclareVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FailNativeCommandContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ROLE, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFailNativeCommand) {
             listener.enterFailNativeCommand(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFailNativeCommand) {
             listener.exitFailNativeCommand(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFailNativeCommand) {
            return visitor.visitFailNativeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetCatalogContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_CATALOG(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CATALOG, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetCatalog) {
             listener.enterSetCatalog(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetCatalog) {
             listener.exitSetCatalog(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetCatalog) {
            return visitor.visitSetCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterMaterializedViewPropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0)!;
    }
    public propertyList(): PropertyListContext {
        return this.getRuleContext(0, PropertyListContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterMaterializedViewProperties) {
             listener.enterAlterMaterializedViewProperties(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterMaterializedViewProperties) {
             listener.exitAlterMaterializedViewProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterMaterializedViewProperties) {
            return visitor.visitAlterMaterializedViewProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ClearCacheContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CLEAR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CLEAR, 0)!;
    }
    public KW_CACHE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CACHE, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterClearCache) {
             listener.enterClearCache(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitClearCache) {
             listener.exitClearCache(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitClearCache) {
            return visitor.visitClearCache(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropView) {
             listener.enterDropView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropView) {
             listener.exitDropView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesContext extends StatementContext {
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_TABLES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLES, 0)!;
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowTables) {
             listener.enterShowTables(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowTables) {
             listener.exitShowTables(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowTables) {
            return visitor.visitShowTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RecoverPartitionsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_RECOVER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_RECOVER, 0)!;
    }
    public KW_PARTITIONS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRecoverPartitions) {
             listener.enterRecoverPartitions(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRecoverPartitions) {
             listener.exitRecoverPartitions(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRecoverPartitions) {
            return visitor.visitRecoverPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropIndexContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INDEX, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropIndex) {
             listener.enterDropIndex(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropIndex) {
             listener.exitDropIndex(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropIndex) {
            return visitor.visitDropIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTimeZoneIntervalContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_TIME(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TIME, 0)!;
    }
    public KW_ZONE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ZONE, 0)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTimeZoneInterval) {
             listener.enterSetTimeZoneInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTimeZoneInterval) {
             listener.exitSetTimeZoneInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTimeZoneInterval) {
            return visitor.visitSetTimeZoneInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCatalogsContext extends StatementContext {
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_CATALOGS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CATALOGS, 0)!;
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowCatalogs) {
             listener.enterShowCatalogs(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowCatalogs) {
             listener.exitShowCatalogs(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCatalogs) {
            return visitor.visitShowCatalogs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCurrentNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_CURRENT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowCurrentNamespace) {
             listener.enterShowCurrentNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowCurrentNamespace) {
             listener.exitShowCurrentNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCurrentNamespace) {
            return visitor.visitShowCurrentNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameTablePartitionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_RENAME, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TO, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRenameTablePartition) {
             listener.enterRenameTablePartition(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRenameTablePartition) {
             listener.exitRenameTablePartition(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenameTablePartition) {
            return visitor.visitRenameTablePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RepairTableContext extends StatementContext {
    public _option?: Token | null;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REPAIR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REPAIR, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MSCK, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYNC, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRepairTable) {
             listener.enterRepairTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRepairTable) {
             listener.exitRepairTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRepairTable) {
            return visitor.visitRepairTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshResourceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0)!;
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRefreshResource) {
             listener.enterRefreshResource(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRefreshResource) {
             listener.exitRefreshResource(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshResource) {
            return visitor.visitRefreshResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetVariableAssignmentContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public assignmentList(): AssignmentListContext {
        return this.getRuleContext(0, AssignmentListContext)!;
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VAR, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetVariableAssignment) {
             listener.enterSetVariableAssignment(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetVariableAssignment) {
             listener.exitSetVariableAssignment(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetVariableAssignment) {
            return visitor.visitSetVariableAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowCreateTable) {
             listener.enterShowCreateTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowCreateTable) {
             listener.exitShowCreateTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTable) {
            return visitor.visitShowCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowNamespacesContext extends StatementContext {
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public namespaces(): NamespacesContext {
        return this.getRuleContext(0, NamespacesContext)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowNamespaces) {
             listener.enterShowNamespaces(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowNamespaces) {
             listener.exitShowNamespaces(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowNamespaces) {
            return visitor.visitShowNamespaces(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnsContext extends StatementContext {
    public _table?: TableNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode[];
    public KW_FROM(i: number): antlr.TerminalNode | null;
    public KW_FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_FROM);
    	} else {
    		return this.getToken(SparkSqlParser.KW_FROM, i);
    	}
    }
    public KW_IN(): antlr.TerminalNode[];
    public KW_IN(i: number): antlr.TerminalNode | null;
    public KW_IN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_IN);
    	} else {
    		return this.getToken(SparkSqlParser.KW_IN, i);
    	}
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowColumns) {
             listener.enterShowColumns(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowColumns) {
             listener.exitShowColumns(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowColumns) {
            return visitor.visitShowColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReplaceTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public replaceTableHeader(): ReplaceTableHeaderContext {
        return this.getRuleContext(0, ReplaceTableHeaderContext)!;
    }
    public createTableClauses(): CreateTableClausesContext {
        return this.getRuleContext(0, CreateTableClausesContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext | null {
        return this.getRuleContext(0, CreateOrReplaceTableColTypeListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public tableProvider(): TableProviderContext | null {
        return this.getRuleContext(0, TableProviderContext);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterReplaceTable) {
             listener.enterReplaceTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitReplaceTable) {
             listener.exitReplaceTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceTable) {
            return visitor.visitReplaceTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeTablesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ANALYZE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ANALYZE, 0)!;
    }
    public KW_TABLES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLES, 0)!;
    }
    public KW_COMPUTE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COMPUTE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_STATISTICS, 0)!;
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOSCAN, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAnalyzeTables) {
             listener.enterAnalyzeTables(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAnalyzeTables) {
             listener.exitAnalyzeTables(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzeTables) {
            return visitor.visitAnalyzeTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddTablePartitionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_ADD(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ADD, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public partitionSpecLocation(): PartitionSpecLocationContext[];
    public partitionSpecLocation(i: number): PartitionSpecLocationContext | null;
    public partitionSpecLocation(i?: number): PartitionSpecLocationContext[] | PartitionSpecLocationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecLocationContext);
        }

        return this.getRuleContext(i, PartitionSpecLocationContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAddTablePartition) {
             listener.enterAddTablePartition(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAddTablePartition) {
             listener.exitAddTablePartition(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAddTablePartition) {
            return visitor.visitAddTablePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetNamespaceLocationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public locationSpec(): LocationSpecContext {
        return this.getRuleContext(0, LocationSpecContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetNamespaceLocation) {
             listener.enterSetNamespaceLocation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetNamespaceLocation) {
             listener.exitSetNamespaceLocation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetNamespaceLocation) {
            return visitor.visitSetNamespaceLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRefreshTable) {
             listener.enterRefreshTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRefreshTable) {
             listener.exitRefreshTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshTable) {
            return visitor.visitRefreshTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetAnyContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetAny) {
             listener.enterSetAny(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetAny) {
             listener.exitSetAny(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetAny) {
            return visitor.visitSetAny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetConfigContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_RESET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_RESET, 0)!;
    }
    public configKey(): ConfigKeyContext {
        return this.getRuleContext(0, ConfigKeyContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterResetConfig) {
             listener.enterResetConfig(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitResetConfig) {
             listener.exitResetConfig(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResetConfig) {
            return visitor.visitResetConfig(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetConfigAnyKeyContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.EQ, 0)!;
    }
    public configValue(): ConfigValueContext {
        return this.getRuleContext(0, ConfigValueContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetConfigAnyKey) {
             listener.enterSetConfigAnyKey(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetConfigAnyKey) {
             listener.exitSetConfigAnyKey(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetConfigAnyKey) {
            return visitor.visitSetConfigAnyKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetNamespacePropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public propertyList(): PropertyListContext {
        return this.getRuleContext(0, PropertyListContext)!;
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PROPERTIES, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetNamespaceProperties) {
             listener.enterSetNamespaceProperties(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetNamespaceProperties) {
             listener.exitSetNamespaceProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetNamespaceProperties) {
            return visitor.visitSetNamespaceProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ManageResourceContext extends StatementContext {
    public _op?: Token | null;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ADD, 0);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIST, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterManageResource) {
             listener.enterManageResource(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitManageResource) {
             listener.exitManageResource(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitManageResource) {
            return visitor.visitManageResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainStatementContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_EXPLAIN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_EXPLAIN, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOGICAL, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMATTED, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public KW_CODEGEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CODEGEN, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COST, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExplainStatement) {
             listener.enterExplainStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExplainStatement) {
             listener.exitExplainStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainStatement) {
            return visitor.visitExplainStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ANALYZE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ANALYZE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_COMPUTE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COMPUTE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_STATISTICS, 0)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_NOSCAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOSCAN, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOR, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0);
    }
    public columnNameSeq(): ColumnNameSeqContext | null {
        return this.getRuleContext(0, ColumnNameSeqContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAnalyze) {
             listener.enterAnalyze(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAnalyze) {
             listener.exitAnalyze(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyze) {
            return visitor.visitAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateFunctionContext extends StatementContext {
    public _className?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0)!;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        return this.getRuleContext(0, FunctionNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USING, 0);
    }
    public resource(): ResourceContext[];
    public resource(i: number): ResourceContext | null;
    public resource(i?: number): ResourceContext[] | ResourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ResourceContext);
        }

        return this.getRuleContext(i, ResourceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateFunction) {
             listener.enterCreateFunction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateFunction) {
             listener.exitCreateFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFunction) {
            return visitor.visitCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnCacheTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_UNCACHE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_UNCACHE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnCacheTable) {
             listener.enterUnCacheTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnCacheTable) {
             listener.exitUnCacheTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnCacheTable) {
            return visitor.visitUnCacheTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableAddColumnsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_ADD(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ADD, 0)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public qualifiedColTypeWithPositionSeqForAdd(): QualifiedColTypeWithPositionSeqForAddContext {
        return this.getRuleContext(0, QualifiedColTypeWithPositionSeqForAddContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterTableAddColumns) {
             listener.enterAlterTableAddColumns(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterTableAddColumns) {
             listener.exitAlterTableAddColumns(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableAddColumns) {
            return visitor.visitAlterTableAddColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class HiveReplaceColumnsContext extends StatementContext {
    public _table?: TableNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public qualifiedColTypeWithPositionSeqForReplace(): QualifiedColTypeWithPositionSeqForReplaceContext {
        return this.getRuleContext(0, QualifiedColTypeWithPositionSeqForReplaceContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHiveReplaceColumns) {
             listener.enterHiveReplaceColumns(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHiveReplaceColumns) {
             listener.exitHiveReplaceColumns(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHiveReplaceColumns) {
            return visitor.visitHiveReplaceColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableAddColumnContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_ADD(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ADD, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0)!;
    }
    public qualifiedColTypeWithPositionForAdd(): QualifiedColTypeWithPositionForAddContext {
        return this.getRuleContext(0, QualifiedColTypeWithPositionForAddContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterTableAddColumn) {
             listener.enterAlterTableAddColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterTableAddColumn) {
             listener.exitAlterTableAddColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableAddColumn) {
            return visitor.visitAlterTableAddColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ON, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IS, 0)!;
    }
    public commentStr(): CommentStrContext {
        return this.getRuleContext(0, CommentStrContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCommentNamespace) {
             listener.enterCommentNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCommentNamespace) {
             listener.exitCommentNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommentNamespace) {
            return visitor.visitCommentNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public createTableHeader(): CreateTableHeaderContext {
        return this.getRuleContext(0, CreateTableHeaderContext)!;
    }
    public createTableClauses(): CreateTableClausesContext {
        return this.getRuleContext(0, CreateTableClausesContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public createOrReplaceTableColTypeList(): CreateOrReplaceTableColTypeListContext | null {
        return this.getRuleContext(0, CreateOrReplaceTableColTypeListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public tableProvider(): TableProviderContext | null {
        return this.getRuleContext(0, TableProviderContext);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateTable) {
             listener.enterCreateTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateTable) {
             listener.exitCreateTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DmlStatementContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public dmlStatementNoWith(): DmlStatementNoWithContext {
        return this.getRuleContext(0, DmlStatementNoWithContext)!;
    }
    public ctes(): CtesContext | null {
        return this.getRuleContext(0, CtesContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDmlStatement) {
             listener.enterDmlStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDmlStatement) {
             listener.exitDmlStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDmlStatement) {
            return visitor.visitDmlStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterMaterializedViewRewriteContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public KW_REWRITE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REWRITE, 0)!;
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ENABLE, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISABLE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterMaterializedViewRewrite) {
             listener.enterAlterMaterializedViewRewrite(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterMaterializedViewRewrite) {
             listener.exitAlterMaterializedViewRewrite(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterMaterializedViewRewrite) {
            return visitor.visitAlterMaterializedViewRewrite(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableLikeContext extends StatementContext {
    public _target?: TableNameCreateContext;
    public _source?: TableNameContext;
    public _tableProps?: PropertyListContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LIKE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public tableProvider(): TableProviderContext[];
    public tableProvider(i: number): TableProviderContext | null;
    public tableProvider(i?: number): TableProviderContext[] | TableProviderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableProviderContext);
        }

        return this.getRuleContext(i, TableProviderContext);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext[];
    public createFileFormat(i: number): CreateFileFormatContext | null;
    public createFileFormat(i?: number): CreateFileFormatContext[] | CreateFileFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateFileFormatContext);
        }

        return this.getRuleContext(i, CreateFileFormatContext);
    }
    public locationSpec(): LocationSpecContext[];
    public locationSpec(i: number): LocationSpecContext | null;
    public locationSpec(i?: number): LocationSpecContext[] | LocationSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LocationSpecContext);
        }

        return this.getRuleContext(i, LocationSpecContext);
    }
    public tableLifecycle(): TableLifecycleContext[];
    public tableLifecycle(i: number): TableLifecycleContext | null;
    public tableLifecycle(i?: number): TableLifecycleContext[] | TableLifecycleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableLifecycleContext);
        }

        return this.getRuleContext(i, TableLifecycleContext);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateTableLike) {
             listener.enterCreateTableLike(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateTableLike) {
             listener.exitCreateTableLike(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableLike) {
            return visitor.visitCreateTableLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropFunction) {
             listener.enterDropFunction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropFunction) {
             listener.exitDropFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetVariableMultiAssignmentContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public multipartIdentifierList(): MultipartIdentifierListContext {
        return this.getRuleContext(0, MultipartIdentifierListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.EQ, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VAR, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetVariableMultiAssignment) {
             listener.enterSetVariableMultiAssignment(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetVariableMultiAssignment) {
             listener.exitSetVariableMultiAssignment(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetVariableMultiAssignment) {
            return visitor.visitSetVariableMultiAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeRelationContext extends StatementContext {
    public _option?: Token | null;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public describeColName(): DescribeColNameContext | null {
        return this.getRuleContext(0, DescribeColNameContext);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMATTED, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeRelation) {
             listener.enterDescribeRelation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeRelation) {
             listener.exitDescribeRelation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeRelation) {
            return visitor.visitDescribeRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LoadDataContext extends StatementContext {
    public _path?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LOAD, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DATA, 0)!;
    }
    public KW_INPATH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INPATH, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INTO, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERWRITE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterLoadData) {
             listener.enterLoadData(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitLoadData) {
             listener.exitLoadData(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoadData) {
            return visitor.visitLoadData(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowPartitionsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_PARTITIONS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowPartitions) {
             listener.enterShowPartitions(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowPartitions) {
             listener.exitShowPartitions(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowPartitions) {
            return visitor.visitShowPartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0)!;
    }
    public describeFuncName(): DescribeFuncNameContext {
        return this.getRuleContext(0, DescribeFuncNameContext)!;
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeFunction) {
             listener.enterDescribeFunction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeFunction) {
             listener.exitDescribeFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeFunction) {
            return visitor.visitDescribeFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameTableColumnContext extends StatementContext {
    public _table?: TableNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_RENAME, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TO, 0)!;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRenameTableColumn) {
             listener.enterRenameTableColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRenameTableColumn) {
             listener.exitRenameTableColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenameTableColumn) {
            return visitor.visitRenameTableColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetConfigContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public configKey(): ConfigKeyContext {
        return this.getRuleContext(0, ConfigKeyContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.EQ, 0)!;
    }
    public configValue(): ConfigValueContext {
        return this.getRuleContext(0, ConfigValueContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetConfig) {
             listener.enterSetConfig(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetConfig) {
             listener.exitSetConfig(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetConfig) {
            return visitor.visitSetConfig(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnsupportHiveCommandsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public unsupportedHiveNativeCommands(): UnsupportedHiveNativeCommandsContext {
        return this.getRuleContext(0, UnsupportedHiveNativeCommandsContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnsupportHiveCommands) {
             listener.enterUnsupportHiveCommands(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnsupportHiveCommands) {
             listener.exitUnsupportHiveCommands(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnsupportHiveCommands) {
            return visitor.visitUnsupportHiveCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatementDefaultContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStatementDefault) {
             listener.enterStatementDefault(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStatementDefault) {
             listener.exitStatementDefault(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStatementDefault) {
            return visitor.visitStatementDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class HiveChangeColumnContext extends StatementContext {
    public _table?: TableNameContext;
    public _colName?: ColumnNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public KW_CHANGE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CHANGE, 0)!;
    }
    public columnType(): ColumnTypeContext {
        return this.getRuleContext(0, ColumnTypeContext)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0);
    }
    public colPosition(): ColPositionContext | null {
        return this.getRuleContext(0, ColPositionContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHiveChangeColumn) {
             listener.enterHiveChangeColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHiveChangeColumn) {
             listener.exitHiveChangeColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHiveChangeColumn) {
            return visitor.visitHiveChangeColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OptimizeTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_OPTIMIZE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_OPTIMIZE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public zorderClause(): ZorderClauseContext {
        return this.getRuleContext(0, ZorderClauseContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterOptimizeTable) {
             listener.enterOptimizeTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitOptimizeTable) {
             listener.exitOptimizeTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptimizeTable) {
            return visitor.visitOptimizeTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTimeZoneContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_TIME(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TIME, 0)!;
    }
    public KW_ZONE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ZONE, 0)!;
    }
    public timezone(): TimezoneContext {
        return this.getRuleContext(0, TimezoneContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTimeZone) {
             listener.enterSetTimeZone(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTimeZone) {
             listener.exitSetTimeZone(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTimeZone) {
            return visitor.visitSetTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeQueryContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUERY, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeQuery) {
             listener.enterDescribeQuery(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeQuery) {
             listener.exitDescribeQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeQuery) {
            return visitor.visitDescribeQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TruncateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TRUNCATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TRUNCATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTruncateTable) {
             listener.enterTruncateTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTruncateTable) {
             listener.exitTruncateTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateTable) {
            return visitor.visitTruncateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetConfigAndValueContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public configKey(): ConfigKeyContext {
        return this.getRuleContext(0, ConfigKeyContext)!;
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetConfigAndValue) {
             listener.enterSetConfigAndValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetConfigAndValue) {
             listener.exitSetConfigAndValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetConfigAndValue) {
            return visitor.visitSetConfigAndValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateMaterializedViewContext extends StatementContext {
    public _options?: PropertyListContext;
    public _partitioning?: PartitionFieldListContext;
    public _tableProps?: PropertyListContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public tableProvider(): TableProviderContext | null {
        return this.getRuleContext(0, TableProviderContext);
    }
    public skewSpec(): SkewSpecContext[];
    public skewSpec(i: number): SkewSpecContext | null;
    public skewSpec(i?: number): SkewSpecContext[] | SkewSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewSpecContext);
        }

        return this.getRuleContext(i, SkewSpecContext);
    }
    public bucketSpec(): BucketSpecContext[];
    public bucketSpec(i: number): BucketSpecContext | null;
    public bucketSpec(i?: number): BucketSpecContext[] | BucketSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BucketSpecContext);
        }

        return this.getRuleContext(i, BucketSpecContext);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext[];
    public createFileFormat(i: number): CreateFileFormatContext | null;
    public createFileFormat(i?: number): CreateFileFormatContext[] | CreateFileFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateFileFormatContext);
        }

        return this.getRuleContext(i, CreateFileFormatContext);
    }
    public locationSpec(): LocationSpecContext[];
    public locationSpec(i: number): LocationSpecContext | null;
    public locationSpec(i?: number): LocationSpecContext[] | LocationSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LocationSpecContext);
        }

        return this.getRuleContext(i, LocationSpecContext);
    }
    public commentSpec(): CommentSpecContext[];
    public commentSpec(i: number): CommentSpecContext | null;
    public commentSpec(i?: number): CommentSpecContext[] | CommentSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommentSpecContext);
        }

        return this.getRuleContext(i, CommentSpecContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode[];
    public KW_OPTIONS(i: number): antlr.TerminalNode | null;
    public KW_OPTIONS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_OPTIONS);
    	} else {
    		return this.getToken(SparkSqlParser.KW_OPTIONS, i);
    	}
    }
    public KW_PARTITIONED(): antlr.TerminalNode[];
    public KW_PARTITIONED(i: number): antlr.TerminalNode | null;
    public KW_PARTITIONED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_PARTITIONED);
    	} else {
    		return this.getToken(SparkSqlParser.KW_PARTITIONED, i);
    	}
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public partitionFieldList(): PartitionFieldListContext[];
    public partitionFieldList(i: number): PartitionFieldListContext | null;
    public partitionFieldList(i?: number): PartitionFieldListContext[] | PartitionFieldListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionFieldListContext);
        }

        return this.getRuleContext(i, PartitionFieldListContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateMaterializedView) {
             listener.enterCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateMaterializedView) {
             listener.exitCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedView) {
            return visitor.visitCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTableSerDeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SERDE, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTableSerDe) {
             listener.enterSetTableSerDe(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTableSerDe) {
             listener.exitSetTableSerDe(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTableSerDe) {
            return visitor.visitSetTableSerDe(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public identifierCommentList(): IdentifierCommentListContext | null {
        return this.getRuleContext(0, IdentifierCommentListContext);
    }
    public commentSpec(): CommentSpecContext[];
    public commentSpec(i: number): CommentSpecContext | null;
    public commentSpec(i?: number): CommentSpecContext[] | CommentSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommentSpecContext);
        }

        return this.getRuleContext(i, CommentSpecContext);
    }
    public KW_PARTITIONED(): antlr.TerminalNode[];
    public KW_PARTITIONED(i: number): antlr.TerminalNode | null;
    public KW_PARTITIONED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_PARTITIONED);
    	} else {
    		return this.getToken(SparkSqlParser.KW_PARTITIONED, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_ON);
    	} else {
    		return this.getToken(SparkSqlParser.KW_ON, i);
    	}
    }
    public identifierList(): IdentifierListContext[];
    public identifierList(i: number): IdentifierListContext | null;
    public identifierList(i?: number): IdentifierListContext[] | IdentifierListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierListContext);
        }

        return this.getRuleContext(i, IdentifierListContext);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GLOBAL, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTimeZoneAnyContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_TIME(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TIME, 0)!;
    }
    public KW_ZONE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ZONE, 0)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTimeZoneAny) {
             listener.enterSetTimeZoneAny(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTimeZoneAny) {
             listener.exitSetTimeZoneAny(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTimeZoneAny) {
            return visitor.visitSetTimeZoneAny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTablePartitionsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public partitionSpec(): PartitionSpecContext[];
    public partitionSpec(i: number): PartitionSpecContext | null;
    public partitionSpec(i?: number): PartitionSpecContext[] | PartitionSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionSpecContext);
        }

        return this.getRuleContext(i, PartitionSpecContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PURGE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropTablePartitions) {
             listener.enterDropTablePartitions(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropTablePartitions) {
             listener.exitDropTablePartitions(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropTablePartitions) {
            return visitor.visitDropTablePartitions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PURGE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropTable) {
             listener.enterDropTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropTable) {
             listener.exitDropTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTableExtendedContext extends StatementContext {
    public _ns?: NamespaceNameContext;
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public KW_EXTENDED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0)!;
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LIKE, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowTableExtended) {
             listener.enterShowTableExtended(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowTableExtended) {
             listener.exitShowTableExtended(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowTableExtended) {
            return visitor.visitShowTableExtended(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeNamespace) {
             listener.enterDescribeNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeNamespace) {
             listener.exitDescribeNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeNamespace) {
            return visitor.visitDescribeNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableAlterColumnContext extends StatementContext {
    public _table?: TableNameContext;
    public _column?: ColumnNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode[];
    public KW_ALTER(i: number): antlr.TerminalNode | null;
    public KW_ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_ALTER);
    	} else {
    		return this.getToken(SparkSqlParser.KW_ALTER, i);
    	}
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHANGE, 0);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0);
    }
    public alterColumnAction(): AlterColumnActionContext | null {
        return this.getRuleContext(0, AlterColumnActionContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterTableAlterColumn) {
             listener.enterAlterTableAlterColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterTableAlterColumn) {
             listener.exitAlterTableAlterColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableAlterColumn) {
            return visitor.visitAlterTableAlterColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRefreshFunction) {
             listener.enterRefreshFunction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRefreshFunction) {
             listener.exitRefreshFunction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshFunction) {
            return visitor.visitRefreshFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ON, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IS, 0)!;
    }
    public commentStr(): CommentStrContext {
        return this.getRuleContext(0, CommentStrContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCommentTable) {
             listener.enterCommentTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCommentTable) {
             listener.exitCommentTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommentTable) {
            return visitor.visitCommentTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowMaterializedViewsContext extends StatementContext {
    public _db_name?: NamespaceNameContext;
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEWS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEWS, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowMaterializedViews) {
             listener.enterShowMaterializedViews(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowMaterializedViews) {
             listener.exitShowMaterializedViews(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowMaterializedViews) {
            return visitor.visitShowMaterializedViews(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateIndexContext extends StatementContext {
    public _indexType?: IdentifierContext;
    public _options?: PropertyListContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INDEX, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public multipartIdentifierPropertyList(): MultipartIdentifierPropertyListContext {
        return this.getRuleContext(0, MultipartIdentifierPropertyListContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USING, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateIndex) {
             listener.enterCreateIndex(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateIndex) {
             listener.exitCreateIndex(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndex) {
            return visitor.visitCreateIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UseNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_USE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_USE, 0)!;
    }
    public namespaceName(): NamespaceNameContext {
        return this.getRuleContext(0, NamespaceNameContext)!;
    }
    public namespace(): NamespaceContext | null {
        return this.getRuleContext(0, NamespaceContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUseNamespace) {
             listener.enterUseNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUseNamespace) {
             listener.exitUseNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUseNamespace) {
            return visitor.visitUseNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropVariableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0)!;
    }
    public KW_VARIABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0)!;
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropVariable) {
             listener.enterDropVariable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropVariable) {
             listener.exitDropVariable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropVariable) {
            return visitor.visitDropVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateNamespaceContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public namespace(): NamespaceContext {
        return this.getRuleContext(0, NamespaceContext)!;
    }
    public namespaceNameCreate(): NamespaceNameCreateContext {
        return this.getRuleContext(0, NamespaceNameCreateContext)!;
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public commentSpec(): CommentSpecContext[];
    public commentSpec(i: number): CommentSpecContext | null;
    public commentSpec(i?: number): CommentSpecContext[] | CommentSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommentSpecContext);
        }

        return this.getRuleContext(i, CommentSpecContext);
    }
    public locationSpec(): LocationSpecContext[];
    public locationSpec(i: number): LocationSpecContext | null;
    public locationSpec(i?: number): LocationSpecContext[] | LocationSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LocationSpecContext);
        }

        return this.getRuleContext(i, LocationSpecContext);
    }
    public KW_WITH(): antlr.TerminalNode[];
    public KW_WITH(i: number): antlr.TerminalNode | null;
    public KW_WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_WITH);
    	} else {
    		return this.getToken(SparkSqlParser.KW_WITH, i);
    	}
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode[];
    public KW_DBPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_DBPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_DBPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_DBPROPERTIES, i);
    	}
    }
    public KW_PROPERTIES(): antlr.TerminalNode[];
    public KW_PROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_PROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_PROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_PROPERTIES, i);
    	}
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateNamespace) {
             listener.enterCreateNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateNamespace) {
             listener.exitCreateNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateNamespace) {
            return visitor.visitCreateNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTableSerDePropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0)!;
    }
    public propertyList(): PropertyListContext {
        return this.getRuleContext(0, PropertyListContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTableSerDeProperties) {
             listener.enterSetTableSerDeProperties(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTableSerDeProperties) {
             listener.exitSetTableSerDeProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTableSerDeProperties) {
            return visitor.visitSetTableSerDeProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRefreshMaterializedView) {
             listener.enterRefreshMaterializedView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRefreshMaterializedView) {
             listener.exitRefreshMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshMaterializedView) {
            return visitor.visitRefreshMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTblPropertiesContext extends StatementContext {
    public _table?: TableNameContext;
    public _key?: PropertyKeyContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public propertyKey(): PropertyKeyContext | null {
        return this.getRuleContext(0, PropertyKeyContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowTblProperties) {
             listener.enterShowTblProperties(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowTblProperties) {
             listener.exitShowTblProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowTblProperties) {
            return visitor.visitShowTblProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowCreateMaterializedView) {
             listener.enterShowCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowCreateMaterializedView) {
             listener.exitShowCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateMaterializedView) {
            return visitor.visitShowCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnsetTablePropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_UNSET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_UNSET, 0)!;
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0)!;
    }
    public propertyList(): PropertyListContext {
        return this.getRuleContext(0, PropertyListContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnsetTableProperties) {
             listener.enterUnsetTableProperties(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnsetTableProperties) {
             listener.exitUnsetTableProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnsetTableProperties) {
            return visitor.visitUnsetTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTableLocationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public locationSpec(): LocationSpecContext {
        return this.getRuleContext(0, LocationSpecContext)!;
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTableLocation) {
             listener.enterSetTableLocation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTableLocation) {
             listener.exitSetTableLocation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTableLocation) {
            return visitor.visitSetTableLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableColumnsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DROP, 0)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public columnNameSeq(): ColumnNameSeqContext {
        return this.getRuleContext(0, ColumnNameSeqContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public ifExists(): IfExistsContext | null {
        return this.getRuleContext(0, IfExistsContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDropTableColumns) {
             listener.enterDropTableColumns(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDropTableColumns) {
             listener.exitDropTableColumns(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropTableColumns) {
            return visitor.visitDropTableColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowViewsContext extends StatementContext {
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_VIEWS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEWS, 0)!;
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowViews) {
             listener.enterShowViews(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowViews) {
             listener.exitShowViews(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowViews) {
            return visitor.visitShowViews(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowFunctionsContext extends StatementContext {
    public _ns?: NamespaceNameContext;
    public _legacy?: MultipartIdentifierContext;
    public _pattern?: StringLitContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SHOW, 0)!;
    }
    public KW_FUNCTIONS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FUNCTIONS, 0)!;
    }
    public functionKind(): FunctionKindContext | null {
        return this.getRuleContext(0, FunctionKindContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public namespaceName(): NamespaceNameContext | null {
        return this.getRuleContext(0, NamespaceNameContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterShowFunctions) {
             listener.enterShowFunctions(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitShowFunctions) {
             listener.exitShowFunctions(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitShowFunctions) {
            return visitor.visitShowFunctions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CacheTableContext extends StatementContext {
    public _options?: PropertyListContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CACHE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CACHE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public KW_LAZY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAZY, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCacheTable) {
             listener.enterCacheTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCacheTable) {
             listener.exitCacheTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCacheTable) {
            return visitor.visitCacheTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTablePropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALTER, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0)!;
    }
    public propertyList(): PropertyListContext {
        return this.getRuleContext(0, PropertyListContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetTableProperties) {
             listener.enterSetTableProperties(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetTableProperties) {
             listener.exitSetTableProperties(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetTableProperties) {
            return visitor.visitSetTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimezoneContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_timezone;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTimezone) {
             listener.enterTimezone(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTimezone) {
             listener.exitTimezone(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTimezone) {
            return visitor.visitTimezone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConfigKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public quotedIdentifier(): QuotedIdentifierContext {
        return this.getRuleContext(0, QuotedIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_configKey;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterConfigKey) {
             listener.enterConfigKey(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitConfigKey) {
             listener.exitConfigKey(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConfigKey) {
            return visitor.visitConfigKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConfigValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public backQuotedIdentifier(): BackQuotedIdentifierContext {
        return this.getRuleContext(0, BackQuotedIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_configValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterConfigValue) {
             listener.enterConfigValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitConfigValue) {
             listener.exitConfigValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConfigValue) {
            return visitor.visitConfigValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnsupportedHiveNativeCommandsContext extends antlr.ParserRuleContext {
    public _kw1?: Token | null;
    public _kw2?: Token | null;
    public _kw3?: Token | null;
    public _kw4?: Token | null;
    public _kw5?: Token | null;
    public _kw6?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CREATE, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GRANT, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REVOKE, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHOW, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRINCIPALS, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLES, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPORT, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IMPORT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEXES, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCKS, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEX, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALTER, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCK, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNLOCK, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MACRO, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTERED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORTED, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SKEWED, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STORED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORIES, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCHANGE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARCHIVE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TOUCH, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACT, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CONCATENATE, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILEFORMAT, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_START, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTION, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMIT, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLBACK, 0);
    }
    public KW_DFS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DFS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unsupportedHiveNativeCommands;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnsupportedHiveNativeCommands) {
             listener.enterUnsupportedHiveNativeCommands(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnsupportedHiveNativeCommands) {
             listener.exitUnsupportedHiveNativeCommands(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnsupportedHiveNativeCommands) {
            return visitor.visitUnsupportedHiveNativeCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableHeaderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTERNAL, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createTableHeader;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateTableHeader) {
             listener.enterCreateTableHeader(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateTableHeader) {
             listener.exitCreateTableHeader(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableHeader) {
            return visitor.visitCreateTableHeader(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceTableHeaderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CREATE, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_replaceTableHeader;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterReplaceTableHeader) {
             listener.enterReplaceTableHeader(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitReplaceTableHeader) {
             listener.exitReplaceTableHeader(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceTableHeader) {
            return visitor.visitReplaceTableHeader(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BucketSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTERED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_CLUSTERED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INTO, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0)!;
    }
    public KW_BUCKETS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BUCKETS, 0)!;
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORTED, 0);
    }
    public orderedIdentifierList(): OrderedIdentifierListContext | null {
        return this.getRuleContext(0, OrderedIdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_bucketSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterBucketSpec) {
             listener.enterBucketSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitBucketSpec) {
             listener.exitBucketSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBucketSpec) {
            return visitor.visitBucketSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkewSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SKEWED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SKEWED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BY, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ON, 0)!;
    }
    public constantList(): ConstantListContext | null {
        return this.getRuleContext(0, ConstantListContext);
    }
    public nestedConstantList(): NestedConstantListContext | null {
        return this.getRuleContext(0, NestedConstantListContext);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STORED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORIES, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_skewSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSkewSpec) {
             listener.enterSkewSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSkewSpec) {
             listener.exitSkewSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSkewSpec) {
            return visitor.visitSkewSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LocationSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_locationSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterLocationSpec) {
             listener.enterLocationSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitLocationSpec) {
             listener.exitLocationSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLocationSpec) {
            return visitor.visitLocationSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommentSpecContext extends antlr.ParserRuleContext {
    public _comment?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_commentSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCommentSpec) {
             listener.enterCommentSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCommentSpec) {
             listener.exitCommentSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommentSpec) {
            return visitor.visitCommentSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_query;
    }
    public override copyFrom(ctx: QueryContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryStatementContext extends QueryContext {
    public constructor(ctx: QueryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryTerm(): QueryTermContext {
        return this.getRuleContext(0, QueryTermContext)!;
    }
    public queryOrganization(): QueryOrganizationContext {
        return this.getRuleContext(0, QueryOrganizationContext)!;
    }
    public ctes(): CtesContext | null {
        return this.getRuleContext(0, CtesContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQueryStatement) {
             listener.enterQueryStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQueryStatement) {
             listener.exitQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryStatement) {
            return visitor.visitQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertIntoContext extends antlr.ParserRuleContext {
    public _path?: StringLitContext;
    public _options?: PropertyListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INSERT, 0)!;
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERWRITE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public partitionSpec(): PartitionSpecContext | null {
        return this.getRuleContext(0, PartitionSpecContext);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAME, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public columnNameSeq(): ColumnNameSeqContext | null {
        return this.getRuleContext(0, ColumnNameSeqContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public ifNotExists(): IfNotExistsContext | null {
        return this.getRuleContext(0, IfNotExistsContext);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTO, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORY, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public rowFormat(): RowFormatContext | null {
        return this.getRuleContext(0, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext | null {
        return this.getRuleContext(0, CreateFileFormatContext);
    }
    public tableProvider(): TableProviderContext | null {
        return this.getRuleContext(0, TableProviderContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_insertInto;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterInsertInto) {
             listener.enterInsertInto(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitInsertInto) {
             listener.exitInsertInto(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertInto) {
            return visitor.visitInsertInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecLocationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionSpec(): PartitionSpecContext {
        return this.getRuleContext(0, PartitionSpecContext)!;
    }
    public locationSpec(): LocationSpecContext | null {
        return this.getRuleContext(0, LocationSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionSpecLocation;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionSpecLocation) {
             listener.enterPartitionSpecLocation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionSpecLocation) {
             listener.exitPartitionSpecLocation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpecLocation) {
            return visitor.visitPartitionSpecLocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionSpecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public partitionVal(): PartitionValContext[];
    public partitionVal(i: number): PartitionValContext | null;
    public partitionVal(i?: number): PartitionValContext[] | PartitionValContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionValContext);
        }

        return this.getRuleContext(i, PartitionValContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionSpec) {
             listener.enterPartitionSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionSpec) {
             listener.exitPartitionSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionSpec) {
            return visitor.visitPartitionSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionValContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionVal;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionVal) {
             listener.enterPartitionVal(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionVal) {
             listener.exitPartitionVal(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionVal) {
            return visitor.visitPartitionVal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACE, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namespace;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamespace) {
             listener.enterNamespace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamespace) {
             listener.exitNamespace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamespace) {
            return visitor.visitNamespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamespacesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACES, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASES, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMAS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namespaces;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamespaces) {
             listener.enterNamespaces(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamespaces) {
             listener.exitNamespaces(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamespaces) {
            return visitor.visitNamespaces(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeFuncNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext | null {
        return this.getRuleContext(0, IdentifierReferenceContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public comparisonOperator(): ComparisonOperatorContext | null {
        return this.getRuleContext(0, ComparisonOperatorContext);
    }
    public arithmeticOperator(): ArithmeticOperatorContext | null {
        return this.getRuleContext(0, ArithmeticOperatorContext);
    }
    public predicateOperator(): PredicateOperatorContext | null {
        return this.getRuleContext(0, PredicateOperatorContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_describeFuncName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeFuncName) {
             listener.enterDescribeFuncName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeFuncName) {
             listener.exitDescribeFuncName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeFuncName) {
            return visitor.visitDescribeFuncName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeColNameContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _nameParts: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_describeColName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDescribeColName) {
             listener.enterDescribeColName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDescribeColName) {
             listener.exitDescribeColName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeColName) {
            return visitor.visitDescribeColName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CtesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WITH, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_ctes;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCtes) {
             listener.enterCtes(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCtes) {
             listener.exitCtes(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCtes) {
            return visitor.visitCtes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public _columnAliases?: IdentifierListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedQuery;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedQuery) {
             listener.enterNamedQuery(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedQuery) {
             listener.exitNamedQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableProviderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_USING, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableProvider;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableProvider) {
             listener.enterTableProvider(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableProvider) {
             listener.exitTableProvider(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableProvider) {
            return visitor.visitTableProvider(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableClausesContext extends antlr.ParserRuleContext {
    public _options?: ExpressionPropertyListContext;
    public _partitioning?: PartitionFieldListContext;
    public _tableProps?: PropertyListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public skewSpec(): SkewSpecContext[];
    public skewSpec(i: number): SkewSpecContext | null;
    public skewSpec(i?: number): SkewSpecContext[] | SkewSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SkewSpecContext);
        }

        return this.getRuleContext(i, SkewSpecContext);
    }
    public bucketSpec(): BucketSpecContext[];
    public bucketSpec(i: number): BucketSpecContext | null;
    public bucketSpec(i?: number): BucketSpecContext[] | BucketSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BucketSpecContext);
        }

        return this.getRuleContext(i, BucketSpecContext);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public createFileFormat(): CreateFileFormatContext[];
    public createFileFormat(i: number): CreateFileFormatContext | null;
    public createFileFormat(i?: number): CreateFileFormatContext[] | CreateFileFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateFileFormatContext);
        }

        return this.getRuleContext(i, CreateFileFormatContext);
    }
    public locationSpec(): LocationSpecContext[];
    public locationSpec(i: number): LocationSpecContext | null;
    public locationSpec(i?: number): LocationSpecContext[] | LocationSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LocationSpecContext);
        }

        return this.getRuleContext(i, LocationSpecContext);
    }
    public commentSpec(): CommentSpecContext[];
    public commentSpec(i: number): CommentSpecContext | null;
    public commentSpec(i?: number): CommentSpecContext[] | CommentSpecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommentSpecContext);
        }

        return this.getRuleContext(i, CommentSpecContext);
    }
    public tableLifecycle(): TableLifecycleContext[];
    public tableLifecycle(i: number): TableLifecycleContext | null;
    public tableLifecycle(i?: number): TableLifecycleContext[] | TableLifecycleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableLifecycleContext);
        }

        return this.getRuleContext(i, TableLifecycleContext);
    }
    public KW_OPTIONS(): antlr.TerminalNode[];
    public KW_OPTIONS(i: number): antlr.TerminalNode | null;
    public KW_OPTIONS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_OPTIONS);
    	} else {
    		return this.getToken(SparkSqlParser.KW_OPTIONS, i);
    	}
    }
    public KW_PARTITIONED(): antlr.TerminalNode[];
    public KW_PARTITIONED(i: number): antlr.TerminalNode | null;
    public KW_PARTITIONED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_PARTITIONED);
    	} else {
    		return this.getToken(SparkSqlParser.KW_PARTITIONED, i);
    	}
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode[];
    public KW_TBLPROPERTIES(i: number): antlr.TerminalNode | null;
    public KW_TBLPROPERTIES(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TBLPROPERTIES);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, i);
    	}
    }
    public expressionPropertyList(): ExpressionPropertyListContext[];
    public expressionPropertyList(i: number): ExpressionPropertyListContext | null;
    public expressionPropertyList(i?: number): ExpressionPropertyListContext[] | ExpressionPropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionPropertyListContext);
        }

        return this.getRuleContext(i, ExpressionPropertyListContext);
    }
    public partitionFieldList(): PartitionFieldListContext[];
    public partitionFieldList(i: number): PartitionFieldListContext | null;
    public partitionFieldList(i?: number): PartitionFieldListContext[] | PartitionFieldListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionFieldListContext);
        }

        return this.getRuleContext(i, PartitionFieldListContext);
    }
    public propertyList(): PropertyListContext[];
    public propertyList(i: number): PropertyListContext | null;
    public propertyList(i?: number): PropertyListContext[] | PropertyListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyListContext);
        }

        return this.getRuleContext(i, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createTableClauses;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateTableClauses) {
             listener.enterCreateTableClauses(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateTableClauses) {
             listener.exitCreateTableClauses(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableClauses) {
            return visitor.visitCreateTableClauses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableLifecycleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIFECYCLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LIFECYCLE, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableLifecycle;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableLifecycle) {
             listener.enterTableLifecycle(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableLifecycle) {
             listener.exitTableLifecycle(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableLifecycle) {
            return visitor.visitTableLifecycle(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public property(): PropertyContext[];
    public property(i: number): PropertyContext | null;
    public property(i?: number): PropertyContext[] | PropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyContext);
        }

        return this.getRuleContext(i, PropertyContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_propertyList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPropertyList) {
             listener.enterPropertyList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPropertyList) {
             listener.exitPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyList) {
            return visitor.visitPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyContext extends antlr.ParserRuleContext {
    public _key?: PropertyKeyContext;
    public _value?: PropertyValueContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyKey(): PropertyKeyContext {
        return this.getRuleContext(0, PropertyKeyContext)!;
    }
    public propertyValue(): PropertyValueContext | null {
        return this.getRuleContext(0, PropertyValueContext);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_property;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterProperty) {
             listener.enterProperty(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitProperty) {
             listener.exitProperty(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProperty) {
            return visitor.visitProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyKeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_propertyKey;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPropertyKey) {
             listener.enterPropertyKey(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPropertyKey) {
             listener.exitPropertyKey(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyKey) {
            return visitor.visitPropertyKey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DECIMAL_VALUE, 0);
    }
    public booleanValue(): BooleanValueContext | null {
        return this.getRuleContext(0, BooleanValueContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_propertyValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPropertyValue) {
             listener.enterPropertyValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPropertyValue) {
             listener.exitPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyValue) {
            return visitor.visitPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionPropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public expressionProperty(): ExpressionPropertyContext[];
    public expressionProperty(i: number): ExpressionPropertyContext | null;
    public expressionProperty(i?: number): ExpressionPropertyContext[] | ExpressionPropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionPropertyContext);
        }

        return this.getRuleContext(i, ExpressionPropertyContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_expressionPropertyList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExpressionPropertyList) {
             listener.enterExpressionPropertyList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExpressionPropertyList) {
             listener.exitExpressionPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionPropertyList) {
            return visitor.visitExpressionPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionPropertyContext extends antlr.ParserRuleContext {
    public _key?: PropertyKeyContext;
    public _value?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyKey(): PropertyKeyContext {
        return this.getRuleContext(0, PropertyKeyContext)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_expressionProperty;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExpressionProperty) {
             listener.enterExpressionProperty(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExpressionProperty) {
             listener.exitExpressionProperty(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionProperty) {
            return visitor.visitExpressionProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public constant(): ConstantContext[];
    public constant(i: number): ConstantContext | null;
    public constant(i?: number): ConstantContext[] | ConstantContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantContext);
        }

        return this.getRuleContext(i, ConstantContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_constantList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterConstantList) {
             listener.enterConstantList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitConstantList) {
             listener.exitConstantList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstantList) {
            return visitor.visitConstantList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NestedConstantListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public constantList(): ConstantListContext[];
    public constantList(i: number): ConstantListContext | null;
    public constantList(i?: number): ConstantListContext[] | ConstantListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstantListContext);
        }

        return this.getRuleContext(i, ConstantListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_nestedConstantList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNestedConstantList) {
             listener.enterNestedConstantList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNestedConstantList) {
             listener.exitNestedConstantList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNestedConstantList) {
            return visitor.visitNestedConstantList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFileFormatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_STORED, 0)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public fileFormat(): FileFormatContext | null {
        return this.getRuleContext(0, FileFormatContext);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public storageHandler(): StorageHandlerContext | null {
        return this.getRuleContext(0, StorageHandlerContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createFileFormat;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateFileFormat) {
             listener.enterCreateFileFormat(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateFileFormat) {
             listener.exitCreateFileFormat(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFileFormat) {
            return visitor.visitCreateFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FileFormatContext extends antlr.ParserRuleContext {
    public _inFmt?: StringLitContext;
    public _outFmt?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_fileFormat;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFileFormat) {
             listener.enterFileFormat(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFileFormat) {
             listener.exitFileFormat(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFileFormat) {
            return visitor.visitFileFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StorageHandlerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_storageHandler;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStorageHandler) {
             listener.enterStorageHandler(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStorageHandler) {
             listener.exitStorageHandler(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStorageHandler) {
            return visitor.visitStorageHandler(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ResourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public stringLit(): StringLitContext {
        return this.getRuleContext(0, StringLitContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_resource;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterResource) {
             listener.enterResource(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitResource) {
             listener.exitResource(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitResource) {
            return visitor.visitResource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DmlStatementNoWithContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_dmlStatementNoWith;
    }
    public override copyFrom(ctx: DmlStatementNoWithContext): void {
        super.copyFrom(ctx);
    }
}
export class DeleteFromTableContext extends DmlStatementNoWithContext {
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DELETE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DELETE, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FROM, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDeleteFromTable) {
             listener.enterDeleteFromTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDeleteFromTable) {
             listener.exitDeleteFromTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteFromTable) {
            return visitor.visitDeleteFromTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MultipleInsertContext extends DmlStatementNoWithContext {
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public multiInsertQueryBody(): MultiInsertQueryBodyContext[];
    public multiInsertQueryBody(i: number): MultiInsertQueryBodyContext | null;
    public multiInsertQueryBody(i?: number): MultiInsertQueryBodyContext[] | MultiInsertQueryBodyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultiInsertQueryBodyContext);
        }

        return this.getRuleContext(i, MultiInsertQueryBodyContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipleInsert) {
             listener.enterMultipleInsert(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipleInsert) {
             listener.exitMultipleInsert(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipleInsert) {
            return visitor.visitMultipleInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UpdateTableContext extends DmlStatementNoWithContext {
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public setClause(): SetClauseContext {
        return this.getRuleContext(0, SetClauseContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUpdateTable) {
             listener.enterUpdateTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUpdateTable) {
             listener.exitUpdateTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateTable) {
            return visitor.visitUpdateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InsertFromQueryContext extends DmlStatementNoWithContext {
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public insertInto(): InsertIntoContext {
        return this.getRuleContext(0, InsertIntoContext)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterInsertFromQuery) {
             listener.enterInsertFromQuery(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitInsertFromQuery) {
             listener.exitInsertFromQuery(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertFromQuery) {
            return visitor.visitInsertFromQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeIntoTableContext extends DmlStatementNoWithContext {
    public _target?: TableNameContext;
    public _targetAlias?: TableAliasContext;
    public _source?: IdentifierReferenceContext;
    public _sourceQuery?: QueryContext;
    public _sourceAlias?: TableAliasContext;
    public _mergeCondition?: BooleanExpressionContext;
    public constructor(ctx: DmlStatementNoWithContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_MERGE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MERGE, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INTO, 0)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_USING, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ON, 0)!;
    }
    public tableName(): TableNameContext {
        return this.getRuleContext(0, TableNameContext)!;
    }
    public tableAlias(): TableAliasContext[];
    public tableAlias(i: number): TableAliasContext | null;
    public tableAlias(i?: number): TableAliasContext[] | TableAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableAliasContext);
        }

        return this.getRuleContext(i, TableAliasContext);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public identifierReference(): IdentifierReferenceContext | null {
        return this.getRuleContext(0, IdentifierReferenceContext);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public matchedClause(): MatchedClauseContext[];
    public matchedClause(i: number): MatchedClauseContext | null;
    public matchedClause(i?: number): MatchedClauseContext[] | MatchedClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MatchedClauseContext);
        }

        return this.getRuleContext(i, MatchedClauseContext);
    }
    public notMatchedClause(): NotMatchedClauseContext[];
    public notMatchedClause(i: number): NotMatchedClauseContext | null;
    public notMatchedClause(i?: number): NotMatchedClauseContext[] | NotMatchedClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NotMatchedClauseContext);
        }

        return this.getRuleContext(i, NotMatchedClauseContext);
    }
    public notMatchedBySourceClause(): NotMatchedBySourceClauseContext[];
    public notMatchedBySourceClause(i: number): NotMatchedBySourceClauseContext | null;
    public notMatchedBySourceClause(i?: number): NotMatchedBySourceClauseContext[] | NotMatchedBySourceClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NotMatchedBySourceClauseContext);
        }

        return this.getRuleContext(i, NotMatchedBySourceClauseContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMergeIntoTable) {
             listener.enterMergeIntoTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMergeIntoTable) {
             listener.exitMergeIntoTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMergeIntoTable) {
            return visitor.visitMergeIntoTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamespaceNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext {
        return this.getRuleContext(0, IdentifierReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namespaceName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamespaceName) {
             listener.enterNamespaceName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamespaceName) {
             listener.exitNamespaceName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamespaceName) {
            return visitor.visitNamespaceName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamespaceNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierReference(): IdentifierReferenceContext {
        return this.getRuleContext(0, IdentifierReferenceContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namespaceNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamespaceNameCreate) {
             listener.enterNamespaceNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamespaceNameCreate) {
             listener.exitNamespaceNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamespaceNameCreate) {
            return visitor.visitNamespaceNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableNameCreate) {
             listener.enterTableNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableNameCreate) {
             listener.exitTableNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableNameCreate) {
            return visitor.visitTableNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_viewNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterViewNameCreate) {
             listener.enterViewNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitViewNameCreate) {
             listener.exitViewNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewNameCreate) {
            return visitor.visitViewNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public viewIdentifier(): ViewIdentifierContext {
        return this.getRuleContext(0, ViewIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_viewName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterViewName) {
             listener.enterViewName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitViewName) {
             listener.exitViewName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewName) {
            return visitor.visitViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_columnName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_columnNameSeq;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColumnNameSeq) {
             listener.enterColumnNameSeq(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColumnNameSeq) {
             listener.exitColumnNameSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameSeq) {
            return visitor.visitColumnNameSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_columnNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColumnNameCreate) {
             listener.enterColumnNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColumnNameCreate) {
             listener.exitColumnNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCreate) {
            return visitor.visitColumnNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public multipartIdentifier(): MultipartIdentifierContext | null {
        return this.getRuleContext(0, MultipartIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierReference;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierReference) {
             listener.enterIdentifierReference(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierReference) {
             listener.exitIdentifierReference(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierReference) {
            return visitor.visitIdentifierReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryOrganizationContext extends antlr.ParserRuleContext {
    public _sortItem?: SortItemContext;
    public _order: SortItemContext[] = [];
    public _expression?: ExpressionContext;
    public _clusterBy: ExpressionContext[] = [];
    public _distributeBy: ExpressionContext[] = [];
    public _sort: SortItemContext[] = [];
    public _limit?: ExpressionContext;
    public _offset?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTER, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIMIT, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OFFSET, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_queryOrganization;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQueryOrganization) {
             listener.enterQueryOrganization(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQueryOrganization) {
             listener.exitQueryOrganization(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryOrganization) {
            return visitor.visitQueryOrganization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultiInsertQueryBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insertInto(): InsertIntoContext {
        return this.getRuleContext(0, InsertIntoContext)!;
    }
    public fromStatementBody(): FromStatementBodyContext {
        return this.getRuleContext(0, FromStatementBodyContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multiInsertQueryBody;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultiInsertQueryBody) {
             listener.enterMultiInsertQueryBody(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultiInsertQueryBody) {
             listener.exitMultiInsertQueryBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultiInsertQueryBody) {
            return visitor.visitMultiInsertQueryBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryTermContext extends antlr.ParserRuleContext {
    public _left?: QueryTermContext;
    public _operator?: Token | null;
    public _right?: QueryTermContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryPrimary(): QueryPrimaryContext | null {
        return this.getRuleContext(0, QueryPrimaryContext);
    }
    public queryTerm(): QueryTermContext[];
    public queryTerm(i: number): QueryTermContext | null;
    public queryTerm(i?: number): QueryTermContext[] | QueryTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryTermContext);
        }

        return this.getRuleContext(i, QueryTermContext);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERSECT, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNION, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCEPT, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUS, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_queryTerm;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQueryTerm) {
             listener.enterQueryTerm(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQueryTerm) {
             listener.exitQueryTerm(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryTerm) {
            return visitor.visitQueryTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public querySpecification(): QuerySpecificationContext | null {
        return this.getRuleContext(0, QuerySpecificationContext);
    }
    public fromStatement(): FromStatementContext | null {
        return this.getRuleContext(0, FromStatementContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLE, 0);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VALUES, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public tableAlias(): TableAliasContext | null {
        return this.getRuleContext(0, TableAliasContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_queryPrimary;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQueryPrimary) {
             listener.enterQueryPrimary(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQueryPrimary) {
             listener.exitQueryPrimary(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryPrimary) {
            return visitor.visitQueryPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortItemContext extends antlr.ParserRuleContext {
    public _ordering?: Token | null;
    public _nullOrder?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAST, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_sortItem;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSortItem) {
             listener.enterSortItem(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSortItem) {
             listener.exitSortItem(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSortItem) {
            return visitor.visitSortItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fromClause(): FromClauseContext {
        return this.getRuleContext(0, FromClauseContext)!;
    }
    public fromStatementBody(): FromStatementBodyContext[];
    public fromStatementBody(i: number): FromStatementBodyContext | null;
    public fromStatementBody(i?: number): FromStatementBodyContext[] | FromStatementBodyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FromStatementBodyContext);
        }

        return this.getRuleContext(i, FromStatementBodyContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_fromStatement;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFromStatement) {
             listener.enterFromStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFromStatement) {
             listener.exitFromStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromStatement) {
            return visitor.visitFromStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromStatementBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transformClause(): TransformClauseContext | null {
        return this.getRuleContext(0, TransformClauseContext);
    }
    public queryOrganization(): QueryOrganizationContext {
        return this.getRuleContext(0, QueryOrganizationContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public aggregationClause(): AggregationClauseContext | null {
        return this.getRuleContext(0, AggregationClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_fromStatementBody;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFromStatementBody) {
             listener.enterFromStatementBody(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFromStatementBody) {
             listener.exitFromStatementBody(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromStatementBody) {
            return visitor.visitFromStatementBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transformClause(): TransformClauseContext | null {
        return this.getRuleContext(0, TransformClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public aggregationClause(): AggregationClauseContext | null {
        return this.getRuleContext(0, AggregationClauseContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public selectClause(): SelectClauseContext | null {
        return this.getRuleContext(0, SelectClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_querySpecification;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQuerySpecification) {
             listener.enterQuerySpecification(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQuerySpecification) {
             listener.exitQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuerySpecification) {
            return visitor.visitQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformClauseContext extends antlr.ParserRuleContext {
    public _kind?: Token | null;
    public _inRowFormat?: RowFormatContext;
    public _recordWriter?: StringLitContext;
    public _script?: StringLitContext;
    public _outRowFormat?: RowFormatContext;
    public _recordReader?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_USING, 0)!;
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SELECT, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public expressionSeq(): ExpressionSeqContext | null {
        return this.getRuleContext(0, ExpressionSeqContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSFORM, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REDUCE, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDWRITER, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDREADER, 0);
    }
    public rowFormat(): RowFormatContext[];
    public rowFormat(i: number): RowFormatContext | null;
    public rowFormat(i?: number): RowFormatContext[] | RowFormatContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFormatContext);
        }

        return this.getRuleContext(i, RowFormatContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public identifierSeq(): IdentifierSeqContext | null {
        return this.getRuleContext(0, IdentifierSeqContext);
    }
    public colTypeList(): ColTypeListContext | null {
        return this.getRuleContext(0, ColTypeListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_transformClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTransformClause) {
             listener.enterTransformClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTransformClause) {
             listener.exitTransformClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransformClause) {
            return visitor.visitTransformClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectClauseContext extends antlr.ParserRuleContext {
    public _hint?: HintContext;
    public _hints: HintContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SELECT, 0)!;
    }
    public selectList(): SelectListContext {
        return this.getRuleContext(0, SelectListContext)!;
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public hint(): HintContext[];
    public hint(i: number): HintContext | null;
    public hint(i?: number): HintContext[] | HintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintContext);
        }

        return this.getRuleContext(i, HintContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_selectClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSelectClause) {
             listener.enterSelectClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSelectClause) {
             listener.exitSelectClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectClause) {
            return visitor.visitSelectClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SET, 0)!;
    }
    public assignmentList(): AssignmentListContext {
        return this.getRuleContext(0, AssignmentListContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_setClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetClause) {
             listener.enterSetClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetClause) {
             listener.exitSetClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetClause) {
            return visitor.visitSetClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MatchedClauseContext extends antlr.ParserRuleContext {
    public _matchedCond?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_THEN, 0)!;
    }
    public matchedAction(): MatchedActionContext {
        return this.getRuleContext(0, MatchedActionContext)!;
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_matchedClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMatchedClause) {
             listener.enterMatchedClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMatchedClause) {
             listener.exitMatchedClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMatchedClause) {
            return visitor.visitMatchedClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedClauseContext extends antlr.ParserRuleContext {
    public _notMatchedCond?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHEN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_NOT, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_THEN, 0)!;
    }
    public notMatchedAction(): NotMatchedActionContext {
        return this.getRuleContext(0, NotMatchedActionContext)!;
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_TARGET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TARGET, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_notMatchedClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNotMatchedClause) {
             listener.enterNotMatchedClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNotMatchedClause) {
             listener.exitNotMatchedClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedClause) {
            return visitor.visitNotMatchedClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedBySourceClauseContext extends antlr.ParserRuleContext {
    public _notMatchedBySourceCond?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHEN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_NOT, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BY, 0)!;
    }
    public KW_SOURCE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_SOURCE, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_THEN, 0)!;
    }
    public notMatchedBySourceAction(): NotMatchedBySourceActionContext {
        return this.getRuleContext(0, NotMatchedBySourceActionContext)!;
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_notMatchedBySourceClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNotMatchedBySourceClause) {
             listener.enterNotMatchedBySourceClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNotMatchedBySourceClause) {
             listener.exitNotMatchedBySourceClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedBySourceClause) {
            return visitor.visitNotMatchedBySourceClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MatchedActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public assignmentList(): AssignmentListContext | null {
        return this.getRuleContext(0, AssignmentListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_matchedAction;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMatchedAction) {
             listener.enterMatchedAction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMatchedAction) {
             listener.exitMatchedAction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMatchedAction) {
            return visitor.visitMatchedAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INSERT, 0)!;
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public multipartIdentifierList(): MultipartIdentifierListContext | null {
        return this.getRuleContext(0, MultipartIdentifierListContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VALUES, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_notMatchedAction;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNotMatchedAction) {
             listener.enterNotMatchedAction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNotMatchedAction) {
             listener.exitNotMatchedAction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedAction) {
            return visitor.visitNotMatchedAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotMatchedBySourceActionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public assignmentList(): AssignmentListContext | null {
        return this.getRuleContext(0, AssignmentListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_notMatchedBySourceAction;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNotMatchedBySourceAction) {
             listener.enterNotMatchedBySourceAction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNotMatchedBySourceAction) {
             listener.exitNotMatchedBySourceAction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotMatchedBySourceAction) {
            return visitor.visitNotMatchedBySourceAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignment(): AssignmentContext[];
    public assignment(i: number): AssignmentContext | null;
    public assignment(i?: number): AssignmentContext[] | AssignmentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AssignmentContext);
        }

        return this.getRuleContext(i, AssignmentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_assignmentList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAssignmentList) {
             listener.enterAssignmentList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAssignmentList) {
             listener.exitAssignmentList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentList) {
            return visitor.visitAssignmentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentContext extends antlr.ParserRuleContext {
    public _key?: MultipartIdentifierContext;
    public _value?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.EQ, 0)!;
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_assignment;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAssignment) {
             listener.enterAssignment(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAssignment) {
             listener.exitAssignment(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssignment) {
            return visitor.visitAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHERE, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_whereClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HAVING(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_HAVING, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_havingClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintContext extends antlr.ParserRuleContext {
    public _hintStatement?: HintStatementContext;
    public _hintStatements: HintStatementContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HENT_START(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.HENT_START, 0)!;
    }
    public HENT_END(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.HENT_END, 0)!;
    }
    public hintStatement(): HintStatementContext[];
    public hintStatement(i: number): HintStatementContext | null;
    public hintStatement(i?: number): HintStatementContext[] | HintStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintStatementContext);
        }

        return this.getRuleContext(i, HintStatementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_hint;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHint) {
             listener.enterHint(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHint) {
             listener.exitHint(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHint) {
            return visitor.visitHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintStatementContext extends antlr.ParserRuleContext {
    public _hintName?: IdentifierContext;
    public _primaryExpression?: PrimaryExpressionContext;
    public _parameters: PrimaryExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public primaryExpression(): PrimaryExpressionContext[];
    public primaryExpression(i: number): PrimaryExpressionContext | null;
    public primaryExpression(i?: number): PrimaryExpressionContext[] | PrimaryExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryExpressionContext);
        }

        return this.getRuleContext(i, PrimaryExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_hintStatement;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterHintStatement) {
             listener.enterHintStatement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitHintStatement) {
             listener.exitHintStatement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHintStatement) {
            return visitor.visitHintStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FROM, 0)!;
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public lateralView(): LateralViewContext[];
    public lateralView(i: number): LateralViewContext | null;
    public lateralView(i?: number): LateralViewContext[] | LateralViewContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LateralViewContext);
        }

        return this.getRuleContext(i, LateralViewContext);
    }
    public pivotClause(): PivotClauseContext | null {
        return this.getRuleContext(0, PivotClauseContext);
    }
    public unpivotClause(): UnpivotClauseContext | null {
        return this.getRuleContext(0, UnpivotClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_fromClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFromClause) {
             listener.enterFromClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFromClause) {
             listener.exitFromClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionKindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USER, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionKind;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionKind) {
             listener.enterFunctionKind(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionKind) {
             listener.exitFunctionKind(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionKind) {
            return visitor.visitFunctionKind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TemporalClauseContext extends antlr.ParserRuleContext {
    public _timestamp?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public KW_OF(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_OF, 0)!;
    }
    public version(): VersionContext | null {
        return this.getRuleContext(0, VersionContext);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VERSION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOR, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_temporalClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTemporalClause) {
             listener.enterTemporalClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTemporalClause) {
             listener.exitTemporalClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTemporalClause) {
            return visitor.visitTemporalClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AggregationClauseContext extends antlr.ParserRuleContext {
    public _groupByClause?: GroupByClauseContext;
    public _groupingExpressionsWithGroupingAnalytics: GroupByClauseContext[] = [];
    public _expression?: ExpressionContext;
    public _groupingExpressions: ExpressionContext[] = [];
    public _kind?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_GROUP, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BY, 0)!;
    }
    public groupByClause(): GroupByClauseContext[];
    public groupByClause(i: number): GroupByClauseContext | null;
    public groupByClause(i?: number): GroupByClauseContext[] | GroupByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupByClauseContext);
        }

        return this.getRuleContext(i, GroupByClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SETS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CUBE, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUPING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_aggregationClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAggregationClause) {
             listener.enterAggregationClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAggregationClause) {
             listener.exitAggregationClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggregationClause) {
            return visitor.visitAggregationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext | null {
        return this.getRuleContext(0, ColumnNameContext);
    }
    public groupingAnalytics(): GroupingAnalyticsContext | null {
        return this.getRuleContext(0, GroupingAnalyticsContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_groupByClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGroupByClause) {
             listener.enterGroupByClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGroupByClause) {
             listener.exitGroupByClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingAnalyticsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLUP, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CUBE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUPING, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SETS, 0);
    }
    public groupingElement(): GroupingElementContext[];
    public groupingElement(i: number): GroupingElementContext | null;
    public groupingElement(i?: number): GroupingElementContext[] | GroupingElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingElementContext);
        }

        return this.getRuleContext(i, GroupingElementContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_groupingAnalytics;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGroupingAnalytics) {
             listener.enterGroupingAnalytics(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGroupingAnalytics) {
             listener.exitGroupingAnalytics(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingAnalytics) {
            return visitor.visitGroupingAnalytics(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingAnalytics(): GroupingAnalyticsContext | null {
        return this.getRuleContext(0, GroupingAnalyticsContext);
    }
    public groupingSet(): GroupingSetContext | null {
        return this.getRuleContext(0, GroupingSetContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_groupingElement;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGroupingElement) {
             listener.enterGroupingElement(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGroupingElement) {
             listener.exitGroupingElement(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingElement) {
            return visitor.visitGroupingElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext[];
    public columnName(i: number): ColumnNameContext | null;
    public columnName(i?: number): ColumnNameContext[] | ColumnNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameContext);
        }

        return this.getRuleContext(i, ColumnNameContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_groupingSet;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGroupingSet) {
             listener.enterGroupingSet(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGroupingSet) {
             listener.exitGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingSet) {
            return visitor.visitGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotClauseContext extends antlr.ParserRuleContext {
    public _aggregates?: NamedExpressionSeqContext;
    public _pivotValue?: PivotValueContext;
    public _pivotValues: PivotValueContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PIVOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_PIVOT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FOR, 0)!;
    }
    public pivotColumn(): PivotColumnContext {
        return this.getRuleContext(0, PivotColumnContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        return this.getRuleContext(0, NamedExpressionSeqContext)!;
    }
    public pivotValue(): PivotValueContext[];
    public pivotValue(i: number): PivotValueContext | null;
    public pivotValue(i?: number): PivotValueContext[] | PivotValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PivotValueContext);
        }

        return this.getRuleContext(i, PivotValueContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_pivotClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPivotClause) {
             listener.enterPivotClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPivotClause) {
             listener.exitPivotClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPivotClause) {
            return visitor.visitPivotClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotColumnContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _identifiers: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_pivotColumn;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPivotColumn) {
             listener.enterPivotColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPivotColumn) {
             listener.exitPivotColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPivotColumn) {
            return visitor.visitPivotColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PivotValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_pivotValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPivotValue) {
             listener.enterPivotValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPivotValue) {
             listener.exitPivotValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPivotValue) {
            return visitor.visitPivotValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotClauseContext extends antlr.ParserRuleContext {
    public _nullOperator?: UnpivotNullClauseContext;
    public _operator?: UnpivotOperatorContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNPIVOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_UNPIVOT, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public unpivotOperator(): UnpivotOperatorContext {
        return this.getRuleContext(0, UnpivotOperatorContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public unpivotNullClause(): UnpivotNullClauseContext | null {
        return this.getRuleContext(0, UnpivotNullClauseContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotClause) {
             listener.enterUnpivotClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotClause) {
             listener.exitUnpivotClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotClause) {
            return visitor.visitUnpivotClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotNullClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULLS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_NULLS, 0)!;
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INCLUDE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCLUDE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotNullClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotNullClause) {
             listener.enterUnpivotNullClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotNullClause) {
             listener.exitUnpivotNullClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotNullClause) {
            return visitor.visitUnpivotNullClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unpivotSingleValueColumnClause(): UnpivotSingleValueColumnClauseContext | null {
        return this.getRuleContext(0, UnpivotSingleValueColumnClauseContext);
    }
    public unpivotMultiValueColumnClause(): UnpivotMultiValueColumnClauseContext | null {
        return this.getRuleContext(0, UnpivotMultiValueColumnClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotOperator;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotOperator) {
             listener.enterUnpivotOperator(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotOperator) {
             listener.exitUnpivotOperator(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotOperator) {
            return visitor.visitUnpivotOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotSingleValueColumnClauseContext extends antlr.ParserRuleContext {
    public _unpivotColumnAndAlias?: UnpivotColumnAndAliasContext;
    public _unpivotColumns: UnpivotColumnAndAliasContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unpivotValueColumn(): UnpivotValueColumnContext {
        return this.getRuleContext(0, UnpivotValueColumnContext)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FOR, 0)!;
    }
    public unpivotNameColumn(): UnpivotNameColumnContext {
        return this.getRuleContext(0, UnpivotNameColumnContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IN, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public unpivotColumnAndAlias(): UnpivotColumnAndAliasContext[];
    public unpivotColumnAndAlias(i: number): UnpivotColumnAndAliasContext | null;
    public unpivotColumnAndAlias(i?: number): UnpivotColumnAndAliasContext[] | UnpivotColumnAndAliasContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnpivotColumnAndAliasContext);
        }

        return this.getRuleContext(i, UnpivotColumnAndAliasContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotSingleValueColumnClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotSingleValueColumnClause) {
             listener.enterUnpivotSingleValueColumnClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotSingleValueColumnClause) {
             listener.exitUnpivotSingleValueColumnClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotSingleValueColumnClause) {
            return visitor.visitUnpivotSingleValueColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotMultiValueColumnClauseContext extends antlr.ParserRuleContext {
    public _unpivotValueColumn?: UnpivotValueColumnContext;
    public _unpivotValueColumns: UnpivotValueColumnContext[] = [];
    public _unpivotColumnSet?: UnpivotColumnSetContext;
    public _unpivotColumnSets: UnpivotColumnSetContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FOR, 0)!;
    }
    public unpivotNameColumn(): UnpivotNameColumnContext {
        return this.getRuleContext(0, UnpivotNameColumnContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IN, 0)!;
    }
    public unpivotValueColumn(): UnpivotValueColumnContext[];
    public unpivotValueColumn(i: number): UnpivotValueColumnContext | null;
    public unpivotValueColumn(i?: number): UnpivotValueColumnContext[] | UnpivotValueColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnpivotValueColumnContext);
        }

        return this.getRuleContext(i, UnpivotValueColumnContext);
    }
    public unpivotColumnSet(): UnpivotColumnSetContext[];
    public unpivotColumnSet(i: number): UnpivotColumnSetContext | null;
    public unpivotColumnSet(i?: number): UnpivotColumnSetContext[] | UnpivotColumnSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnpivotColumnSetContext);
        }

        return this.getRuleContext(i, UnpivotColumnSetContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotMultiValueColumnClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotMultiValueColumnClause) {
             listener.enterUnpivotMultiValueColumnClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotMultiValueColumnClause) {
             listener.exitUnpivotMultiValueColumnClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotMultiValueColumnClause) {
            return visitor.visitUnpivotMultiValueColumnClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotColumnSetContext extends antlr.ParserRuleContext {
    public _unpivotColumn?: UnpivotColumnContext;
    public _unpivotColumns: UnpivotColumnContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public unpivotColumn(): UnpivotColumnContext[];
    public unpivotColumn(i: number): UnpivotColumnContext | null;
    public unpivotColumn(i?: number): UnpivotColumnContext[] | UnpivotColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnpivotColumnContext);
        }

        return this.getRuleContext(i, UnpivotColumnContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public unpivotAlias(): UnpivotAliasContext | null {
        return this.getRuleContext(0, UnpivotAliasContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotColumnSet;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotColumnSet) {
             listener.enterUnpivotColumnSet(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotColumnSet) {
             listener.exitUnpivotColumnSet(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotColumnSet) {
            return visitor.visitUnpivotColumnSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotValueColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotValueColumn;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotValueColumn) {
             listener.enterUnpivotValueColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotValueColumn) {
             listener.exitUnpivotValueColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotValueColumn) {
            return visitor.visitUnpivotValueColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotNameColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotNameColumn;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotNameColumn) {
             listener.enterUnpivotNameColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotNameColumn) {
             listener.exitUnpivotNameColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotNameColumn) {
            return visitor.visitUnpivotNameColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotColumnAndAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unpivotColumn(): UnpivotColumnContext {
        return this.getRuleContext(0, UnpivotColumnContext)!;
    }
    public unpivotAlias(): UnpivotAliasContext | null {
        return this.getRuleContext(0, UnpivotAliasContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotColumnAndAlias;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotColumnAndAlias) {
             listener.enterUnpivotColumnAndAlias(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotColumnAndAlias) {
             listener.exitUnpivotColumnAndAlias(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotColumnAndAlias) {
            return visitor.visitUnpivotColumnAndAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotColumn;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotColumn) {
             listener.enterUnpivotColumn(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotColumn) {
             listener.exitUnpivotColumn(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotColumn) {
            return visitor.visitUnpivotColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnpivotAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unpivotAlias;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnpivotAlias) {
             listener.enterUnpivotAlias(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnpivotAlias) {
             listener.exitUnpivotAlias(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnpivotAlias) {
            return visitor.visitUnpivotAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfNotExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IF, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_NOT, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_ifNotExists;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIfNotExists) {
             listener.enterIfNotExists(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIfNotExists) {
             listener.exitIfNotExists(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfNotExists) {
            return visitor.visitIfNotExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IfExistsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_IF, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_ifExists;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIfExists) {
             listener.enterIfExists(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIfExists) {
             listener.exitIfExists(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIfExists) {
            return visitor.visitIfExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LateralViewContext extends antlr.ParserRuleContext {
    public _identifier?: IdentifierContext;
    public _colName: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LATERAL(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_LATERAL, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VIEW, 0)!;
    }
    public viewName(): ViewNameContext {
        return this.getRuleContext(0, ViewNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTER, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_lateralView;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterLateralView) {
             listener.enterLateralView(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitLateralView) {
             listener.exitLateralView(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLateralView) {
            return visitor.visitLateralView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTINCT, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_setQuantifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSetQuantifier) {
             listener.enterSetQuantifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSetQuantifier) {
             listener.exitSetQuantifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public relationPrimary(): RelationPrimaryContext | null {
        return this.getRuleContext(0, RelationPrimaryContext);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LATERAL, 0);
    }
    public relationExtension(): RelationExtensionContext[];
    public relationExtension(i: number): RelationExtensionContext | null;
    public relationExtension(i?: number): RelationExtensionContext[] | RelationExtensionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationExtensionContext);
        }

        return this.getRuleContext(i, RelationExtensionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_relation;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRelation) {
             listener.enterRelation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRelation) {
             listener.exitRelation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelation) {
            return visitor.visitRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationExtensionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public joinRelation(): JoinRelationContext | null {
        return this.getRuleContext(0, JoinRelationContext);
    }
    public pivotClause(): PivotClauseContext | null {
        return this.getRuleContext(0, PivotClauseContext);
    }
    public unpivotClause(): UnpivotClauseContext | null {
        return this.getRuleContext(0, UnpivotClauseContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_relationExtension;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRelationExtension) {
             listener.enterRelationExtension(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRelationExtension) {
             listener.exitRelationExtension(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelationExtension) {
            return visitor.visitRelationExtension(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinRelationContext extends antlr.ParserRuleContext {
    public _right?: RelationPrimaryContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_JOIN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_JOIN, 0)!;
    }
    public relationPrimary(): RelationPrimaryContext {
        return this.getRuleContext(0, RelationPrimaryContext)!;
    }
    public joinType(): JoinTypeContext | null {
        return this.getRuleContext(0, JoinTypeContext);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LATERAL, 0);
    }
    public joinCriteria(): JoinCriteriaContext | null {
        return this.getRuleContext(0, JoinCriteriaContext);
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NATURAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_joinRelation;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterJoinRelation) {
             listener.enterJoinRelation(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitJoinRelation) {
             listener.exitJoinRelation(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinRelation) {
            return visitor.visitJoinRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INNER, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CROSS, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEFT, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTER, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEMI, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RIGHT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FULL, 0);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANTI, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_joinType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterJoinType) {
             listener.enterJoinType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitJoinType) {
             listener.exitJoinType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinType) {
            return visitor.visitJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinCriteriaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ON, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USING, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_joinCriteria;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterJoinCriteria) {
             listener.enterJoinCriteria(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitJoinCriteria) {
             listener.exitJoinCriteria(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinCriteria) {
            return visitor.visitJoinCriteria(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleContext extends antlr.ParserRuleContext {
    public _seed?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLESAMPLE, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public sampleMethod(): SampleMethodContext | null {
        return this.getRuleContext(0, SampleMethodContext);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPEATABLE, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_sample;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSample) {
             listener.enterSample(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSample) {
             listener.exitSample(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSample) {
            return visitor.visitSample(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleMethodContext extends antlr.ParserRuleContext {
    public _negativeSign?: Token | null;
    public _percentage?: Token | null;
    public _sampleType?: Token | null;
    public _numerator?: Token | null;
    public _denominator?: Token | null;
    public _bytes?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PERCENTLIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTLIT, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(SparkSqlParser.INTEGER_VALUE, i);
    	}
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DECIMAL_VALUE, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROWS, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OF, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKET, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ON, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_sampleMethod;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSampleMethod) {
             listener.enterSampleMethod(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSampleMethod) {
             listener.exitSampleMethod(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSampleMethod) {
            return visitor.visitSampleMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public identifierSeq(): IdentifierSeqContext {
        return this.getRuleContext(0, IdentifierSeqContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierList) {
             listener.enterIdentifierList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierList) {
             listener.exitIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierList) {
            return visitor.visitIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierSeqContext extends antlr.ParserRuleContext {
    public _errorCapturingIdentifier?: ErrorCapturingIdentifierContext;
    public _ident: ErrorCapturingIdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierSeq;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierSeq) {
             listener.enterIdentifierSeq(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierSeq) {
             listener.exitIdentifierSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierSeq) {
            return visitor.visitIdentifierSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderedIdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public orderedIdentifier(): OrderedIdentifierContext[];
    public orderedIdentifier(i: number): OrderedIdentifierContext | null;
    public orderedIdentifier(i?: number): OrderedIdentifierContext[] | OrderedIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderedIdentifierContext);
        }

        return this.getRuleContext(i, OrderedIdentifierContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_orderedIdentifierList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterOrderedIdentifierList) {
             listener.enterOrderedIdentifierList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitOrderedIdentifierList) {
             listener.exitOrderedIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderedIdentifierList) {
            return visitor.visitOrderedIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderedIdentifierContext extends antlr.ParserRuleContext {
    public _ident?: ErrorCapturingIdentifierContext;
    public _ordering?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_orderedIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterOrderedIdentifier) {
             listener.enterOrderedIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitOrderedIdentifier) {
             listener.exitOrderedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOrderedIdentifier) {
            return visitor.visitOrderedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierCommentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public identifierComment(): IdentifierCommentContext[];
    public identifierComment(i: number): IdentifierCommentContext | null;
    public identifierComment(i?: number): IdentifierCommentContext[] | IdentifierCommentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierCommentContext);
        }

        return this.getRuleContext(i, IdentifierCommentContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierCommentList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierCommentList) {
             listener.enterIdentifierCommentList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierCommentList) {
             listener.exitIdentifierCommentList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierCommentList) {
            return visitor.visitIdentifierCommentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierCommentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifierComment;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifierComment) {
             listener.enterIdentifierComment(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifierComment) {
             listener.exitIdentifierComment(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierComment) {
            return visitor.visitIdentifierComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_relationPrimary;
    }
    public override copyFrom(ctx: RelationPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class SubQueryTableSourceContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public atomSubQueryTableSource(): AtomSubQueryTableSourceContext {
        return this.getRuleContext(0, AtomSubQueryTableSourceContext)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public sample(): SampleContext | null {
        return this.getRuleContext(0, SampleContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSubQueryTableSource) {
             listener.enterSubQueryTableSource(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSubQueryTableSource) {
             listener.exitSubQueryTableSource(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubQueryTableSource) {
            return visitor.visitSubQueryTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableSourceContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public viewName(): ViewNameContext | null {
        return this.getRuleContext(0, ViewNameContext);
    }
    public identifierReference(): IdentifierReferenceContext | null {
        return this.getRuleContext(0, IdentifierReferenceContext);
    }
    public temporalClause(): TemporalClauseContext | null {
        return this.getRuleContext(0, TemporalClauseContext);
    }
    public sample(): SampleContext | null {
        return this.getRuleContext(0, SampleContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableSource) {
             listener.enterTableSource(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableSource) {
             listener.exitTableSource(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableSource) {
            return visitor.visitTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionTableSourceContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public functionTable(): FunctionTableContext {
        return this.getRuleContext(0, FunctionTableContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableSource) {
             listener.enterFunctionTableSource(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableSource) {
             listener.exitFunctionTableSource(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableSource) {
            return visitor.visitFunctionTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinTableSourceContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public relation(): RelationContext {
        return this.getRuleContext(0, RelationContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public sample(): SampleContext | null {
        return this.getRuleContext(0, SampleContext);
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterJoinTableSource) {
             listener.enterJoinTableSource(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitJoinTableSource) {
             listener.exitJoinTableSource(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoinTableSource) {
            return visitor.visitJoinTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InlineTableSourceContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public inlineTable(): InlineTableContext {
        return this.getRuleContext(0, InlineTableContext)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterInlineTableSource) {
             listener.enterInlineTableSource(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitInlineTableSource) {
             listener.exitInlineTableSource(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInlineTableSource) {
            return visitor.visitInlineTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomSubQueryTableSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_atomSubQueryTableSource;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAtomSubQueryTableSource) {
             listener.enterAtomSubQueryTableSource(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAtomSubQueryTableSource) {
             listener.exitAtomSubQueryTableSource(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtomSubQueryTableSource) {
            return visitor.visitAtomSubQueryTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InlineTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_VALUES, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_inlineTable;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterInlineTable) {
             listener.enterInlineTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitInlineTable) {
             listener.exitInlineTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInlineTable) {
            return visitor.visitInlineTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableSubqueryArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TABLE, 0)!;
    }
    public tableName(): TableNameContext | null {
        return this.getRuleContext(0, TableNameContext);
    }
    public tableArgumentPartitioning(): TableArgumentPartitioningContext | null {
        return this.getRuleContext(0, TableArgumentPartitioningContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTableSubqueryArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableSubqueryArgument) {
             listener.enterFunctionTableSubqueryArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableSubqueryArgument) {
             listener.exitFunctionTableSubqueryArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableSubqueryArgument) {
            return visitor.visitFunctionTableSubqueryArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentPartitioningContext extends antlr.ParserRuleContext {
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SINGLE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableArgumentPartitioning;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableArgumentPartitioning) {
             listener.enterTableArgumentPartitioning(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableArgumentPartitioning) {
             listener.exitTableArgumentPartitioning(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentPartitioning) {
            return visitor.visitTableArgumentPartitioning(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableNamedArgumentExpressionContext extends antlr.ParserRuleContext {
    public _key?: IdentifierContext;
    public _table?: FunctionTableSubqueryArgumentContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAT_ARROW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.FAT_ARROW, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext {
        return this.getRuleContext(0, FunctionTableSubqueryArgumentContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTableNamedArgumentExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableNamedArgumentExpression) {
             listener.enterFunctionTableNamedArgumentExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableNamedArgumentExpression) {
             listener.exitFunctionTableNamedArgumentExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableNamedArgumentExpression) {
            return visitor.visitFunctionTableNamedArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableReferenceArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionTableSubqueryArgument(): FunctionTableSubqueryArgumentContext | null {
        return this.getRuleContext(0, FunctionTableSubqueryArgumentContext);
    }
    public functionTableNamedArgumentExpression(): FunctionTableNamedArgumentExpressionContext | null {
        return this.getRuleContext(0, FunctionTableNamedArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTableReferenceArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableReferenceArgument) {
             listener.enterFunctionTableReferenceArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableReferenceArgument) {
             listener.exitFunctionTableReferenceArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableReferenceArgument) {
            return visitor.visitFunctionTableReferenceArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionTableReferenceArgument(): FunctionTableReferenceArgumentContext | null {
        return this.getRuleContext(0, FunctionTableReferenceArgumentContext);
    }
    public functionArgument(): FunctionArgumentContext | null {
        return this.getRuleContext(0, FunctionArgumentContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTableArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTableArgument) {
             listener.enterFunctionTableArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTableArgument) {
             listener.exitFunctionTableArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTableArgument) {
            return visitor.visitFunctionTableArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public atomFunctionTable(): AtomFunctionTableContext {
        return this.getRuleContext(0, AtomFunctionTableContext)!;
    }
    public tableAlias(): TableAliasContext {
        return this.getRuleContext(0, TableAliasContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionTable;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionTable) {
             listener.enterFunctionTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionTable) {
             listener.exitFunctionTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionTable) {
            return visitor.visitFunctionTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AtomFunctionTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public functionTableArgument(): FunctionTableArgumentContext[];
    public functionTableArgument(i: number): FunctionTableArgumentContext | null;
    public functionTableArgument(i?: number): FunctionTableArgumentContext[] | FunctionTableArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionTableArgumentContext);
        }

        return this.getRuleContext(i, FunctionTableArgumentContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_atomFunctionTable;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAtomFunctionTable) {
             listener.enterAtomFunctionTable(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAtomFunctionTable) {
             listener.exitAtomFunctionTable(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtomFunctionTable) {
            return visitor.visitAtomFunctionTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAliasContext extends antlr.ParserRuleContext {
    public _alias?: StrictIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public strictIdentifier(): StrictIdentifierContext | null {
        return this.getRuleContext(0, StrictIdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableAlias;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableAlias) {
             listener.enterTableAlias(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableAlias) {
             listener.exitTableAlias(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableAlias) {
            return visitor.visitTableAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFormatContext extends antlr.ParserRuleContext {
    public _name?: StringLitContext;
    public _props?: PropertyListContext;
    public _fieldsTerminatedBy?: StringLitContext;
    public _escapedBy?: StringLitContext;
    public _collectionItemsTerminatedBy?: StringLitContext;
    public _keysTerminatedBy?: StringLitContext;
    public _linesSeparatedBy?: StringLitContext;
    public _nullDefinedAs?: StringLitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ROW, 0)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_FORMAT, 0)!;
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELIMITED, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIELDS, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode[];
    public KW_TERMINATED(i: number): antlr.TerminalNode | null;
    public KW_TERMINATED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_TERMINATED);
    	} else {
    		return this.getToken(SparkSqlParser.KW_TERMINATED, i);
    	}
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLLECTION, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ITEMS, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_KEYS, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LINES, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFINED, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPED, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_rowFormat;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterRowFormat) {
             listener.enterRowFormat(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitRowFormat) {
             listener.exitRowFormat(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowFormat) {
            return visitor.visitRowFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext[];
    public multipartIdentifier(i: number): MultipartIdentifierContext | null;
    public multipartIdentifier(i?: number): MultipartIdentifierContext[] | MultipartIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierContext);
        }

        return this.getRuleContext(i, MultipartIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multipartIdentifierList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipartIdentifierList) {
             listener.enterMultipartIdentifierList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipartIdentifierList) {
             listener.exitMultipartIdentifierList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierList) {
            return visitor.visitMultipartIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierContext extends antlr.ParserRuleContext {
    public _errorCapturingIdentifier?: ErrorCapturingIdentifierContext;
    public _parts: ErrorCapturingIdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multipartIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipartIdentifier) {
             listener.enterMultipartIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipartIdentifier) {
             listener.exitMultipartIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifier) {
            return visitor.visitMultipartIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierPropertyListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifierProperty(): MultipartIdentifierPropertyContext[];
    public multipartIdentifierProperty(i: number): MultipartIdentifierPropertyContext | null;
    public multipartIdentifierProperty(i?: number): MultipartIdentifierPropertyContext[] | MultipartIdentifierPropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MultipartIdentifierPropertyContext);
        }

        return this.getRuleContext(i, MultipartIdentifierPropertyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multipartIdentifierPropertyList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipartIdentifierPropertyList) {
             listener.enterMultipartIdentifierPropertyList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipartIdentifierPropertyList) {
             listener.exitMultipartIdentifierPropertyList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierPropertyList) {
            return visitor.visitMultipartIdentifierPropertyList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultipartIdentifierPropertyContext extends antlr.ParserRuleContext {
    public _options?: PropertyListContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multipartIdentifier(): MultipartIdentifierContext {
        return this.getRuleContext(0, MultipartIdentifierContext)!;
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public propertyList(): PropertyListContext | null {
        return this.getRuleContext(0, PropertyListContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multipartIdentifierProperty;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultipartIdentifierProperty) {
             listener.enterMultipartIdentifierProperty(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultipartIdentifierProperty) {
             listener.exitMultipartIdentifierProperty(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultipartIdentifierProperty) {
            return visitor.visitMultipartIdentifierProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIdentifierContext extends antlr.ParserRuleContext {
    public _db?: ErrorCapturingIdentifierContext;
    public _table?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableIdentifier) {
             listener.enterTableIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableIdentifier) {
             listener.exitTableIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableIdentifier) {
            return visitor.visitTableIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewIdentifierContext extends antlr.ParserRuleContext {
    public _db?: ErrorCapturingIdentifierContext;
    public _view?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext[];
    public errorCapturingIdentifier(i: number): ErrorCapturingIdentifierContext | null;
    public errorCapturingIdentifier(i?: number): ErrorCapturingIdentifierContext[] | ErrorCapturingIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ErrorCapturingIdentifierContext);
        }

        return this.getRuleContext(i, ErrorCapturingIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_viewIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterViewIdentifier) {
             listener.enterViewIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitViewIdentifier) {
             listener.exitViewIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewIdentifier) {
            return visitor.visitViewIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectLiteralColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_selectLiteralColumnName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSelectLiteralColumnName) {
             listener.enterSelectLiteralColumnName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSelectLiteralColumnName) {
             listener.exitSelectLiteralColumnName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectLiteralColumnName) {
            return visitor.visitSelectLiteralColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectExpressionColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_selectExpressionColumnName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSelectExpressionColumnName) {
             listener.enterSelectExpressionColumnName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSelectExpressionColumnName) {
             listener.exitSelectExpressionColumnName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectExpressionColumnName) {
            return visitor.visitSelectExpressionColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAllColumnsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.ASTERISK, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_tableAllColumns;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTableAllColumns) {
             listener.enterTableAllColumns(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTableAllColumns) {
             listener.exitTableAllColumns(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableAllColumns) {
            return visitor.visitTableAllColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedExpressionContext extends antlr.ParserRuleContext {
    public _alias?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableAllColumns(): TableAllColumnsContext | null {
        return this.getRuleContext(0, TableAllColumnsContext);
    }
    public selectLiteralColumnName(): SelectLiteralColumnNameContext | null {
        return this.getRuleContext(0, SelectLiteralColumnNameContext);
    }
    public selectExpressionColumnName(): SelectExpressionColumnNameContext | null {
        return this.getRuleContext(0, SelectExpressionColumnNameContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedExpression) {
             listener.enterNamedExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedExpression) {
             listener.exitNamedExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedExpression) {
            return visitor.visitNamedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedExpressionSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public namedExpression(): NamedExpressionContext[];
    public namedExpression(i: number): NamedExpressionContext | null;
    public namedExpression(i?: number): NamedExpressionContext[] | NamedExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedExpressionContext);
        }

        return this.getRuleContext(i, NamedExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedExpressionSeq;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedExpressionSeq) {
             listener.enterNamedExpressionSeq(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedExpressionSeq) {
             listener.exitNamedExpressionSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedExpressionSeq) {
            return visitor.visitNamedExpressionSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public namedExpressionSeq(): NamedExpressionSeqContext {
        return this.getRuleContext(0, NamedExpressionSeqContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_selectList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterSelectList) {
             listener.enterSelectList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitSelectList) {
             listener.exitSelectList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectList) {
            return visitor.visitSelectList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionFieldListContext extends antlr.ParserRuleContext {
    public _partitionField?: PartitionFieldContext;
    public _fields: PartitionFieldContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public partitionField(): PartitionFieldContext[];
    public partitionField(i: number): PartitionFieldContext | null;
    public partitionField(i?: number): PartitionFieldContext[] | PartitionFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionFieldContext);
        }

        return this.getRuleContext(i, PartitionFieldContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionFieldList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionFieldList) {
             listener.enterPartitionFieldList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionFieldList) {
             listener.exitPartitionFieldList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionFieldList) {
            return visitor.visitPartitionFieldList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transform(): TransformContext | null {
        return this.getRuleContext(0, TransformContext);
    }
    public columnType(): ColumnTypeContext | null {
        return this.getRuleContext(0, ColumnTypeContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_partitionField;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPartitionField) {
             listener.enterPartitionField(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPartitionField) {
             listener.exitPartitionField(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionField) {
            return visitor.visitPartitionField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformContext extends antlr.ParserRuleContext {
    public _transformName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public transformArgument(): TransformArgumentContext[];
    public transformArgument(i: number): TransformArgumentContext | null;
    public transformArgument(i?: number): TransformArgumentContext[] | TransformArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransformArgumentContext);
        }

        return this.getRuleContext(i, TransformArgumentContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_transform;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTransform) {
             listener.enterTransform(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTransform) {
             listener.exitTransform(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransform) {
            return visitor.visitTransform(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransformArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_transformArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterTransformArgument) {
             listener.enterTransformArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitTransformArgument) {
             listener.exitTransformArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransformArgument) {
            return visitor.visitTransformArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_expression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedArgumentExpressionContext extends antlr.ParserRuleContext {
    public _key?: IdentifierContext;
    public _value?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAT_ARROW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.FAT_ARROW, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedArgumentExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedArgumentExpression) {
             listener.enterNamedArgumentExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedArgumentExpression) {
             listener.exitNamedArgumentExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedArgumentExpression) {
            return visitor.visitNamedArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public namedArgumentExpression(): NamedArgumentExpressionContext | null {
        return this.getRuleContext(0, NamedArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionArgument;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionArgument) {
             listener.enterFunctionArgument(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionArgument) {
             listener.exitFunctionArgument(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionArgument) {
            return visitor.visitFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_expressionSeq;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterExpressionSeq) {
             listener.enterExpressionSeq(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitExpressionSeq) {
             listener.exitExpressionSeq(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionSeq) {
            return visitor.visitExpressionSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public _left?: BooleanExpressionContext;
    public _operator?: Token | null;
    public _right?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NOT, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(0, PredicateContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_booleanExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterBooleanExpression) {
             listener.enterBooleanExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitBooleanExpression) {
             listener.exitBooleanExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanExpression) {
            return visitor.visitBooleanExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public _kind?: Token | null;
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public _pattern?: ValueExpressionContext;
    public _quantifier?: Token | null;
    public _escapeChar?: StringLitContext;
    public _right?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BETWEEN, 0);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REGEXP, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ILIKE, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SOME, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPE, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IS, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FALSE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNKNOWN, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_predicate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPredicate) {
             listener.enterPredicate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPredicate) {
             listener.exitPredicate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPredicate) {
            return visitor.visitPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PLUS, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.TILDE, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PERCENT, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIV, 0);
    }
    public CONCAT_PIPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.CONCAT_PIPE, 0);
    }
    public AMPERSAND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.AMPERSAND, 0);
    }
    public HAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.HAT, 0);
    }
    public PIPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PIPE, 0);
    }
    public comparisonOperator(): ComparisonOperatorContext | null {
        return this.getRuleContext(0, ComparisonOperatorContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_valueExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterValueExpression) {
             listener.enterValueExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitValueExpression) {
             listener.exitValueExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValueExpression) {
            return visitor.visitValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUARTER, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEK, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYOFYEAR, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECOND, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECOND, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_datetimeUnit;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDatetimeUnit) {
             listener.enterDatetimeUnit(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDatetimeUnit) {
             listener.exitDatetimeUnit(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatetimeUnit) {
            return visitor.visitDatetimeUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public _value?: PrimaryExpressionContext;
    public _base?: PrimaryExpressionContext;
    public _name?: Token | null;
    public _unit?: DatetimeUnitContext;
    public _invalidUnit?: StringLitContext;
    public _unitsAmount?: ValueExpressionContext;
    public _timestamp?: ValueExpressionContext;
    public _startTimestamp?: ValueExpressionContext;
    public _endTimestamp?: ValueExpressionContext;
    public _elseExpression?: ExpressionContext;
    public _substr?: ValueExpressionContext;
    public _str?: ValueExpressionContext;
    public _where?: BooleanExpressionContext;
    public _nullsOption?: Token | null;
    public _field?: IdentifierContext;
    public _source?: ValueExpressionContext;
    public _pos?: ValueExpressionContext;
    public _len?: ValueExpressionContext;
    public _trimOption?: Token | null;
    public _trimStr?: ValueExpressionContext;
    public _srcStr?: ValueExpressionContext;
    public _input?: ValueExpressionContext;
    public _replace?: ValueExpressionContext;
    public _position?: ValueExpressionContext;
    public _length?: ValueExpressionContext;
    public _percentage?: ValueExpressionContext;
    public _index?: ValueExpressionContext;
    public _fieldName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USER, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SESSION_USER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode[];
    public LEFT_PAREN(i: number): antlr.TerminalNode | null;
    public LEFT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.LEFT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.LEFT_PAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode[];
    public RIGHT_PAREN(i: number): antlr.TerminalNode | null;
    public RIGHT_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.RIGHT_PAREN);
    	} else {
    		return this.getToken(SparkSqlParser.RIGHT_PAREN, i);
    	}
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPADD, 0);
    }
    public KW_DATEADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEADD, 0);
    }
    public KW_DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_ADD, 0);
    }
    public datetimeUnit(): DatetimeUnitContext | null {
        return this.getRuleContext(0, DatetimeUnitContext);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEDIFF, 0);
    }
    public KW_DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_DIFF, 0);
    }
    public KW_TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMEDIFF, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_END, 0);
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ELSE, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CAST, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRY_CAST, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public namedExpression(): NamedExpressionContext[];
    public namedExpression(i: number): NamedExpressionContext | null;
    public namedExpression(i?: number): NamedExpressionContext[] | NamedExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedExpressionContext);
        }

        return this.getRuleContext(i, NamedExpressionContext);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IGNORE, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public KW_ANY_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY_VALUE, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAST, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_POSITION, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public constant(): ConstantContext | null {
        return this.getRuleContext(0, ConstantContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOT, 0);
    }
    public query(): QueryContext | null {
        return this.getRuleContext(0, QueryContext);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public functionName(): FunctionNameContext | null {
        return this.getRuleContext(0, FunctionNameContext);
    }
    public functionArgument(): FunctionArgumentContext[];
    public functionArgument(i: number): FunctionArgumentContext | null;
    public functionArgument(i?: number): FunctionArgumentContext[] | FunctionArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionArgumentContext);
        }

        return this.getRuleContext(i, FunctionArgumentContext);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILTER, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WHERE, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVER, 0);
    }
    public windowSpec(): WindowSpecContext | null {
        return this.getRuleContext(0, WindowSpecContext);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESPECT, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ARROW, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTRACT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FROM, 0);
    }
    public KW_SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTR, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTRING, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOR, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRIM, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOTH, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEADING, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRAILING, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERLAY, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PLACING, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITHIN, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUP, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public sortItem(): SortItemContext | null {
        return this.getRuleContext(0, SortItemContext);
    }
    public KW_PERCENTILE_CONT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTILE_CONT, 0);
    }
    public KW_PERCENTILE_DISC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTILE_DISC, 0);
    }
    public LEFT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_BRACKET, 0);
    }
    public RIGHT_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_BRACKET, 0);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_primaryExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPrimaryExpression) {
             listener.enterPrimaryExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPrimaryExpression) {
             listener.exitPrimaryExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryExpression) {
            return visitor.visitPrimaryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralTypeContext extends antlr.ParserRuleContext {
    public _unsupportedType?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_BINARY_HEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY_HEX, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_literalType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterLiteralType) {
             listener.enterLiteralType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitLiteralType) {
             listener.exitLiteralType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLiteralType) {
            return visitor.visitLiteralType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstantContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public QUESTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.QUESTION, 0);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.COLON, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public literalType(): LiteralTypeContext | null {
        return this.getRuleContext(0, LiteralTypeContext);
    }
    public stringLit(): StringLitContext[];
    public stringLit(i: number): StringLitContext | null;
    public stringLit(i?: number): StringLitContext[] | StringLitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringLitContext);
        }

        return this.getRuleContext(i, StringLitContext);
    }
    public number(): NumberContext | null {
        return this.getRuleContext(0, NumberContext);
    }
    public booleanValue(): BooleanValueContext | null {
        return this.getRuleContext(0, BooleanValueContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_constant;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterConstant) {
             listener.enterConstant(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitConstant) {
             listener.exitConstant(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstant) {
            return visitor.visitConstant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public NEQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NEQ, 0);
    }
    public NEQJ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NEQJ, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LT, 0);
    }
    public LTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LTE, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.GT, 0);
    }
    public GTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.GTE, 0);
    }
    public NSEQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NSEQ, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArithmeticOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PERCENT, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIV, 0);
    }
    public TILDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.TILDE, 0);
    }
    public AMPERSAND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.AMPERSAND, 0);
    }
    public PIPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PIPE, 0);
    }
    public CONCAT_PIPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.CONCAT_PIPE, 0);
    }
    public HAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.HAT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_arithmeticOperator;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterArithmeticOperator) {
             listener.enterArithmeticOperator(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitArithmeticOperator) {
             listener.exitArithmeticOperator(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticOperator) {
            return visitor.visitArithmeticOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_predicateOperator;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterPredicateOperator) {
             listener.enterPredicateOperator(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitPredicateOperator) {
             listener.exitPredicateOperator(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPredicateOperator) {
            return visitor.visitPredicateOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FALSE, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_booleanValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterBooleanValue) {
             listener.enterBooleanValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitBooleanValue) {
             listener.exitBooleanValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanValue) {
            return visitor.visitBooleanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTERVAL(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0)!;
    }
    public errorCapturingMultiUnitsInterval(): ErrorCapturingMultiUnitsIntervalContext | null {
        return this.getRuleContext(0, ErrorCapturingMultiUnitsIntervalContext);
    }
    public errorCapturingUnitToUnitInterval(): ErrorCapturingUnitToUnitIntervalContext | null {
        return this.getRuleContext(0, ErrorCapturingUnitToUnitIntervalContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_interval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterInterval) {
             listener.enterInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitInterval) {
             listener.exitInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingMultiUnitsIntervalContext extends antlr.ParserRuleContext {
    public _body?: MultiUnitsIntervalContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext {
        return this.getRuleContext(0, MultiUnitsIntervalContext)!;
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext | null {
        return this.getRuleContext(0, UnitToUnitIntervalContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_errorCapturingMultiUnitsInterval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterErrorCapturingMultiUnitsInterval) {
             listener.enterErrorCapturingMultiUnitsInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitErrorCapturingMultiUnitsInterval) {
             listener.exitErrorCapturingMultiUnitsInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingMultiUnitsInterval) {
            return visitor.visitErrorCapturingMultiUnitsInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultiUnitsIntervalContext extends antlr.ParserRuleContext {
    public _unitInMultiUnits?: UnitInMultiUnitsContext;
    public _unit: UnitInMultiUnitsContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalValue(): IntervalValueContext[];
    public intervalValue(i: number): IntervalValueContext | null;
    public intervalValue(i?: number): IntervalValueContext[] | IntervalValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalValueContext);
        }

        return this.getRuleContext(i, IntervalValueContext);
    }
    public unitInMultiUnits(): UnitInMultiUnitsContext[];
    public unitInMultiUnits(i: number): UnitInMultiUnitsContext | null;
    public unitInMultiUnits(i?: number): UnitInMultiUnitsContext[] | UnitInMultiUnitsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitInMultiUnitsContext);
        }

        return this.getRuleContext(i, UnitInMultiUnitsContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_multiUnitsInterval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterMultiUnitsInterval) {
             listener.enterMultiUnitsInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitMultiUnitsInterval) {
             listener.exitMultiUnitsInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMultiUnitsInterval) {
            return visitor.visitMultiUnitsInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingUnitToUnitIntervalContext extends antlr.ParserRuleContext {
    public _body?: UnitToUnitIntervalContext;
    public _error1?: MultiUnitsIntervalContext;
    public _error2?: UnitToUnitIntervalContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unitToUnitInterval(): UnitToUnitIntervalContext[];
    public unitToUnitInterval(i: number): UnitToUnitIntervalContext | null;
    public unitToUnitInterval(i?: number): UnitToUnitIntervalContext[] | UnitToUnitIntervalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitToUnitIntervalContext);
        }

        return this.getRuleContext(i, UnitToUnitIntervalContext);
    }
    public multiUnitsInterval(): MultiUnitsIntervalContext | null {
        return this.getRuleContext(0, MultiUnitsIntervalContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_errorCapturingUnitToUnitInterval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterErrorCapturingUnitToUnitInterval) {
             listener.enterErrorCapturingUnitToUnitInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitErrorCapturingUnitToUnitInterval) {
             listener.exitErrorCapturingUnitToUnitInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingUnitToUnitInterval) {
            return visitor.visitErrorCapturingUnitToUnitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitToUnitIntervalContext extends antlr.ParserRuleContext {
    public _value?: IntervalValueContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public unitInUnitToUnit(): UnitInUnitToUnitContext[];
    public unitInUnitToUnit(i: number): UnitInUnitToUnitContext | null;
    public unitInUnitToUnit(i?: number): UnitInUnitToUnitContext[] | UnitInUnitToUnitContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UnitInUnitToUnitContext);
        }

        return this.getRuleContext(i, UnitInUnitToUnitContext);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_TO, 0)!;
    }
    public intervalValue(): IntervalValueContext {
        return this.getRuleContext(0, IntervalValueContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unitToUnitInterval;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnitToUnitInterval) {
             listener.enterUnitToUnitInterval(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnitToUnitInterval) {
             listener.exitUnitToUnitInterval(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnitToUnitInterval) {
            return visitor.visitUnitToUnitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DECIMAL_VALUE, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_intervalValue;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIntervalValue) {
             listener.enterIntervalValue(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIntervalValue) {
             listener.exitIntervalValue(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalValue) {
            return visitor.visitIntervalValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitInMultiUnitsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECOND, 0);
    }
    public KW_NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECONDS, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECOND, 0);
    }
    public KW_MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECOND, 0);
    }
    public KW_MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECONDS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECONDS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTES, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOURS, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYS, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEKS, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTHS, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEARS, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unitInMultiUnits;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnitInMultiUnits) {
             listener.enterUnitInMultiUnits(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnitInMultiUnits) {
             listener.exitUnitInMultiUnits(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnitInMultiUnits) {
            return visitor.visitUnitInMultiUnits(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnitInUnitToUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_unitInUnitToUnit;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterUnitInUnitToUnit) {
             listener.enterUnitInUnitToUnit(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitUnitInUnitToUnit) {
             listener.exitUnitInUnitToUnit(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnitInUnitToUnit) {
            return visitor.visitUnitInUnitToUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColPositionContext extends antlr.ParserRuleContext {
    public _position?: Token | null;
    public _afterCol?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AFTER, 0);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colPosition;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColPosition) {
             listener.enterColPosition(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColPosition) {
             listener.exitColPosition(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColPosition) {
            return visitor.visitColPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeContext extends antlr.ParserRuleContext {
    public _unsupportedType?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOOLEAN, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TINYINT, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BYTE, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SMALLINT, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHORT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTEGER, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BIGINT, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LONG, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FLOAT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REAL, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DOUBLE, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRING, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHARACTER, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHAR, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARCHAR, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECIMAL, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEC, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NUMERIC, 0);
    }
    public KW_VOID(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VOID, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARRAY, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_type;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterType) {
             listener.enterType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitType) {
             listener.exitType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitType) {
            return visitor.visitType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeContext extends antlr.ParserRuleContext {
    public _complex?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LT, 0);
    }
    public dataType(): DataTypeContext[];
    public dataType(i: number): DataTypeContext | null;
    public dataType(i?: number): DataTypeContext[] | DataTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DataTypeContext);
        }

        return this.getRuleContext(i, DataTypeContext);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.GT, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARRAY, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public NEQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.NEQ, 0);
    }
    public complexColTypeList(): ComplexColTypeListContext | null {
        return this.getRuleContext(0, ComplexColTypeListContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_MONTH(): antlr.TerminalNode[];
    public KW_MONTH(i: number): antlr.TerminalNode | null;
    public KW_MONTH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_MONTH);
    	} else {
    		return this.getToken(SparkSqlParser.KW_MONTH, i);
    	}
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TO, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode[];
    public KW_HOUR(i: number): antlr.TerminalNode | null;
    public KW_HOUR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_HOUR);
    	} else {
    		return this.getToken(SparkSqlParser.KW_HOUR, i);
    	}
    }
    public KW_MINUTE(): antlr.TerminalNode[];
    public KW_MINUTE(i: number): antlr.TerminalNode | null;
    public KW_MINUTE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_MINUTE);
    	} else {
    		return this.getToken(SparkSqlParser.KW_MINUTE, i);
    	}
    }
    public KW_SECOND(): antlr.TerminalNode[];
    public KW_SECOND(i: number): antlr.TerminalNode | null;
    public KW_SECOND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_SECOND);
    	} else {
    		return this.getToken(SparkSqlParser.KW_SECOND, i);
    	}
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(SparkSqlParser.INTEGER_VALUE, i);
    	}
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_dataType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDataType) {
             listener.enterDataType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDataType) {
             listener.exitDataType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDataType) {
            return visitor.visitDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionSeqForAddContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedColTypeWithPositionForAdd(): QualifiedColTypeWithPositionForAddContext[];
    public qualifiedColTypeWithPositionForAdd(i: number): QualifiedColTypeWithPositionForAddContext | null;
    public qualifiedColTypeWithPositionForAdd(i?: number): QualifiedColTypeWithPositionForAddContext[] | QualifiedColTypeWithPositionForAddContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedColTypeWithPositionForAddContext);
        }

        return this.getRuleContext(i, QualifiedColTypeWithPositionForAddContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedColTypeWithPositionSeqForAdd;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionSeqForAdd) {
             listener.enterQualifiedColTypeWithPositionSeqForAdd(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionSeqForAdd) {
             listener.exitQualifiedColTypeWithPositionSeqForAdd(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionSeqForAdd) {
            return visitor.visitQualifiedColTypeWithPositionSeqForAdd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionForAddContext extends antlr.ParserRuleContext {
    public _name?: ColumnNameCreateContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext[];
    public colDefinitionDescriptorWithPosition(i: number): ColDefinitionDescriptorWithPositionContext | null;
    public colDefinitionDescriptorWithPosition(i?: number): ColDefinitionDescriptorWithPositionContext[] | ColDefinitionDescriptorWithPositionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColDefinitionDescriptorWithPositionContext);
        }

        return this.getRuleContext(i, ColDefinitionDescriptorWithPositionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedColTypeWithPositionForAdd;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionForAdd) {
             listener.enterQualifiedColTypeWithPositionForAdd(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionForAdd) {
             listener.exitQualifiedColTypeWithPositionForAdd(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionForAdd) {
            return visitor.visitQualifiedColTypeWithPositionForAdd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionSeqForReplaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedColTypeWithPositionForReplace(): QualifiedColTypeWithPositionForReplaceContext[];
    public qualifiedColTypeWithPositionForReplace(i: number): QualifiedColTypeWithPositionForReplaceContext | null;
    public qualifiedColTypeWithPositionForReplace(i?: number): QualifiedColTypeWithPositionForReplaceContext[] | QualifiedColTypeWithPositionForReplaceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedColTypeWithPositionForReplaceContext);
        }

        return this.getRuleContext(i, QualifiedColTypeWithPositionForReplaceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedColTypeWithPositionSeqForReplace;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionSeqForReplace) {
             listener.enterQualifiedColTypeWithPositionSeqForReplace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionSeqForReplace) {
             listener.exitQualifiedColTypeWithPositionSeqForReplace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionSeqForReplace) {
            return visitor.visitQualifiedColTypeWithPositionSeqForReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedColTypeWithPositionForReplaceContext extends antlr.ParserRuleContext {
    public _name?: ColumnNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public colDefinitionDescriptorWithPosition(): ColDefinitionDescriptorWithPositionContext[];
    public colDefinitionDescriptorWithPosition(i: number): ColDefinitionDescriptorWithPositionContext | null;
    public colDefinitionDescriptorWithPosition(i?: number): ColDefinitionDescriptorWithPositionContext[] | ColDefinitionDescriptorWithPositionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColDefinitionDescriptorWithPositionContext);
        }

        return this.getRuleContext(i, ColDefinitionDescriptorWithPositionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedColTypeWithPositionForReplace;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedColTypeWithPositionForReplace) {
             listener.enterQualifiedColTypeWithPositionForReplace(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedColTypeWithPositionForReplace) {
             listener.exitQualifiedColTypeWithPositionForReplace(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedColTypeWithPositionForReplace) {
            return visitor.visitQualifiedColTypeWithPositionForReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColDefinitionDescriptorWithPositionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public defaultExpression(): DefaultExpressionContext | null {
        return this.getRuleContext(0, DefaultExpressionContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public colPosition(): ColPositionContext | null {
        return this.getRuleContext(0, ColPositionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colDefinitionDescriptorWithPosition;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColDefinitionDescriptorWithPosition) {
             listener.enterColDefinitionDescriptorWithPosition(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColDefinitionDescriptorWithPosition) {
             listener.exitColDefinitionDescriptorWithPosition(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColDefinitionDescriptorWithPosition) {
            return visitor.visitColDefinitionDescriptorWithPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEFAULT(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_defaultExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterDefaultExpression) {
             listener.enterDefaultExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitDefaultExpression) {
             listener.exitDefaultExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefaultExpression) {
            return visitor.visitDefaultExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDefaultExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EQ, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_variableDefaultExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterVariableDefaultExpression) {
             listener.enterVariableDefaultExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitVariableDefaultExpression) {
             listener.exitVariableDefaultExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableDefaultExpression) {
            return visitor.visitVariableDefaultExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnType(): ColumnTypeContext[];
    public columnType(i: number): ColumnTypeContext | null;
    public columnType(i?: number): ColumnTypeContext[] | ColumnTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeContext);
        }

        return this.getRuleContext(i, ColumnTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colTypeList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColTypeList) {
             listener.enterColTypeList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColTypeList) {
             listener.exitColTypeList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColTypeList) {
            return visitor.visitColTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnTypeContext extends antlr.ParserRuleContext {
    public _colName?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_columnType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColumnType) {
             listener.enterColumnType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColumnType) {
             listener.exitColumnType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnType) {
            return visitor.visitColumnType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateOrReplaceTableColTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createOrReplaceTableColType(): CreateOrReplaceTableColTypeContext[];
    public createOrReplaceTableColType(i: number): CreateOrReplaceTableColTypeContext | null;
    public createOrReplaceTableColType(i?: number): CreateOrReplaceTableColTypeContext[] | CreateOrReplaceTableColTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateOrReplaceTableColTypeContext);
        }

        return this.getRuleContext(i, CreateOrReplaceTableColTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createOrReplaceTableColTypeList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateOrReplaceTableColTypeList) {
             listener.enterCreateOrReplaceTableColTypeList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateOrReplaceTableColTypeList) {
             listener.exitCreateOrReplaceTableColTypeList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateOrReplaceTableColTypeList) {
            return visitor.visitCreateOrReplaceTableColTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateOrReplaceTableColTypeContext extends antlr.ParserRuleContext {
    public _colName?: ColumnNameCreateContext;
    public _colType?: DataTypeContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public colDefinitionOption(): ColDefinitionOptionContext[];
    public colDefinitionOption(i: number): ColDefinitionOptionContext | null;
    public colDefinitionOption(i?: number): ColDefinitionOptionContext[] | ColDefinitionOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColDefinitionOptionContext);
        }

        return this.getRuleContext(i, ColDefinitionOptionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_createOrReplaceTableColType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCreateOrReplaceTableColType) {
             listener.enterCreateOrReplaceTableColType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCreateOrReplaceTableColType) {
             listener.exitCreateOrReplaceTableColType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateOrReplaceTableColType) {
            return visitor.visitCreateOrReplaceTableColType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColDefinitionOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public defaultExpression(): DefaultExpressionContext | null {
        return this.getRuleContext(0, DefaultExpressionContext);
    }
    public generationExpression(): GenerationExpressionContext | null {
        return this.getRuleContext(0, GenerationExpressionContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_colDefinitionOption;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterColDefinitionOption) {
             listener.enterColDefinitionOption(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitColDefinitionOption) {
             listener.exitColDefinitionOption(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColDefinitionOption) {
            return visitor.visitColDefinitionOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GenerationExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GENERATED(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_GENERATED, 0)!;
    }
    public KW_ALWAYS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ALWAYS, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public LEFT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RIGHT_PAREN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_generationExpression;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterGenerationExpression) {
             listener.enterGenerationExpression(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitGenerationExpression) {
             listener.exitGenerationExpression(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGenerationExpression) {
            return visitor.visitGenerationExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComplexColTypeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public complexColType(): ComplexColTypeContext[];
    public complexColType(i: number): ComplexColTypeContext | null;
    public complexColType(i?: number): ComplexColTypeContext[] | ComplexColTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ComplexColTypeContext);
        }

        return this.getRuleContext(i, ComplexColTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_complexColTypeList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterComplexColTypeList) {
             listener.enterComplexColTypeList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitComplexColTypeList) {
             listener.exitComplexColTypeList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComplexColTypeList) {
            return visitor.visitComplexColTypeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComplexColTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public dataType(): DataTypeContext {
        return this.getRuleContext(0, DataTypeContext)!;
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.COLON, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_complexColType;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterComplexColType) {
             listener.enterComplexColType(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitComplexColType) {
             listener.exitComplexColType(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComplexColType) {
            return visitor.visitComplexColType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClauseContext extends antlr.ParserRuleContext {
    public _condition?: ExpressionContext;
    public _result?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WHEN, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_THEN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_whenClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWhenClause) {
             listener.enterWhenClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWhenClause) {
             listener.exitWhenClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WINDOW(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_WINDOW, 0)!;
    }
    public namedWindow(): NamedWindowContext[];
    public namedWindow(i: number): NamedWindowContext | null;
    public namedWindow(i?: number): NamedWindowContext[] | NamedWindowContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedWindowContext);
        }

        return this.getRuleContext(i, NamedWindowContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_windowClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWindowClause) {
             listener.enterWindowClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWindowClause) {
             listener.exitWindowClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ZorderClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ZORDER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_ZORDER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_BY, 0)!;
    }
    public columnNameSeq(): ColumnNameSeqContext {
        return this.getRuleContext(0, ColumnNameSeqContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_zorderClause;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterZorderClause) {
             listener.enterZorderClause(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitZorderClause) {
             listener.exitZorderClause(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitZorderClause) {
            return visitor.visitZorderClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedWindowContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.KW_AS, 0)!;
    }
    public windowSpec(): WindowSpecContext {
        return this.getRuleContext(0, WindowSpecContext)!;
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_namedWindow;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNamedWindow) {
             listener.enterNamedWindow(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNamedWindow) {
             listener.exitNamedWindow(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNamedWindow) {
            return visitor.visitNamedWindow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecContext extends antlr.ParserRuleContext {
    public _name?: ErrorCapturingIdentifierContext;
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public errorCapturingIdentifier(): ErrorCapturingIdentifierContext | null {
        return this.getRuleContext(0, ErrorCapturingIdentifierContext);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTER, 0);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.KW_BY);
    	} else {
    		return this.getToken(SparkSqlParser.KW_BY, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public windowFrame(): WindowFrameContext | null {
        return this.getRuleContext(0, WindowFrameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_windowSpec;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWindowSpec) {
             listener.enterWindowSpec(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWindowSpec) {
             listener.exitWindowSpec(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowSpec) {
            return visitor.visitWindowSpec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameContext extends antlr.ParserRuleContext {
    public _frameType?: Token | null;
    public _start_?: FrameBoundContext;
    public _end?: FrameBoundContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RANGE, 0);
    }
    public frameBound(): FrameBoundContext[];
    public frameBound(i: number): FrameBoundContext | null;
    public frameBound(i?: number): FrameBoundContext[] | FrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameBoundContext);
        }

        return this.getRuleContext(i, FrameBoundContext);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROWS, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BETWEEN, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_windowFrame;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterWindowFrame) {
             listener.enterWindowFrame(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitWindowFrame) {
             listener.exitWindowFrame(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrame) {
            return visitor.visitWindowFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBoundContext extends antlr.ParserRuleContext {
    public _boundType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRECEDING, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOLLOWING, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROW, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_frameBound;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFrameBound) {
             listener.enterFrameBound(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFrameBound) {
             listener.exitFrameBound(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrameBound) {
            return visitor.visitFrameBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.COMMA);
    	} else {
    		return this.getToken(SparkSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedNameList;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedNameList) {
             listener.enterQualifiedNameList(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedNameList) {
             listener.exitQualifiedNameList(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedNameList) {
            return visitor.visitQualifiedNameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public LEFT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.LEFT_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public RIGHT_PAREN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.RIGHT_PAREN, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILTER, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEFT, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RIGHT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionName) {
             listener.enterFunctionName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionName) {
             listener.exitFunctionName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_functionNameCreate;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterFunctionNameCreate) {
             listener.enterFunctionNameCreate(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitFunctionNameCreate) {
             listener.exitFunctionNameCreate(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameCreate) {
            return visitor.visitFunctionNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.DOT);
    	} else {
    		return this.getToken(SparkSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_qualifiedName;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQualifiedName) {
             listener.enterQualifiedName(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQualifiedName) {
             listener.exitQualifiedName(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public errorCapturingIdentifierExtra(): ErrorCapturingIdentifierExtraContext {
        return this.getRuleContext(0, ErrorCapturingIdentifierExtraContext)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_errorCapturingIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterErrorCapturingIdentifier) {
             listener.enterErrorCapturingIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitErrorCapturingIdentifier) {
             listener.exitErrorCapturingIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingIdentifier) {
            return visitor.visitErrorCapturingIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ErrorCapturingIdentifierExtraContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(SparkSqlParser.MINUS);
    	} else {
    		return this.getToken(SparkSqlParser.MINUS, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_errorCapturingIdentifierExtra;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterErrorCapturingIdentifierExtra) {
             listener.enterErrorCapturingIdentifierExtra(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitErrorCapturingIdentifierExtra) {
             listener.exitErrorCapturingIdentifierExtra(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitErrorCapturingIdentifierExtra) {
            return visitor.visitErrorCapturingIdentifierExtra(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public strictIdentifier(): StrictIdentifierContext | null {
        return this.getRuleContext(0, StrictIdentifierContext);
    }
    public strictNonReserved(): StrictNonReservedContext | null {
        return this.getRuleContext(0, StrictNonReservedContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_identifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterIdentifier) {
             listener.enterIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitIdentifier) {
             listener.exitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StrictIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.IDENTIFIER, 0);
    }
    public quotedIdentifier(): QuotedIdentifierContext | null {
        return this.getRuleContext(0, QuotedIdentifierContext);
    }
    public ansiNonReserved(): AnsiNonReservedContext | null {
        return this.getRuleContext(0, AnsiNonReservedContext);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_strictIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStrictIdentifier) {
             listener.enterStrictIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStrictIdentifier) {
             listener.exitStrictIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStrictIdentifier) {
            return visitor.visitStrictIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotedIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BACKQUOTED_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.BACKQUOTED_IDENTIFIER, 0);
    }
    public DOUBLEQUOTED_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOUBLEQUOTED_STRING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_quotedIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterQuotedIdentifier) {
             listener.enterQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitQuotedIdentifier) {
             listener.exitQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuotedIdentifier) {
            return visitor.visitQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BackQuotedIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BACKQUOTED_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(SparkSqlParser.BACKQUOTED_IDENTIFIER, 0)!;
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_backQuotedIdentifier;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterBackQuotedIdentifier) {
             listener.enterBackQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitBackQuotedIdentifier) {
             listener.exitBackQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBackQuotedIdentifier) {
            return visitor.visitBackQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPONENT_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.EXPONENT_VALUE, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.MINUS, 0);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DECIMAL_VALUE, 0);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public BIGINT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.BIGINT_LITERAL, 0);
    }
    public SMALLINT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.SMALLINT_LITERAL, 0);
    }
    public TINYINT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.TINYINT_LITERAL, 0);
    }
    public DOUBLE_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOUBLE_LITERAL, 0);
    }
    public FLOAT_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.FLOAT_LITERAL, 0);
    }
    public BIGDECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.BIGDECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_number;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNumber) {
             listener.enterNumber(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNumber) {
             listener.exitNumber(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNumber) {
            return visitor.visitNumber(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterColumnActionContext extends antlr.ParserRuleContext {
    public _setOrDrop?: Token | null;
    public _dropDefault?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TYPE, 0);
    }
    public dataType(): DataTypeContext | null {
        return this.getRuleContext(0, DataTypeContext);
    }
    public commentSpec(): CommentSpecContext | null {
        return this.getRuleContext(0, CommentSpecContext);
    }
    public colPosition(): ColPositionContext | null {
        return this.getRuleContext(0, ColPositionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public defaultExpression(): DefaultExpressionContext | null {
        return this.getRuleContext(0, DefaultExpressionContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_alterColumnAction;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAlterColumnAction) {
             listener.enterAlterColumnAction(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAlterColumnAction) {
             listener.exitAlterColumnAction(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterColumnAction) {
            return visitor.visitAlterColumnAction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringLitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.STRING_LITERAL, 0);
    }
    public DOUBLEQUOTED_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.DOUBLEQUOTED_STRING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_stringLit;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStringLit) {
             listener.enterStringLit(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStringLit) {
             listener.exitStringLit(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStringLit) {
            return visitor.visitStringLit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommentStrContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_commentStr;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterCommentStr) {
             listener.enterCommentStr(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitCommentStr) {
             listener.exitCommentStr(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommentStr) {
            return visitor.visitCommentStr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VersionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.INTEGER_VALUE, 0);
    }
    public stringLit(): StringLitContext | null {
        return this.getRuleContext(0, StringLitContext);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_version;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterVersion) {
             listener.enterVersion(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitVersion) {
             listener.exitVersion(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVersion) {
            return visitor.visitVersion(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnsiNonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ADD, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AFTER, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALTER, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALWAYS, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANALYZE, 0);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANTI, 0);
    }
    public KW_ANY_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY_VALUE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARCHIVE, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARRAY, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ASC, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AT, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BETWEEN, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BIGINT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY, 0);
    }
    public KW_BINARY_HEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY_HEX, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOOLEAN, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKET, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKETS, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BYTE, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CACHE, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASCADE, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOG, 0);
    }
    public KW_CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOGS, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHANGE, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHAR, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHARACTER, 0);
    }
    public KW_CLEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLEAR, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTER, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTERED, 0);
    }
    public KW_CODEGEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CODEGEN, 0);
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLLECTION, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMIT, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPUTE, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CONCATENATE, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COST, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CUBE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATA, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASES, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE, 0);
    }
    public KW_DATEADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEADD, 0);
    }
    public KW_DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_ADD, 0);
    }
    public KW_DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEDIFF, 0);
    }
    public KW_DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_DIFF, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYS, 0);
    }
    public KW_DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYOFYEAR, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECIMAL, 0);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECLARE, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFINED, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELIMITED, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_DFS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DFS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORIES, 0);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISABLE, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIV, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DOUBLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ENABLE, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPED, 0);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCHANGE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCLUDE, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPORT, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTERNAL, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTRACT, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIELDS, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILEFORMAT, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FLOAT, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOLLOWING, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMAT, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMATTED, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GENERATED, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GLOBAL, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUPING, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOURS, 0);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IF, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IGNORE, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IMPORT, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INCLUDE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEXES, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPATH, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INSERT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTEGER, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ITEMS, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_KEYS, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAST, 0);
    }
    public KW_LAZY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAZY, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ILIKE, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIMIT, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LINES, 0);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIST, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOAD, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCK, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCKS, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOGICAL, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LONG, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MACRO, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_MATCHED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MERGE, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECOND, 0);
    }
    public KW_MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECOND, 0);
    }
    public KW_MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECONDS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTES, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTHS, 0);
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MSCK, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAME, 0);
    }
    public KW_NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACE, 0);
    }
    public KW_NAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACES, 0);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECOND, 0);
    }
    public KW_NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECONDS, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NO, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NUMERIC, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OF, 0);
    }
    public KW_OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIMIZE, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTION, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUT, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVER, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERLAY, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERWRITE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONED, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0);
    }
    public KW_PERCENTLIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTLIT, 0);
    }
    public KW_PIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PIVOT, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PLACING, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_POSITION, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRECEDING, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRINCIPALS, 0);
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PROPERTIES, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PURGE, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUARTER, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUERY, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RANGE, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REAL, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDREADER, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDWRITER, 0);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECOVER, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REDUCE, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RENAME, 0);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPAIR, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPEATABLE, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESET, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESPECT, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESTRICT, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REVOKE, 0);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REWRITE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REGEXP, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLE, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLES, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLUP, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROWS, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMAS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECONDS, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEMI, 0);
    }
    public KW_SEPARATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEPARATED, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUS, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SETS, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHORT, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHOW, 0);
    }
    public KW_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SINGLE, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SKEWED, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SMALLINT, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORTED, 0);
    }
    public KW_SOURCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SOURCE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_START, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STATISTICS, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STORED, 0);
    }
    public KW_STRATIFY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRATIFY, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRING, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public KW_SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTR, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTRING, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYNC, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLES, 0);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLESAMPLE, 0);
    }
    public KW_TARGET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TARGET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TERMINATED, 0);
    }
    public KW_TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMEDIFF, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPADD, 0);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TINYINT, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TOUCH, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSFORM, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRIM, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUE, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUNCATE, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRY_CAST, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TYPE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_UNCACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNCACHE, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNLOCK, 0);
    }
    public KW_UNPIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNPIVOT, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNSET, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USE, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VALUES, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARCHAR, 0);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VAR, 0);
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEWS, 0);
    }
    public KW_VOID(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VOID, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEKS, 0);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WINDOW, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEARS, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZONE, 0);
    }
    public KW_ZORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZORDER, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_ansiNonReserved;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterAnsiNonReserved) {
             listener.enterAnsiNonReserved(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitAnsiNonReserved) {
             listener.exitAnsiNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnsiNonReserved) {
            return visitor.visitAnsiNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StrictNonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANTI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANTI, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CROSS, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCEPT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FULL, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INNER, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERSECT, 0);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_JOIN, 0);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LATERAL, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEFT, 0);
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NATURAL, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ON, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RIGHT, 0);
    }
    public KW_SEMI(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEMI, 0);
    }
    public KW_MINUS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUS, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNION, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USING, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_strictNonReserved;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterStrictNonReserved) {
             listener.enterStrictNonReserved(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitStrictNonReserved) {
             listener.exitStrictNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStrictNonReserved) {
            return visitor.visitStrictNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ADD, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AFTER, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALL, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALTER, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ALWAYS, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANALYZE, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AND, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY, 0);
    }
    public KW_ANY_VALUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ANY_VALUE, 0);
    }
    public KW_ARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARCHIVE, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ARRAY, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ASC, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AT, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BETWEEN, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BIGINT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY, 0);
    }
    public KW_BINARY_HEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BINARY_HEX, 0);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOOLEAN, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BOTH, 0);
    }
    public KW_BUCKET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKET, 0);
    }
    public KW_BUCKETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BUCKETS, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BY, 0);
    }
    public KW_BYTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_BYTE, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CACHE, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASCADE, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CASE, 0);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CAST, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOG, 0);
    }
    public KW_CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CATALOGS, 0);
    }
    public KW_CHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHANGE, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHAR, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHARACTER, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CHECK, 0);
    }
    public KW_CLEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLEAR, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTER, 0);
    }
    public KW_CLUSTERED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CLUSTERED, 0);
    }
    public KW_CODEGEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CODEGEN, 0);
    }
    public KW_COLLATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLLATE, 0);
    }
    public KW_COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLLECTION, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMN, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMENT, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMMIT, 0);
    }
    public KW_COMPACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACT, 0);
    }
    public KW_COMPACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPACTIONS, 0);
    }
    public KW_COMPUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COMPUTE, 0);
    }
    public KW_CONCATENATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CONCATENATE, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_COST, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CREATE, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CUBE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT, 0);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_TIME, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATA, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASE, 0);
    }
    public KW_DATABASES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATABASES, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE, 0);
    }
    public KW_DATEADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEADD, 0);
    }
    public KW_DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_ADD, 0);
    }
    public KW_DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATEDIFF, 0);
    }
    public KW_DATE_DIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DATE_DIFF, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAY, 0);
    }
    public KW_DAYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYS, 0);
    }
    public KW_DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DAYOFYEAR, 0);
    }
    public KW_DBPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DBPROPERTIES, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECIMAL, 0);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DECLARE, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFAULT, 0);
    }
    public KW_DEFINED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DEFINED, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELETE, 0);
    }
    public KW_DELIMITED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DELIMITED, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DESCRIBE, 0);
    }
    public KW_DFS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DFS, 0);
    }
    public KW_DIRECTORIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORIES, 0);
    }
    public KW_DIRECTORY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIRECTORY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISABLE, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTINCT, 0);
    }
    public KW_DISTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DISTRIBUTE, 0);
    }
    public KW_DIV(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DIV, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DOUBLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_DROP, 0);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ELSE, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ENABLE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_END, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPE, 0);
    }
    public KW_ESCAPED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ESCAPED, 0);
    }
    public KW_EXCHANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCHANGE, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXCLUDE, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXISTS, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXPORT, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTENDED, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTERNAL, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_EXTRACT, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FALSE, 0);
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FETCH, 0);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILTER, 0);
    }
    public KW_FIELDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIELDS, 0);
    }
    public KW_FILEFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FILEFORMAT, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FIRST, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FLOAT, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOLLOWING, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOR, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FOREIGN, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMAT, 0);
    }
    public KW_FORMATTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FORMATTED, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTION, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GENERATED, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GLOBAL, 0);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GRANT, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUP, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_GROUPING, 0);
    }
    public KW_HAVING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HAVING, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOUR, 0);
    }
    public KW_HOURS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_HOURS, 0);
    }
    public KW_IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IDENTIFIER, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IF, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IGNORE, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IMPORT, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IN, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INCLUDE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INDEXES, 0);
    }
    public KW_INPATH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPATH, 0);
    }
    public KW_INPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INPUTFORMAT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INSERT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTEGER, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTERVAL, 0);
    }
    public KW_INTO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_INTO, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_IS, 0);
    }
    public KW_ITEMS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ITEMS, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_KEYS, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAST, 0);
    }
    public KW_LAZY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LAZY, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LEADING, 0);
    }
    public KW_LIFECYCLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIFECYCLE, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIKE, 0);
    }
    public KW_LONG(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LONG, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ILIKE, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIMIT, 0);
    }
    public KW_LINES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LINES, 0);
    }
    public KW_LIST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LIST, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOAD, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCAL, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCK, 0);
    }
    public KW_LOCKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOCKS, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_LOGICAL, 0);
    }
    public KW_MACRO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MACRO, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MAP, 0);
    }
    public KW_MATCHED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATCHED, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MERGE, 0);
    }
    public KW_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECOND, 0);
    }
    public KW_MICROSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MICROSECONDS, 0);
    }
    public KW_MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECOND, 0);
    }
    public KW_MILLISECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MILLISECONDS, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTE, 0);
    }
    public KW_MINUTES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MINUTES, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTH, 0);
    }
    public KW_MONTHS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MONTHS, 0);
    }
    public KW_MSCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_MSCK, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAME, 0);
    }
    public KW_NAMESPACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACE, 0);
    }
    public KW_NAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NAMESPACES, 0);
    }
    public KW_NANOSECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECOND, 0);
    }
    public KW_NANOSECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NANOSECONDS, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NO, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULL, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NULLS, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_NUMERIC, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OF, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OFFSET, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ONLY, 0);
    }
    public KW_OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIMIZE, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTION, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OPTIONS, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OR, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ORDER, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUT, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTER, 0);
    }
    public KW_OUTPUTFORMAT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OUTPUTFORMAT, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVER, 0);
    }
    public KW_OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERLAPS, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERLAY, 0);
    }
    public KW_OVERWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_OVERWRITE, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITION, 0);
    }
    public KW_PARTITIONED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONED, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PARTITIONS, 0);
    }
    public KW_PERCENTILE_CONT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTILE_CONT, 0);
    }
    public KW_PERCENTILE_DISC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTILE_DISC, 0);
    }
    public KW_PERCENTLIT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PERCENTLIT, 0);
    }
    public KW_PIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PIVOT, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PLACING, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_POSITION, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRECEDING, 0);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRIMARY, 0);
    }
    public KW_PRINCIPALS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PRINCIPALS, 0);
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PROPERTIES, 0);
    }
    public KW_PURGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_PURGE, 0);
    }
    public KW_QUARTER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUARTER, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_QUERY, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RANGE, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REAL, 0);
    }
    public KW_RECORDREADER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDREADER, 0);
    }
    public KW_RECORDWRITER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECORDWRITER, 0);
    }
    public KW_RECOVER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RECOVER, 0);
    }
    public KW_REDUCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REDUCE, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REFERENCES, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REFRESH, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RENAME, 0);
    }
    public KW_REPAIR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPAIR, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPEATABLE, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REPLACE, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESET, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESPECT, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RESTRICT, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REVOKE, 0);
    }
    public KW_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REWRITE, 0);
    }
    public KW_RLIKE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_RLIKE, 0);
    }
    public KW_REGEXP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_REGEXP, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLE, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLES, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROLLUP, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ROWS, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SCHEMAS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECOND, 0);
    }
    public KW_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SECONDS, 0);
    }
    public KW_SEPARATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SEPARATED, 0);
    }
    public KW_SERDE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDE, 0);
    }
    public KW_SERDEPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SERDEPROPERTIES, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SESSION_USER, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SET, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SETS, 0);
    }
    public KW_SHORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHORT, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SHOW, 0);
    }
    public KW_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SINGLE, 0);
    }
    public KW_SKEWED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SKEWED, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SMALLINT, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SOME, 0);
    }
    public KW_SORT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORT, 0);
    }
    public KW_SORTED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SORTED, 0);
    }
    public KW_SOURCE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SOURCE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_START, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STATISTICS, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STORED, 0);
    }
    public KW_STRATIFY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRATIFY, 0);
    }
    public KW_STRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRING, 0);
    }
    public KW_STRUCT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_STRUCT, 0);
    }
    public KW_SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTR, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SUBSTRING, 0);
    }
    public KW_SYNC(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYNC, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM, 0);
    }
    public KW_SYSTEM_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_TIME, 0);
    }
    public KW_SYSTEM_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_SYSTEM_VERSION, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLES, 0);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TABLESAMPLE, 0);
    }
    public KW_TARGET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TARGET, 0);
    }
    public KW_TBLPROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TBLPROPERTIES, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TERMINATED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TERMINATED, 0);
    }
    public KW_THEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_THEN, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIME, 0);
    }
    public KW_TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMEDIFF, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIMESTAMP_LTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_LTZ, 0);
    }
    public KW_TIMESTAMP_NTZ(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMP_NTZ, 0);
    }
    public KW_TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPADD, 0);
    }
    public KW_TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TIMESTAMPDIFF, 0);
    }
    public KW_TINYINT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TINYINT, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TO, 0);
    }
    public KW_TOUCH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TOUCH, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRAILING, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSACTIONS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSACTIONS, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRANSFORM, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRIM, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUE, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRUNCATE, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TRY_CAST, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_TYPE, 0);
    }
    public KW_UNARCHIVE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNARCHIVE, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_UNCACHE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNCACHE, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNIQUE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNKNOWN, 0);
    }
    public KW_UNLOCK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNLOCK, 0);
    }
    public KW_UNPIVOT(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNPIVOT, 0);
    }
    public KW_UNSET(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UNSET, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_UPDATE, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_USER, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VALUES, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARCHAR, 0);
    }
    public KW_VAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VAR, 0);
    }
    public KW_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VARIABLE, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VIEWS, 0);
    }
    public KW_VOID(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_VOID, 0);
    }
    public KW_WEEK(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEK, 0);
    }
    public KW_WEEKS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WEEKS, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WHEN, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WHERE, 0);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WINDOW, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITH, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_WITHIN, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEAR, 0);
    }
    public KW_YEARS(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_YEARS, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZONE, 0);
    }
    public KW_ZORDER(): antlr.TerminalNode | null {
        return this.getToken(SparkSqlParser.KW_ZORDER, 0);
    }
    public override get ruleIndex(): number {
        return SparkSqlParser.RULE_nonReserved;
    }
    public override enterRule(listener: SparkSqlParserListener): void {
        if(listener.enterNonReserved) {
             listener.enterNonReserved(this);
        }
    }
    public override exitRule(listener: SparkSqlParserListener): void {
        if(listener.exitNonReserved) {
             listener.exitNonReserved(this);
        }
    }
    public override accept<Result>(visitor: SparkSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
